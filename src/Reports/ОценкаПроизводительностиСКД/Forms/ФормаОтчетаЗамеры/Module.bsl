

&НаСервере
Функция ПолучитьПараметрПользовательскойНастройкиНаСервере(ИмяПараметра, ТипПараметра)
	Если ТипПараметра = "ПараметрыДанных" Тогда
		ПараметрНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки[ТипПараметра].Элементы.Найти(ИмяПараметра);
		ПараметрПользовательскойНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрНастройки.ИдентификаторПользовательскойНастройки);
	ИначеЕсли ТипПараметра = "Отбор" Тогда
		ПараметрОтбора = Неопределено;
		Для Каждого ТекЭлемент Из ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки[ТипПараметра].Элементы Цикл
			Если Строка(ТекЭлемент.ЛевоеЗначение) = ИмяПараметра Тогда
				ПараметрОтбора = ТекЭлемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ПараметрПользовательскойНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрОтбора.ИдентификаторПользовательскойНастройки);
	КонецЕсли;
		
	Возврат ПараметрПользовательскойНастройки;
КонецФункции

&НаСервере
Процедура ИнициализироватьСхемуКомпоновки()
	
	ЭтотОбъект.Сформировать = ЭтотОбъект.Параметры.Сформировать;
	
	Схема = Отчеты.ОценкаПроизводительностиСКД.ПолучитьМакет("СхемаКомпоновкиДанныхЗамеры");
	URLСхемы = ПоместитьВоВременноеХранилище(Схема, ЭтотОбъект.УникальныйИдентификатор);
	
	//два клиент-серверных вызова
	ЭтотОбъект.Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
		
	ЭтотОбъект.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	
	ДатаНачалаПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("ДатаНачала", "ПараметрыДанных");
	Если ЭтотОбъект.Параметры.Свойство("Период") Тогда
		ДатаНачалаПараметр.Значение = ЭтотОбъект.Параметры.Период.ДатаНачала;
	Иначе
		ДатаНачалаПараметр.Значение = НачалоДня(ТекущаяДата());
	КонецЕсли;
	ДатаНачалаПараметр.Использование = Истина;
	
	ДатаОкончанияПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("ДатаОкончания", "ПараметрыДанных");
	Если ЭтотОбъект.Параметры.Свойство("Период") Тогда
		ДатаОкончанияПараметр.Значение = ЭтотОбъект.Параметры.Период.ДатаОкончания;
	Иначе
		ДатаОкончанияПараметр.Значение = КонецДня(ТекущаяДата());
	КонецЕсли;
	ДатаОкончанияПараметр.Использование = Истина;
	
	ИнформационнаяБазаПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("ОбъектКонтроля", "Отбор");
	Если ЭтотОбъект.Параметры.Свойство("ИнформационнаяБаза") Тогда
		ИнформационнаяБазаПараметр.ВидСравнения = ЭтотОбъект.Параметры.ИнформационнаяБаза.ВидСравнения;
		ИнформационнаяБазаПараметр.ПравоеЗначение = ЭтотОбъект.Параметры.ИнформационнаяБаза.ПравоеЗначение;
		ИнформационнаяБазаПараметр.Использование = ЭтотОбъект.Параметры.ИнформационнаяБаза.Использование;
	Иначе
		ИнформационнаяБазаПараметр.Использование = Ложь;
	КонецЕсли;
	
	КлючеваяОперацияПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("Имя", "Отбор");
	Если ЭтотОбъект.Параметры.Свойство("КлючеваяОперация") Тогда
		КлючеваяОперацияПараметр.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КлючеваяОперацияПараметр.ПравоеЗначение = ЭтотОбъект.Параметры.КлючеваяОперация;
		КлючеваяОперацияПараметр.Использование = Истина;
	Иначе
		КлючеваяОперацияПараметр.Использование = Ложь;
	КонецЕсли;
		
	ПользовательПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("Пользователь", "Отбор");
	Если ЭтотОбъект.Параметры.Свойство("Пользователь") Тогда
		ПользовательПараметр.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПользовательПараметр.ПравоеЗначение = ЭтотОбъект.Параметры.Пользователь;
		ПользовательПараметр.Использование = Истина;
	Иначе
		ПользовательПараметр.Использование = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	ИнициализироватьСхемуКомпоновки();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	ИнициализироватьСхемуКомпоновки();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПрограммно(Команда)
	СформироватьПрограммноНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура СформироватьПрограммноНаСервере()
	ЭтотОбъект.Результат.Очистить();
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровкиОбъект = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	СхемаКомпоновкиДанных = Отчеты.ОценкаПроизводительностиСКД.ПолучитьМакет("СхемаКомпоновкиДанныхЗамеры");
			
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ОбъектОтчет.КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровкиОбъект);
	
	ПКД = Новый ПроцессорКомпоновкиДанных;
	ПКД.Инициализировать(МакетКомпоновки,,ДанныеРасшифровкиОбъект, Истина);
	ПВ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПВ.УстановитьДокумент(ЭтотОбъект.Результат);
	
	//два клиент-серверных вызова
	ПВ.Вывести(ПКД);
	
	ТипЭлРасшифровки = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля");
	ДействиеОбработкиРасшифровкиКомпоновкиДанныхНет = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет;
	Для Каждого ТекЭлемент Из ДанныеРасшифровкиОбъект.Элементы Цикл
		Если ТипЗнч(ТекЭлемент) = ТипЭлРасшифровки Тогда
			ТекЭлемент.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанныхНет;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиОбъект, ЭтотОбъект.УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЭтотОбъект.Сформировать Тогда
		ПодключитьОбработчикОжидания("СформироватьПрограммноНаКлиенте", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПрограммноНаКлиенте()
	СформироватьПрограммноНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭлементЗначение = ЭтотОбъект.Элементы.Найти("КомпоновщикНастроекПользовательскиеНастройкиЗначение");
	ЭлементЗначение.КнопкаВыбора = Истина;
	ЭлементЗначение.УстановитьДействие("НачалоВыбора", "ЗначениеНачалоВыбора");
	ЭлементЗначение.УстановитьДействие("ОбработкаВыбора", "ЗначениеОбработкаВыбора");
	ЭлементЗначение.УстановитьДействие("ПриИзменении", "ЗначениеПриИзменении");
	
	ЭлементВидСравнения = ЭтотОбъект.Элементы.Найти("КомпоновщикНастроекПользовательскиеНастройкиВидСравнения");
	ЭлементВидСравнения.УстановитьДействие("НачалоВыбора", "ЗначениеНачалоВыбораВидСравнения");
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбораВидСравнения(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Родитель.ТекущиеДанные.Настройка = "Ключевая операция" Тогда
		ДанныеВыбора = Новый СписокЗначений; 
		ДанныеВыбора.Добавить(ВидСравненияКомпоновкиДанных.Равно);
		ДанныеВыбора.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Родитель.Родитель.ТекущиеДанные <> Неопределено И Элемент.Родитель.Родитель.ТекущиеДанные.Настройка = "Ключевая операция" Тогда
		ТекущаяСтрока = ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущаяСтрока;
		ЭлементОтбора = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ТекущаяСтрока);
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			МножественныйВыбор = Ложь;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			МножественныйВыбор = Истина;
		КонецЕсли;
		
		Ключ = Неопределено;
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") И ЭлементОтбора.ПравоеЗначение.Количество() > 0 Тогда
			Ключ = ЭлементОтбора.ПравоеЗначение;
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Строка") И ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			Ключ = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура("Ключ, МножественныйВыбор", Ключ, МножественныйВыбор);
		ФормаВыбораЗначения = ПолучитьФорму("РегистрСведений.ОценкаПроизводительностиКлючевыеОперации.Форма.ФормаВыбораИмяКлючевойОперации", ПараметрыОткрытия);
		ФормаВыбораЗначения.ВладелецФормы = Элемент;
		ФормаВыбораЗначения.Открыть();
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущиеДанные.Настройка = "Ключевая операция" Тогда
		ТекущаяСтрока = ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущаяСтрока;
		ЭлементОтбора = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ТекущаяСтрока);
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			ЭлементОтбора.ПравоеЗначение.Очистить();
			
			Для Каждого ТекЗначение Из ВыбранноеЗначение Цикл
				ЭлементОтбора.ПравоеЗначение.Добавить(ТекЗначение);
			КонецЦикла;
			ЭлементОтбора.Использование = Истина;
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Строка") Тогда
			ЭлементОтбора.ПравоеЗначение = ВыбранноеЗначение[0];
			ЭлементОтбора.Использование = Истина;
		КонецЕсли;
		ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриАктивизацииСтроки(Элемент)
    
    Если Элемент.ТекущиеДанные.Настройка = "Дата начала" Тогда
        
        Элементы.ГруппаПолзункиДаты.Доступность = Истина;
        Дата = ПараметрНастройки("ДатаНачала").Значение;
        ПолзунокДень = День(Дата);
        ПолзунокЧас = Час(Дата);
        ПолзунокМинута = Минута(Дата);
        ПолзунокСекунда = Секунда(Дата);
        
    ИначеЕсли Элемент.ТекущиеДанные.Настройка = "Дата окончания" Тогда
        
        Элементы.ГруппаПолзункиДаты.Доступность = Истина;
        Элементы.ГруппаПолзункиДаты.Доступность = Истина;
        Дата = ПараметрНастройки("ДатаОкончания").Значение;
        ПолзунокДень = День(Дата);
        ПолзунокЧас = Час(Дата);
        ПолзунокМинута = Минута(Дата);
        ПолзунокСекунда = Секунда(Дата);
        
    Иначе
        
        Элементы.ГруппаПолзункиДаты.Доступность = Ложь;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДату(ИмяНастройки, ИмяЧасти, Значение)
    
    ДатаЗначение = ПараметрНастройки(ИмяНастройки);
    Дата = ДатаЗначение.Значение;
    
    Год = Год(Дата);
    Месяц = Месяц(Дата);
    День = День(Дата);
    Час = Час(Дата);
    Минута = Минута(Дата);
    Секунда = Секунда(Дата);
    
    Если ИмяЧасти = "День" Тогда
        
        Попытка
            ДатаЗначение.Значение = Дата(Год, Месяц, Значение, Час, Минута, Секунда);
        Исключение
            ДатаЗначение.Значение = Дата(Год, Месяц, День, Час, Минута, Секунда);
        КонецПопытки;
        
    ИначеЕсли ИмяЧасти = "Час" Тогда
        ДатаЗначение.Значение = Дата(Год, Месяц, День, Значение, Минута, Секунда);
    ИначеЕсли ИмяЧасти = "Минута" Тогда
        ДатаЗначение.Значение = Дата(Год, Месяц, День, Час, Значение, Секунда);
    ИначеЕсли ИмяЧасти = "Секунда" Тогда
        ДатаЗначение.Значение = Дата(Год, Месяц, День, Час, Минута, Значение);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Функция ПараметрНастройки(ИмяНастройки)
    
    ИдентификаторПользовательскойНастройки = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяНастройки).ИдентификаторПользовательскойНастройки;
    Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
    
КонецФункции

&НаКлиенте
Процедура ПолзунокДеньПриИзменении(Элемент)
    
    Если Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущиеДанные.Настройка = "Дата начала" Тогда
        
        УстановитьДату("ДатаНачала", "День", ПолзунокДень);
        
    ИначеЕсли Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущиеДанные.Настройка = "Дата окончания" Тогда
        
        УстановитьДату("ДатаОкончания", "День", ПолзунокДень);
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПолзунокЧасПриИзменении(Элемент)
    
    Если Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущиеДанные.Настройка = "Дата начала" Тогда
        
        УстановитьДату("ДатаНачала", "Час", ПолзунокЧас);
        
    ИначеЕсли Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущиеДанные.Настройка = "Дата окончания" Тогда
        
        УстановитьДату("ДатаОкончания", "Час", ПолзунокЧас);
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПолзунокМинутаПриИзменении(Элемент)
    
    Если Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущиеДанные.Настройка = "Дата начала" Тогда
        
        УстановитьДату("ДатаНачала", "Минута", ПолзунокМинута);
        
    ИначеЕсли Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущиеДанные.Настройка = "Дата окончания" Тогда
        
        УстановитьДату("ДатаОкончания", "Минута", ПолзунокМинута);
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПолзунокСекундаПриИзменении(Элемент)
    
    Если Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущиеДанные.Настройка = "Дата начала" Тогда
        
        УстановитьДату("ДатаНачала", "Секунда", ПолзунокСекунда);
        
    ИначеЕсли Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущиеДанные.Настройка = "Дата окончания" Тогда
        
        УстановитьДату("ДатаОкончания", "Секунда", ПолзунокСекунда);
        
    КонецЕсли;
    
КонецПроцедуры








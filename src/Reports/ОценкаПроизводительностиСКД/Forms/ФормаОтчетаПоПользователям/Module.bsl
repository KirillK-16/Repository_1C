&НаКлиенте
Перем ДанныеФЗ, ДатаНачалаФормирования, ФормаДлительнойОперации, Повторно, ВыборПериода, РезультатОбработкаРасшифровкиЗавершение;

&НаКлиенте
Перем ДанныеДляВыводаБуфер, ДанныеРасшифровкиНаКлиенте, ДанныеРаспределенияБуфер, ДанныеРаспределенияСравнениеБуфер, ШагИнтервалаИнтерактивно, МаксЗначение;

&НаКлиенте
Перем ПроверкаВыполненияФоновогоЗаданияСчетчик;

&НаКлиенте
Процедура СформироватьПрограммно(Команда)
    
    ЭтотОбъект.РезультатАнализаОбщаяСтатистика.Очистить();
	ЭтотОбъект.ДиаграммаРаспределения.Очистить();
	ЭтотОбъект.ДиаграммаПользователя.Очистить();
	
	ДатаНачалаФормирования = ТекущаяДата();
	
	ДанныеДляВыводаБуфер = Неопределено;
	ДанныеРасшифровкиНаКлиенте = Неопределено;
	ДанныеРаспределенияБуфер = Неопределено;
	
	ДанныеФЗ = СформироватьПрограммноНаСервере();
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ДанныеФЗ.УИДЗадания);
	
	ЭтотОбъект.Результат.Область("R3C1").Текст = "Начало формирования: " + ДатаНачалаФормирования;
	
	ПроверкаВыполненияФоновогоЗаданияСчетчик = 0;
	ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 1, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВыполненияФоновогоЗадания()
	
	Если ФормаДлительнойОперации = Неопределено Тогда
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ДанныеФЗ.УИДЗадания);
	КонецЕсли;
	
	ЭтотОбъект.Результат.Область("R4C1").Текст = "Длительность формирования: " + Формат(ТекущаяДата() - ДатаНачалаФормирования, "ЧН=0") + " сек";
	
	Попытка
		РезультатПроверки = ПроверкаВыполненияФоновогоЗаданияНаСервере(ДанныеФЗ);
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ОтключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания");
		ОбщийКлиентСервер.СгенерироватьСообщениеПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Сформировать", ЭтотОбъект);
        Возврат;
	КонецПопытки;
	
	Если РезультатПроверки.Состояние <> "Активно" Тогда
		ОтключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания");
		
		Если РезультатПроверки.Состояние = "Завершено" Тогда
			ПроверкаВыполненияФоновогоЗаданияСчетчик = 0;
			ЭтотОбъект.Результат = РезультатПроверки.Данные.ТабличныйДокумент;
			ЭтотОбъект.Результат.ФиксацияСверху = ПолучитьФиксациюСверху();
			
			ЭтотОбъект.ДанныеРасшифровки = РезультатПроверки.Данные.ДанныеРасшифровкиАдрес;
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			
			АктивнаяСтрока = ПолучитьФиксациюСверху() + 1;
			Если НЕ Повторно Тогда
				АктивнаяСтрокаСтр = Формат(АктивнаяСтрока, "ЧГ=0");
				АктивизироватьОбласть("R" + АктивнаяСтрокаСтр + "C1:R" + АктивнаяСтрокаСтр + "C2");
				Повторно = Истина;
			Иначе
				АктивнаяСтрокаСтр = Формат(АктивнаяСтрока, "ЧГ=0");
				АктивизироватьОбласть("R" + АктивнаяСтрокаСтр + "C1:R" + АктивнаяСтрокаСтр + "C2");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПроверкаВыполненияФоновогоЗаданияСчетчик = ПроверкаВыполненияФоновогоЗаданияСчетчик + 1;
		Если ПроверкаВыполненияФоновогоЗаданияСчетчик < 5 Тогда
			ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 1, Истина);
		ИначеЕсли ПроверкаВыполненияФоновогоЗаданияСчетчик < 10 Тогда
			ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 2, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 5, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФиксациюСверху()
	
	ПараметрСравнитьПериоды = Новый ПараметрКомпоновкиДанных("СравнитьПериоды");
	ФиксацияСверху = 6;
	
	Для Каждого ТекЭлемент Из ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ТекЭлемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если ТекЭлемент.Параметр <> ПараметрСравнитьПериоды Тогда
				ФиксацияСверху = ФиксацияСверху + ?(ТекЭлемент.Использование,1,0);
			Иначе
				ФиксацияСверху = ФиксацияСверху + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФиксацияСверху;
	
КонецФункции

&НаСервере
Процедура АктивизироватьОбласть(АдресОбласти)
	ЭтотОбъект.Результат.ВыделенныеОбласти.Очистить();
	АктивнаяОбласть = ЭтотОбъект.Результат.Область(АдресОбласти);
	ЭтотОбъект.Элементы.Результат.ТекущаяОбласть = АктивнаяОбласть;
	ЭтотОбъект.Результат.ВыделенныеОбласти.Добавить(АктивнаяОбласть);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаВыполненияФоновогоЗаданияНаСервере(Параметры)
    
    ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Параметры.УИДЗадания);
    
    Если ФЗ <> Неопределено Тогда
        
        РезультатПроверки = Новый Структура;
        РезультатПроверки.Вставить("Состояние", "");
        РезультатПроверки.Вставить("Данные", Новый Структура);
        
        Если ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
            РезультатПроверки.Состояние = "Активно";
        ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
            РезультатПроверки.Состояние = "Завершено";
            ДанныеФЗ = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
            
            РезультатПроверки.Данные.Вставить("ТабличныйДокумент",  ДанныеФЗ.ТабличныйДокумент);
            РезультатПроверки.Данные.Вставить("ДанныеРасшифровкиАдрес", ПоместитьВоВременноеХранилище(ДанныеФЗ.ДанныеРасшифровки, Параметры.УИДФормы));
        Иначе
            ВызватьИсключение(ПодробноеПредставлениеОшибки(ФЗ.ИнформацияОбОшибке));
        КонецЕсли;
        
    Иначе
        
        ВызватьИсключение("Не найдено фоновое задание с идентификатором " + Параметры.УИДЗадания); 
        
    КонецЕсли;
	
	Возврат РезультатПроверки; 
    
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрПользовательскойНастройки(ИмяПараметра, ТипПараметра)
	Если ТипПараметра = "ПараметрыДанных" Тогда
		ПараметрНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки[ТипПараметра].Элементы.Найти(ИмяПараметра);
		ПараметрПользовательскойНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрНастройки.ИдентификаторПользовательскойНастройки);
	ИначеЕсли ТипПараметра = "Отбор" Тогда
		ПараметрОтбора = Неопределено;
		Для Каждого ТекЭлемент Из ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки[ТипПараметра].Элементы Цикл
			Если Строка(ТекЭлемент.ЛевоеЗначение) = ИмяПараметра Тогда
				ПараметрОтбора = ТекЭлемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ПараметрПользовательскойНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрОтбора.ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
	Возврат ПараметрПользовательскойНастройки;
КонецФункции

&НаСервере
Функция ПолучитьПараметрПользовательскойНастройкиНаСервере(ИмяПараметра, ТипПараметра)
	Если ТипПараметра = "ПараметрыДанных" Тогда
		ПараметрНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки[ТипПараметра].Элементы.Найти(ИмяПараметра);
		ПараметрПользовательскойНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрНастройки.ИдентификаторПользовательскойНастройки);
	ИначеЕсли ТипПараметра = "Отбор" Тогда
		ПараметрОтбора = Неопределено;
		Для Каждого ТекЭлемент Из ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки[ТипПараметра].Элементы Цикл
			Если Строка(ТекЭлемент.ЛевоеЗначение) = ИмяПараметра Тогда
				ПараметрОтбора = ТекЭлемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ПараметрПользовательскойНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрОтбора.ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
	Возврат ПараметрПользовательскойНастройки;
КонецФункции

&НаСервере
Функция СформироватьПрограммноНаСервере()
    
    ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
    
    НастройкиКопия = ОбъектОтчет.КомпоновщикНастроек.ПолучитьНастройки();
    
    ЭтотОбъект.Результат.Очистить();
	ЭтотОбъект.Результат.Область("R2C1").Текст = "Идет формирование отчета...";
		
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	
	ПараметрыЗадания = Новый Массив;
    
    МакетКомпоновкиДанных = Отчеты.ОценкаПроизводительностиСКД.ПолучитьМакет(ЭтотОбъект.ИмяСхемыКомпоновкиДанных);
    
    ПараметрДанныхНачалоПериодаСравнения = НастройкиКопия.ПараметрыДанных.Элементы.Найти("НачалоПериодаСравнения");
        
    Если ПараметрДанныхНачалоПериодаСравнения.Использование Тогда 
        ПараметрДанных = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВидСравнения");
        ПараметрДанныхВидСравнения = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
        Если ПараметрДанныхВидСравнения.Значение = "Левое соединение" Тогда
            ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.НаборДанныхЗамеры.Запрос;
            МакетКомпоновкиДанных.НаборыДанных.НаборДанныхЗамеры.Запрос = СтрЗаменить(ТекстЗапроса, "{ЛЕВОЕ СОЕДИНЕНИЕ}", "ЛЕВОЕ СОЕДИНЕНИЕ");
        ИначеЕсли ПараметрДанныхВидСравнения.Значение = "Внутреннее соединение" Тогда
            ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.НаборДанныхЗамеры.Запрос;
            МакетКомпоновкиДанных.НаборыДанных.НаборДанныхЗамеры.Запрос = СтрЗаменить(ТекстЗапроса, "{ЛЕВОЕ СОЕДИНЕНИЕ}", "ВНУТРЕННЕЕ СОЕДИНЕНИЕ");
        КонецЕсли;
    Иначе
        ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.НаборДанныхЗамеры.Запрос;
        МакетКомпоновкиДанных.НаборыДанных.НаборДанныхЗамеры.Запрос = СтрЗаменить(ТекстЗапроса, "{ЛЕВОЕ СОЕДИНЕНИЕ}", "ЛЕВОЕ СОЕДИНЕНИЕ");
        
        ПараметрДанныхНачалоПериодаСравненияЧисло = НастройкиКопия.ПараметрыДанных.Элементы.Найти("НачалоПериодаСравненияЧисло"); 
        ПараметрДанныхНачалоПериодаСравненияЧисло.Значение = - 99999999999999;
    КонецЕсли;
    
	ПараметрыЗадания.Добавить(МакетКомпоновкиДанных);
	ПараметрыЗадания.Добавить(НастройкиКопия);
	ПараметрыЗадания.Добавить(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыЗадания.Добавить(АдресХранилища);

	Ключ = ЭтотОбъект.УникальныйИдентификатор;
	Задание = ФоновыеЗадания.Выполнить("ФункцииСКД.СформироватьПрограммноНаСервере", ПараметрыЗадания, Ключ, "Отчет ""Анализ производительности""");
	
	ДанныеФЗ = Новый Структура;
	ДанныеФЗ.Вставить("АдресХранилища", АдресХранилища);
	ДанныеФЗ.Вставить("УИДЗадания", Задание.УникальныйИдентификатор);
	ДанныеФЗ.Вставить("УИДФормы", ЭтотОбъект.УникальныйИдентификатор);
	
	Возврат ДанныеФЗ;
    
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    ЭлементЗначение = ЭтотОбъект.Элементы.Найти("КомпоновщикНастроекПользовательскиеНастройкиЗначение");
	ЭлементЗначение.КнопкаВыбора = Истина;
	ЭлементЗначение.УстановитьДействие("НачалоВыбора", "ЗначениеНачалоВыбора");
	ЭлементЗначение.УстановитьДействие("ОбработкаВыбора", "ЗначениеОбработкаВыбора");
	ЭлементЗначение.УстановитьДействие("ПриИзменении", "ЗначениеПриИзменении");
	
	ЭлементВидСравнения = ЭтотОбъект.Элементы.Найти("КомпоновщикНастроекПользовательскиеНастройкиВидСравнения");
	ЭлементВидСравнения.УстановитьДействие("НачалоВыбора", "ЗначениеНачалоВыбораВидСравнения");
	
	ЭтотОбъект.ИмяСхемыКомпоновкиДанных = ЭтотОбъект.Параметры.СхемаКомпоновкиДанных;
	Если СтрНайти(ЭтотОбъект.ИмяСхемыКомпоновкиДанных, "СхемаКомпоновкиДанныхПоКлючевымОперациям") > 0 Тогда
		ЭтотОбъект.Заголовок = "Оценка по операциям";
	ИначеЕсли СтрНайти(ЭтотОбъект.ИмяСхемыКомпоновкиДанных, "СхемаКомпоновкиДанныхПоПользователям") > 0 Тогда
		ЭтотОбъект.Заголовок = "Оценка по пользователям";
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ТипДиаграммыЗамеры) Тогда
		ТипДиаграммыЗамеры = "График";
	КонецЕсли;
	
	ЭтотОбъект.ПроцентВыводаРаспределения = 100;
	ЭтотОбъект.ШагИнтервала = 0.1;
	ЭтотОбъект.ШагИнтервалаПолзунок = ЭтотОбъект.ШагИнтервала * 10;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ЭтаФорма.Элементы.КомпоновщикНастроекПользовательскиеНастройки.Высота = 3;
		ЭтаФорма.Элементы.КомпоновщикНастроекПользовательскиеНастройки.РастягиватьПоВертикали = Ложь;
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСхемуСКД()
    
	Схема = Отчеты.ОценкаПроизводительностиСКД.ПолучитьМакет(ЭтотОбъект.ИмяСхемыКомпоновкиДанных);
	URLСхемы = ПоместитьВоВременноеХранилище(Схема, ЭтотОбъект.УникальныйИдентификатор);
	ЭтотОбъект.Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	ЭтотОбъект.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	ЭтотОбъект.Сформировать = ЭтотОбъект.Параметры.Сформировать;
	
	Если ЭтотОбъект.Сформировать Тогда
		ПериодПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("НачалоПериода", "ПараметрыДанных");
		ПериодПараметр.Значение = ЭтотОбъект.Параметры.Период.ДатаНачала;
		ПериодПараметр.Использование = Истина;
		
		ПериодПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("КонецПериода", "ПараметрыДанных");
		ПериодПараметр.Значение = ЭтотОбъект.Параметры.Период.ДатаОкончания;
		ПериодПараметр.Использование = Истина;
        
        ВидСравненияПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("ВидСравнения", "ПараметрыДанных");
		ВидСравненияПараметр.Значение = ЭтотОбъект.Параметры.ВидСравнения;
		ВидСравненияПараметр.Использование = Истина;
		
		ИнформационнаяБазаПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("ИнформационнаяБаза", "Отбор");
		ИнформационнаяБазаПараметр.ПравоеЗначение = ЭтотОбъект.Параметры.ИнформационнаяБаза;
		ИнформационнаяБазаПараметр.Использование = Истина;
		
		КлючеваяОперацияПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("КлючеваяОперация", "Отбор");
		
		Если ТипЗнч(ЭтотОбъект.Параметры.КлючеваяОперация) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			КлючеваяОперацияПараметр.ВидСравнения = ЭтотОбъект.Параметры.КлючеваяОперация.ВидСравнения;
			КлючеваяОперацияПараметр.ПравоеЗначение = ЭтотОбъект.Параметры.КлючеваяОперация.ПравоеЗначение;
			КлючеваяОперацияПараметр.Использование = ЭтотОбъект.Параметры.КлючеваяОперация.Использование;
		Иначе
			КлючеваяОперацияПараметр.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КлючеваяОперацияПараметр.ПравоеЗначение = ЭтотОбъект.Параметры.КлючеваяОперация;
			КлючеваяОперацияПараметр.Использование = Истина;
		КонецЕсли;
		
		ПользовательПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("Пользователь", "Отбор");
		ПользовательПараметр.ВидСравнения = ЭтотОбъект.Параметры.Пользователь.ВидСравнения;
		ПользовательПараметр.ПравоеЗначение = ЭтотОбъект.Параметры.Пользователь.ПравоеЗначение;
		ПользовательПараметр.Использование = ЭтотОбъект.Параметры.Пользователь.Использование;
		
		НачалоПериодаСравнения = ПолучитьПараметрПользовательскойНастройкиНаСервере("НачалоПериодаСравнения", "ПараметрыДанных");
		НачалоПериодаСравнения.Использование = ЭтотОбъект.Параметры.СравнитьПериоды;
		
		УстановитьПериодСравненияПоУмолчаниюНаСервере();
	Иначе
		ТекДата = ТекущаяДата();
		
		ПериодПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("НачалоПериода", "ПараметрыДанных");
		ПериодПараметр.Значение = ТекДата - 7 * 86400;
		ПериодПараметр.Использование = Истина;
		
		ПериодПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("КонецПериода", "ПараметрыДанных");
		ПериодПараметр.Значение = ТекДата;
		ПериодПараметр.Использование = Истина;
		
		УстановитьПериодСравненияПоУмолчаниюНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	ИнициализироватьСхемуСКД();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	ИнициализироватьСхемуСКД();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Повторно = Ложь;
	Если ЭтотОбъект.Сформировать Тогда
		
		ДатаНачалаФормирования = ТекущаяДата();
		
		ДанныеФЗ = СформироватьПрограммноНаСервере();
		
		ЭтотОбъект.Результат.Область("R3C1").Текст = "Начало формирования: " + ДатаНачалаФормирования;
		
		ПроверкаВыполненияФоновогоЗаданияСчетчик = 0;
		ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 1, Истина);
        
	КонецЕсли;
	
	ВыборПериода = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьАнализДанныхОбщаяСтатистика(РезультатЗапроса)
	АнализДанных = Новый АнализДанных;
	АнализДанных.ТипАнализа = Тип("АнализДанныхОбщаяСтатистика");
	АнализДанных.ИсточникДанных = РезультатЗапроса;
	РезультатАнализа = АнализДанных.Выполнить();
	
	Результат = Новый Структура;
	Если РезультатАнализа.НепрерывныеПоля.Количество()> 0 Тогда 
		Результат.Вставить("Количество", РезультатАнализа.НепрерывныеПоля.ЗначениеЗамера.Количество);
		Результат.Вставить("Максимум", РезультатАнализа.НепрерывныеПоля.ЗначениеЗамера.Максимум);
		Результат.Вставить("Медиана", РезультатАнализа.НепрерывныеПоля.ЗначениеЗамера.Медиана);
		Результат.Вставить("Минимум", РезультатАнализа.НепрерывныеПоля.ЗначениеЗамера.Минимум);
		Результат.Вставить("Размах", РезультатАнализа.НепрерывныеПоля.ЗначениеЗамера.Размах);
		Результат.Вставить("Среднее", РезультатАнализа.НепрерывныеПоля.ЗначениеЗамера.Среднее);
		Результат.Вставить("СтандартноеОтклонение", РезультатАнализа.НепрерывныеПоля.ЗначениеЗамера.СтандартноеОтклонение);
		Результат.Вставить("ДатаСлева", РезультатАнализа.НепрерывныеПоля.ДатаЗамераUTC.Минимум);
		Результат.Вставить("ДатаСправа", РезультатАнализа.НепрерывныеПоля.ДатаЗамераUTC.Максимум);
	Иначе
		Результат.Вставить("Количество", 0);
		Результат.Вставить("Максимум", 0);
		Результат.Вставить("Медиана", 0);
		Результат.Вставить("Минимум", 0);
		Результат.Вставить("Размах", 0);
		Результат.Вставить("Среднее", 0);
		Результат.Вставить("СтандартноеОтклонение", 0);
		Результат.Вставить("ДатаСлева", Дата(1,1,1));
		Результат.Вставить("ДатаСправа", Дата(1,1,1));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СформироватьСтатистикуРаспределения(РезультатАнализа, РезультатАнализаСравнение)
	НачалоПериода = ПолучитьПараметрПользовательскойНастройки("НачалоПериода", "ПараметрыДанных");
	КонецПериода = ПолучитьПараметрПользовательскойНастройки("НачалоПериода", "ПараметрыДанных");
	НачалоПериодаСравнения = ПолучитьПараметрПользовательскойНастройки("НачалоПериодаСравнения", "ПараметрыДанных");
	
	ПериодСравнения = Новый Структура("ДатаНачала, ДатаОкончания, Использование");
	ПериодСравнения.ДатаНачала = НачалоПериодаСравнения.Значение;
	ПериодСравнения.ДатаОкончания = Дата(НачалоПериодаСравнения.Значение) + (Дата(КонецПериода.Значение) - Дата(НачалоПериода.Значение));
	ПериодСравнения.Использование = НачалоПериодаСравнения.Использование;
	
	ЭтотОбъект.РезультатАнализаОбщаяСтатистика.Очистить();
	
	НовСтрока = ЭтотОбъект.РезультатАнализаОбщаяСтатистика.Добавить();
	НовСтрока.Имя = "Замеров";
	Если ПериодСравнения.Использование Тогда
		НовСтрока.Значение = Формат(РезультатАнализа.Количество, "ЧН=0") + " / " + Формат(РезультатАнализаСравнение.Количество, "ЧН=0");
	Иначе
		НовСтрока.Значение = Формат(РезультатАнализа.Количество, "ЧН=0");
	КонецЕсли;
	
	НовСтрока = ЭтотОбъект.РезультатАнализаОбщаяСтатистика.Добавить();
	НовСтрока.Имя = "Медиана";
	Если ПериодСравнения.Использование Тогда
		НовСтрока.Значение = Формат(РезультатАнализа.Медиана, "ЧДЦ=3; ЧН=0,000") + " / " + Формат(РезультатАнализаСравнение.Медиана, "ЧДЦ=3; ЧН=0,000");
	Иначе
		НовСтрока.Значение = Формат(РезультатАнализа.Медиана, "ЧДЦ=3; ЧН=0,000");
	КонецЕсли;
		
	НовСтрока = ЭтотОбъект.РезультатАнализаОбщаяСтатистика.Добавить();
	НовСтрока.Имя = "Среднее";
	Если ПериодСравнения.Использование Тогда
		НовСтрока.Значение = Формат(РезультатАнализа.Среднее, "ЧДЦ=3; ЧН=0,000") + " / " + Формат(РезультатАнализаСравнение.Среднее, "ЧДЦ=3; ЧН=0,000");
	Иначе
		НовСтрока.Значение = Формат(РезультатАнализа.Среднее, "ЧДЦ=3; ЧН=0,000");
	КонецЕсли;
		
	НовСтрока = ЭтотОбъект.РезультатАнализаОбщаяСтатистика.Добавить();
	НовСтрока.Имя = "Ст. отклонение";
	Если ПериодСравнения.Использование Тогда
		НовСтрока.Значение = Формат(РезультатАнализа.СтандартноеОтклонение, "ЧДЦ=3; ЧН=0,000") + " / " + Формат(РезультатАнализаСравнение.СтандартноеОтклонение, "ЧДЦ=3; ЧН=0,000");
	Иначе
		НовСтрока.Значение = Формат(РезультатАнализа.СтандартноеОтклонение, "ЧДЦ=3; ЧН=0,000");
	КонецЕсли;
	
	НовСтрока = ЭтотОбъект.РезультатАнализаОбщаяСтатистика.Добавить();
	НовСтрока.Имя = "Максимум";
	Если ПериодСравнения.Использование Тогда
		НовСтрока.Значение = Формат(РезультатАнализа.Максимум, "ЧДЦ=3; ЧН=0,000") + " / " + Формат(РезультатАнализаСравнение.Максимум, "ЧДЦ=3; ЧН=0,000");
	Иначе
		НовСтрока.Значение = Формат(РезультатАнализа.Максимум, "ЧДЦ=3; ЧН=0,000");
	КонецЕсли;
	
	НовСтрока = ЭтотОбъект.РезультатАнализаОбщаяСтатистика.Добавить();
	НовСтрока.Имя = "Минимум";
	Если ПериодСравнения.Использование Тогда
		НовСтрока.Значение = Формат(РезультатАнализа.Минимум, "ЧДЦ=3; ЧН=0,000") + " / " + Формат(РезультатАнализаСравнение.Минимум, "ЧДЦ=3; ЧН=0,000");
	Иначе
		НовСтрока.Значение = Формат(РезультатАнализа.Минимум, "ЧДЦ=3; ЧН=0,000");
	КонецЕсли;
				
	НовСтрока = ЭтотОбъект.РезультатАнализаОбщаяСтатистика.Добавить();
	НовСтрока.Имя = "Размах";
	Если ПериодСравнения.Использование Тогда
		НовСтрока.Значение = Формат(РезультатАнализа.Размах, "ЧДЦ=3; ЧН=0,000") + " / " + Формат(РезультатАнализаСравнение.Размах, "ЧДЦ=3; ЧН=0,000");
	Иначе
		НовСтрока.Значение = Формат(РезультатАнализа.Размах, "ЧДЦ=3; ЧН=0,000");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРаспределениеЗамеровНаДиаграмму(ДанныеДляВывода, ДанныеДляВыводаСравнение, Диаграмма)
	ВсегоЗамеров = 0;
	ВсегоЗамеровСравнение = 0;
	ИндексМинТочки = 0;
	ИндексМаксТочки = 0;
	
	НачалоПериода = ПолучитьПараметрПользовательскойНастройки("НачалоПериода", "ПараметрыДанных");
	КонецПериода = ПолучитьПараметрПользовательскойНастройки("НачалоПериода", "ПараметрыДанных");
	НачалоПериодаСравнения = ПолучитьПараметрПользовательскойНастройки("НачалоПериодаСравнения", "ПараметрыДанных");
	
	ПериодСравнения = Новый Структура("ДатаНачала, ДатаОкончания, Использование");
	ПериодСравнения.ДатаНачала = Дата(НачалоПериодаСравнения.Значение);
	ПериодСравнения.ДатаОкончания = Дата(НачалоПериодаСравнения.Значение) + (Дата(КонецПериода.Значение) - Дата(НачалоПериода.Значение));
	ПериодСравнения.Использование = НачалоПериодаСравнения.Использование;
		
	Для Каждого ТекДанные Из ДанныеДляВывода Цикл
		Если ТекДанные.Ключ < ИндексМинТочки Тогда
			ИндексМинТочки = ТекДанные.Ключ;
		КонецЕсли;
		
		Если ТекДанные.Ключ > ИндексМаксТочки Тогда
			ИндексМаксТочки = ТекДанные.Ключ;
		КонецЕсли;
		
		ВсегоЗамеров = ВсегоЗамеров + ТекДанные.Значение;
	КонецЦикла;
	
	Для Каждого ТекДанные Из ДанныеДляВыводаСравнение Цикл
		Если ТекДанные.Ключ < ИндексМинТочки Тогда
			ИндексМинТочки = ТекДанные.Ключ;
		КонецЕсли;
		
		Если ТекДанные.Ключ > ИндексМаксТочки Тогда
			ИндексМаксТочки = ТекДанные.Ключ;
		КонецЕсли;
		
		ВсегоЗамеровСравнение = ВсегоЗамеровСравнение + ТекДанные.Значение;
	КонецЦикла;
	
	Шаг = ШагИнтервала;
	
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	Диаграмма.ТипДиаграммы = ТипДиаграммы.Гистограмма;
	Диаграмма.ОтображатьЛегенду = Ложь;
	Диаграмма.ОтображатьЗаголовок = Ложь;
	Диаграмма.ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Горизонтально;
	Диаграмма.ОбластьПостроения.Право = 1;
	
	СерияДиаграммы = Диаграмма.Серии.Добавить("");
	СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
	
	Если ПериодСравнения.Использование Тогда
		СерияДиаграммыСравнение = Диаграмма.Серии.Добавить("");
		СерияДиаграммыСравнение.Маркер = ТипМаркераДиаграммы.Нет;
		СерияДиаграммыСравнение.Цвет = Новый Цвет(191, 191, 191);
	КонецЕсли;
	
	ТекИндексТочки = 0;
	ЗамеровВПроценте = ВсегоЗамеров/100;
	ЗамеровВПроцентеСравнение = ВсегоЗамеровСравнение/100;
	ПроцентЗамеровВывели = 0;
	
	МаксПроцентВывода = ЭтотОбъект.ПроцентВыводаРаспределения;
	Если МаксПроцентВывода = 100 Тогда
		МаксПроцентВывода = 1000;
	КонецЕсли;
	
	МаксЗначение = 0;
	Пока ТекИндексТочки <= ИндексМаксТочки Цикл
		Если ПроцентЗамеровВывели <= МаксПроцентВывода Тогда
			МаксЗначение = ТекИндексТочки * Шаг;
			
			Точка = Диаграмма.Точки.Добавить(Строка(ТекИндексТочки * Шаг + Шаг/2));
			
			Если ДанныеДляВывода[ТекИндексТочки] <> Неопределено Тогда
				ТекЗначение = ДанныеДляВывода[ТекИндексТочки]/ЗамеровВПроценте;
				ПроцентЗамеровВывели = ПроцентЗамеровВывели + ТекЗначение;
				
				Диаграмма.УстановитьЗначение(Точка, СерияДиаграммы, ТекЗначение);
			КонецЕсли;
			
			Если ПериодСравнения.Использование И ДанныеДляВыводаСравнение[ТекИндексТочки] <> Неопределено Тогда
				ТекЗначениеСравнение = ДанныеДляВыводаСравнение[ТекИндексТочки]/ЗамеровВПроцентеСравнение;
				
				Диаграмма.УстановитьЗначение(Точка, СерияДиаграммыСравнение, ТекЗначениеСравнение);
			КонецЕсли;
		КонецЕсли;
				
		ТекИндексТочки = ТекИндексТочки + 1;
	КонецЦикла;
	
	Диаграмма.Обновление = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРаспределениеЗамеровКлючевойОперации(ДанныеДляВывода, Диаграмма, Интерактивно = Ложь)
	Если ДанныеДляВывода <> Неопределено Тогда
		ШагИнтервала = ДанныеДляВывода.Шаг;
		ШагИнтервалаПолзунок = ШагИнтервала * 10;
		
		СформироватьСтатистикуРаспределения(ДанныеДляВывода.РезультатАнализа, ДанныеДляВывода.РезультатАнализаСравнение);
		ВывестиРаспределениеЗамеровНаДиаграмму(ДанныеДляВывода.ДанныеРаспределения, ДанныеДляВывода.ДанныеРаспределенияСравнение, Диаграмма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЗамерыКлючевойОперации(ДанныеДляВывода, Диаграмма, ИмяСерии)
	Диаграмма.Обновление = Ложь;
	Диаграмма.ТипДиаграммы = ТипДиаграммы[ТипДиаграммыЗамеры];
	Диаграмма.ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Горизонтально;
	Диаграмма.Очистить();
	
	СерияДиаграммы = Диаграмма.Серии.Добавить(ИмяСерии);
	СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
	
	ЗначениеЗамераПредыдущее = 0;
	Для Каждого ТекЗамер Из ДанныеДляВывода Цикл
		Точка = Диаграмма.Точки.Добавить(Строка(ТекЗамер.Точка));
		
		Если ВыводитьПоследнее Тогда
			Если ТекЗамер.ЗначениеЗамера <> 0 Тогда
				ЗначениеВывода = ТекЗамер.ЗначениеЗамера;
				ЗначениеЗамераПредыдущее = ТекЗамер.ЗначениеЗамера; 
			Иначе
				ЗначениеВывода = ЗначениеЗамераПредыдущее;
			КонецЕсли;
		Иначе
			ЗначениеВывода = ТекЗамер.ЗначениеЗамера;
		КонецЕсли;
		
		Если ЗначениеВывода > МаксЗначение Тогда
			ЗначениеВывода = МаксЗначение;
		КонецЕсли;
				
		Диаграмма.УстановитьЗначение(Точка, СерияДиаграммы, ЗначениеВывода);
	КонецЦикла;
		
	Диаграмма.Обновление = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДанныеВыводаТекущейОбласти(Расшифровка, Шаг)
	Если Расшифровка = Неопределено Тогда
		Расшифровка = ЭтотОбъект.Результат.ТекущаяОбласть.Расшифровка;
	КонецЕсли;
		
	Если ДанныеРасшифровкиНаКлиенте = Неопределено Тогда
		ДанныеРасшифровкиНаКлиенте = Новый Соответствие;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеРасшифровки) И Расшифровка <> Неопределено Тогда
		Если ДанныеРасшифровкиНаКлиенте[Число(Расшифровка)] <> Неопределено Тогда
			ДанныеДляВыводаБуфер = ДанныеРасшифровкиНаКлиенте[Число(Расшифровка)];
		Иначе
			ПараметрыПриАктивизации = Новый Структура;
			ПараметрыПриАктивизации.Вставить("ИнформационнаяБаза", ПолучитьПараметрПользовательскойНастройки("ИнформационнаяБаза","Отбор").ПравоеЗначение);
			
			НачалоПериода = ПолучитьПараметрПользовательскойНастройки("НачалоПериода", "ПараметрыДанных").Значение;
			КонецПериода = ПолучитьПараметрПользовательскойНастройки("КонецПериода", "ПараметрыДанных").Значение;
			Период = Новый Структура("ДатаНачала, ДатаОкончания", НачалоПериода, КонецПериода);
			
			ПараметрыПриАктивизации.Вставить("ПериодЗамера", Период);
			ПараметрыПриАктивизации.Вставить("НачалоПериодаСравнения", ПолучитьПараметрПользовательскойНастройки("НачалоПериодаСравнения", "ПараметрыДанных").Значение);
			ПараметрыПриАктивизации.Вставить("КлючеваяОперация", ПолучитьПараметрПользовательскойНастройки("КлючеваяОперация","Отбор"));
			ПараметрыПриАктивизации.Вставить("Пользователь", ПолучитьПараметрПользовательскойНастройки("Пользователь","Отбор"));
			ПараметрыПриАктивизации.Вставить("ИмяСКД", ЭтотОбъект.ИмяСхемыКомпоновкиДанных);
			ПараметрыПриАктивизации.Вставить("Шаг", Шаг);
			
			ДанныеДляВыводаБуфер = ПолучитьДанныеРасшифровки(ДанныеРасшифровки, Расшифровка, ПараметрыПриАктивизации);
			ДанныеРасшифровкиНаКлиенте.Вставить(Число(Расшифровка), ДанныеДляВыводаБуфер);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеТекущейОбласти(Интерактивно = Ложь)
	Если ДанныеДляВыводаБуфер <> Неопределено Тогда
		ВывестиРаспределениеЗамеровКлючевойОперации(ДанныеДляВыводаБуфер, ДиаграммаРаспределения, Интерактивно);
		ВывестиЗамерыКлючевойОперации(ДанныеДляВыводаБуфер.ЗамерыДляВывода, ДиаграммаПользователя, ДанныеДляВыводаБуфер.ИмяСерии);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	ПодключитьОбработчикОжидания("РезультатПриАктивизацииОбластиПодключаемый", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбластиПодключаемый()
	Попытка
		Расшифровка = ЭтотОбъект.Результат.ТекущаяОбласть.Расшифровка;
		СформироватьДанныеВыводаТекущейОбласти(Расшифровка, ШагИнтервалаИнтерактивно);
		ВывестиДанныеТекущейОбласти();
	Исключение
		Инфо = ИнформацияОбОшибке();
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеРасшифровки(АдресХранилища, ИндексРасшифровки, ПараметрыПриАктивизации)
	ЗначРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ЭлементыРасшифровки = ЗначРасшифровки.Элементы;
		
	Поля = ЭлементыРасшифровки[ИндексРасшифровки].ПолучитьПоля();
	Поле = Поля[0].Поле;
	
	ИменаПолейЗамеров = Новый СписокЗначений;
	ИменаПолейЗамеров.Добавить("ЦелевоеВремя");
	ИменаПолейЗамеров.Добавить("APDEXПредставление");
	ИменаПолейЗамеров.Добавить("APDEXВлияние");
	ИменаПолейЗамеров.Добавить("КоличествоЗамеров");
	ИменаПолейЗамеров.Добавить("СреднееЗначениеЗамера");
	ИменаПолейЗамеров.Добавить("СреднееЗначениеЗамераПредставление");
	ИменаПолейЗамеров.Добавить("СтандартноеОтклонение");
	ИменаПолейЗамеров.Добавить("МаксимальноеЗначение");
	ИменаПолейЗамеров.Добавить("МинимальноеЗначение");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИнформационнаяБаза", ПараметрыПриАктивизации.ИнформационнаяБаза);
	Параметры.Вставить("ПериодЗамера", ПараметрыПриАктивизации.ПериодЗамера);
	Параметры.Вставить("НачалоПериодаСравнения", ПараметрыПриАктивизации.НачалоПериодаСравнения);
	Параметры.Вставить("Шаг", ПараметрыПриАктивизации.Шаг);
	Если Поле = "Пользователь" Тогда
		Если СтрНайти(ПараметрыПриАктивизации.ИмяСКД, "СхемаКомпоновкиДанныхПоКлючевымОперациям") > 0 Тогда
			Параметры.Вставить("КлючеваяОперация", НайтиЗначениеПараметраРасшифровки("КлючеваяОперация", ЭлементыРасшифровки, ИндексРасшифровки));
			Параметры.Вставить("Пользователь", Поля[0].Значение);
		ИначеЕсли СтрНайти(ПараметрыПриАктивизации.ИмяСКД, "СхемаКомпоновкиДанныхПоПользователям") > 0 Тогда
			Если ПараметрыПриАктивизации.КлючеваяОперация.Использование Тогда
				Параметры.Вставить("КлючеваяОперация", ПараметрыПриАктивизации.КлючеваяОперация.ПравоеЗначение);
			КонецЕсли;
			Параметры.Вставить("Пользователь", Поля[0].Значение);
		КонецЕсли;
	ИначеЕсли Поле = "КлючеваяОперация" Тогда
		Если СтрНайти(ПараметрыПриАктивизации.ИмяСКД, "СхемаКомпоновкиДанныхПоКлючевымОперациям") > 0 Тогда
			Параметры.Вставить("КлючеваяОперация", Поля[0].Значение);
			Если ПараметрыПриАктивизации.Пользователь.Использование Тогда
				Параметры.Вставить("Пользователь", ПараметрыПриАктивизации.Пользователь.ПравоеЗначение);
			КонецЕсли;
		ИначеЕсли СтрНайти(ПараметрыПриАктивизации.ИмяСКД, "СхемаКомпоновкиДанныхПоПользователям") > 0 Тогда
			Параметры.Вставить("КлючеваяОперация", Поля[0].Значение);
			Параметры.Вставить("Пользователь", НайтиЗначениеПараметраРасшифровки("Пользователь", ЭлементыРасшифровки, ИндексРасшифровки));
		КонецЕсли;
	ИначеЕсли ИменаПолейЗамеров.НайтиПоЗначению(Поле) <> Неопределено Тогда
		Если СтрНайти(ПараметрыПриАктивизации.ИмяСКД, "СхемаКомпоновкиДанныхПоКлючевымОперациям") > 0 Тогда
			ПоляРасшифровки = Новый Соответствие;
			ПоляРасшифровки.Вставить("Пользователь", Новый Структура);
			ПоляРасшифровки.Вставить("КлючеваяОперация", Новый Структура);
			
			ЗаполнитьПоляРасшифровки(ПоляРасшифровки, ЭлементыРасшифровки, ИндексРасшифровки);
			
			Если НЕ ПоляРасшифровки["КлючеваяОперация"].Свойство("ИндексРасшифровки") И НЕ ПоляРасшифровки["Пользователь"].Свойство("ИндексРасшифровки") Тогда 
				
			ИначеЕсли НЕ ПоляРасшифровки["КлючеваяОперация"].Свойство("ИндексРасшифровки") ИЛИ (ПоляРасшифровки["КлючеваяОперация"].ИндексРасшифровки < ПоляРасшифровки["Пользователь"].ИндексРасшифровки) Тогда
				//По ключевой операции пользователя
				Параметры.Вставить("КлючеваяОперация", ПоляРасшифровки["КлючеваяОперация"].Значение);
				Параметры.Вставить("Пользователь", ПоляРасшифровки["Пользователь"].Значение);
			Иначе
				//По ключевой операции
				Параметры.Вставить("КлючеваяОперация", ПоляРасшифровки["КлючеваяОперация"].Значение);
			КонецЕсли;
		ИначеЕсли СтрНайти(ПараметрыПриАктивизации.ИмяСКД, "СхемаКомпоновкиДанныхПоПользователям") > 0 Тогда
			ПоляРасшифровки = Новый Соответствие;
			ПоляРасшифровки.Вставить("Пользователь", Новый Структура);
			ПоляРасшифровки.Вставить("КлючеваяОперация", Новый Структура);
			
			ЗаполнитьПоляРасшифровки(ПоляРасшифровки, ЭлементыРасшифровки, ИндексРасшифровки);
			
			Если НЕ ПоляРасшифровки["КлючеваяОперация"].Свойство("ИндексРасшифровки") И НЕ ПоляРасшифровки["Пользователь"].Свойство("ИндексРасшифровки") Тогда 
				
			ИначеЕсли НЕ ПоляРасшифровки["КлючеваяОперация"].Свойство("ИндексРасшифровки") ИЛИ (ПоляРасшифровки["КлючеваяОперация"].ИндексРасшифровки < ПоляРасшифровки["Пользователь"].ИндексРасшифровки) Тогда
				//По пользователю
				Параметры.Вставить("Пользователь", ПоляРасшифровки["Пользователь"].Значение);
			Иначе
				//По ключевой операции пользователя
				Параметры.Вставить("КлючеваяОперация", ПоляРасшифровки["КлючеваяОперация"].Значение);
				Параметры.Вставить("Пользователь", ПоляРасшифровки["Пользователь"].Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗамерыКлючевойОперации = ПолучитьЗамерыКлючевойОперации(Параметры);	
	
	Возврат ЗамерыКлючевойОперации;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьПоляРасшифровки(ПоляРасшифровки, ЭлементыРасшифровки, ИндексРасшифровки)
	ПолейНайдено = 0;
	ПолейНадо = ПоляРасшифровки.Количество();
	
	ИндексПоискаПараметра = ИндексРасшифровки - 1;
	Пока ИндексПоискаПараметра > 0 Цикл
		Если ТипЗнч(ЭлементыРасшифровки[ИндексПоискаПараметра]) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			ПоляПараметра = ЭлементыРасшифровки[ИндексПоискаПараметра].ПолучитьПоля();
			ПолеПараметра = ПоляПараметра[0].Поле;
			
			Если ПоляРасшифровки[ПолеПараметра] <> Неопределено И  ПоляРасшифровки[ПолеПараметра].Количество() = 0 Тогда
				ПоляРасшифровки[ПолеПараметра].Вставить("ИндексРасшифровки", ИндексПоискаПараметра);
				ПоляРасшифровки[ПолеПараметра].Вставить("Значение", ПоляПараметра[0].Значение);
				
				ПолейНайдено = ПолейНайдено + 1;
			КонецЕсли;
			
			Если ПолейНайдено = ПолейНадо Тогда
				ИндексПоискаПараметра = 0;
			КонецЕсли;
		КонецЕсли;
				
		ИндексПоискаПараметра = ИндексПоискаПараметра - 1;
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиЗначениеПараметраРасшифровки(ИмяПоля, ЭлементыРасшифровки, ИндексРасшифровки)
	Значение = Неопределено;
	
	ИндексПоискаПараметра = ИндексРасшифровки - 1;
	Пока ИндексПоискаПараметра > 0 Цикл
		Если ТипЗнч(ЭлементыРасшифровки[ИндексПоискаПараметра]) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			ПоляПараметра = ЭлементыРасшифровки[ИндексПоискаПараметра].ПолучитьПоля();
			ПолеПараметра = ПоляПараметра[0].Поле;
				
			Если ПолеПараметра = ИмяПоля Тогда
				Значение = ПоляПараметра[0].Значение; 
				
				ИндексПоискаПараметра = 0;
			КонецЕсли;
		КонецЕсли;
				
		ИндексПоискаПараметра = ИндексПоискаПараметра - 1;
	КонецЦикла;
	
	Возврат Значение;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗамерыКлючевойОперацииЗаПериод(КлючеваяОперация, ИнформационнаяБаза, ПериодЗамера, Пользователь)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗамерыПроизводительности.ДатаЗамераUTC,
	|	ЗамерыПроизводительности.Значение КАК ЗначениеЗамера
	|ИЗ
	|	РегистрСведений.ЗамерыПроизводительности КАК ЗамерыПроизводительности
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОценкаПроизводительностиКлючевыеОперации КАК ОценкаПроизводительностиКлючевыеОперации
	|ПО
	|	ЗамерыПроизводительности.ИдентификаторКлючевойОперации = ОценкаПроизводительностиКлючевыеОперации.УникальныйИдентификатор
	|	И ЗамерыПроизводительности.ОбъектКонтроля = ОценкаПроизводительностиКлючевыеОперации.ИнформационнаяБаза
	|	%УслКлючеваяОперация
	|ГДЕ
	|	ЗамерыПроизводительности.ДатаЗамераUTC МЕЖДУ &НачалоЗамера И &ОкончаниеЗамера
	|	%УслИнформационнаяБаза
	|	%УслПользователь
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗамераUTC
	|";
	
	Если ИнформационнаяБаза = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УслИнформационнаяБаза", "");
	Иначе
		Если ТипЗнч(ИнформационнаяБаза) = Тип("СписокЗначений") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УслИнформационнаяБаза", "И ЗамерыПроизводительности.ОбъектКонтроля В (&ИнформационнаяБаза)");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УслИнформационнаяБаза", "И ЗамерыПроизводительности.ОбъектКонтроля = &ИнформационнаяБаза");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	КонецЕсли;
	
	Если КлючеваяОперация = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УслКлючеваяОперация", "");
	Иначе
		Если ТипЗнч(КлючеваяОперация) = Тип("СписокЗначений") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УслКлючеваяОперация", "И ОценкаПроизводительностиКлючевыеОперации.Имя В (&КлючеваяОперация)");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УслКлючеваяОперация", "И ОценкаПроизводительностиКлючевыеОперации.Имя = &КлючеваяОперация");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("КлючеваяОперация", КлючеваяОперация);
	КонецЕсли;
		
	Если Пользователь = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УслПользователь", "");
	Иначе
		Если ТипЗнч(Пользователь) = Тип("СписокЗначений") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УслПользователь", "И ЗамерыПроизводительности.Пользователь В(&Пользователь)");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УслПользователь", "И ЗамерыПроизводительности.Пользователь = &Пользователь");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("НачалоЗамера", (Дата(ПериодЗамера.ДатаНачала) - Дата(1,1,1)) * 1000);
	Запрос.УстановитьПараметр("ОкончаниеЗамера", (Дата(ПериодЗамера.ДатаОкончания) - Дата(1,1,1)) * 1000);
	
	Результат = Запрос.Выполнить();
	
	РезультатАнализа = ВыполнитьАнализДанныхОбщаяСтатистика(Результат);
	
	Данные = Новый Структура;
	Данные.Вставить("РезультатАнализа", РезультатАнализа);
	Данные.Вставить("РезультатЗапроса", Результат);
	
	Возврат Данные;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗамерыКлючевойОперации(Параметры)
	ИмяСерии = "";
	Если Параметры.Свойство("КлючеваяОперация") Тогда
		КлючеваяОперация = Параметры.КлючеваяОперация;
		ИмяСерии = ИмяСерии + КлючеваяОперация;
	Иначе
		КлючеваяОперация = Неопределено;
	КонецЕсли;
	
	ИнформационнаяБаза = Параметры.ИнформационнаяБаза;
	ПериодЗамера = Параметры.ПериодЗамера;
	ПериодСравнения = Новый Структура("ДатаНачала, ДатаОкончания");
	ПериодСравнения.ДатаНачала = Дата(Параметры.НачалоПериодаСравнения);
	ПериодСравнения.ДатаОкончания = Дата(ПериодСравнения.ДатаНачала) + (Дата(ПериодЗамера.ДатаОкончания) - Дата(ПериодЗамера.ДатаНачала));
	
	Если Параметры.Свойство("Пользователь") Тогда
		Пользователь = Параметры.Пользователь;
		
		Если ЗначениеЗаполнено(ИмяСерии) Тогда
			ИмяСерии = ИмяСерии + ", " + Строка(Пользователь);
		Иначе
			ИмяСерии = Строка(Пользователь);
		КонецЕсли;
	Иначе
		Пользователь = Неопределено;
	КонецЕсли;
	
	Данные = ПолучитьЗамерыКлючевойОперацииЗаПериод(КлючеваяОперация, ИнформационнаяБаза, ПериодЗамера, Пользователь);
	ДанныеСравнения = ПолучитьЗамерыКлючевойОперацииЗаПериод(КлючеваяОперация, ИнформационнаяБаза, ПериодСравнения, Пользователь);
	
	РезультатАнализа = Данные.РезультатАнализа;
	РезультатАнализаСравнение = ДанныеСравнения.РезультатАнализа;
	
	Если Параметры.Шаг = Неопределено Тогда
		СреднееВремя = РезультатАнализа.Среднее;
		Если СреднееВремя <= 5 Тогда
			Шаг = 0.2;
		ИначеЕсли СреднееВремя > 5 И СреднееВремя <= 15 Тогда
			Шаг = 0.5;
		Иначе
			Шаг = 1;
		КонецЕсли;
	Иначе
		Шаг = Параметры.Шаг;
	КонецЕсли;
	
	//Инициализируем массив данных для диаграммы замеров ключевой операции - Начало
	ДатаСлева = Данные.РезультатАнализа.ДатаСлева;
	ДатаСправа = Данные.РезультатАнализа.ДатаСправа;
	ЧислоТочек = 300;
	ШагДиаграммы = (ДатаСправа - ДатаСлева)/(ЧислоТочек);
	Если ШагДиаграммы = 0 Тогда
		ШагДиаграммы = 1;
	КонецЕсли;
	
	ЗамерыДляВывода = Новый Массив;
	ТекТочка = ДатаСлева;
	ЗамерыДляВывода.Добавить(Новый Структура("Точка, ЗначениеЗамера", Дата(1,1,1) + ТекТочка/1000, 0));
	Пока ТекТочка <= ДатаСправа Цикл
		ТекТочка = ТекТочка + ШагДиаграммы;
		ЗамерыДляВывода.Добавить(Новый Структура("Точка, ЗначениеЗамера", Дата(1,1,1) + ТекТочка/1000, 0));
	КонецЦикла;
	//Инициализируем массив данных для диаграммы замеров ключевой операции - Завершение
	
	ДанныеРаспределения = Новый Соответствие;
	Выборка = Данные.РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		//Подготавливаем данные для диаграммы распределения - Начало
		ИндексТочки = Цел(Выборка.ЗначениеЗамера/Шаг);
		
		Если ДанныеРаспределения[ИндексТочки] = Неопределено Тогда
			ДанныеРаспределения.Вставить(ИндексТочки, 0);
		КонецЕсли;
		
		ДанныеРаспределения[ИндексТочки] = ДанныеРаспределения[ИндексТочки] + 1;
		//Подготавливаем данные для диаграммы распределения - Завершение
		
		//Заполняем массив данных для диаграммы замеров ключевой операции - Начало
		ИндексТочки = Цел((Выборка.ДатаЗамераUTC - ДатаСлева)/ШагДиаграммы);
		
		ЗначениеДляВывода = Выборка.ЗначениеЗамера;
		ЗначениеТекущее = ЗамерыДляВывода[ИндексТочки].ЗначениеЗамера;
		
		Если ЗначениеДляВывода > ЗначениеТекущее Тогда
			ЗамерыДляВывода[ИндексТочки].ЗначениеЗамера = ЗначениеДляВывода;
		КонецЕсли;
		//Заполняем массив данных для диаграммы замеров ключевой операции - Завершение
	КонецЦикла;
	
	ДанныеРаспределенияСравнение = Новый Соответствие;
	Выборка = ДанныеСравнения.РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИндексТочки = Цел(Выборка.ЗначениеЗамера/Шаг);
		
		Если ДанныеРаспределенияСравнение[ИндексТочки] = Неопределено Тогда
			ДанныеРаспределенияСравнение.Вставить(ИндексТочки, 0);
		КонецЕсли;
		
		ДанныеРаспределенияСравнение[ИндексТочки] = ДанныеРаспределенияСравнение[ИндексТочки] + 1;
	КонецЦикла;
	
	ДанныеВозврата = Новый Структура;
	ДанныеВозврата.Вставить("РезультатАнализа", РезультатАнализа);
	ДанныеВозврата.Вставить("РезультатАнализаСравнение", РезультатАнализаСравнение);
	ДанныеВозврата.Вставить("ДанныеРаспределения", ДанныеРаспределения);
	ДанныеВозврата.Вставить("ДанныеРаспределенияСравнение", ДанныеРаспределенияСравнение);
	ДанныеВозврата.Вставить("ЗамерыДляВывода", ЗамерыДляВывода);
	ДанныеВозврата.Вставить("Шаг", Шаг);
	ДанныеВозврата.Вставить("ИмяСерии", ИмяСерии);
	
	Возврат ДанныеВозврата;
КонецФункции

&НаКлиенте
Процедура ПроцентВыводаРаспределенияПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ПроцентВыводаРаспределенияПриИзмененииПодключаемый", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолеПроцентВыводаРаспределенияПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ПроцентВыводаРаспределенияПриИзмененииПодключаемый", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроцентВыводаРаспределенияПриИзмененииПодключаемый()
	Расшифровка = ЭтотОбъект.Результат.ТекущаяОбласть.Расшифровка;
	
	ВывестиДанныеТекущейОбласти();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииШагаИнтервала()
	ШагИнтервалаИнтерактивно = ШагИнтервала;
	
	Расшифровка = ЭтотОбъект.Результат.ТекущаяОбласть.Расшифровка;
	
	Если ЗначениеЗаполнено(ДанныеРасшифровки) И Расшифровка <> Неопределено Тогда
		Если ДанныеРасшифровкиНаКлиенте[Число(Расшифровка)] <> Неопределено Тогда
			ДанныеРасшифровкиНаКлиенте[Число(Расшифровка)] = Неопределено;
		КонецЕсли;
	КонецЕсли;
		
	РезультатПриАктивизацииОбластиПодключаемый();
	
	ШагИнтервалаИнтерактивно = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ШагИнтервалаПолзунокПриИзменении(Элемент)
	ШагИнтервала = ШагИнтервалаПолзунок/10;
	ПодключитьОбработчикОжидания("ПриИзмененииШагаИнтервала", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ШагИнтервалаПриИзменении(Элемент)
	ШагИнтервалаПолзунок = ШагИнтервала * 10;
	ПодключитьОбработчикОжидания("ПриИзмененииШагаИнтервала", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбораВидСравнения(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Родитель.ТекущиеДанные.Настройка = "Ключевая операция" Тогда
		ДанныеВыбора = Новый СписокЗначений; 
		ДанныеВыбора.Добавить(ВидСравненияКомпоновкиДанных.Равно);
		ДанныеВыбора.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Родитель.Родитель.ТекущиеДанные.Настройка = "Ключевая операция" Тогда
		ТекущаяСтрока = ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущаяСтрока;
		ЭлементОтбора = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ТекущаяСтрока);
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			МножественныйВыбор = Ложь;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			МножественныйВыбор = Истина;
		КонецЕсли;
		
		Ключ = Неопределено;
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") И ЭлементОтбора.ПравоеЗначение.Количество() > 0 Тогда
			Ключ = ЭлементОтбора.ПравоеЗначение;
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Строка") И ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			Ключ = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура("Ключ, МножественныйВыбор", Ключ, МножественныйВыбор);
		ФормаВыбораЗначения = ПолучитьФорму("РегистрСведений.ОценкаПроизводительностиКлючевыеОперации.Форма.ФормаВыбораИмяКлючевойОперации", ПараметрыОткрытия);
		ФормаВыбораЗначения.ВладелецФормы = Элемент;
		ФормаВыбораЗначения.Открыть();
		
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Элемент.Родитель.Родитель.ТекущиеДанные.Настройка = "Период для сравнения" Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Элемент.Родитель.Родитель.ТекущиеДанные.Настройка = "Конец периода" Тогда
		ВыборПериода = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущиеДанные.Настройка = "Ключевая операция" Тогда
		ТекущаяСтрока = ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущаяСтрока;
		ЭлементОтбора = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ТекущаяСтрока);
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			ЭлементОтбора.ПравоеЗначение.Очистить();
			
			Для Каждого ТекЗначение Из ВыбранноеЗначение Цикл
				ЭлементОтбора.ПравоеЗначение.Добавить(ТекЗначение);
			КонецЦикла;
			ЭлементОтбора.Использование = Истина;
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Строка") Тогда
			ЭлементОтбора.ПравоеЗначение = ВыбранноеЗначение[0];
			ЭлементОтбора.Использование = Истина;
		КонецЕсли;
		ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = ОбработкаРасшифровкиПереопределенная(Расшифровка);
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = ОбработкаРасшифровкиПереопределенная(Расшифровка);
КонецПроцедуры

&НаКлиенте
Функция ОбработкаРасшифровкиПереопределенная(Расшифровка)
	Перем ВыполненноеДействие;
    Перем ПараметрВыполненногоДействия;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяСхемыКомпоновкиДанных", ИмяСхемыКомпоновкиДанных);
	
	ДополнительныеДействия = ПолучитьДополнительныеДействия(ДанныеРасшифровки, Расшифровка, ДопПараметры);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиПереопределеннаяЗавершение", ЭтотОбъект);
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия, ДополнительныеДействия);
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРасшифровкиПереопределеннаяЗавершение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		Если ТипЗнч(ПараметрВыполненногоДействия) = Тип("СправочникСсылка.ПользователиЗамерПроизводительности") Тогда
			ПараметрыФормыОткрытия = Новый Структура("Ключ", ПараметрВыполненногоДействия);
			ОткрытьФорму("Справочник.ПользователиЗамерПроизводительности.ФормаОбъекта", ПараметрыФормыОткрытия);
		КонецЕсли;
	ИначеЕсли ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		ПараметрПользовательскойНастройкиИнформационнаяБаза = ПолучитьПараметрПользовательскойНастройки("ИнформационнаяБаза", "Отбор"); 
		Если ВыполненноеДействие.Свойство("Действие") И ВыполненноеДействие.Действие = "ПоказатьЗамерыПоКлючевойОперации" Тогда
			Период = Новый Структура("ДатаНачала, ДатаОкончания");
			Период.ДатаНачала = ПолучитьПараметрПользовательскойНастройки("НачалоПериода", "ПараметрыДанных").Значение;
			Период.ДатаОкончания = ПолучитьПараметрПользовательскойНастройки("КонецПериода", "ПараметрыДанных").Значение;
			
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("Период", Период);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("ИнформационнаяБаза", ПараметрПользовательскойНастройкиИнформационнаяБаза);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("Сформировать", Истина);
			ОткрытьФорму("Отчет.ОценкаПроизводительностиСКД.Форма.ФормаОтчетаЗамеры", ВыполненноеДействие.ПараметрыРасшифровки, ЭтотОбъект, Новый УникальныйИдентификатор());
		ИначеЕсли ВыполненноеДействие.Свойство("Действие") И ВыполненноеДействие.Действие = "ПоказатьЗамерыПользователяПоКлючевойОперации" Тогда
			Период = Новый Структура("ДатаНачала, ДатаОкончания");
			Период.ДатаНачала = ПолучитьПараметрПользовательскойНастройки("НачалоПериода", "ПараметрыДанных").Значение;
			Период.ДатаОкончания = ПолучитьПараметрПользовательскойНастройки("КонецПериода", "ПараметрыДанных").Значение;
			
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("Период", Период);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("ИнформационнаяБаза", ПараметрПользовательскойНастройкиИнформационнаяБаза);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("Сформировать", Истина);
			ОткрытьФорму("Отчет.ОценкаПроизводительностиСКД.Форма.ФормаОтчетаЗамеры", ВыполненноеДействие.ПараметрыРасшифровки, ЭтотОбъект, Новый УникальныйИдентификатор());
		ИначеЕсли ВыполненноеДействие.Свойство("Действие") И ВыполненноеДействие.Действие = "ПоказатьЗамерыПользователя" Тогда
			Период = Новый Структура("ДатаНачала, ДатаОкончания");
			Период.ДатаНачала = ПолучитьПараметрПользовательскойНастройки("НачалоПериода", "ПараметрыДанных").Значение;
			Период.ДатаОкончания = ПолучитьПараметрПользовательскойНастройки("КонецПериода", "ПараметрыДанных").Значение;
			
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("Период", Период);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("ИнформационнаяБаза", ПараметрПользовательскойНастройкиИнформационнаяБаза);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("Сформировать", Истина);
			ОткрытьФорму("Отчет.ОценкаПроизводительностиСКД.Форма.ФормаОтчетаЗамеры", ВыполненноеДействие.ПараметрыРасшифровки, ЭтотОбъект, Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДополнительныеДействия(АдресХранилища, ИндексРасшифровки, Параметры)
	ЗначРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ЭлементыРасшифровки = ЗначРасшифровки.Элементы;
	//ЭлементыРасшифровки[ИндексРасшифровки].ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет;
	
	ДополнительныеДействия = Новый СписокЗначений;
	
	ПоляРасшифровки = Новый Соответствие;
	ПоляРасшифровки.Вставить("Пользователь", Новый Структура);
	ПоляРасшифровки.Вставить("КлючеваяОперация", Новый Структура);
	ЗаполнитьПоляРасшифровки(ПоляРасшифровки, ЭлементыРасшифровки, ИндексРасшифровки);
	
	Если СтрНайти(Параметры.ИмяСхемыКомпоновкиДанных, "СхемаКомпоновкиДанныхПоПользователям") > 0 Тогда
		Если НЕ ПоляРасшифровки["КлючеваяОперация"].Свойство("ИндексРасшифровки") И НЕ ПоляРасшифровки["Пользователь"].Свойство("ИндексРасшифровки") Тогда
			//Ничего не делаем...
		ИначеЕсли НЕ ПоляРасшифровки["КлючеваяОперация"].Свойство("ИндексРасшифровки") ИЛИ (ПоляРасшифровки["КлючеваяОперация"].ИндексРасшифровки < ПоляРасшифровки["Пользователь"].ИндексРасшифровки) Тогда
			ПараметрыРасшифровки = Новый Структура;
			ПараметрыРасшифровки.Вставить("Пользователь", ПоляРасшифровки["Пользователь"].Значение);
			
			РасшифровкаДействия = Новый Структура;
			РасшифровкаДействия.Вставить("Действие", "ПоказатьЗамерыПользователя");
			РасшифровкаДействия.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			
			ДополнительныеДействия.Добавить(РасшифровкаДействия, "Показать замеры пользователя <" + ПоляРасшифровки["Пользователь"].Значение +">");
		Иначе
			ПараметрыРасшифровки = Новый Структура;
			ПараметрыРасшифровки.Вставить("КлючеваяОперация", ПоляРасшифровки["КлючеваяОперация"].Значение);
			ПараметрыРасшифровки.Вставить("Пользователь", ПоляРасшифровки["Пользователь"].Значение);
			
			РасшифровкаДействия = Новый Структура;
			РасшифровкаДействия.Вставить("Действие", "ПоказатьЗамерыПользователяПоКлючевойОперации");
			РасшифровкаДействия.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			
			ДополнительныеДействия.Добавить(РасшифровкаДействия, "Показать замеры <" + ПоляРасшифровки["Пользователь"].Значение + "> по <" + ПоляРасшифровки["КлючеваяОперация"].Значение +">");
		КонецЕсли;
	ИначеЕсли СтрНайти(Параметры.ИмяСхемыКомпоновкиДанных, "СхемаКомпоновкиДанныхПоКлючевымОперациям") > 0 Тогда
		Если НЕ ПоляРасшифровки["КлючеваяОперация"].Свойство("ИндексРасшифровки") И НЕ ПоляРасшифровки["Пользователь"].Свойство("ИндексРасшифровки") Тогда
			//Ничего не делаем...
		ИначеЕсли НЕ ПоляРасшифровки["Пользователь"].Свойство("ИндексРасшифровки") ИЛИ (ПоляРасшифровки["Пользователь"].ИндексРасшифровки < ПоляРасшифровки["КлючеваяОперация"].ИндексРасшифровки) Тогда
			ПараметрыРасшифровки = Новый Структура;
			ПараметрыРасшифровки.Вставить("КлючеваяОперация", ПоляРасшифровки["КлючеваяОперация"].Значение);
			
			РасшифровкаДействия = Новый Структура;
			РасшифровкаДействия.Вставить("Действие", "ПоказатьЗамерыПоКлючевойОперации");
			РасшифровкаДействия.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			
			ДополнительныеДействия.Добавить(РасшифровкаДействия, "Показать замеры всех пользователей по <" + ПоляРасшифровки["КлючеваяОперация"].Значение +">");
		Иначе
			ПараметрыРасшифровки = Новый Структура;
			ПараметрыРасшифровки.Вставить("КлючеваяОперация", ПоляРасшифровки["КлючеваяОперация"].Значение);
			ПараметрыРасшифровки.Вставить("Пользователь", ПоляРасшифровки["Пользователь"].Значение);
			
			РасшифровкаДействия = Новый Структура;
			РасшифровкаДействия.Вставить("Действие", "ПоказатьЗамерыПользователяПоКлючевойОперации");
			РасшифровкаДействия.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			
			ДополнительныеДействия.Добавить(РасшифровкаДействия, "Показать замеры <" + ПоляРасшифровки["Пользователь"].Значение + "> по <" + ПоляРасшифровки["КлючеваяОперация"].Значение +">");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнительныеДействия;
КонецФункции

&НаКлиенте
Процедура ВыводитьПоследнееПриИзменении(Элемент)
	Если ДанныеДляВыводаБуфер <> Неопределено Тогда
		ВывестиЗамерыКлючевойОперации(ДанныеДляВыводаБуфер.ЗамерыДляВывода, ДиаграммаПользователя, ДанныеДляВыводаБуфер.ИмяСерии);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипДиаграммыЗамерыПриИзменении(Элемент)
	ВывестиЗамерыКлючевойОперации(ДанныеДляВыводаБуфер.ЗамерыДляВывода, ДиаграммаПользователя, ДанныеДляВыводаБуфер.ИмяСерии);
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	ЭлементЗначение = ЭтотОбъект.Элементы.Найти("КомпоновщикНастроекПользовательскиеНастройкиЗначение");
	ЭлементЗначение.КнопкаВыбора = Истина;
	ЭлементЗначение.УстановитьДействие("ПриИзменении", "ЗначениеПриИзменении");
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодСравненияПоУмолчаниюНаСервере()
	ПериодПараметрНачало = ПолучитьПараметрПользовательскойНастройкиНаСервере("НачалоПериода", "ПараметрыДанных");
	ПериодПараметрКонец = ПолучитьПараметрПользовательскойНастройкиНаСервере("КонецПериода", "ПараметрыДанных");
	
	НачалоПериодаСравнения = ПолучитьПараметрПользовательскойНастройкиНаСервере("НачалоПериодаСравнения", "ПараметрыДанных");
	ДлительностьПериода = (ПериодПараметрКонец.Значение - ПериодПараметрНачало.Значение) + 1;
	НачалоПериодаСравнения.Значение = ПериодПараметрНачало.Значение - ДлительностьПериода;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПриИзменении(Элемент)
	Если Элемент.Родитель.Родитель.ТекущиеДанные.Настройка = "Период" Тогда
		ПериодПараметр = ПолучитьПараметрПользовательскойНастройки("Период", "ПараметрыДанных");
		ПериодСравненияПараметр = ПолучитьПараметрПользовательскойНастройки("ПериодСравнения", "ПараметрыДанных");
		ДлительностьПериода = (ПериодПараметр.Значение.ДатаОкончания - ПериодПараметр.Значение.ДатаНачала) + 1;
		ПериодСравненияПараметр.Значение.ДатаНачала = ПериодПараметр.Значение.ДатаНачала - ДлительностьПериода;
		ПериодСравненияПараметр.Значение.ДатаОкончания = ПериодПараметр.Значение.ДатаОкончания - ДлительностьПериода;
	ИначеЕсли Элемент.Родитель.Родитель.ТекущиеДанные.Настройка = "Конец периода" Тогда
		Если ВыборПериода Тогда
			КонецПериодаПараметр = ПолучитьПараметрПользовательскойНастройки("КонецПериода", "ПараметрыДанных");
			КонецПериодаПараметр.Значение = КонецДня(КонецПериодаПараметр.Значение);
			ВыборПериода = Ложь;
			ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ЗакончитьРедактированиеСтроки(Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки(Команда)
	ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;
	ЭтотОбъект.Элементы.СкрытьНастройки.Видимость = Ложь;
	ЭтотОбъект.Элементы.Настройки.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Истина;
	ЭтотОбъект.Элементы.СкрытьНастройки.Видимость = Истина;
	ЭтотОбъект.Элементы.Настройки.Видимость = Ложь;
КонецПроцедуры







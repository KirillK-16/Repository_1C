&НаКлиенте
Перем ДанныеФЗ, ДатаНачалаФормирования, ФормаДлительнойОперации, РезультатОбработкаРасшифровкиЗавершение;

&НаКлиенте
Перем ПроверкаВыполненияФоновогоЗаданияСчетчик; 

Перем ИндексРасшифровкиСерия;

&НаСервере
Функция СформироватьПрограммноНаСервере()
	ЭтотОбъект.Результат.Очистить();
	ЭтотОбъект.Результат.Область("R2C1").Текст = "Идет формирование отчета...";
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	
	ПараметрыЗадания = Новый Массив;
    МакетКомпоновкиДанных = Отчеты.ОценкаПроизводительностиСКД.ПолучитьМакет(ИмяСхемыКомпоновкиДанных);
    
    ПараметрДанных = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодСравнения");
    ПараметрДанныхПериодСравнения = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
    
    Если ПараметрДанныхПериодСравнения.Использование Тогда 
        
        ПараметрДанных = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериодаСравненияЧисло");
        ПараметрДанных.Значение = (ПараметрДанныхПериодСравнения.Значение.ДатаНачала - Дата(1,1,1)) * 1000;
        ПараметрДанных.Использование = Истина;
        
        ПараметрДанных = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериодаСравненияЧисло");
        ПараметрДанных.Значение = (ПараметрДанныхПериодСравнения.Значение.ДатаОкончания - Дата(1,1,1)) * 1000;
        ПараметрДанных.Использование = Истина;
        
        ПараметрДанных = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВидСравнения");
        ПараметрДанныхВидСравнения = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
        Если ПараметрДанныхВидСравнения.Значение = "Левое соединение" Тогда
            ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.НаборДанныхЗамеры.Запрос;
            МакетКомпоновкиДанных.НаборыДанных.НаборДанныхЗамеры.Запрос = СтрЗаменить(ТекстЗапроса, "{ЛЕВОЕ СОЕДИНЕНИЕ}", "ЛЕВОЕ СОЕДИНЕНИЕ");
        ИначеЕсли ПараметрДанныхВидСравнения.Значение = "Внутреннее соединение" Тогда
            ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.НаборДанныхЗамеры.Запрос;
            МакетКомпоновкиДанных.НаборыДанных.НаборДанныхЗамеры.Запрос = СтрЗаменить(ТекстЗапроса, "{ЛЕВОЕ СОЕДИНЕНИЕ}", "ВНУТРЕННЕЕ СОЕДИНЕНИЕ");
        КонецЕсли;
        
    Иначе
               
        ПараметрДанных = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериодаСравненияЧисло");
        ПараметрДанных.Значение = 2;
        ПараметрДанных.Использование = Истина;
        
        ПараметрДанных = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериодаСравненияЧисло");
        ПараметрДанных.Значение = 1;
        ПараметрДанных.Использование = Истина;
        
        ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.НаборДанныхЗамеры.Запрос;
        МакетКомпоновкиДанных.НаборыДанных.НаборДанныхЗамеры.Запрос = СтрЗаменить(ТекстЗапроса, "{ЛЕВОЕ СОЕДИНЕНИЕ}", "ЛЕВОЕ СОЕДИНЕНИЕ");
        
    КонецЕсли;
        
	ПараметрыЗадания.Добавить(МакетКомпоновкиДанных);
	ПараметрыЗадания.Добавить(ОбъектОтчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыЗадания.Добавить(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыЗадания.Добавить(АдресХранилища);

	Ключ = ЭтотОбъект.УникальныйИдентификатор;
	Задание = ФоновыеЗадания.Выполнить("ФункцииСКД.СформироватьПрограммноНаСервере", ПараметрыЗадания, Ключ, "Отчет ""Анализ производительности""");
	
	ДанныеФЗ = Новый Структура;
	ДанныеФЗ.Вставить("АдресХранилища", АдресХранилища);
	ДанныеФЗ.Вставить("УИДЗадания", Задание.УникальныйИдентификатор);
	ДанныеФЗ.Вставить("УИДФормы", ЭтотОбъект.УникальныйИдентификатор);
	
	Возврат ДанныеФЗ;
КонецФункции

&НаКлиенте
Процедура СформироватьПрограммно(Команда)
    
	ДатаНачалаФормирования = ТекущаяДата();
	ДанныеФЗ = СформироватьПрограммноНаСервере();
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ДанныеФЗ.УИДЗадания);
	
	ЭтотОбъект.Результат.Область("R3C1").Текст = "Начало формирования: " + ДатаНачалаФормирования;
	
	ПроверкаВыполненияФоновогоЗаданияСчетчик = 0;
	ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 1, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВыполненияФоновогоЗадания()
	
	ЭтотОбъект.Результат.Область("R4C1").Текст = "Длительность формирования: " + Формат(ТекущаяДата() - ДатаНачалаФормирования, "ЧН=0") + " сек";
	
	РезультатПроверки = ПроверкаВыполненияФоновогоЗаданияНаСервере(ДанныеФЗ);
	Если РезультатПроверки.Состояние <> "Активно" Тогда
		Если РезультатПроверки.Состояние = "Завершено" Тогда
			ПроверкаВыполненияФоновогоЗаданияСчетчик = 0;
			ЭтотОбъект.Результат = РезультатПроверки.Данные.ТабличныйДокумент;
			ЭтотОбъект.ДанныеРасшифровки = РезультатПроверки.Данные.ДанныеРасшифровкиАдрес;
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
        ИначеЕсли РезультатПроверки.Состояние = "Отменено" Тогда
            ЭтотОбъект.Результат.Область("R2C1").Текст = "Отменено пользователем...";
            ЭтотОбъект.Результат.Область("R3C1").Текст = "";
            ЭтотОбъект.Результат.Область("R4C1").Текст = "";
        ИначеЕсли РезультатПроверки.Состояние = "Ошибка" Тогда
            ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
            ОтключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания");
		    ОбщийКлиентСервер.СгенерироватьСообщениеПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Сформировать", ЭтотОбъект);
            Возврат;
		КонецЕсли;
	Иначе
		ПроверкаВыполненияФоновогоЗаданияСчетчик = ПроверкаВыполненияФоновогоЗаданияСчетчик + 1;
		Если ПроверкаВыполненияФоновогоЗаданияСчетчик < 5 Тогда
			ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 1, Истина);
		ИначеЕсли ПроверкаВыполненияФоновогоЗаданияСчетчик < 10 Тогда
			ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 2, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 5, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаВыполненияФоновогоЗаданияНаСервере(Параметры)
    
    ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Параметры.УИДЗадания);
    
    Если ФЗ <> Неопределено Тогда
        
        РезультатПроверки = Новый Структура;
        РезультатПроверки.Вставить("Состояние", "");
        РезультатПроверки.Вставить("Данные", Новый Структура);
        
        Если ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
            РезультатПроверки.Состояние = "Активно";
        ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
            РезультатПроверки.Состояние = "Завершено";
            ДанныеФЗ = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
            
            РезультатПроверки.Данные.Вставить("ТабличныйДокумент",  ДанныеФЗ.ТабличныйДокумент);
            РезультатПроверки.Данные.Вставить("ДанныеРасшифровкиАдрес", ПоместитьВоВременноеХранилище(ДанныеФЗ.ДанныеРасшифровки, Параметры.УИДФормы)); 
        ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
            РезультатПроверки.Состояние = "Отменено";
        ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
            РезультатПроверки.Состояние = "Ошибка";
            РезультатПроверки.Данные.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ФЗ.ИнформацияОбОшибке));
        КонецЕсли;
        
    Иначе
        
        ВызватьИсключение("Не найдено фоновое задание с идентификатором " + Параметры.УИДЗадания);
        
    КонецЕсли;
	
	Возврат РезультатПроверки;
    
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДополнительныеДействия(АдресХранилища, ИндексРасшифровки, Параметры)
	ДополнительныеДействия = Новый СписокЗначений;
	
	ЗначРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ЭлементыРасшифровки = ЗначРасшифровки.Элементы;
	
	ИменаПолейРасшифровки = Новый СписокЗначений;
	ИменаПолейРасшифровки.Добавить("КлючеваяОперация");
	ИменаПолейРасшифровки.Добавить("ИнформационнаяБаза");
	ИменаПолейРасшифровки.Добавить("ПериодЗамера");
	ИменаПолейРасшифровки.Добавить("ПериодЗамераПредставление");
	ИменаПолейРасшифровки.Добавить("APDEXПредставление");
	ИменаПолейРасшифровки.Добавить("APDEXВлияние");
	ИменаПолейРасшифровки.Добавить("КоличествоЗамеров");
	ИменаПолейРасшифровки.Добавить("СреднееЗначениеЗамера");
	ИменаПолейРасшифровки.Добавить("СтандартноеОтклонение");
	ИменаПолейРасшифровки.Добавить("МаксимальноеЗначение");
	ИменаПолейРасшифровки.Добавить("МинимальноеЗначение");
	ИменаПолейРасшифровки.Добавить("ЦелевоеВремя");
	
	
	Поля = ЭлементыРасшифровки[ИндексРасшифровки].ПолучитьПоля();
	Поле = Поля[0].Поле;
	
	Если ИменаПолейРасшифровки.НайтиПоЗначению(Поле) <> Неопределено Тогда
		ПараметрыРасшифровки = Новый Структура;
		
		ПоляРасшифровки = Новый Соответствие;
		ПоляРасшифровки.Вставить("ПериодЗамера", Новый Структура);
		ПоляРасшифровки.Вставить("ИнформационнаяБаза", Новый Структура);
		
		ЗаполнитьПоляРасшифровки(ПоляРасшифровки, ЭлементыРасшифровки, ИндексРасшифровки);
		Если ПоляРасшифровки["ПериодЗамера"].ИндексРасшифровки > ПоляРасшифровки["ИнформационнаяБаза"].ИндексРасшифровки Тогда
			ДатаДень = ПоляРасшифровки["ПериодЗамера"].Значение;
			Если Параметры.ПериодичностьЗамеров = "Неделя" Тогда
				Если КонецНедели(ДатаДень) > Параметры.Период.ДатаОкончания Тогда
					Период = Новый СтандартныйПериод(ДатаДень, Параметры.Период.ДатаОкончания);
				Иначе
					Период = Новый СтандартныйПериод(ДатаДень, КонецНедели(ДатаДень));
				КонецЕсли;
			ИначеЕсли Параметры.ПериодичностьЗамеров = "Час" Тогда
				Период = Новый Структура("ДатаНачала, ДатаОкончания", ДатаДень, ДатаДень + 3599);
			ИначеЕсли Параметры.ПериодичностьЗамеров = "Весь период" Тогда
				Период = Параметры.Период;
			Иначе
				Период = Новый СтандартныйПериод(ДатаДень, ДатаДень);
			КонецЕсли;
			ПараметрыРасшифровки.Вставить("ПериодЗамера", Период);
			ПараметрыРасшифровки.Вставить("ИнформационнаяБаза", ПоляРасшифровки["ИнформационнаяБаза"].Значение);
			Если Поле = "КлючеваяОперация" Тогда
				ПараметрыРасшифровки.Вставить("КлючеваяОперация", Поля[0].Значение);
			КонецЕсли;
		Иначе
			ПараметрыРасшифровки.Вставить("ПериодЗамера", Параметры.Период);
			ПараметрыРасшифровки.Вставить("ИнформационнаяБаза", ПоляРасшифровки["ИнформационнаяБаза"].Значение);
			Если Поле = "КлючеваяОперация" Тогда
				ПараметрыРасшифровки.Вставить("КлючеваяОперация", Поля[0].Значение);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРасшифровки.Количество() > 0 Тогда
			РасшифровкаДействия = Новый Структура;
			РасшифровкаДействия.Вставить("Действие", "ПоказатьЗамерыПоКлючевымОперациям");
			РасшифровкаДействия.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			
			Если Параметры.ПериодичностьЗамеров = "Час" Тогда
				ПериодСтр = Формат(ПараметрыРасшифровки.ПериодЗамера.ДатаНачала, "ДФ='dd.MM.yy''г. '' ЧЧ:мм'") + " - " + Формат(ПараметрыРасшифровки.ПериодЗамера.ДатаОкончания, "ДФ='ЧЧ:мм'");
			Иначе
				Если НачалоДня(ПараметрыРасшифровки.ПериодЗамера.ДатаНачала) = НачалоДня(ПараметрыРасшифровки.ПериодЗамера.ДатаОкончания) Тогда
					ПериодСтр = Формат(ПараметрыРасшифровки.ПериодЗамера.ДатаНачала, "ДФ=dd.MM.yy");
				Иначе
					ПериодСтр = Формат(ПараметрыРасшифровки.ПериодЗамера.ДатаНачала, "ДФ=dd.MM.yy") + " - " + Формат(ПараметрыРасшифровки.ПериодЗамера.ДатаОкончания, "ДФ=dd.MM.yy");
				КонецЕсли;
			КонецЕсли;
			Если ПараметрыРасшифровки.Свойство("КлючеваяОперация") Тогда
				ДополнительныеДействия.Добавить(РасшифровкаДействия, "Показать замеры по <" + ПараметрыРасшифровки.КлючеваяОперация + "> за " + ПериодСтр);
			Иначе
				ДополнительныеДействия.Добавить(РасшифровкаДействия, "Показать замеры по ключевым операциям за " + ПериодСтр);
			КонецЕсли;
					
			РасшифровкаДействия = Новый Структура;
			РасшифровкаДействия.Вставить("Действие", "ПоказатьЗамерыПоПользователям");
			РасшифровкаДействия.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			Если Параметры.ПериодичностьЗамеров = "Час" Тогда
				ПериодСтр = Формат(ПараметрыРасшифровки.ПериодЗамера.ДатаНачала, "ДФ='dd.MM.yy''г. '' ЧЧ:мм'") + " - " + Формат(ПараметрыРасшифровки.ПериодЗамера.ДатаОкончания, "ДФ='ЧЧ:мм'");
			Иначе
				Если НачалоДня(ПараметрыРасшифровки.ПериодЗамера.ДатаНачала) = НачалоДня(ПараметрыРасшифровки.ПериодЗамера.ДатаОкончания) Тогда
					ПериодСтр = Формат(ПараметрыРасшифровки.ПериодЗамера.ДатаНачала, "ДФ=dd.MM.yy");
				Иначе
					ПериодСтр = Формат(ПараметрыРасшифровки.ПериодЗамера.ДатаНачала, "ДФ=dd.MM.yy") + " - " + Формат(ПараметрыРасшифровки.ПериодЗамера.ДатаОкончания, "ДФ=dd.MM.yy");
				КонецЕсли;
			КонецЕсли;
			ДополнительныеДействия.Добавить(РасшифровкаДействия, "Показать замеры по пользователям за " + ПериодСтр);
		КонецЕсли;
	ИначеЕсли Поле = "ПериодЗамера" Тогда
	Иначе
		//Сообщить(Поле);
	КонецЕсли;
	
	Возврат ДополнительныеДействия;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьПоляРасшифровки(ПоляРасшифровки, ЭлементыРасшифровки, ИндексРасшифровки)
	ПолейНайдено = 0;
	ПолейНадо = ПоляРасшифровки.Количество();
	
	ИндексПоискаПараметра = ИндексРасшифровки - 1;
	Пока ИндексПоискаПараметра > 0 Цикл
		Если ТипЗнч(ЭлементыРасшифровки[ИндексПоискаПараметра]) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			ПоляПараметра = ЭлементыРасшифровки[ИндексПоискаПараметра].ПолучитьПоля();
			ПолеПараметра = ПоляПараметра[0].Поле;
			
			Если ПоляРасшифровки[ПолеПараметра] <> Неопределено И  ПоляРасшифровки[ПолеПараметра].Количество() = 0 Тогда
				ПоляРасшифровки[ПолеПараметра].Вставить("ИндексРасшифровки", ИндексПоискаПараметра);
				ПоляРасшифровки[ПолеПараметра].Вставить("Значение", ПоляПараметра[0].Значение);
				
				ПолейНайдено = ПолейНайдено + 1;
			КонецЕсли;
			
			Если ПолейНайдено = ПолейНадо Тогда
				ИндексПоискаПараметра = 0;
			КонецЕсли;
		КонецЕсли;
				
		ИндексПоискаПараметра = ИндексПоискаПараметра - 1;
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрПользовательскойНастройки(ИмяПараметра, ТипПараметра)
	Если ТипПараметра = "ПараметрыДанных" Тогда
		ПараметрНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки[ТипПараметра].Элементы.Найти(ИмяПараметра);
		ПараметрПользовательскойНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрНастройки.ИдентификаторПользовательскойНастройки);
	ИначеЕсли ТипПараметра = "Отбор" Тогда
		ПараметрОтбора = Неопределено;
		Для Каждого ТекЭлемент Из ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки[ТипПараметра].Элементы Цикл
			Если Строка(ТекЭлемент.ЛевоеЗначение) = ИмяПараметра Тогда
				ПараметрОтбора = ТекЭлемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ПараметрПользовательскойНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрОтбора.ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
		
	Возврат ПараметрПользовательскойНастройки;
КонецФункции

&НаСервере
Функция ПолучитьПараметрПользовательскойНастройкиНаСервере(ИмяПараметра, ТипПараметра)
	Если ТипПараметра = "ПараметрыДанных" Тогда
		ПараметрНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки[ТипПараметра].Элементы.Найти(ИмяПараметра);
		ПараметрПользовательскойНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрНастройки.ИдентификаторПользовательскойНастройки);
	ИначеЕсли ТипПараметра = "Отбор" Тогда
		ПараметрОтбора = Неопределено;
		Для Каждого ТекЭлемент Из ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки[ТипПараметра].Элементы Цикл
			Если Строка(ТекЭлемент.ЛевоеЗначение) = ИмяПараметра Тогда
				ПараметрОтбора = ТекЭлемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ПараметрПользовательскойНастройки = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрОтбора.ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
	Возврат ПараметрПользовательскойНастройки;
КонецФункции

&НаКлиенте
Функция ОбработкаРасшифровкиПереопределенная(Расшифровка, ДополнительныеПараметры)
	Перем ВыполненноеДействие;
    Перем ПараметрВыполненногоДействия;
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	ПостфиксСхемы = ?(Лев(ВерсияПриложения, 3) = "8.2", "82", "");
	ДополнительныеПараметры.Вставить("ПостфиксСхемы", ПостфиксСхемы);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ПараметрДанных = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	ПараметрДанныхПериод = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
	ДополнительныеПараметры.Вставить("ПараметрДанныхПериод", ПараметрДанныхПериод);
	
	ПараметрДанных = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПереодичностьЗамеров");
	ПараметрДанныхПериодичностьЗамеров = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
	ДополнительныеПараметры.Вставить("ПараметрДанныхПериодичностьЗамеров", ПараметрДанныхПериодичностьЗамеров);
    
    ПараметрДанных = ЭтотОбъект.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВидСравнения");
	ПараметрДанныхВидСравнения = ЭтотОбъект.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
	ДополнительныеПараметры.Вставить("ПараметрДанныхВидСравнения", ПараметрДанныхВидСравнения);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Период", ПараметрДанныхПериод.Значение);
	ДопПараметры.Вставить("ПериодичностьЗамеров", ПараметрДанныхПериодичностьЗамеров.Значение);
    ДопПараметры.Вставить("ПараметрДанныхВидСравнения", ПараметрДанныхВидСравнения.Значение);
	
	ДополнительныеДействия = ПолучитьДополнительныеДействия(ДанныеРасшифровки, Расшифровка, ДопПараметры);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиПереопределеннаяЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия, ДополнительныеДействия);
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРасшифровкиПереопределеннаяЗавершение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
		
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		РезультатОбработкаРасшифровкиЗавершение = Истина;
		Если ДополнительныеПараметры.Метод = "РезультатОбработкаРасшифровки" Тогда
			РезультатОбработкаРасшифровки(ДополнительныеПараметры.Элемент, ДополнительныеПараметры.Расшифровка, ДополнительныеПараметры.СтандартнаяОбработка);
		ИначеЕсли ДополнительныеПараметры.Метод = "РезультатОбработкаДополнительнойРасшифровки" Тогда
			РезультатОбработкаДополнительнойРасшифровки(ДополнительныеПараметры.Элемент, ДополнительныеПараметры.Расшифровка, ДополнительныеПараметры.СтандартнаяОбработка);
		КонецЕсли;
	ИначеЕсли ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		Если ВыполненноеДействие.Свойство("Действие") И ВыполненноеДействие.Действие = "ПоказатьЗамерыПоПользователям" Тогда
			Период = ВыполненноеДействие.ПараметрыРасшифровки.ПериодЗамера;
			ИнформационнаяБаза = ВыполненноеДействие.ПараметрыРасшифровки.ИнформационнаяБаза;
			КлючеваяОперация = ПолучитьПараметрПользовательскойНастройки("КлючеваяОперация", "Отбор");
			Пользователь = ПолучитьПараметрПользовательскойНастройки("Пользователь", "Отбор");
            ПериодСравнения = ПолучитьПараметрПользовательскойНастройки("ПериодСравнения", "ПараметрыДанных");
			
			ВыполненноеДействие.ПараметрыРасшифровки = Новый Структура;
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("Период", Период);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("КлючеваяОперация", КлючеваяОперация);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("Пользователь", Пользователь);
            ВыполненноеДействие.ПараметрыРасшифровки.Вставить("СравнитьПериоды", ПериодСравнения.Использование);
            ВыполненноеДействие.ПараметрыРасшифровки.Вставить("ВидСравнения", ДополнительныеПараметры.ПараметрДанныхВидСравнения.Значение);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("Сформировать", Истина);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("СхемаКомпоновкиДанных", "СхемаКомпоновкиДанныхПоПользователям" + ДополнительныеПараметры.ПостфиксСхемы);
						
			ОткрытьФорму("Отчет.ОценкаПроизводительностиСКД.Форма.ФормаОтчетаПоПользователям", ВыполненноеДействие.ПараметрыРасшифровки, ЭтотОбъект, Новый УникальныйИдентификатор());
		ИначеЕсли ВыполненноеДействие.Свойство("Действие") И ВыполненноеДействие.Действие = "ПоказатьЗамерыПоКлючевымОперациям" Тогда
			Период = ВыполненноеДействие.ПараметрыРасшифровки.ПериодЗамера;
			ИнформационнаяБаза = ВыполненноеДействие.ПараметрыРасшифровки.ИнформационнаяБаза;
			Если ВыполненноеДействие.ПараметрыРасшифровки.Свойство("КлючеваяОперация") Тогда
				КлючеваяОперация = ВыполненноеДействие.ПараметрыРасшифровки.КлючеваяОперация;
			Иначе
				КлючеваяОперация = ПолучитьПараметрПользовательскойНастройки("КлючеваяОперация", "Отбор");
			КонецЕсли;
			Пользователь = ПолучитьПараметрПользовательскойНастройки("Пользователь", "Отбор");
            ПериодСравнения = ПолучитьПараметрПользовательскойНастройки("ПериодСравнения", "ПараметрыДанных");
			
			ВыполненноеДействие.ПараметрыРасшифровки = Новый Структура;
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("Период", Период);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("КлючеваяОперация", КлючеваяОперация);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("Пользователь", Пользователь);
            ВыполненноеДействие.ПараметрыРасшифровки.Вставить("СравнитьПериоды", ПериодСравнения.Использование);
            ВыполненноеДействие.ПараметрыРасшифровки.Вставить("ВидСравнения", ДополнительныеПараметры.ПараметрДанныхВидСравнения.Значение);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("Сформировать", Истина);
			ВыполненноеДействие.ПараметрыРасшифровки.Вставить("СхемаКомпоновкиДанных", "СхемаКомпоновкиДанныхПоКлючевымОперациям" + ДополнительныеПараметры.ПостфиксСхемы);
						
			ОткрытьФорму("Отчет.ОценкаПроизводительностиСКД.Форма.ФормаОтчетаПоПользователям", ВыполненноеДействие.ПараметрыРасшифровки, ЭтотОбъект, Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если РезультатОбработкаРасшифровкиЗавершение <> Истина Тогда
		ДополнительныеПараметры = Новый Структура("Элемент,Расшифровка,СтандартнаяОбработка,Метод", Элемент, Расшифровка, СтандартнаяОбработка,"РезультатОбработкаРасшифровки");
		СтандартнаяОбработка = ОбработкаРасшифровкиПереопределенная(Расшифровка, ДополнительныеПараметры);
	Иначе
		РезультатОбработкаРасшифровкиЗавершение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если РезультатОбработкаРасшифровкиЗавершение <> Истина Тогда
		ДополнительныеПараметры = Новый Структура("Элемент,Расшифровка,СтандартнаяОбработка,Метод", Элемент, Расшифровка, СтандартнаяОбработка,"РезультатОбработкаДополнительнойРасшифровки");
		СтандартнаяОбработка = ОбработкаРасшифровкиПереопределенная(Расшифровка, ДополнительныеПараметры);
	Иначе
		РезультатОбработкаРасшифровкиЗавершение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЭтотОбъект.Параметры.Свойство("ВариантАнализа") Тогда
		ЭтотОбъект.ВариантАнализа = ЭтотОбъект.Параметры.ВариантАнализа;
	КонецЕсли;
		
	ИмяСхемыКомпоновкиДанных = "ОсновнаяСхемаКомпоновкиДанных";
		
	ЭлементЗначение = ЭтотОбъект.Элементы.Найти("КомпоновщикНастроекПользовательскиеНастройкиЗначение");
	ЭлементЗначение.КнопкаВыбора = Истина;
	ЭлементЗначение.УстановитьДействие("НачалоВыбора", "ЗначениеНачалоВыбора");
	ЭлементЗначение.УстановитьДействие("ОбработкаВыбора", "ЗначениеОбработкаВыбора");
	ЭлементЗначение.УстановитьДействие("ПриИзменении", "ЗначениеПриИзменении");
	
	ЭлементВидСравнения = ЭтотОбъект.Элементы.Найти("КомпоновщикНастроекПользовательскиеНастройкиВидСравнения");
	ЭлементВидСравнения.УстановитьДействие("НачалоВыбора", "ЗначениеНачалоВыбораВидСравнения");
    
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	ЭлементЗначение = ЭтотОбъект.Элементы.Найти("КомпоновщикНастроекПользовательскиеНастройкиЗначение");
	ЭлементЗначение.КнопкаВыбора = Истина;
	ЭлементЗначение.УстановитьДействие("НачалоВыбора", "ЗначениеНачалоВыбора");
	ЭлементЗначение.УстановитьДействие("ОбработкаВыбора", "ЗначениеОбработкаВыбора");
	ЭлементЗначение.УстановитьДействие("ПриИзменении", "ЗначениеПриИзменении");
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбораВидСравнения(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Родитель.ТекущиеДанные.Настройка = "Имя ключевой операции" Тогда
		ДанныеВыбора = Новый СписокЗначений; 
		ДанныеВыбора.Добавить(ВидСравненияКомпоновкиДанных.Равно);
		ДанныеВыбора.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Родитель.Родитель.ТекущиеДанные.Настройка = "Имя ключевой операции" Тогда
		ТекущаяСтрока = ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущаяСтрока;
		ЭлементОтбора = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ТекущаяСтрока);
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			МножественныйВыбор = Ложь;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			МножественныйВыбор = Истина;
		КонецЕсли;
				
		Ключ = Неопределено;
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") И ЭлементОтбора.ПравоеЗначение.Количество() > 0 Тогда
			Ключ = ЭлементОтбора.ПравоеЗначение;
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Строка") И ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			Ключ = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура("Ключ, МножественныйВыбор", Ключ, МножественныйВыбор);
		ФормаВыбораЗначения = ПолучитьФорму("РегистрСведений.ОценкаПроизводительностиКлючевыеОперации.Форма.ФормаВыбораИмяКлючевойОперации", ПараметрыОткрытия);
		ФормаВыбораЗначения.ВладелецФормы = Элемент;
		ФормаВыбораЗначения.Открыть();
		
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Элемент.Родитель.Родитель.ТекущиеДанные.Настройка = "Период для сравнения" Тогда
		ПериодПараметр = ПолучитьПараметрПользовательскойНастройки("Период", "ПараметрыДанных");
		ДлительностьПериода = (ПериодПараметр.Значение.ДатаОкончания - ПериодПараметр.Значение.ДатаНачала) + 1;
		ПериодСравненияПараметр = ПолучитьПараметрПользовательскойНастройки("ПериодСравнения", "ПараметрыДанных");
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПериодСравненияПараметр", ПериодСравненияПараметр);
		ДопПараметры.Вставить("ДлительностьПериода", ДлительностьПериода);
		ДопПараметры.Вставить("ТекущийЭлемент", Элемент);
		
		ФормаВыбораЗначения = ПолучитьФорму("Отчет.ОценкаПроизводительностиСКД.Форма.ФормаПериодДляСравнения");
		ФормаВыбораЗначения.ВладелецФормы = ЭтотОбъект;
		ФормаВыбораЗначения.ЗакрыватьПриЗакрытииВладельца = Истина;
		ФормаВыбораЗначения.ДатаНачала = ПериодСравненияПараметр.Значение.ДатаНачала;
		ФормаВыбораЗначения.ДатаОкончания = ПериодСравненияПараметр.Значение.ДатаОкончания;
		ФормаВыбораЗначения.ДлительностьПериода = ДлительностьПериода;
		ФормаВыбораЗначения.Открыть();
						
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПериодаСравнения(Дата, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Дата) Тогда
		ДопПараметры.ПериодСравненияПараметр.Значение.ДатаНачала = Дата;
		ДопПараметры.ПериодСравненияПараметр.Значение.ДатаОкончания = Дата + ДопПараметры.ДлительностьПериода - 1;
		
		ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущиеДанные.Настройка = "Имя ключевой операции" Тогда
		ТекущаяСтрока = ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущаяСтрока;
		ЭлементОтбора = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ТекущаяСтрока);
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			ЭлементОтбора.ПравоеЗначение.Очистить();
			
			Для Каждого ТекЗначение Из ВыбранноеЗначение Цикл
				ЭлементОтбора.ПравоеЗначение.Добавить(ТекЗначение);
			КонецЦикла;
			ЭлементОтбора.Использование = Истина;
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Строка") Тогда
			ЭлементОтбора.ПравоеЗначение = ВыбранноеЗначение[0];
			ЭлементОтбора.Использование = Истина;
		КонецЕсли;
		ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПриИзменении(Элемент)
	Если Элемент.Родитель.Родитель.ТекущиеДанные.Настройка = "Период" Тогда
		ПериодПараметр = ПолучитьПараметрПользовательскойНастройки("Период", "ПараметрыДанных");
		ПериодСравненияПараметр = ПолучитьПараметрПользовательскойНастройки("ПериодСравнения", "ПараметрыДанных");
		
		ДлительностьПериода = (ПериодПараметр.Значение.ДатаОкончания - ПериодПараметр.Значение.ДатаНачала);
		ПериодСравненияПараметр.Значение.ДатаОкончания = ПериодСравненияПараметр.Значение.ДатаНачала + ДлительностьПериода;
		Если ПериодСравненияПараметр.Значение.ДатаОкончания >= ПериодПараметр.Значение.ДатаНачала Тогда
			ПериодСравненияПараметр.Значение.ДатаОкончания = ПериодПараметр.Значение.ДатаНачала - 1;
			ПериодСравненияПараметр.Значение.ДатаНачала = ПериодСравненияПараметр.Значение.ДатаОкончания - ДлительностьПериода;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройки()
	ПериодПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("Период", "ПараметрыДанных");
	Если ПериодПараметр.Значение = Неопределено ИЛИ ПериодПараметр.Значение = Новый СтандартныйПериод(Дата(1,1,1), Дата(1,1,1)) Тогда
		ТекДата = ТекущаяДата();
		ПериодПараметр.Значение = Новый СтандартныйПериод(НачалоДня(ТекДата - 604800), КонецДня(ТекДата));
		
		ПериодСравненияПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("ПериодСравнения", "ПараметрыДанных");
		Если ПериодСравненияПараметр.Значение = Неопределено Тогда
			ПериодСравненияПараметр.Значение = Новый СтандартныйПериод(Дата(1,1,1), Дата(1,1,1));
		КонецЕсли;
		
		ДлительностьПериода = (ПериодПараметр.Значение.ДатаОкончания - ПериодПараметр.Значение.ДатаНачала) + 1;
		ПериодСравненияПараметр.Значение.ДатаНачала = ПериодПараметр.Значение.ДатаНачала - ДлительностьПериода;
		ПериодСравненияПараметр.Значение.ДатаОкончания = ПериодПараметр.Значение.ДатаОкончания - ДлительностьПериода;
	КонецЕсли;
	
	Если ЭтотОбъект.ВариантАнализа = "АнализПроизводительностиИмпортаДанныхЦентраМониторинга" Тогда
		ТекДата = ТекущаяДата();
		ПериодПараметр.Значение = Новый СтандартныйПериод(НачалоДня(ТекДата - 604800), КонецДня(ТекДата));
		
		ПериодСравненияПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("ПериодСравнения", "ПараметрыДанных");
		Если ПериодСравненияПараметр.Значение = Неопределено Тогда
			ПериодСравненияПараметр.Значение = Новый СтандартныйПериод(Дата(1,1,1), Дата(1,1,1));
		КонецЕсли;
		
		ДлительностьПериода = (ПериодПараметр.Значение.ДатаОкончания - ПериодПараметр.Значение.ДатаНачала) + 1;
		ПериодСравненияПараметр.Значение.ДатаНачала = ПериодПараметр.Значение.ДатаНачала - ДлительностьПериода;
		ПериодСравненияПараметр.Значение.ДатаОкончания = ПериодПараметр.Значение.ДатаОкончания - ДлительностьПериода;
		
		ПериодичностьЗамеровПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("ПереодичностьЗамеров", "ПараметрыДанных");
		ПериодичностьЗамеровПараметр.Использование = Истина;
		ПериодичностьЗамеровПараметр.Значение = "День";
		
		ИнформационнаяБазаПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("ИнформационнаяБаза", "Отбор");
		ИнформационнаяБазаПараметр.Использование = Истина;
		ИнформационнаяБазаПараметр.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ИнформационнаяБазаПараметр.ПравоеЗначение = Справочники.ОбъектыКонтроля.НайтиПоНаименованию("Центр мониторинга").Ссылка;
		
		ИмяКлючевойОперацииПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("КлючеваяОперация", "Отбор");
		ИмяКлючевойОперацииПараметр.Использование = Ложь;
		
		ПользовательПараметр = ПолучитьПараметрПользовательскойНастройкиНаСервере("Пользователь", "Отбор");
		ПользовательПараметр.Использование = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСхемуСКД(Настройки)
	Схема = Отчеты.ОценкаПроизводительностиСКД.ПолучитьМакет(ИмяСхемыКомпоновкиДанных);
	URLСхемы = ПоместитьВоВременноеХранилище(Схема, ЭтотОбъект.УникальныйИдентификатор);
	ЭтотОбъект.Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	Если Настройки = Неопределено Тогда
		ЭтотОбъект.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	ИначеЕсли ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЭтотОбъект.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ЭтотОбъект.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	ИнициализироватьСхемуСКД(Настройки);
	ИнициализироватьНастройки();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	ИнициализироватьСхемуСКД(Настройки);
	ИнициализироватьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЭтотОбъект.ВариантАнализа = "АнализПроизводительностиИмпортаДанныхЦентраМониторинга" Тогда
		СформироватьПрограммно(ЭтотОбъект.Команды.СформироватьПрограммно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Отчет.ОценкаПроизводительностиСКД.Форма.ФормаПериодДляСравнения" Тогда
		ПериодСравненияПараметр = ПолучитьПараметрПользовательскойНастройки("ПериодСравнения", "ПараметрыДанных");
		ПериодСравненияПараметр.Значение.ДатаНачала = ВыбранноеЗначение.ДатаНачала;
		ПериодСравненияПараметр.Значение.ДатаОкончания = ВыбранноеЗначение.ДатаОкончания;
		
		ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ЗакончитьРедактированиеСтроки(Ложь);
		
		ТекущаяСтрока = ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.ТекущаяСтрока;
		ЭлементОтбора = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ТекущаяСтрока);
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки(Команда)
	ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;
	ЭтотОбъект.Элементы.СкрытьНастройки.Видимость = Ложь;
	ЭтотОбъект.Элементы.Настройки.Видимость = Истина;
КонецПроцедуры


&НаКлиенте
Процедура Настройки(Команда)
	ЭтотОбъект.Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = Истина;
	ЭтотОбъект.Элементы.СкрытьНастройки.Видимость = Истина;
	ЭтотОбъект.Элементы.Настройки.Видимость = Ложь;
КонецПроцедуры


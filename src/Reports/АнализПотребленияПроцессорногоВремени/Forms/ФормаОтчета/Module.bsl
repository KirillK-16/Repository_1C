
#Область ПеременныеНаКлиенте

&НаКлиенте
Перем ВыделенныеСерии, Период;

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
    
    СформироватьНаСервере();
    ВыделенныеСерии = ВыделенныеСерии();
    Элементы.ДиаграммаПроцессов.УстановитьВыделенныеЭлементы(ВыделенныеСерии);
    
    ЭтотОбъект.ДиаграммаСеансов.Очистить();
    ЭтотОбъект.ДиаграммаСеансов.Обновление = Истина;
    
    ЭтотОбъект.ДиаграммаСеанс.Очистить();
    ЭтотОбъект.ДиаграммаСеанс.Обновление = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    
    Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
        Отчет.ДатаОкончания = КонецДня(ВыбранноеЗначение);
        СтандартнаяОбработка = Ложь;
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДиаграммаПроцессовПриАктивизации(Элемент)
    
    Результат = Новый Структура("Точки, Серии", Новый Массив, Новый Массив);
    
    ВыделенныеЭлементы = Элемент.ПолучитьВыделенныеЭлементы();
    ВыделенныеТочки = Новый Массив;
    
    Для Каждого ВыделенныйЭлемент Из ВыделенныеЭлементы Цикл
        
        ТипЭлемента = ТипЗнч(ВыделенныйЭлемент);
        
        Если ТипЭлемента = Тип("ТочкаДиаграммы") Тогда
            Результат.Точки.Добавить(ВыделенныйЭлемент.Значение);
            ВыделенныеТочки.Добавить(ВыделенныйЭлемент);
        ИначеЕсли ТипЭлемента = Тип("СерияДиаграммы") Тогда
            Результат.Серии.Добавить(ВыделенныйЭлемент);
        ИначеЕсли ТипЭлемента = Тип("ЗначениеДиаграммы") Тогда
            Результат.Серии.Добавить(ВыделенныйЭлемент.Серия);
        КонецЕсли;
        
    КонецЦикла;
    
    Если Результат.Точки.Количество() = 0 И Результат.Серии.Количество() = 0 Тогда
        
        ВыделенныеСерии = ВыделенныеСерии();
        
    ИначеЕсли Результат.Точки.Количество() = 0 И Результат.Серии.Количество() > 0 Тогда
        
        ВыделенныеСерии = ВыделенныеСерии();
        ДобавитьВыделенныеСерии(Результат.Серии);
        
    ИначеЕсли Результат.Точки.Количество() > 0 И Результат.Серии.Количество() = 0 Тогда
        
        Если ВыделенныеСерии.Количество() > 0 Тогда
            ВывестиСеансы(Результат.Точки, ВыделенныеСерии);        
        Иначе
            ВывестиСеансы(Результат.Точки, ЭтотОбъект.ДиаграммаПроцессов.Серии);
        КонецЕсли;
        
        ЭтотОбъект.ДиаграммаСеанс.Очистить();
        Элементы.ДиаграммаСеансов.УстановитьВыделенныеЭлементы(Новый Массив);
                
    ИначеЕсли Результат.Точки.Количество() > 0 И Результат.Серии.Количество() > 0 Тогда
        
        ВыделенныеСерии = ВыделенныеСерии();
        ДобавитьВыделенныеСерии(Результат.Серии);
        
        ВывестиСеансы(Результат.Точки, ВыделенныеСерии);
        
        ЭтотОбъект.ДиаграммаСеанс.Очистить();
        Элементы.ДиаграммаСеансов.УстановитьВыделенныеЭлементы(Новый Массив);
        
    КонецЕсли;
    
    ВыделенныеЭлементы = Новый Массив;
    ДобавитьМассив(ВыделенныеЭлементы, ВыделенныеСерии);
    ДобавитьМассив(ВыделенныеЭлементы, ВыделенныеТочки);
    
    Элемент.УстановитьВыделенныеЭлементы(ВыделенныеЭлементы);
                   
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМассив(Приемник, Источник)
    
    Для Каждого ТекЭлемент Из Источник Цикл
        Приемник.Добавить(ТекЭлемент);
    КонецЦикла;
        
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаСеансовПриАктивизации(Элемент)
    
    ВыделенныеЭлементы = Элемент.ПолучитьВыделенныеЭлементы();
    
    СеансыПодробно = Новый Массив;
    
    Для Каждого ВыделенныйЭлемент Из ВыделенныеЭлементы Цикл
        
        ТипЭлемента = ТипЗнч(ВыделенныйЭлемент);
        
        Если ТипЭлемента = Тип("СерияДиаграммы") Тогда
            ПараметрыСеанса = ВыделенныйЭлемент.Значение;
        ИначеЕсли ТипЭлемента = Тип("ЗначениеДиаграммы") Тогда
            ПараметрыСеанса = ВыделенныйЭлемент.Серия.Значение;
        КонецЕсли;
        
        СеансыПодробно.Добавить(ПараметрыСеанса);
        
    КонецЦикла;
    
    ВывестиСеансыПодробно(Период, СеансыПодробно);
        
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьНаСервере()
    
    КоличествоТочек = 1000;
    
    ТаблицаПериодов = ТаблицаПериодов(Отчет.ДатаНачала, Отчет.ДатаОкончания, КоличествоТочек);
    
    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса(Отчет.Кластер, Отчет.ИнформационнаяБаза);
    
    Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
    Запрос.УстановитьПараметр("ДатаНачала", Отчет.ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", Отчет.ДатаОкончания);
    Запрос.УстановитьПараметр("Кластер", Отчет.Кластер);
    Запрос.УстановитьПараметр("РабочийСервер", Отчет.ИнформационнаяБаза);
    Запрос.УстановитьПараметр("Шаг", Шаг(Отчет.ДатаНачала, Отчет.ДатаОкончания, КоличествоТочек));
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ИсточникДанных = ИсточникДанных(РезультатЗапроса);
    
    ЭтотОбъект.ДиаграммаПроцессов.СерииВСтроках = Ложь;
    ЭтотОбъект.ДиаграммаПроцессов.ИсточникДанных = ИсточникДанных.ТаблицаЗначений;
    ЭтотОбъект.ДиаграммаПроцессов.ИсточникДанных = Неопределено;
    
    УстановитьЗначениеСерий(ЭтотОбъект.ДиаграммаПроцессов, ИсточникДанных.ЗначениеСерий);
    УстановитьЗначениеТочек(ЭтотОбъект.ДиаграммаПроцессов);
    
    ВыделенныеСерии = Новый Массив;
    
КонецПроцедуры

&НаСервере
Функция Шаг(ДатаНачала, ДатаОкончания, КоличествоТочек)
    
    Шаг = (ДатаОкончания - ДатаНачала)/(КоличествоТочек);
    Если Шаг < 60 Тогда
        Шаг = 60;
    КонецЕсли;
    
    Возврат Шаг;
    
КонецФункции

&НаСервере
Функция ТаблицаПериодов(Знач ДатаНачала, Знач ДатаОкончания, КоличествоТочек)
    
    ТаблицаПериодов = Новый ТаблицаЗначений;
    ТаблицаПериодов.Колонки.Добавить("Интервал", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
    ТаблицаПериодов.Колонки.Добавить("ДатаНачала",  Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
    ТаблицаПериодов.Колонки.Добавить("ДатаОкончания",  Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
    
    Шаг = Шаг(ДатаНачала, ДатаОкончания, КоличествоТочек);
    
    Пока ДатаНачала < ДатаОкончания Цикл
        
        НовСтрока = ТаблицаПериодов.Добавить();
        
        НовСтрока.Интервал = ТаблицаПериодов.Количество() - 1;
        НовСтрока.ДатаНачала = ДатаНачала;
        
        ДатаНачала = ДатаНачала + Шаг;
        
        НовСтрока.ДатаОкончания = ДатаНачала;
        
    КонецЦикла;
    
    Возврат ТаблицаПериодов;
    
КонецФункции

&НаСервере
Функция ТекстЗапроса(Кластер, ИнформационнаяБаза)
    
    ТекстЗапроса = "
    |ВЫБРАТЬ
    |   ТаблицаПериодов.Интервал,
    |   ТаблицаПериодов.ДатаНачала,
    |   ТаблицаПериодов.ДатаОкончания
    |ПОМЕСТИТЬ
   	|   ТаблицаПериодов
    |ИЗ
    |   &ТаблицаПериодов КАК ТаблицаПериодов
    |ИНДЕКСИРОВАТЬ ПО
    |   ТаблицаПериодов.Интервал,
    |   ТаблицаПериодов.ДатаОкончания
    |;
    |ВЫБРАТЬ
	|   Ссылка
    |ПОМЕСТИТЬ
	|   Кластеры
    |ИЗ
	|   Справочник.ОбъектыКонтроля КАК ОбъектыКонтроля
    |{ГДЕ 
	|   ОбъектыКонтроля.Ссылка = &Кластер}
    |ИНДЕКСИРОВАТЬ ПО
	|   Ссылка
    |;
    |ВЫБРАТЬ
	|   Кластеры.Ссылка КАК Кластер,
	|   ОбъектКонтроля КАК ИнформационнаяБаза
    |ПОМЕСТИТЬ
	|   ОбъектыКластера
    |ИЗ
	|   РегистрСведений.ПараметрыИнформационныхБаз КАК ИнформационныеБазы
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|   Кластеры
    |ПО
	|   ИнформационныеБазы.Кластер = Кластеры.Ссылка
    |{ГДЕ
	|   ИнформационныеБазы.ОбъектКонтроля = &ИнформационнаяБаза}
    |ИНДЕКСИРОВАТЬ ПО
	|   Кластер,
	|   ИнформационнаяБаза
    |;
    |ВЫБРАТЬ
	|   ТаблицаПериодов.ДатаОкончания КАК ДатаТочки,
	|   Процессы.Кластер,
	|   Процессы.Сервер,
	|   Процессы.Процесс,
	|   Процессы.ПроцессорноеВремяТекущее КАК ПроцессорноеВремяТекущее
    |ИЗ
	|   ТаблицаПериодов КАК ТаблицаПериодов
    |ЛЕВОЕ СОЕДИНЕНИЕ
	|   (ВЫБРАТЬ
    |       ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ДатаНачала, Процессы.Время, СЕКУНДА)/&Шаг КАК ЧИСЛО(10,0)) КАК Интервал,
    |       Процессы.Кластер,
    |       Процессы.Сервер,
    |       Процессы.Процесс,
    |       МАКСИМУМ(Процессы.ПроцессорноеВремяТекущее) КАК ПроцессорноеВремяТекущее
    |   ИЗ    
    |       (ВЫБРАТЬ
    |           Сеансы.Время,
    |           Сеансы.Кластер,
    |           Сеансы.Сервер,
    |           Сеансы.Процесс,
    |           СУММА(Сеансы.ПроцессорноеВремяТекущее) КАК ПроцессорноеВремяТекущее
    |       ИЗ
    |           ОбъектыКластера КАК ОбъектыКластера
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |           РегистрСведений.МониторингСеансов КАК Сеансы
    |       ПО
	|           Сеансы.Кластер = ОбъектыКластера.Кластер
	|           И Сеансы.База = ОбъектыКластера.ИнформационнаяБаза
	|           И Время МЕЖДУ &ДатаНачала И &ДатаОкончания
    |           И Процесс <> 0
    |       СГРУППИРОВАТЬ ПО
    |           Сеансы.Время,
    |           Сеансы.Кластер,
    |           Сеансы.Сервер,
    |           Сеансы.Процесс
    |       ) КАК Процессы
    |   СГРУППИРОВАТЬ ПО
    |       ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ДатаНачала, Процессы.Время, СЕКУНДА)/&Шаг КАК ЧИСЛО(10,0)),
    |       Процессы.Кластер,
    |       Процессы.Сервер,
    |       Процессы.Процесс
    |   ) КАК Процессы
    |ПО
	|   ТаблицаПериодов.Интервал = Процессы.Интервал
	|УПОРЯДОЧИТЬ ПО
	|   ТаблицаПериодов.ДатаОкончания
    |";
        
    Если ЗначениеЗаполнено(Кластер) Тогда
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{ГДЕ 
	    |   ОбъектыКонтроля.Ссылка = &Кластер}", "ГДЕ 
	    |   ОбъектыКонтроля.Ссылка = &Кластер");
    Иначе
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{ГДЕ 
	    |   ОбъектыКонтроля.Ссылка = &Кластер}", "");
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ИнформационнаяБаза) Тогда
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{ГДЕ
	    |   ИнформационныеБазы.ОбъектКонтроля = &ИнформационнаяБаза}", "ГДЕ
	    |   ИнформационныеБазы.ОбъектКонтроля = &ИнформационнаяБаза");
    Иначе
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{ГДЕ
	    |   ИнформационныеБазы.ОбъектКонтроля = &ИнформационнаяБаза}", "");
    КонецЕсли;
    
    Возврат ТекстЗапроса;
    
КонецФункции

&НаСервереБезКонтекста
Функция ИсточникДанных(РезультатЗапроса)
    
    ИсточникДанных = Новый Структура;
    ЗначениеСерий = Новый Соответствие;
    
    ТЗнИсточникДанных = Новый ТаблицаЗначений;
    ТЗнИсточникДанных.Колонки.Добавить("__Дата",,"Дата");
    
    КолонкиСерий = Новый Соответствие;
    
    Выборка = РезультатЗапроса.Выбрать();
    
    ТекущаяДатаВыборки = Неопределено;
    Пока Выборка.Следующий() Цикл
        
        Если Выборка.ДатаТочки <> ТекущаяДатаВыборки Тогда
            СтрокаИсточника = ТЗнИсточникДанных.Добавить();
            СтрокаИсточника.__Дата = Формат(Выборка.ДатаТочки, "ДФ='yyyyMMddHHmmss'");
            ТекущаяДатаВыборки = Выборка.ДатаТочки;
        КонецЕсли;
        
        Если ЗначениеЗаполнено(Выборка.Кластер) И ЗначениеЗаполнено(Выборка.Сервер) И ЗначениеЗаполнено(Выборка.Процесс) Тогда
            
            ЗаголовокКолонки = ЗаголовокКолонки(Выборка.Кластер, Выборка.Сервер, Выборка.Процесс);
            
            ИмяКолонки = КолонкиСерий[ЗаголовокКолонки]; 
            
            Если ИмяКолонки = Неопределено Тогда
                
                ИмяКолонки = "_" + Формат(КолонкиСерий.Количество(), "ЧН=0; ЧГ=0");
                ТЗнИсточникДанных.Колонки.Добавить(ИмяКолонки,,ЗаголовокКолонки);
                КолонкиСерий.Вставить(ЗаголовокКолонки, ИмяКолонки);
                
                ЗначениеСерии = Новый Структура("Кластер, Сервер, Процесс", Выборка.Кластер, Выборка.Сервер, Выборка.Процесс);
                ЗначениеСерий.Вставить(ЗаголовокКолонки, ЗначениеСерии);
                
            КонецЕсли;
            
            СтрокаИсточника[ИмяКолонки] = Выборка.ПроцессорноеВремяТекущее;
            
        КонецЕсли;
        
    КонецЦикла;
    
    ИсточникДанных.Вставить("ТаблицаЗначений", ТЗнИсточникДанных);
    ИсточникДанных.Вставить("ЗначениеСерий", ЗначениеСерий);
    
    Возврат ИсточникДанных;
    
КонецФункции

&НаСервереБезКонтекста
Функция ЗаголовокКолонки(Кластер, Сервер, Процесс)
    
    ИмяМассив = Новый Массив;
    ИмяМассив.Добавить(Строка(Кластер));
    ИмяМассив.Добавить(Строка(Сервер));
    ИмяМассив.Добавить(Формат(Процесс, "ЧН=0; ЧГ=0"));
    
    Возврат СтрСоединить(ИмяМассив, "\");
    
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьЗначениеСерий(Диаграмма, ЗначениеСерий)
    
    Для Каждого Серия Из Диаграмма.Серии Цикл
        Серия.Маркер = ТипМаркераДиаграммы.Нет;
        Серия.Значение = ЗначениеСерий[Серия.Текст];
    КонецЦикла;
    
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеТочек(Диаграмма, Формат = "ДФ='dd.MM.yy HH:mm'")
    
    Для Каждого Точка Из Диаграмма.Точки Цикл
        
        Точка.Значение = Дата(Точка.Текст);
        Точка.Текст = Формат(Точка.Значение, Формат);
        
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеСерии()
    
    Возврат Новый Массив;
    
КонецФункции
 
&НаКлиенте
Процедура ДобавитьВыделенныеСерии(Серии)
    
    Для Каждого Серия Из Серии Цикл
        
        Если ВыделенныеСерии.Найти(Серия) = Неопределено Тогда
            ВыделенныеСерии.Добавить(Серия);
        КонецЕсли;
        
    КонецЦикла;
        
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСеансы(Точки, Серии)
    
    Период = ПериодИзТочек(Точки);
    ОтборСерии = Новый Массив;
    Для Каждого Серия Из Серии Цикл
        ОтборСерии.Добавить(Серия.Значение);
    КонецЦикла;
    
    ЭтотОбъект.ДиаграммаСеансов.ОбластьЗаголовка.Текст = Формат(Период.ДатаНачала, "ДФ='dd.MM.yy HH:mm'") + " - " + Формат(Период.ДатаОкончания, "ДФ='dd.MM.yy HH:mm'");
    
    ВывестиСеансыНаСервере(Период, ОтборСерии);
        
КонецПроцедуры

&НаКлиенте
Функция ПериодИзТочек(Точки)
    
    ДатаНачала = Неопределено;
    ДатаОкончания = Неопределено;
    
    Для Каждого Точка Из Точки Цикл
        
        Если ДатаНачала = Неопределено ИЛИ ДатаНачала > Точка Тогда
            ДатаНачала = Точка;
        КонецЕсли;
        
        Если ДатаОкончания = Неопределено ИЛИ ДатаОкончания < Точка Тогда
            ДатаОкончания = Точка;
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
    
КонецФункции

&НаСервере
Процедура ВывестиСеансыНаСервере(Период, ОтборСерии)
    
    РезультатЗапросаСеансы = Сеансы(Период, ОтборСерии);
    СерииУникальные = СерииУникальные(РезультатЗапросаСеансы);
    ИсточникДанных = ИсточникДанныхСерииУникальные(СерииУникальные);
    
    ИсточникДанныхПервые = ИсточникДанныхПервые(ИсточникДанных.ТаблицаЗначений, 20);
    
    ЭтотОбъект.ДиаграммаСеансов.ИсточникДанных = ИсточникДанныхПервые;
    ЭтотОбъект.ДиаграммаСеансов.ИсточникДанных = Неопределено;
    
    УстановитьЗначениеСерииСеансов(ЭтотОбъект.ДиаграммаСеансов, ИсточникДанных.СерииПараметры);
    
КонецПроцедуры

&НаСервере
Функция ИсточникДанныхПервые(ИсточникДанных, Знач Количество)
    
    СтрокиКопировать = Новый Массив;
    
    Если ИсточникДанных.Количество() < Количество Тогда
        Количество = ИсточникДанных.Количество();
    КонецЕсли;
        
    Индекс = 0;
    Пока Индекс < Количество Цикл
        
        СтрокиКопировать.Добавить(ИсточникДанных[Индекс]);
        Индекс = Индекс + 1;        
        
    КонецЦикла;
    
    Возврат ИсточникДанных.Скопировать(СтрокиКопировать);
    
КонецФункции

&НаСервере
Функция Сеансы(Период, ОтборСерии)
    
    ОтборСеансов = Новый ТаблицаЗначений;
    ОтборСеансов.Колонки.Добавить("Кластер", Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля"));
    ОтборСеансов.Колонки.Добавить("Сервер", Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля"));
    ОтборСеансов.Колонки.Добавить("Процесс", Новый ОписаниеТипов("Число"));
        
    Для Каждого Серия Из ОтборСерии Цикл
        
        ЭлементОтбора = ОтборСеансов.Добавить();
        ЭлементОтбора.Кластер = Серия.Кластер;
        ЭлементОтбора.Сервер = Серия.Сервер;
        ЭлементОтбора.Процесс = Серия.Процесс;
        
    КонецЦикла;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Кластер,
    |   Сервер,
    |   Процесс
    |ПОМЕСТИТЬ
    |   ОтборСеансов
    |ИЗ
    |   &ОтборСеансов КАК ОтборСеансов
    |ИНДЕКСИРОВАТЬ ПО
    |   Кластер,
    |   Сервер,
    |   Процесс
    |;
    |ВЫБРАТЬ
    |   Сеансы.Кластер,
    |   Сеансы.Сервер,
    |   Сеансы.База,
    |   Сеансы.Сеанс,
    |   Сеансы.Пользователь,
    |   Сеансы.Приложение,
    |   Сеансы.Время,
    |   Сеансы.ИдентификаторСеанса,
    |   Сеансы.Процесс,
    |   Сеансы.ПроцессорноеВремяТекущее КАК ПроцессорноеВремяТекущее
    |ИЗ
    |   РегистрСведений.МониторингСеансов КАК Сеансы
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   ОтборСеансов КАК ОтборСеансов
    |ПО
    |   Сеансы.Кластер = ОтборСеансов.Кластер
    |   И Сеансы.Сервер = ОтборСеансов.Сервер
    |   И Сеансы.Процесс = ОтборСеансов.Процесс
    |ГДЕ
    |   Время МЕЖДУ &ДатаНачала И &ДатаОкончания
    |УПОРЯДОЧИТЬ ПО
    |   Сеансы.ИдентификаторСеанса,
    |   Сеансы.Время ВОЗР
    |";
    
    Запрос.УстановитьПараметр("ОтборСеансов", ОтборСеансов);
    Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
    
    Возврат Запрос.Выполнить();
    
КонецФункции

&НаСервере
Функция СерииУникальные(РезультатЗапроса)
    
    Выборка = РезультатЗапроса.Выбрать();
    
    СерииУникальные = Новый Соответствие;
    
    Пока Выборка.Следующий() Цикл
        
        СерияУникальная = СерииУникальные[Выборка.ИдентификаторСеанса];
        
        Если СерияУникальная = Неопределено Тогда
            
            СерияУникальная = Новый Структура("Кластер, База, Сервер, Сеанс, Процесс, ИдентификаторСеанса, Приложение, Пользователь, ПроцессорноеВремяТекущее, ПроцессорноеВремяВыделено");
            ЗаполнитьЗначенияСвойств(СерияУникальная, Выборка);
            СерияУникальная.ПроцессорноеВремяВыделено = 0;
            СерииУникальные.Вставить(Выборка.ИдентификаторСеанса, СерияУникальная);
            
        Иначе
            
            ПамятьПрирост = Выборка.ПроцессорноеВремяТекущее - СерияУникальная.ПроцессорноеВремяТекущее;
            СерияУникальная.ПроцессорноеВремяТекущее = Выборка.ПроцессорноеВремяТекущее;
            
            Если ПамятьПрирост > 0 Тогда
                СерияУникальная.ПроцессорноеВремяВыделено = СерияУникальная.ПроцессорноеВремяВыделено + ПамятьПрирост;
            КонецЕсли;
                        
        КонецЕсли;
                
    КонецЦикла;
    
    Возврат СерииУникальные;
    
КонецФункции

&НаСервере
Функция ИсточникДанныхСерииУникальные(СерииУникальные)
    
    СерииПараметры = Новый Соответствие;
    
    ТЗнИсточникДанных = Новый ТаблицаЗначений;
    ТЗнИсточникДанных.Колонки.Добавить("Серия");
    ТЗнИсточникДанных.Колонки.Добавить("ПроцессорноеВремя");
    ТЗнИсточникДанных.Индексы.Добавить("ПроцессорноеВремя");
    
    Для Каждого СерияУникальная Из СерииУникальные Цикл
        
        Если СерияУникальная.Значение.ПроцессорноеВремяВыделено > 0 Тогда
            
            НовСерия = ТЗнИсточникДанных.Добавить();
            ИмяСеанса = ИмяСеанса(СерияУникальная.Значение);
            НовСерия.Серия = ИмяСеанса(СерияУникальная.Значение);
            НовСерия.ПроцессорноеВремя = СерияУникальная.Значение.ПроцессорноеВремяВыделено;
            
            СерииПараметры.Вставить(ИмяСеанса, СерияУникальная.Значение);
            
        КонецЕсли;
        
    КонецЦикла;
    
    ТЗнИсточникДанных.Сортировать("ПроцессорноеВремя Убыв");
    
    Возврат Новый Структура("ТаблицаЗначений, СерииПараметры", ТЗнИсточникДанных, СерииПараметры);
    
КонецФункции

&НаСервере
Функция ИмяСеанса(ПараметрыСеанса)
    
    ИмяМассив = Новый Массив;
    
    ИмяМассив.Добавить(ПараметрыСеанса.Приложение);
    ИмяМассив.Добавить(ПараметрыСеанса.Пользователь);
    ИмяМассив.Добавить(Формат(ПараметрыСеанса.Сеанс, "ЧН=0; ЧГ=0"));
    
    Возврат СтрСоединить(ИмяМассив, "\");
    
КонецФункции

&НаСервере
Процедура УстановитьЗначениеСерииСеансов(Диаграмма, СерииПараметры)
    
    Для Каждого Серия Из ЭтотОбъект.ДиаграммаСеансов.Серии Цикл
        
        Серия.Значение = СерииПараметры[Серия.Текст];
        
        Для Каждого Точка Из ЭтотОбъект.ДиаграммаСеансов.Точки Цикл
            
            Подсказка = ПодсказкаСеансов(Точка, Серия);
            ЭтотОбъект.ДиаграммаСеансов.УстановитьЗначение(Точка, Серия, Серия.Значение.ПроцессорноеВремяВыделено,,Подсказка);
            
        КонецЦикла;
        
    КонецЦикла;    
    
КонецПроцедуры

&НаСервере
Функция ПодсказкаСеансов(Точка, Серия)
    
    ШрифтЖирный = Новый Шрифт(,,Истина);
    
    Содержимое = Новый Массив;
    
    Содержимое.Добавить(Новый ФорматированнаяСтрока(Формат(Серия.Значение.ПроцессорноеВремяВыделено, "ЧГ=3,0") + " мсек" + Символы.ПС, Новый Шрифт(,12,Истина,,Истина), WebЦвета.Синий));
    Содержимое.Добавить(" " + Символы.ПС);
    
    Содержимое.Добавить(Новый ФорматированнаяСтрока("Сеанс: ", ШрифтЖирный));
    Содержимое.Добавить(ИмяСеанса(Серия.Значение));
    Содержимое.Добавить(Символы.ПС);
    
    Содержимое.Добавить(Новый ФорматированнаяСтрока("Процесс: ", ШрифтЖирный));
    Содержимое.Добавить(Формат(Серия.Значение.Процесс,"ЧГ=0"));
    Содержимое.Добавить(Символы.ПС);
    
    Содержимое.Добавить(Новый ФорматированнаяСтрока("Кластер: ", ШрифтЖирный));
    Содержимое.Добавить(Строка(Серия.Значение.Кластер));
    Содержимое.Добавить(Символы.ПС);
    
    Содержимое.Добавить(Новый ФорматированнаяСтрока("Инф. база: ", ШрифтЖирный));
    Содержимое.Добавить(Строка(Серия.Значение.База));
    Содержимое.Добавить(Символы.ПС);
    
    Содержимое.Добавить(Новый ФорматированнаяСтрока("Сервер: ", ШрифтЖирный));
    Содержимое.Добавить(Строка(Серия.Значение.Сервер));
    Содержимое.Добавить(Символы.ПС);
    
    Возврат Новый ФорматированнаяСтрока(Содержимое);
    
КонецФункции

&НаСервере
Процедура ВывестиСеансыПодробно(Период, Сеансы)
    
    РезультатЗапросаСеансыПодробно = СеансыПодробно(Период, Сеансы);
    ИсточникДанных = ИсточникДанныхСеансыПодробно(РезультатЗапросаСеансыПодробно);
    
    БазовоеЗначение = БазовоеЗначениеСеансыПодробно(ИсточникДанных.ТаблицаЗначений);
    
    ЭтотОбъект.ДиаграммаСеанс.СерииВСтроках = Ложь;
    ЭтотОбъект.ДиаграммаСеанс.ИсточникДанных = ИсточникДанных.ТаблицаЗначений;
    ЭтотОбъект.ДиаграммаСеанс.ИсточникДанных = Неопределено;
    
    ЭтотОбъект.ДиаграммаСеанс.БазовоеЗначение = БазовоеЗначение - Цел(БазовоеЗначение/10);
    
    УстановитьЗначениеСерий(ЭтотОбъект.ДиаграммаСеанс, ИсточникДанных.ЗначениеСерий);
    УстановитьЗначениеТочек(ЭтотОбъект.ДиаграммаСеанс, "ДФ='dd.MM.yy HH:mm:ss'");
        
КонецПроцедуры

&НаСервере
Функция БазовоеЗначениеСеансыПодробно(ТаблицаЗначений)
    
    БазовоеЗначение = Неопределено;
    
    ВсегоКолонок = ТаблицаЗначений.Колонки.Количество() - 1;
    
    ИндексКолонки = 0;
    Пока ИндексКолонки < ВсегоКолонок Цикл
        
        Для Каждого ТекСтрока Из ТаблицаЗначений Цикл
            
            Значение = ТекСтрока["_" + Формат(ИндексКолонки,"ЧН=0; ЧГ=0")];
            
            Если БазовоеЗначение = Неопределено ИЛИ БазовоеЗначение > Значение Тогда
                БазовоеЗначение = Значение;
            КонецЕсли;
            
        КонецЦикла;
        
        ИндексКолонки = ИндексКолонки + 1;
        
    КонецЦикла;
    
    Возврат БазовоеЗначение;
    
КонецФункции

&НаСервере
Функция СеансыПодробно(Период, Сеансы)
    
    ОтборСеансов = Новый ТаблицаЗначений;
    ОтборСеансов.Колонки.Добавить("Кластер", Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля"));
    ОтборСеансов.Колонки.Добавить("База", Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля"));
    ОтборСеансов.Колонки.Добавить("ИдентификаторСеанса", Новый ОписаниеТипов("УникальныйИдентификатор"));
    
    Для Каждого Сеанс Из Сеансы Цикл
        
        НовСтрока = ОтборСеансов.Добавить();
        НовСтрока.Кластер = Сеанс.Кластер;
        НовСтрока.База = Сеанс.База;
        НовСтрока.ИдентификаторСеанса = Сеанс.ИдентификаторСеанса;
        
    КонецЦикла;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ИдентификаторСеанса,
    |   Кластер,
    |   База
    |ПОМЕСТИТЬ
    |   ОтборСеансов
    |ИЗ
    |   &ОтборСеансов КАК ОтборСеансов
    |ИНДЕКСИРОВАТЬ ПО
    |   ИдентификаторСеанса,
    |   Кластер,
    |   База
    |;
    |ВЫБРАТЬ
    |   Сеансы.Время КАК ДатаТочки,
    |   Сеансы.Приложение,
    |   Сеансы.Пользователь,
    |   Сеансы.Сеанс,
    |   Сеансы.ПроцессорноеВремяТекущее КАК ПроцессорноеВремяТекущее
    |ИЗ
    |   ОтборСеансов КАК ОтборСеансов
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   РегистрСведений.МониторингСеансов КАК Сеансы
    |ПО
    |   Сеансы.ИдентификаторСеанса = ОтборСеансов.ИдентификаторСеанса
    |   И Сеансы.Кластер = ОтборСеансов.Кластер
    |   И Сеансы.База = ОтборСеансов.База
    |   И Сеансы.Время МЕЖДУ &ДатаНачала И &ДатаОкончания
    |УПОРЯДОЧИТЬ ПО
    |   Сеансы.Время
    |";
    
    Запрос.УстановитьПараметр("ОтборСеансов", ОтборСеансов);
    Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
    
    Возврат Запрос.Выполнить();
    
КонецФункции

&НаСервере
Функция ИсточникДанныхСеансыПодробно(РезультатЗапроса)
    
    ИсточникДанных = Новый Структура;
    ЗначениеСерий = Новый Соответствие;
    
    ТЗнИсточникДанных = Новый ТаблицаЗначений;
    ТЗнИсточникДанных.Колонки.Добавить("__Дата",,"Дата");
    
    КолонкиСерий = Новый Соответствие;
    
    Выборка = РезультатЗапроса.Выбрать();
    
    ТекущаяДатаВыборки = Неопределено;
    Пока Выборка.Следующий() Цикл
        
        Если Выборка.ДатаТочки <> ТекущаяДатаВыборки Тогда
            СтрокаИсточника = ТЗнИсточникДанных.Добавить();
            СтрокаИсточника.__Дата = Формат(Выборка.ДатаТочки, "ДФ='yyyyMMddHHmmss'");
            ТекущаяДатаВыборки = Выборка.ДатаТочки;
        КонецЕсли;
        
        ЗаголовокКолонки = ИмяСеанса(Выборка);
        
        ИмяКолонки = КолонкиСерий[ЗаголовокКолонки]; 
        
        Если ИмяКолонки = Неопределено Тогда
            
            ИмяКолонки = "_" + Формат(КолонкиСерий.Количество(), "ЧН=0; ЧГ=0");
            ТЗнИсточникДанных.Колонки.Добавить(ИмяКолонки,,ЗаголовокКолонки);
            КолонкиСерий.Вставить(ЗаголовокКолонки, ИмяКолонки);
            
            ЗначениеСерии = Новый Структура("Приложение, Пользователь, Сеанс", Выборка.Приложение, Выборка.Пользователь, Выборка.Сеанс);
            ЗначениеСерий.Вставить(ЗаголовокКолонки, ЗначениеСерии);
            
        КонецЕсли;
        
        СтрокаИсточника[ИмяКолонки] = Выборка.ПроцессорноеВремяТекущее;
        
    КонецЦикла;
    
    ИсточникДанных.Вставить("ТаблицаЗначений", ТЗнИсточникДанных);
    ИсточникДанных.Вставить("ЗначениеСерий", ЗначениеСерий);
    
    Возврат ИсточникДанных;
    
КонецФункции

#КонецОбласти

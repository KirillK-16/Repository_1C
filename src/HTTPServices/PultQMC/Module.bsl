
Функция v1POST(Запрос)
	
	КодОтвета = 200;
	
	КаталогЗаписи = ПолучитьКаталогЗаписи();
	
	Если КаталогЗаписи <> Неопределено Тогда
		Пакет = Запрос.ПолучитьТелоКакСтроку();
		Если НЕ ЗаписатьПакет(Пакет, КаталогЗаписи) Тогда
			КодОтвета = 500;
		КонецЕсли;
	Иначе
		КодОтвета = 500;
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	Если КодОтвета = 200 Тогда
		Ответ.УстановитьТелоИзСтроки(Константы.ЦентрМониторингаОтветСервиса.Получить());
	КонецЕсли;
		
	Возврат Ответ;
КонецФункции

Функция v1GET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=UTF-8");
	Ответ.УстановитьТелоИзСтроки("<html><body><h1>Hello from PultQMC service</h1></body></html>");
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьКаталогЗаписи()
	
	КаталогЗаписи = Неопределено;
	
	Каталоги = Константы.КаталогиЦентраМониторинга.Получить().Получить();
	
	Если Каталоги <> Неопределено Тогда
		Для Каждого ТекКаталог Из Каталоги Цикл
			Если ТекКаталог["Использовать"] Тогда
				КаталогЗаписи = ТекКаталог["КаталогЗагрузки"];
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КаталогЗаписи;
	
КонецФункции

Функция ЗаписатьПакет(Пакет, Знач КаталогЗаписи)
	
	ПакетЗаписан = Ложь;
	
	ТекДата = ТекущаяДата();
	
	РазделительПутиСервера = ПолучитьРазделительПутиСервера();
	Если Прав(КаталогЗаписи, 1) <> РазделительПутиСервера Тогда
		КаталогЗаписи = КаталогЗаписи + РазделительПутиСервера;
	КонецЕсли;
	
	МожноЗаписывать = Истина;
	
	КаталогЗаписиДня = Формат(ТекДата, "ДФ='гггг-ММ-дд'");
	КаталогЗаписи = КаталогЗаписи + КаталогЗаписиДня + РазделительПутиСервера;
	Файл = Новый Файл(КаталогЗаписи);
	Если НЕ Файл.Существует() Тогда
		МожноЗаписывать = СоздатьКаталогПакета(КаталогЗаписи);
	КонецЕсли;
	
	Если МожноЗаписывать Тогда
		КаталогМинуты = Формат(ТекДата, "ДФ='ЧЧ-мм'");
		КаталогЗаписи = КаталогЗаписи + КаталогМинуты + РазделительПутиСервера;
		Файл = Новый Файл(КаталогЗаписи);
		Если НЕ Файл.Существует() Тогда
			МожноЗаписывать = СоздатьКаталогПакета(КаталогЗаписи);
		КонецЕсли;
				
		Если МожноЗаписывать Тогда
			
			ИмяФайлаПакета = ПолучитьИмяФайлаПакета(КаталогЗаписи, Пакет);
			
			Если ИмяФайлаПакета <> Неопределено Тогда
				Попытка
					ФайлПакета = Новый ЗаписьТекста(ИмяФайлаПакета, КодировкаТекста.UTF8);
					ФайлПакета.ЗаписатьСтроку(Пакет);
					ФайлПакета.Закрыть();
					ПакетЗаписан = Истина;
				Исключение
					ЗаписьЖурналаРегистрации("Запись файла пакета PultQMC", УровеньЖурналаРегистрации.Ошибка,,ИмяФайлаПакета, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПакетЗаписан;
	
КонецФункции

Функция ПолучитьИмяФайлаПакета(КаталогЗаписи, Пакет)
	
	ИмяФайлаПакета = Неопределено;
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Пакет);
	
		Данные = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		ИмяФайлаПакета = КаталогЗаписи + Данные["ib"] + "-null-" + Формат(ТекущаяДата(), "ДФ='гггг-ММ-ддTЧЧ-мм-сс'") + ".json";
	Исключение
		ЗаписьЖурналаРегистрации("Получить имя файла пакета PultQMC", УровеньЖурналаРегистрации.Ошибка,,ИмяФайлаПакета, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ИмяФайлаПакета;
		
КонецФункции

Функция СоздатьКаталогПакета(КаталогМинуты)
	
	КаталогСоздан = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыБлокировок");
		ЭлементБлокировки.УстановитьЗначение("Объект", КаталогМинуты);
		Блокировка.Заблокировать();
		
		СоздатьКаталог(КаталогМинуты);
		
		ЗафиксироватьТранзакцию();
	Исключение
		КаталогСоздан = Ложь;
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("Создание каталога записи пакетов PultQMC", УровеньЖурналаРегистрации.Ошибка,,КаталогМинуты, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат КаталогСоздан;
	
КонецФункции

Функция DumpsInfoGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПолученныеДампы.Период КАК Период,
	                      |	ПолученныеДампы.ИнформационнаяБаза.Наименование КАК ИнформационнаяБаза,
	                      |	ПолученныеДампы.ВариантДампа.Наименование КАК ВариантДампа,
	                      |	ПолученныеДампы.ТипДампа КАК ТипДампа,
	                      |	ПолученныеДампы.ИмяДампа КАК ИмяДампа,
	                      |	ПолученныеДампы.ЛокальныйПуть КАК ЛокальныйПуть
	                      |ИЗ
	                      |	РегистрСведений.ПолученныеДампы КАК ПолученныеДампы
	                      |ГДЕ
	                      |	НЕ ПолученныеДампы.ПереданВАвторегистратор");
	Выборка = Запрос.Выполнить().Выбрать();
	JSON = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Запись = Новый Структура("Период,ИнформационнаяБаза,ВариантДампа,ТипДампа,ИмяДампа,ЛокальныйПуть");
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		JSON.Добавить(Запись);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, JSON);
	
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Возврат Ответ;
КонецФункции

Функция DumpsInfoPOST(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИнформационнаяБазаНаименование", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	Таблица.Колонки.Добавить("ВариантДампаНаименование", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	Таблица.Колонки.Добавить("ТипДампа", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)));
	Таблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	МассивJSON = СтрокаJSONВСтруктуру(Запрос.ПолучитьТелоКакСтроку());
	РазделительПути = ПолучитьРазделительПути();
	
	Для Каждого Элемент Из МассивJSON Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ИнформационнаяБазаНаименование = Элемент.ИнформационнаяБаза;
		НоваяСтрока.Период = XMLЗначение(Тип("Дата"),Элемент.Период);
		НоваяСтрока.ВариантДампаНаименование = Элемент.ВариантДампа;
		НоваяСтрока.ТипДампа = ?(Элемент.Свойство("ТипДампа"), Элемент.ТипДампа, "3");
	КонецЦикла;		
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДанныАвторегистратора.Период КАК Период,
	                      |	ДанныАвторегистратора.ИнформационнаяБазаНаименование КАК ИнформационнаяБазаНаименование,
						  |	ДанныАвторегистратора.ТипДампа КАК ТипДампа,
	                      |	ДанныАвторегистратора.ВариантДампаНаименование КАК ВариантДампаНаименование
	                      |ПОМЕСТИТЬ ВТ_ДанныеАвторегистратора
	                      |ИЗ
	                      |	&ДанныАвторегистратора КАК ДанныАвторегистратора
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ДанныеАвторегистратора.Период КАК Период,
	                      |	ВТ_ДанныеАвторегистратора.ИнформационнаяБазаНаименование КАК ИнформационнаяБазаНаименование,
	                      |	ВТ_ДанныеАвторегистратора.ВариантДампаНаименование КАК ВариантДампаНаименование,
						  |	ВТ_ДанныеАвторегистратора.ТипДампа КАК ТипДампа,
	                      |	ЕСТЬNULL(ИнформационныеБазы.Ссылка, ЗНАЧЕНИЕ(Справочник.ИнформационныеБазы.ПустаяСсылка)) КАК ИнформационнаяБаза,
	                      |	ЕСТЬNULL(ВариантыДамповЦентрМониторинга.Ссылка, ЗНАЧЕНИЕ(Справочник.ВариантыДамповЦентрМониторинга.ПустаяСсылка)) КАК ВариантДампа
	                      |ПОМЕСТИТЬ ВТ_КонечнаяТаблица
	                      |ИЗ
	                      |	ВТ_ДанныеАвторегистратора КАК ВТ_ДанныеАвторегистратора
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеБазы КАК ИнформационныеБазы
	                      |		ПО ВТ_ДанныеАвторегистратора.ИнформационнаяБазаНаименование = ИнформационныеБазы.Наименование
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыДамповЦентрМониторинга КАК ВариантыДамповЦентрМониторинга
	                      |		ПО ВТ_ДанныеАвторегистратора.ВариантДампаНаименование = ВариантыДамповЦентрМониторинга.Наименование
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_КонечнаяТаблица.ИнформационнаяБазаНаименование КАК ИнформационнаяБазаНаименование,
	                      |	ВТ_КонечнаяТаблица.ВариантДампаНаименование КАК ВариантДампаНаименование,
						  |	ВТ_КонечнаяТаблица.ТипДампа КАК ТипДампа,
	                      |	ВТ_КонечнаяТаблица.Период КАК Период,
	                      |	ВТ_КонечнаяТаблица.ИнформационнаяБаза КАК ИнформационнаяБаза,
	                      |	ВТ_КонечнаяТаблица.ВариантДампа КАК ВариантДампа,
	                      |	ЕСТЬNULL(ПолученныеДампы.ПереданВАвторегистратор, Неопределено) КАК ПереданВАвторегистратор
	                      |ИЗ
	                      |	ВТ_КонечнаяТаблица КАК ВТ_КонечнаяТаблица
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолученныеДампы КАК ПолученныеДампы
	                      |		ПО ВТ_КонечнаяТаблица.Период = ПолученныеДампы.Период
	                      |			И ВТ_КонечнаяТаблица.ИнформационнаяБаза = ПолученныеДампы.ИнформационнаяБаза
	                      |			И ВТ_КонечнаяТаблица.ВариантДампа = ПолученныеДампы.ВариантДампа
						  |			И ВТ_КонечнаяТаблица.ТипДампа = ПолученныеДампы.ТипДампа
	                      |			И (НЕ ПолученныеДампы.ПереданВАвторегистратор)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ВТ_КонечнаяТаблица.ВариантДампаНаименование КАК ВариантДампаНаименование
	                      |ИЗ
	                      |	ВТ_КонечнаяТаблица КАК ВТ_КонечнаяТаблица
	                      |ГДЕ
	                      |	ВТ_КонечнаяТаблица.ВариантДампа = ЗНАЧЕНИЕ(Справочник.ВариантыДамповЦентрМониторинга.ПустаяСсылка)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ВТ_КонечнаяТаблица.ИнформационнаяБазаНаименование КАК ИнформационнаяБазаНаименование
	                      |ИЗ
	                      |	ВТ_КонечнаяТаблица КАК ВТ_КонечнаяТаблица
	                      |ГДЕ
	                      |	ВТ_КонечнаяТаблица.ИнформационнаяБаза = ЗНАЧЕНИЕ(Справочник.ИнформационныеБазы.ПустаяСсылка)");
	Запрос.УстановитьПараметр("ДанныАвторегистратора", Таблица);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ОшибкиИБ = МассивРезультатов[4].Выгрузить();
	ОшибкиДампов = МассивРезультатов[3].Выгрузить();
	ДляЗаписи = МассивРезультатов[2].Выгрузить();
	
	ИнформацияОбОшибке = "";
	
	Если ОшибкиИБ.Количество() Тогда
		Ответ.КодСостояния = 500;
		Содержимое = СтрСоединить(ОшибкиИБ.ВыгрузитьКолонку("ИнформационнаяБазаНаименование"),"; ");
		ИнформацияОбОшибке = ИнформацияОбОшибке + Нстр("ru = 'Не удалось найти информационные базы! '") + Содержимое;
	КонецЕсли;
	Если ОшибкиДампов.Количество() Тогда
		Ответ.КодСостояния = 500;
		Содержимое = СтрСоединить(ОшибкиДампов.ВыгрузитьКолонку("ВариантДампаНаименование"),"; ");
		ИнформацияОбОшибке = ИнформацияОбОшибке + ?(ПустаяСтрока(ИнформацияОбОшибке),"",Символы.ПС) + НСтр("ru = 'Не удалось найти варианты дампов! '") + Содержимое;
	КонецЕсли;
	МассивОшибок = ДляЗаписи.НайтиСтроки(Новый Структура("ПереданВАвторегистратор", Неопределено));
	Если МассивОшибок.Количество() Тогда
		Ответ.КодСостояния = 500;	
		ИнформацияОбОшибке = ИнформацияОбОшибке + ?(ПустаяСтрока(ИнформацияОбОшибке),"",Символы.ПС) + НСтр("ru = 'Не найдены записи в РС Полученные дампы!'");
		ШаблонСтроки = "Период: %1; ИБ: %2; Вариант дампа: %3";
		Для Каждого СтрокаОшибки Из МассивОшибок Цикл
			ИнформацияОбОшибке = ИнформацияОбОшибке + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, СтрокаОшибки.Период, СтрокаОшибки.ИнформационнаяБазаНаименование, СтрокаОшибки.ВариантДампаНаименование);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИнформацияОбОшибке) Тогда
		Для Каждого Строка Из ДляЗаписи Цикл
			Запись = РегистрыСведений.ПолученныеДампы.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Строка, "Период, ИнформационнаяБаза, ВариантДампа, ТипДампа");
			Запись.Прочитать();
			Запись.ПереданВАвторегистратор = Истина;
			Запись.Записать();
		КонецЦикла;
	Иначе
		Ответ.УстановитьТелоИзСтроки(ИнформацияОбОшибке);
		Возврат Ответ;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция СтрокаJSONВСтруктуру(СтрокаJSON)
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);
	
	Возврат СтруктураJSON;
КонецФункции
	

	

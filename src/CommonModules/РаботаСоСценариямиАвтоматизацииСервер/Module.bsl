#Область СлужебныйПрограммныйИнтерфейс
Функция ПолучитьТекущуюДатуСеанса() Экспорт
	Возврат ТекущаяДатаСеанса();	
КонецФункции

Функция ПолучитьТекущуюУниверсальнуюДату() Экспорт
	Возврат ТекущаяУниверсальнаяДата();	
КонецФункции

Функция ПолучитьСтруктуруДатСеанса() Экспорт
	ТекДата = ПолучитьТекущуюДатуСеанса();
	ТекУниверсальнаяДата = ПолучитьТекущуюУниверсальнуюДату();
	
	Возврат Новый Структура("ТекущаяДатаСеанса, ТекущаяУниверсальнаяДатаСеанса", ТекДата, ТекУниверсальнаяДата);
КонецФункции	

Функция ПолучитьЗначениеРеквизитаСценарияНаСервере(Ссылка, ИмяРеквизита) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭкземплярыСценариевАвтоматизации." + ИмяРеквизита + " КАК Реквизит
	                      |ИЗ
	                      |	Справочник.ЭкземплярыСценариевАвтоматизации КАК ЭкземплярыСценариевАвтоматизации
	                      |ГДЕ
	                      |	ЭкземплярыСценариевАвтоматизации.Ссылка = &Ссылка");	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Реквизит;
	КонецЕсли;	
КонецФункции	
	
Функция ПолучитьПараметрыСценарияНаСервере(ИдентификаторШага) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага,
	                      |	СтруктураШаговСценария.Команда КАК Команда
	                      |ПОМЕСТИТЬ ДанныеШагаСценария
	                      |ИЗ
	                      |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
	                      |ГДЕ
	                      |	СтруктураШаговСценария.ИдентификаторШага = &ИдентификаторШага
	                      |	И СтруктураШаговСценария.Команда = &Команда
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ИдентификаторШага,
	                      |	Команда
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага,
	                      |	СтруктураШаговСценария.Команда КАК Команда,
	                      |	ПараметрыШаговАвтоматизации.Параметр КАК Параметр,
	                      |	ЕСТЬNULL(ШаблоныЗаполненияПараметровСценариев.Значение, ПараметрыШаговАвтоматизации.Значение) КАК РеальноеЗначение,
	                      |	ЕСТЬNULL(ШаблоныЗаполненияПараметровСценариев.ИмяШаблона, ПараметрыШаговАвтоматизации.Значение) КАК Значение,
	                      |	ВЫБОР
	                      |		КОГДА НЕ КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра ЕСТЬ NULL
	                      |			ТОГДА 0
	                      |		КОГДА НЕ КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра ЕСТЬ NULL
	                      |			ТОГДА 2
	                      |		ИНАЧЕ 3
	                      |	КОНЕЦ КАК Обязательный,
	                      |	ВЫБОР
	                      |		КОГДА НЕ КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра ЕСТЬ NULL
	                      |			ТОГДА КомандыАвтоматизацииПараметрыОбязательные.Описание
	                      |		КОГДА НЕ КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра ЕСТЬ NULL
	                      |			ТОГДА КомандыАвтоматизацииПараметрыДополнительные.Описание
	                      |		ИНАЧЕ """"
	                      |	КОНЕЦ КАК Описание,
	                      |	ВЫБОР
	                      |		КОГДА НЕ ШаблоныЗаполненияПараметровСценариев.СпособЗаполнения ЕСТЬ NULL
	                      |			ТОГДА ШаблоныЗаполненияПараметровСценариев.СпособЗаполнения
	                      |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПараметровКоманды.РучнойВвод)
	                      |	КОНЕЦ КАК СпособЗаполненияПараметра,
	                      |	ВЫБОР
	                      |		КОГДА НЕ ШаблоныЗаполненияПараметровСценариев.ОтносительнаяСсылкаНаМетаданные ЕСТЬ NULL
	                      |			ТОГДА ШаблоныЗаполненияПараметровСценариев.ОтносительнаяСсылкаНаМетаданные
	                      |		ИНАЧЕ ""Строка""
	                      |	КОНЕЦ КАК ОтносительнаяСсылкаНаЗначениеПараметра,
	                      |	ИСТИНА КАК ЗаполненоРанее,
	                      |	ПараметрыШаговАвтоматизации.ШаблонЗаполнения КАК ШаблонЗаполнения
	                      |ПОМЕСТИТЬ ЗаполненныеПараметры
	                      |ИЗ
	                      |	ДанныеШагаСценария КАК СтруктураШаговСценария
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыШаговАвтоматизации КАК ПараметрыШаговАвтоматизации
	                      |		ПО СтруктураШаговСценария.ИдентификаторШага = ПараметрыШаговАвтоматизации.ИдентификаторШага
	                      |			И СтруктураШаговСценария.Команда = ПараметрыШаговАвтоматизации.Команда
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КомандыАвтоматизации.ПараметрыДополнительные КАК КомандыАвтоматизацииПараметрыДополнительные
	                      |		ПО (ПараметрыШаговАвтоматизации.Параметр = КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра)
	                      |			И (ПараметрыШаговАвтоматизации.Команда = КомандыАвтоматизацииПараметрыДополнительные.Ссылка)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КомандыАвтоматизации.ПараметрыОбязательные КАК КомандыАвтоматизацииПараметрыОбязательные
	                      |		ПО (ПараметрыШаговАвтоматизации.Параметр = КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра)
	                      |			И (ПараметрыШаговАвтоматизации.Команда = КомандыАвтоматизацииПараметрыОбязательные.Ссылка)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШаблоныЗаполненияПараметровСценариев КАК ШаблоныЗаполненияПараметровСценариев
	                      |		ПО (ПараметрыШаговАвтоматизации.ШаблонЗаполнения = ШаблоныЗаполненияПараметровСценариев.ИмяШаблона)
	                      |			И (ПараметрыШаговАвтоматизации.ИдентификаторШага = &ИдентификаторШага)
	                      |			И (ШаблоныЗаполненияПараметровСценариев.ЭкземплярСценария = &Сценарий)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ПараметрыШаговАвтоматизации.Параметр,
	                      |	ЕСТЬNULL(ШаблоныЗаполненияПараметровСценариев.Значение, ПараметрыШаговАвтоматизации.Значение),
	                      |	ЕСТЬNULL(ШаблоныЗаполненияПараметровСценариев.ИмяШаблона, ПараметрыШаговАвтоматизации.Значение),
	                      |	СтруктураШаговСценария.ИдентификаторШага,
	                      |	СтруктураШаговСценария.Команда,
	                      |	ВЫБОР
	                      |		КОГДА НЕ КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра ЕСТЬ NULL
	                      |			ТОГДА 0
	                      |		КОГДА НЕ КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра ЕСТЬ NULL
	                      |			ТОГДА 2
	                      |		ИНАЧЕ 3
	                      |	КОНЕЦ,
	                      |	ВЫБОР
	                      |		КОГДА НЕ КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра ЕСТЬ NULL
	                      |			ТОГДА КомандыАвтоматизацииПараметрыОбязательные.Описание
	                      |		КОГДА НЕ КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра ЕСТЬ NULL
	                      |			ТОГДА КомандыАвтоматизацииПараметрыДополнительные.Описание
	                      |		ИНАЧЕ """"
	                      |	КОНЕЦ,
	                      |	ВЫБОР
	                      |		КОГДА НЕ ШаблоныЗаполненияПараметровСценариев.СпособЗаполнения ЕСТЬ NULL
	                      |			ТОГДА ШаблоныЗаполненияПараметровСценариев.СпособЗаполнения
	                      |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПараметровКоманды.РучнойВвод)
	                      |	КОНЕЦ,
	                      |	ВЫБОР
	                      |		КОГДА НЕ ШаблоныЗаполненияПараметровСценариев.ОтносительнаяСсылкаНаМетаданные ЕСТЬ NULL
	                      |			ТОГДА ШаблоныЗаполненияПараметровСценариев.ОтносительнаяСсылкаНаМетаданные
	                      |		ИНАЧЕ ""Строка""
	                      |	КОНЕЦ,
	                      |	ПараметрыШаговАвтоматизации.ШаблонЗаполнения
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Параметр,
	                      |	Команда
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЗаполненныеПараметры.ИдентификаторШага КАК ИдентификаторШага,
	                      |	ЗаполненныеПараметры.Команда КАК Команда,
	                      |	ЗаполненныеПараметры.Параметр КАК Параметр,
	                      |	ЗаполненныеПараметры.РеальноеЗначение КАК РеальноеЗначение,
	                      |	ЗаполненныеПараметры.Значение КАК Значение,
	                      |	ЗаполненныеПараметры.Обязательный КАК Обязательный,
	                      |	ЗаполненныеПараметры.Описание КАК Описание,
	                      |	ЛОЖЬ КАК ПоУмолчанию,
	                      |	ЗаполненныеПараметры.СпособЗаполненияПараметра КАК СпособЗаполненияПараметра,
	                      |	ЗаполненныеПараметры.ОтносительнаяСсылкаНаЗначениеПараметра КАК ОтносительнаяСсылкаНаЗначениеПараметра,
	                      |	ЗаполненныеПараметры.ЗаполненоРанее КАК ЗаполненоРанее,
	                      |	ЗаполненныеПараметры.ШаблонЗаполнения КАК ШаблонЗаполнения
	                      |ИЗ
	                      |	ЗаполненныеПараметры КАК ЗаполненныеПараметры
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	СтруктураШаговСценария.ИдентификаторШага,
	                      |	СтруктураШаговСценария.Команда,
	                      |	КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра,
	                      |	"""",
	                      |	"""",
	                      |	0,
	                      |	КомандыАвтоматизацииПараметрыОбязательные.Описание,
	                      |	ЛОЖЬ,
	                      |	КомандыАвтоматизацииПараметрыОбязательные.СпособЗаполненияПараметра,
	                      |	КомандыАвтоматизацииПараметрыОбязательные.ОтносительнаяСсылкаНаРеквизит,
	                      |	ЛОЖЬ,
	                      |	""""
	                      |ИЗ
	                      |	ДанныеШагаСценария КАК СтруктураШаговСценария
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомандыАвтоматизации.ПараметрыОбязательные КАК КомандыАвтоматизацииПараметрыОбязательные
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ ЗаполненныеПараметры КАК ЗаполненныеПараметры
	                      |			ПО КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра = ЗаполненныеПараметры.Параметр
	                      |				И КомандыАвтоматизацииПараметрыОбязательные.Ссылка = ЗаполненныеПараметры.Команда
	                      |		ПО СтруктураШаговСценария.Команда = КомандыАвтоматизацииПараметрыОбязательные.Ссылка
	                      |ГДЕ
	                      |	ЗаполненныеПараметры.Параметр ЕСТЬ NULL
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СтруктураШаговСценария.ИдентификаторШага,
	                      |	КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра,
	                      |	КомандыАвтоматизацииПараметрыОбязательные.Описание,
	                      |	СтруктураШаговСценария.Команда,
	                      |	КомандыАвтоматизацииПараметрыОбязательные.СпособЗаполненияПараметра,
	                      |	КомандыАвтоматизацииПараметрыОбязательные.ОтносительнаяСсылкаНаРеквизит
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	СтруктураШаговСценария.ИдентификаторШага,
	                      |	СтруктураШаговСценария.Команда,
	                      |	КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра,
	                      |	"""",
	                      |	"""",
	                      |	2,
	                      |	КомандыАвтоматизацииПараметрыДополнительные.Описание,
	                      |	ИСТИНА,
	                      |	КомандыАвтоматизацииПараметрыДополнительные.СпособЗаполненияПараметра,
	                      |	КомандыАвтоматизацииПараметрыДополнительные.ОтносительнаяСсылкаНаРеквизит,
	                      |	ЛОЖЬ,
	                      |	""""
	                      |ИЗ
	                      |	ДанныеШагаСценария КАК СтруктураШаговСценария
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомандыАвтоматизации.ПараметрыДополнительные КАК КомандыАвтоматизацииПараметрыДополнительные
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ ЗаполненныеПараметры КАК ЗаполненныеПараметры
	                      |			ПО КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра = ЗаполненныеПараметры.Параметр
	                      |				И КомандыАвтоматизацииПараметрыДополнительные.Ссылка = ЗаполненныеПараметры.Команда
	                      |		ПО СтруктураШаговСценария.Команда = КомандыАвтоматизацииПараметрыДополнительные.Ссылка
	                      |ГДЕ
	                      |	ЗаполненныеПараметры.Параметр ЕСТЬ NULL
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СтруктураШаговСценария.Команда,
	                      |	КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра,
	                      |	КомандыАвтоматизацииПараметрыДополнительные.Описание,
	                      |	СтруктураШаговСценария.ИдентификаторШага,
	                      |	КомандыАвтоматизацииПараметрыДополнительные.СпособЗаполненияПараметра,
	                      |	КомандыАвтоматизацииПараметрыДополнительные.ОтносительнаяСсылкаНаРеквизит
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Обязательный,
	                      |	Параметр
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ДанныеШагаСценария
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ЗаполненныеПараметры");
	
	Запрос.УстановитьПараметр("ИдентификаторШага", ИдентификаторШага);
	Запрос.УстановитьПараметр("Сценарий", ИдентификаторШага.Владелец);
	Запрос.УстановитьПараметр("Команда", ИдентификаторШага.Команда);
	
	ТаблицаПараметров = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПараметров;
КонецФункции	
	
Функция СоздатьЭлементыШаговАвтоматизации(ЭкземплярСценария, Сценарий) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СценарииАвтоматизацииШагиАвтоматизации.НомерШага КАК НомерШага,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.УникальныйИдентификаторШага КАК УникальныйИдентификаторШага,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ТипШага КАК ТипШага,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.Команда КАК Команда,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ШаблонЕдиницыОборудования КАК ШаблонЕдиницыОборудования,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ВремяНачалаШага КАК ВремяНачала,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ШагРодитель КАК ШагРодитель,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ВключенПоУмолчанию КАК ВключенПоУмолчанию,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ВключенПоУмолчаниюОткат КАК ВключенПоУмолчаниюОткат,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.Название КАК Название,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.КомандаОтката КАК КомандаОтката
	                      |ПОМЕСТИТЬ СценарииАвтоматизацииШагиАвтоматизации
	                      |ИЗ
	                      |	Справочник.СценарииАвтоматизации.ШагиАвтоматизации КАК СценарииАвтоматизацииШагиАвтоматизации
	                      |ГДЕ
	                      |	СценарииАвтоматизацииШагиАвтоматизации.Ссылка = &Владелец
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	НомерШага,
	                      |	ТипШага,
	                      |	ШаблонЕдиницыОборудования
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СценарииАвтоматизацииШагиАвтоматизации.НомерШага КАК НомерШага,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.УникальныйИдентификаторШага КАК УникальныйИдентификаторШага,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ТипШага КАК ТипШага,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.Название КАК Название,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.Команда КАК Команда,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ШаблонЕдиницыОборудования КАК ШаблонЕдиницыОборудования,
	                      |	ЕСТЬNULL(СтруктураШаговСценария.ВремяНачала, СценарииАвтоматизацииШагиАвтоматизации.ВремяНачала) КАК ВремяНачала,
	                      |	ВЫБОР
	                      |		КОГДА СтруктураШаговСценария.ИдентификаторШага ЕСТЬ NULL
	                      |			ТОГДА СценарииАвтоматизацииШагиАвтоматизации.ВключенПоУмолчанию
	                      |		ИНАЧЕ СтруктураШаговСценария.Использовать
	                      |	КОНЕЦ КАК Использовать,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ШагРодитель КАК ШагРодитель,
	                      |	ЕСТЬNULL(СтруктураШаговСценария.ИдентификаторШага, ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)) КАК ИдентификаторШага,
	                      |	ЕСТЬNULL(СтруктураШаговСценария.ДополнительнаяИнформация, """") КАК ДополнительнаяИнформация,
	                      |	ЕСТЬNULL(ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблонов.РеальноеЗначение, СтруктураШаговСценария.Оборудование) КАК Оборудование,
	                      |	ЕСТЬNULL(СтруктураШаговСценария.СостояниеШага, ЗНАЧЕНИЕ(Перечисление.СостоянияШаговСценария.НеВыполнялся)) КАК СостояниеШага,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.КомандаОтката КАК КомандаОтката,
	                      |	ЕСТЬNULL(СтруктураШаговСценарияОтката.ИдентификаторШага, ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)) КАК ИдентификаторШагаОтката,
						  |	ЕСТЬNULL(СтруктураШаговСценарияОтката.ДополнительнаяИнформация, """") КАК ДополнительнаяИнформацияОткат,
	                      |	ВЫБОР
	                      |		КОГДА СтруктураШаговСценарияОтката.ИдентификаторШага ЕСТЬ NULL
	                      |			ТОГДА СценарииАвтоматизацииШагиАвтоматизации.ВключенПоУмолчаниюОткат
	                      |		ИНАЧЕ СтруктураШаговСценарияОтката.Использовать
	                      |	КОНЕЦ КАК ИспользоватьОткат
	                      |ИЗ
	                      |	СценарииАвтоматизацииШагиАвтоматизации КАК СценарииАвтоматизацииШагиАвтоматизации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
	                      |		ПО СценарииАвтоматизацииШагиАвтоматизации.НомерШага = СтруктураШаговСценария.НомерШага
	                      |			И СценарииАвтоматизацииШагиАвтоматизации.ТипШага = СтруктураШаговСценария.ТипШага
	                      |			И (СтруктураШаговСценария.Сценарий = &ЭтотСценарий)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценарияОтката
	                      |		ПО СценарииАвтоматизацииШагиАвтоматизации.НомерШага = СтруктураШаговСценарияОтката.НомерШага
	                      |			И СценарииАвтоматизацииШагиАвтоматизации.ТипШага = СтруктураШаговСценарияОтката.ТипШага
	                      |			И (СтруктураШаговСценарияОтката.Сценарий = &ЭтотСценарий)
	                      |			И (СтруктураШаговСценарияОтката.ОткатываемыйШаг <> ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка))
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭкземплярыСценариевАвтоматизации.СопоставлениеШаблоновОборудования КАК ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблонов
	                      |		ПО СценарииАвтоматизацииШагиАвтоматизации.ШаблонЕдиницыОборудования = ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблонов.Шаблон
	                      |			И (ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблонов.Ссылка = &ЭтотСценарий)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ТипШага,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.Название,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.Команда,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ШаблонЕдиницыОборудования,
	                      |	ЕСТЬNULL(СтруктураШаговСценария.ВремяНачала, СценарииАвтоматизацииШагиАвтоматизации.ВремяНачала),
	                      |	ВЫБОР
	                      |		КОГДА СтруктураШаговСценария.ИдентификаторШага ЕСТЬ NULL
	                      |			ТОГДА СценарииАвтоматизацииШагиАвтоматизации.ВключенПоУмолчанию
	                      |		ИНАЧЕ СтруктураШаговСценария.Использовать
	                      |	КОНЕЦ,
	                      |	ЕСТЬNULL(СтруктураШаговСценария.ИдентификаторШага, ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)),
	                      |	ЕСТЬNULL(ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблонов.РеальноеЗначение, СтруктураШаговСценария.Оборудование),
	                      |	СценарииАвтоматизацииШагиАвтоматизации.НомерШага,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.УникальныйИдентификаторШага,
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ШагРодитель,
	                      |	ЕСТЬNULL(СтруктураШаговСценария.СостояниеШага, ЗНАЧЕНИЕ(Перечисление.СостоянияШаговСценария.НеВыполнялся)),
	                      |	СценарииАвтоматизацииШагиАвтоматизации.КомандаОтката,
	                      |	ЕСТЬNULL(СтруктураШаговСценарияОтката.ИдентификаторШага, ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)),
						  |	ЕСТЬNULL(СтруктураШаговСценария.ДополнительнаяИнформация, """"),
						  |	ЕСТЬNULL(СтруктураШаговСценарияОтката.ДополнительнаяИнформация, """"),
	                      |	ВЫБОР
	                      |		КОГДА СтруктураШаговСценарияОтката.ИдентификаторШага ЕСТЬ NULL
	                      |			ТОГДА СценарииАвтоматизацииШагиАвтоматизации.ВключенПоУмолчаниюОткат
	                      |		ИНАЧЕ СтруктураШаговСценарияОтката.Использовать
	                      |	КОНЕЦ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерШага
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ СценарииАвтоматизацииШагиАвтоматизации");
	
	Запрос.УстановитьПараметр("Владелец", Сценарий);
	Запрос.УстановитьПараметр("ЭтотСценарий", ЭкземплярСценария);
	
	ТаблицаШагов = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Попытка
		Для Каждого СтрокаТаблицы Из ТаблицаШагов Цикл
	        				 
			// Основной прогон дерева сценария
			//
			ЭтоШагГруппа = ?(СтрокаТаблицы.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Шаг, Ложь, Истина);

			// определимся с добавлением объекта			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторШага) Тогда
				Если СтрокаТаблицы.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Шаг Тогда
					ШагСценария = Справочники.ШагиАвтоматизации.СоздатьЭлемент();
				Иначе
					ШагСценария = Справочники.ШагиАвтоматизации.СоздатьГруппу();
				КонецЕсли;
				ШагСценария.УстановитьСсылкуНового(Справочники.ШагиАвтоматизации.ПолучитьСсылку(Новый УникальныйИдентификатор()));
			Иначе
				ШагСценария = СтрокаТаблицы.ИдентификаторШага.ПолучитьОбъект();
			КонецЕсли;

			// заполняем Справочник
			Если ШагСценария.ЭтоГруппа <> ЭтоШагГруппа Тогда
				ШагСценария.ЭтоГруппа = ЭтоШагГруппа;
			КонецЕсли;

			Если ШагСценария.Владелец <> ЭкземплярСценария Тогда
				ШагСценария.Владелец = ЭкземплярСценария;
			КонецЕсли;
			
			Если ШагСценария.ТипШага <> СтрокаТаблицы.ТипШага Тогда
				ШагСценария.ТипШага = СтрокаТаблицы.ТипШага;
			КонецЕсли;
			
			СтрокаГруппировкиОбъектов = ТаблицаШагов.Найти(СтрокаТаблицы.ШагРодитель, "НомерШага");
			Если СтрокаГруппировкиОбъектов = Неопределено Тогда
				ШагРодитель = Справочники.ШагиАвтоматизации.ПустаяСсылка();
	        Иначе
				ШагРодитель = СтрокаГруппировкиОбъектов.ИдентификаторШага;
			КонецЕсли; 
			
			Если ШагСценария.Родитель <> ШагРодитель Тогда
				ШагСценария.Родитель = ШагРодитель;
			КонецЕсли;
			
			Если ШагСценария.Код <> СтрокаТаблицы.НомерШага Тогда
				ШагСценария.Код = СтрокаТаблицы.НомерШага;
			КонецЕсли;
			
			Если ШагСценария.УникальныйИдентификаторШаблонногоШага <> СтрокаТаблицы.УникальныйИдентификаторШага Тогда
				ШагСценария.УникальныйИдентификаторШаблонногоШага = СтрокаТаблицы.УникальныйИдентификаторШага;
			КонецЕсли;
			
			Если ШагСценария.Команда <> СтрокаТаблицы.Команда И СтрокаТаблицы.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Шаг Тогда
				ШагСценария.Команда = СтрокаТаблицы.Команда;
			КонецЕсли;	
			
			Если ШагСценария.ВремяНачала <> СтрокаТаблицы.ВремяНачала И СтрокаТаблицы.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Шаг Тогда
				ШагСценария.ВремяНачала = СтрокаТаблицы.ВремяНачала;
			КонецЕсли;
			Если ШагСценария.Использовать <> СтрокаТаблицы.Использовать Тогда
				ШагСценария.Использовать = СтрокаТаблицы.Использовать;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаТаблицы.Название) И  ШагСценария.Наименование <> СтрокаТаблицы.Название	Тогда
				ШагСценария.Наименование = СтрокаТаблицы.Название;
			ИначеЕсли ШагСценария.Наименование <> ?(ЗначениеЗаполнено(ШагСценария.Команда), ШагСценария.Команда , ШагСценария.ТипШага) Тогда
				ШагСценария.Наименование = ?(ЗначениеЗаполнено(ШагСценария.Команда), ШагСценария.Команда , ШагСценария.ТипШага);
			КонецЕсли;
			
			Если ШагСценария.Оборудование <> СтрокаТаблицы.Оборудование Тогда
				ШагСценария.Оборудование = СтрокаТаблицы.Оборудование;
			КонецЕсли;
			Если ШагСценария.ШаблонОборудования <> СтрокаТаблицы.ШаблонЕдиницыОборудования Тогда
				ШагСценария.ШаблонОборудования = СтрокаТаблицы.ШаблонЕдиницыОборудования;
			КонецЕсли;
			
			Если ШагСценария.Модифицированность() Тогда
				ШагСценария.Записать();
				СтрокаТаблицы.ИдентификаторШага = ШагСценария.Ссылка;
			КонецЕсли;
			
			// Создание шага отката сценария
			Если ЗначениеЗаполнено(СтрокаТаблицы.КомандаОтката) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторШагаОтката)  Тогда
					ШагОтката = Справочники.ШагиАвтоматизации.СоздатьЭлемент();
					ШагОтката.УстановитьСсылкуНового(Справочники.ШагиАвтоматизации.ПолучитьСсылку(Новый УникальныйИдентификатор()));
				Иначе
					ШагОтката = СтрокаТаблицы.ИдентификаторШагаОтката.ПолучитьОбъект();
				КонецЕсли;

				// заполняем Справочник

				Если ШагОтката.Владелец <> ЭкземплярСценария Тогда
					ШагОтката.Владелец = ЭкземплярСценария;
				КонецЕсли;
				
				Если ШагОтката.ТипШага <> Перечисления.ТипыЭлементовСхемыСценария.Шаг Тогда
					ШагОтката.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Шаг;
				КонецЕсли;
				
				Если ШагОтката.Родитель <> ШагРодитель Тогда
					ШагОтката.Родитель = ШагРодитель;
				КонецЕсли;
				
				Если ШагОтката.Код <> СтрокаТаблицы.НомерШага Тогда
					ШагОтката.Код = СтрокаТаблицы.НомерШага;
				КонецЕсли;
				
				Если ШагОтката.УникальныйИдентификаторШаблонногоШага <> СтрокаТаблицы.УникальныйИдентификаторШага Тогда
					ШагОтката.УникальныйИдентификаторШаблонногоШага = СтрокаТаблицы.УникальныйИдентификаторШага;
				КонецЕсли;
				
				Если ШагОтката.Команда <> СтрокаТаблицы.КомандаОтката Тогда
					ШагОтката.Команда = СтрокаТаблицы.КомандаОтката;
				КонецЕсли;	
				
				Если ШагОтката.Использовать <> СтрокаТаблицы.ИспользоватьОткат Тогда
					ШагОтката.Использовать = СтрокаТаблицы.ИспользоватьОткат;
				КонецЕсли;
				Если ШагОтката.Наименование <> СтрокаТаблицы.КомандаОтката Тогда
					ШагОтката.Наименование = СтрокаТаблицы.КомандаОтката;
				КонецЕсли;
				Если ШагОтката.Оборудование <> СтрокаТаблицы.Оборудование Тогда
					ШагОтката.Оборудование = СтрокаТаблицы.Оборудование;
				КонецЕсли;
				Если ШагОтката.ШаблонОборудования <> СтрокаТаблицы.ШаблонЕдиницыОборудования Тогда
					ШагОтката.ШаблонОборудования = СтрокаТаблицы.ШаблонЕдиницыОборудования;
				КонецЕсли;
				Если ШагОтката.ОткатываемыйШаг <> СтрокаТаблицы.ИдентификаторШага Тогда
					ШагОтката.ОткатываемыйШаг = СтрокаТаблицы.ИдентификаторШага;
				КонецЕсли;
				
				Если ШагОтката.Модифицированность() Тогда
					ШагОтката.Записать();
					СтрокаТаблицы.ИдентификаторШагаОтката = ШагОтката.Ссылка;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Создание сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;		
	КонецПопытки;	
		
	
	Возврат ТаблицаШагов;
КонецФункции

Функция ВыбратьДанныеШаговАвтоматизации(ЭкземплярСценария) Экспорт
	Если ЭкземплярСценария.Состояние = Перечисления.СостоянияСценария.ТестЗавершенНеуспешно
		Или ЭкземплярСценария.Состояние = Перечисления.СостоянияСценария.ТестЗавершенУспешно
		Или ЭкземплярСценария.Состояние = Перечисления.СостоянияСценария.ТестСтартован Тогда
		РеквизитСостояние = "СостояниеШагаПриТесте";
	Иначе
		РеквизитСостояние = "СостояниеШага";
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СтруктураШаговСценария.ИдентификаторШага.Код КАК НомерШага,
	                      |	СтруктураШаговСценария.ИдентификаторШага.Наименование КАК НаименованиеШага,
	                      |	СтруктураШаговСценария.ТипШага КАК ТипШага,
	                      |	СтруктураШаговСценария.Команда КАК Команда,
	                      |	СтруктураШаговСценария.ШаблонОборудования КАК ШаблонЕдиницыОборудования,
	                      |	СтруктураШаговСценария.ВремяНачала КАК ВремяНачала,
	                      |	СтруктураШаговСценария.Использовать КАК Использовать,
	                      |	СтруктураШаговСценарияОтката.Использовать КАК ИспользоватьОткат,
	                      |	ВЫБОР
	                      |		КОГДА СтруктураШаговСценария.ИдентификаторШага.Родитель = ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)
	                      |			ТОГДА -1
	                      |		ИНАЧЕ СтруктураШаговСценария.ИдентификаторШага.Родитель.Код
	                      |	КОНЕЦ КАК ШагРодитель,
	                      |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага,
	                      |	СтруктураШаговСценария.Оборудование КАК Оборудование,
	                      |	ПРЕДСТАВЛЕНИЕ(СтруктураШаговСценария.Оборудование) КАК ОборудованиеПредставление,
	                      |	СтруктураШаговСценария." + РеквизитСостояние + " КАК СостояниеШага,
	                      |	СтруктураШаговСценарияОтката.ИдентификаторШага КАК ИдентификаторШагаОтката,
	                      |	СтруктураШаговСценарияОтката." + РеквизитСостояние + " КАК СостояниеШагаОтката,
	                      |	СтруктураШаговСценария.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	                      |	СтруктураШаговСценарияОтката.ДополнительнаяИнформация КАК ДополнительнаяИнформацияОткат
	                      |ИЗ
	                      |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценарияОтката
	                      |		ПО СтруктураШаговСценария.ИдентификаторШага = СтруктураШаговСценарияОтката.ОткатываемыйШаг
	                      |ГДЕ
	                      |	СтруктураШаговСценария.Сценарий = &ЭтотСценарий
	                      |	И СтруктураШаговСценария.ОткатываемыйШаг = ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СтруктураШаговСценария." + РеквизитСостояние + ",
	                      |	СтруктураШаговСценария.Оборудование,
	                      |	СтруктураШаговСценария.ИдентификаторШага,
	                      |	СтруктураШаговСценария.Использовать,
	                      |	СтруктураШаговСценарияОтката.Использовать,
	                      |	СтруктураШаговСценария.ВремяНачала,
	                      |	СтруктураШаговСценария.Команда,
	                      |	СтруктураШаговСценария.ТипШага,
	                      |	СтруктураШаговСценария.ШаблонОборудования,
	                      |	СтруктураШаговСценария.ИдентификаторШага.Код,
	                      |	СтруктураШаговСценарияОтката.ИдентификаторШага,
	                      |	СтруктураШаговСценарияОтката." + РеквизитСостояние + ",
	                      |	ВЫБОР
	                      |		КОГДА СтруктураШаговСценария.ИдентификаторШага.Родитель = ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)
	                      |			ТОГДА -1
	                      |		ИНАЧЕ СтруктураШаговСценария.ИдентификаторШага.Родитель.Код
	                      |	КОНЕЦ,
	                      |	СтруктураШаговСценария.ДополнительнаяИнформация,
	                      |	СтруктураШаговСценарияОтката.ДополнительнаяИнформация
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерШага");
	
	Запрос.УстановитьПараметр("ЭтотСценарий", ЭкземплярСценария.Ссылка);
	
	ТаблицаШагов = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаШагов;
КонецФункции	

Процедура ВизуализацияДерева(ТаблицаШагов, ЭлементИнтерфейса) Экспорт
	// визуализация
	Если ЭлементИнтерфейса <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаШагов Цикл
	        СтрокаГруппировки = ЭлементИнтерфейса.Строки.Найти(СтрокаТаблицы.ШагРодитель, "НомерШага", Истина);
			Если СтрокаГруппировки = Неопределено Тогда
				НоваяСтрока = ЭлементИнтерфейса.Строки.Добавить();
	        Иначе
				НоваяСтрока = СтрокаГруппировки.Строки.Добавить();
			КонецЕсли; 
	
			НоваяСтрока.ИдентификаторШага = СтрокаТаблицы.ИдентификаторШага;
			НоваяСтрока.ИдентификаторШагаОтката = СтрокаТаблицы.ИдентификаторШагаОтката;
			НоваяСтрока.ТипШага = СтрокаТаблицы.ТипШага;

			НоваяСтрока.ШаблонЕдиницыОборудования = СтрокаТаблицы.ШаблонЕдиницыОборудования;
			НоваяСтрока.НомерШага = СтрокаТаблицы.НомерШага;
			НоваяСтрока.Использовать = СтрокаТаблицы.Использовать;
			НоваяСтрока.ИспользоватьОткат = СтрокаТаблицы.ИспользоватьОткат;
			НоваяСтрока.ДопИнформация = СтрокаТаблицы.ДополнительнаяИнформация;
			НоваяСтрока.ДопИнформацияОткат = СтрокаТаблицы.ДополнительнаяИнформацияОткат;
			НоваяСтрока.ВремяНачала = СтрокаТаблицы.ВремяНачала;
			
			Если СтрокаТаблицы.СостояниеШага = Перечисления.СостоянияШаговСценария.Выполнен Тогда
				НоваяСтрока.ИндексКартинки = 0;
			ИначеЕсли СтрокаТаблицы.СостояниеШага = Перечисления.СостоянияШаговСценария.ВыполненОткат Тогда
				НоваяСтрока.ИндексКартинки = 8;
			ИначеЕсли СтрокаТаблицы.СостояниеШага = Перечисления.СостоянияШаговСценария.Ошибка
				Или СтрокаТаблицы.СостояниеШага = Перечисления.СостоянияШаговСценария.ФатальнаяОшибка
				Или СтрокаТаблицы.СостояниеШага = Перечисления.СостоянияШаговСценария.ВыполнениеПрервано
				Или СтрокаТаблицы.СостояниеШага = Перечисления.СостоянияШаговСценария.ОшибкаБезПрерыванияВыполнения Тогда
				НоваяСтрока.ИндексКартинки = 2;
			ИначеЕсли СтрокаТаблицы.СостояниеШага = Перечисления.СостоянияШаговСценария.Выполняется Тогда
				НоваяСтрока.ИндексКартинки = 4;
			Иначе
				НоваяСтрока.ИндексКартинки = 6;
			КонецЕсли;	
				
			Если СтрокаТаблицы.ТипШага <> Перечисления.ТипыЭлементовСхемыСценария.Шаг Тогда
				НоваяСтрока.ИндексКартинки = НоваяСтрока.ИндексКартинки + 1;
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры	

Процедура СкопироватьЭлементыШаговАвтоматизации(СоздаваемыйЭкземпляр, Эталон) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ШагиАвтоматизации.Ссылка КАК Ссылка,
	                      |	ШагиАвтоматизации.Родитель КАК Родитель,
	                      |	ШагиАвтоматизации.Владелец КАК Владелец,
	                      |	ШагиАвтоматизации.ЭтоГруппа КАК ЭтоГруппа,
	                      |	ШагиАвтоматизации.Наименование КАК Наименование,
	                      |	ШагиАвтоматизации.ТипШага КАК ТипШага,
	                      |	ШагиАвтоматизации.Команда КАК Команда,
	                      |	ШагиАвтоматизации.ВремяНачала КАК ВремяНачала,
	                      |	ШагиАвтоматизации.Оборудование КАК Оборудование,
	                      |	ШагиАвтоматизации.Использовать КАК Использовать,
	                      |	ШагиАвтоматизации.ОткатываемыйШаг КАК ОткатываемыйШаг,
	                      |	ШагиАвтоматизации.Код КАК Код,
	                      |	ШагиАвтоматизации.ШаблонОборудования КАК ШаблонОборудования,
	                      |	ШагиАвтоматизации.УникальныйИдентификаторШаблонногоШага КАК УникальныйИдентификаторШаблонногоШага
	                      |ПОМЕСТИТЬ ШагиАвтоматизацииЭталона
	                      |ИЗ
	                      |	Справочник.ШагиАвтоматизации КАК ШагиАвтоматизации
	                      |ГДЕ
	                      |	ШагиАвтоматизации.Владелец = &Эталон
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ШагиАвтоматизации.Ссылка КАК Ссылка,
	                      |	ШагиАвтоматизации.Родитель КАК Родитель,
	                      |	ШагиАвтоматизации.ЭтоГруппа КАК ЭтоГруппа,
	                      |	ШагиАвтоматизации.Наименование КАК Наименование,
	                      |	ШагиАвтоматизации.ТипШага КАК ТипШага,
	                      |	ШагиАвтоматизации.Команда КАК Команда,
	                      |	ШагиАвтоматизации.ВремяНачала КАК ВремяНачала,
	                      |	ШагиАвтоматизации.Использовать КАК Использовать,
	                      |	ШагиАвтоматизации.ОткатываемыйШаг КАК ОткатываемыйШаг,
	                      |	ШагиАвтоматизации.ШаблонОборудования КАК ШаблонОборудования,
	                      |	ЕСТЬNULL(ПараметрыШаговАвтоматизации.Параметр, """") КАК Параметр,
	                      |	ЕСТЬNULL(ПараметрыШаговАвтоматизации.Значение, """") КАК Значение,
	                      |	ШагиАвтоматизации.Оборудование КАК Оборудование,
	                      |	ШагиАвтоматизации.Код КАК Код,
	                      |	ЕСТЬNULL(ПараметрыШаговАвтоматизации.ШаблонЗаполнения, """") КАК ШаблонЗаполнения,
	                      |	ШагиАвтоматизации.УникальныйИдентификаторШаблонногоШага КАК УникальныйИдентификаторШаблонногоШага
	                      |ИЗ
	                      |	ШагиАвтоматизацииЭталона КАК ШагиАвтоматизации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыШаговАвтоматизации КАК ПараметрыШаговАвтоматизации
	                      |		ПО ШагиАвтоматизации.Ссылка = ПараметрыШаговАвтоматизации.ИдентификаторШага
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Код,
	                      |	ОткатываемыйШаг
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ШагиАвтоматизацииЭталона");
	Запрос.УстановитьПараметр("Эталон", Эталон);
	
	ВыгрузкаДетальная = Запрос.Выполнить().Выгрузить();
	
	ВыгрузкаШагов = ВыгрузкаДетальная.Скопировать(, "Ссылка, Родитель, ЭтоГруппа, Наименование, ТипШага, Команда, ВремяНачала, Оборудование, Использовать, ОткатываемыйШаг, Код, ШаблонОборудования");
	ВыгрузкаШагов.Свернуть("Ссылка, Родитель, ЭтоГруппа, Наименование, ТипШага, Команда, ВремяНачала, Оборудование, Использовать, ОткатываемыйШаг, Код, ШаблонОборудования");
	ВыгрузкаШагов.Колонки.Добавить("СсылкаНовый");
	ВыгрузкаШагов.Колонки.Добавить("РодительНовый");
	ВыгрузкаШагов.Колонки.Добавить("ОткатываемыйШагНовый");
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Строка Из ВыгрузкаШагов Цикл
			СтрокаОборудование = СоздаваемыйЭкземпляр.СопоставлениеШаблоновОборудования.Найти(Строка.ШаблонОборудования);
			ШагСценарияНовый = СкопироватьШаг(СоздаваемыйЭкземпляр.Ссылка, Строка, ВыгрузкаШагов, ?(СтрокаОборудование = Неопределено, Неопределено, СтрокаОборудование.РеальноеЗначение));
			НайденныеПараметры = ВыгрузкаДетальная.НайтиСтроки(Новый Структура("Ссылка", Строка.Ссылка));
			Для каждого Элемент Из НайденныеПараметры Цикл
				Если НЕ ПустаяСтрока(Элемент.Параметр) Тогда
					СтруктураПараметров = Новый Структура;
					СтруктураПараметров.Вставить("ИдентификаторШага", ШагСценарияНовый);
					СтруктураПараметров.Вставить("Команда", Элемент.Команда);
					СтруктураПараметров.Вставить("Параметр", Элемент.Параметр);
					СтруктураПараметров.Вставить("Значение", Элемент.Значение);
					СтруктураПараметров.Вставить("ПоУмолчанию", Ложь);
					СтруктураПараметров.Вставить("ШаблонЗаполнения", Элемент.ШаблонЗаполнения);
					
					ИзменитьПараметрСценария(СтруктураПараметров);
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Копирование сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;		
	КонецПопытки;	
	
КонецПроцедуры	

Функция СкопироватьШаг(СоздаваемыйЭкземпляр, СтрокаТаблицыШагов, ВыгрузкаШагов, Оборудование)
	НачатьТранзакцию();
	Попытка
		Если СтрокаТаблицыШагов.ЭтоГруппа Тогда
			ШагСценария = Справочники.ШагиАвтоматизации.СоздатьГруппу();
		Иначе
			ШагСценария = Справочники.ШагиАвтоматизации.СоздатьЭлемент();
		КонецЕсли;
		
		ШагСценария.Владелец = СоздаваемыйЭкземпляр;
		ЗаполнитьЗначенияСвойств(ШагСценария, СтрокаТаблицыШагов, ,"Ссылка, Родитель, ЭтоГруппа, Команда");
		Если Не ШагСценария.ЭтоГруппа Тогда
			ШагСценария.Команда = СтрокаТаблицыШагов.Команда;
		КонецЕсли;	
		
		СтрокаПоискаРодителя = ВыгрузкаШагов.Найти(СтрокаТаблицыШагов.Родитель, "Ссылка");
		Если СтрокаПоискаРодителя <> Неопределено Тогда
			ШагСценария.Родитель = СтрокаПоискаРодителя.СсылкаНовый;
			СтрокаТаблицыШагов.РодительНовый = СтрокаПоискаРодителя.СсылкаНовый;
		Иначе
			СтрокаТаблицыШагов.РодительНовый = Справочники.ШагиАвтоматизации.ПустаяСсылка();
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТаблицыШагов.ОткатываемыйШаг) Тогда
			СтрокаПоискаШагаОтката = ВыгрузкаШагов.Найти(СтрокаТаблицыШагов.ОткатываемыйШаг, "Ссылка");
			Если СтрокаПоискаШагаОтката <> Неопределено Тогда
				ШагСценария.ОткатываемыйШаг = СтрокаПоискаШагаОтката.СсылкаНовый;
				СтрокаТаблицыШагов.ОткатываемыйШагНовый = СтрокаПоискаШагаОтката.СсылкаНовый;
			Иначе
				ВызватьИсключение НСтр("ru='Не удалось корректно скопировать цепочку шаг - откатываемый шаг'");
			КонецЕсли;
		КонецЕсли;	
		
		ШагСценария.Оборудование = Оборудование;
		
		ШагСценария.Записать();
		
		СтрокаТаблицыШагов.СсылкаНовый = ШагСценария.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
		Возврат ШагСценария.Ссылка;

	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Копирование сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;		
	КонецПопытки;	
КонецФункции	

Функция ПолучитьНаименованиеЭкземпляраСценария(ЭкземплярСценария) Экспорт
	Наименование = "" + ЭкземплярСценария.Владелец + " (";
	ПараметрыЗапускаОборудование = "";
	Для Каждого Строка Из ЭкземплярСценария.СопоставлениеШаблоновОборудования Цикл
		ПараметрыЗапускаОборудование = ПараметрыЗапускаОборудование + ?(ЗначениеЗаполнено(ПараметрыЗапускаОборудование), ", ", "") + Строка.РеальноеЗначение; 	
	КонецЦикла;	
	Если Не ПустаяСтрока(ПараметрыЗапускаОборудование) Тогда
		ПараметрыЗапускаОборудование = "Hosts=" + ПараметрыЗапускаОборудование + "; ";
	КонецЕсли;	
	
	ШаблоныПараметров = "";
		
	НЗ = РегистрыСведений.ШаблоныЗаполненияПараметровСценариев.СоздатьНаборЗаписей();
	НЗ.Отбор.ЭкземплярСценария.Установить(?(ЭкземплярСценария.ЭтоНовый(), ЭкземплярСценария.ПолучитьСсылкуНового(), ЭкземплярСценария.Ссылка));
	НЗ.Прочитать();
	
	Для Каждого Строка Из НЗ Цикл
		Если Строка.УчаствуетВИнтерфейсныхГруппировках Тогда
			ШаблоныПараметров = ШаблоныПараметров + ?(ЗначениеЗаполнено(ШаблоныПараметров), "; ", "") + Строка.ИмяШаблона + "=" + Строка.Значение; 	
		КонецЕсли;	
	КонецЦикла;	
	
	Наименование = Наименование + ПараметрыЗапускаОборудование + ШаблоныПараметров + ")";
	
	Возврат СтрЗаменить(Наименование,"()", "");
КонецФункции

Функция ЗаполнитьПараметрыИзСвязанныхОбъектов(ОбъектыПримененияСценария, ИдентификаторШага, ДляИнтерактивногоИзменения = Ложь) Экспорт
	ТаблицаДляВозврата = Новый ТаблицаЗначений;
	ТаблицаДляВозврата.Колонки.Добавить("ИдентификаторШага");
	ТаблицаДляВозврата.Колонки.Добавить("Команда");
	ТаблицаДляВозврата.Колонки.Добавить("Параметр");
	ТаблицаДляВозврата.Колонки.Добавить("Значение");
	
	ТаблицаПараметров = ПолучитьПараметрыСценарияНаСервере(ИдентификаторШага);
	Для каждого Строка Из ТаблицаПараметров Цикл
		СтруктураДанных = Новый Структура("ИдентификаторШага, Команда, Параметр, Значение, ПоУмолчанию, ШаблонЗаполнения");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Строка);

		//Если Строка.СпособЗаполненияПараметра = Перечисления.СпособыЗаполненияПараметровКоманды.ИзОбъектаМетаданных Тогда
		//	// разбираем строку
		//	ИсходнаяОтносительнаяСсылка = Строка.ОтносительнаяСсылкаНаЗначениеПараметра;
		//	ПозицияРазделителя = СтрНайти(ИсходнаяОтносительнаяСсылка, "->");
		//	Если ПозицияРазделителя <> 0 Тогда
		//		ИмяМетаданных = Сред(ИсходнаяОтносительнаяСсылка, 1, ПозицияРазделителя-1);
		//		ИмяРеквизита = Сред(ИсходнаяОтносительнаяСсылка, ПозицияРазделителя+2);
		//			
		//		ОбъектыЗаполнения = ОбъектыПримененияСценария.НайтиСтроки(Новый Структура("ОтносительнаяСсылкаНаМетаданные", ИсходнаяОтносительнаяСсылка));
		//		Если ОбъектыЗаполнения.Количество() > 0 Тогда
		//			ЗначениеПараметра = ОбъектыЗаполнения[0].Объект[ИмяРеквизита];
		//			СтруктураДанных.Значение = ЗначениеПараметра;
		//		КонецЕсли;	
		//	КонецЕсли;
		//КонецЕсли;
		
		СтруктураДанных.Значение = Строка.РеальноеЗначение;
		
		Если НЕ ДляИнтерактивногоИзменения Тогда
			ИзменитьПараметрСценария(СтруктураДанных);
		Иначе
			НоваяСтрокаРез = ТаблицаДляВозврата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРез, СтруктураДанных);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ТаблицаДляВозврата;
КонецФункции

Процедура ИзменитьПараметрСценария(СтруктураДанных) Экспорт
	НачатьТранзакцию();	
	Попытка
		НаборЗаписей = РегистрыСведений.ПараметрыШаговАвтоматизации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторШага.Установить(СтруктураДанных.ИдентификаторШага);
		НаборЗаписей.Отбор.Команда.Установить(СтруктураДанных.Команда);
		НаборЗаписей.Отбор.Параметр.Установить(СтруктураДанных.Параметр);
		Если Не СтруктураДанных.ПоУмолчанию Тогда
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтруктураДанных);
		КонецЕсли;	
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Копирование сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;		
	КонецПопытки;	
КонецПроцедуры	

Функция СоздатьНовыйЭкземплярСценарияПоЭталону(Эталон, Контур, ДатаНачала, ДатаОкончания, Состояние, СопоставлениеШаблонов = Неопределено, ОбъектыПрименения = Неопределено, УИ = Неопределено) Экспорт
	НачатьТранзакцию();
	Попытка
		СоздаваемыйЭкземпляр = Справочники.ЭкземплярыСценариевАвтоматизации.СоздатьЭлемент();
		Если УИ <> Неопределено Тогда
			СсылкаНового = Справочники.ЭкземплярыСценариевАвтоматизации.ПолучитьСсылку(УИ);
		Иначе	
			СсылкаНового = Справочники.ЭкземплярыСценариевАвтоматизации.ПолучитьСсылку(Новый УникальныйИдентификатор);
		КонецЕсли;
		СоздаваемыйЭкземпляр.УстановитьСсылкуНового(СсылкаНового);
		
		Если ТипЗнч(Эталон) = Тип("СправочникСсылка.СценарииАвтоматизации") Тогда
			СоздаваемыйЭкземпляр.Владелец = Эталон;
		Иначе	
			СоздаваемыйЭкземпляр.Владелец = Эталон.Владелец;
		КонецЕсли;	
		СоздаваемыйЭкземпляр.ПлановаяДатаЗапуска = ДатаНачала;
		СоздаваемыйЭкземпляр.ПлановаяДатаОкончания = ДатаОкончания;
		СоздаваемыйЭкземпляр.КонтурАвтоматизации = Контур;
		СоздаваемыйЭкземпляр.РежимВыполнения = Эталон.РежимВыполнения;
		СоздаваемыйЭкземпляр.Состояние = Перечисления.СостоянияСценария.НеЗапланирован;
			
		Если СопоставлениеШаблонов <> Неопределено Тогда
			Для каждого Элемент Из СопоставлениеШаблонов Цикл
				НоваяСтрока = СоздаваемыйЭкземпляр.СопоставлениеШаблоновОборудования.Добавить();
				НоваяСтрока.Шаблон = Элемент.Ключ;
				НоваяСтрока.РеальноеЗначение = Элемент.Значение;
			КонецЦикла;
		Иначе
			Для каждого СтрокаШаблон Из Эталон.СопоставлениеШаблоновОборудования Цикл
				НоваяСтрока = СоздаваемыйЭкземпляр.СопоставлениеШаблоновОборудования.Добавить();
				НоваяСтрока.Шаблон = СтрокаШаблон.Шаблон;
				НоваяСтрока.РеальноеЗначение = СтрокаШаблон.РеальноеЗначение;
			КонецЦикла;
		КонецЕсли;
		
		СоздаваемыйЭкземпляр.Записать();
		
		// скопировать шаги и параметры Из Эталона
		Если ТипЗнч(Эталон) = Тип("СправочникСсылка.СценарииАвтоматизации") Тогда
			СоздаваемыйЭкземпляр.ЗаполнитьЭкземплярНаСервере();
		Иначе	
			РаботаСоСценариямиАвтоматизацииСервер.СкопироватьЭлементыШаговАвтоматизации(СоздаваемыйЭкземпляр, Эталон);
		КонецЕсли;	
		
		НЗ = РегистрыСведений.ШаблоныЗаполненияПараметровСценариев.СоздатьНаборЗаписей();
		НЗ.Отбор.ЭкземплярСценария.Установить(СсылкаНового);
		
		ТаблицаПрименения = Новый ТаблицаЗначений;
		ТаблицаПрименения.Колонки.Добавить("ОтносительнаяСсылкаНаМетаданные");
		ТаблицаПрименения.Колонки.Добавить("Объект");
		ТаблицаПрименения.Колонки.Добавить("ИмяШаблона");
		ТаблицаПрименения.Колонки.Добавить("СпособЗаполнения");
		ТаблицаПрименения.Колонки.Добавить("Значение");

		Если ОбъектыПрименения <> Неопределено Тогда
			Для каждого СтрокаШаблона Из ОбъектыПрименения Цикл
				НоваяЗапись = НЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаШаблона);
				НоваяЗапись.ЭкземплярСценария = СсылкаНового;
				НоваяЗапись.Объект = Новый ХранилищеЗначения(СтрокаШаблона.Объект);
				НоваяЗапись.УчаствуетВИнтерфейсныхГруппировках = ?(СтрокаШаблона.УчаствуетВИнтерфейсныхГруппировках = 0, ЛОЖЬ, ИСТИНА);
			
				НоваяСтрока = ТаблицаПрименения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаШаблона);
			КонецЦикла;
		Иначе
			НЗ_Эталон = РегистрыСведений.ШаблоныЗаполненияПараметровСценариев.СоздатьНаборЗаписей();
			НЗ_Эталон.Отбор.ЭкземплярСценария.Установить(Эталон);
			НЗ_Эталон.Прочитать();
			Для каждого Запись Из НЗ_Эталон Цикл
				НоваяЗапись = НЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
				НоваяЗапись.ЭкземплярСценария = СсылкаНового;
				
				НоваяСтрока = ТаблицаПрименения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
				НоваяСтрока.Объект = Запись.Объект.Получить();
			КонецЦикла;
		КонецЕсли;
		
		НЗ.Записать();
		
		// заполнить параметры
		// -- параметры Из связанных объектов перезаполняем
		// -- остальные параметры берем Из эталона
		
		ШагиАвтоматизации = Справочники.ШагиАвтоматизации.Выбрать(, СсылкаНового, Новый Структура("ТипШага", Перечисления.ТипыЭлементовСхемыСценария.Шаг));
		Пока ШагиАвтоматизации.Следующий() Цикл
			РаботаСоСценариямиАвтоматизацииСервер.ЗаполнитьПараметрыИзСвязанныхОбъектов(ТаблицаПрименения, ШагиАвтоматизации.Ссылка);
		КонецЦикла;	

		СоздаваемыйЭкземпляр.СформироватьНаименованиеНаСервере();

		Если  СоздаваемыйЭкземпляр.Состояние <> Состояние Тогда
			СоздаваемыйЭкземпляр.Состояние = Состояние;
		КонецЕсли;
		
		СоздаваемыйЭкземпляр.Записать(); 	 	
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.КлючДанных = СоздаваемыйЭкземпляр.Ссылка;
		Сообщение.Текст = "Создан: " + СоздаваемыйЭкземпляр.Код + " " + СоздаваемыйЭкземпляр.Наименование;
		Сообщение.Сообщить();


		ЗафиксироватьТранзакцию();
		
		Возврат СоздаваемыйЭкземпляр.Ссылка;
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Копирование сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;		
	КонецПопытки;	
КонецФункции

Функция ПолучитьДатуНачалаОкончанияСкорректированногоРасписания(ДатаЭлемента, ЭталонНачало, ЭталонОкончание) Экспорт
	// Рассчитано на то, что перемещается в пределах дня
	Структура = Новый Структура("ДатаНачала, ДатаОкончания");	
	Структура.ДатаНачала = НачалоДня(ДатаЭлемента) + Час(ЭталонНачало)*3600 + Минута(ЭталонНачало)*60 + Секунда(ЭталонНачало); 			
	Структура.ДатаОкончания = Структура.ДатаНачала + (ЭталонОкончание - ЭталонНачало);
	
	Возврат Структура;
КонецФункции	

Функция ПолучитьЗначениеПараметраШаблона(ИсходнаяОтносительнаяСсылка, Объект) Экспорт
	ЗначениеПараметра = "";
	ПозицияРазделителя = СтрНайти(ИсходнаяОтносительнаяСсылка, "->");
	Если ПозицияРазделителя <> 0 Тогда
		ИмяМетаданных = Сред(ИсходнаяОтносительнаяСсылка, 1, ПозицияРазделителя-1);
		ИмяРеквизита = Сред(ИсходнаяОтносительнаяСсылка, ПозицияРазделителя+2);
		
		//Если ТипЗнч(ОбъектыЗаполненияПараметров) = Тип("Соответствие") Тогда
		//	ОбъектыЗаполнения = ОбъектыЗаполненияПараметров.Получить(ИсходнаяОтносительнаяСсылка);
		//	Если ОбъектыЗаполнения <> Неопределено Тогда
		//		ЗначениеПараметра =  ОбъектыЗаполнения[ИмяРеквизита];
		//	КонецЕсли;	
		//Иначе	
		//	ОбъектыЗаполнения = ОбъектыЗаполненияПараметров.НайтиСтроки(Новый Структура("ОтносительнаяСсылкаНаМетаданные", ИсходнаяОтносительнаяСсылка));
		//	Если ОбъектыЗаполнения.Количество() > 0 Тогда
		//		ЗначениеПараметра = ОбъектыЗаполнения[0].Объект[ИмяРеквизита];
		//	КонецЕсли;
		//КонецЕсли;
		ЗначениеПараметра = Объект[ИмяРеквизита];
		
	КонецЕсли;	
	
	Возврат ЗначениеПараметра;
КонецФункции	

Функция ОбновитьСписокВыбораОтносительныхСсылок(Знач МетаданныеСвязанныхОбъектов) Экспорт
	СписокВыбора = Новый СписокЗначений;
	Для каждого Строка Из МетаданныеСвязанныхОбъектов Цикл
		ОбъектМетаданных = Метаданные.Справочники.Найти(Сред(Строка.ИмяОбъекта, Найти(Строка.ИмяОбъекта, ".")+1));
		Для каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			СписокВыбора.Добавить(ОбъектМетаданных.ПолноеИмя() + "->" + Реквизит.Имя);
		КонецЦикла;	
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			СписокВыбора.Добавить(ОбъектМетаданных.ПолноеИмя() + "->" + Реквизит.Имя);
		КонецЦикла;	
	КонецЦикла;
	
	Возврат СписокВыбора;
КонецФункции

Функция ПолучитьПараметрыКоманды(Сценарий, УникальныйИдентификаторШага, Команда, ЭтоОткат) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаполненныеПараметры.Параметр КАК Параметр,
	                      |	ЗаполненныеПараметры.Значение КАК Значение,
	                      |	&Команда КАК Команда,
	                      |	ЗаполненныеПараметры.УникальныйИдентификаторШага КАК УникальныйИдентификаторШага,
	                      |	ЗаполненныеПараметры.ДляОтката КАК ДляОтката,
	                      |	ЗаполненныеПараметры.ИзШаблона КАК ИзШаблона
	                      |ПОМЕСТИТЬ ДанныеШагаСценария
	                      |ИЗ
	                      |	Справочник.СценарииАвтоматизации.ПараметрыШаговАвтоматизации КАК ЗаполненныеПараметры
	                      |ГДЕ
	                      |	ЗаполненныеПараметры.Ссылка = &Ссылка
	                      |	И ЗаполненныеПараметры.УникальныйИдентификаторШага = &УникальныйИдентификаторШага
	                      |	И ЗаполненныеПараметры.ДляОтката = &ЭтоОткат
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Параметр,
	                      |	Команда
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра КАК Параметр,
	                      |	КомандыАвтоматизацииПараметрыОбязательные.Ссылка КАК Команда,
	                      |	0 КАК Обязательный
	                      |ПОМЕСТИТЬ ПараметрыИзКоманды
	                      |ИЗ
	                      |	Справочник.КомандыАвтоматизации.ПараметрыОбязательные КАК КомандыАвтоматизацииПараметрыОбязательные
	                      |ГДЕ
	                      |	КомандыАвтоматизацииПараметрыОбязательные.Ссылка = &Команда
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра,
	                      |	КомандыАвтоматизацииПараметрыДополнительные.Ссылка,
	                      |	2
	                      |ИЗ
	                      |	Справочник.КомандыАвтоматизации.ПараметрыДополнительные КАК КомандыАвтоматизацииПараметрыДополнительные
	                      |ГДЕ
	                      |	КомандыАвтоматизацииПараметрыДополнительные.Ссылка = &Команда
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Параметр,
	                      |	Команда
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ЕСТЬNULL(КомандыАвтоматизацииПараметры.Параметр, ДанныеШагаСценария.Параметр) КАК Параметр,
	                      |	ЕСТЬNULL(ДанныеШагаСценария.Значение, """") КАК Значение,
	                      |	ЕСТЬNULL(КомандыАвтоматизацииПараметры.Обязательный, 3) КАК Обязательный,
	                      |	ЕСТЬNULL(ДанныеШагаСценария.УникальныйИдентификаторШага, &УникальныйИдентификаторШага) КАК УникальныйИдентификаторШага,
	                      |	&ЭтоОткат КАК ДляОтката,
	                      |	ЕСТЬNULL(ДанныеШагаСценария.ИзШаблона, ЛОЖЬ) КАК ИзШаблона
	                      |ИЗ
	                      |	ПараметрыИзКоманды КАК КомандыАвтоматизацииПараметры
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеШагаСценария КАК ДанныеШагаСценария
	                      |		ПО (ДанныеШагаСценария.Команда = КомандыАвтоматизацииПараметры.Команда)
	                      |			И КомандыАвтоматизацииПараметры.Параметр = ДанныеШагаСценария.Параметр
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ЕСТЬNULL(ДанныеШагаСценария.Значение, """"),
	                      |	ЕСТЬNULL(ДанныеШагаСценария.УникальныйИдентификаторШага, &УникальныйИдентификаторШага),
	                      |	ЕСТЬNULL(КомандыАвтоматизацииПараметры.Параметр, ДанныеШагаСценария.Параметр),
	                      |	ЕСТЬNULL(ДанныеШагаСценария.ИзШаблона, ЛОЖЬ),
	                      |	ЕСТЬNULL(КомандыАвтоматизацииПараметры.Обязательный, 3)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Обязательный,
	                      |	Параметр
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ДанныеШагаСценария
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ПараметрыИзКоманды");
	
	Запрос.УстановитьПараметр("Ссылка", Сценарий);
	Запрос.УстановитьПараметр("УникальныйИдентификаторШага", УникальныйИдентификаторШага);
	Запрос.УстановитьПараметр("Команда", Команда);
	Запрос.УстановитьПараметр("ЭтоОткат", ЭтоОткат);
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТабРезультат;	
КонецФункции

Функция ПолучитьСписокВыбораНаСервере(СвязанныеМетаданные) Экспорт
	ДанныеВыбораИзСписка = Новый СписокЗначений;
	Если СвязанныеМетаданные.Количество() > 0 Тогда
		ДанныеВыбораИзСписка = РаботаСоСценариямиАвтоматизацииСервер.ОбновитьСписокВыбораОтносительныхСсылок(СвязанныеМетаданные);
	КонецЕсли;
	
	Возврат ДанныеВыбораИзСписка;
КонецФункции	

Функция ПолучитьМетаданныеСвязанныхОбъектов(ЭкземплярСценария) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СценарииАвтоматизацииМетаданныеСвязанныхОбъектов.ИмяОбъекта КАК ИмяОбъекта
	                      |ИЗ
	                      |	Справочник.СценарииАвтоматизации.МетаданныеСвязанныхОбъектов КАК СценарииАвтоматизацииМетаданныеСвязанныхОбъектов
	                      |ГДЕ
	                      |	СценарииАвтоматизацииМетаданныеСвязанныхОбъектов.Ссылка = &Сценарий
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ИмяОбъекта");
	Запрос.УстановитьПараметр("Сценарий", ЭкземплярСценария.Владелец);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Функция УстановитьКомпактныйРежим() Экспорт
	
	Установлен = Ложь;
	 
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Настройка = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения", "",, Пользователь.Имя);
	
	Если Не ТипЗнч(Настройка) = Тип("НастройкиКлиентскогоПриложения") Тогда
		Настройка = Новый НастройкиКлиентскогоПриложения;
	    Настройка.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	    Настройка.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Компактный;
	    Установлен = Истина;
	КонецЕсли;
	
	Если Настройка.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси И Настройка.ВариантМасштабаФормКлиентскогоПриложения <> ВариантМасштабаФормКлиентскогоПриложения.Компактный Тогда
		Настройка.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Компактный;
		Установлен = Истина;
	КонецЕсли;
	
	Если Установлен Тогда
	    ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", Настройка,, Пользователь.Имя);
	КонецЕсли;
    
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Установлен;
	
КонецФункции

Функция ПолучитьСписокВыбораМетаданныхДляШаблонов(ОбъектСсылка) Экспорт
	
	СвязанныеМетаданные = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьМетаданныеСвязанныхОбъектов(ОбъектСсылка);
	ДанныеВыбораИзСписка = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьСписокВыбораНаСервере(СвязанныеМетаданные);
	
	Возврат ДанныеВыбораИзСписка;
КонецФункции	

Процедура ЗаполнитьЗаписьПараметров(Запись, ИдентификаторШага, ВыборкаДетальные,ОбъектыЗаполненияПараметров) Экспорт
	Запись.ИдентификаторШага = ИдентификаторШага;
	Запись.Команда = ВыборкаДетальные.Команда;
	Запись.Параметр = ВыборкаДетальные.Параметр;
	Запись.ШаблонЗаполнения = ВыборкаДетальные.ШаблонЗаполнения;	
	Если Не ПустаяСтрока(Запись.ШаблонЗаполнения) Тогда
		СтрокиШаблонов = ОбъектыЗаполненияПараметров.НайтиСтроки(Новый Структура("ИмяШаблона", Запись.ШаблонЗаполнения));
		Для каждого Строка Из СтрокиШаблонов Цикл
			Запись.Значение = Строка.Значение;
		КонецЦикла;	
	Иначе		
		Запись.Значение = ВыборкаДетальные.Значение;
	КонецЕсли;
КонецПроцедуры

Функция ЕстьСценарии() Экспорт
	Сценарии = Справочники.СценарииАвтоматизации.Выбрать();
	
	Возврат Сценарии.Следующий();
КонецФункции	

Функция ПроверитьЗаполнениеПараметровКонтура(КонтурАдминистрирования, ИмяОС = "") Экспорт
	Если Не ЗначениеЗаполнено(КонтурАдминистрирования)
		Или
		 ЗначениеЗаполнено(КонтурАдминистрирования.РабочийКаталогДляАвтоматизацииWIN)
	     И (ЗначениеЗаполнено(КонтурАдминистрирования.КаталогУстановкиWIN) Или КонтурАдминистрирования.УстановкаПоУмолчаниюWin)
		 И ЗначениеЗаполнено(КонтурАдминистрирования.КаталогКонфигурацийДляАвтоматизацииWIN)
		 И ЗначениеЗаполнено(КонтурАдминистрирования.СловарьКомандАвтоматизацииWIN) И ВРег(ИмяОС) <> "LINUX" 
		Или
		 ЗначениеЗаполнено(КонтурАдминистрирования.РабочийКаталогДляАвтоматизацииLIN)
	     И (ЗначениеЗаполнено(КонтурАдминистрирования.КаталогУстановкиLIN) Или КонтурАдминистрирования.УстановкаПоУмолчаниюLinux)
		 И ЗначениеЗаполнено(КонтурАдминистрирования.КаталогКонфигурацийДляАвтоматизацииLIN)
		 И ЗначениеЗаполнено(КонтурАдминистрирования.СловарьКомандАвтоматизацииLIN)  И ВРег(ИмяОС) <> "WINDOWS" Тогда
		 
		 Возврат Истина;
	Иначе
		 Возврат Ложь;
	КонецЕсли;	
КонецФункции

Функция ЕстьАктивныеЭкземплярыСценариевДляАгента(Агент) Экспорт
	// Ищем активные сценарии. Если не находим инициируем обновление
	СписокСостоянийАктивногоСценария = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьАктивныеСостояния();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага
	                      |ИЗ
	                      |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
	                      |ГДЕ
	                      |	СтруктураШаговСценария.Сценарий.Состояние В(&СостоянияАктивногоСценария)
	                      |	И СтруктураШаговСценария.Оборудование = &Агент");
	Запрос.УстановитьПараметр("Агент", Агент);
	Запрос.УстановитьПараметр("СостоянияАктивногоСценария", СписокСостоянийАктивногоСценария);
	
	АктивныеСценарии = Запрос.Выполнить();
	
	Возврат Не АктивныеСценарии.Пустой();
КонецФункции	

Функция ВосстановитьДеревоСценарияИзТаблицыЗначений(ОбъектСценария) Экспорт
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("УникальныйИдентификаторШага");
	Дерево.Колонки.Добавить("УникальныйИдентификаторШагаРодителя");
	Дерево.Колонки.Добавить("ТипШага");
	Дерево.Колонки.Добавить("Команда");
	Дерево.Колонки.Добавить("КомандаОтката");
	Дерево.Колонки.Добавить("ШаблонЕдиницыОборудования");
	Дерево.Колонки.Добавить("ВключенПоУмолчанию");
	Дерево.Колонки.Добавить("ВключенПоУмолчаниюОткат");
	Дерево.Колонки.Добавить("ИндексКартинки");
	Дерево.Колонки.Добавить("Название");
	
	ШагиАвтоматизации = ОбъектСценария.ШагиАвтоматизации.Выгрузить();
	ШагиАвтоматизации.Сортировать("НомерШага");
	Для Каждого СтрокаТаблицы Из ШагиАвтоматизации Цикл
        СтрокаГруппировки = Дерево.Строки.Найти(СтрокаТаблицы.УникальныйИдентификаторШагаРодителя, "УникальныйИдентификаторШага", Истина);
		Если СтрокаГруппировки = Неопределено Тогда
			ОбрабатываемаяСтрока = Дерево.Строки.Добавить();
		Иначе
			ОбрабатываемаяСтрока = СтрокаГруппировки.Строки.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтрока, СтрокаТаблицы);
		
		Если ОбрабатываемаяСтрока.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Старт Тогда
			ОбрабатываемаяСтрока.ИндексКартинки = 1;
		ИначеЕсли ОбрабатываемаяСтрока.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Шаг Тогда
			ОбрабатываемаяСтрока.ИндексКартинки = 2;
		ИначеЕсли ОбрабатываемаяСтрока.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Разделение Тогда
			ОбрабатываемаяСтрока.ИндексКартинки = 3;
		ИначеЕсли ОбрабатываемаяСтрока.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Ветка Тогда
			ОбрабатываемаяСтрока.ИндексКартинки = 4;
		ИначеЕсли ОбрабатываемаяСтрока.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Условие Тогда
			ОбрабатываемаяСтрока.ИндексКартинки = 5;
		ИначеЕсли ОбрабатываемаяСтрока.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Цикл Тогда
			ОбрабатываемаяСтрока.ИндексКартинки = 6;
		ИначеЕсли ОбрабатываемаяСтрока.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Вариант Тогда
			ОбрабатываемаяСтрока.ИндексКартинки = 7;
		ИначеЕсли ОбрабатываемаяСтрока.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.ВспомогательныеШаги Тогда
			ОбрабатываемаяСтрока.ИндексКартинки = 8;
		Иначе
			ОбрабатываемаяСтрока.ИндексКартинки = 0;
		КонецЕсли;	

	КонецЦикла;	
	
	Дерево.Колонки.Удалить("УникальныйИдентификаторШагаРодителя");
	
	Возврат Дерево;
КонецФункции	

Процедура ВыполнитьАктуализациюПараметра(Строка, ОбъектыЗаполненияПараметров) Экспорт
	СтруктураДанных = Новый Структура("ИдентификаторШага, Команда, Параметр, Значение, ПоУмолчанию, ШаблонЗаполнения");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Строка);
	
	Если Строка.ИзШаблона Тогда // ссылка на шаблон
		Шаблон = Строка.Значение;
		СтрокиШаблона = ОбъектыЗаполненияПараметров.НайтиСтроки(Новый Структура("ИмяШаблона", Шаблон));
		Если СтрокиШаблона.Количество()=1 Тогда			
			СтруктураДанных.Значение = СтрокиШаблона[0].Значение;
			СтруктураДанных.ШаблонЗаполнения = Шаблон;
		Иначе
			СтруктураДанных.Значение = "";
		КонецЕсли;	
	КонецЕсли;	
	РаботаСоСценариямиАвтоматизацииСервер.ИзменитьПараметрСценария(СтруктураДанных);
КонецПроцедуры	

Процедура ЗаполнитьЗначениеПараметраПоДаннымОбъекта(Строка) Экспорт
	Если Строка.СпособЗаполнения = Перечисления.СпособыЗаполненияПараметровКоманды.ИзОбъектаМетаданных Тогда
		Строка.Значение = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьЗначениеПараметраШаблона(Строка.ОтносительнаяСсылкаНаМетаданные, Строка.Объект);
	ИначеЕсли Строка.СпособЗаполнения = Перечисления.СпособыЗаполненияПараметровКоманды.ИзКонфиденциальногоХранилища Тогда	
		Строка.Значение = "*****";
	Иначе
		Строка.Значение = Строка(Строка.Объект);
	КонецЕсли;
КонецПроцедуры	

Функция ВыбратьКонтурАдминистрирования() Экспорт
	Если Не РаботаСоСценариямиАвтоматизацииПраваДоступа.ПроверитьНаличиеПолногоДоступаКФункционалуАвтоматизации() Тогда
		ОграниченияКонтура = РаботаСоСценариямиАвтоматизацииПовторноеИспользование.ПолучитьСписокОграниченийДляТекущегоПользователя();
		Если ОграниченияКонтура.Количество() = 1 Тогда
			Результат = ОграниченияКонтура[0];
		ИначеЕсли ОграниченияКонтура.Количество() = 0 Тогда
			Результат = ПолучитьКонтурПоУмолчаниюДляПолногоДоступа();	
		Иначе	
			Результат = Справочники.КонтурыАдминистрирования.ПустаяСсылка();
		КонецЕсли;	
	Иначе	
		Результат = ПолучитьКонтурПоУмолчаниюДляПолногоДоступа();
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

Функция ПолучитьКонтурПоУмолчаниюДляПолногоДоступа()
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КонтурыАдминистрирования.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.КонтурыАдминистрирования КАК КонтурыАдминистрирования
	                      |ГДЕ
	                      |	НЕ КонтурыАдминистрирования.ПометкаУдаления");
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 1 Тогда
		Результат = РезультатЗапроса[0].Ссылка;
	Иначе
		Результат = Справочники.КонтурыАдминистрирования.ПустаяСсылка();
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции	

Функция ПолучитьЗапросДляОбработкиВложенныхПараметров(ВыгрузкаШаблонов, СтроковыйРеквизитОбъекта = "Объект") Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ШаблоныЗаполненияПараметровСценариев.ИмяШаблона КАК ИмяШаблона,
	                      |	ШаблоныЗаполненияПараметровСценариев.ОтносительнаяСсылкаНаМетаданные КАК ОтносительнаяСсылкаНаМетаданные,
	                      |	ШаблоныЗаполненияПараметровСценариев." + СтроковыйРеквизитОбъекта + " КАК Объект,
	                      |	ШаблоныЗаполненияПараметровСценариев.СпособЗаполнения КАК СпособЗаполнения,
	                      |	ШаблоныЗаполненияПараметровСценариев.Значение КАК Значение,
	                      |	ШаблоныЗаполненияПараметровСценариев.УчаствуетВИнтерфейсныхГруппировках КАК УчаствуетВИнтерфейсныхГруппировках
	                      |ПОМЕСТИТЬ Шаблоны
	                      |ИЗ
	                      |	&ВыгрузкаШаблонов КАК ШаблоныЗаполненияПараметровСценариев
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Шаблоны.ИмяШаблона КАК ИмяШаблона,
	                      |	Шаблоны.Значение КАК Значение,
	                      |	Шаблоны.Объект КАК Объект,
	                      |	Шаблоны.СпособЗаполнения КАК СпособЗаполнения,
	                      |	Шаблоны1.ИмяШаблона КАК ИмяШаблонаВложенного,
	                      |	Шаблоны1.Значение КАК ЗначениеВложенного,
	                      |	Шаблоны1.Объект КАК ОбъектВложенного,
	                      |	Шаблоны1.СпособЗаполнения КАК СпособЗаполненияВложенного
	                      |ИЗ
	                      |	Шаблоны КАК Шаблоны
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Шаблоны КАК Шаблоны1
	                      |		ПО (Шаблоны.Объект ПОДОБНО ""%"" + Шаблоны1.ИмяШаблона + ""%"")
	                      |ИТОГИ ПО
	                      |	ИмяШаблона,
	                      |	ИмяШаблонаВложенного
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ Шаблоны");
	Запрос.УстановитьПараметр("ВыгрузкаШаблонов", ВыгрузкаШаблонов);
	
	Возврат Запрос;
КонецФункции
#КонецОбласти

#Область ИзменитьСостояниеСценария
Процедура ВернутьСценарийКНачальномуСостоянию(Сценарий, ТестовыйПрогон) Экспорт
	НачатьТранзакцию();
			
	Попытка
		НЗ = РегистрыСведений.СтруктураШаговСценария.СоздатьНаборЗаписей();
		НЗ.Отбор.Сценарий.Установить(Сценарий);
		НЗ.Прочитать();
		Если НЗ.Количество() > 0 Тогда
			Для каждого Запись Из НЗ Цикл 
				Запись.СостояниеШага = Перечисления.СостоянияШаговСценария.НеВыполнялся;
				Запись.ДатаСтарта = '00010101';
				Запись.ДатаЗавершения = '00010101';

				Если ТестовыйПрогон Тогда
					Запись.СостояниеШагаПриТесте = Перечисления.СостоянияШаговСценария.НеВыполнялся;
					Запись.ДатаСтартаТеста = '00010101';
					Запись.ДатаЗавершенияТеста = '00010101';
				КонецЕсли;
				
				Запись.ДополнительнаяИнформация = "";
			КонецЦикла;
			НЗ.Записать();
		КонецЕсли;
		
		ОбъектСценария = Сценарий.ПолучитьОбъект();
		ОбъектСценария.Состояние = Перечисления.СостоянияСценария.НеЗапланирован;
		ОбъектСценария.ФактическаяДатаЗапуска = '00010101';
		ОбъектСценария.ФактическаяДатаОкончания = '00010101';
		
		Если ТестовыйПрогон Тогда
			ОбъектСценария.ДатаЗапускаТеста = '00010101';
			ОбъектСценария.ДатаОкончанияТеста = '00010101';
		КонецЕсли;	
		
		ОбъектСценария.ДатаИзменения = ПолучитьТекущуюДатуСеанса();
		
		ОбъектСценария.Записать();

		ЗафиксироватьТранзакцию();
	Исключение	
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru='Запись экземпляра сценария'", Метаданные.ОсновнойЯзык.КодЯзыка),
		       УровеньЖурналаРегистрации.Ошибка,,,
		       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	

КонецПроцедуры

Процедура ПродолжитьВыполнениеПрерванногоСценария(Сценарий) Экспорт
	Если ВозможноПродолжениеНеуспешного(Сценарий) Тогда	
		
		МассивСтатусовНевыполнения = ПолучитьСостоянияНезапущенныхШагов();
		
		// Ищем выполненные шаги отката
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СтруктураШаговСценария.Сценарий КАК Сценарий
		|ИЗ
		|	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
		|ГДЕ
		|	СтруктураШаговСценария.Использовать
		|	И СтруктураШаговСценария.ОткатываемыйШаг <> &ПустойШаг
		|	И СтруктураШаговСценария.Сценарий = &Сценарий
		|	И НЕ СтруктураШаговСценария.СостояниеШага В (&Невыполненные)");
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
		Запрос.УстановитьПараметр("ПустойШаг", Справочники.ШагиАвтоматизации.ПустаяСсылка());
		Запрос.УстановитьПараметр("Невыполненные", МассивСтатусовНевыполнения);
		
		Результат = Запрос.Выполнить();
		
		// повторная попытка выполнения может быть выполненна только для сценария без выполненных шагов отката
		Если Результат.Пустой() Тогда 
			ЕстьЧтоПродолжать = Ложь;
			НачатьТранзакцию();	
			Попытка
				НЗ = РегистрыСведений.СтруктураШаговСценария.СоздатьНаборЗаписей();
				НЗ.Отбор.Сценарий.Установить(Сценарий);
				НЗ.Прочитать();
				Если НЗ.Количество() > 0 Тогда
					Для каждого Запись Из НЗ Цикл
						Если Запись.СостояниеШага <> Перечисления.СостоянияШаговСценария.Выполнен
							И Запись.СостояниеШага <> Перечисления.СостоянияШаговСценария.НеВыполнялся Тогда
							Запись.СостояниеШага = Перечисления.СостоянияШаговСценария.НеВыполнялся;
							ЕстьЧтоПродолжать = Истина;
						КонецЕсли;	
					КонецЦикла;
					Если ЕстьЧтоПродолжать Тогда
						НЗ.Записать();
					КонецЕсли;	
				КонецЕсли;
				
				Если ЕстьЧтоПродолжать Тогда
					ОбъектСценария = Сценарий.ПолучитьОбъект();
					ОбъектСценария.Состояние = Перечисления.СостоянияСценария.Стартован;
					ОбъектСценария.ФактическаяДатаОкончания = '00010101';
					ОбъектСценария.ДатаИзменения = ПолучитьТекущуюДатуСеанса();
					
					ОбъектСценария.Записать();
				КонецЕсли;	
				
				ЗафиксироватьТранзакцию();
			Исключение	
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(НСтр("ru='Запись экземпляра сценария'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура СтартоватьСценарий(Сценарий, ТестовыйПрогон) Экспорт
	ВернутьСценарийКНачальномуСостоянию(Сценарий, ТестовыйПрогон);
	Если (Не ТестовыйПрогон И ПолучитьНеактивныеСостояния().Найти(Сценарий.Состояние) <> Неопределено)
		Или (ТестовыйПрогон 
			И ПолучитьАктивныеСостояния().Найти(Сценарий.Состояние) = Неопределено
			И ПолучитьФинальныеСостояния().Найти(Сценарий.Состояние) = Неопределено) Тогда
		НачатьТранзакцию();
		Попытка

			НЗ = РегистрыСведений.СтруктураШаговСценария.СоздатьНаборЗаписей();
			НЗ.Отбор.Сценарий.Установить(Сценарий);
			НЗ.Прочитать();
			Если НЗ.Количество() > 0 Тогда
				Для каждого Запись Из НЗ Цикл 
					Запись.СостояниеШага = Перечисления.СостоянияШаговСценария.НеВыполнялся;
					Запись.ДатаСтарта = '00010101';
					Запись.ДатаЗавершения = '00010101';

					Если ТестовыйПрогон Тогда
						Запись.СостояниеШагаПриТесте = Перечисления.СостоянияШаговСценария.НеВыполнялся;
						Запись.ДатаСтартаТеста = '00010101';
						Запись.ДатаЗавершенияТеста = '00010101';
					КонецЕсли;
					
					Запись.ДополнительнаяИнформация = "";
				КонецЦикла;
				НЗ.Записать();
			КонецЕсли;	
			
			ОбъектСценария = Сценарий.ПолучитьОбъект();
			ОбъектСценария.Состояние = ?(ТестовыйПрогон = Истина, Перечисления.СостоянияСценария.ТестСтартован, Перечисления.СостоянияСценария.Стартован);
			
			ТекДатаСеанса = ПолучитьТекущуюДатуСеанса();
			ОбъектСценария.ДатаИзменения = ТекДатаСеанса;
			Если ТестовыйПрогон Тогда
				ОбъектСценария.ДатаЗапускаТеста = ТекДатаСеанса;
				ОбъектСценария.ДатаОкончанияТеста = '00010101';
			Иначе
				ОбъектСценария.ФактическаяДатаЗапуска = ТекДатаСеанса;
				ОбъектСценария.ФактическаяДатаОкончания = '00010101';
			КонецЕсли;
		
			ОбъектСценария.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение	
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru='Запись экземпляра сценария'", Метаданные.ОсновнойЯзык.КодЯзыка),
			       УровеньЖурналаРегистрации.Ошибка,,,
			       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	
	КонецЕсли;
КонецПроцедуры	

Процедура ИзменитьСостояниеСценария(Сценарий, Состояние, ДатаНач = Ложь, ДатаКон = Ложь) Экспорт
	// в активное из неактивного; в неактивное из неактивного; в финальное из активного
	СтруктураСостояний = ПолучитьСтруктуруСостояний();
	
	ФинальныеСостояния = СтруктураСостояний.СписокФинальных;
	АктивныеСостояния = СтруктураСостояний.СписокАктивных;
	НеактивныеСостояния = СтруктураСостояний.СписокНеАктивных;
	
	Если НеактивныеСостояния.Найти(Сценарий.Состояние) <> Неопределено И АктивныеСостояния.Найти(Состояние) <> Неопределено 
		ИЛИ НеактивныеСостояния.Найти(Сценарий.Состояние) <> Неопределено И НеактивныеСостояния.Найти(Состояние) <> Неопределено
		ИЛИ АктивныеСостояния.Найти(Сценарий.Состояние) <> Неопределено И ФинальныеСостояния.Найти(Состояние) <> Неопределено Тогда
			ОбъектСценария = Сценарий.ПолучитьОбъект();
			ОбъектСценария.Состояние = Состояние;
			ДатаДляУстановки = ПолучитьТекущуюДатуСеанса();
			Если ДатаНач = Истина Тогда
				ОбъектСценария.ФактическаяДатаЗапуска = ДатаДляУстановки;
			КонецЕсли;	
			Если ДатаКон = Истина Тогда
				ОбъектСценария.ФактическаяДатаОкончания = ДатаДляУстановки;
			КонецЕсли;	
			
			НачатьТранзакцию();
			Попытка
				ОбъектСценария.Записать();
				ЗафиксироватьТранзакцию();
			Исключение	
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(НСтр("ru='Запись экземпляра сценария'", Метаданные.ОсновнойЯзык.КодЯзыка),
				       УровеньЖурналаРегистрации.Ошибка,,,
				       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
	КонецЕсли;			   
КонецПроцедуры	

Функция ВозможноПродолжениеНеуспешного(Сценарий) Экспорт
	Результат = Ложь;
	СтруктураСостояний = ПолучитьСтруктуруСостояний();
	
	СостоянияНеУспеха = СтруктураСостояний.СписокНеУспешных;
	СостоянияТестовые = СтруктураСостояний.СписокТестовых;
	Если СостоянияНеУспеха.Найти(Сценарий.Состояние) <> Неопределено
		И Сценарий.Состояние <> Перечисления.СостоянияСценария.ЗавершенФатально Тогда
		Если Сценарий.Состояние = Перечисления.СостоянияСценария.Прерван Тогда // непонятно, что прервано бой, или тест, смотрим предыдущее состояние
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	ИсторияСостоянийСценариевСрезПоследних.Состояние КАК Состояние
			                      |ИЗ
			                      |	РегистрСведений.ИсторияСостоянийСценариев.СрезПоследних(
			                      |			,
			                      |			Экземпляр = &Экземпляр
			                      |				И Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.Прерван)) КАК ИсторияСостоянийСценариевСрезПоследних");
			Запрос.УстановитьПараметр("Экземпляр", Сценарий);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий()
				И СостоянияТестовые.Найти(Выборка.Состояние) = Неопределено Тогда
				
				Результат = Истина;
			КонецЕсли;
		Иначе
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции	
#КонецОбласти

#Область ПолучениеСостояний 
Функция ПолучитьФинальныеСостояния() Экспорт 
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСценария.ЗавершенНеуспешно);
	Состояния.Добавить(Перечисления.СостоянияСценария.ЗавершенУспешно);
	Состояния.Добавить(Перечисления.СостоянияСценария.ЗавершенУсловноУспешно);
	Состояния.Добавить(Перечисления.СостоянияСценария.ЗавершенФатально);
	Состояния.Добавить(Перечисления.СостоянияСценария.Прерван);
	
	Возврат Состояния;
КонецФункции	

Функция ПолучитьАктивныеСостояния() Экспорт 
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСценария.Стартован);
	Состояния.Добавить(Перечисления.СостоянияСценария.ВПроцессеОтката);
	Состояния.Добавить(Перечисления.СостоянияСценария.ТестСтартован);
	
	Возврат Состояния;
КонецФункции	

Функция ПолучитьНеактивныеСостояния() Экспорт 
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСценария.НеЗапланирован);
	Состояния.Добавить(Перечисления.СостоянияСценария.ТестЗавершенНеуспешно);
	Состояния.Добавить(Перечисления.СостоянияСценария.ТестЗавершенУспешно);
	Состояния.Добавить(Перечисления.СостоянияСценария.Запланирован);
	
	Возврат Состояния;
КонецФункции	

Функция ПолучитьТестовыеСостояния() Экспорт 
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСценария.ТестСтартован);
	Состояния.Добавить(Перечисления.СостоянияСценария.ТестЗавершенНеуспешно);
	Состояния.Добавить(Перечисления.СостоянияСценария.ТестЗавершенУспешно);
	
	Возврат Состояния;
КонецФункции	

Функция ПолучитьУспешныеСостояния() Экспорт 
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСценария.ЗавершенУспешно);
	Состояния.Добавить(Перечисления.СостоянияСценария.ЗавершенУсловноУспешно);
	
	Возврат Состояния;
КонецФункции	

Функция ПолучитьНеУспешныеСостояния() Экспорт 
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСценария.ЗавершенНеуспешно);
	Состояния.Добавить(Перечисления.СостоянияСценария.Прерван);
	Состояния.Добавить(Перечисления.СостоянияСценария.ЗавершенФатально);
	
	Возврат Состояния;
КонецФункции	

Функция ПолучитьСтруктуруСостояний() Экспорт 
	СписокАктивных = ПолучитьАктивныеСостояния();
	СписокНеАктивных = ПолучитьНеактивныеСостояния();
	СписокФинальных = ПолучитьФинальныеСостояния();
	СписокТестовых = ПолучитьТестовыеСостояния();
	СписокУспешных = ПолучитьУспешныеСостояния();
	СписокНеУспешных = ПолучитьНеУспешныеСостояния();
	
	
	Результат = Новый Структура("СписокАктивных, СписокНеАктивных, СписокФинальных, СписокТестовых, СписокУспешных, СписокНеУспешных", СписокАктивных, СписокНеАктивных, СписокФинальных, СписокТестовых, СписокУспешных, СписокНеУспешных);
	
	Возврат Результат;
КонецФункции	

Функция ПолучитьСостоянияНезапущенныхШагов() Экспорт
	МассивНезапущенных = Новый Массив;
	МассивНезапущенных.Добавить(Перечисления.СостоянияШаговСценария.НеВыполнялся);
	МассивНезапущенных.Добавить(Перечисления.СостоянияШаговСценария.НеВыполнялсяВследствиеОтката);
	МассивНезапущенных.Добавить(Перечисления.СостоянияШаговСценария.НеВыполнялсяВследствиеОшибки);
	
	Возврат МассивНезапущенных;
КонецФункции	
#КонецОбласти	
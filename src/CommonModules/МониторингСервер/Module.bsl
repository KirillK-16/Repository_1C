////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в подсистеме Мониторинг 
// для работы на сервере 
//  
////////////////////////////////////////////////////////////////////////////////

// Стандартная функция, выполняемая при обновлении конфигурации
//
Процедура ПриОбновлении(Версия, СохраненнаяВерсия) Экспорт
	Если СохраненнаяВерсия <= "2.0.9.18" И Версия > "2.0.9.18" Тогда
		
		Показатели = Новый Массив;
		Показатели.Добавить("ОценкаПользователей");
		Показатели.Добавить("ПоказателиAPDEX");
		Показатели.Добавить("ПоказателиСкоростиВыполненияТипичныхОпераций");
		Показатели.Добавить("СформированоОтчетов");
		Показатели.Добавить("ТекущееЧислоВызововСервера");
		Показатели.Добавить("ЧислоНовыхОбъектов");
		Показатели.Добавить("ЧислоСеансовПользователей");
		
		Для Каждого ПоказательИмя Из Показатели Цикл
			Попытка
				ВыборкаПоказателей = Справочники[ПоказательИмя].Выбрать();
				Пока ВыборкаПоказателей.Следующий() Цикл
					ВыборкаПоказателей.ПолучитьОбъект().Удалить();
				КонецЦикла;
			Исключение
				Инфо = ИнформацияОбОшибке();
				Комментарий =
					"Описание = '" +Инфо.Описание + "', " +
					"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
					"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
					"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
					
				ЗаписьЖурналаРегистрации(
					"Процедура ПриОбновлении(Версия, СохраненнаяВерсия) Экспорт",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.ОбщиеМодули.МониторингСервер,
					,
					Комментарий);
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

// Выборка для скоростных показателей
//
// Параметры:
//  Показатель - ссылка на элемент справочника показателя,
//  ОпорнаяДата - Дата - опорная дата на графике мониторинга,
//  НачальноеСмещение - Число - смещение начала графика от опорной даты в шагах,
//  ЧислоТочек - Число - число точек на графике,
//  Шаг - Число,
//  ИнтервалАгрегированияСек - Число,
//  Запрос - Запрос - заготовка запроса,
//  ЗапросТекст - заготовка текста запроса,
//  ПолеВремя - Строка - имя поля времени в основной таблице с данными",
//  НормироватьДанные - Булево,
//  АгрегатнаяФункция - Строка,
//  ЭкстраполироватьДанные - Булево,
//  ДополнительныйКоэффициентНормировки - Число,
//
// Возвращаемое значение:
//  Массив
//
Функция ВыбратьДанныеПоИнтервалам(
	Показатель,
	ОпорнаяДата,
	НачальноеСмещение,
	ЧислоТочек,
	Шаг,
	ИнтервалАгрегированияСек,
	Запрос,
	ЗапросТекст,
	ПолеВремя = "Время",
	НормироватьДанные = Ложь,
	АгрегатнаяФункция = Неопределено,
	ЭкстраполироватьДанные = Ложь,
	ДополнительныйКоэффициентНормировки = 1
) Экспорт
	
	ЧислоИнтервалов = ЧислоТочек - 1;
	
	РазбиениеИнтервала = Новый СписокЗначений;
	НомерИнтервала = 0;
	ИтоговыеДанные = Новый Массив;
	НормыЗамеров = Новый Массив;

	Пока НомерИнтервала < ЧислоТочек Цикл
		
		Дата = ОпорнаяДата + (НачальноеСмещение + НомерИнтервала) * Шаг;
		
		НачалоИнтервала = Дата - ИнтервалАгрегированияСек;
		ОкончаниеИнтервала = Дата;
		РазбиениеИнтервала.Добавить(НачалоИнтервала);
		РазбиениеИнтервала.Добавить(ОкончаниеИнтервала);
		НомерИнтервала = НомерИнтервала + 1;
		ИтоговыеДанные.Добавить(?(ЭкстраполироватьДанные, Неопределено, 0));
		НормыЗамеров.Добавить(0);
	КонецЦикла;
	РазбиениеИнтервала.СортироватьПоЗначению();
	ЧислоЭлементовРазбиения = РазбиениеИнтервала.Количество();
	
	ИндексацияИнтервалов = "";
	НомерРазбиения = 0;
	Пока НомерРазбиения < ЧислоЭлементовРазбиения - 1 Цикл
		
		НомерВСтроку = Формат(НомерРазбиения, "ЧГ='100,0';ЧН=");
		
		Выбор = "
		|Когда
		|	ОсновнаяТаблицаЗамеров.%ПолеВремя < &КонецИнтервала%НомерРазбиения 
		|Тогда 
		|	%НомерРазбиения";
		Выбор = СтрЗаменить(Выбор, "%НомерРазбиения", НомерВСтроку);
		ИндексацияИнтервалов = ИндексацияИнтервалов + Выбор;
		
		ДатаОкончанияРазбиения = РазбиениеИнтервала[НомерРазбиения + 1].Значение;
		
		Запрос.УстановитьПараметр("КонецИнтервала" + НомерВСтроку, ДатаОкончанияРазбиения);
		
		НомерРазбиения = НомерРазбиения + 1;
		
	КонецЦикла;
	
	ИндексацияИнтервалов = ИндексацияИнтервалов + СтрЗаменить(" ИНАЧЕ %НомерИнтервала ", "%НомерИнтервала", Формат(ЧислоЭлементовРазбиения - 2, "ЧГ='100,0';ЧН="));
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%ИндексацияИнтервалов", ИндексацияИнтервалов);
	
	РазделительВременныхТаблиц = 
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.УстановитьПараметр("ВремяЗамеровНачало", ОпорнаяДата + НачальноеСмещение * Шаг - ИнтервалАгрегированияСек);
	Запрос.УстановитьПараметр("ВремяЗамеровОкончание", ОпорнаяДата + (НачальноеСмещение + ЧислоИнтервалов) * Шаг);
	Условия = " ОсновнаяТаблицаЗамеров.%ПолеВремя >= &ВремяЗамеровНачало И ОсновнаяТаблицаЗамеров.%ПолеВремя <= &ВремяЗамеровОкончание ";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%УсловиеНаИнтервалДат", Условия);
	
	Если ЭкстраполироватьДанные Тогда
		
		ЗапросТекст = ЗапросТекст + РазделительВременныхТаблиц + "
		|ВЫБРАТЬ
		|	Максимум(ВТ_ВыборкаЗамеров.Время) КАК ПоследнееВремя,
		|	ВТ_ВыборкаЗамеров.НомерИнтервала КАК НомерИнтервала
		|ПОМЕСТИТЬ ВТ_ПоследниеВремена
		|ИЗ
		|	ВТ_ВыборкаЗамеров КАК ВТ_ВыборкаЗамеров
		|
		|СГРУППИРОВАТЬ ПО ВТ_ВыборкаЗамеров.НомерИнтервала ";
		
		ЗапросТекст = ЗапросТекст + РазделительВременныхТаблиц + "
		|ВЫБРАТЬ
		|	ВТ_ВыборкаЗамеров.Время КАК Дата,
		|	ВТ_ВыборкаЗамеров.ТекущееЗначение КАК Значение,
		|	ВТ_ВыборкаЗамеров.НомерИнтервала КАК НомерИнтервала
		|ПОМЕСТИТЬ ВТ_ПоследниеЗначения
		|ИЗ
		|	ВТ_ВыборкаЗамеров
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ВТ_ПоследниеВремена
		|ПО 
		|	ВТ_ВыборкаЗамеров.Время = ВТ_ПоследниеВремена.ПоследнееВремя";
		
		ЗапросТекст = ЗапросТекст + РазделительВременныхТаблиц + "
		|ВЫБРАТЬ
		|	ВТ_ВыборкаЗамеров.НомерИнтервала КАК НомерИнтервала,
		|	%АгрегатнаяФункция КАК ТекущееЗначение
		|	%КоличествоЗамеров
		|ПОМЕСТИТЬ ВТ_УсредненияПоИнтервалам
		|
		|ИЗ
		|	ВТ_ВыборкаЗамеров КАК ВТ_ВыборкаЗамеров
		|
		|%Группировка ";
		
		ЗапросТекст = ЗапросТекст + РазделительВременныхТаблиц + "
		|ВЫБРАТЬ
		|	ВТ_ПоследниеЗначения.Значение КАК ПоследнееЗначение,
		|	ВТ_ПоследниеЗначения.Дата КАК Дата,
		|	ВТ_УсредненияПоИнтервалам.НомерИнтервала КАК НомерИнтервала,
		|	ВТ_УсредненияПоИнтервалам.ТекущееЗначение КАК ТекущееЗначение,
		|	ВТ_УсредненияПоИнтервалам.Нормировка КАК Нормировка	
		|ИЗ
		|	ВТ_ПоследниеЗначения
		|
		|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
		|	ВТ_УсредненияПоИнтервалам
		|ПО
		|	ВТ_УсредненияПоИнтервалам.НомерИнтервала = ВТ_ПоследниеЗначения.НомерИнтервала
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_УсредненияПоИнтервалам.НомерИнтервала";
	Иначе
		ЗапросТекст = ЗапросТекст + РазделительВременныхТаблиц + "
		|ВЫБРАТЬ
		|	ВТ_ВыборкаЗамеров.НомерИнтервала КАК НомерИнтервала,
		|	%АгрегатнаяФункция КАК ТекущееЗначение
		|	%КоличествоЗамеров,
		|	1 КАК ПоследнееЗначение
		|
		|ИЗ
		|	ВТ_ВыборкаЗамеров КАК ВТ_ВыборкаЗамеров
		|
		|%Группировка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ВыборкаЗамеров.НомерИнтервала";	
		
	КонецЕсли;
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%Группировка", " СГРУППИРОВАТЬ ПО ВТ_ВыборкаЗамеров.НомерИнтервала ");
	Если АгрегатнаяФункция = Неопределено Тогда
		АгрегатнаяФункция = "СУММА(ВТ_ВыборкаЗамеров.ТекущееЗначение)";
	КонецЕсли;
	
	Если НормироватьДанные Тогда
		ЗапросТекст = СтрЗаменить(ЗапросТекст, "%КоличествоЗамеров", " , КОЛИЧЕСТВО(ВТ_ВыборкаЗамеров.ТекущееЗначение) КАК Нормировка ");
	Иначе
		ЗапросТекст = СтрЗаменить(ЗапросТекст, "%КоличествоЗамеров", " , 1 КАК Нормировка ");
	КонецЕсли;
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%АгрегатнаяФункция", АгрегатнаяФункция);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%ПолеВремя", ПолеВремя);
	Запрос.Текст = ЗапросТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачалоОкна = 0;
	КонецОкна = 0;
	ТекущееЗначение = Неопределено;
	ПоследнееЗначение = Неопределено;
	Нормировка = 0;
	ТекущийИнтервал = Неопределено;
	
	Выгрузка = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НомерИнтервалаДанных = Выборка.НомерИнтервала;
		
		Если ТекущийИнтервал <> НомерИнтервалаДанных Тогда
			Выгрузка.Добавить(Новый Структура(
				"НомерИнтервала, ТекущееЗначение, ПоследнееЗначение, Нормировка",
				НомерИнтервалаДанных, 
				Выборка.ТекущееЗначение, 
				Выборка.ПоследнееЗначение,
				Выборка.Нормировка
			));
		Иначе
			// несколько последних значений
			ТекущиеДанные = Выгрузка[Выгрузка.Количество() - 1];
			// просто сумма, ничего другого пока не требуется
			ТекущиеДанные.Вставить("ПоследнееЗначение", ТекущиеДанные.ПоследнееЗначение + Выборка.ПоследнееЗначение);
		КонецЕсли;
		ТекущийИнтервал = НомерИнтервалаДанных;
	КонецЦикла;
	
	Для Каждого Выборка Из Выгрузка Цикл 
		НомерИнтервалаДанных = Выборка.НомерИнтервала;
		
		НачалоИнтервалаРазбиения = РазбиениеИнтервала[НомерИнтервалаДанных].Значение;
		КонецИнтервалаРазбиения = РазбиениеИнтервала[НомерИнтервалаДанных + 1].Значение;
		Пока ОпорнаяДата + (НачальноеСмещение + НачалоОкна) * Шаг <= НачалоИнтервалаРазбиения Цикл
			Если ЭкстраполироватьДанные Тогда
				НакопленноеЗначение = ИтоговыеДанные[НачалоОкна];
				Если НакопленноеЗначение = Неопределено Тогда
					ИтоговыеДанные[НачалоОкна] = ПоследнееЗначение;
					НормыЗамеров[НачалоОкна] = ДополнительныйКоэффициентНормировки;
				КонецЕсли;
			КонецЕсли;
			НачалоОкна = НачалоОкна + 1;
		КонецЦикла;
		
		Пока ОпорнаяДата + (НачальноеСмещение + КонецОкна)*Шаг - ИнтервалАгрегированияСек < НачалоИнтервалаРазбиения И КонецОкна < ЧислоТочек - 1 Цикл
			КонецОкна = КонецОкна + 1;
		КонецЦикла;
		Если ОпорнаяДата + (НачальноеСмещение + КонецОкна)*Шаг - ИнтервалАгрегированияСек > НачалоИнтервалаРазбиения Тогда
			КонецОкна = КонецОкна - 1;
		КонецЕсли;
		
		ПоследнееЗначение = Выборка.ПоследнееЗначение;
		ТекущееЗначение = Выборка.ТекущееЗначение;
		Если ТекущееЗначение = Null Тогда
			ТекущееЗначение = ПоследнееЗначение;
			Нормировка = 1;
		Иначе
			Нормировка = Выборка.Нормировка;
		КонецЕсли;
		
		НомерИнтервалаВОкне = НачалоОкна;
		Пока НомерИнтервалаВОкне <= КонецОкна Цикл			
			НормыЗамеров[НомерИнтервалаВОкне] = НормыЗамеров[НомерИнтервалаВОкне] + Нормировка;			
			НакопленноеЗначение = ИтоговыеДанные[НомерИнтервалаВОкне];
			ИтоговыеДанные[НомерИнтервалаВОкне] = ?(НакопленноеЗначение = Неопределено, 0, НакопленноеЗначение) + ТекущееЗначение;
			НомерИнтервалаВОкне = НомерИнтервалаВОкне + 1;
		КонецЦикла;
		
	КонецЦикла;
		
	Если НормироватьДанные ИЛИ ЭкстраполироватьДанные Тогда
		Индекс = 0;
		МаксИндекс = ИтоговыеДанные.Количество() - 1;
		Пока Индекс <= МаксИндекс Цикл
			НакопленноеЗначение = ИтоговыеДанные[Индекс];
			Если Индекс > КонецОкна И НакопленноеЗначение = Неопределено И ЭкстраполироватьДанные Тогда
				ИтоговыеДанные[Индекс] = ПоследнееЗначение;
				НормыЗамеров[Индекс] = ДополнительныйКоэффициентНормировки;
			КонецЕсли;
			
			Если НормироватьДанные Тогда				
				Норма = НормыЗамеров[Индекс];
				Значение = ИтоговыеДанные[Индекс]; 
				Если Норма <> 0 И Значение <> Неопределено Тогда
					ИтоговыеДанные[Индекс] = ДополнительныйКоэффициентНормировки * ИтоговыеДанные[Индекс] / Норма;
				КонецЕсли;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЕсли;
	Возврат ИтоговыеДанные;
	
КонецФункции

// Выборка для абсолютных показателей
//
// Параметры:
//  Показатель - ссылка на элемент справочника показателя,
//  ОпорнаяДата - Дата - опорная дата на графике мониторинга,
//  НачальноеСмещение - Число - смещение начала графика от опорной даты в шагах,
//  ЧислоТочек - Число - число точек на графике,
//  Шаг - Число,
//  ИнтервалАгрегированияСек - Число,
//  Запрос - Запрос - заготовка запроса,
//  ЗапросТекст - заготовка текста запроса,
//  ПолеВремя - Строка - имя поля времени в основной таблице с данными"
//
// Возвращаемое значение:
//  Массив
//
Функция ВыбратьДанныеПоРешеткеДат(
	Показатель,
	ОпорнаяДата,
	НачальноеСмещение,
	ЧислоТочек,
	Шаг,
	Запрос,
	ЗапросТекст,
	ПолеВремя = "Время",
	СмещениеДатыНачала = 0,
	ИспользуютсяКонтрольныеОтметки = Ложь,
	ГруппироватьПоОбъектамКонтроля = Ложь,
    ДатаЧисло14 = Ложь
) Экспорт
	
	ЧислоИнтервалов = ЧислоТочек - 1;
	
	Если ЧислоИнтервалов = 0 Тогда
		ИндексацияИнтервалов = " 0 ";
	Иначе
		ИндексацияИнтервалов = "ВЫБОР ";
		НомерРазбиения = 0;
		Пока НомерРазбиения < ЧислоТочек - 1 Цикл
			
			НомерВСтроку = Формат(НомерРазбиения, "ЧГ='100,0';ЧН=");
			
			Выбор = "
			|Когда
			|	ОсновнаяТаблицаЗамеров.%ПолеВремя < &КонецИнтервала%НомерРазбиения 
			|Тогда 
			|	%НомерРазбиения";
			Выбор = СтрЗаменить(Выбор, "%НомерРазбиения", НомерВСтроку);
			ИндексацияИнтервалов = ИндексацияИнтервалов + Выбор;
			
			КонецИнтервалаШаг = ОпорнаяДата + (НачальноеСмещение + НомерРазбиения) * Шаг;
            Если ДатаЧисло14 Тогда
                Запрос.УстановитьПараметр("КонецИнтервала" + НомерВСтроку, (КонецИнтервалаШаг - Дата(1,1,1))*1000);
            Иначе
                Запрос.УстановитьПараметр("КонецИнтервала" + НомерВСтроку, КонецИнтервалаШаг);
            КонецЕсли;
            НомерРазбиения = НомерРазбиения + 1;
		КонецЦикла;
		ИндексацияИнтервалов = ИндексацияИнтервалов + СтрЗаменить(" ИНАЧЕ %НомерИнтервала ", "%НомерИнтервала", Формат(ЧислоТочек - 1, "ЧГ='100,0';ЧН="));
		
		ИндексацияИнтервалов = ИндексацияИнтервалов + " КОНЕЦ ";
	КонецЕсли;
	
	ИндексацияИнтервалов = ИндексацияИнтервалов + " КАК НомерИнтервала ";
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%ИндексацияИнтервалов", ИндексацияИнтервалов);
	
	РазделительВременныхТаблиц = 
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ВремяЗамеровНачало = ОпорнаяДата + НачальноеСмещение * Шаг - СмещениеДатыНачала;
    Если ДатаЧисло14 Тогда
        Запрос.УстановитьПараметр("ВремяЗамеровНачало", (ВремяЗамеровНачало - Дата(1,1,1))*1000);
    Иначе
        Запрос.УстановитьПараметр("ВремяЗамеровНачало", ВремяЗамеровНачало);
    КонецЕсли;
    
	
	ВремяЗамеровОкончание = ОпорнаяДата + (НачальноеСмещение + ЧислоИнтервалов) * Шаг;
    Если ДатаЧисло14 Тогда
        Запрос.УстановитьПараметр("ВремяЗамеровОкончание", (ВремяЗамеровОкончание - Дата(1,1,1))*1000);
    Иначе
        Запрос.УстановитьПараметр("ВремяЗамеровОкончание", ВремяЗамеровОкончание);
    КонецЕсли;
    	
	Условия = " ОсновнаяТаблицаЗамеров.%ПолеВремя >= &ВремяЗамеровНачало И ОсновнаяТаблицаЗамеров.%ПолеВремя <= &ВремяЗамеровОкончание ";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%УсловиеНаИнтервалДат", Условия);
	
	ЗапросТекст = ЗапросТекст + РазделительВременныхТаблиц + "
	|ВЫБРАТЬ
	|	ВТ_ВыборкаЗамеров.НомерИнтервала КАК НомерИнтервала,
	|	ВТ_ВыборкаЗамеров.ОбъектКонтроля КАК ОбъектКонтроля,
	|	СРЕДНЕЕ(ВТ_ВыборкаЗамеров.ТекущееЗначение)КАК Среднее,
	|	КОЛИЧЕСТВО(ВТ_ВыборкаЗамеров.ТекущееЗначение) КАК Количество,
	|	МИНИМУМ(ВТ_ВыборкаЗамеров.ТекущееЗначение) КАК Минимум,
	|	МАКСИМУМ(ВТ_ВыборкаЗамеров.ТекущееЗначение) КАК Максимум
	|
	|ИЗ
	|	ВТ_ВыборкаЗамеров КАК ВТ_ВыборкаЗамеров
	|
	|СГРУППИРОВАТЬ ПО ВТ_ВыборкаЗамеров.НомерИнтервала, ВТ_ВыборкаЗамеров.ОбъектКонтроля
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ВыборкаЗамеров.НомерИнтервала";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%ПолеВремя", ПолеВремя);
	Запрос.Текст = ЗапросТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Инициализируем итоговые данные
	ВыгрузкаДанных = Новый Массив;
	ИтоговыеДанные = Новый Массив;
	НомерТочки = 0;
	Пока НомерТочки < ЧислоТочек Цикл
		ВыгрузкаДанных.Добавить(Новый Соответствие);
		Если ГруппироватьПоОбъектамКонтроля Тогда
			ИтоговыеДанные.Добавить(Новый Соответствие);
		Иначе
			ИтоговыеДанные.Добавить(Новый Структура(
				"Среднее, Минимум, Максимум, Количество",
				0,0,0,0,0
			));
		КонецЕсли;
		
		НомерТочки = НомерТочки + 1;
	КонецЦикла;
	
	НачальныеДанные = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		НомерТочки = Выборка.НомерИнтервала;
		ОбъектКонтроля = Выборка.ОбъектКонтроля;
		Если НомерТочки = -1 Тогда
			НачальныеДанные.Вставить(ОбъектКонтроля, Новый Структура("Среднее", Выборка.Среднее));
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Количество <> 0 И ИспользуютсяКонтрольныеОтметки Тогда
			ПоправкаКРезультату = -1;
		Иначе
			ПоправкаКРезультату = 0;
		КонецЕсли;
		
		ДанныеПоОбъектуКонтроляНаТекущемШаге = ВыгрузкаДанных[НомерТочки][ОбъектКонтроля];
		
		Если ДанныеПоОбъектуКонтроляНаТекущемШаге = Неопределено Тогда
			ДанныеПоОбъектуКонтроляНаТекущемШаге = Новый Структура(
				"Среднее, Минимум, Максимум, Количество",
				0,0,0,0
			);
			
			ВыгрузкаДанных[НомерТочки].Вставить(ОбъектКонтроля, ДанныеПоОбъектуКонтроляНаТекущемШаге);
		КонецЕсли;
		
		ДанныеПоОбъектуКонтроляНаТекущемШаге.Среднее = Выборка.Среднее + ПоправкаКРезультату;
		ДанныеПоОбъектуКонтроляНаТекущемШаге.Количество = Выборка.Количество;
		ДанныеПоОбъектуКонтроляНаТекущемШаге.Минимум = Выборка.Минимум + ПоправкаКРезультату;
		ДанныеПоОбъектуКонтроляНаТекущемШаге.Максимум = Выборка.Максимум + ПоправкаКРезультату;
		
	КонецЦикла;
		
	НомерТочки = 0;
	ПоследниеЗначения = НачальныеДанные;
	Пока НомерТочки < ЧислоТочек Цикл
		
		ИтоговыеДанныеВТочке = ИтоговыеДанные[НомерТочки];
		ДанныеВыгрузки = ВыгрузкаДанных[НомерТочки];
		
		Для Каждого ОбъектДанные Из ПоследниеЗначения Цикл
			ОбъектКонтроля = ОбъектДанные.Ключ;
			Если ДанныеВыгрузки.Получить(ОбъектКонтроля) = Неопределено Тогда
				ДанныеПоОбъектуВТочке = ОбъектДанные.Значение;
				Если ГруппироватьПоОбъектамКонтроля Тогда
					ИтоговыеДанныеВТочке.Вставить(ОбъектКонтроля, Новый Структура("Среднее, Минимум, Максимум", ДанныеПоОбъектуВТочке.Среднее, 0, 0));
				Иначе
					ИтоговыеДанныеВТочке.Среднее = ИтоговыеДанныеВТочке.Среднее + ДанныеПоОбъектуВТочке.Среднее;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ОбъектДанные Из ДанныеВыгрузки Цикл
			ОбъектКонтроля = ОбъектДанные.Ключ;
			ДанныеПоОбъектуВТочке = ОбъектДанные.Значение;
			Если ГруппироватьПоОбъектамКонтроля Тогда
				ИтоговыеДанныеВТочке.Вставить(ОбъектКонтроля, Новый Структура(
					"Среднее, Минимум, Максимум",
					ДанныеПоОбъектуВТочке.Среднее,
					ДанныеПоОбъектуВТочке.Минимум,
					ДанныеПоОбъектуВТочке.Максимум
				));
			Иначе
				ИтоговыеДанныеВТочке.Среднее = ИтоговыеДанныеВТочке.Среднее + ДанныеПоОбъектуВТочке.Среднее;
				ИтоговыеДанныеВТочке.Минимум = ИтоговыеДанныеВТочке.Минимум + ДанныеПоОбъектуВТочке.Минимум;
				ИтоговыеДанныеВТочке.Максимум = ИтоговыеДанныеВТочке.Максимум + ДанныеПоОбъектуВТочке.Максимум;
				ИтоговыеДанныеВТочке.Количество = Макс(ИтоговыеДанныеВТочке.Количество, ДанныеПоОбъектуВТочке.Количество);
			КонецЕсли;
			ПоследниеЗначения.Вставить(ОбъектКонтроля, ДанныеПоОбъектуВТочке);
		КонецЦикла;
		НомерТочки = НомерТочки + 1;
		
	КонецЦикла;
	
	Замеры = Новый Массив;
	Для Каждого ТекДанные Из ИтоговыеДанные Цикл
		Замеры.Добавить(ТекДанные.Среднее);
	КонецЦикла;
		
	Возврат Замеры;
	
КонецФункции

// Выборка последних данных для абсолютных показателей
//
// Параметры:
//  Показатель - ссылка на элемент справочника показателя,
//  ОпорнаяДата - Дата - опорная дата на графике мониторинга,
//  НачальноеСмещение - Число - смещение начала графика от опорной даты в шагах,
//  ЧислоТочек - Число - число точек на графике,
//  Шаг - Число,
//  ИнтервалАгрегированияСек - Число,
//  Запрос - Запрос - заготовка запроса,
//  ЗапросТекст - заготовка текста запроса,
//  ПолеВремя - Строка - имя поля времени в основной таблице с данными"
//  БазовоеЗначение - Число
//
// Возвращаемое значение:
//  Массив
//
Функция ВыбратьПоследниеДанныеДляМоментовВремени(
	Показатель,
	ОпорнаяДата,
	НачальноеСмещение,
	ЧислоТочек,
	Шаг,
	Запрос,
	ЗапросТекст,
	ПолеВремя = "Время",
	БазовоеЗначение = 0
) Экспорт
	
	ИтоговыеДанные = Новый Массив;
	ЧислоИнтервалов = ЧислоТочек - 1;
	
	Если ЧислоИнтервалов = 0 Тогда
		ИтоговыеДанные.Добавить(БазовоеЗначение);
		ИндексацияИнтервалов = " 0 ";
	Иначе
		ИндексацияИнтервалов = "ВЫБОР ";
		НомерРазбиения = 0;
		Пока НомерРазбиения < ЧислоТочек - 1 Цикл
			
			НомерВСтроку = Формат(НомерРазбиения, "ЧГ='100,0';ЧН=");
			
			Выбор = "
			|Когда
			|	ОсновнаяТаблицаЗамеров.%ПолеВремя < &КонецИнтервала%НомерРазбиения 
			|Тогда 
			|	%НомерРазбиения";
			Выбор = СтрЗаменить(Выбор, "%НомерРазбиения", НомерВСтроку);
			ИндексацияИнтервалов = ИндексацияИнтервалов + Выбор;
			
			Запрос.УстановитьПараметр("КонецИнтервала" + НомерВСтроку, ОпорнаяДата + (НачальноеСмещение + НомерРазбиения) * Шаг);
			НомерРазбиения = НомерРазбиения + 1;
			ИтоговыеДанные.Добавить(БазовоеЗначение);
		КонецЦикла;
		ИтоговыеДанные.Добавить(БазовоеЗначение);
		ИндексацияИнтервалов = ИндексацияИнтервалов + СтрЗаменить(" ИНАЧЕ %НомерИнтервала ", "%НомерИнтервала", Формат(ЧислоТочек - 1, "ЧГ='100,0';ЧН="));
		
		ИндексацияИнтервалов = ИндексацияИнтервалов + " КОНЕЦ ";
	КонецЕсли;
	
	ИндексацияИнтервалов = ИндексацияИнтервалов + " КАК НомерИнтервала ";
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%ИндексацияИнтервалов", ИндексацияИнтервалов);

	РазделительВременныхТаблиц = 
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.УстановитьПараметр("ВремяЗамеровНачало", ОпорнаяДата + НачальноеСмещение * Шаг);
	Запрос.УстановитьПараметр("ВремяЗамеровОкончание", ОпорнаяДата + (НачальноеСмещение + ЧислоТочек - 1)* Шаг);
	Условия = " ОсновнаяТаблицаЗамеров.%ПолеВремя >= &ВремяЗамеровНачало И ОсновнаяТаблицаЗамеров.%ПолеВремя < &ВремяЗамеровОкончание ";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%УсловиеНаИнтервалДат", Условия);
	
	ЗапросТекст = ЗапросТекст + РазделительВременныхТаблиц + "
	|ВЫБРАТЬ
	|	Максимум(ВТ_ВыборкаЗамеров.Время) КАК ПоследнееВремя,
	|	ВТ_ВыборкаЗамеров.ОбъектКонтроля КАК ОбъектКонтроля
	|ПОМЕСТИТЬ ВТ_ЦелевыеВремена
	|ИЗ
	|	ВТ_ВыборкаЗамеров КАК ВТ_ВыборкаЗамеров
	|
	|СГРУППИРОВАТЬ ПО ВТ_ВыборкаЗамеров.НомерИнтервала, ВТ_ВыборкаЗамеров.ОбъектКонтроля";
	
	ЗапросТекст = ЗапросТекст + РазделительВременныхТаблиц + "
	|ВЫБРАТЬ
	|	ВТ_ВыборкаЗамеров.Время КАК Дата,
	|	ВТ_ВыборкаЗамеров.ТекущееЗначение КАК Значение,
	|	ВТ_ВыборкаЗамеров.НомерИнтервала КАК НомерИнтервала,
	|	ВТ_ВыборкаЗамеров.ОбъектКонтроля КАК ОбъектКонтроля
	|ИЗ
	|	ВТ_ВыборкаЗамеров
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ВТ_ЦелевыеВремена
	|ПО 
	|	ВТ_ВыборкаЗамеров.Время = ВТ_ЦелевыеВремена.ПоследнееВремя
	|	И ВТ_ВыборкаЗамеров.ОбъектКонтроля = ВТ_ЦелевыеВремена.ОбъектКонтроля
	|УПОРЯДОЧИТЬ ПО НомерИнтервала";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%ПолеВремя", ПолеВремя);
	
	Запрос.Текст = ЗапросТекст;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВыборкиПоОбъектамКонтроля = Новый Соответствие;
	КоличествоИтоговыхДанных = ИтоговыеДанные.Количество();
	Пока Выборка.Следующий() Цикл
		
		ОбъектКонтроля = Выборка.ОбъектКонтроля;
		НомерИнтервала = Выборка.НомерИнтервала;
		Значение = Выборка.Значение;
		
		ВыборкаПоОбъекту = ВыборкиПоОбъектамКонтроля.Получить(ОбъектКонтроля);
		Если ВыборкаПоОбъекту = Неопределено Тогда
			ВыборкаПоОбъекту = Новый Массив;
			ВыборкиПоОбъектамКонтроля.Вставить(ОбъектКонтроля, ВыборкаПоОбъекту);
			ОбщийКлиентСервер.ЗаполнитьМассивБазовымиЗначениями(ВыборкаПоОбъекту, КоличествоИтоговыхДанных, БазовоеЗначение);
		КонецЕсли;
		ВыборкаПоОбъекту[НомерИнтервала] = Значение;
		
	КонецЦикла;
	
	Для Каждого ОбъектВыборкаПоОбъекту Из ВыборкиПоОбъектамКонтроля Цикл
		ЗамерыПоОбъекту = ОбъектВыборкаПоОбъекту.Значение;
		ЗамерыПоОбъекту = ЗаполнитьПромежутки(ЗамерыПоОбъекту, БазовоеЗначение);
		ОбщийКлиентСервер.СуммироватьМассивы(
			ИтоговыеДанные,
			ЗамерыПоОбъекту 
		);
	КонецЦикла;
	
	Возврат ИтоговыеДанные;
	
КонецФункции

// Вычисляет сколько секунд входит в интервал усреднения
//
// Параметры:
//  Интервал - Перечисления.ИнтервалыУсреднения
//
// Возвращаемое значение:
//  Число
//
Функция СекундВИнтервалеУсреднения(Интервал) Экспорт
	Если Интервал = Перечисления.ИнтервалыУсреднения.Минута Тогда
		Возврат 60;
	ИначеЕсли Интервал = Перечисления.ИнтервалыУсреднения.Час Тогда
		Возврат СловарьКлиентСервер.ЧасВСекунды();
	ИначеЕсли Интервал = Перечисления.ИнтервалыУсреднения.День Тогда
		Возврат СловарьКлиентСервер.ДеньВСекунды();
	ИначеЕсли Интервал = Перечисления.ИнтервалыУсреднения.Неделя Тогда
		Возврат СловарьКлиентСервер.НеделяВСекунды();
	ИначеЕсли Интервал = Перечисления.ИнтервалыУсреднения.Месяц Тогда
		Возврат СловарьКлиентСервер.МесяцВСекунды();
	КонецЕсли;
КонецФункции

// Читает журналы регистрации информационных баз 
// и записывает статистические данные по информационным базам
//
//
Процедура ЧтениеЖурналовРегистрацииСВыгрузкойВФайл() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
	Сообщение = "Чтение журналов регистрации.Старт";
	Отладка.Информация(Сообщение);
    
    // Ждем исправления ошибки платформы
    Если Истина ИЛИ Константы.СборСтатистикиОтключен.Получить() Тогда
        Возврат;
	КонецЕсли;
	ПараметрыБаз = РегистрыСведений.ПараметрыИнформационныхБаз.Выбрать();
	
	МаксДаты = Новый Соответствие;
	ТекущаяДата = ТекущаяДата();
	ПрефиксыСобытияФоновыхОтчетов = ПрефиксыСобытияФоновыхОтчетов();
	Пока ПараметрыБаз.Следующий() Цикл
		
		ВсегоОтчетов = 0;
		ВсегоИзмененоОбъектов = 0;
		ВсегоНовыхОбъектов = 0;
		ВсегоПроведеноДокументов = 0;
		
		ИБ = ПараметрыБаз.ОбъектКонтроля;
		Если ТипЗнч(ИБ) = Тип("СправочникСсылка.ВидыОбъектовКонтроля") Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиПутиКЖурналу = Новый Массив;
		ЧастиПутиКЖурналу.Добавить(ПараметрыБаз.КаталогЖурналРегистрации);
		ЧастиПутиКЖурналу.Добавить("1Cv8.lgf");
		
		ПутьКЖурналуРегистрации = ОбщийКлиентСервер.СформироватьПуть(ЧастиПутиКЖурналу);
		
		ТекущаяДатаСервер = ТекущаяДата();
		МаксимальнаяДатаПрочитанныхЗаписей = РегистрыСведений.ГраницаЧтенияЖурналаРегистрации.Получить(Новый Структура(
			"ИнформационнаяБаза", ИБ
		))["Дата"];
		
		Фильтр = Новый Структура("ДатаНачала, Событие, Уровень");
		
		Если ТекущаяДатаСервер - МаксимальнаяДатаПрочитанныхЗаписей > 3600 Тогда			
			Фильтр.ДатаНачала = ТекущаяДатаСервер - 3600;
		Иначе
			Фильтр.ДатаНачала = МаксимальнаяДатаПрочитанныхЗаписей;			
		КонецЕсли;
		ИнтервалЧтения = (ТекущаяДатаСервер - Фильтр.ДатаНачала) / 60;
		Если ИнтервалЧтения <= 0 Тогда
			ИнтервалЧтения = 1;
		КонецЕсли;
		
		Уровни = Новый Массив;
		Уровни.Добавить(УровеньЖурналаРегистрации.Информация);
		Фильтр.Уровень = Уровни;
		
		События = Новый Массив;
		События.Добавить("_$Data$_.New");
		События.Добавить("_$Data$_.Update");
		События.Добавить("_$Job$_.Start");
		События.Добавить("_$Data$_.Post");
		Фильтр.Событие = События;
		
		ИмяФайлаЖурнала = ПолучитьИмяВременногоФайла("xml");
		Попытка
			ВыгрузитьЖурналРегистрации(ИмяФайлаЖурнала, Фильтр, "Дата, Событие, ИмяПриложения, Данные", ПутьКЖурналуРегистрации);
		Исключение
			Инфо = ИнформацияОбОшибке();
			Комментарий =
				"Описание = '" +Инфо.Описание + "', " +
				"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
				"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
				"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
					
			ЗаписьЖурналаРегистрации(
				"Процедура ЧтениеЖурналовРегистрацииСВыгрузкойВФайл() Экспорт",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.МониторингСервер,
				,
				Комментарий);
				
			Продолжить;
		КонецПопытки;
		Чтение = Новый ЧтениеXML;
		
		Чтение.ОткрытьФайл(ИмяФайлаЖурнала);
		Чтение.ПерейтиКСодержимому();
		Чтение.Прочитать();
	
		ТипСобытияЖР = ФабрикаXDTO.Тип("http://v8.1c.ru/eventLog", "Event");
		
		МаксДата = Неопределено; 
		ПоследняяДата = Неопределено;
		
		СтатистикаПоТекущейДате = Неопределено;
		
		Пока Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
	
			Событие = ФабрикаXDTO.ПрочитатьXML(Чтение, ТипСобытияЖР);
			
			ДатаСобытия					= ДатаСобытияЖурналаРегистрации(Событие.Date);
			ИмяСобытия					= Событие.Event;
			ИмяПриложения				= Событие.ApplicationName;
	        Данные						= Событие.Data;
			
			// Дата события должна быть обязательно заполнена
			Если НЕ ЗначениеЗаполнено(ДатаСобытия) Тогда
				// Возможно при повреждении файла журнала. Исключение не вызываем,
				// просто игнорируем это событие.
				Продолжить;
			КонецЕсли;
			
			Если ПоследняяДата <> Неопределено И ДатаСобытия <> ПоследняяДата Тогда
				ЗаписатьСтатистику(
					ПоследняяДата, 
					ИБ, 
					СтатистикаПоТекущейДате["ИзмененоОбъектов"], 
					СтатистикаПоТекущейДате["СозданоОбъектов"], 
					СтатистикаПоТекущейДате["СформированоОтчетов"],
					СтатистикаПоТекущейДате["ПроведеноДокументов"]
				);
				СтатистикаПоТекущейДате = Неопределено;	
			КонецЕсли;
			
			Если СтатистикаПоТекущейДате = Неопределено Тогда
				
				СтатистикаПоТекущейДате = Новый Структура("ИзмененоОбъектов, СозданоОбъектов, СформированоОтчетов, ПроведеноДокументов", 0, 0, 0, 0);
				
			КонецЕсли;
			
			МаксДата = ОбщийКлиентСервер.МаксЗнч(МаксДата, ДатаСобытия); 
			
			Если ТипЗнч(Данные) <> Тип("Строка") Тогда
				Данные = "";
			КонецЕсли;
			
			Если ИмяПриложения = "BackgroundJob" Тогда
				Для Каждого ПрефиксСобытияФоновыхОтчетов Из ПрефиксыСобытияФоновыхОтчетов Цикл
					Поз = СтрНайти(Данные,ПрефиксСобытияФоновыхОтчетов);
					Если Поз > 0 Тогда
						
						ОбщийКлиентСервер.ИзменитьВСтруктуре(
							СтатистикаПоТекущейДате,
							"СформированоОтчетов",
							1
						);
						ВсегоОтчетов = ВсегоОтчетов + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ИмяСобытия = "_$Data$_.New" Тогда
				
				ОбщийКлиентСервер.ИзменитьВСтруктуре(
					СтатистикаПоТекущейДате,
					"СозданоОбъектов",
					1
				);				
				ВсегоНовыхОбъектов = ВсегоНовыхОбъектов + 1;
				
			КонецЕсли;
			
			Если ИмяСобытия = "_$Data$_.Update" Тогда
				
				ОбщийКлиентСервер.ИзменитьВСтруктуре(
					СтатистикаПоТекущейДате,
					"ИзмененоОбъектов",
					1
				);
				ВсегоИзмененоОбъектов = ВсегоИзмененоОбъектов + 1;
				
			КонецЕсли; 
			
			Если ИмяСобытия = "_$Data$_.Post" Тогда
				
				ОбщийКлиентСервер.ИзменитьВСтруктуре(
					СтатистикаПоТекущейДате,
					"ПроведеноДокументов",
					1
				);
				ВсегоПроведеноДокументов = ВсегоПроведеноДокументов + 1;
				
			КонецЕсли;
			
			ПоследняяДата = ДатаСобытия;
		КонецЦикла;
		
		Если СтатистикаПоТекущейДате <> Неопределено Тогда
			ЗаписатьСтатистику(
				ПоследняяДата, 
				ИБ, 
				СтатистикаПоТекущейДате["ИзмененоОбъектов"], 
				СтатистикаПоТекущейДате["СозданоОбъектов"], 
				СтатистикаПоТекущейДате["СформированоОтчетов"],
				СтатистикаПоТекущейДате["ПроведеноДокументов"]
			);
		КонецЕсли;
		
		Чтение.Закрыть();
		
		Попытка
			УдалитьФайлы(ИмяФайлаЖурнала);
		Исключение
			Инфо = ИнформацияОбОшибке();
			Комментарий =
				"Описание = '" +Инфо.Описание + "', " +
				"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
				"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
				"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
					
			ЗаписьЖурналаРегистрации(
				"Процедура ЧтениеЖурналовРегистрацииСВыгрузкойВФайл() Экспорт",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.МониторингСервер,
				,
				Комментарий);
		КонецПопытки;
				
		МаксДаты.Вставить(ИБ, МаксДата);
		
		СкоростьЗапись = РегистрыСведений.СтатистикаСкорость.СоздатьМенеджерЗаписи();
		СкоростьЗапись.Период = ТекущаяДата;
		СкоростьЗапись.ИнформационнаяБаза = ИБ ;
		СкоростьЗапись.ЧислоОтчетовВМинуту = ВсегоОтчетов / ИнтервалЧтения;
		СкоростьЗапись.НовыхОбъектовВМинуту = ВсегоНовыхОбъектов / ИнтервалЧтения;
		СкоростьЗапись.ИзмененоОбъектовВМинуту = ВсегоИзмененоОбъектов / ИнтервалЧтения;
		СкоростьЗапись.ПроведеноДокументовВМинуту = ВсегоПроведеноДокументов / ИнтервалЧтения;
		СкоростьЗапись.Записать(Истина);
		
	КонецЦикла;
	
	Если МаксДаты.Количество() Тогда
		
		НаборМаксимальныхДат = РегистрыСведений.ГраницаЧтенияЖурналаРегистрации.СоздатьНаборЗаписей();
		
		Для Каждого ИБДата Из МаксДаты Цикл
			
			ИБ = ИБДата.Ключ;
			МаксДата = ИБДата.Значение;
			
			ЗаписьОМаксимальнойДате = НаборМаксимальныхДат.Добавить();
			ЗаписьОМаксимальнойДате.ИнформационнаяБаза = ИБ;
			ЗаписьОМаксимальнойДате.Дата = МаксДата;
			
		КонецЦикла;
		
		НаборМаксимальныхДат.Записать(Истина);
		
	КонецЕсли;
	
	Сообщение = "Чтение журналов регистрации.Завершение";
	Отладка.Информация(Сообщение);
	
КонецПроцедуры

// Заполняет в массиве незаполненные элементы
//
//
Функция ЗаполнитьПромежутки(Замеры, БазовоеЗначение = Неопределено, ЗаполнениеПоУмолчанию = Неопределено) Экспорт
	
	НовыеДанные = Новый Массив;
	ПоследнееЗначимое = ЗаполнениеПоУмолчанию;
	Для Каждого Замер Из Замеры Цикл
		Если Замер = БазовоеЗначение Тогда
			НовыеДанные.Добавить(ПоследнееЗначимое);
		Иначе
			НовыеДанные.Добавить(Замер);
			ПоследнееЗначимое = Замер;
		КонецЕсли;
	КонецЦикла;
	Возврат НовыеДанные;
	
КонецФункции

// Пустая выборка замеров по показателю
//
//
Функция ПустаяВыборка(ЧислоТочек, БазовоеЗначение = Неопределено) Экспорт
	
	НомерИнтервала = 0;
	Данные = Новый Массив;
	Пока НомерИнтервала < ЧислоТочек Цикл
		
		Данные.Добавить(БазовоеЗначение);
		НомерИнтервала = НомерИнтервала + 1;
		
	КонецЦикла;
	Возврат Данные;
	
КонецФункции

// Создает начальный профиль мониторинга
//
// Возвращаемое значение:
//  СправочникСсылка.ПрофильМониторинга
//
Функция НачальныйПрофильМониторинга() Экспорт
	ТекущаяДата = ТекущаяДата();
	
	ПрофильОбъект = Справочники.ПрофильМониторинга.СоздатьЭлемент();
	ПрофильОбъект.АнализПоказателейЧислоКолонок = 1;
	ПрофильОбъект.Пользователь = СловарьСервер.ТекущийПользователь();
	//ПрофильОбъект.ДатаНачала = ТекущаяДата - 24*60*60;
	ПрофильОбъект.ДатаНачала = ТекущаяДата - 30*60;
	ПрофильОбъект.ДатаОкончания = ТекущаяДата;
	ПрофильОбъект.Онлайн = Истина;
	ПрофильОбъект.Автообновление = Истина;
	ПрофильОбъект.ЧислоТочек = 100;
	ПрофильОбъект.ШагСдвига = 30;
	ПрофильОбъект.ТипДиаграммы = "График";
	ПрофильОбъект.ЦветЗаголовкаТекущейТочки = ЗначениеВСтрокуВнутр(Новый Цвет(0,0,0));
	ПрофильОбъект.ПоложениеЗаголовкаТекущейТочки = 90;
	ПрофильОбъект.МинимальныйШагОбновления = 30;
	ПрофильОбъект.ВремяОтображенияПрофиляПриРотации = 30;
	ПрофильОбъект.ИнтервалПроверкиВыпоненияФоновогоЗадания = 3;
	
	НоваяНастройка = ПрофильОбъект.НастройкиПоказателей.Добавить();
	НоваяНастройка.УИД = Новый УникальныйИдентификатор();
	НоваяНастройка.Наименование = "Текущая настройка";
	
	ПрофильОбъект.ТекущаяНастройка = НоваяНастройка.УИД;
	
	ПрофильОбъект.Записать();
	Возврат ПрофильОбъект.Ссылка;
	
КонецФункции

// Вычисляет сколько секунд соответствует в варианту смещения окна
//
// Параметры:
//  ТипСмещенияДаты - Перечисления.ВариантыСмещенияВременногоОкна
//
// Возвращаемое значение:
//  Число
//
Функция СмещениеДатыПоказателя(ТипСмещенияДаты) Экспорт
	Если ТипСмещенияДаты = Перечисления.ВариантыСмещенияВременногоОкна.Час Тогда
		Возврат СловарьКлиентСервер.ЧасВСекунды();
	ИначеЕсли ТипСмещенияДаты = Перечисления.ВариантыСмещенияВременногоОкна.День Тогда
		Возврат СловарьКлиентСервер.ДеньВСекунды();
	ИначеЕсли ТипСмещенияДаты = Перечисления.ВариантыСмещенияВременногоОкна.Неделя Тогда
		Возврат СловарьКлиентСервер.НеделяВСекунды();
	ИначеЕсли ТипСмещенияДаты = Перечисления.ВариантыСмещенияВременногоОкна.Месяц Тогда
		Возврат СловарьКлиентСервер.МесяцВСекунды();
	ИначеЕсли ТипСмещенияДаты = Перечисления.ВариантыСмещенияВременногоОкна.Квартал Тогда
		Возврат СловарьКлиентСервер.КварталВСекунды();
	ИначеЕсли ТипСмещенияДаты = Перечисления.ВариантыСмещенияВременногоОкна.Год Тогда
		Возврат СловарьКлиентСервер.ГодВСекунды();
	КонецЕсли;
	Возврат 0;
КонецФункции

// Смещает даты в соответствии с настройками показателя
//
// Параметры:
//  ПоказательСсылка - Ссылка на элемент справочника показателя
//  ДатаНачала - Дата
//  ДатаОкончания - Дата
//  ПеревестиВУниверсальноеВремя - Истина
//
// Возвращаемое значение:
//  Число
//
Функция СмещенныеДаты(Знач ДатаНачала, Знач ДатаОкончания, ПеревестиВУниверсальноеВремя = Ложь) Экспорт
	Если ПеревестиВУниверсальноеВремя Тогда
		ЧасовойПоясСеанса = ЧасовойПоясСеанса();
		ДатаНачала = УниверсальноеВремя(ДатаНачала, ЧасовойПоясСеанса);
		ДатаОкончания = УниверсальноеВремя(ДатаОкончания, ЧасовойПоясСеанса);
	КонецЕсли;
	
	Возврат Новый Структура("ДатаНачалаСмещенная, ДатаОкончанияСмещенная",
		ДатаНачала,
		ДатаОкончания
	);
КонецФункции

// Вычисляет смещение даты в соответствии с настройками показателя мониторинга
//
// Параметры:
//  ПоказательСсылка - СправочникСсылка.ПоказателиМониторинга - Ссылка на элемент справочника показателя
//  ОпорнаяДата - Дата
//
// Возвращаемое значение:
//  Число - число секунд смещения
//
Функция ДополнительноеСмещениеОпорнойДаты(Знач ПоказательМониторинга, Знач ОпорнаяДата) Экспорт
	
	ОпорнаяДатаСмещенная = ОпорнаяДата;
	ПоказатьДанныеЗаПрошлыйПериод = ПоказательМониторинга.ПоказатьДанныеЗаПрошлыйПериод;
	Если ПоказатьДанныеЗаПрошлыйПериод Тогда
		ВеличинаСмещения = МониторингСервер.СмещениеДатыПоказателя(ПоказательМониторинга.ВременноеСмещение);
		ОпорнаяДатаСмещенная = ОпорнаяДатаСмещенная - ВеличинаСмещения;
	КонецЕсли;
	
	Возврат ОпорнаяДатаСмещенная - ОпорнаяДата;
	
КонецФункции

Функция ИнтервалУсредненияВРодительномПадеже(Интервал) Экспорт
	Если Интервал = Перечисления.ИнтервалыУсреднения.Минута Тогда
		Возврат "минут";
	ИначеЕсли Интервал = Перечисления.ИнтервалыУсреднения.Час Тогда
		Возврат "часов";
	ИначеЕсли Интервал = Перечисления.ИнтервалыУсреднения.День Тогда
		Возврат "дней";
	ИначеЕсли Интервал = Перечисления.ИнтервалыУсреднения.Неделя Тогда
		Возврат "недель";
	ИначеЕсли Интервал = Перечисления.ИнтервалыУсреднения.Месяц Тогда
		Возврат "месяцев";
	КонецЕсли;
КонецФункции

Функция УстановитьПараметрыДатыВЗапросе(Запрос, Знач ДатаНачала, Знач ДатаОкончания, ПеревестиВУниверсальноеВремя = Ложь) Экспорт
	
	СмещенныеДаты = СмещенныеДаты(ДатаНачала, ДатаОкончания, ПеревестиВУниверсальноеВремя);
	
	Запрос.УстановитьПараметр("ДатаНачала", СмещенныеДаты.ДатаНачалаСмещенная);
	Запрос.УстановитьПараметр("ДатаОкончания", СмещенныеДаты.ДатаОкончанияСмещенная);
	
	Возврат СмещенныеДаты;
	
КонецФункции

Функция УстановитьПараметрыОбъектаКонтроляВЗапросе(
	ПоказательСсылка,
	Запрос, 
	ЗапросТекст,
	НазваниеРеквизитаВсеОбъекты,
	НазваниеРеквизитаОбъектаКонтроля,
	НазваниеПоляОбъектаКонтроля,
	ОсновнаяТаблицаНазвание = "ОсновнаяТаблицаЗамеров",
	Префикс = "",
	Постфикс = ""
) Экспорт

	Если ПоказательСсылка[НазваниеРеквизитаВсеОбъекты] Тогда
		УсловиеНаОбъектКонтроля = " ";
	Иначе
		УсловиеНаОбъектКонтроля = СтрЗаменить(
			Префикс + "%ОсновнаяТаблицаНазвание.%НазваниеПоляОбъектаКонтроля = &ОбъектКонтроля " + Постфикс,
			"%ОсновнаяТаблицаНазвание",
			ОсновнаяТаблицаНазвание
		);
		УсловиеНаОбъектКонтроля = СтрЗаменить(УсловиеНаОбъектКонтроля, "%НазваниеПоляОбъектаКонтроля", НазваниеПоляОбъектаКонтроля);
		Запрос.УстановитьПараметр("ОбъектКонтроля", ПоказательСсылка[НазваниеРеквизитаОбъектаКонтроля]);
	КонецЕсли;
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%УсловиеНаОбъектКонтроля", УсловиеНаОбъектКонтроля);
	
КонецФункции

Функция ОбщаяЧастьИдентификатораВариантаПоказателя(
	Знач ПоказательОбъект,
	Знач ФильтрПоОбъектамКонтроля = Неопределено
) Экспорт

	РазделительПолей = "__";
	Результат = ПоказательОбъект.ИдентификаторТипаПоказателя() + РазделительПолей;
	
	Если ФильтрПоОбъектамКонтроля <> Неопределено Тогда
		Для Каждого ЭлементФильтра Из ФильтрПоОбъектамКонтроля Цикл
			НазваниеРеквизитаВсеОбъектыКонтроля = ЭлементФильтра.НазваниеРеквизитаВсеОбъектыКонтроля;
			НазваниеРеквизитаОбъектКонтроля = ЭлементФильтра.НазваниеРеквизитаОбъектКонтроля;
			
			ФильтрПоОбъектуКонтроляВключен = Истина;
			Если НазваниеРеквизитаВсеОбъектыКонтроля <> Неопределено Тогда
				ВсеОбъектыКонтроля = ПоказательОбъект[НазваниеРеквизитаВсеОбъектыКонтроля];
				Если ВсеОбъектыКонтроля Тогда
					Результат = Результат + "1" + РазделительПолей;
					ФильтрПоОбъектуКонтроляВключен = Ложь;
				Иначе
					Результат = Результат + "0" + РазделительПолей;
				КонецЕсли;
			КонецЕсли;
			
			Если НазваниеРеквизитаОбъектКонтроля <> Неопределено И ФильтрПоОбъектуКонтроляВключен Тогда
				ОбъектКонтроля = ПоказательОбъект[НазваниеРеквизитаОбъектКонтроля];
				Если ТипЗнч(ОбъектКонтроля) = Тип("Строка") Тогда
					Результат = Результат + Строка(ОбъектКонтроля) + РазделительПолей;
				Иначе
					Результат = Результат + Строка(ОбъектКонтроля.Ссылка.УникальныйИдентификатор()) + РазделительПолей;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПоказательОбъект.Метаданные().Реквизиты.Найти("ИнтервалУсреднения") <> Неопределено Тогда
		Результат = Результат + Строка(ПоказательОбъект.ИнтервалУсреднения) + РазделительПолей;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Процедура НастроитьИнтервалУсреднения(Объект, ИнтервалУсредненияЭлемент, ШагВСекундах) Экспорт
	ИнтервалУсредненияЭлемент.РежимВыбораИзСписка = Истина;
	ИнтервалУсредненияЭлемент.СписокВыбора.Очистить();
	Для ИндексИнтервалаУсреднения = 0 По Перечисления.ИнтервалыУсреднения.Количество() - 1 Цикл
		
		ИмяИнтервала = Метаданные.Перечисления.ИнтервалыУсреднения.ЗначенияПеречисления[ИндексИнтервалаУсреднения].Имя;
		ИнтервалУсреднения = Перечисления.ИнтервалыУсреднения[ИндексИнтервалаУсреднения];
		
		ДлинаИнтервала = Вычислить("СловарьКлиентСервер." + ИмяИнтервала + "ВСекунды()");
		Если ДлинаИнтервала >= ШагВСекундах Тогда
			ИнтервалУсредненияЭлемент.СписокВыбора.Добавить(ИнтервалУсреднения);
		КонецЕсли;
		
	КонецЦикла;
	Если ИнтервалУсредненияЭлемент.СписокВыбора.Количество() > 0 Тогда
		Объект.ИнтервалУсреднения = ИнтервалУсредненияЭлемент.СписокВыбора[0].Значение;
	КонецЕсли;
КонецПроцедуры

// Создает и частично заполняет данные оповещения, передаваемые при записи объекта-показателя в форму-владельца
//
// Параметры:
//  ПоказательОбъект - СправочникОбъект - один из объектов-показателей
//
// ВозвращаемоеЗначение:
//  Структура
//
Функция ПараметрОповещенияПоказательЗаписан(Знач ПоказательОбъект = Неопределено) Экспорт
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Ссылка");
	ПараметрОповещения.Вставить("Описание");
	ПараметрОповещения.Вставить("ИдентификаторВариантаПоказателя");
	ПараметрОповещения.Вставить("СтарыйИдентификаторТипа");
	ПараметрОповещения.Вставить("Изменился");
	ПараметрОповещения.Вставить("Цвет");
	ПараметрОповещения.Вставить("Масштаб");
	ПараметрОповещения.Вставить("АвтоМасштаб");
	
	Если ПоказательОбъект = Неопределено Тогда
		Возврат ПараметрОповещения;
	КонецЕсли;
	
	ПараметрОповещения.ИдентификаторВариантаПоказателя = ПоказательОбъект.ИдентификаторВариантаПоказателя();
	ПараметрОповещения.СтарыйИдентификаторТипа = ?(ПоказательОбъект.ЭтоНовый(), 
		"", ПоказательОбъект.Ссылка.ПолучитьОбъект().ИдентификаторТипаПоказателя());
		
	ПоказательОбъект.ЗаполнитьПараметрыОтображенияПоУмолчанию(ПараметрОповещения);
	
	Возврат ПараметрОповещения;
	
КонецФункции

// Формирует текстовое представление списка информационных баз
//
// Параметры:
//  ИнформационныеБазы - Коллекция - СправочникСсылка.ОбъектыКонтроля, соответствующие информационным базам
//
// Возвращаемое значение:
//  Строка
Функция ИнформационныеБазыВСтроку(Знач ИнформационныеБазы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыИнформационныхБаз.ОбъектКонтроля.Наименование КАК ИнформационнаяБаза,
		|	ПараметрыИнформационныхБаз.Кластер.Наименование КАК Кластер
		|ИЗ
		|	РегистрСведений.ПараметрыИнформационныхБаз КАК ПараметрыИнформационныхБаз
		|ГДЕ
		|	ПараметрыИнформационныхБаз.ОбъектКонтроля В (&ОбъектыКонтроля)";
	Запрос.УстановитьПараметр("ОбъектыКонтроля", ИнформационныеБазы);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИнформационныеБазыВСтроку = "";
	Пока Выборка.Следующий() Цикл
		ИнформационныеБазыВСтроку = ИнформационныеБазыВСтроку + ";" + Выборка.ИнформационнаяБаза + ", " + Выборка.Кластер;
	КонецЦикла;
	Если НЕ ПустаяСтрока(ИнформационныеБазыВСтроку) Тогда
		ИнформационныеБазыВСтроку = Прав(ИнформационныеБазыВСтроку, СтрДлина(ИнформационныеБазыВСтроку) - 1);
	КонецЕсли;
	
	Возврат ИнформационныеБазыВСтроку;
КонецФункции


// Формирует текстовое представление списка ресурсов
//
// Параметры:
//  Ресурсы - Коллекция - СправочникСсылка.Публикации, соответствующие ресурсы
//
// Возвращаемое значение:
//  Строка
Функция РесурсыВСтроку(Знач Ресурсы) Экспорт
	
	РесурсыВСтроку = "";
	
	Для Каждого Ресурс Из Ресурсы Цикл
		 РесурсыВСтроку = РесурсыВСтроку + ";" + Ресурс.Наименование;
	КонецЦикла;
	 
	Если НЕ ПустаяСтрока(РесурсыВСтроку) Тогда
		РесурсыВСтроку = Прав(РесурсыВСтроку, СтрДлина(РесурсыВСтроку) - 1);
	КонецЕсли;
		
	Возврат РесурсыВСтроку;
КонецФункции


// Формирует новое оповещение на основе показателя мониторинга
//
// Параметры:
//  ПоказательМониторинга - СправочникСсылка.ПоказателиМониторинга
//
// Возвращаемое значение:
//  СправочникСсылка.Оповещения, Неопределено
//
Функция СоздатьОповещение(Знач ПоказательМониторинга) Экспорт
	
	//Если Не ЗначениеЗаполнено(ПоказательМониторинга.Показатель) Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Результат = Справочники.Оповещения.СоздатьЭлемент();
		Результат.Записать();
		
		Для Каждого ТекПоказатель Из ПоказательМониторинга Цикл
			ПоказательОповещения = Справочники.ПоказателиОповещений.СоздатьЭлемент();
			ПоказательОповещения.Заполнить(ТекПоказатель);
			ПоказательОповещения.Владелец = Результат.Ссылка;
			ПоказательОповещения.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат Результат.Ссылка;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		Комментарий =
			"Описание = '" +Инфо.Описание + "', " +
			"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
			"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
			"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
					
		ЗаписьЖурналаРегистрации(
			"Функция СоздатьОповещение(Знач ПоказательМониторинга) Экспорт",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.МониторингСервер,
			,
			Комментарий);
						
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Получить следующий номер для показателя мониторинга
//
// Параметры:
//  ПрофильМониторинга - СправочникСсылка.ПрофилиМониторинга
//
// Возвращаемое значение:
//  Число
//
Функция СледующийНомер(Знач ПрофильМониторинга) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ПоказателиМониторинга.Номер) + 1, 0) КАК Номер
		|ИЗ
		|	Справочник.ПоказателиМониторинга КАК ПоказателиМониторинга
		|ГДЕ
		|	ПоказателиМониторинга.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ПрофильМониторинга);
	Возврат Запрос.Выполнить().Выгрузить()[0].Номер;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Поддержка фонового обновления данных в обработке Мониторинг

// Получение данных по одному или нескольким показателям
//
// Параметры:
//  ПараметрыОтчета - Структура - поля: 
//   Показатели - Массив СправочникСсылка.ЛюбаяСсылка
//   СмещениеОтОпорнойТочкиВШагах
//   ЧислоТочек
//   ОпорнаяДата
//   ДатаНачала
//   ДатаОкончания
//  АдресХранилища - Строка
// 
Процедура ОбновитьДанныеПоПоказателямВФоне(Знач ПараметрыОтчета, Знач АдресХранилища) Экспорт
    
    Замер = ВнутренниеЗамеры.НачатьЗамер("МониторингСервер.ОбновитьДанныеПоПоказателямВФоне");
    
	Результат = ОбновитьДанныеПоПоказателям(ПараметрыОтчета.Показатели,
		ПараметрыОтчета.СмещениеОтОпорнойТочкиВШагах, ПараметрыОтчета.ЧислоТочек, ПараметрыОтчета.ОпорнаяДата,
		ПараметрыОтчета.ДатаНачала, ПараметрыОтчета.ДатаОкончания);
		
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
    
    ВнутренниеЗамеры.ЗавершитьЗамер(Замер);
    
КонецПроцедуры

// Готовит данные для обработки Мониторинг
//
// ВозвращаемоеЗначение:
//  Соответствие - 
//   * Ключ - СправочникСсылка.ЛюбаяСсылка, 
//   * Значение - Структура, поля:
//     ** ИдентификаторТипаПоказателя - Строка
//     ** ИдентификаторВариантаПоказателя - Строка
//     ** Данные - Массив
//     ** Статистика - Структура
//     Цвет, ТолщинаЛинии, ТипЛинии, Наименование, ИдентификаторСерии
//     Масштаб, АвтоМасштаб, ПоказыватьТренд, КоличествоУсредняемыхЗначений, ТипСглаживания
//
Функция ОбновитьДанныеПоПоказателям(Знач Показатели, Знач СмещениеОтОпорнойТочкиВШагах, Знач ЧислоТочек,
	Знач ОпорнаяДата, Знач ДатаНачала, Знач ДатаОкончания) Экспорт 
	
	ДанныеПоВсемПоказателям = Новый Соответствие;
	КэшПоВариантамПоказателей = Новый Соответствие;
	Для Каждого Показатель Из Показатели Цикл
		
		Если Не ЗначениеЗаполнено(Показатель.Показатель) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоказательОбъект = Показатель.Показатель.ПолучитьОбъект();
		Если ПоказательОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СводныеНастройки = Новый Структура;
		
		СводныеНастройки.Вставить("Наименование", ПоказательОбъект.Описание);
		СводныеНастройки.Вставить("ИдентификаторТипаПоказателя", ПоказательОбъект.ИдентификаторТипаПоказателя());
		ИдентификаторВариантаПоказателя = ПоказательОбъект.ИдентификаторВариантаПоказателя() 
			+ МониторингКлиентСервер.СуффиксИдентификатораВариантаПоказателяМониторинга(Показатель);
		СводныеНастройки.Вставить("ИдентификаторВариантаПоказателя", ИдентификаторВариантаПоказателя);
		
		// Запрос для варианта показателя уже выполнялся, просто берем закэшированные данные
		Кэш = КэшПоВариантамПоказателей.Получить(ИдентификаторВариантаПоказателя);
		Если Кэш <> Неопределено Тогда
			ОбщийКлиентСервер.ОбъединитьСтруктуры(СводныеНастройки, Кэш);
		КонецЕсли;
		
		Если Не СводныеНастройки.Свойство("Данные") ИЛИ Не СводныеНастройки.Свойство("Статистика") Тогда
			Статистика = Новый Структура;
			Значения = ВыбратьДанныеПоПоказателю(
				Показатель, 
				ОпорнаяДата,
				СмещениеОтОпорнойТочкиВШагах, 
				ЧислоТочек, 
				ШагСервер(ДатаОкончания, ДатаНачала, ЧислоТочек), 
				Статистика
			);
			
			СводныеНастройки.Вставить("Данные", Значения);
			СводныеНастройки.Вставить("Статистика", Статистика);
			
			КэшПоВариантамПоказателей.Вставить(ИдентификаторВариантаПоказателя, Новый Структура("Данные, Статистика", Значения, Статистика));
		КонецЕсли;
		
		НастройкиВида = НастройкиВида(Показатель);
		ОбщийКлиентСервер.ОбъединитьСтруктуры(СводныеНастройки, НастройкиВида);
		
		НастройкиСглаживания = НастройкиСглаживания(Показатель);
		ОбщийКлиентСервер.ОбъединитьСтруктуры(СводныеНастройки, НастройкиСглаживания);
		
		НастройкиСерии = НастройкиСерии(Показатель);
		ОбщийКлиентСервер.ОбъединитьСтруктуры(СводныеНастройки, НастройкиСерии);
		
		ДанныеПоВсемПоказателям.Вставить(Показатель, СводныеНастройки);
		
	КонецЦикла;
	
	Возврат ДанныеПоВсемПоказателям;
	
КонецФункции

// Получение данных для сдвига графика
//
// Параметры:
//  ПараметрыОтчета - Структура - поля: 
//   СдвигВШагах
//   Шаг
//   ЧислоТочек
//   ОпорнаяДата
//   СмещениеОтОпорнойТочкиВШагах
//   ДанныеПоПоказателям - Соответствие
//  АдресХранилища - Строка
// 
Процедура ВыполнитьСдвигГрафикаВФоне(Знач ПараметрыОтчета, Знач АдресХранилища) Экспорт
		
	Если Константы.ОтладкаОбработкаМониторинга.Получить() Тогда
		Отладка.ЗаписатьОтладочнуюИнформацию("МониторингСервер.ВыполнитьСдвигГрафикаВФоне.Начало");					
	КонецЕсли;	
	
	Результат = ВыполнитьСдвигГрафика(ПараметрыОтчета.СдвигВШагах,
		ПараметрыОтчета.Шаг, ПараметрыОтчета.ОпорнаяДата, ПараметрыОтчета.ЧислоТочек,
		ПараметрыОтчета.СмещениеОтОпорнойТочкиВШагах, ПараметрыОтчета.ДанныеПоПоказателям);
		
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
	Если Константы.ОтладкаОбработкаМониторинга.Получить()  Тогда
		Отладка.ЗаписатьОтладочнуюИнформацию("МониторингСервер.ВыполнитьСдвигГрафикаВФоне.Завершение");					
	КонецЕсли;	
	
КонецПроцедуры

Функция ВыполнитьСдвигГрафика(Знач СдвигВШагах, Знач Шаг, Знач ОпорнаяДата, Знач ЧислоТочек, Знач СмещениеОтОпорнойТочкиВШагах, 
	Знач ДанныеПоПоказателям)
	
	СдвигВправо = СдвигВШагах > 0;
	СдвигВШагахАбсолютноеЗначение = ?(СдвигВправо, СдвигВШагах, -1 * СдвигВШагах);
	
	НоваяДатаНачалаПоОпорной = ДатаПоОпорной(ОпорнаяДата, Шаг, СмещениеОтОпорнойТочкиВШагах + СдвигВШагах);
	НоваяДатаОкончанияПоОпорной = ДатаПоОпорной(ОпорнаяДата, Шаг, СмещениеОтОпорнойТочкиВШагах + СдвигВШагах + ЧислоТочек - 1);
	
	ДатаНачала = НоваяДатаНачалаПоОпорной;
	ДатаОкончания = НоваяДатаОкончанияПоОпорной;
	
	Если СдвигВправо Тогда
		СмещениеНовойОбластиОтОпорнойДаты = ЧислоТочек -1 + СмещениеОтОпорнойТочкиВШагах + 1; // ДатаОкончания + Шаг;
	Иначе
		СмещениеНовойОбластиОтОпорнойДаты = СмещениеОтОпорнойТочкиВШагах + СдвигВШагах; // ДатаНачала + Сдвиг;
	КонецЕсли;
	
	КэшированиеЗапросов = Новый Соответствие;
	КэшированиеЗначенийТаблицы = Новый Соответствие;

	
	// Выбрать данные за величину сдвига, обновить статистику, таблицу и масштаб
	Для Каждого ПоказательДанные Из ДанныеПоПоказателям Цикл
		ПоказательМониторинга = ПоказательДанные.Ключ;
		ДанныеПоПоказателю = ПоказательДанные.Значение;
		
		Если Константы.ОтладкаОбработкаМониторинга.Получить()  Тогда
			Отладка.ЗаписатьОтладочнуюИнформацию("МониторингСервер.ВыполнитьСдвигГрафика.ЗначениеПоказательМониторинга", Строка(ПоказательМониторинга));					
		КонецЕсли;	
		
		Попытка
			ИдентификаторВариантаПоказателя = ПоказательМониторинга.Показатель.ПолучитьОбъект().ИдентификаторВариантаПоказателя();
		Исключение
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("ВыполнитьСдвигГрафика", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.МониторингСервер, ПоказательМониторинга, Комментарий);
			
			Продолжить;
		КонецПопытки;
				
		КэшЗапроса = КэшированиеЗапросов.Получить(ИдентификаторВариантаПоказателя);
		Если КэшЗапроса <> Неопределено Тогда
			
			ДанныеПоПоказателю.Вставить("Статистика", КэшЗапроса.Статистика);
			ДанныеПоПоказателю.Вставить("Замеры", КэшЗапроса.Замеры);
			ДанныеПоПоказателю.Вставить("ОбъединениеЗамеровВыполнено", КэшЗапроса.ОбъединениеЗамеровВыполнено);
			
			ЗапросКэширован = Истина;
		Иначе
			ЗапросКэширован = Ложь;
		КонецЕсли;
		
		ИдентификаторСпособаОтображенияВариантаПоказателя = ИдентификаторВариантаПоказателя;
		Если ПоказательМониторинга.ПоказыватьТренд Тогда
			ИдентификаторСпособаОтображенияВариантаПоказателя = ИдентификаторСпособаОтображенияВариантаПоказателя
				+ "__" + Строка(ПоказательМониторинга.ТипСглаживания);
		КонецЕсли;
		
		КэшТабличныхДанных = КэшированиеЗначенийТаблицы.Получить(ИдентификаторСпособаОтображенияВариантаПоказателя);
		Если КэшТабличныхДанных <> Неопределено Тогда
			
			ДанныеПоПоказателю.Вставить("ЗначенияДляТаблицы", КэшТабличныхДанных.ЗначенияДляТаблицы);
			ТабличныеДанныеКэшированы = Истина;
			
		Иначе
			ТабличныеДанныеКэшированы = Ложь;
		КонецЕсли;
		
		Если НЕ ЗапросКэширован Тогда
			
			//ТекущаяСтатистика = ДанныеПоПоказателю.Статистика;
			
			//КоррекцияСмещения = ДанныеПоПоказателю.КоррекцияСмещения;
			
			//СдвигВШагахПоПоказателю = СдвигВШагахАбсолютноеЗначение + КоррекцияСмещения;
						
			//СмещениеНовойОбластиОтОпорнойДатыПоПоказателю = СмещениеНовойОбластиОтОпорнойДаты - КоррекцияСмещения;
			
			//Читаем новые данные и новый горизонт актуальности
			НовыйГоризонт = Новый Структура;
			//НовыеЗамеры = ВыбратьДанныеПоПоказателю(
			//	ПоказательМониторинга, 
			//	ОпорнаяДата,
			//	СмещениеНовойОбластиОтОпорнойДатыПоПоказателю, 
			//	СдвигВШагахПоПоказателю, 
			//	Шаг, 
			//	НовыйГоризонт, 
			//	Ложь, 
			//	Истина,
			//	СдвигВправо
			//);
			
			НовыеЗамеры = ВыбратьДанныеПоПоказателю(
				ПоказательМониторинга, 
				ОпорнаяДата,
				0, 
				ЧислоТочек, 
				Шаг, 
				НовыйГоризонт, 
				Ложь, 
				Истина,
				СдвигВправо
			);
			
			Если ДанныеПоПоказателю.Свойство("Замеры") Тогда
				ТекущиеЗамеры = ДанныеПоПоказателю["Замеры"];
				ОбъединитьСтарыеЗамерыИЗамерыСдвига(ТекущиеЗамеры, НовыеЗамеры, СдвигВправо);
				ОбъединениеЗамеровВыполнено = Истина;
			Иначе
				ДанныеПоПоказателю.Вставить("Замеры", НовыеЗамеры);
				ОбъединениеЗамеровВыполнено = Ложь;
			КонецЕсли;
			
			ДанныеПоПоказателю.Вставить("ОбъединениеЗамеровВыполнено", ОбъединениеЗамеровВыполнено);
			
		КонецЕсли;
		
		Если НЕ ТабличныеДанныеКэшированы Тогда
			Если ПоказательМониторинга.ПоказыватьТренд Тогда
				СглаженныеЗначенияКакНаГрафике = ОчищенныеЗначенияДляГрафика(ДанныеПоПоказателю["Замеры"], ПоказательМониторинга, Истина);
				ЗначенияДляТаблицы = СглаженныеЗначенияКакНаГрафике;
			Иначе
				ЗначенияДляТаблицы = ДанныеПоПоказателю["Замеры"];
			КонецЕсли;
			
			ДанныеПоПоказателю.Вставить("ЗначенияДляТаблицы", ЗначенияДляТаблицы);
			
			КэшПоПоказателю = Новый Структура(
				"ЗначенияДляТаблицы",
				ЗначенияДляТаблицы
			);
			
			КэшированиеЗначенийТаблицы.Вставить(
				ИдентификаторСпособаОтображенияВариантаПоказателя,
				КэшПоПоказателю
			);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеПоПоказателям;
	
КонецФункции

Функция ДатаПоОпорной(Знач ОпорнаяДата, Знач Шаг, Знач ЧислоШагов)
	Возврат ОпорнаяДата + Шаг * ЧислоШагов;
КонецФункции

Функция ОчищенныеЗначенияДляГрафика(Значения, ПоказательМониторинга, ПоказыватьТренд)
	// заполняем данные в таблице
	// вычисляем масштаб
	Если Значения.Количество() > 0 И ТипЗнч(Значения[0])= Тип("Структура") Тогда
		СредниеЗначенияПоТочкам = Новый Массив;
		Для Каждого Замер Из Значения Цикл
			СредниеЗначенияПоТочкам.Добавить(Замер.Среднее);
		КонецЦикла;
		ОчищенныеЗначения = СредниеЗначенияПоТочкам;
	Иначе
		ОчищенныеЗначения = Значения;
	КонецЕсли;
	
	ЗначенияВТаблицу = Новый Соответствие;
	Если ПоказыватьТренд Тогда
		ЗначенияНаГрафике = МониторингКлиентСервер.СгладитьДанныеСсылкаНаПоказатель(ОчищенныеЗначения, ПоказательМониторинга);
	Иначе
		ЗначенияНаГрафике = ОчищенныеЗначения;
	КонецЕсли;
	
	Возврат ЗначенияНаГрафике;
КонецФункции

Функция ВыбратьДанныеПоПоказателю(
	Знач ПоказательМониторинга, 
	Знач ОпорнаяДата,
	Знач НачальноеСмещение, 
	Знач КоличествоТочек, 
	Знач Шаг, 
	Статистика = Неопределено,
	Знач ВычислитьАгрегатныеЗначения = Истина, 
	Знач ВычислитьГоризонтАктуальности = Истина,
	Знач РежимСдвига = Ложь
) 

	ДополнительноеСмещение = ДополнительноеСмещениеОпорнойДаты(ПоказательМониторинга, ОпорнаяДата);
	// Выбираем данные и определяем максимальную дату, по которую есть данные.
	Возврат ПоказательМониторинга.Показатель.ПолучитьОбъект().ПолучитьДанные(
		ОпорнаяДата + ДополнительноеСмещение,
		НачальноеСмещение, 
		КоличествоТочек, 
		Шаг, 
		Статистика, 
		ВычислитьАгрегатныеЗначения, 
		ВычислитьГоризонтАктуальности,
		РежимСдвига
	);
	
КонецФункции

Функция ШагСервер(Знач ДатаОкончания, Знач ДатаНачала, Знач ЧислоТочек)
	
	Возврат (ДатаОкончания - ДатаНачала) / (ЧислоТочек - 1);
	
КонецФункции

Функция НастройкиВида(Знач Показатель) Экспорт
    
    Попытка
        Цвет = ЗначениеИзСтрокиВнутр(Показатель.Цвет);
    Исключение
        Цвет = Новый Цвет(0,0,0);
    КонецПопытки;
        
	Возврат Новый Структура(
		"Цвет,ТолщинаЛинии,ТипЛинии,Маркер",
		Цвет,
		Показатель.ТолщинаЛинии,
		Показатель.ТипЛинии,
		Показатель.Маркер
	);
	
КонецФункции

Функция НастройкиСерии(Знач Показатель) Экспорт
	
	Возврат Новый Структура("ИдентификаторСерии, Наименование", 
		Показатель.УникальныйИдентификатор(), Показатель.Показатель.Описание);
		
КонецФункции

Функция НастройкиСглаживания(Знач Показатель) Экспорт
	
	Возврат Новый Структура(
		"Масштаб,АвтоМасштаб, ПоказыватьТренд, КоличествоУсредняемыхЗначений, ТипСглаживания",
		Показатель.Масштаб,
		Показатель.АвтоМасштаб,
		Показатель.ПоказыватьТренд,
		Показатель.КоличествоУсредняемыхЗначений,
		Показатель.ТипСглаживания
	);
	
КонецФункции

Процедура ОбъединитьСтарыеЗамерыИЗамерыСдвига(Знач ТекущиеЗначения, Знач НовыеЗначения, Знач СдвигВправо)
	ЧислоНовыхДанных = НовыеЗначения.Количество();
	
	НомерЭлементаДанных = 0;
	Пока НомерЭлементаДанных < ЧислоНовыхДанных Цикл
		НовоеЗначение = НовыеЗначения[НомерЭлементаДанных];
		Если СдвигВправо И ТекущиеЗначения.Количество() > 0 Тогда
			Если ТипЗнч(НовоеЗначение) = Тип("Структура") И НовоеЗначение.Свойство("ДанныхНет") Тогда
				НовоеЗначение.Среднее = ТекущиеЗначения[ТекущиеЗначения.ВГраница()].Среднее;
			ИначеЕсли НовоеЗначение = Неопределено Тогда
				НовоеЗначение = ТекущиеЗначения[ТекущиеЗначения.ВГраница()];
			КонецЕсли;
			
			ТекущиеЗначения.Добавить(НовоеЗначение);
		Иначе
			ТекущиеЗначения.Вставить(НомерЭлементаДанных, НовоеЗначение);
		КонецЕсли;
		НомерЭлементаДанных = НомерЭлементаДанных + 1;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаписатьСтатистику(Дата, ИБ, ИзмененоОбъектов, СозданоОбъектов, СформированоОтчетов, ПроведеноДокументов)
	
	Если ИзмененоОбъектов = 0 И СозданоОбъектов = 0 И СформированоОтчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	ЗаписьСтатистики = РегистрыСведений.СтатистикаПоИнформационнымБазам.СоздатьМенеджерЗаписи();
	ЗаписьСтатистики.ИнформационнаяБаза = ИБ;
	ЗаписьСтатистики.Дата = Дата;
				
	ЗаписьСтатистики.ИзмененоОбъектов = ИзмененоОбъектов;
	ЗаписьСтатистики.СозданоОбъектов = СозданоОбъектов;
	ЗаписьСтатистики.СформированоОтчетов = СформированоОтчетов;
	ЗаписьСтатистики.ПроведеноДокументов = ПроведеноДокументов;
	ЗаписьСтатистики.Записать(Истина);
	
КонецПроцедуры

// Префикс поля "Данные", формируемого для отчетов, выполняемых в фоне
// Используется для формирования отбора по полу "Данные" журнала регистрации
//
// Возвращаемое значение:
// Строка
//
Функция ПрефиксыСобытияФоновыхОтчетов()
	
	Префиксы = Новый Массив;
	Префиксы.Добавить(НСтр("ru = 'Выполнение отчета'") + ": ");
	Префиксы.Добавить(НСтр("ru = 'Варианты отчетов: Формирование отчета'"));
	Возврат Префиксы; 
	
КонецФункции

Функция ДатаСобытияЖурналаРегистрации(ДатаСобытия)
	Если ТипЗнч(ДатаСобытия) = Тип("Дата") Тогда
		Возврат ДатаСобытия;
	Иначе			
		ДатаСобытия = СтрЗаменить(ДатаСобытия, "T", "");
		ДатаСобытия = СтрЗаменить(ДатаСобытия, "-", "");
		ДатаСобытия = СтрЗаменить(ДатаСобытия, ":", "");
	    Возврат Дата(ДатаСобытия);
	КонецЕсли;
КонецФункции

// Формирует новый источник инцидентов ЦКК на основе показателя мониторинга
//
// Параметры:
//  ПоказательМониторинга - Массив элементов СправочникСсылка.ПоказателиМониторинга
//
// Возвращаемое значение:
//  СправочникСсылка.ИсточникИнцидентовЦКК, Неопределено
//
Функция СоздатьИсточникИнцидентовЦКК(Знач ПоказательМониторинга) Экспорт
	
	ДанныеЗаполнения = Новый Массив;
	
	Результат = Справочники.ОбнаружениеИнцидентов.СоздатьЭлемент();
	Результат.УстановитьСсылкуНового(Справочники.ОбнаружениеИнцидентов.ПолучитьСсылку());
			
	Для Каждого ТекПоказатель Из ПоказательМониторинга Цикл
		НовыйПоказательИнцидента = Справочники.ПоказателиИнцидентов.СоздатьЭлемент();
		НовыйПоказательИнцидента.Заполнить(ТекПоказатель);
		НовыйПоказательИнцидента.Владелец = Результат.ПолучитьСсылкуНового();
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказательИнцидента);
		
		ПоказательРезультат = Новый Соответствие;
		ПоказательРезультат.Вставить("СсылкаПоказательИнцидента", НовыйПоказательИнцидента.ПолучитьСсылкуНового());
		ПоказательРезультат.Вставить("ПоказательИнцидентаXML", Поток.Закрыть());
		
		НовыйПоказатель = ТекПоказатель.Показатель.Скопировать();
		НовыйПоказатель.Владелец = НовыйПоказательИнцидента.ПолучитьСсылкуНового();
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательРезультат.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательРезультат);
		ДанныеЗаполнения.Добавить(Поток.Закрыть());
		
	КонецЦикла;
		
	Возврат ДанныеЗаполнения;
		
	
КонецФункции

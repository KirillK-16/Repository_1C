
#Область ПрограммныйИнтерфейс

// Определяет исполнительскую роль, ответственную за настройку контрольной процедуры 
//
// Параметры:
//  ОбъектКонтроля - СправочникСсылка.ОбъектыКонтроля
//  ВидКонтрольнойПроцедуры - СправочникСсылка.ВидыКонтрольныхПроцедур
//  
// Возвращаемое значение:
//  СправочникСсылка.РолиПользователей
//
Функция ТекущийОтветственныйЗаНастройку(ОбъектКонтроля, ВидКонтрольнойПроцедуры) Экспорт
	РезультатЗапроса = РегистрыСведений.ОтветственныеЗаНастройкуПроцедур.Получить(
		Новый Структура("ОбъектКонтроля, ВидКонтрольнойПроцедуры", ОбъектКонтроля, ВидКонтрольнойПроцедуры)
	);
	Возврат РезультатЗапроса.РольПользователя;	
КонецФункции

// Выборка из регистра сведений СхемаАдресацииЗадач
// 
// Параметры:
//  Фильтр - Структура
//  
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
//
Функция ВыборкаИзСхемыАдресации(Фильтр) Экспорт
	Запрос = Новый Запрос;

	ЗапросТекст = 
	"ВЫБРАТЬ
	|	Схема.ТипИсполнителя КАК ТипИсполнителя,
	|	Схема.КонтрольнаяПроцедура КАК КонтрольнаяПроцедура,
	|	Схема.РольПользователя КАК РольПользователя
	|ИЗ
	|	РегистрСведений.СхемаАдресацииЗадач КАК Схема ";
	ЗапросТекст = ЗапросТекст + Общий.ТекстУсловияЗапроса(Запрос, Фильтр, "Схема");
	Запрос.Текст = ЗапросТекст;
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция НазванияВнешнихФормДляВидаПроцедуры(ВидПроцедуры, ТипЗадачи) Экспорт
	
	СписокКартПоЗадачам = РасширяемыеПараметрыЯдра.НазванияВнешнихФормДляВсехВидовПроцедур();
	КартаПоЗадачам = СписокКартПоЗадачам.Свойство(ВидПроцедуры.ИмяБизнесПроцесса);
	Если СписокКартПоЗадачам.Свойство(ВидПроцедуры.ИмяБизнесПроцесса) Тогда
		КартаПоЗадачам = СписокКартПоЗадачам[ВидПроцедуры.ИмяБизнесПроцесса];
		Формы = КартаПоЗадачам.Получить(ТипЗадачи);
		Если Формы <> Неопределено Тогда
			Возврат Формы;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Соответствие;
	
КонецФункции

// Определяет исполнительскую роль, ответственную за настройку контрольной процедуры 
//
// Параметры:
//  ОбъектКонтроля - СправочникСсылка.ОбъектыКонтроля
//  ВидКонтрольнойПроцедуры - СправочникСсылка.ВидыКонтрольныхПроцедур
//  
// Возвращаемое значение:
//  СправочникСсылка.РолиПользователей
//
Процедура НазначитьОтветственного(РольПользователя, КонтрольнаяПроцедура, ТипИсполнителя) Экспорт
	МенеджерЗаписи = РегистрыСведений.СхемаАдресацииЗадач.СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.ТипИсполнителя = ТипИсполнителя;	
	МенеджерЗаписи.РольПользователя = РольПользователя;
	МенеджерЗаписи.КонтрольнаяПроцедура = КонтрольнаяПроцедура;
	МенеджерЗаписи.Записать();
КонецПроцедуры

// Определяет исполнительскую роль, ответственную за настройку контрольной процедуры 
//
// Параметры:
//  ОбъектКонтроля - СправочникСсылка.ОбъектыКонтроля
//  ВидКонтрольнойПроцедуры - СправочникСсылка.ВидыКонтрольныхПроцедур
//  
// Возвращаемое значение:
//  СправочникСсылка.РолиПользователей
//
Процедура НазначитьОтветственногоЗаНастройкуПроцедуры(ОбъектКонтроля, ВидПроцедуры, РольПользователя) Экспорт
	МенеджерЗаписи = РегистрыСведений.ОтветственныеЗаНастройкуПроцедур.СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.ОбъектКонтроля = ОбъектКонтроля;	
	МенеджерЗаписи.РольПользователя = РольПользователя;
	МенеджерЗаписи.ВидКонтрольнойПроцедуры = ВидПроцедуры;
	МенеджерЗаписи.Записать();
КонецПроцедуры

// Выборка пользователей и соответствующих ролей 
//
// Параметры:
//  Фильтр - структура
//  
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
//
Функция ВыборкаРолейПользователей(Фильтр) Экспорт
	Запрос = Новый Запрос;

	ЗапросТекст = 
	"ВЫБРАТЬ
	|	ПривязкаКРолям.Пользователь КАК Пользователь,
	|	ПривязкаКРолям.Роль КАК Роль
	|ИЗ
	|	РегистрСведений.СвязьПользовательРоль КАК ПривязкаКРолям ";
	ЗапросТекст = ЗапросТекст + Общий.ТекстУсловияЗапроса(Запрос, Фильтр, "ПривязкаКРолям");			
	Запрос.Текст = ЗапросТекст;  	
	Возврат Запрос.Выполнить().Выбрать();		
	
КонецФункции

// Добавить пользователя в исполнительскую роль
//
// Параметры:
//  ПользовательСсылка - СправочникСсылка.Пользователи
//  РольСсылка - СправочникСсылка.РолиПользователей
//
Процедура СвязатьПользователяИРоль(ПользовательСсылка, РольСсылка) Экспорт
	ПривязкаКРоли = РегистрыСведений.СвязьПользовательРоль.СоздатьМенеджерЗаписи();
	ПривязкаКРоли.Пользователь = ПользовательСсылка;
	ПривязкаКРоли.Роль = РольСсылка;
	ПривязкаКРоли.Записать(Истина);	
КонецПроцедуры

Процедура ДобавитьКлючВПараметрыОткрытияЗадачи(ЗадачаСсылка) Экспорт
	
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	ПараметрОткрытия = ЗадачаОбъект.ПараметрыОткрытияФормы.Добавить();
	ПараметрОткрытия.ИмяПараметра = "Ключ";
	ПараметрОткрытия.Значение = ЗадачаОбъект.Ссылка;
	ЗадачаОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти


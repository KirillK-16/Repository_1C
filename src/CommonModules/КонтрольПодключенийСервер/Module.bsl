
#Область ПрограммныйИнтерфейс

// Стандартная функция, выполняемая при обновлении информационной базы
//
Процедура ПриОбновлении(ТекущаяВерсия, СохраненнаяВерсия) Экспорт
	
	Если СохраненнаяВерсия <= "2.0.8.11" И ТекущаяВерсия > "2.0.8.11" Тогда
		
		// Удалить дубли записей состояниях
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ДоступностьИнформационныхБаз.Период КАК Период,
		|	ДоступностьИнформационныхБаз.ИнформационнаяБаза,
		|	ДоступностьИнформационныхБаз.Доступность
		|ИЗ
		|	РегистрСведений.ДоступностьИнформационныхБаз КАК ДоступностьИнформационныхБаз
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ТекущиеСостояния = Новый Соответствие;
		НаборБезДублей = РегистрыСведений.ДоступностьИнформационныхБаз.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ИБ = Выборка.ИнформационнаяБаза;
			Состояние = Выборка.Доступность;
			Период = Выборка.Период;
			
			ТекущееСостояние = ТекущиеСостояния.Получить(ИБ);
			
			Если ТекущееСостояние = Неопределено И Состояние = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущееСостояние <> Состояние Тогда
				НоваяЗапись = НаборБезДублей.Добавить();
				НоваяЗапись.ИнформационнаяБаза = ИБ;
				НоваяЗапись.Доступность = Состояние;
				НоваяЗапись.Период = Период;
				ТекущиеСостояния.Вставить(ИБ, Состояние);
			КонецЕсли;
			
		КонецЦикла;
		НаборБезДублей.Записать();
	КонецЕсли;
КонецПроцедуры

// Записывает состояние информационной базы: доступна / недоступна
// 
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ОбъектыКонтроля
//  Доступность - Число - 1 или 0
//
Процедура ЗаписатьДанныеОДоступности(ИнформационнаяБаза, Параметры) Экспорт
    
    Доступность = Параметры.Доступность;
    
    ДополнительнаяИнформация = Неопределено;
    Параметры.Свойство("ДополнительнаяИнформация", ДополнительнаяИнформация);
    
    Источник = Неопределено;
    Если НЕ Параметры.Свойство("Источник", Источник) Тогда
        Источник = Справочники.ОбъектыКонтроля.ЦентрКонтроляКачества();
    КонецЕсли;
    
    Период = Неопределено;
    Если НЕ Параметры.Свойство("Период", Период) Тогда
        Период = ТекущаяДата();
    КонецЕсли;
        
	Отбор = Новый Структура("ИнформационнаяБаза, Источник", ИнформационнаяБаза, Источник);
	АктуальноеСостояние = РегистрыСведений.ДоступностьИнформационныхБаз.СрезПоследних(Период, Отбор);
	
	Если АктуальноеСостояние.Количество() <> 0 И АктуальноеСостояние[0].Доступность = Доступность Тогда
		// дублировать состояние не требуется
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.ДоступностьИнформационныхБаз.СоздатьМенеджерЗаписи();
    Запись.Период = Период;
    Запись.ИнформационнаяБаза = ИнформационнаяБаза;
    Запись.Источник = Источник;
	Запись.Доступность = Доступность;
	Запись.ДополнительнаяИнформация = ДополнительнаяИнформация;
	Запись.Записать();
	
КонецПроцедуры

// Записывает состояние ресурса: доступна / недоступна
// 
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ОбъектыКонтроля
//  Доступность - Число - 1 или 0
//
Процедура ЗаписатьДанныеОДоступностиРесурса(Ресурс, Доступность) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	АктуальноеСостояние = РегистрыСведений.ДоступностьСайта.СрезПоследних(
		ТекущаяДата,
		Новый Структура("Ресурс", Ресурс)
	);
	
	Если АктуальноеСостояние.Количество() = 0 И Доступность = Ложь Тогда
		// дублировать состояние не требуется
		Возврат;
	КонецЕсли;
	
	Если АктуальноеСостояние.Количество() <> 0 И АктуальноеСостояние[0].Доступность = Доступность Тогда
		// дублировать состояние не требуется
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.ДоступностьСайта.СоздатьМенеджерЗаписи();
	Запись.Доступность = Доступность;
	Запись.Ресурс = Ресурс;
	Запись.Период = ТекущаяДата;
	Запись.Записать();
	
КонецПроцедуры

// Делает запрос на выборку состояний за период от ДатаНачала до ДатаОкончания по 
// информационным базам из ИнформационныеБазы
//
// ВАЖНО!!! Если в функция используется в показателе и при этом 
// в показателе используется режим смещения, то
// корректировку дат нужно выполнять до вызова функции.
// 
// Параметры:
//  ДатаНачала - Дата
//  ДатаОкончания - Дата
//  ИнформационныеБазы - Массив объектов типа СправочникСсылка.ОбъектыКонтроля
//
// Возвращаемое значение:
//   Структура
//
Функция ВыборкаСостоянийЗаПериод(Знач ДатаНачала, Знач ДатаОкончания, Знач ИнформационныеБазы) Экспорт
	
	Запрос = Новый Запрос;
	
	ЗапросТекст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъединенныйЗапрос.Время КАК Время,
	|	ОбъединенныйЗапрос.ТекущееЗначение КАК ТекущееЗначение,
	|	ОбъединенныйЗапрос.ИнформационнаяБаза КАК ИнформационнаяБаза
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновнаяТаблицаЗамеров.Период КАК Время,
	|		ОсновнаяТаблицаЗамеров.Доступность КАК ТекущееЗначение,
	|		ОсновнаяТаблицаЗамеров.ИнформационнаяБаза КАК ИнформационнаяБаза
	|	ИЗ
	|		РегистрСведений.ДоступностьИнформационныхБаз КАК ОсновнаяТаблицаЗамеров
	|	ГДЕ
	|		ОсновнаяТаблицаЗамеров.ИнформационнаяБаза В(&Базы)
	|		И ОсновнаяТаблицаЗамеров.Период > &ДатаНачала
	|		И ОсновнаяТаблицаЗамеров.Период <= &ДатаОкончания
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ДатаНачала,
	|		ДоступностьИнформационныхБазСрезПоследних.Доступность,
	|		ДоступностьИнформационныхБазСрезПоследних.ИнформационнаяБаза
	|	ИЗ
	|		РегистрСведений.ДоступностьИнформационныхБаз.СрезПоследних(&ДатаНачала, ИнформационнаяБаза В (&Базы)) КАК ДоступностьИнформационныхБазСрезПоследних) КАК ОбъединенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнформационнаяБаза,
    |	Время
	|";
	
	// Словарь числа пользователей по базам
	БазаЧислоПользователей = Новый Соответствие;
	
	Для Каждого База Из ИнформационныеБазы Цикл
		НастройкиОбъектаСловарь = РегистрыСведений.ПараметрыИнформационныхБаз.Получить(
			Новый Структура("ОбъектКонтроля", База)
		);
		ЧислоПользователей = Неопределено;
		БазаЧислоПользователей.Вставить(База, ЧислоПользователей);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Базы", ИнформационныеБазы);
	
	// Дописываем в запрос подзапросы на начальные значения
	ВложенныеЗапросы = "";
	БазаВес = Новый Соответствие;
	НомерБазы = 1;
	КоличествоБаз = ИнформационныеБазы.Количество();
	Для Каждого ДанныеПоБазе Из БазаЧислоПользователей Цикл
		База = ДанныеПоБазе.Ключ;
		Вес = 1 / КоличествоБаз;
		БазаВес.Вставить(База, Вес);
	КонецЦикла;
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%ВложенныеЗапросы", ВложенныеЗапросы);
	Запрос.Текст = ЗапросТекст;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	
	Возврат Новый Структура(
		"ВыборкаСостояний, ВесаИнформационныхБаз, Результат", 
		Результат.Выбрать(),
		БазаВес,
		Результат
	);

КонецФункции

// Делает запрос на выборку состояний за период от ДатаНачала до ДатаОкончания по 
// информационным базам из ИнформационныеБазы
//
// ВАЖНО!!! Если функция используется в показателе и при этом 
// в показателе используется режим смещения, то
// корректировку дат нужно выполнять до вызова функции.
// 
// Параметры:
//  ДатаНачала - Дата
//  ДатаОкончания - Дата
//  ИнформационныеБазы - Массив объектов типа СправочникСсылка.ОбъектыКонтроля
//
// Возвращаемое значение:
//   Структура
//
Функция ВыборкаСостоянийРесурсовЗаПериод(Знач ДатаНачала, Знач ДатаОкончания, Знач Ресурсы) Экспорт
	
	Запрос = Новый Запрос;
	
	ЗапросТекст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъединенныйЗапрос.Время КАК Время,
	|	ОбъединенныйЗапрос.ТекущееЗначение КАК ТекущееЗначение,
	|	ОбъединенныйЗапрос.Ресурс КАК Ресурс
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновнаяТаблицаЗамеров.Период КАК Время,
	|		ОсновнаяТаблицаЗамеров.Доступность КАК ТекущееЗначение,
	|		ОсновнаяТаблицаЗамеров.Ресурс КАК Ресурс
	|	ИЗ
	|		РегистрСведений.ДоступностьСайта КАК ОсновнаяТаблицаЗамеров
	|	ГДЕ
	|		ОсновнаяТаблицаЗамеров.Ресурс В(&Ресурсы)
	|		И ОсновнаяТаблицаЗамеров.Период > &ДатаНачала
	|		И ОсновнаяТаблицаЗамеров.Период <= &ДатаОкончания
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоступностьСайтаСрезПоследних.Период,
	|		ДоступностьСайтаСрезПоследних.Доступность,
	|		ДоступностьСайтаСрезПоследних.Ресурс
	|	ИЗ
	|		РегистрСведений.ДоступностьСайта.СрезПоследних(&ДатаНачала, Ресурс В (&Ресурсы)) КАК ДоступностьСайтаСрезПоследних) КАК ОбъединенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Время";
	
	ШаблонЗапросаПоследнейЗаписи = "ВЫБРАТЬ
	|	ВложенныйЗапрос%НомерБазы.Время КАК Время,
	|	ВложенныйЗапрос%НомерБазы.ТекущееЗначение КАК ТекущееЗначение,
	|	ВложенныйЗапрос%НомерБазы.Ресурс КАК Ресурс
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОсновнаяТаблицаЗамеров.Период КАК Время,
	|		ОсновнаяТаблицаЗамеров.Доступность КАК ТекущееЗначение,
	|		ОсновнаяТаблицаЗамеров.Ресурс КАК Ресурс
	|	ИЗ
	|		РегистрСведений.ДоступностьСайта КАК ОсновнаяТаблицаЗамеров
	|	ГДЕ
	|		ОсновнаяТаблицаЗамеров.Ресурс = &Ресурс%НомерРесурса
	|		И ОсновнаяТаблицаЗамеров.Период <= &ДатаНачала
	|		
	|	УПОРЯДОЧИТЬ ПО
	|		Период УБЫВ
	|	) КАК ВложенныйЗапрос%НомерРесурса ГДЕ ВложенныйЗапрос%НомерРесурса.ТекущееЗначение = 1";
	
	//Рассчитываем число пользователей в каждой из баз
	БазаЧислоПользователей = Новый Соответствие; // Словарь числа пользователей по базам
	//ОбщееЧислоПользователей = 0;
	
	Запрос.УстановитьПараметр("Ресурсы", Ресурсы);
	
	// Дописываем в запрос подзапросы на начальные значения
	ВложенныеЗапросы = "";
	РесурсВес = Новый Соответствие;
	НомерРесурса = 1;
	КоличествоРесурсов = Ресурсы.Количество();
	Для Каждого ДанныеПоРесурсу Из БазаЧислоПользователей Цикл
		Ресурс = ДанныеПоРесурсу.Ключ;
		Вес = 1 / КоличествоРесурсов;
		РесурсВес.Вставить(Ресурс, Вес);
		НомерВСтроку = Формат(НомерРесурса, "ЧГ='100,0';ЧН=");
		
		Запрос.УстановитьПараметр("Ресурс" + НомерВСтроку, Ресурс);
		
		ВложенныйЗапрос = ШаблонЗапросаПоследнейЗаписи;
		ВложенныйЗапрос = СтрЗаменить(ШаблонЗапросаПоследнейЗаписи, "%НомерРесурса", НомерВСтроку);
		ВложенныеЗапросы = ВложенныеЗапросы + " ОБЪЕДИНИТЬ ВСЕ " + ВложенныйЗапрос;
		
		НомерРесурса = НомерРесурса + 1;
	КонецЦикла;
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%ВложенныеЗапросы", ВложенныеЗапросы);
	Запрос.Текст = ЗапросТекст;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Возврат Новый Структура(
		"ВыборкаСостояний, ВесаРесурсов", 
		Запрос.Выполнить().Выбрать(),
		РесурсВес
	);

КонецФункции

#КонецОбласти

#Область Регламентное_задание_КонтрольПодключений

Функция КонтрольПодключенийВыполнить() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
    
	Настройки = ПолучитьНастройки();
		
	Для Каждого ТекНастройка Из Настройки Цикл
		КлючЗадания = ТекНастройка.КлючЗадания;
		Отбор = Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно);
		
		ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
			ПараметрыМассив = Новый Массив;
			ПараметрыМассив.Добавить(ТекНастройка);
			
			ФоновыеЗадания.Выполнить("КонтрольПодключенийСервер.КонтрольПодключенияСтарт", ПараметрыМассив, КлючЗадания, ТекНастройка.КонтрольнаяПроцедура);
            КипВнешнийКомпонент.Пауза(100);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция КонтрольПодключенияСтарт(Параметры) Экспорт
	
	СобиратьДанные = Истина;
	Успешно = Истина;
	Соединение = Неопределено;
	ПРОБЛЕМ_НЕТ = "Проблем нет";
	ПРОБЛЕМЫ_ЕСТЬ = "Проблемы есть";
    
    ЦентрКонтроляКачества = Справочники.ОбъектыКонтроля.ЦентрКонтроляКачества();
    Параметры.Вставить("Источник", ЦентрКонтроляКачества);
    
	Попытка
		Соединение = ПолучитьСоединение(Параметры);
	Исключение
		Соединение = Неопределено;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьРезультатПодключения(Параметры, Ложь, ПРОБЛЕМЫ_ЕСТЬ, ОписаниеОшибки);
	КонецПопытки;
            
	ДатаНачала = Формат(ТекущаяДата(), "ДФ=ггггММддЧЧмм");
	Пока СобиратьДанные Цикл
		Если Соединение <> Неопределено Тогда
			Ответ = Соединиться(Соединение, Параметры);
		Иначе
			Ответ = Новый Структура("Успешно, Результат, Описание");
			Ответ.Успешно = Ложь;
			Ответ.Результат = ПРОБЛЕМЫ_ЕСТЬ;
			Ответ.Описание = ОписаниеОшибки;
		КонецЕсли;
		
		ЗаписатьРезультатПодключения(Параметры, Ответ.Успешно, Ответ.Результат, Ответ.Описание);
				
		КипВнешнийКомпонент.Пауза(10000);
				
		ТекДата = Формат(ТекущаяДата(), "ДФ=ггггММддЧЧмм");
		Если ТекДата > ДатаНачала ИЛИ Соединение = Неопределено Тогда
			ДатаНачала = ТекДата;
                       
            ЗаписатьДлительностьПодключения(Параметры);
            
			Настройки = ПолучитьНастройки(Параметры.КонтрольнаяПроцедура);
			Если Настройки.Количество() = 0 Тогда
				СобиратьДанные = Ложь;
			Иначе
				НовПараметры = Настройки[0];
				Если НовПараметры.ВерсияДанных <> Параметры.ВерсияДанных ИЛИ Соединение = Неопределено Тогда
					Параметры = НовПараметры;
                    Параметры.Вставить("Источник", ЦентрКонтроляКачества);
					СобиратьДанные = Параметры.Выполнять И НЕ Параметры.Пауза;
					
					Если СобиратьДанные Тогда
						Попытка
							Соединение = ПолучитьСоединение(Параметры);
						Исключение
							Соединение = Неопределено;
							ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							ЗаписатьРезультатПодключения(Параметры, Ложь, ПРОБЛЕМЫ_ЕСТЬ, ОписаниеОшибки);
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
    КонецЦикла;
    
    ЗакрытьИнцидентПоПроценту(Параметры, "Закрыт по причине прекращения контроля.");
    
	
КонецФункции

Процедура ЗаписатьДлительностьПодключения(Параметры)
    
    Замеры = Параметры.ДлительностьПодключения;
    
    Если Замеры.Количество() > 0 Тогда 
        СуммаЗамеров = 0;
        ЧислоСрабатываний = 0;
        МинимальноеЗначение = Неопределено;
        МаксимальноеЗначение = Неопределено;
        
        Для Каждого ТекЗамер Из Замеры Цикл
            
            СуммаЗамеров = СуммаЗамеров + ТекЗамер;
            ЧислоСрабатываний = ЧислоСрабатываний + 1;
            Если МинимальноеЗначение = Неопределено ИЛИ МинимальноеЗначение > ТекЗамер Тогда
                МинимальноеЗначение = ТекЗамер;
            КонецЕсли;
            Если МаксимальноеЗначение = Неопределено ИЛИ МаксимальноеЗначение < ТекЗамер Тогда
                МаксимальноеЗначение = ТекЗамер;
            КонецЕсли;
            
        КонецЦикла;
        
        Данные = Новый Массив;
        ЭлементДанных = Новый Соответствие;
        
        ИмяСчетчикаМассив = Новый Массив;
        ИмяСчетчикаМассив.Добавить("Длительность подключения");
        ИмяСчетчикаМассив.Добавить("Контроль подключений");
        ИмяСчетчикаМассив.Добавить(Строка(Параметры.ИнформационнаяБаза) + ", мс.");
        
        ЭлементДанных.Вставить("name", ИмяСчетчикаМассив);
        ЭлементДанных.Вставить("counter", ЧислоСрабатываний);
        ЭлементДанных.Вставить("min", Окр(МинимальноеЗначение, 5));
        ЭлементДанных.Вставить("max", Окр(МаксимальноеЗначение, 5));
        ЭлементДанных.Вставить("avg", Окр(СуммаЗамеров/ЧислоСрабатываний, 5)); 
        
        Данные.Добавить(ЭлементДанных);
        
        ЗаписьJSON = Новый ЗаписьJSON();
	    ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	    ЗаписатьJSON(ЗаписьJSON, Данные);
	    ДанныеJSON = ЗаписьJSON.Закрыть();
        
        РегистрыСведений.СтатистикаБуфер.ДобавитьДанные(ДанныеJSON);
        
    КонецЕсли;
    
    Замеры.Очистить();
    
КонецПроцедуры

Функция КонтрольПодключенияТестНастроек(КонтрольнаяПроцедураСсылка) Экспорт
	ПРОБЛЕМЫ_ЕСТЬ = "Проблемы есть";
	
	Настройки = ПолучитьНастройки(КонтрольнаяПроцедураСсылка, Истина);
	
	Если Настройки.Количество() = 1 Тогда
		Параметры = Настройки[0];
		
		Если Параметры.СпособПодключения = Перечисления.МеханизмыПроверкиПодключения.COMСоединитель И НЕ ЗначениеЗаполнено(Параметры.ВерсияПлатформы) Тогда
			ВызватьИсключение "Не указана версия платформы для кластера " + Параметры.Кластер + ".
			|Укажите версию платформы в настройках кластера.";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.СпособПодключения) Тогда
			ВызватьИсключение "Не указан способ подключения к информационной базе.";
		КонецЕсли;
						
		Попытка
			Соединение = ПолучитьСоединение(Параметры);
			Ответ = Соединиться(Соединение, Параметры);
		Исключение
			Ответ = Новый Структура("Успешно, Результат, Описание");
			Ответ.Успешно = Ложь;
			Ответ.Результат = ПРОБЛЕМЫ_ЕСТЬ;
			Ответ.Описание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	Иначе
		Ответ = Новый Структура("Успешно, Результат, Описание");
		Ответ.Успешно = Ложь;
		Ответ.Результат = ПРОБЛЕМЫ_ЕСТЬ;
		Ответ.Описание = "Не найдены настройки!";
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Процедура ЗаписатьРезультатПодключения(Параметры, Успешно, Результат, Описание)
    
    Общий.ЗаписатьВЖурналКонтроля(Параметры.КонтрольнаяПроцедура, Результат, Описание);
    ПровестиАнализДоступности(Параметры);
    ИзменитьИнцидент(Параметры);
    
    ПараметрыДоступности = Новый Структура("Доступность, ДополнительнаяИнформация", ?(Успешно,1,0), Описание);
       
    ЗаписатьДанныеОДоступности(Параметры.ИнформационнаяБаза, ПараметрыДоступности);
	ЗаписатьТекущееСостояние(Параметры, Успешно);
	ЗаписатьСостояниеКонтрольнойПроцедуры(Параметры, Успешно);
    
    Параметры.ТекущийПроцентДоступности = -1;
    
КонецПроцедуры

Процедура ПровестиАнализДоступности(Параметры) Экспорт
    
    Если Параметры.Свойство("ТекущаяДата") Тогда
        ТекДата = Параметры.ТекущаяДата;
    Иначе
        ТекДата = ТекущаяДата();
    КонецЕсли;
    
    ДатаНачала = ТекДата - Параметры.ПериодКонтроля;
    ДатаОкончания = ТекДата;
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ЕСТЬNULL(МИНИМУМ(ДатаЗаписи), ДАТАВРЕМЯ(1,1,1)) КАК Период
    |ИЗ
    |   РегистрСведений.ЖурналКонтроля КАК ЖурналКонтроля
    |ГДЕ
    |   ЖурналКонтроля.КонтрольнаяПроцедура = &КонтрольнаяПроцедура
    |   И ЖурналКонтроля.ОбъектКонтроля = &ОбъектКонтроля
    |";
    Запрос.УстановитьПараметр("КонтрольнаяПроцедура", Параметры.КонтрольнаяПроцедура);
    Запрос.УстановитьПараметр("ОбъектКонтроля", Параметры.ИнформационнаяБаза);
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Выборка.Следующий();
    Если Выборка.Период > ДатаНачала Тогда
        ДатаНачала = Выборка.Период;
    КонецЕсли;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ЕСТЬNULL(МАКСИМУМ(ДатаЗаписи), ДАТАВРЕМЯ(1,1,1)) КАК Период
    |ИЗ
    |   РегистрСведений.ЖурналКонтроля КАК ЖурналКонтроля
    |ГДЕ
    |   ЖурналКонтроля.КонтрольнаяПроцедура = &КонтрольнаяПроцедура
    |   И ЖурналКонтроля.ОбъектКонтроля = &ОбъектКонтроля
    |   И ЖурналКонтроля.ДатаЗаписи <= &ДатаНачала
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("КонтрольнаяПроцедура", Параметры.КонтрольнаяПроцедура);
    Запрос.УстановитьПараметр("ОбъектКонтроля", Параметры.ИнформационнаяБаза);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Выборка.Следующий();
    ДатаЗаписиПредыдущая = Выборка.Период;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   &ДатаНачала КАК Период,
    |   ВЫБОР 
    |      КОГДА ВЫРАЗИТЬ(ЖурналКонтроля.Результат КАК СТРОКА(11)) = &ПроблемНет Тогда ИСТИНА
    |      КОГДА ВЫРАЗИТЬ(ЖурналКонтроля.Результат КАК СТРОКА(11)) <> &ПроблемНет Тогда ЛОЖЬ
    |   КОНЕЦ КАК Результат
    |ИЗ
    |   РегистрСведений.ЖурналКонтроля КАК ЖурналКонтроля
    |ГДЕ
    |   ЖурналКонтроля.КонтрольнаяПроцедура = &КонтрольнаяПроцедура
    |   И ЖурналКонтроля.ОбъектКонтроля = &ОбъектКонтроля
    |   И ЖурналКонтроля.ДатаЗаписи = &ДатаЗаписиПредыдущая
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   ЖурналКонтроля.ДатаЗаписи,
    |   ВЫБОР 
    |      КОГДА ВЫРАЗИТЬ(ЖурналКонтроля.Результат КАК СТРОКА(11)) = &ПроблемНет Тогда ИСТИНА
    |      КОГДА ВЫРАЗИТЬ(ЖурналКонтроля.Результат КАК СТРОКА(11)) <> &ПроблемНет Тогда ЛОЖЬ
    |   КОНЕЦ
    |ИЗ
    |   РегистрСведений.ЖурналКонтроля КАК ЖурналКонтроля
    |ГДЕ
    |   ЖурналКонтроля.КонтрольнаяПроцедура = &КонтрольнаяПроцедура
    |   И ЖурналКонтроля.ОбъектКонтроля = &ОбъектКонтроля
    |   И ЖурналКонтроля.ДатаЗаписи > &ДатаНачала
    |   И ЖурналКонтроля.ДатаЗаписи <= &ДатаОкончания
    |УПОРЯДОЧИТЬ ПО
    |   Период
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
    Запрос.УстановитьПараметр("ДатаЗаписиПредыдущая", ДатаЗаписиПредыдущая);
    Запрос.УстановитьПараметр("КонтрольнаяПроцедура", Параметры.КонтрольнаяПроцедура);
    Запрос.УстановитьПараметр("ОбъектКонтроля", Параметры.ИнформационнаяБаза);
    Запрос.УстановитьПараметр("ПроблемНет", "Проблем нет");
    
    Результат = Запрос.Выполнить();
    
    ТаблицаПодключений = Результат.Выгрузить();
    ВГраница = ТаблицаПодключений.Количество() - 1;
    Успешно = 0;
    
    Если ВГраница > 0 Тогда
        
        Для ТекИндекс = 1 По ВГраница Цикл
            
            Если ТаблицаПодключений[ТекИндекс].Результат Тогда
                Успешно = Успешно + (ТаблицаПодключений[ТекИндекс].Период - ТаблицаПодключений[ТекИндекс - 1].Период);
            КонецЕсли;
            
        КонецЦикла;
        
    ИначеЕсли ВГраница = 0 Тогда
        
        Если ТаблицаПодключений[0].Результат Тогда
            Успешно = Параметры.ПериодКонтроля;
        КонецЕсли;
    Иначе
        
        Успешно = Неопределено;
        
    КонецЕсли;
    
    Если Успешно <> Неопределено И Параметры.ПериодКонтроля <> 0 Тогда
        Параметры.ТекущийПроцентДоступности = ОКР((Успешно/Параметры.ПериодКонтроля) * 100, 2);
    Иначе
        Параметры.ТекущийПроцентДоступности = -1;
    КонецЕсли;
    
КонецПроцедуры

Процедура ИзменитьИнцидент(Параметры)
    
    Если Параметры.ТекущийПроцентДоступности <> -1 Тогда
        Если Параметры.ТекущийПроцентДоступности < Параметры.МинимальныйПроцентДоступности Тогда
            ОткрытьИнцидентПоПроценту(Параметры, Перечисления.УровниИнцидентов.Ошибка, "ИнфоБаза", "Информационная база не доступна!");
        Иначе
            ЗакрытьИнцидентПоПроценту(Параметры);
        КонецЕсли;
    Иначе
        
        ПараметрыИнцидента = КонтрольПодключенийСервер.ПолучитьПараметрыИнцидента(Параметры.ИнформационнаяБаза, "НетДанных");
        ТипИнцидента = ПараметрыИнцидента.НаименованиеТипаИнцидента;
        ЗакрытьИнцидент(ТипИнцидента, ПараметрыИнцидента.КодИнцидента);
        
    КонецЕсли;
        
КонецПроцедуры

Процедура ОткрытьИнцидентПоРабочемуСерверу(РабочийСервер)
    
    // Тип инцидента "НедоступностьНетДанных"
    НаименованиеТипаИнцидента = "НедоступностьНетДанных";
    ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
    ТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Предупреждение);
    
    // Инцидент "РабочийСервер"
    ХешИнцидентаРабочийСервер = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(РабочийСервер.УникальныйИдентификатор()));
    Инцидент = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидентаРабочийСервер, НаименованиеТипаИнцидента + "/" + РабочийСервер.Наименование, Ложь);
        
    Сообщение = "Нет данных по доступности оборудования!";
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, Инцидент, РабочийСервер.Наименование, "", Сообщение, 1);
        
КонецПроцедуры

Процедура ОткрытьИнцидентПоПубликации(Публикация)
    
    // Тип инцидента "НедоступностьНетДанных"
    НаименованиеТипаИнцидента = "НедоступностьНетДанных";
    ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
    ТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Предупреждение);
    
    // Инцидент "Публикация"
    ХешИнцидентаПубликация = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(Публикация.УникальныйИдентификатор()));
    Инцидент = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидентаПубликация, "Публикация/" + Публикация.Наименование, Ложь);
    
    Сообщение = "Нет данных по контролю публикации!" + Символы.ПС + Публикация.Наименование;
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, Инцидент, Публикация.АдресРесурса,, Сообщение, 1);
    
КонецПроцедуры

Процедура ОткрытьИнцидентПоПроценту(Параметры, УровеньИнцидента, ИмяСобытия, Сообщение)
    
    ПараметрыИнцидента = КонтрольПодключенийСервер.ПолучитьПараметрыИнцидента(Параметры.ИнформационнаяБаза, ИмяСобытия, УровеньИнцидента);
    ПараметрыИнцидента.Вставить("ОбъектЦКК", Параметры.Кластер);
    ПараметрыИнцидента.Вставить("СтрокаПодключения", Параметры.ИнформационнаяБаза);
           
    ТипИнцидента = ПараметрыИнцидента.НаименованиеТипаИнцидента;
    Инцидент = ПараметрыИнцидента.КодИнцидента;
    
    СсылкаНаСчетчикПроизводительности = Справочники.ГруппыСчетчиков.НайтиПоПолномуКоду("Длительность подключения/Контроль подключений/" + Параметры.ИнформационнаяБаза + ", мс");
    Если СсылкаНаСчетчикПроизводительности = Неопределено Тогда
        СсылкаНаСчетчикПроизводительности = "";
    КонецЕсли;
    НавигационнаяСсылкаИсточника = Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(Параметры.КонтрольнаяПроцедура), Строка(Параметры.КонтрольнаяПроцедура));
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, Инцидент, Параметры.ИнформационнаяБаза, ПараметрыИнцидента.ОбъектЦКК, Сообщение, 1,,,,СсылкаНаСчетчикПроизводительности, НавигационнаяСсылкаИсточника);
    
КонецПроцедуры

Процедура ЗакрытьИнцидентПоПроценту(Параметры, Сообщение = Неопределено)
    
    ПараметрыИнцидента = КонтрольПодключенийСервер.ПолучитьПараметрыИнцидента(Параметры.ИнформационнаяБаза, "ИнфоБаза");
    ТипИнцидента = ПараметрыИнцидента.НаименованиеТипаИнцидента;
    ЗакрытьИнцидент(ТипИнцидента, ПараметрыИнцидента.КодИнцидента, Сообщение);
    
    ПараметрыИнцидента = КонтрольПодключенийСервер.ПолучитьПараметрыИнцидента(Параметры.ИнформационнаяБаза, "НетДанных");
    ТипИнцидента = ПараметрыИнцидента.НаименованиеТипаИнцидента;
    ЗакрытьИнцидент(ТипИнцидента, ПараметрыИнцидента.КодИнцидента, Сообщение);
    
КонецПроцедуры

Функция ЗаписатьТекущееСостояние(Параметры, РезультатПодключения)
	
	РегистрыСведений.КонтрольПодключенийТекущееСостояние.ЗаписатьТекущееСостояние(Параметры, РезультатПодключения);
	
КонецФункции

Процедура ЗаписатьСостояниеКонтрольнойПроцедуры(Параметры, Успешно)
	
	МенеджерЗаписи = РегистрыСведений.СостоянияКонтрольныхПроцедур.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КонтрольнаяПроцедура = Параметры.КонтрольнаяПроцедура;
	Если Успешно Тогда
		МенеджерЗаписи.Состояние = Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноПроблемНет;
	Иначе
		МенеджерЗаписи.Состояние = Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноЕстьПроблемы;
	КонецЕсли;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьСоединение(Параметры)
	
	Соединение = Неопределено;
	
	Если Параметры.СпособПодключения = Перечисления.МеханизмыПроверкиПодключения.COMСоединитель Тогда
		Попытка
			Соединение = Общий.ПолучитьComСоединитель(Параметры.ВерсияПлатформы);
		Исключение
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
    ИначеЕсли Параметры.СпособПодключения = Перечисления.МеханизмыПроверкиПодключения.WEBСервис Тогда
        
        Таймаут = Параметры.Таймаут;
        
		URLСервиса = СформироватьАдресWebСервиса(Параметры.URLОпубликованнойИнформационнойБазы);
		Попытка 
			ЗащищенноеСоединение = Неопределено;
			
			Если СтрНачинаетсяС( НРег( URLСервиса ), "https://" ) Тогда
				ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL
			КонецЕсли;

			Если ПустаяСтрока(Параметры.ЛогинПриПодключении) Тогда
				Определения = Новый WSОпределения(URLСервиса,,,,Таймаут,ЗащищенноеСоединение);
			Иначе
				Если ПустаяСтрока(Параметры.ПарольПриПодключении) Тогда
					Определения = Новый WSОпределения(URLСервиса, Параметры.ЛогинПриПодключении,,,Таймаут,ЗащищенноеСоединение);
				Иначе
					Определения = Новый WSОпределения(URLСервиса, Параметры.ЛогинПриПодключении, Параметры.ПарольПриПодключении,,Таймаут,ЗащищенноеСоединение);
				КонецЕсли;
			КонецЕсли;
			
			Прокси = Новый WSПрокси(Определения, "http://www.1c.ru/SSL/RemoteControl_1_0_0_1", "RemoteControl", "RemoteControlSoap",,Таймаут,ЗащищенноеСоединение);
			
			Если НЕ ПустаяСтрока(Параметры.ЛогинПриПодключении) Тогда 
				Прокси.Пользователь = Параметры.ЛогинПриПодключении;
				Если НЕ ПустаяСтрока(Параметры.ПарольПриПодключении) Тогда
					Прокси.Пароль = Параметры.ПарольПриПодключении;
				КонецЕсли;	
			КонецЕсли;
			
			Соединение = Прокси;
		Исключение
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;	
	КонецЕсли;
	
	Возврат Соединение;
КонецФункции

Функция Соединиться(Соединение, Параметры)
	ПРОБЛЕМ_НЕТ = "Проблем нет";
	ПРОБЛЕМЫ_ЕСТЬ = "Проблемы есть";
	
	Ответ = Новый Структура("Успешно, Результат, Описание");
	
	Если Параметры.СпособПодключения = Перечисления.МеханизмыПроверкиПодключения.COMСоединитель Тогда
        Попытка
            НачалоСоединения = ТекущаяУниверсальнаяДатаВМиллисекундах();
			База = Соединение.Connect(Параметры.СтрокаСоединения);
            Параметры.ДлительностьПодключения.Добавить(ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоСоединения);
			База = Неопределено;
			
			Ответ.Успешно = Истина;
			Ответ.Результат = ПРОБЛЕМ_НЕТ;
			Ответ.Описание = "";
	    Исключение
			Ответ.Успешно = Ложь;
			Ответ.Результат = ПРОБЛЕМЫ_ЕСТЬ;
			Ответ.Описание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	ИначеЕсли Параметры.СпособПодключения = Перечисления.МеханизмыПроверкиПодключения.WEBСервис Тогда
        Попытка
            НачалоСоединения = ТекущаяУниверсальнаяДатаВМиллисекундах();
			База = Соединение.GetCurrentState();
            Параметры.ДлительностьПодключения.Добавить(ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоСоединения);
			
			Ответ.Успешно = Истина;
			Ответ.Результат = ПРОБЛЕМ_НЕТ;
			Ответ.Описание = "";
	    Исключение
			Ответ.Успешно = Ложь;
			Ответ.Результат = ПРОБЛЕМЫ_ЕСТЬ;
			Ответ.Описание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;	
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьНастройки(КонтрольнаяПроцедураСсылка = Неопределено, ПолучитьВсе = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СпрКП.Ссылка КАК КонтрольнаяПроцедура,
	|	СпрКП.ВерсияДанных КАК ВерсияДанных,
	|	Настройки.МеханизмПроверкиОбрабатыватьИзменения КАК СпособПодключения,
	|	Настройки.URLОпубликованнойИнформационнойБазы КАК URLОпубликованнойИнформационнойБазы,
	|	Настройки.СтрокаСоединения КАК СтрокаСоединения,
    |   Настройки.ПериодКонтроля,
    |   Настройки.МинимальныйПроцентДоступности,
	|	ВЫБОР Настройки.НеПроверятьПоЖурналуРегистрации
	|		КОГДА ИСТИНА ТОГДА ЛОЖЬ
	|		КОГДА ЛОЖЬ ТОГДА ИСТИНА
	|	КОНЕЦ КАК ПроверятьПоЖурналуРегистрации,
	|	Настройки.Таймаут КАК Таймаут,
	|	ПараметрыКластеров.ВерсияПлатформы КАК ВерсияПлатформы,
	|	СпрКП.ОбъектКонтроля КАК ИнформационнаяБаза,
	|	СпрКП.Выполнять КАК Выполнять,
	|	СпрКП.Пауза КАК Пауза,
	|	ПараметрыИБ.Кластер КАК Кластер
	|ИЗ
	|	Справочник.КонтрольныеПроцедуры КАК СпрКП
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.НастройкиКонтрольПодключений КАК Настройки
	|ПО
	|	Настройки.КонтрольнаяПроцедура = СпрКП.Ссылка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПараметрыИнформационныхБаз КАК ПараметрыИБ
	|ПО
	|	ПараметрыИБ.ОбъектКонтроля = СпрКП.ОбъектКонтроля
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПараметрыКластеров КАК ПараметрыКластеров
	|ПО
	|	ПараметрыКластеров.ОбъектКонтроля = ПараметрыИБ.Кластер
	|ГДЕ
	|	СпрКП.Владелец = &КонтрольПодключений
	|	{И СпрКП.Выполнять = Истина
	|	И СпрКП.Пауза = Ложь}
	|	{И СпрКП.Ссылка = &КонтрольнаяПроцедура}
	|";
	
	Если ПолучитьВсе Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И СпрКП.Выполнять = Истина
		|	И СпрКП.Пауза = Ложь}", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И СпрКП.Выполнять = Истина
		|	И СпрКП.Пауза = Ложь}", "И СпрКП.Выполнять = Истина
		|	И СпрКП.Пауза = Ложь");
	КонецЕсли;
		
	Если КонтрольнаяПроцедураСсылка = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И СпрКП.Ссылка = &КонтрольнаяПроцедура}", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И СпрКП.Ссылка = &КонтрольнаяПроцедура}", "И СпрКП.Ссылка = &КонтрольнаяПроцедура");		
		Запрос.УстановитьПараметр("КонтрольнаяПроцедура", КонтрольнаяПроцедураСсылка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонтрольПодключений", Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль подключений"));
	
	Результат = Запрос.Выполнить();
	
	ПараметрыМассив = Новый Массив;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		КлючЗадания = Выборка.КонтрольнаяПроцедура.УникальныйИдентификатор();
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеХранилища = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(Выборка.КонтрольнаяПроцедура);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДанныеХранилища = Неопределено Тогда
			ДанныеХранилища = Новый Структура("ЛогинПриПодключении, ПарольПриПодключении", "", "");
		КонецЕсли;
				
		Параметры = Новый Структура;
		Параметры.Вставить("КлючЗадания", КлючЗадания);
		Параметры.Вставить("КонтрольнаяПроцедура", Выборка.КонтрольнаяПроцедура);
		Параметры.Вставить("ВерсияДанных", Выборка.ВерсияДанных);
		Параметры.Вставить("СпособПодключения", Выборка.СпособПодключения);
		Параметры.Вставить("URLОпубликованнойИнформационнойБазы", Выборка.URLОпубликованнойИнформационнойБазы);
		Параметры.Вставить("ЛогинПриПодключении", ДанныеХранилища.ЛогинПриПодключении);
		Параметры.Вставить("ПарольПриПодключении", ДанныеХранилища.ПарольПриПодключении);
		Параметры.Вставить("СтрокаСоединения", Выборка.СтрокаСоединения);
		Параметры.Вставить("ПроверятьПоЖурналуРегистрации", Выборка.ПроверятьПоЖурналуРегистрации);
		Параметры.Вставить("Таймаут", Выборка.Таймаут);
        Параметры.Вставить("ПериодКонтроля", Выборка.ПериодКонтроля);
        Параметры.Вставить("МинимальныйПроцентДоступности", Выборка.МинимальныйПроцентДоступности);
        Параметры.Вставить("ТекущийПроцентДоступности", -1);
		Параметры.Вставить("ВерсияПлатформы", Выборка.ВерсияПлатформы);
		Параметры.Вставить("ИнформационнаяБаза", Выборка.ИнформационнаяБаза);
		Параметры.Вставить("Выполнять", Выборка.Выполнять);
		Параметры.Вставить("Пауза", Выборка.Пауза);
		Параметры.Вставить("Кластер", Выборка.Кластер);
        Параметры.Вставить("ДлительностьПодключения", Новый Массив);
		
		ПараметрыМассив.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат ПараметрыМассив;
	
КонецФункции

Функция СформироватьАдресWebСервиса(URLбазы)
	
	Пока Прав(URLбазы, 1) = "/" Цикл
		
		URLбазы = Лев(URLбазы, СтрДлина(URLбазы) - 1);
		
	КонецЦикла;
	
	Возврат URLбазы + "/ws/RemoteControl?wsdl"; 
	
КонецФункции

#КонецОбласти

#Область Регламентное_задание_ФормированиеОповещенийНедоступности

Функция ФормированиеОповещенийНедоступности() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
    
    УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор("020f0d79-d125-4ea6-9cb1-90d5fce1251a");
	Отбор = Новый Структура("Ключ, Состояние", УникальныйИдентификаторЗадания, СостояниеФоновогоЗадания.Активно);
	ФоновыеЗаданияНашел = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Запуск = Ложь;
	Если ФоновыеЗаданияНашел.Количество() = 0 Тогда
		Запуск = Истина;
	КонецЕсли;
		
	Если Запуск Тогда
		ФоновыеЗадания.Выполнить("КонтрольПодключенийСервер.ФормированиеОповещенийНедоступностиВФоне", , УникальныйИдентификаторЗадания, "Формирование оповещений недоступности");
	КонецЕсли;
	
КонецФункции

Процедура ФормированиеОповещенийНедоступностиВФоне() Экспорт
	
    // Пауза при запуске необходима для старта регламентного задания "Контроль подключения"
	// иначе возникает большое количество инцидентов "НетДанных" после регламентных работ
	КипВнешнийКомпонент.Пауза(60000);
	
	Запрос = ПолучитьЗапросФормированиеОповещенийНедоступности();
	
	ТекДата = ТекущаяДата();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекДата);
	
	ОсуществлятьКонтроль = Истина;
	Пока ОсуществлятьКонтроль Цикл
		ТекДата = ТекущаяДата();
		Запрос.УстановитьПараметр("ТекущаяДата", ТекДата);
		
		Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        Пока Выборка.Следующий() Цикл
            
            // Контроль подключений к ИБ
            Если Выборка.ТипКонтроля = 1 Тогда
                Параметры = Новый Структура("Кластер, ИнформационнаяБаза, КонтрольнаяПроцедура", Выборка.Кластер, Выборка.ОбъектКонтроля, Выборка.КонтрольнаяПроцедура);
                ОткрытьИнцидентПоПроценту(Параметры, Перечисления.УровниИнцидентов.Предупреждение, "НетДанных", "Нет данных по подключению!");
            // Контроль публикаций    
            ИначеЕсли Выборка.ТипКонтроля = 2 Тогда
                ОткрытьИнцидентПоПубликации(Выборка.ОбъектКонтроля);
            // Контроль доступности оборудования командой ping
            ИначеЕсли Выборка.ТипКонтроля = 3 Тогда
                ОткрытьИнцидентПоРабочемуСерверу(Выборка.ОбъектКонтроля);
            // Контроль доступности оборудования с помощью агента КИП    
            ИначеЕсли Выборка.ТипКонтроля = 4 Тогда
                РегистрыСведений.ДоступностьОборудования.ИзменитьДоступность(ТекущаяДата(), Выборка.ОбъектКонтроля, 0, Выборка.ОбъектКонтроля.ПериодКонтроля, Выборка.ОбъектКонтроля.МинимальныйПроцентДоступности);
            КонецЕсли;
            
        КонецЦикла;

		КипВнешнийКомпонент.Пауза(5000);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПараметрыИнцидента(Источник, ИмяСобытия, УровеньИнцидента = Неопределено) Экспорт
    
    // Тип инцидента
    НаименованиеТипаИнцидента = "Недоступность" + ИмяСобытия;
    ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
    ТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Ошибка);
    
    // Инцидент
    ХешИнцидента = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(Источник.УникальныйИдентификатор()));
    Инцидент = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, НаименованиеТипаИнцидента + "/" + Источник.Наименование, Ложь);
        
	Возврат Новый Структура("НаименованиеТипаИнцидента, КодИнцидента, УровеньИнцидента", ТипИнцидента, Инцидент, УровеньИнцидента);
	
КонецФункции

Функция ЗакрытьИнцидент(ТипИнцидента, КодИнцидента, Сообщение = Неопределено)
	
	ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, КодИнцидента, Истина, Сообщение);
		
КонецФункции

Функция ПолучитьЗапросФормированиеОповещенийНедоступности()
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   1 КАК ТипКонтроля,
    |   ИнфБазыПараметры.Кластер КАК Кластер,
    |   СпрКП.ОбъектКонтроля КАК ОбъектКонтроля,
    |   СпрКП.Ссылка КАК КонтрольнаяПроцедура,
    |   РАЗНОСТЬДАТ(ТекущееСостояние.ДатаОкончания, &ТекущаяДата, СЕКУНДА) КАК НетДанных
    |ИЗ
    |   Справочник.КонтрольныеПроцедуры КАК СпрКП
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   РегистрСведений.НастройкиКонтрольПодключений КАК Настройки
    |ПО
    |   Настройки.КонтрольнаяПроцедура = СпрКП.Ссылка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ПараметрыИнформационныхБаз КАК ИнфБазыПараметры
	|ПО
	|	ИнфБазыПараметры.ОбъектКонтроля = СпрКП.ОбъектКонтроля
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.КонтрольПодключенийТекущееСостояние КАК ТекущееСостояние
    |ПО
    |	ТекущееСостояние.ИнформационнаяБаза = СпрКП.ОбъектКонтроля
	|	И ТекущееСостояние.Источник = &ЦентрКонтроляКачества	
    |ГДЕ
    |   СпрКП.Владелец = &КонтрольПодключений
    |	И СпрКП.Выполнять = ИСТИНА
    |	И СпрКП.Пауза = ЛОЖЬ
    |   И РАЗНОСТЬДАТ(ТекущееСостояние.ДатаОкончания, &ТекущаяДата, СЕКУНДА) > Настройки.ДопустимоНетДанных
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   2 КАК ТипКонтроля,
    |   &ПустойКластер,
    |   Публикации.Ссылка КАК ОбъектКонтроля,
    |   &ПустаяКонтрольнаяПроцедура,
    |   РАЗНОСТЬДАТ(ТекущееСостояние.ДатаОкончания, &ТекущаяДата, СЕКУНДА) КАК НетДанных
    |ИЗ
    |   Справочник.Публикации КАК Публикации
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.КонтрольПодключенийТекущееСостояние КАК ТекущееСостояние
    |ПО
    |   ТекущееСостояние.ИнформационнаяБаза = Публикации.Ссылка
	|	И ТекущееСостояние.Источник = &ЦентрКонтроляКачества
    |ГДЕ
    |   Публикации.ВыполнятьКонтроль = ИСТИНА
    |   И НЕ Публикации.ПометкаУдаления
    |   И РАЗНОСТЬДАТ(ТекущееСостояние.ДатаОкончания, &ТекущаяДата, СЕКУНДА) > Публикации.ДопустимоНетДанных
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   3 КАК ТипКонтроля,
    |   &ПустойКластер,
    |   Оборудование.Ссылка КАК ОбъектКонтроля,
    |   &ПустаяКонтрольнаяПроцедура,
    |   РАЗНОСТЬДАТ(ТекущееСостояние.ДатаОкончания, &ТекущаяДата, СЕКУНДА) КАК НетДанных
    |ИЗ
    |   Справочник.Оборудование КАК Оборудование
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.КонтрольПодключенийТекущееСостояние КАК ТекущееСостояние
    |ПО
    |   ТекущееСостояние.ИнформационнаяБаза = Оборудование.Ссылка
	|	И ТекущееСостояние.Источник = &ЦентрКонтроляКачества	
    |ГДЕ
    |   Оборудование.ПроверятьДоступность = ИСТИНА
    |   И НЕ Оборудование.ПометкаУдаления
    |   И НЕ Оборудование.ИспользоватьВнешнегоАгента
    |   И РАЗНОСТЬДАТ(ТекущееСостояние.ДатаОкончания, &ТекущаяДата, СЕКУНДА) > Оборудование.ДопустимоНетДанных
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   4 КАК ТипКонтроля,
    |   &ПустойКластер,
    |   Оборудование.Ссылка КАК ОбъектКонтроля,
    |   &ПустаяКонтрольнаяПроцедура,
    |   РАЗНОСТЬДАТ(ТекущееСостояние.ДатаОкончания, &ТекущаяДата, СЕКУНДА) КАК НетДанных
    |ИЗ
    |   Справочник.Оборудование КАК Оборудование
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.КонтрольПодключенийТекущееСостояние КАК ТекущееСостояние
    |ПО
    |   ТекущееСостояние.ИнформационнаяБаза = Оборудование.Ссылка
	|	И ТекущееСостояние.Источник = &ЦентрКонтроляКачества	
    |ГДЕ
    |   Оборудование.ПроверятьДоступность = ИСТИНА
    |   И НЕ Оборудование.ПометкаУдаления
    |   И Оборудование.ИспользоватьВнешнегоАгента
    |   И РАЗНОСТЬДАТ(ТекущееСостояние.ДатаОкончания, &ТекущаяДата, СЕКУНДА) > 20
    |";
    
    Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
    Запрос.УстановитьПараметр("КонтрольПодключений", Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль подключений"));
    Запрос.УстановитьПараметр("ПустойКластер", Справочники.ОбъектыКонтроля.ПустаяСсылка());
    Запрос.УстановитьПараметр("ПустаяКонтрольнаяПроцедура", Справочники.КонтрольныеПроцедуры.ПустаяСсылка());
    Запрос.УстановитьПараметр("ЦентрКонтроляКачества", Справочники.ОбъектыКонтроля.ЦентрКонтроляКачества());
    
	Возврат Запрос;
    
КонецФункции

#КонецОбласти


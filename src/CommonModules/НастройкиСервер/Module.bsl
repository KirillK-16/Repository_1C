
#Область ПрограммныйИнтерфейс

// Выборка из справочника ОбъектыКонтроля всех существующих в системе 
// информационных баз
// Возвращаемое значение:
// 	СправочникВыборка 
//
Функция СписокИнформационныхБаз() Экспорт
	Возврат Справочники.ОбъектыКонтроля.Выбрать(, Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
КонецФункции

// Выборка из справочника ОбъектыКонтроля всех существующих в системе 
// информационных баз
// Возвращаемое значение:
// 	СправочникВыборка 
//
Функция СписокКластеров() Экспорт
	Возврат Справочники.ОбъектыКонтроля.Выбрать(, Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
КонецФункции

// Динамически создает на форме реквизиты с настройками, 
// хранящимися с соответствующем регистре сведений, 
// создает и заполняет поля на форме
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка - ссылка на объект контроля или контрольную процедуру
//  Форма - УправляемаяФорма
//	ИмяГруппыЭлементов - Строка - Имя группы на форме, в которой будут созданы элементы
//  ИменаРеквизитовПроверкаЗаполнения - переменная, в которой будут хранится список имен 
//		реквизитов из числа созданных, обязательных к заполнению
//
Функция ЗаполнитьПоляДинамическихНастроекНаФорме(ОбъектСсылка, Форма, ИмяГруппыЭлементов, ИменаРеквизитовПроверкаЗаполнения = Неопределено) Экспорт
	
	Настройки = ДинамическиеНастройки(ОбъектСсылка);
	Возврат ОбновитьПоляФормы(Форма, ИмяГруппыЭлементов, Настройки, ИменаРеквизитовПроверкаЗаполнения);
		
КонецФункции

// Сохраняет в нужный регистр сведений динамически созданные реквизиты на форме
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка - ссылка на объект контроля или контрольную процедуру
//  Форма - УправляемаяФорма
//	ИмяГруппыЭлементов - Строка - Имя группы на форме, в которой динамически созданы элементы
//
Процедура РазобратьИСохранитьДинамическиеНастройки(ОбъектСсылка, Форма, ИмяГруппыЭлементов) Экспорт
	Настройки = Новый Соответствие;
	ДобавитьИменаИЗначенияПодчиненныхРеквизитов(Форма, ИмяГруппыЭлементов, Настройки);
    Если Форма.ИмяФормы = "Справочник.КонтрольныеПроцедуры.Форма.ФормаЭлементаКонтрольПамяти" Тогда
        Если Форма.Мониторинг = "Отключить" Тогда
            Настройки.Вставить("Мониторинг", 0);
        ИначеЕсли Форма.Мониторинг = "При превышении" Тогда
            Настройки.Вставить("Мониторинг", 1);
        ИначеЕсли Форма.Мониторинг = "Постоянно" Тогда
            Настройки.Вставить("Мониторинг", 2);
        КонецЕсли;
    КонецЕсли;
    СохранитьДинамическиеНастройки(ОбъектСсылка, Настройки);
КонецПроцедуры

// Динамически создает на форме реквизиты с настройками ответственных 
// за выполнение или настройку контрольных процедур
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка - ссылка на объект контроля или контрольную процедуру
//  Форма - УправляемаяФорма
//	ИмяГруппыЭлементов - Строка - Имя группы на форме, в которой будут созданы элементы
//  ИменаРеквизитовПроверкаЗаполнения - переменная, в которой будут хранится список имен 
//		реквизитов из числа созданных, обязательных к заполнению
//
Процедура ЗаполнитьПоляОтветственныхПоКонтрольнойПроцедуре(ОбъектСсылка, Форма, ИмяГруппыЭлементов, ИменаРеквизитовПроверкаЗаполнения = Неопределено) Экспорт

	ТипИсполнителяДляТекущегоОбъекта = ТипыИсполнителейПоБизнесПроцессам(
		ОбъектСсылка
	);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТипИсполнителя,
	|	РольПользователя
	|ИЗ
	|	РегистрСведений.СхемаАдресацииЗадач
	|ГДЕ
	|	КонтрольнаяПроцедура = &УслОтбор
	|";
	Запрос.УстановитьПараметр("УслОтбор", ОбъектСсылка);
	НаборЗаписей = Запрос.Выполнить().Выгрузить();
	
	СхемаАдресацииСловарь = Новый Соответствие;
	Для Каждого Запись Из НаборЗаписей Цикл
		СхемаАдресацииСловарь.Вставить(Запись.ТипИсполнителя, Запись.РольПользователя);
	КонецЦикла;
	
	НастройкиДанные = Новый Массив;
	Для Каждого ТипИсполнителя Из ТипИсполнителяДляТекущегоОбъекта Цикл
		Для Каждого ИмяЗначениеТипИсполнителя Из ТипИсполнителя Цикл 
		РесурсДанные = Новый Структура("Имя, Значение, Тип, Заголовок, ПроверкаЗаполнения");
		СохраненныйПользователь = СхемаАдресацииСловарь.Получить(ИмяЗначениеТипИсполнителя.Значение);
		
		РесурсДанные.Имя = ИмяЗначениеТипИсполнителя.Ключ; 
	
		РесурсДанные.Тип = Новый ОписаниеТипов("СправочникСсылка.РолиПользователей");
		РесурсДанные.Значение = ?(
			СохраненныйПользователь <> Неопределено, 
			СохраненныйПользователь,
			СловарьСервер.ТекущийПользователь()
		);
		РесурсДанные.Заголовок = ИмяЗначениеТипИсполнителя.Значение.Наименование;
		РесурсДанные.ПроверкаЗаполнения = ?(
			ИменаРеквизитовПроверкаЗаполнения <> Неопределено,
			ПроверкаЗаполнения.ВыдаватьОшибку,
			ПроверкаЗаполнения.НеПроверять
		);
		НастройкиДанные.Добавить(РесурсДанные);			
		КонецЦикла;
	КонецЦикла;	
	ОбновитьПоляФормы(Форма, ИмяГруппыЭлементов, НастройкиДанные, ИменаРеквизитовПроверкаЗаполнения);
КонецПроцедуры

// Сохраняет в нужный регистр сведений динамически созданные реквизиты на форме
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка - ссылка на объект контроля или контрольную процедуру
//  Форма - УправляемаяФорма
//	ИмяГруппыЭлементов - Строка - Имя группы на форме, в которой динамически созданы элементы
//
Процедура СохранитьОтветственных(ОбъектСсылка, Форма, ИмяГруппыЭлементов) Экспорт
	МенеджерСпискаОтветственных = МенеджерСпискаОтветственных(ОбъектСсылка);
	Для Каждого Элемент Из Форма.Элементы[ИмяГруппыЭлементов].ПодчиненныеЭлементы Цикл
		
		УправлениеЗадачами.НазначитьОтветственного(
			Форма[Элемент.ПутьКДанным], 
			ОбъектСсылка, 
			МенеджерСпискаОтветственных[Элемент.Имя]
		);		
	КонецЦикла;
КонецПроцедуры

// Заполняет таблицу с настройками контрольных процедур на форме объекта контроля
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка.ОбъектыКонтроля или СправочникСсылка.ВидыОбъектовКонтроля 
//		- ссылка на объект, настройки которого требуется настроить
//  ВидОбъектаСсылка - СправочникСсылка.ВидыОбъектовКонтроля
//	КонтрольныеПроцедурыДанные - ТаблицаЗначений - таблица, которую необходимо заполнить
//
Процедура ЗаполнитьФормуКонтрольныхПроцедур(ОбъектСсылка, ВидОбъектаСсылка, КонтрольныеПроцедурыДанные) Экспорт
	СозданныеПроцедуры = Новый Соответствие;
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ОбъектыКонтроля") Тогда
		ВыборкаПроцедур = Справочники.КонтрольныеПроцедуры.Выбрать(,,Новый Структура("ОбъектКонтроля", ОбъектСсылка));
		Пока ВыборкаПроцедур.Следующий() Цикл
			ПроцедураСсылка = ВыборкаПроцедур.Ссылка;
			СозданныеПроцедуры.Вставить(ПроцедураСсылка.Владелец,ПроцедураСсылка); 
		КонецЦикла;	
	КонецЕсли;	
	
	ВидыПроцедур = Справочники.ВидыКонтрольныхПроцедур.Выбрать(,  ВидОбъектаСсылка,, "Наименование");
	Пока ВидыПроцедур.Следующий() Цикл
		ВидПроцедуры = ВидыПроцедур.ПолучитьОбъект();
		ВидПроцедурыСсылка = ВидПроцедуры.Ссылка;	
		
		ТекущаяПроцедура = КонтрольныеПроцедурыДанные.Добавить();
		
		ТекущаяПроцедура.ВидКонтрольнойПроцедуры = ВидПроцедурыСсылка;
						
		Ответственный = УправлениеЗадачами.ТекущийОтветственныйЗаНастройку(ОбъектСсылка, ВидПроцедурыСсылка);
		Если ЗначениеЗаполнено(Ответственный) Тогда 
			ТекущаяПроцедура.ОтветственныйЗаНастройку = Ответственный;
        Иначе
            ТекущаяПроцедура.ОтветственныйЗаНастройку = Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля;
        КонецЕсли;
        
		ПроцедураСсылка = СозданныеПроцедуры.Получить(ВидПроцедурыСсылка);
		Если ПроцедураСсылка <> Неопределено Тогда
			ТекущаяПроцедура.КонтрольнаяПроцедура = ПроцедураСсылка;	
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры

Функция ИмяФормыВидаОбъектаКонтроля(ВидОбъектаКонтроля) Экспорт
	ФормыВидаОбъектаКонтроля = ВидОбъектаКонтроля.Метаданные().Формы;
	ИмяВидаОбъекта = Справочники.ВидыОбъектовКонтроля.ПолучитьИмяПредопределенного(
		ВидОбъектаКонтроля
	);
	Возврат "Справочник.ВидыОбъектовКонтроля.Форма.ФормаЭлемента" + ?(
		ФормыВидаОбъектаКонтроля.Найти("ФормаЭлемента" + ИмяВидаОбъекта) = Неопределено, "", ИмяВидаОбъекта
	);
КонецФункции

Функция ИмяФормыКонтрольнойПроцедуры(КонтрольнаяПроцедура, ИмяБизнесПроцесса = Неопределено) Экспорт
	ФормыКонтрольнойПроцедуры = КонтрольнаяПроцедура.Метаданные().Формы;
	Если ИмяБизнесПроцесса = Неопределено Тогда
		ИмяБизнесПроцесса = КонтрольнаяПроцедура.Владелец.ИмяБизнесПроцесса;
	КонецЕсли;
	
	Возврат "Справочник.КонтрольныеПроцедуры.Форма.ФормаЭлемента" + ?(
		ФормыКонтрольнойПроцедуры.Найти("ФормаЭлемента" + ИмяБизнесПроцесса) = Неопределено, "", ИмяБизнесПроцесса
	);
КонецФункции

Функция ИмяФормыОбъектаКонтроля(ОбъектИлиВидОбъекта) Экспорт
	Если ТипЗнч(ОбъектИлиВидОбъекта) = Тип("СправочникСсылка.ОбъектыКонтроля") Тогда
		ИмяВидаОбъекта = Справочники.ВидыОбъектовКонтроля.ПолучитьИмяПредопределенного(
			ОбъектИлиВидОбъекта.Владелец
		);
	Иначе
		ИмяВидаОбъекта = Справочники.ВидыОбъектовКонтроля.ПолучитьИмяПредопределенного(
			ОбъектИлиВидОбъекта
		);
	КонецЕсли;
	
	ФормыОбъектаКонтроля = Метаданные.Справочники.ОбъектыКонтроля.Формы;
	Возврат "Справочник.ОбъектыКонтроля.Форма.ФормаЭлемента" + ?(
		ФормыОбъектаКонтроля.Найти("ФормаЭлемента" + ИмяВидаОбъекта) = Неопределено, "", ИмяВидаОбъекта
	);
КонецФункции

Функция ИмяФормыВидаКонтрольнойПроцедуры(ВидКонтрольнойПроцедуры) Экспорт
	
	ВсеФормы = ВидКонтрольнойПроцедуры.Метаданные().Формы;
	ИмяБизнесПроцесса = ВидКонтрольнойПроцедуры.ИмяБизнесПроцесса;
	Возврат "Справочник.ВидыКонтрольныхПроцедур.Форма.ФормаЭлемента" + ?(
		ВсеФормы.Найти("ФормаЭлемента" + ИмяБизнесПроцесса) = Неопределено, "", ИмяБизнесПроцесса
	);
	
КонецФункции

Функция ТипыИсполнителейПоБизнесПроцессам(ОбъектСсылка) Экспорт
	
	ТипыИсполнителей = Новый Массив;
	
	МенеджерДанных = МенеджерСпискаОтветственных(ОбъектСсылка);
	ОтветственныеВыборка = МенеджерДанных.Выбрать();
	Пока ОтветственныеВыборка.Следующий() Цикл
		ОтветственныйСсылка = ОтветственныеВыборка.Ссылка;
		ТипыИсполнителей.Добавить(Новый Структура(МенеджерДанных.ПолучитьИмяПредопределенного(ОтветственныйСсылка), ОтветственныйСсылка));		
	КонецЦикла;
	
	Возврат ТипыИсполнителей;	
	
КонецФункции

Функция НастройкиПоУмолчанию(ОбъектСсылка) Экспорт
	Возврат ДинамическиеНастройки(ОбъектСсылка);
КонецФункции

Функция ИмяДинамическогоЭлементаКолонки(Префикс, ЗначимаяЧасть) Экспорт
	
	Возврат СтрЗаменить(Префикс + ЗначимаяЧасть, " ", "_");
	
КонецФункции

Функция ИзменитьСоставКолонокТаблицыДинамически(
	Форма, 
	ТаблицаЭлемент, 
	ЗаголовкиНовыхКолонок,
	ПрефиксИзменяемыхКолонок = Неопределено,
	ИменаРеквизитовКолонок = Неопределено,
	ПараметрыЭлементов = Неопределено,
	ОписаниеТипаКолонки = Неопределено
) Экспорт

	Если ПрефиксИзменяемыхКолонок = Неопределено И ИменаРеквизитовКолонок = Неопределено Тогда
		ПрефиксИзменяемыхКолонок = "ДинамическаяКолонка_";
	КонецЕсли;
	
	РеквизитыНаУдаление = Новый Массив;
	ЭлементыНаУдаление = Новый Массив;
	Для Каждого Элемент Из ТаблицаЭлемент.ПодчиненныеЭлементы Цикл
		Если Лев(Элемент.Имя, СтрДлина(ПрефиксИзменяемыхКолонок)) = ПрефиксИзменяемыхКолонок Тогда
			РеквизитыНаУдаление.Добавить(Элемент.ПутьКДанным);
			ЭлементыНаУдаление.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из ЭлементыНаУдаление Цикл
		Форма.Элементы.Удалить(Элемент);
	КонецЦикла;
	Форма.ИзменитьРеквизиты(, РеквизитыНаУдаление);
	
	Если ОписаниеТипаКолонки = Неопределено Тогда
		Типы = Новый Массив;
		Типы.Добавить(Тип("Строка"));
		ОписаниеТипаКолонки = Новый ОписаниеТипов(Типы, Новый КвалификаторыСтроки(20));
	КонецЕсли;
	
	МассивРеквизитовКолонок = Новый Массив;
	ЧислоДобавляемыхКолонок = ЗаголовкиНовыхКолонок.Количество();
	НомерКолонки = 0;
	Пока НомерКолонки < ЧислоДобавляемыхКолонок Цикл
		Если ИменаРеквизитовКолонок <> Неопределено Тогда
			ИмяРеквизита = ИменаРеквизитовКолонок[НомерКолонки];
		Иначе
			ИмяРеквизита = ИмяДинамическогоЭлементаКолонки(ПрефиксИзменяемыхКолонок, Формат(НомерКолонки + 1, "ЧГ=0"));
		КонецЕсли;
		РеквизитКолонки = Новый РеквизитФормы(
			ИмяРеквизита, 
			ОписаниеТипаКолонки, 
			ТаблицаЭлемент.ПутьКДанным,
			ЗаголовкиНовыхКолонок[НомерКолонки]
		);
		
		МассивРеквизитовКолонок.Добавить(РеквизитКолонки);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(МассивРеквизитовКолонок);
	
	Для Каждого РеквизитКолонки Из МассивРеквизитовКолонок Цикл
		Элем = Форма.Элементы.Добавить(РеквизитКолонки.Имя, Тип("ПолеФормы"), ТаблицаЭлемент);
		Элем.Вид = ВидПоляФормы.ПолеВвода;
		Элем.ПутьКДанным = ТаблицаЭлемент.ПутьКДанным + "." + РеквизитКолонки.Имя;
		Элем.Заголовок = РеквизитКолонки.Заголовок;
		
		Если ПараметрыЭлементов <> Неопределено Тогда
			Для Каждого Параметр Из ПараметрыЭлементов Цикл
				
				Элем[Параметр.Ключ] = Параметр.Значение;
				
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат МассивРеквизитовКолонок;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДинамическиеНастройки(ОбъектСсылка)
    
    НастройкиДанные = Новый Массив;
    
    РегистрСведенийИмя = НазваниеРегистраСНастройками(ОбъектСсылка);
    
    Если Метаданные.РегистрыСведений.Найти(РегистрСведенийИмя) <> Неопределено Тогда
        
        ЭтоОбъектКонтроля = ЭтоОбъектКонтроляИлиЕгоВид(ОбъектСсылка);
        
        Попытка
            
            ПеременныеЗапроса = "";
            Для Каждого ТекРесурс Из Метаданные.РегистрыСведений[РегистрСведенийИмя].Ресурсы Цикл
                
                Если РегистрСведенийИмя = "НастройкиКонтрольПамяти" И ТекРесурс.Имя = "Мониторинг" Тогда
                    Продолжить;
                КонецЕсли;
                                
                ПеременныеЗапроса = ПеременныеЗапроса + Символы.Таб + ТекРесурс.Имя + ", " + Символы.ПС;
            КонецЦикла;
            Запрос = Новый Запрос;
            Запрос.Текст = "
            |ВЫБРАТЬ
            |" + Лев(ПеременныеЗапроса, СтрДлина(ПеременныеЗапроса) - 3) + "
            |ИЗ
            |	РегистрСведений." + РегистрСведенийИмя + "
            |ГДЕ
            |	" + ?(ЭтоОбъектКонтроля, "ОбъектКонтроля", "КонтрольнаяПроцедура") + " = &УслОтбор
            |";
            Запрос.УстановитьПараметр("УслОтбор", ОбъектСсылка);
            НаборЗаписей = Запрос.Выполнить().Выгрузить();
        Исключение
            Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
            ЗаписьЖурналаРегистрации(
            "Функция ДинамическиеНастройки(ОбъектСсылка)",
            УровеньЖурналаРегистрации.Ошибка,
            Метаданные.ОбщиеМодули.НастройкиСервер,
            ,
            Комментарий);
            
            Возврат НастройкиДанные;
        КонецПопытки;
        
        НаборНастроек = ?(НаборЗаписей.Количество() > 0, НаборЗаписей[0], Неопределено);
        
        Ресурсы = Метаданные.РегистрыСведений[РегистрСведенийИмя].Ресурсы;
        Для Каждого Ресурс из Ресурсы Цикл
            Имя = Ресурс.Имя;
            
            Если Имя = "Расписание" Тогда
                Продолжить;
            ИначеЕсли Имя = "Мониторинг" Тогда
                Продолжить;
            КонецЕсли;
                        
            Если Имя <> ?(ЭтоОбъектКонтроля, "ОбъектКонтроля", "КонтрольнаяПроцедура") И Лев(Имя, 7) <> "Удалить" Тогда
                РесурсДанные = Новый Структура("Имя, Значение, Тип, Заголовок, ПроверкаЗаполнения");
                
                РесурсДанные.Имя = Имя;
                РесурсДанные.Тип = Ресурс.Тип;
                РесурсДанные.Значение = ?(
                НаборНастроек <> Неопределено, 
                НаборНастроек[Имя], 
                ?(Ресурс.ЗаполнятьИзДанныхЗаполнения, Ресурс.ЗначениеЗаполнения, Неопределено)
                );
                Если Ресурс.Имя = "КаталогНастроекТЖ" Тогда
                    Если ЗначениеЗаполнено(РесурсДанные.Значение) Тогда
                        Если Прав(РесурсДанные.Значение, 1) <> "\" Тогда
                            РесурсДанные.Значение = "" + РесурсДанные.Значение + "\";
                        КонецЕсли;
                    КонецЕсли;
                КонецЕсли;
                РесурсДанные.Заголовок = Строка(Ресурс);
                РесурсДанные.ПроверкаЗаполнения = Ресурс.ПроверкаЗаполнения;
                
                НастройкиДанные.Добавить(РесурсДанные);
                
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
    
    Возврат НастройкиДанные;
    
КонецФункции

Функция ОбновитьПоляФормы(Форма, ИмяГруппыЭлементов, Настройки, ИменаРеквизитовПроверкаЗаполнения = Неопределено)
	Если Форма.Объект.Свойство("Владелец") Тогда
		Владелец = Форма.Объект.Владелец;
	Иначе
		Владелец = Справочники.ВидыОбъектовКонтроля.ПустаяСсылка();
	КонецЕсли;
	
	// Если реквизит добавлен разработчиком на форму самостоятельно,
	// то его форматирование не требуется. Все на совести разработчика формы
	РеквизитыДобавленныеМеханически = Новый Массив;
	ДобавитьИменаПодчиненныхРеквизитов(Форма, ИмяГруппыЭлементов, РеквизитыДобавленныеМеханически);
	
	ЗначенияНастроекПоИмени = Новый Структура;
	НовыеРеквизиты = Новый Массив;
	ИменаНовыхЭлементов = Новый Массив;
	ПорядокДобавленияЭлементов = Новый Массив;
	Для Каждого Настройка Из Настройки Цикл
		ИмяНастройки = Настройка.Имя;
		ЗначениеНастройки = Настройка.Значение;
		Если РеквизитыДобавленныеМеханически.Найти(ИмяНастройки) = Неопределено Тогда
			НовыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяНастройки, Настройка.Тип, , Настройка.Заголовок, Ложь));
			ЗначенияНастроекПоИмени.Вставить(Настройка.Имя, Новый Структура("Значение, ПроверкаЗаполнения", ЗначениеНастройки, Настройка.ПроверкаЗаполнения));
			ИменаНовыхЭлементов.Добавить(Настройка.Имя);
		Иначе
			Форма[ИмяНастройки] = ЗначениеНастройки;
		КонецЕсли;
		ПорядокДобавленияЭлементов.Добавить(Настройка.Имя);
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	
	НомерРеквизита = НовыеРеквизиты.ВГраница();
	Пока НомерРеквизита >= 0 Цикл
		
		Реквизит = НовыеРеквизиты[НомерРеквизита];
		
		ИндексЭлемента = ПорядокДобавленияЭлементов.Найти(Реквизит.Имя);
		ГруппаЭлементовНаФорме = Форма.Элементы[ИмяГруппыЭлементов];
		ТипЭлемента = Тип("ПолеФормы");
		Если ИндексЭлемента < ПорядокДобавленияЭлементов.ВГраница() Тогда
			СледующийЭлемент = Форма.Элементы[ПорядокДобавленияЭлементов[ИндексЭлемента + 1]];
			
			// всплываем на поверхность
			Пока СледующийЭлемент.Родитель <> ГруппаЭлементовНаФорме Цикл
				СледующийЭлемент = СледующийЭлемент.Родитель;
			КонецЦикла;
						
			Если Реквизит.Имя = "КаталогВременный"  И Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
				ГруппаЭлементовНаФорме = ДобавитьГруппуКаталогВременный(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент);
				СледующийЭлемент = Неопределено;
			ИначеЕсли Реквизит.Имя = "КаталогТЖСетевой" И Владелец.Наименование = "Анализ вызовов кластера 1С" Тогда
				ГруппаЭлементовНаФорме = ДобавитьГруппуКаталогОбменаДаннымиСетевой(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент);
				СледующийЭлемент = Неопределено;
			ИначеЕсли Реквизит.Имя = "КаталогВременныхФайлов"  И Владелец.Наименование = "Анализ вызовов кластера 1С" Тогда
				ГруппаЭлементовНаФорме = ДобавитьГруппуКаталогВременный(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент);
				СледующийЭлемент = Неопределено;
			ИначеЕсли Реквизит.Имя = "КаталогВременныхФайлов"  И Владелец.Наименование = "Контроль устойчивости системы" Тогда
				ГруппаЭлементовНаФорме = ДобавитьГруппуКаталогВременный(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент,,"");
				СледующийЭлемент = Неопределено;
			ИначеЕсли Реквизит.Имя = "КаталогТЖСетевой" И Владелец.Наименование = "Контроль устойчивости системы" Тогда
				ГруппаЭлементовНаФорме = ДобавитьГруппуКаталогОбменаДаннымиСетевой(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент,,"Сетевое имя каталога данных технологического журнала:");
				СледующийЭлемент = Неопределено;
			ИначеЕсли Реквизит.Имя = "КаталогВременныхФайлов"  И Владелец.Наименование = "Мониторинг системных ошибок" Тогда
				ГруппаЭлементовНаФорме = ДобавитьГруппуКаталогВременный(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент);
				СледующийЭлемент = Неопределено;
			ИначеЕсли Реквизит.Имя = "КаталогТЖСетевой" И Владелец.Наименование = "Мониторинг системных ошибок" Тогда
				ГруппаЭлементовНаФорме = ДобавитьГруппуКаталогОбменаДаннымиСетевой(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент,,"Сетевое имя каталога данных технологического журнала:");
				СледующийЭлемент = Неопределено;
			ИначеЕсли Реквизит.Имя = "КаталогВыгрузкиДамповСетевой" Тогда
				ГруппаЭлементовНаФорме = ДобавитьГруппуКаталогВременный(
				Форма,
				ГруппаЭлементовНаФорме,
				СледующийЭлемент,
				"ГруппаКаталогСетевой",
				"");
				СледующийЭлемент = Неопределено;
			КонецЕсли;
			
			Элемент = Форма.Элементы.Вставить(
			Реквизит.Имя,
			ТипЭлемента,
			ГруппаЭлементовНаФорме,
			СледующийЭлемент
			);
			
		Иначе
			Если Реквизит.Имя = "КаталогВременный" И Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
				ГруппаЭлементовНаФорме = ДобавитьГруппуКаталогВременный(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент);
			ИначеЕсли Реквизит.Имя = "РабочийСервер" И Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
				ГруппаЭлементовНаФорме = ДобавитьГруппуКаталогВременный(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент, "РабочийСерверГр", "Рабочий сервер", Ложь);
			ИначеЕсли Реквизит.Имя = "КаталогВременныхФайлов" Тогда
				ГруппаЭлементовНаФорме = ДобавитьГруппуКаталогВременный(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент);
			ИначеЕсли Реквизит.Имя = "КаталогВыгрузкиДамповСетевой" Тогда
				ГруппаЭлементовНаФорме = ДобавитьГруппуКаталогВременный(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент, "ГруппаКаталогСетевой", "");
			КонецЕсли;
			
			Элемент = Форма.Элементы.Вставить(Реквизит.Имя, ТипЭлемента, ГруппаЭлементовНаФорме);
		КонецЕсли;
		
		Если Форма.Команды.Найти("СоздатьЛокальныйКаталогВременныхФайлов") <> Неопределено Тогда
			Если Реквизит.Имя = "КаталогВременный" И Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
				Форма.Элементы.Добавить("КаталогВременныйСоздать", Тип("КнопкаФормы"),ГруппаЭлементовНаФорме);
				Форма.Элементы.КаталогВременныйСоздать.ИмяКоманды = "СоздатьЛокальныйКаталогВременныхФайлов";
				Форма.Элементы.КаталогВременныйСоздать.Заголовок = "Создать";
			ИначеЕсли Реквизит.Имя = "КаталогВременныхФайлов" И Владелец.Наименование = "Анализ вызовов кластера 1С" Тогда
				Форма.Элементы.Добавить("КаталогВременныйСоздать", Тип("КнопкаФормы"),ГруппаЭлементовНаФорме);
				Форма.Элементы.КаталогВременныйСоздать.ИмяКоманды = "СоздатьЛокальныйКаталогВременныхФайлов";
				Форма.Элементы.КаталогВременныйСоздать.Заголовок = "Создать";
			ИначеЕсли Реквизит.Имя = "КаталогВременныхФайлов" И Владелец.Наименование = "Контроль устойчивости системы" Тогда
				Форма.Элементы.Добавить("КаталогВременныйСоздать", Тип("КнопкаФормы"),ГруппаЭлементовНаФорме);
				Форма.Элементы.КаталогВременныйСоздать.ИмяКоманды = "СоздатьЛокальныйКаталогВременныхФайлов";
				Форма.Элементы.КаталогВременныйСоздать.Заголовок = "Создать";
			ИначеЕсли Реквизит.Имя = "КаталогВременныхФайлов" И Владелец.Наименование = "Мониторинг системных ошибок" Тогда
				Форма.Элементы.Добавить("КаталогВременныйСоздать", Тип("КнопкаФормы"),ГруппаЭлементовНаФорме);
				Форма.Элементы.КаталогВременныйСоздать.ИмяКоманды = "СоздатьЛокальныйКаталогВременныхФайлов";
				Форма.Элементы.КаталогВременныйСоздать.Заголовок = "Создать";
			КонецЕсли;
		КонецЕсли;
			
		Если Форма.Команды.Найти("СоздатьСетевойКаталогТехЖурнала") <> Неопределено Тогда
			Если Реквизит.Имя = "КаталогТЖСетевой" Тогда
				Форма.Элементы.Добавить("КаталогТЖСетевойСоздать", Тип("КнопкаФормы"),ГруппаЭлементовНаФорме);
				Форма.Элементы.КаталогТЖСетевойСоздать.ИмяКоманды = "СоздатьСетевойКаталогТехЖурнала";
				Форма.Элементы.КаталогТЖСетевойСоздать.Заголовок = "Создать";
			КонецЕсли;
		КонецЕсли;
		
		Если Форма.Команды.Найти("СоздатьСетевойКаталог") <> Неопределено Тогда
			Если Реквизит.Имя = "КаталогВыгрузкиДамповСетевой" Тогда
				Форма.Элементы.Добавить("КаталогСетевойСоздать", Тип("КнопкаФормы"),ГруппаЭлементовНаФорме);
				Форма.Элементы.КаталогСетевойСоздать.ИмяКоманды = "СоздатьСетевойКаталог";
				Форма.Элементы.КаталогСетевойСоздать.Заголовок = "Создать";
			КонецЕсли;
		КонецЕсли;
		
		Если Форма.Команды.Найти("СоздатьЛокальныйКаталогОбменаДанными") <> Неопределено Тогда
			Если Реквизит.Имя = "КаталогТЖСетевой" И Владелец.Наименование = "Анализ вызовов кластера 1С" Тогда
				Форма.Элементы.Добавить("КаталогОбменаДаннымиСоздать", Тип("КнопкаФормы"),ГруппаЭлементовНаФорме);
				Форма.Элементы.КаталогОбменаДаннымиСоздать.ИмяКоманды = "СоздатьЛокальныйКаталогОбменаДанными";
				Форма.Элементы.КаталогОбменаДаннымиСоздать.Заголовок = "Создать";
			КонецЕсли;
		КонецЕсли;
				
		Элемент.ПутьКДанным =  Реквизит.Имя;
		
		Если Прав(
			Реквизит.Имя, 
			СтрДлина(СловарьКлиентСервер.ОбозначениеТегаСкрыто())
			) = СловарьКлиентСервер.ОбозначениеТегаСкрыто() Тогда
			
			Элемент.Видимость = Ложь;
		КонецЕсли;
		
		ЗначениеРеквизита = ЗначенияНастроекПоИмени[Реквизит.Имя].Значение;
		ЭлементЭтоФлажок = (ТипЗнч(ЗначениеРеквизита) = Тип("Булево"));
		Элемент.Вид = ?(ЭлементЭтоФлажок, ВидПоляФормы.ПолеФлажка, ВидПоляФормы.ПолеВвода);
		Элемент.ПоложениеЗаголовка = ?(
		ЭлементЭтоФлажок, 
		ПоложениеЗаголовкаЭлементаФормы.Авто,
		ПоложениеЗаголовкаЭлементаФормы[?(СтрДлина(Реквизит.Заголовок) > 40, "Верх", "Лево")]
		);
		
		// проверяем, нужен ли режим пароля
		Если Лев(
			Реквизит.Имя, 
			СтрДлина(СловарьКлиентСервер.ОбозначениеТегаПароль())
			) = СловарьКлиентСервер.ОбозначениеТегаПароль() 
			Тогда
			
			Элемент.РежимПароля = Истина;
			
		КонецЕсли;
		
		// проверяем, нужен ли режим выбора кластера
		Если Реквизит.Имя = "Кластер" Тогда
			Элемент.КнопкаВыбора = Истина;
			Если Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
				Элемент.УстановитьДействие("НачалоВыбора", "ОбработкаНачалоВыбораКластераДляСервера");
			ИначеЕсли Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза Тогда
				Элемент.УстановитьДействие("НачалоВыбора", "ОбработкаНачалоВыбораКластераДляИнформационнойБазы");
			Иначе
				Элемент.УстановитьДействие("НачалоВыбора", "ОбработкаНачалоВыбораКластера");	
			КонецЕсли;
		КонецЕсли;
		
		Если Реквизит.Имя = "КластерОбъектаКонтроля" Тогда
			Элемент.КнопкаВыбора = Истина;
			Элемент.Заголовок = "Кластер";
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			Элемент.УстановитьДействие("НачалоВыбора", "ОбработкаНачалоВыбораКластераОбъектаКонтроля");
			Элемент.УстановитьДействие("ОбработкаВыбора", "КластерОбъектаКонтроляОбработкаВыбора");
		КонецЕсли;
		
		Если Реквизит.Имя = "ТипПодключения" Тогда
			Элемент.РежимВыбораИзСписка = Истина;
			Элемент.РедактированиеТекста  = Ложь;
			Элемент.СписокВыбора.Добавить("COM", "COM");
			Элемент.СписокВыбора.Добавить("RAS", "RAS");
			Элемент.УстановитьДействие("ОбработкаВыбора", "ТипПодключенияОбработкаВыбора");			
		КонецЕсли;
		
		Если Реквизит.Имя = "ОтветственныйЗаВозможностьПодключения" Тогда
			Элемент.ВысотаЗаголовка = 2;
		ИначеЕсли Реквизит.Имя = "ОтветственныйЗаВыполнениеРегламентныхЗаданий" Тогда
			Элемент.ВысотаЗаголовка = 2;
		ИначеЕсли Реквизит.Имя = "ОтветственныйЗаРазборПроблемПроизводительности" Тогда
			Элемент.ВысотаЗаголовка = 1;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
			Элемент.Родитель.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
		ИначеЕсли Реквизит.Имя = "ОтветственныйЗаЗаполнениеФормыОценкиРаботыСистемы" Тогда
			Элемент.ВысотаЗаголовка = 2;
		ИначеЕсли Реквизит.Имя = "ОтветственныйЗаРазборПроблемПотребленияПамяти" Тогда
			Элемент.ВысотаЗаголовка = 2;
		ИначеЕсли Реквизит.Имя = "ОтветственныйЗаРассмотрениеДампа" Тогда
			Элемент.ВысотаЗаголовка = 2;
		КонецЕсли;
		
		ТегПути = СловарьКлиентСервер.ОбозначениеТегаПуть();
		Если Лев(Реквизит.Имя, СтрДлина(ТегПути)) = ТегПути Тогда
			Элемент.КнопкаВыбора = Истина;
			Элемент.УстановитьДействие("НачалоВыбора", "ОбработкаНачалоВыбора");
		КонецЕсли;
		
		
		//проверяем, нужен ли обработчик изменений
		Элемент.УстановитьДействие("ПриИзменении", "УстановитьМодифицированностьФормы");
		Если Прав(
			Реквизит.Имя, 
			СтрДлина(СловарьКлиентСервер.ОбозначениеТегаОбрабатыватьИзменения())
			) = СловарьКлиентСервер.ОбозначениеТегаОбрабатыватьИзменения() Тогда
			
			Элемент.УстановитьДействие("ПриИзменении", Реквизит.Имя + "ПриИзменении");
			
		КонецЕсли;
		
		ПроверкаЗаполненияЗначение = ЗначенияНастроекПоИмени[Реквизит.Имя].ПроверкаЗаполнения;
		Если ИменаРеквизитовПроверкаЗаполнения <> Неопределено И ПроверкаЗаполненияЗначение = ПроверкаЗаполнения.ВыдаватьОшибку Тогда 
			НоваяСтрока = ИменаРеквизитовПроверкаЗаполнения.Добавить();
			НоваяСтрока.ИмяРеквизита = Реквизит.Имя;
		КонецЕсли;
		
		Форма[Реквизит.Имя] = ЗначениеРеквизита;
		НомерРеквизита = НомерРеквизита - 1;
		
		//Если это настройка рабочего сервера, то формируем спецтребования для реквизитов
		Если Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
			Если Реквизит.Имя = "ИмяКомпьютера" Тогда
				Элемент.Заголовок = "Имя компьютера или IP адрес";
				Элемент.КнопкаВыбора = Истина;
				Элемент.УстановитьДействие("НачалоВыбора", "ИмяКомпьютераНачалоВыбора");
				Элемент.УстановитьДействие("ОбработкаВыбора", "ИмяКомпьютераОбработкаВыбора");
			ИначеЕсли Реквизит.Имя = "КаталогНастроекТЖ" Тогда
				Элемент.Заголовок = "Локальный каталог технологического журнала (logcfg.xml) на " + ЗначенияНастроекПоИмени["ИмяКомпьютера"].Значение;
				Элемент.КнопкаВыбора = Ложь;
			ИначеЕсли Реквизит.Имя = "КаталогНастроекТЖСетевой" Тогда
				Элемент.Заголовок = "Сетевой каталог технологического журнала (logcfg.xml) на " + ЗначенияНастроекПоИмени["ИмяКомпьютера"].Значение;
				Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			ИначеЕсли Реквизит.Имя = "КаталогВременный" Тогда
				Элемент.Заголовок = "Локальный каталог временных файлов";
				Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ИначеЕсли Реквизит.Имя = "КаталогОбменаДанными" Тогда
				Элемент.Заголовок = "Локальный каталог обмена данными на " + ЗначенияНастроекПоИмени["ИмяКомпьютера"].Значение;
				Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			ИначеЕсли Реквизит.Имя = "КаталогОбменаДаннымиСетевой" Тогда
				Элемент.Заголовок = "Сетевой каталог обмена данными на " + ЗначенияНастроекПоИмени["ИмяКомпьютера"].Значение;
				Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			КонецЕсли;
		КонецЕсли;
		
		//Если это настройка информационной базы, то формируем спецтребования для реквизитов
		Если Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза Тогда
			Если Реквизит.Имя = "ИмяБазыВКластере" Тогда
				//Элемент.РедактированиеТекста = Ложь;
				Элемент.КнопкаВыбора = Истина;
				Элемент.УстановитьДействие("НачалоВыбора", "ИмяБазыВКластереНачалоВыбора");
				Элемент.УстановитьДействие("ОбработкаВыбора", "ИмяБазыВКластереОбработкаВыбора");
			КонецЕсли;
		КонецЕсли;
		
		Если Реквизит.Имя = "КаталогВременныхФайлов" И Владелец.Наименование = "Анализ вызовов кластера 1С" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ИначеЕсли Реквизит.Имя = "КаталогТЖСетевой" И Владелец.Наименование = "Анализ вызовов кластера 1С" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ИначеЕсли Реквизит.Имя = "КаталогТЖЛокальный" И Владелец.Наименование = "Анализ вызовов кластера 1С" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ИначеЕсли Реквизит.Имя = "КаталогВременныхФайлов" И Владелец.Наименование = "Контроль устойчивости системы" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		ИначеЕсли Реквизит.Имя = "КаталогТЖСетевой" И Владелец.Наименование = "Контроль устойчивости системы" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ИначеЕсли Реквизит.Имя = "КаталогВременныхФайлов" И Владелец.Наименование = "Мониторинг системных ошибок" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ИначеЕсли Реквизит.Имя = "КаталогТЖСетевой" И Владелец.Наименование = "Мониторинг системных ошибок" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ИначеЕсли Реквизит.Имя = "URLОпубликованнойИнформационнойБазы" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ИначеЕсли Реквизит.Имя = "ЛогинПриПодключении" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ИначеЕсли Реквизит.Имя = "ПарольПриПодключении" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ИначеЕсли Реквизит.Имя = "МеханизмПроверкиОбрабатыватьИзменения" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		КонецЕсли;
		
		Если Реквизит.Имя = "КаталогВыгрузкиДамповСетевой" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		КонецЕсли;
		
		Если Реквизит.Имя = "МеханизмПроверкиОбрабатыватьИзменения" Тогда
			Элемент.УстановитьДействие("ОбработкаВыбора", "ОбработкаВыбораМеханизмПроверкиОбрабатыватьИзменения");
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИменаНовыхЭлементов;
	
КонецФункции

Функция ЭтоОбъектКонтроляИлиЕгоВид(ОбъектСсылка)
	Возврат ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ОбъектыКонтроля") ИЛИ ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВидыОбъектовКонтроля");
КонецФункции

Функция НазваниеРегистраСНастройками(ОбъектСсылка)
	ЭтоВид = ЭтоВид(ОбъектСсылка);
	
	Если ЭтоОбъектКонтроляИлиЕгоВид(ОбъектСсылка) Тогда
		Возврат НастройкиКонстантыСервер.ВидОбъектаКонтроляВНазваниеРегистраНастроек()[
			?(ЭтоВид, ОбъектСсылка, ОбъектСсылка.Владелец)
		];									 
	Иначе
		ИмяБизнесПроцесса = ?(
			ЭтоВид, 
			ОбъектСсылка.ИмяБизнесПроцесса, 
			ОбъектСсылка.Владелец.ИмяБизнесПроцесса
		);
		Возврат "Настройки" + ИмяБизнесПроцесса;		
	КонецЕсли;			
КонецФункции

Процедура ДобавитьИменаПодчиненныхРеквизитов(Форма, ИмяГруппыЭлементов, ИменаРеквизитов)
	Попытка
		ПодчиненныеЭлементы = Форма.Элементы[ИмяГруппыЭлементов].ПодчиненныеЭлементы;
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							
		ЗаписьЖурналаРегистрации(
			"Процедура ДобавитьИменаПодчиненныхРеквизитов(...)",
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.ОбщиеМодули.НастройкиСервер,
			,
			Комментарий);
				
		Возврат;
	КонецПопытки;
	
	Для Каждого Элемент Из ПодчиненныеЭлементы Цикл
		Попытка
			Если ТипЗнч(Элемент) <> Тип("ГруппаФормы") Тогда
				Если ТипЗнч(Элемент) = Тип("ДекорацияФормы") Тогда
				Иначе
					ИменаРеквизитов.Добавить(Элемент.ПутьКДанным);
				КонецЕсли;
			Иначе
				ДобавитьИменаПодчиненныхРеквизитов(Форма, Элемент.Имя, ИменаРеквизитов);
			КонецЕсли;
		Исключение
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
			ЗаписьЖурналаРегистрации(
				"Процедура ДобавитьИменаПодчиненныхРеквизитов(...)",
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.ОбщиеМодули.НастройкиСервер,
				,
				Комментарий);
				
			ДобавитьИменаПодчиненныхРеквизитов(Форма, Элемент.Имя, ИменаРеквизитов);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьГруппуКаталогВременный(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент, Имя = Неопределено, Заголовок = Неопределено, Видимость = Истина)
	Если Имя = Неопределено Тогда
		Имя = "ГруппаКаталогВременный";
	КонецЕсли;
	
	Если Заголовок = Неопределено Тогда
		Заголовок = "Локальный каталог временных файлов на " + ИмяКомпьютера() + ":";
	КонецЕсли;
		
	ГруппаКаталогВременный = Форма.Элементы.Вставить(Имя, Тип("ГруппаФормы"), ГруппаЭлементовНаФорме, СледующийЭлемент);
	ГруппаКаталогВременный.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКаталогВременный.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаКаталогВременный.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаКаталогВременный.Заголовок = Заголовок;
	ГруппаКаталогВременный.Видимость = Видимость;
	Если ПустаяСтрока(Заголовок) Тогда
		ГруппаКаталогВременный.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
		
	Возврат ГруппаКаталогВременный;
КонецФункции

Функция ДобавитьГруппуКаталогОбменаДаннымиСетевой(Форма, ГруппаЭлементовНаФорме, СледующийЭлемент, Имя = Неопределено, Заголовок = Неопределено)
	Если Имя = Неопределено Тогда
		Имя = "ГруппаКаталогОбменаДаннымиСетевой";
	КонецЕсли;
	
	Если Заголовок = Неопределено Тогда
		Заголовок = "Сетевой каталог обмена данными:";
	КонецЕсли;
		
	ГруппаКаталогОбменаДаннымиСетевой = Форма.Элементы.Вставить(Имя, Тип("ГруппаФормы"), ГруппаЭлементовНаФорме, СледующийЭлемент);
	ГруппаКаталогОбменаДаннымиСетевой.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКаталогОбменаДаннымиСетевой.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаКаталогОбменаДаннымиСетевой.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаКаталогОбменаДаннымиСетевой.Заголовок = Заголовок;
	Если ПустаяСтрока(Заголовок) Тогда
		ГруппаКаталогОбменаДаннымиСетевой.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
		
	Возврат ГруппаКаталогОбменаДаннымиСетевой;
КонецФункции

Функция ЭтоВид(ОбъектСсылка)
	Возврат ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВидыОбъектовКонтроля") ИЛИ ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВидыКонтрольныхПроцедур");
КонецФункции

Процедура ДобавитьИменаИЗначенияПодчиненныхРеквизитов(Форма, ИмяГруппыЭлементов, ИменаЗначения)
	
	ПодчиненныеЭлементы = Неопределено;	
	
	Если ТипЗнч(Форма.Элементы[ИмяГруппыЭлементов]) = Тип("ГруппаФормы") Тогда
		ПодчиненныеЭлементы = Форма.Элементы[ИмяГруппыЭлементов].ПодчиненныеЭлементы;
	КонецЕсли;
	
	Если ПодчиненныеЭлементы <> Неопределено Тогда
		Для Каждого Элемент Из ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
				ИменаЗначения.Вставить(Элемент.Имя, Форма[Элемент.ПутьКДанным]); 
			Иначе
				ДобавитьИменаИЗначенияПодчиненныхРеквизитов(Форма, Элемент.Имя, ИменаЗначения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДинамическиеНастройки(ОбъектСсылка, НастройкиИмяЗначение)
	
	Попытка
		РегистрСведений = РегистрыСведений[НазваниеРегистраСНастройками(ОбъектСсылка)];
	Исключение
		Инфо = ИнформацияОбОшибке();
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
		ЗаписьЖурналаРегистрации(
			"Процедура СохранитьДинамическиеНастройки(ОбъектСсылка, НастройкиИмяЗначение)",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.НастройкиСервер,
			,
			Комментарий);
			
		Возврат;
	КонецПопытки;
	
	МенеджерЗаписи = РегистрСведений.СоздатьМенеджерЗаписи();
	ИмяИзмерения = ?(ЭтоОбъектКонтроляИлиЕгоВид(ОбъектСсылка), "ОбъектКонтроля", "КонтрольнаяПроцедура");
	МенеджерЗаписи[ИмяИзмерения] = ОбъектСсылка;
	
	ТребуемыеНастройки = Метаданные.РегистрыСведений[НазваниеРегистраСНастройками(ОбъектСсылка)].Ресурсы;
	Для Каждого Настройка Из ТребуемыеНастройки Цикл
		ИмяНастройки = Настройка.Имя;
		МенеджерЗаписи[ИмяНастройки] = НастройкиИмяЗначение[ИмяНастройки];
	КонецЦикла;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция МенеджерСпискаОтветственных(ОбъектСсылка)
	
	ЭтоВид = ЭтоВид(ОбъектСсылка);
	
	ИмяБизнесПроцесса = ?(
		ЭтоВид, 
		ОбъектСсылка.ИмяБизнесПроцесса, 
		ОбъектСсылка.Владелец.ИмяБизнесПроцесса
	);
	Возврат Справочники["ТипыИсполнителей" + ИмяБизнесПроцесса];
	
КонецФункции

#КонецОбласти
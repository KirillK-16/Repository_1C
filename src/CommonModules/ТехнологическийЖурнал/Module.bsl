
#Область ПрограммныйИнтерфейс

// Включить технологический журнал
//
// Параметры:
//  Конфигурация - XML документ, описывающий конфигурацию технологического журнала
//  КаталогиТЖ - Справочник.ИнформационнаяБаза.ИменаКаталоговТЖ
//
// Возвращаемое значение:
//  Структура - Контекст работы с технологическим журналом
//
Функция ВключитьТехнологическийЖурнал(Конфигурация, НастройкиТЖ, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	КаталогиТЖ = Новый Массив;
	Описатель = Новый Структура;
	Описатель.Вставить("Подкаталог", Новый Соответствие);
	Описатель.Вставить("КаталогиТЖ", КаталогиТЖ);
	
	НомерСтроки = 0;
	Для Каждого СтрокаРасположения Из НастройкиТЖ Цикл
		НеобходимаПерезапись = Ложь;
		
		// Создать Dom представление настроек журнала
		КонфигурацияDom = ОбщийКлиентСервер.ПолучитьDOMИзСтрокиXML(Конфигурация, Ложь);
		Префикс = "";
		КоличествоНастроек = ПолучитьКоличествоНастроекЖурнала(КонфигурацияDom, Префикс);
		
		// Количество настроек должно равняться единице
		Если КоличествоНастроек <> 1 Тогда
			ВызватьИсключение "ОшибкаНеверноеКоличествоЖурналов";//Словарь.Получить("ОшибкаНеверноеКоличествоЖурналов");
		КонецЕсли;
		
		// Установить каталог журнала
		Описатель.Подкаталог.Вставить(
			НомерСтроки, Строка(Новый УникальныйИдентификатор)
		);
			
		Подкаталог = "";
		КаталогиТЖ.Добавить(СтрокаРасположения.Сетевой + Подкаталог);
		КаталогЖурнала = СтрокаРасположения.ЛокальныйУникальный;
		КаталогЖурнала = УстановитьКаталогЖурнала(КонфигурацияDom, КаталогЖурнала, Префикс);
		ИмяФайлаКонфигурации = ПолучитьИмяФайлаНастройкиТЖ(СтрокаРасположения.Конфигурация);
		
		// Если журнал уже включен
		Если НайтиФайлы(ИмяФайлаКонфигурации).Количество() = 1 Тогда
			
			// Получить текстовое представление включенного журнала
			Чтение = Новый ЧтениеТекста(ИмяФайлаКонфигурации);
			СтараяКонфигурация = Чтение.Прочитать();
			Чтение.Закрыть();
			
			// Получить Dom представление включенного журнала
			Попытка
				СтараяКонфигурацияDom = ОбщийКлиентСервер.ПолучитьDOMИзСтрокиXML(СтараяКонфигурация, Ложь);
			Исключение
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
									
				ЗаписьЖурналаРегистрации(
					"Функция ВключитьТехнологическийЖурнал(Конфигурация, НастройкиТЖ, Параметры = Неопределено) Экспорт",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.ОбщиеМодули.ТехнологическийЖурнал,
					,
					Комментарий);
				
				ВызватьИсключение "Не удается прочитать файл logcfg.xml. Возможно он поврежден. Исправьте файл logcfg.xml или удалите его.";
			КонецПопытки;
			
			// Объединить настройки подключенного и подключаемого журналов
			ПараметрыОбъединения = Новый Структура;
			Если СтрокаРасположения.Свойство("ПеремещенияЛогов") Тогда
				ПараметрыОбъединения.Вставить("ПеремещенияЛогов", СтрокаРасположения["ПеремещенияЛогов"]);
			КонецЕсли;
			
			Префикс = СтараяКонфигурацияDom.ЭлементДокумента.Префикс;
			ИзменитьПрефиксЭлементов(КонфигурацияDom, Префикс, Истина);
			
			Если ЗначениеЗаполнено(Префикс) Тогда
				строкаXML = "<?xml version=""1.0""?> <" + Префикс + ":config xmlns:" + Префикс + "=""http://v8.1c.ru/v8/tech-log"">";
			Иначе
				строкаXML = "<?xml version=""1.0""?> <config xmlns=""http://v8.1c.ru/v8/tech-log"">";
			КонецЕсли;
			
			Для Каждого ТекУзел Из СтараяКонфигурацияDom.ЭлементДокумента.ДочерниеУзлы Цикл
				строкаXML = строкаXML + ОбщийКлиентСервер.ПолучитьСтрокуXMLИзDOM(ТекУзел) + Символы.ПС; 
			КонецЦикла;
			Для Каждого ТекУзел Из КонфигурацияDom.ЭлементДокумента.ДочерниеУзлы Цикл
				строкаXML = строкаXML + ОбщийКлиентСервер.ПолучитьСтрокуXMLИзDOM(ТекУзел) + Символы.ПС; 
			КонецЦикла;
			Если ЗначениеЗаполнено(Префикс) Тогда
				строкаXML = строкаXML + "</" + Префикс + ":config>";
			Иначе
				строкаXML = строкаXML + "</config>";
			КонецЕсли;
			
			КонфигурацияDom = ОбщийКлиентСервер.ПолучитьDOMИзСтрокиXML(строкаXML, Ложь);
			НеобходимаПерезапись = Истина;
		Иначе
			НеобходимаПерезапись = Истина;
		КонецЕсли;
		
		Если НеобходимаПерезапись Тогда
			// Сохранить настройки журнала
			ТекстКонфигурации = ОбщийКлиентСервер.ПолучитьСтрокуXMLИзDOM(КонфигурацияDom);
			
			Если ТранзакцияАктивна() Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОбъектыБлокировок");
				ЭлементБлокировки.УстановитьЗначение("Объект", "ТехнологическийЖурнал." + Строка(ИмяФайлаКонфигурации));
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
			КонецЕсли;
			
			ФайлПроверки = Новый Файл(ИмяФайлаКонфигурации);
			Если ФайлПроверки.Существует() Тогда
				Запись = Новый ЗаписьТекста(ИмяФайлаКонфигурации, КодировкаТекста.UTF8);
				Запись.Записать(ТекстКонфигурации);
				Запись.Закрыть();
			Иначе
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЗначениеЗаполнено(Комментарий) Тогда
					Комментарий = "Не найден файл настроек " + ИмяФайлаКонфигурации + ". Создан новый.";
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации("Технологический журнал запись файла конфигурации", УровеньЖурналаРегистрации.Предупреждение,,,Комментарий);
                
                Попытка
                    Запись = Новый ЗаписьТекста(ИмяФайлаКонфигурации, КодировкаТекста.UTF8);
                    Запись.Записать(ТекстКонфигурации);
                    Запись.Закрыть();
                    ЗаписьЖурналаРегистрации("Технологический журнал запись файла конфигурации", УровеньЖурналаРегистрации.Предупреждение,,,Комментарий);
                Исключение
                    Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
                    Если НЕ ЗначениеЗаполнено(Комментарий) Тогда
                        Комментарий = "Не смог создать новый файл настроек: " + ИмяФайлаКонфигурации + ".";
                    КонецЕсли;
                    
                    ЗаписьЖурналаРегистрации("Технологический журнал запись файла конфигурации", УровеньЖурналаРегистрации.Предупреждение,,,Комментарий);
                КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат Описатель;
	
КонецФункции

// Отключить технологический журнал или привести его к тому виду,
// в котором он был до его включения
//
// Параметры:
//  Описатель - Произвольный, значение этой переменной нужно передавать при
//              отключении технологического журнала
//  КаталогиТЖ - Справочник.ИнформационнаяБаза.ИменаКаталоговТЖ
//
// Возвращаемые параметры:
//  Булево - Истина, журнал успешно включен, Ложь, журнал включить не удалось
//
Процедура ОтключитьТехнологическийЖурнал(КаталогНастроекТЖ, locations,  Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ИмяФайлаКонфигурации = ПолучитьИмяФайлаНастройкиТЖ(КаталогНастроекТЖ);
	// Если журнал уже включен
	
	Если НайтиФайлы(ИмяФайлаКонфигурации).Количество() = 1 Тогда
		
		НеобходимаПерезапись = Ложь;
		
		// Получить текстовое представление включенного журнала
		Чтение = Новый ЧтениеТекста(ИмяФайлаКонфигурации);
		ОсновныеНастройки = Чтение.Прочитать();
		Чтение.Закрыть();
		
		// Получить Dom представление включенного журнала
		Попытка
			ОсновныеНастройкиDom = ОбщийКлиентСервер.ПолучитьDOMИзСтрокиXML(ОсновныеНастройки, Ложь);
		Исключение
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
								
			ЗаписьЖурналаРегистрации(
				"Процедура ОтключитьТехнологическийЖурнал(КаталогНастроекТЖ, locations,  Параметры = Неопределено) Экспорт",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ТехнологическийЖурнал,
				,
				Комментарий);
			
			ВызватьИсключение "Не удается прочитать файл logcfg.xml. Возможно он поврежден. Исправьте файл logcfg.xml или удалите его.";
		КонецПопытки;
		
		ПрефиксКакАтрибут = ОсновныеНастройкиDom.ПервыйДочерний.Префикс;
		Если ЗначениеЗаполнено(ПрефиксКакАтрибут) Тогда
			ПрефиксКакАтрибут = ПрефиксКакАтрибут + ":";
		КонецЕсли;
		
		РазыменовательПространствИменРезультата = Новый РазыменовательПространствИменDOM(ОсновныеНастройкиDom);
		Для Каждого locinfo Из locations Цикл
			
			tag = locinfo.Ключ;
			location = locinfo.Значение;
			
			// Удалить узел настройки технологического журнала
			Если ЗначениеЗаполнено(ПрефиксКакАтрибут) Тогда
				xpath = "/%prefix:config/%prefix:*[name()='%prefix:%tag']";
			Иначе
				xpath = "/xmlns:config/xmlns:*[name()='%tag']";
			КонецЕсли;
			
			xpath = СтрЗаменить(xpath, "%tag", tag);
			Если tag <> "dump" Тогда
				xpath = xpath + "[@location=""%loc""]";
				xpath = СтрЗаменить(xpath, "%loc", location);
			КонецЕсли;
			xpath = СтрЗаменить(xpath, "%prefix:", ПрефиксКакАтрибут);
			
			УзлыЖурнала = ОсновныеНастройкиDom.ВычислитьВыражениеXPath(	xpath, ОсновныеНастройкиDom, РазыменовательПространствИменРезультата);
			
			Пока Истина Цикл
				УзелЖурнала = УзлыЖурнала.ПолучитьСледующий();
				Если УзелЖурнала = Неопределено Тогда
					Прервать;
				КонецЕсли;
				НеобходимаПерезапись = Истина;
				УзелЖурнала.РодительскийУзел.УдалитьДочерний(УзелЖурнала);
			КонецЦикла;
		КонецЦикла;
		
		//Ищем комментарии и удаляем все узлы между комментариями
		//Для этого просто выбираем все дочерние узлы config
		Если ЗначениеЗаполнено(ПрефиксКакАтрибут) Тогда
			xpath = "/" + ПрефиксКакАтрибут + "config";
		Иначе
			xpath = "/xmlns:config";
		КонецЕсли;
		
		Если Параметры.Свойство("КонтрольнаяПроцедура") Тогда
			УзлыДляУдаления = Новый Массив;
			
			Комментарий = Справочники.КонтрольныеПроцедуры.ПолучитьКомментарийТЖ(Параметры.КонтрольнаяПроцедура);
			
			УзлыЖурнала = ОсновныеНастройкиDom.ВычислитьВыражениеXPath(xpath, ОсновныеНастройкиDom, РазыменовательПространствИменРезультата);
			ЕстьСледующийУзел = Истина;
			Пока ЕстьСледующийУзел Цикл
				УзелЖурнала = УзлыЖурнала.ПолучитьСледующий();
				Если УзелЖурнала = Неопределено Тогда
					ЕстьСледующийУзел = Ложь;
				Иначе
					УдалятьУзел = Ложь;
					Для Каждого ТекДочернийУзел Из УзелЖурнала.ДочерниеУзлы Цикл
						Если (ТипЗнч(ТекДочернийУзел) = Тип("КомментарийDOM")) И (ТекДочернийУзел.ЗначениеУзла = Комментарий) Тогда
							УдалятьУзел = НЕ УдалятьУзел;
							
							Если НЕ УдалятьУзел Тогда
								УзлыДляУдаления.Добавить(ТекДочернийУзел);
							КонецЕсли;
						КонецЕсли;
						
						Если УдалятьУзел Тогда
							УзлыДляУдаления.Добавить(ТекДочернийУзел);
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого ТекУзелДляУдаления Из УзлыДляУдаления Цикл
						УзелЖурнала.УдалитьДочерний(ТекУзелДляУдаления);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПрефиксКакАтрибут) Тогда
			xpath = "/" + ПрефиксКакАтрибут + "config/*";
		Иначе
			xpath = "/xmlns:config/*";
		КонецЕсли;
		УзлыЖурнала = ОсновныеНастройкиDom.ВычислитьВыражениеXPath(xpath, ОсновныеНастройкиDom, РазыменовательПространствИменРезультата);
				
		Если УзлыЖурнала.ПолучитьСледующий() = Неопределено Тогда
			НеобходимаПерезапись = Ложь;
			УдалитьФайлы(ИмяФайлаКонфигурации);
		ИначеЕсли НеобходимаПерезапись Тогда
			Запись = Новый ЗаписьТекста(ИмяФайлаКонфигурации, КодировкаТекста.UTF8);
			Запись.Записать(ОбщийКлиентСервер.ПолучитьСтрокуXMLИзDOM(ОсновныеНастройкиDom));
			Запись.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьФайлНастроекТехнологическогоЖурнала(Сервер, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ДополнительныеПараметрыТЖ") Тогда
		ДополнительныеПараметрыТЖ = ДополнительныеПараметры.ДополнительныеПараметрыТЖ;
	Иначе
		ДополнительныеПараметрыТЖ = Новый Соответствие;
	КонецЕсли; 
	
	КаталогНастроекТЖ = РегистрыСведений.ПараметрыРабочихСерверов.Получить(Новый Структура(
		"ОбъектКонтроля", Сервер
	))["КаталогНастроекТЖСетевой"];
	Если НЕ ЗначениеЗаполнено(КаталогНастроекТЖ) Тогда
		Возврат;
	КонецЕсли;
	
	КодыКонтрольныхПроцедур = ДополнительныеПараметры.КодыКонтрольныхПроцедур;
	
	Для Каждого КодПроцедурыПоля Из КодыКонтрольныхПроцедур Цикл
		КодПроцедуры = КодПроцедурыПоля.Ключ;
		ДопПоля = КодПроцедурыПоля.Значение;
		
		КонтрольнаяПроцедура = Общий.КонтрольнаяПроцедура(Сервер, КодПроцедуры);
		Если КонтрольнаяПроцедура = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ КонтрольнаяПроцедура.НастройкаВыполнена Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиПроцедуры = РегистрыСведений["Настройки" + КодПроцедуры].Получить(
			Новый Структура("КонтрольнаяПроцедура", КонтрольнаяПроцедура)
		);
		КаталогТЖСетевой = Общий.УникальныйКаталогДляКонтрольнойПроцедуры(КонтрольнаяПроцедура, НастройкиПроцедуры.КаталогТЖСетевой);
		КаталогТЖЛокальный = Общий.УникальныйКаталогДляКонтрольнойПроцедуры(КонтрольнаяПроцедура, НастройкиПроцедуры.КаталогТЖЛокальный);
		ДлительностьХраненияФайловТЖ = НастройкиПроцедуры.ДлительностьХраненияФайловТЖ;
		
		ПараметрыТЖ = Новый Структура(
			"Сетевой, СетевойУникальный, Локальный, ЛокальныйУникальный, Конфигурация, ДлительностьХраненияФайловТЖ",
			НастройкиПроцедуры.КаталогТЖСетевой,
			КаталогТЖСетевой,
			НастройкиПроцедуры.КаталогТЖЛокальный,
			КаталогТЖЛокальный,
			КаталогНастроекТЖ,
			ДлительностьХраненияФайловТЖ
		);
		Для Каждого ИмяПоля Из ДопПоля Цикл
			ПараметрыТЖ.Вставить(ИмяПоля, НастройкиПроцедуры[ИмяПоля]);
		КонецЦикла;
		
		ДопПараметрыТЖ = ДополнительныеПараметрыТЖ.Получить(КонтрольнаяПроцедура);
		Если ДопПараметрыТЖ <> Неопределено Тогда
			Для Каждого КлючЗначение Из ДопПараметрыТЖ Цикл
				ПараметрыТЖ.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
		КаталогТЖЛокальный_Старое = РегистрыСведений.РазмещениеТехнологическогоЖурнала.Получить(Новый Структура(
			"КонтрольнаяПроцедура", КонтрольнаяПроцедура
		))["ЛокальныйКаталогТЖ"];
		Если ЗначениеЗаполнено(КаталогТЖЛокальный_Старое) Тогда
			ПеремещенияЛогов = Новый Соответствие;
			ПеремещенияЛогов.Вставить("Локальный", КаталогТЖЛокальный_Старое);
			ПараметрыТЖ.Вставить("ПеремещенияЛогов", ПеремещенияЛогов);
		КонецЕсли;
		
		Если НЕ КонтрольнаяПроцедура.Выполнять ИЛИ КонтрольнаяПроцедура.Пауза Тогда
			ПараметрыТЖ.Вставить("ОтключениеТЖ", Истина);
		КонецЕсли;
		
		ПараметрыТЖ.Вставить("КонтрольнаяПроцедура", КонтрольнаяПроцедура);
		Если НастройкиПроцедуры.Свойство("АвтоматическаяНастройка") Тогда
			ПараметрыТЖ.Вставить("АвтоматическаяНастройка", НастройкиПроцедуры.АвтоматическаяНастройка);
		Иначе
			ПараметрыТЖ.Вставить("АвтоматическаяНастройка", Истина);
		КонецЕсли;
		
		Выполнить(КодПроцедуры + "Сервер.НастроитьТЖ(ПараметрыТЖ)");
		
		Если КаталогТЖЛокальный <> КаталогТЖЛокальный_Старое Тогда
			ЗаписьОНовомРазмещении = РегистрыСведений.РазмещениеТехнологическогоЖурнала.СоздатьМенеджерЗаписи();
			ЗаписьОНовомРазмещении.КонтрольнаяПроцедура = КонтрольнаяПроцедура;
			ЗаписьОНовомРазмещении.ЛокальныйКаталогТЖ = КаталогТЖЛокальный;
			ЗаписьОНовомРазмещении.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получить конфигурацию технологического журнала для анализа ожиданий на блокировках
//
// Параметры:
//  ИмяИБ - Строка, имя исследуемой информационной базы
//  ТипСУБД - Перечисление.ТипСУБД
//
// Возвращаемое значение:
//  Строка - XML настройка технологического журнала
//
Функция КонфигурацияГенерацииДампов(ПутьВыгрузкиДампов, Параметры = Неопределено) Экспорт
	Префикс = "";
	Конфигурация = СоздатьКонфигурациюТехнологическогоЖурнала(Префикс);
	
	Комментарий = Справочники.КонтрольныеПроцедуры.ПолучитьКомментарийТЖ(Параметры.КонтрольнаяПроцедура);
	КомментарийНачало = Конфигурация.СоздатьКомментарий(Комментарий);
	Конфигурация.ЭлементДокумента.ДобавитьДочерний(КомментарийНачало);
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура("ДлительностьХраненияФайловТЖ", 24);
	КонецЕсли;
	
	Если Параметры.Свойство("УровеньДетализацииДампов") Тогда
		УровеньДетализацииДампов = Параметры["УровеньДетализацииДампов"];
	Иначе
		УровеньДетализацииДампов = 3;
	КонецЕсли;
	
	ДобавитьСтрокуГенерацииДампов(Конфигурация, ПутьВыгрузкиДампов, УровеньДетализацииДампов, Префикс);
	
	РазделСобытий = ДобавитьРазделЖурнала(
		Конфигурация,
		"",
		Формат(Параметры["ДлительностьХраненияФайловТЖ"], "ЧГ=0"),
		Префикс
	);
	
	ОбязательныеСобытия = Новый Структура("EXCP, PROC, CONN, ADMIN");
	Для Каждого ПараметрыСобытия Из ОбязательныеСобытия Цикл
		ДобавитьУсловиеРавно(
			ДобавитьСобытие(РазделСобытий, Префикс), 
			"Name", 
			ПараметрыСобытия.Ключ,
			Префикс
		);
	КонецЦикла;
	
	ДобавитьСвойство(РазделСобытий, "all", Префикс);
	
	КомментарийЗавершение = Конфигурация.СоздатьКомментарий(Комментарий);
	Конфигурация.ЭлементДокумента.ДобавитьДочерний(КомментарийЗавершение);
	
	Данные = ОбщийКлиентСервер.ПолучитьСтрокуXMLИзDOM(Конфигурация);
	Возврат Данные;
	
КонецФункции

// Получить конфигурацию технологического журнала для анализа исключений
//
// Параметры:
//  Параметры - Структура
//
// Возвращаемое значение:
//  Строка - XML настройка технологического журнала
//
Функция КонфигурацияИсключения(Параметры = Неопределено) Экспорт
	Префикс = "";
	Конфигурация = СоздатьКонфигурациюТехнологическогоЖурнала(Префикс);
	
	Комментарий = Справочники.КонтрольныеПроцедуры.ПолучитьКомментарийТЖ(Параметры.КонтрольнаяПроцедура);
	КомментарийНачало = Конфигурация.СоздатьКомментарий(Комментарий);
	Конфигурация.ЭлементДокумента.ДобавитьДочерний(КомментарийНачало);
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура("ДлительностьХраненияФайловТЖ", 24);
	КонецЕсли;
	
	РазделСобытий = ДобавитьРазделЖурнала(
		Конфигурация,
		"",
		Формат(Параметры["ДлительностьХраненияФайловТЖ"], "ЧГ=0"),
		Префикс
	);
	
	ОбязательныеСобытия = Новый Структура("EXCP");
	Для Каждого ПараметрыСобытия Из ОбязательныеСобытия Цикл
		ДобавитьУсловиеРавно(
			ДобавитьСобытие(РазделСобытий, Префикс), 
			"Name", 
			ПараметрыСобытия.Ключ,
			Префикс
		);
	КонецЦикла;
	
	ДобавитьСвойство(РазделСобытий, "all", Префикс);
	
	КомментарийЗавершение = Конфигурация.СоздатьКомментарий(Комментарий);
	Конфигурация.ЭлементДокумента.ДобавитьДочерний(КомментарийЗавершение);
	
	Возврат ОбщийКлиентСервер.ПолучитьСтрокуXMLИзDOM(Конфигурация);
	
КонецФункции

// Получить конфигурацию технологического журнала для анализа вызовов кластера 1С
//
// Параметры:
//  Параметры - Структура
//
// Возвращаемое значение:
//  Строка - XML настройка технологического журнала
//
Функция КонфигурацияАнализаВызововКластера1С(Параметры = Неопределено) Экспорт
	
	Префикс = "";	
	Конфигурация = СоздатьКонфигурациюТехнологическогоЖурнала(Префикс);
	
	Комментарий = Справочники.КонтрольныеПроцедуры.ПолучитьКомментарийТЖ(Параметры.КонтрольнаяПроцедура);
	КомментарийНачало = Конфигурация.СоздатьКомментарий(Комментарий);
	Конфигурация.ЭлементДокумента.ДобавитьДочерний(КомментарийНачало);
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура("ДлительностьХраненияФайловТЖ", 24);
	КонецЕсли;
	
	РазделСобытий = ДобавитьРазделЖурнала(Конфигурация, "", Формат(Параметры["ДлительностьХраненияФайловТЖ"], "ЧГ=0"), Префикс);
	
	// Т.к. при анализ ТЖ процедурой "АнализВызововКластера1С"
	// открытие ТЖ внешней компонентой происходит с параметром 10
	// КипВнешнийКомпонент.ОткрытьТЖ(ТЖ, ИменаКаталогов, 10);
	// то, что бы не собирать лишнюю информацию, настраиваем сбор
	// только для rmngr и rphost
	ОбязательныеСобытия = Новый Структура("SCALL");
	Для Каждого ПараметрыСобытия Из ОбязательныеСобытия Цикл
		Событие = ДобавитьСобытие(РазделСобытий, Префикс);
		ДобавитьУсловиеРавно(Событие, "Name", ПараметрыСобытия.Ключ, Префикс);
		ДобавитьУсловиеРавно(Событие, "process", "rmngr", Префикс);
		
		Событие = ДобавитьСобытие(РазделСобытий, Префикс);
		ДобавитьУсловиеРавно(Событие, "Name", ПараметрыСобытия.Ключ, Префикс);
		ДобавитьУсловиеРавно(Событие, "process", "rphost", Префикс);
	КонецЦикла;
	
	ДобавитьСвойство(РазделСобытий, "all", Префикс);
	
	КомментарийЗавершение = Конфигурация.СоздатьКомментарий(Комментарий);
	Конфигурация.ЭлементДокумента.ДобавитьДочерний(КомментарийЗавершение);
	
	СтрокаXML = ОбщийКлиентСервер.ПолучитьСтрокуXMLИзDOM(Конфигурация);
	
	Возврат СтрокаXML;
	
КонецФункции

Функция НужнаЗаменаТЖ(СекцияТЖ, КаталогНастроекТЖ, РазмещениеТЖ, АвтоматическаяНастройка = Истина) Экспорт 
	
	Результат = Истина;
		
	СекцияТЖБезОбъявления = СтрЗаменить(СекцияТЖ, "<?xml version=""1.0""?>" + Символы.ПС + "<config xmlns=""http://v8.1c.ru/v8/tech-log"">" + Символы.ПС, "");
	СекцияТЖБезОбъявления = СтрЗаменить(СекцияТЖБезОбъявления, """>" + Символы.ПС + "		<event>", """" + " location=""" + РазмещениеТЖ + """>" + Символы.ПС + "		<event>") ; 
	СекцияТЖБезОбъявления = СтрЗаменить(СекцияТЖБезОбъявления, "</config>", "");
	КоличествоОтбрасываемыхСимволов = СтрНайти(СекцияТЖБезОбъявления, "	<log history=""") - 1;
	СекцияТЖБезОбъявления = Прав(СекцияТЖБезОбъявления, СтрДлина(СекцияТЖБезОбъявления) - КоличествоОтбрасываемыхСимволов);
	
	ИмяФайлаКонфигурации = ПолучитьИмяФайлаНастройкиТЖ(КаталогНастроекТЖ);
	// Если журнал уже включен
	
	Если НайтиФайлы(ИмяФайлаКонфигурации).Количество() = 1 Тогда
			
		// Получить текстовое представление включенного журнала
		Чтение = Новый ЧтениеТекста(ИмяФайлаКонфигурации);
		ОсновныеНастройки = Чтение.Прочитать();
		Чтение.Закрыть();
		
		Префикс = ПолучитьПрефиксТЖ(ОсновныеНастройки, ИмяФайлаКонфигурации);
		
		Если ЗначениеЗаполнено(Префикс) Тогда 
			ОсновныеНастройкиБезПрефикса = СтрЗаменить(ОсновныеНастройки, Префикс, "");
		Иначе 
			ОсновныеНастройкиБезПрефикса = ОсновныеНастройки;	
		КонецЕсли;
		
		Если АвтоматическаяНастройка Тогда
			Если СтрНайти(ОсновныеНастройкиБезПрефикса, СекцияТЖБезОбъявления) <> 0 Тогда 
				Результат = Ложь;	
			КонецЕсли;
		Иначе
			Если СтрНайти(ОсновныеНастройкиБезПрефикса, СекцияТЖБезОбъявления) <> 0 Тогда 
				Результат = Истина;
			Иначе
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;	
	
	Возврат Результат;	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить количество настроек журнала (количество элементов <log />)
//
// Параметры:
//  КонфигурацияDom - ДокументDom, конфигурация журнала в виде Dom
//
// Возвращаемое значение:
//  Число - количество настроек технологического журнала
//
Функция ПолучитьКоличествоНастроекЖурнала(КонфигурацияDom, Префикс)
	Если ЗначениеЗаполнено(Префикс) Тогда
		ВыражениеXPath = "/" + Префикс + ":config/" + Префикс + ":log";
	Иначе
		ВыражениеXPath = "/xmlns:config/xmlns:log";
	КонецЕсли;
	
	
	ПИ = ПолучитьРазименовательПространствИменТЖ(Префикс);
	УзлыЖурнала = КонфигурацияDom.ВычислитьВыражениеXPath(ВыражениеXPath, КонфигурацияDom, ПИ);
	Количество = 0;
	
	Пока УзлыЖурнала.ПолучитьСледующий() <> Неопределено Цикл
		Количество = Количество + 1;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

Процедура ИзменитьПрефиксЭлементов(Документ, Префикс, ИзменитьВГлубину = Истина)
	
	Если ИзменитьВГлубину Тогда
		Для Каждого Узел Из Документ.ДочерниеУзлы Цикл
			ИзменитьПрефиксЭлементов(Узел, Префикс);
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		Если Документ.Префикс <> Префикс Тогда 
			Документ.Префикс = Префикс;
		КонецЕсли;
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ИзменитьПрефиксЭлементов", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ТехнологическийЖурнал,,Комментарий);
	КонецПопытки;
	
КонецПроцедуры

// Установить каталог в который будут помещены файлы технологического журнала
// Если каталог уже указан, то установки каталога не произойдет
//
// Параметры:
//  КонфигурацияDom - ДокументDom, конфигурация технологического журнала
//  Каталог Строка, каталог в который будут помещены файлы журнала
//
// Возвращаемое значение:
//  Строка - Имя каталога, который будет использоваться для хранения журнала
//
Функция УстановитьКаталогЖурнала(КонфигурацияDom, Каталог, Префикс)
	
	ПространствоИмен = ПолучитьРазименовательПространствИменТЖ(Префикс);
	Если ЗначениеЗаполнено(Префикс) Тогда
		УзлыЖурнала = КонфигурацияDom.ВычислитьВыражениеXPath("/" + Префикс + ":config/" + Префикс + ":*[name()='" + Префикс + ":log' or name()='" + Префикс + ":plansql']", КонфигурацияDom, ПространствоИмен);
	Иначе
		УзлыЖурнала = КонфигурацияDom.ВычислитьВыражениеXPath("/xmlns:config/xmlns:*[name()='log' or name()='plansql']", КонфигурацияDom, ПространствоИмен);
	КонецЕсли;
	
	Расположение = "";
	
	Пока Истина Цикл
		УзелЖурнала = УзлыЖурнала.ПолучитьСледующий();
		Если УзелЖурнала = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Если УзелЖурнала.ЕстьАтрибут("location") Тогда
			Расположение = УзелЖурнала.ПолучитьАтрибут("location");
			Продолжить;
		КонецЕсли;
		
		УзелЖурнала.УстановитьАтрибут("location", Каталог);
	КонецЦикла;
	
	Если Не ПустаяСтрока(Расположение) Тогда
		Возврат Расположение;
	Иначе
		Возврат Каталог;
	КонецЕсли;
	
КонецФункции // УстановитьКаталогЖурнала()

// Получить разименователь пространств имен, необходимый для запросов XPath
//
// Возвращаемое значение:
//  РазыменовательПространствИменDOM
//
Функция ПолучитьРазименовательПространствИменТЖ(Префикс)
	
	Пространства = Новый Соответствие;
	Если ЗначениеЗаполнено(Префикс) Тогда
		Пространства.Вставить(Префикс, "http://v8.1c.ru/v8/tech-log");
	Иначе
		Пространства.Вставить("xmlns", "http://v8.1c.ru/v8/tech-log");
	КонецЕсли;
		
	Возврат Новый РазыменовательПространствИменDOM(Пространства);
	
КонецФункции

// Получить имя файла настройки технологического журнала
//
// Параметры:
//  КаталогНастройкиТЖ - Строка, каталог размещения logcfg.xml
//
// Возвращаемое значение:
//  Строка - полное имя logcfg.xml
//
Функция ПолучитьИмяФайлаНастройкиТЖ(КаталогНастройкиТЖ)
	
	Разделитель = ОбщийКлиентСервер.РазделительКаталоговОпределитьПоКаталогу(КаталогНастройкиТЖ);
	Возврат ОбщийКлиентСервер.СкорректироватьПуть(КаталогНастройкиТЖ) + Разделитель + "logcfg.xml";
	
КонецФункции

// Создать шаблон конфигурации технологического журнала
//
// Возвращаемое значение:
//  ДокументDOM - конфигурация технологического журнала
//
Функция СоздатьКонфигурациюТехнологическогоЖурнала(Префикс)
	
	Конфигурация = Новый ДокументDOM("http://v8.1c.ru/v8/tech-log", "config");
	Если ЗначениеЗаполнено(Префикс) Тогда
		Конфигурация.ЭлементДокумента.Префикс = Префикс;
	КонецЕсли;
	
	Возврат Конфигурация;
	
КонецФункции

// Добавить раздел для настройки генерации дампов
//
// Параметры:
//  Конфигурация - ДокументDOM, настройка технологического журанала
//
Функция ДобавитьСтрокуГенерацииДампов(Конфигурация, Размещение, УровеньДетализацииДампов, Префикс)
	Если ЗначениеЗаполнено(Префикс) Тогда
		Журнал = Конфигурация.СоздатьЭлемент(Префикс + ":dump");
	Иначе
		Журнал = Конфигурация.СоздатьЭлемент("dump");
	КонецЕсли;
	Журнал.УстановитьАтрибут("create", "true");
	Журнал.УстановитьАтрибут("location", Размещение);
	Журнал.УстановитьАтрибут("prntscrn", "false");
	Журнал.УстановитьАтрибут("type", Строка(УровеньДетализацииДампов));
	Журнал.УстановитьАтрибут("externaldump", "1");
	Конфигурация.ЭлементДокумента.ДобавитьДочерний(Журнал);
	
	Возврат Журнал;
	
КонецФункции

// Добавить раздел для настройки журнала
//
// Параметры:
//  Конфигурация - ДокументDOM, настройка технологического журанала
//
Функция ДобавитьРазделЖурнала(Конфигурация, Размещение, ДлительностьХранения, Префикс)
	Если ЗначениеЗаполнено(Префикс) Тогда
		Журнал = Конфигурация.СоздатьЭлемент(Префикс + ":log");
	Иначе
		Журнал = Конфигурация.СоздатьЭлемент("log");	
	КонецЕсли;
		
	Если Не ПустаяСтрока(Размещение) Тогда
		Журнал.УстановитьАтрибут("location", Размещение);
	КонецЕсли;
	
	Журнал.УстановитьАтрибут("history", Строка(ДлительностьХранения));
	Конфигурация.ЭлементДокумента.ДобавитьДочерний(Журнал);
	
	Возврат Журнал;
	
КонецФункции

// Добавить событие в журнал
//
// Параметры:
//  Родитель - ЭлементDOM, раздел журнала или свойство
//
// Возвращаемое значение:
//  ЭлементDOM - событие
//
Функция ДобавитьСобытие(Родитель, Префикс)
	Если ЗначениеЗаполнено(Префикс) Тогда
		ИмяLog = Префикс + ":log";
		ИмяProperty = Префикс + ":property";
	Иначе
		ИмяLog = "log";
		ИмяProperty = "property";
	КонецЕсли;
		
	Если Не (Родитель.ИмяУзла = ИмяLog Или Родитель.ИмяУзла = ИмяProperty) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Конфигурация = Родитель.ДокументВладелец;
	Если ЗначениеЗаполнено(Префикс) Тогда
		Событие = Конфигурация.СоздатьЭлемент(Префикс + ":event");
	Иначе
		Событие = Конфигурация.СоздатьЭлемент("event");
	КонецЕсли;
	
	Родитель.ДобавитьДочерний(Событие);
	
	Возврат Событие;
	
КонецФункции

// Добавить свойство в журнал
//
// Параметры:
//  Журнал - ЭлементDOM, место для размещения свойства
//  Имя - Строка, имя свойства
//
// Возвращаемое значение:
//  ЭлементDOM - свойство
//
Функция ДобавитьСвойство(Журнал, Имя, Префикс)
	
	Конфигурация = Журнал.ДокументВладелец;
	Если ЗначениеЗаполнено(Префикс) Тогда
		Свойство = Конфигурация.СоздатьЭлемент(Префикс + ":property");
	Иначе
		Свойство = Конфигурация.СоздатьЭлемент("property");
	КонецЕсли;
	
	Свойство.УстановитьАтрибут("name", Имя);
	Журнал.ДобавитьДочерний(Свойство);
	
	Возврат Свойство;
	
КонецФункции

// Добавить условие фильтрации события
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Тип - Строка, тип условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловие(Событие, Тип, Свойство, Значение, Префикс)
	
	Конфигурация = Событие.ДокументВладелец;
	Если ЗначениеЗаполнено(Префикс) Тогда
		Условие = Конфигурация.СоздатьЭлемент(Префикс + ":"+Тип);
	Иначе
		Условие = Конфигурация.СоздатьЭлемент(Тип);
	КонецЕсли;
	
	Условие.УстановитьАтрибут("property", Свойство);
	Условие.УстановитьАтрибут("value", Значение);
	Событие.ДобавитьДочерний(Условие);
	
КонецПроцедуры

// Добавить условие равенства
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеРавно(Событие, Свойство, Значение, Префикс)
	
	ДобавитьУсловие(Событие, "eq", Свойство, Значение, Префикс);
	
КонецПроцедуры

// Добавить условие не равенства
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеНеРавно(Событие, Свойство, Значение, Префикс)
	
	ДобавитьУсловие(Событие, "ne", Свойство, Значение, Префикс);
	
КонецПроцедуры

// Добавить условие больше
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеБольше(Событие, Свойство, Значение, Префикс) Экспорт
	
	ДобавитьУсловие(Событие, "gt", Свойство, Значение, Префикс);
	
КонецПроцедуры

// Добавить условие больше или равно
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеБольшеИлиРавно(Событие, Свойство, Значение, Префикс)
	
	ДобавитьУсловие(Событие, "ge", Свойство, Значение, Префикс);
	
КонецПроцедуры

// Добавить условие меньше
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеМеньше(Событие, Свойство, Значение, Префикс)
	
	ДобавитьУсловие(Событие, "lt", Свойство, Значение, Префикс);
	
КонецПроцедуры

// Добавить условие меньше или равно
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеМеньшеИлиРавно(Событие, Свойство, Значение, Префикс)
	
	ДобавитьУсловие(Событие, "le", Свойство, Значение, Префикс);
	
КонецПроцедуры

// Добавить условие меньше или равно
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеПодобно(Событие, Свойство, Значение, Префикс)
	
	ДобавитьУсловие(Событие, "like", Свойство, Значение, Префикс);
	
КонецПроцедуры

Функция ПолучитьПрефиксТЖ(ОсновныеНастройки, ИмяФайлаКонфигурации)
	
		// Получить Dom представление включенного журнала
		Попытка
			ОсновныеНастройкиDom = ОбщийКлиентСервер.ПолучитьDOMИзСтрокиXML(ОсновныеНастройки, Ложь);
		Исключение
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("ПолучитьПрефиксТЖ", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ТехнологическийЖурнал,,Комментарий);
				
			Попытка
				УдалитьФайлы(ИмяФайлаКонфигурации);
			Исключение
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации("ПолучитьПрефиксТЖ", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ТехнологическийЖурнал,,Комментарий);
			КонецПопытки;
			
			ВызватьИсключение "Не удается прочитать файл logcfg.xml. Возможно он поврежден. Исправьте файл logcfg.xml или удалите его.";
			
		КонецПопытки;
	
		ПрефиксКакАтрибут = ОсновныеНастройкиDom.ПервыйДочерний.Префикс;
		Если ЗначениеЗаполнено(ПрефиксКакАтрибут) Тогда
			ПрефиксКакАтрибут = ПрефиксКакАтрибут + ":";
		КонецЕсли;

		Возврат ПрефиксКакАтрибут;
		
КонецФункции

// Необходима для прохождения проверки конфигурации по поиску
// неиспользуемых процедур и функций.
// Процедуры и функции могут быть использованы в дальнейшей разработке
Процедура ЗаглушкаПроверкиКонфигурацииНеиспользуемыеПроцедурыИФункции() Экспорт
	Если Истина = Ложь Тогда
		ДобавитьУсловиеБольше(,,,);
		ДобавитьУсловиеБольшеИлиРавно(,,,);
		ДобавитьУсловиеМеньше(,,,);
		ДобавитьУсловиеМеньшеИлиРавно(,,,);
		ДобавитьУсловиеНеРавно(,,,);
		ДобавитьУсловиеПодобно(,,,);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти










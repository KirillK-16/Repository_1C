
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьАнализ(КонтрольнаяПроцедура) Экспорт
    
    Замер = ВнутренниеЗамеры.НачатьЗамер("Контроль регламентных заданий");
    
    ПараметрыИнцидента = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольВыполненияРегламентныхЗаданий(КонтрольнаяПроцедура, Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийОшибка);
    ИнцидентыСервер.ЗакрытьИнцидент(ПараметрыИнцидента.НаименованиеТипаИнцидента, ПараметрыИнцидента.КодИнцидента, Истина);
                
	НетПроблем = Истина;
    
    Настройки = Справочники.КонтрольныеПроцедуры.ПолучитьНастройкиКонтроляРегламентныхЗаданий(КонтрольнаяПроцедура);
	
	ТекущаяДатаСервер = ТекущаяДата();
	ТекущаяГраницаПоиска = ?(
		ТекущаяДатаСервер - Настройки.МаксимальнаяДатаПрочитанныхЗаписейСкрыто > 600,
		ТекущаяДатаСервер - 600,
		Настройки.МаксимальнаяДатаПрочитанныхЗаписейСкрыто
	);
	ГраницаПоиска = ТекущаяДата();
    
    Если ГраницаПоиска - ТекущаяГраницаПоиска < 300 Тогда
        ТекущаяГраницаПоиска = ГраницаПоиска - 300;
    КонецЕсли;
    			
	ТаблицаВыгрузки = ПрочитатьЖурналРегистрации(ТекущаяГраницаПоиска, ГраницаПоиска, КонтрольнаяПроцедура);
    
    НомерСообщения = 0;
    
    Если ТаблицаВыгрузки.Количество() = 0 Тогда
        ПараметрыИнцидента = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольВыполненияРегламентныхЗаданий(КонтрольнаяПроцедура, Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийНетСобытий);
        ТекстПредупреждения = НСтр("ru = 'Восстановить работоспособность регламентных заданий в информационной базе'");
        ИнцидентыСервер.ОткрытьИнцидент(
            ПараметрыИнцидента.НаименованиеТипаИнцидента,
            ПараметрыИнцидента.КодИнцидента,
            КонтрольнаяПроцедура.ОбъектКонтроля,
            ,
            ТекстПредупреждения,
            1,
            ,
            ,
            Перечисления.УровниИнцидентов.Ошибка);
            
        Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноЕстьПроблемы, ТекстПредупреждения);    
                    
		НетПроблем = Ложь;
		
	КонецЕсли;
	
	КопияТаблицыВыгрузки = ТаблицаВыгрузки.Скопировать();
	
	ПроверитьПервуюСекунду(ТаблицаВыгрузки, ТекущаяГраницаПоиска, КонтрольнаяПроцедура, НетПроблем, НомерСообщения);	
	УдалитьПарыНачалоКонец(КонтрольнаяПроцедура, ТаблицаВыгрузки, НетПроблем, НомерСообщения);
	ОбработатьЗавершенныеЗадания(КопияТаблицыВыгрузки, КонтрольнаяПроцедура, НетПроблем, НомерСообщения);
	
	Выборка = ПолучитьПросроченныеРегламентныеЗадания(КонтрольнаяПроцедура);
	Пока Выборка.Следующий() Цикл
		
		УдалитьЗаписьРегистра(КонтрольнаяПроцедура, Выборка.НомерСеансаФоновогоЗадания, Выборка.ОбластьДанных);
        ПараметрыИнцидента = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольВыполненияРегламентныхЗаданий(КонтрольнаяПроцедура, Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийТаймаут);
        ТекстПредупреждения = "Длительное выполнение регламентного задания " + Выборка.ИмяМетодаРегламентногоЗадания + ". Номер сеанса " + Выборка.НомерСеансаФоновогоЗадания + ".";
        ИнцидентыСервер.ОткрытьИнцидент(
            ПараметрыИнцидента.НаименованиеТипаИнцидента,
            ПараметрыИнцидента.КодИнцидента,
            КонтрольнаяПроцедура.ОбъектКонтроля,
            ,
            ТекстПредупреждения,
            1,
            ,
            ,
            Перечисления.УровниИнцидентов.Ошибка);

            
        Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноЕстьПроблемы, ТекстПредупреждения);
                
        НетПроблем = Ложь;
		
	КонецЦикла;
	
	ЗафиксироватьНовыеНачалаРегламентныхЗаданий(КонтрольнаяПроцедура, ТаблицаВыгрузки, Настройки);
	
	НаборЗаписейСНастройками = РегистрыСведений.НастройкиКонтрольРегламентныхЗаданий.СоздатьНаборЗаписей();	
	НаборЗаписейСНастройками.Отбор.КонтрольнаяПроцедура.Установить(КонтрольнаяПроцедура);
	НаборЗаписейСНастройками.Прочитать();
	НастройкиЗапись = НаборЗаписейСНастройками[0];
	НастройкиЗапись.МаксимальнаяДатаПрочитанныхЗаписейСкрыто = ГраницаПоиска;
	НаборЗаписейСНастройками.Записать();
    
    Если НетПроблем Тогда
        Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноПроблемНет);
        ПараметрыИнцидента = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольВыполненияРегламентныхЗаданий(КонтрольнаяПроцедура, Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийНетСобытий);
        ТипИнцидента = ПараметрыИнцидента.НаименованиеТипаИнцидента;
        ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, ПараметрыИнцидента.КодИнцидента, Истина);
    КонецЕсли;
    
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("Объект ЦКК", КонтрольнаяПроцедура.Наименование);
    ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрочитатьЖурналРегистрации(ВГраница, НГраница, КонтрольнаяПроцедура)
    
    СобытиеСтарт = "_$Job$_.Start";
	СобытиеЗавершеноУспешно = "_$Job$_.Succeed";
	СобытиеЗавершеноСОшибками = "_$Job$_.Fail";
    
	ИскомыеСобытия = Новый Массив;
	ИскомыеСобытия.Добавить(СобытиеСтарт);
	ИскомыеСобытия.Добавить(СобытиеЗавершеноУспешно);
	ИскомыеСобытия.Добавить(СобытиеЗавершеноСОшибками);
	
	Фильтр = Новый Структура("ДатаНачала,ДатаОкончания,Уровень,Событие");	
	Фильтр.ДатаНачала = ВГраница;
	Фильтр.ДатаОкончания = НГраница;
	Фильтр.Событие = ИскомыеСобытия;
	
    ТаблицаВыгрузки = ВыгрузитьЖурналРегистрацииВнешнейИБ(КонтрольнаяПроцедура, Фильтр, "Дата,Событие,Метаданные,Комментарий,Сеанс");
    
	ТаблицаВыгрузки.Колонки.Добавить("НомерСтрокиЖурнала");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяМетодаРегламентногоЗадания");
	ТаблицаВыгрузки.Колонки.Добавить("ОбластьДанных");
	
	НомерСтрокиЖурнала = 0;
    МассивСтрокУдалить = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаВыгрузки Цикл
		НомерСтрокиЖурнала = НомерСтрокиЖурнала + 1;
		СтрокаТаблицы.НомерСтрокиЖурнала = НомерСтрокиЖурнала;
        
        Если ЗначениеЗаполнено(СтрокаТаблицы.Метаданные) Тогда
            СтрокаТаблицы.ИмяМетодаРегламентногоЗадания = СтрЗаменить(СтрокаТаблицы.Метаданные, "ScheduledJob.", "");
        Иначе
            МассивСтрокУдалить.Добавить(СтрокаТаблицы);
        КонецЕсли;
    КонецЦикла;
    
    Для Каждого ТекСтрокаУдалить Из МассивСтрокУдалить Цикл
        ТаблицаВыгрузки.Удалить(ТекСтрокаУдалить);
    КонецЦикла;
            
    Возврат ТаблицаВыгрузки;
	
КонецФункции

Функция ВыгрузитьЖурналРегистрацииВнешнейИБ(КонтрольнаяПроцедура, Фильтр, Колонки)
    
    Файл = Новый Файл(ПолучитьИмяВременногоФайла());
    ВременныйКаталог = Файл.Путь + Файл.ИмяБезРасширения;
    СоздатьКаталог(ВременныйКаталог);
    
    СтрокаЗапуска = ПолучитьСтрокуЗапуска(КонтрольнаяПроцедура, Фильтр, Колонки, ВременныйКаталог);
    ЗапуститьПриложение(СтрокаЗапуска, КаталогВременныхФайлов());
    
    Файл = Новый Файл(ВременныйКаталог + ПолучитьРазделительПутиСервера() + "end");
    ИдетВыгрузка = НЕ Файл.Существует();
    
    ИдетВыгрузкаЗавершить = ТекущаяУниверсальнаяДатаВМиллисекундах() + 600000 * 2;
    Пока ИдетВыгрузка Цикл
        
        КипВнешнийКомпонент.Пауза(500);
        ИдетВыгрузка = НЕ Файл.Существует();
        
        Если ТекущаяУниверсальнаяДатаВМиллисекундах() >= ИдетВыгрузкаЗавершить Тогда
            ВызватьИсключение "Не дождался файла выгрузки журнала регистрации для " + КонтрольнаяПроцедура;
        КонецЕсли;
        
    КонецЦикла;
    
    ФайлАрхива = Новый Файл(ВременныйКаталог + ПолучитьРазделительПутиСервера() + "АрхивЖурналаРегистрации.zip");
    Если ФайлАрхива.Существует() Тогда
        ЧтениеZipФайла = Новый ЧтениеZipФайла(ФайлАрхива.ПолноеИмя);
        Если ЧтениеZipФайла.Элементы.Количество() = 1 Тогда
            ИмяФайлаЖурналаРегистрации = ЧтениеZipФайла.Элементы[0].Имя;
            ЧтениеZipФайла.Извлечь(ЧтениеZipФайла.Элементы[0],ВременныйКаталог);
            ЧтениеZipФайла.Закрыть();
        КонецЕсли;
    КонецЕсли;
    
    ТаблицаЖурналаРегистрации = Новый ТаблицаЗначений;
    ТаблицаЖурналаРегистрации.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
    ТаблицаЖурналаРегистрации.Колонки.Добавить("Событие", Новый ОписаниеТипов("Строка"));
    ТаблицаЖурналаРегистрации.Колонки.Добавить("Метаданные", Новый ОписаниеТипов("Строка"));
    ТаблицаЖурналаРегистрации.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
    ТаблицаЖурналаРегистрации.Колонки.Добавить("Сеанс", Новый ОписаниеТипов("Число"));
    
    ФайлЖурналаРегистрации = Новый Файл(ВременныйКаталог + ПолучитьРазделительПутиСервера() + ИмяФайлаЖурналаРегистрации);
    Если ФайлЖурналаРегистрации.Существует() Тогда
        ЧтениеXML = Новый ЧтениеXML;
        ЧтениеXML.ОткрытьФайл(ФайлЖурналаРегистрации.ПолноеИмя);
        Событие = "";
        ПолныйПуть = "";
        Пока ЧтениеXML.Прочитать() Цикл
            Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "v8e:Event" И Событие = "" Тогда
                Событие = "Event\";
                НовСтрока = ТаблицаЖурналаРегистрации.Добавить();
            ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "v8e:Date" Тогда
                ПолныйПуть = Событие + "Date";
            ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "v8e:Event" И Событие = "Event\"  Тогда
                ПолныйПуть = Событие + "Event";
            ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "v8e:Metadata" Тогда
                ПолныйПуть = Событие + "Metadata";
            ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "v8e:Comment" Тогда
                ПолныйПуть = Событие + "Comment";
            ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "v8e:Session" Тогда
                ПолныйПуть = Событие + "Session";
            ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И ПолныйПуть = "Event\Date" Тогда
                НовСтрока.Дата = XMLЗначение(Тип("Дата"), ЧтениеXML.Значение);
            ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И ПолныйПуть = "Event\Event" Тогда
                НовСтрока.Событие = ЧтениеXML.Значение;
            ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И ПолныйПуть = "Event\Metadata" Тогда
                НовСтрока.Метаданные = ЧтениеXML.Значение;
            ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И ПолныйПуть = "Event\Comment" Тогда
                НовСтрока.Комментарий = ЧтениеXML.Значение;
            ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст И ПолныйПуть = "Event\Session" Тогда
                НовСтрока.Сеанс = XMLЗначение(Тип("Число"), ЧтениеXML.Значение);
            ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "v8e:Session" Тогда
                Событие = "";
            КонецЕсли;
        КонецЦикла;
        
        ЧтениеXML.Закрыть();
        
    КонецЕсли;
    
    УдалитьФайлы(ВременныйКаталог);
    
    Возврат ТаблицаЖурналаРегистрации;
        
КонецФункции

Функция ПолучитьСтрокуЗапуска(КонтрольнаяПроцедура, Фильтр, Колонки, ВременныйКаталог)
    
    ПараметрыЗапуска = Новый Соответствие;
    ПараметрыЗапуска.Вставить("КаталогЗаписи", ВременныйКаталог); 
    ПараметрыЗапуска.Вставить("ФайлАрхива", "АрхивЖурналаРегистрации.zip");
    ПараметрыЗапуска.Вставить("Фильтр", Фильтр);
    ПараметрыЗапуска.Вставить("Колонки", Колонки);
    
    ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапуска);
	ПараметрыЗапускаПередать = ЗаписьJSON.Закрыть();
        
    ПараметрыЗапускаПередать = СтрЗаменить(ПараметрыЗапускаПередать, """", "☺");
    
    ИмяФайлаОбработки = КаталогВременныхФайлов() + "ЭкспортЖурналаРегистрации_" + СтрЗаменить(Общий.ВерсияЦКК(),".","_") + ".epf";
    ФайлОбработки = Новый Файл(ИмяФайлаОбработки);
    Если НЕ ФайлОбработки.Существует() Тогда
        ДвоичныеДанные = ПолучитьОбщийМакет("ЭкспортЖурналаРегистрации");
        ДвоичныеДанные.Записать(ИмяФайлаОбработки);
    КонецЕсли;
        
    Возврат Справочники.КонтрольныеПроцедуры.ПолучитьНастройкиВыгрузкиЖурналаРегистрации(КонтрольнаяПроцедура, ИмяФайлаОбработки, ПараметрыЗапускаПередать);
    
КонецФункции

Процедура ПроверитьПервуюСекунду(ТаблицаВыгрузки, ТекущаяГраницаПоиска, КонтрольнаяПроцедура, НетПроблем, НомерСообщения)
	
	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписиПервойСекунды = ТаблицаВыгрузки.СкопироватьКолонки();
	Пока ТаблицаВыгрузки.Количество() > 0 И ТаблицаВыгрузки[0].Дата = ТекущаяГраницаПоиска Цикл
		НоваяСтрока = ЗаписиПервойСекунды.Добавить();
		Для Каждого Колонка Из ТаблицаВыгрузки.Колонки Цикл
			НоваяСтрока[Колонка.Имя] = ТаблицаВыгрузки[0][Колонка.Имя];
		КонецЦикла;
		ТаблицаВыгрузки.Удалить(0);
	КонецЦикла;
	
	Если ЗаписиПервойСекунды.Количество() <> 0 Тогда
		ОбработатьЗавершенныеЗадания(ЗаписиПервойСекунды, КонтрольнаяПроцедура, НетПроблем, НомерСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПарыНачалоКонец(КонтрольнаяПроцедура, ТЗ, НетПроблем, НомерСообщения)
    
    СобытиеСтарт = "_$Job$_.Start";
    СобытиеЗавершеноСОшибками = "_$Job$_.Fail";
    
	ТекущееКоличество = ТЗ.Количество();
	Если ТекущееКоличество = 0 Тогда
		Возврат;
	КонецЕсли;
	ТЗ.Сортировать("Сеанс,ОбластьДанных,Дата,НомерСтрокиЖурнала");
	
	Сч = 0;
	Пока ТекущееКоличество - 1 > Сч Цикл
		
		Если ТЗ[Сч].Сеанс = ТЗ[Сч + 1].Сеанс И ТЗ[Сч].ОбластьДанных = ТЗ[Сч + 1].ОбластьДанных И ВРег(ТЗ[Сч].Событие) = ВРег(СобытиеСтарт) Тогда
			
            Если ВРег(ТЗ[Сч + 1].Событие) = ВРег(СобытиеЗавершеноСОшибками) Тогда
                ПараметрыИнцидента = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольВыполненияРегламентныхЗаданий(КонтрольнаяПроцедура, Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийОшибка);
                ТекстПредупреждения = "Регламентное задание завершено с ошибкой " + ТЗ[Сч + 1].ИмяМетодаРегламентногоЗадания + ". Номер сеанса " +ТЗ[Сч + 1].Сеанс + ". " + ТЗ[Сч + 1].Комментарий + ".";
                ИнцидентыСервер.ОткрытьИнцидент(
                    ПараметрыИнцидента.НаименованиеТипаИнцидента,
                    ПараметрыИнцидента.КодИнцидента,
                    КонтрольнаяПроцедура.ОбъектКонтроля,
                    ,
                    ТекстПредупреждения,
                    1,
                    ,
                    ,
                    Перечисления.УровниИнцидентов.Ошибка);

            
                Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноЕстьПроблемы, ТекстПредупреждения);
                
                 НетПроблем = Ложь;
			КонецЕсли;
			
			ТЗ.Удалить(Сч);
			ТЗ.Удалить(Сч);
			ТекущееКоличество = ТекущееКоличество - 2;
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЗавершенныеЗадания(ТаблицаВыгрузки, КонтрольнаяПроцедура, НетПроблем, НомерСообщения)
    
    СобытиеЗавершеноСОшибками = "_$Job$_.Fail";
    
	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонтрольнаяПроцедура", КонтрольнаяПроцедура);
	ПодготовитьВременнуюТаблицуСобытий(ТаблицаВыгрузки, Запрос);
	
	Выборка = ПолучитьЗавершенныеРегламентныеЗадания(Запрос);
	Пока Выборка.Следующий() Цикл
		
		УдалитьЗаписьРегистра(КонтрольнаяПроцедура, Выборка.НомерСеансаФоновогоЗадания, Выборка.ОбластьДанных);
        Если ВРег(Выборка.Событие) = ВРег(СобытиеЗавершеноСОшибками) Тогда
            ПараметрыИнцидента = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольВыполненияРегламентныхЗаданий(КонтрольнаяПроцедура, Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийОшибка);
            ТекстПредупреждения = "Регламентное задание завершено с ошибкой " + Выборка.ИмяМетодаРегламентногоЗадания + ". Номер сеанса " + Выборка.НомерСеансаФоновогоЗадания + ".";
            ИнцидентыСервер.ОткрытьИнцидент(
                ПараметрыИнцидента.НаименованиеТипаИнцидента,
                ПараметрыИнцидента.КодИнцидента,
                КонтрольнаяПроцедура.ОбъектКонтроля,
                ,
                ТекстПредупреждения,
                1,
                ,
                ,
                Перечисления.УровниИнцидентов.Ошибка);

            
            Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноЕстьПроблемы, ТекстПредупреждения);
            
            НетПроблем = Ложь;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПросроченныеРегламентныеЗадания(КонтрольнаяПроцедура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонтрольнаяПроцедура", КонтрольнаяПроцедура);
	Запрос.УстановитьПараметр("ТекущееВремя", ТекущаяДата());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременаРегламентныхЗаданий.НомерСеансаФоновогоЗадания КАК НомерСеансаФоновогоЗадания,
	|	ВременаРегламентныхЗаданий.ОбластьДанных КАК ОбластьДанных,
	|	ВременаРегламентныхЗаданий.ИмяМетодаРегламентногоЗадания КАК ИмяМетодаРегламентногоЗадания
	|ИЗ
	|	РегистрСведений.ВременаРегламентныхЗаданий КАК ВременаРегламентныхЗаданий
	|ГДЕ
	|	ВременаРегламентныхЗаданий.ТаймаутВыполнения < &ТекущееВремя
	|	И ВременаРегламентныхЗаданий.КонтрольнаяПроцедура = &КонтрольнаяПроцедура";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура УдалитьЗаписьРегистра(КонтрольнаяПроцедура, НомерСеансаФоновогоЗадания, ОбластьДанных)
	
	Запись = РегистрыСведений.ВременаРегламентныхЗаданий.СоздатьМенеджерЗаписи();
	Запись.КонтрольнаяПроцедура = КонтрольнаяПроцедура;
	Запись.НомерСеансаФоновогоЗадания = НомерСеансаФоновогоЗадания;
	Запись.ОбластьДанных = ОбластьДанных;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		Запись.Удалить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьНовыеНачалаРегламентныхЗаданий(КонтрольнаяПроцедура, ТЗ, Настройки)
    
    СобытиеСтарт = "_$Job$_.Start";
    
	ПараметрыОтбора = Новый Структура("Событие", СобытиеСтарт);
	СобытияСтарта = ТЗ.НайтиСтроки(ПараметрыОтбора);
	
	Если СобытияСтарта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ВременаРегламентныхЗаданий.СоздатьНаборЗаписей();
	Для Каждого Событие Из СобытияСтарта Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.КонтрольнаяПроцедура = КонтрольнаяПроцедура;
		Запись.НомерСеансаФоновогоЗадания = Событие.Сеанс;
		Запись.ОбластьДанных = Событие.ОбластьДанных;
		Запись.ТаймаутВыполнения = Событие.Дата + Настройки.ДопустимаяДлительностьВыполнения;
		Запись.ОбластьДанных = Событие.ОбластьДанных;
		Запись.ИмяМетодаРегламентногоЗадания = Событие.ИмяМетодаРегламентногоЗадания;
	КонецЦикла;
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

Процедура ПодготовитьВременнуюТаблицуСобытий(ТЗ, Запрос)
    
    СобытиеСтарт = "_$Job$_.Start";
    
	ТЗНовая = Новый ТаблицаЗначений;
	
	КвалификаторСтрока100 = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
	КвалификаторЧисло20_0 = Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный);
	КвалификаторСтрока200 = Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная);
	КвалификаторДатаВремя = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	ТЗНовая.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , КвалификаторДатаВремя));
	ТЗНовая.Колонки.Добавить("Событие", Новый ОписаниеТипов("Строка", , КвалификаторСтрока100));
	ТЗНовая.Колонки.Добавить("Сеанс", Новый ОписаниеТипов("Число", КвалификаторЧисло20_0));
	ТЗНовая.Колонки.Добавить("ОбластьДанных", Новый ОписаниеТипов("Число", КвалификаторЧисло20_0));
	ТЗНовая.Колонки.Добавить("ИмяМетодаРегламентногоЗадания", Новый ОписаниеТипов("Строка", , КвалификаторСтрока200));
	
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		
		Если ВРег(СтрокаТЗ.Событие) = ВРег(СобытиеСтарт) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЗНовая = ТЗНовая.Добавить();
		СтрокаТЗНовая.Дата = СтрокаТЗ.Дата;
		СтрокаТЗНовая.Событие = СтрокаТЗ.Событие;
		СтрокаТЗНовая.Сеанс = СтрокаТЗ.Сеанс;
		СтрокаТЗНовая.ОбластьДанных = СтрокаТЗ.ОбластьДанных;
		СтрокаТЗНовая.ИмяМетодаРегламентногоЗадания = СтрокаТЗ.ИмяМетодаРегламентногоЗадания;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТЗ", ТЗНовая);
	
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.Дата КАК Дата,
	|	ТЗ.Событие КАК Событие,
	|	ТЗ.Сеанс КАК Сеанс,
	|	ТЗ.ОбластьДанных КАК ОбластьДанных,
	|	ТЗ.ИмяМетодаРегламентногоЗадания КАК ИмяМетодаРегламентногоЗадания
	|ПОМЕСТИТЬ ВТ_События
	|ИЗ
	|	&ТЗ КАК ТЗ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сеанс,
	|	ОбластьДанных";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолучитьЗавершенныеРегламентныеЗадания(Запрос)
    
    Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_События";
    Результат = Запрос.Выполнить();
    
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременаРегламентныхЗаданий.НомерСеансаФоновогоЗадания КАК НомерСеансаФоновогоЗадания,
	|	ВТ_События.ОбластьДанных КАК ОбластьДанных,
	|	ВТ_События.Событие КАК Событие,
	|	ВТ_События.Дата КАК Дата,
	|	ВТ_События.ИмяМетодаРегламентногоЗадания КАК ИмяМетодаРегламентногоЗадания
	|ИЗ
	|	РегистрСведений.ВременаРегламентныхЗаданий КАК ВременаРегламентныхЗаданий
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   ВТ_События КАК ВТ_События
	|ПО
    |   ВременаРегламентныхЗаданий.НомерСеансаФоновогоЗадания = ВТ_События.Сеанс
	|	И (ВременаРегламентныхЗаданий.КонтрольнаяПроцедура = &КонтрольнаяПроцедура)
	|	И ВременаРегламентныхЗаданий.ОбластьДанных = ВТ_События.ОбластьДанных";
    
    Результат =  Запрос.Выполнить();
	Возврат Результат.Выбрать();
	
КонецФункции

#КонецОбласти


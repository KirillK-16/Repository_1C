
#Область СлужебныеПроцедурыИФункции

#Область РаботаСРегламентнымиЗаданиями

Процедура ЦентрМониторингаИмпортДанных() Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
    УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор("c9de1292-baaf-42fb-9371-0fa0ce80f441");
	Отбор = Новый Структура("Ключ, Состояние", УникальныйИдентификаторЗадания, СостояниеФоновогоЗадания.Активно);
	ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Запуск = Ложь;
	Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
		Запуск = Истина;
	КонецЕсли;
	
	Если Запуск Тогда
		ФоновыеЗадания.Выполнить("ЦентрМониторингаИмпортСлужебный.ИмпортДанныхФоновоеЗадание",, УникальныйИдентификаторЗадания, "Центр мониторинга: импорт данных");
    КонецЕсли;	
    
КонецПроцедуры

#Область РасчетИсторииПодробно

Процедура РасчетИсторииПодробно() Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
    // начало замера выполнения регзадания
    ДатаНачалаЗамераРегЗадания = ТекущаяУниверсальнаяДатаВМиллисекундах();
    
    ДатаНачалаРасчета = НачалоДня(Константы.ГраницаАктуальностиРасчетаИсторииПодробно.Получить() - Константы.ПериодПересчетаДанных.Получить() * 86400);
    ДатаОкончанияРасчета = НачалоДня(ТекущаяДата() - 86400);
    Если ДатаНачалаРасчета < Дата(2015,1,1) Тогда
        ДатаНачалаРасчета = Дата(2015,1,1);
    КонецЕсли;
    
    ДопИнфоРегЗадания = Формат(ДатаНачалаРасчета,"ДФ=dd.MM.yyyy") + ";" + Формат(ДатаОкончанияРасчета,"ДФ=dd.MM.yyyy");
    
    Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    СформироватьКрайниеПакеты(Запрос);
    
    ФоновоеЗаданиеЗаписи = Неопределено;
    
    Пока ДатаНачалаРасчета <= ДатаОкончанияРасчета Цикл
        
        ДатаНачалаЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
        
        Результат = ПолучитьРезультатИсторииПодробно(Запрос, ДатаНачалаРасчета);
        Параметры = Новый Массив;
        Параметры.Добавить(Результат);
        Параметры.Добавить(ДатаНачалаРасчета);
        
        ДопПараметры = Новый Соответствие;
        ДопПараметры.Вставить("Дополнительная информация", Строка(ДатаНачалаРасчета));
        Общий.ЗаписатьВнутреннийЗамерПроизводительности("ЦентрМониторинга.ПолучитьРезультатИсторииПодробно", ДатаНачалаЗамера, 10, Ложь, ДопПараметры);
        
        Если ФоновоеЗаданиеЗаписи = Неопределено Тогда
            ФоновоеЗаданиеЗаписи = ФоновыеЗадания.Выполнить("ЦентрМониторингаИмпортСлужебный.ЗаписатьРасчетИсторииПодробно", Параметры,, "ЦентрМониторинга: записать расчет истории подробно " + ДатаНачалаРасчета);
        Иначе
            ФоновоеЗаданиеЗаписи = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗаданиеЗаписи.УникальныйИдентификатор);
			Если ФоновоеЗаданиеЗаписи = Неопределено Тогда
				ФоновоеЗаданиеЗаписи = ФоновыеЗадания.Выполнить("ЦентрМониторингаИмпортСлужебный.ЗаписатьРасчетИсторииПодробно", Параметры,, "ЦентрМониторинга: записать расчет истории подробно " + ДатаНачалаРасчета);
			КонецЕсли;
            Если ФоновоеЗаданиеЗаписи.Состояние = СостояниеФоновогоЗадания.Активно Тогда
                Пока ФоновоеЗаданиеЗаписи.Состояние = СостояниеФоновогоЗадания.Активно Цикл
                    КипВнешнийКомпонент.Пауза(100);
                    ФоновоеЗаданиеЗаписи = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗаданиеЗаписи.УникальныйИдентификатор);
                КонецЦикла;
            КонецЕсли;
                
            Если ФоновоеЗаданиеЗаписи.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
                ФоновоеЗаданиеЗаписи = ФоновыеЗадания.Выполнить("ЦентрМониторингаИмпортСлужебный.ЗаписатьРасчетИсторииПодробно", Параметры,, "ЦентрМониторинга: записать расчет истории подробно " + ДатаНачалаРасчета);
            Иначе
                ВызватьИсключение ФоновоеЗаданиеЗаписи.ИнформацияОбОшибке;
            КонецЕсли;
            
        КонецЕсли;
        
        ДатаНачалаРасчета = НачалоДня(ДатаНачалаРасчета + 86400);
           
    КонецЦикла;
    
    // запись замера выполнения регзадания
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("Дополнительная информация", ДопИнфоРегЗадания);
    Общий.ЗаписатьВнутреннийЗамерПроизводительности("РегЗадание.РасчетИсторииПодробно", ДатаНачалаЗамера, 1800, Ложь, ДопПараметры);
    
КонецПроцедуры

Процедура ЗаписатьРасчетИсторииПодробно(Результат, ДатаНачалаРасчета) Экспорт
    
    ДатаНачалаЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
    
    НачатьТранзакцию();
    
    НаборЗаписей = РегистрыСведений.ИнформацияИсторияПодробно.СоздатьНаборЗаписей();
    
    Конфигурации = Новый Соответствие;
    
    НаборЗаписей.Отбор.ПериодЗаписи.Установить(ДатаНачалаРасчета);
    НаборЗаписей.Записать(Истина);
    
    Выборка = Результат.Выбрать();
    
    ТекущееКоличествоЗаписей = 0;
    МаксимальноеКоличествоЗаписей = 20000;
    Пока Выборка.Следующий() Цикл
        
        // заполнение ИнформацияИсторияПодробно
        НовЗапись = НаборЗаписей.Добавить();
        ТекущееКоличествоЗаписей = ТекущееКоличествоЗаписей + 1;
        
        НовЗапись.ИнформационнаяБаза = Выборка.ИнформационнаяБаза;
        НовЗапись.ПериодЗаписи = ДатаНачалаРасчета;
        НовЗапись.Конфигурация = Выборка.Конфигурация;
        НовЗапись.ВерсияКонфигурации = Выборка.ВерсияКонфигурации;
        НовЗапись.ВерсияПлатформы = Выборка.ВерсияПлатформы;
        НовЗапись.ВерсияОС = Выборка.ВерсияОС;
        НовЗапись.ТипПлатформы = Выборка.ТипПлатформы;
        НовЗапись.РежимРаботыКонфигурации = Выборка.РежимРаботыКонфигурации;
        НовЗапись.КоличествоПользователей = Выборка.КоличествоПользователей;
        
        Если Конфигурации[Выборка.Конфигурация] = Неопределено Тогда
            Конфигурации.Вставить(Выборка.Конфигурация, Новый Соответствие);
            Конфигурации[Выборка.Конфигурация].Вставить("ВерсийКонфигураций", Новый Соответствие);
            Конфигурации[Выборка.Конфигурация].Вставить("ВерсийПлатформы", Новый Соответствие);
        КонецЕсли;
        
        ВерсийКонфигураций = Конфигурации[Выборка.Конфигурация]["ВерсийКонфигураций"];
        ВерсийПлатформы = Конфигурации[Выборка.Конфигурация]["ВерсийПлатформы"];
                
        // подсчет количества ИБ по версиям конфигурации
        Если ВерсийКонфигураций[Выборка.ВерсияКонфигурации] = Неопределено Тогда
            ВерсийКонфигураций.Вставить(Выборка.ВерсияКонфигурации, 0);
        КонецЕсли;
        ВерсийКонфигураций[Выборка.ВерсияКонфигурации] = ВерсийКонфигураций[Выборка.ВерсияКонфигурации] + 1;
        
        // подсчет количества ИБ по версиям платформы
        Если ВерсийПлатформы[Выборка.ВерсияПлатформы] = Неопределено Тогда
            ВерсийПлатформы.Вставить(Выборка.ВерсияПлатформы, 0);
        КонецЕсли;
        ВерсийПлатформы[Выборка.ВерсияПлатформы] = ВерсийПлатформы[Выборка.ВерсияПлатформы] + 1;
        
        
        Если ТекущееКоличествоЗаписей >= МаксимальноеКоличествоЗаписей Тогда
            НаборЗаписей.ОбменДанными.Загрузка = Истина;
            НаборЗаписей.Записать(Ложь);
            НаборЗаписей.Очистить();
            ТекущееКоличествоЗаписей = 0;
        КонецЕсли;
        
    КонецЦикла;
    
    НаборЗаписей.ОбменДанными.Загрузка = Истина;
    НаборЗаписей.Записать(Ложь);
    НаборЗаписей.Очистить();
    ТекущееКоличествоЗаписей = 0;
    
    НаборЗаписейВерсииКонфигурации = РегистрыСведений.ИнформацияВерсииКонфигурации.СоздатьНаборЗаписей();
    НаборЗаписейВерсииКонфигурации.Отбор.ПериодЗаписи.Установить(ДатаНачалаРасчета);
    
    НаборЗаписейВерсииПлатформы = РегистрыСведений.ИнформацияВерсииПлатформы.СоздатьНаборЗаписей();
    НаборЗаписейВерсииПлатформы.Отбор.ПериодЗаписи.Установить(ДатаНачалаРасчета);
    
    Для Каждого ТекКонфигурация Из Конфигурации Цикл
        
        ВерсийКонфигураций = Конфигурации[ТекКонфигурация.Ключ]["ВерсийКонфигураций"];
        ВерсийПлатформы = Конфигурации[ТекКонфигурация.Ключ]["ВерсийПлатформы"];
        
        // запись количества ИБ по версиям конфигурации
        Для Каждого ТекВерсияКонфигурации Из ВерсийКонфигураций Цикл
            НовЗаписьВК = НаборЗаписейВерсииКонфигурации.Добавить();
            НовЗаписьВК.ПериодЗаписи = ДатаНачалаРасчета;
            НовЗаписьВК.Конфигурация = ТекКонфигурация.Ключ;
            НовЗаписьВК.ВерсияКонфигурации = ТекВерсияКонфигурации.Ключ;
            НовЗаписьВК.КоличествоИнформационныхБаз = ТекВерсияКонфигурации.Значение;
        КонецЦикла;
        
        // запись количества ИБ по версиям платформы
        
        Для Каждого ТекВерсияПлатформы Из ВерсийПлатформы Цикл
            НовЗаписьВП = НаборЗаписейВерсииПлатформы.Добавить();
            НовЗаписьВП.ПериодЗаписи = ДатаНачалаРасчета;
            НовЗаписьВП.Конфигурация = ТекКонфигурация.Ключ;
            НовЗаписьВП.ВерсияПлатформы = ТекВерсияПлатформы.Ключ;
            НовЗаписьВП.КоличествоИнформационныхБаз = ТекВерсияПлатформы.Значение;
        КонецЦикла;
        
    КонецЦикла;
    
    НаборЗаписейВерсииКонфигурации.Записать(Истина);
    НаборЗаписейВерсииПлатформы.Записать(Истина);
    
    Константы.ГраницаАктуальностиРасчетаИсторииПодробно.Установить(ДатаНачалаРасчета);
    
    ЗафиксироватьТранзакцию();
    
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("Дополнительная информация", Строка(ДатаНачалаРасчета));
    Общий.ЗаписатьВнутреннийЗамерПроизводительности("ЦентрМониторинга.ЗаписатьРасчетИсторииПодробно", ДатаНачалаЗамера, 10, Ложь, ДопПараметры);
    
КонецПроцедуры

Процедура СформироватьКрайниеПакеты(Запрос)
    
    Запрос.Текст = "
    |ВЫБРАТЬ
	|   ИнформационнаяБаза,
	|   МАКСИМУМ(Дата) КАК КрайняяДата
    |ПОМЕСТИТЬ
	|   КрайнийПакет
    |ИЗ
	|   Документ.ПакетЦентраМониторинга
    |СГРУППИРОВАТЬ ПО
	|   ИнформационнаяБаза
    |ИНДЕКСИРОВАТЬ ПО
	|   ИнформационнаяБаза,
	|   КрайняяДата
    |";
    
    Запрос.Выполнить();
    
КонецПроцедуры

Функция ПолучитьРезультатИсторииПодробно(Запрос, Период)
	
	// В первом пакете выбираем информационные базы и периоды их последних данных.
	// Чтобы в отбор не попадали данные от давно не используемых ИБ,
	// добавлен отбор через соединение с крайними пакетами,
	// где дата крайнего пакет есть в текущем дне или позже.
    Запрос.Текст = "ВЫБРАТЬ
                   |	ВсеИнфоБазы.ИнформационнаяБаза КАК ИнформационнаяБаза,
                   |	ВсеИнфоБазы.Период КАК Период
                   |ПОМЕСТИТЬ КрайниеПакеты
                   |ИЗ
                   |	(ВЫБРАТЬ
                   |		ИнформационныеБазыИстория.ИнформационнаяБаза КАК ИнформационнаяБаза,
                   |		МАКСИМУМ(ИнформационныеБазыИстория.Период) КАК Период
                   |	ИЗ
                   |		РегистрСведений.ИнформацияИстория КАК ИнформационныеБазыИстория
                   |	ГДЕ
                   |		ИнформационныеБазыИстория.Период <= &КонецДня
                   |	
                   |	СГРУППИРОВАТЬ ПО
                   |		ИнформационныеБазыИстория.ИнформационнаяБаза) КАК ВсеИнфоБазы
                   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КрайнийПакет КАК КрайнийПакет
                   |		ПО (КрайнийПакет.ИнформационнаяБаза = ВсеИнфоБазы.ИнформационнаяБаза)
                   |			И (КрайнийПакет.КрайняяДата >= &НачалоДня)
                   |
                   |ИНДЕКСИРОВАТЬ ПО
                   |	ИнформационнаяБаза,
                   |	Период
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |	ИнформационныеБазыИстория.ИнформационнаяБаза КАК ИнформационнаяБаза,
                   |	&Операция КАК ОперацияСтатистикиКонфигурации,
                   |	ИнформационныеБазыИстория.Период КАК Период,
                   |	ИнформационныеБазыИстория.Конфигурация КАК Конфигурация,
                   |	ИнформационныеБазыИстория.ВерсияКонфигурации КАК ВерсияКонфигурации,
                   |	ИнформационныеБазыИстория.ВерсияПлатформы КАК ВерсияПлатформы,
                   |	ИнформационныеБазыИстория.ВерсияОС КАК ВерсияОС,
                   |	ИнформационныеБазыИстория.ТипПлатформы КАК ТипПлатформы
                   |ПОМЕСТИТЬ ИнформационныеБазыИстория
                   |ИЗ
                   |	КрайниеПакеты КАК КрайниеПакеты
                   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияИстория КАК ИнформационныеБазыИстория
                   |		ПО (ИнформационныеБазыИстория.Период = КрайниеПакеты.Период)
                   |			И (ИнформационныеБазыИстория.ИнформационнаяБаза = КрайниеПакеты.ИнформационнаяБаза)
                   |
                   |ИНДЕКСИРОВАТЬ ПО
                   |	ИнформационныеБазыИстория.ИнформационнаяБаза,
                   |	ОперацияСтатистикиКонфигурации,
                   |	ИнформационныеБазыИстория.Период
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |	ИнформационныеБазыИстория.ИнформационнаяБаза КАК ИнформационнаяБаза,
                   |	ИнформационныеБазыИстория.Период КАК Период,
                   |	ИнформационныеБазыИстория.Конфигурация КАК Конфигурация,
                   |	ИнформационныеБазыИстория.ВерсияКонфигурации КАК ВерсияКонфигурации,
                   |	ИнформационныеБазыИстория.ВерсияПлатформы КАК ВерсияПлатформы,
                   |	ИнформационныеБазыИстория.ВерсияОС КАК ВерсияОС,
                   |	ИнформационныеБазыИстория.ТипПлатформы КАК ТипПлатформы,
                   |	РегОперации.Значение КАК КоличествоПользователей
                   |ПОМЕСТИТЬ ИнформационныеБазыСКоличествоПользователей
                   |ИЗ
                   |	ИнформационныеБазыИстория КАК ИнформационныеБазыИстория
                   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииСтатистикиКонфигурацииИстория КАК РегОперации
                   |		ПО ИнформационныеБазыИстория.ИнформационнаяБаза = РегОперации.ИнформационнаяБаза
                   |			И ИнформационныеБазыИстория.ОперацияСтатистикиКонфигурации = РегОперации.ОперацияСтатистикиКонфигурации
                   |			И ИнформационныеБазыИстория.Период = РегОперации.Период
                   |
                   |ИНДЕКСИРОВАТЬ ПО
                   |	ИнформационнаяБаза
                   |;
                   |
                   |////////////////////////////////////////////////////////////////////////////////
                   |ВЫБРАТЬ
                   |	ИнформационныеБазыСКоличествоПользователей.ИнформационнаяБаза КАК ИнформационнаяБаза,
                   |	ИнформационныеБазыСКоличествоПользователей.Конфигурация КАК Конфигурация,
                   |	ИнформационныеБазыСКоличествоПользователей.ВерсияКонфигурации КАК ВерсияКонфигурации,
                   |	ИнформационныеБазыСКоличествоПользователей.ВерсияПлатформы КАК ВерсияПлатформы,
                   |	ИнформационныеБазыСКоличествоПользователей.ВерсияОС КАК ВерсияОС,
                   |	ИнформационныеБазыСКоличествоПользователей.ТипПлатформы КАК ТипПлатформы,
                   |	ВыборкаРежимРаботыКонфигурации.РежимРаботыКонфигурации КАК РежимРаботыКонфигурации,
                   |	ИнформационныеБазыСКоличествоПользователей.КоличествоПользователей КАК КоличествоПользователей
                   |ИЗ
                   |	ИнформационныеБазыСКоличествоПользователей КАК ИнформационныеБазыСКоличествоПользователей
                   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                   |			КонфигурацияИнформационнойБазыИстория.ИнформационнаяБаза КАК ИнформационнаяБаза,
                   |			КонфигурацияИнформационнойБазыИстория.РежимРаботыКонфигурации КАК РежимРаботыКонфигурации
                   |		ИЗ
                   |			(ВЫБРАТЬ
                   |				КонфигурацияИнформационнойБазыИстория.ИнформационнаяБаза КАК ИнформационнаяБаза,
                   |				МАКСИМУМ(КонфигурацияИнформационнойБазыИстория.Период) КАК Период
                   |			ИЗ
                   |				РегистрСведений.КонфигурацияИнформационнойБазыИстория КАК КонфигурацияИнформационнойБазыИстория
                   |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнформационныеБазы КАК ИнформационныеБазы
                   |					ПО (ИнформационныеБазы.ИнформационнаяБаза = КонфигурацияИнформационнойБазыИстория.ИнформационнаяБаза)
                   |			ГДЕ
                   |				КонфигурацияИнформационнойБазыИстория.Период <= &КонецДня
                   |			
                   |			СГРУППИРОВАТЬ ПО
                   |				КонфигурацияИнформационнойБазыИстория.ИнформационнаяБаза) КАК Выборка
                   |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонфигурацияИнформационнойБазыИстория КАК КонфигурацияИнформационнойБазыИстория
                   |				ПО (КонфигурацияИнформационнойБазыИстория.Период = Выборка.Период)
                   |					И (КонфигурацияИнформационнойБазыИстория.ИнформационнаяБаза = Выборка.ИнформационнаяБаза)) КАК ВыборкаРежимРаботыКонфигурации
                   |		ПО ИнформационныеБазыСКоличествоПользователей.ИнформационнаяБаза = ВыборкаРежимРаботыКонфигурации.ИнформационнаяБаза
				   |;
				   |УНИЧТОЖИТЬ КрайниеПакеты;
				   |УНИЧТОЖИТЬ ИнформационныеБазыИстория;
				   |УНИЧТОЖИТЬ ИнформационныеБазыСКоличествоПользователей";
    
    Запрос.УстановитьПараметр("НачалоДня", НачалоДня(Период));
    Запрос.УстановитьПараметр("КонецДня", КонецДня(Период));
    Запрос.УстановитьПараметр("Операция", Константы.ОперацияСправочникПользователи.Получить());
    
    Результат = Запрос.Выполнить();
    
    Возврат Результат;
    
КонецФункции

#КонецОбласти

#Область ПересчетСтатистикиЗаполненияИБ

Процедура ПересчитатьСтатистикуЗаполненияИнформационныхБаз() Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
	Справочники.ПрофилиОбъектовМетаданных.ПересчитатьСтатистикуЗаполненияИнформационныхБаз();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеПрофилейОбъектовМетаданных

Процедура ОбновитьПрофилиОбъектовМетаданных() Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПрофилиОбъектовМетаданных.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ПрофилиОбъектовМетаданных КАК ПрофилиОбъектовМетаданных
	                      |ГДЕ
	                      |	НЕ ПрофилиОбъектовМетаданных.ПометкаУдаления
	                      |	И ПрофилиОбъектовМетаданных.ОбновлятьАвтоматически");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Справочники.ПрофилиОбъектовМетаданных.ЗаполнитьПоУмолчанию(Выборка.Ссылка);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область АнализАктивностиИнформационныхБаз

Процедура ПроанализироватьАктивностьИнформационныхБаз() Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
	ВремяНачалаВмс = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Справочники.НастройкиАнализаСостоянияИнформационнойБазы.ПровестиАнализИнформационныхБаз();
	
	Общий.ЗаписатьВнутреннийЗамерПроизводительности("АнализАктивностиИнформационныхБаз", ВремяНачалаВмс, 3600, Ложь,, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаРелизностиВерсий

Процедура ПроверитьРелизностьВерсий() Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
	ВремяНачалаВмс = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПараметрыПроверки = Константы.НастройкиПроверкиРелизности.Получить().Получить();
	Если ПараметрыПроверки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если НЕ ПараметрыПроверки.ПроверятьРелизностьВерсий Тогда
		Возврат;
	КонецЕсли;
	
	ПоследняяРелизнаяПлатформа = ПолучитьПоследнююРелизнуюПлатформу();
	СоответствиеСсылок = ПараметрыПроверки.СоответствиеСсылок;
	МассивКонфигураций = ПараметрыПроверки.МассивКонфигураций;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ВерсииКонфигурации.ВерсияЧисло КАК ВерсияЧисло,
	                      |	ВерсииКонфигурации.Ссылка КАК Ссылка
	                      |ПОМЕСТИТЬ ВТ_ПоследняяРелизная
	                      |ИЗ
	                      |	Справочник.ВерсииКонфигурации КАК ВерсииКонфигурации
	                      |ГДЕ
	                      |	ВерсииКонфигурации.Владелец = &Конфигурация
	                      |	И ВерсииКонфигурации.Релизная
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВерсииКонфигурации.ВерсияЧисло УБЫВ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ ПЕРВЫЕ 5
	                      |	МАКСИМУМ(ВерсииКонфигурации.ВерсияЧисло) КАК ВерсияЧисло,
	                      |	ВЫРАЗИТЬ(ВерсииКонфигурации.ВерсияЧисло / 10000 - 0.5 КАК ЧИСЛО(12, 0)) КАК Сборка
	                      |ПОМЕСТИТЬ ВТ_ТекущиеПоследниеРелизные
	                      |ИЗ
	                      |	Справочник.ВерсииКонфигурации КАК ВерсииКонфигурации
	                      |ГДЕ
	                      |	ВерсииКонфигурации.Владелец = &Конфигурация
	                      |	И ВерсииКонфигурации.Релизная
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВЫРАЗИТЬ(ВерсииКонфигурации.ВерсияЧисло / 10000 - 0.5 КАК ЧИСЛО(12, 0))
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВерсияЧисло УБЫВ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВерсииКонфигурации.Ссылка КАК ВерсияКонфигурации,
	                      |	ВерсииКонфигурации.Наименование КАК Наименование,
	                      |	ВерсииКонфигурации.Владелец КАК Конфигурация,
	                      |	ВТ_ПоследняяРелизная.ВерсияЧисло КАК ВерсияЧислоПоследней
	                      |ИЗ
	                      |	ВТ_ПоследняяРелизная КАК ВТ_ПоследняяРелизная
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииКонфигурации КАК ВерсииКонфигурации
	                      |		ПО (ВерсииКонфигурации.ВерсияЧисло > ВТ_ПоследняяРелизная.ВерсияЧисло)
	                      |ГДЕ
	                      |	ВерсииКонфигурации.Владелец = &Конфигурация
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ВерсииКонфигурации.Ссылка,
	                      |	ВерсииКонфигурации.Наименование,
	                      |	ВерсииКонфигурации.Владелец,
	                      |	ВТ_ТекущиеПоследниеРелизные.ВерсияЧисло
	                      |ИЗ
	                      |	ВТ_ТекущиеПоследниеРелизные КАК ВТ_ТекущиеПоследниеРелизные
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииКонфигурации КАК ВерсииКонфигурации
	                      |		ПО ((ВЫРАЗИТЬ(ВерсииКонфигурации.ВерсияЧисло / 10000 - 0.5 КАК ЧИСЛО(12, 0))) = ВТ_ТекущиеПоследниеРелизные.Сборка)
	                      |			И (ВерсииКонфигурации.ВерсияЧисло > ВТ_ТекущиеПоследниеРелизные.ВерсияЧисло)
	                      |			И (ВерсииКонфигурации.Владелец = &Конфигурация)");
		
	Для Каждого Конфигурация Из МассивКонфигураций Цикл
		Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
		ВыборкаВерсия = Запрос.Выполнить().Выбрать();
		ИмяПрограммы = СоответствиеСсылок.Получить(Конфигурация);
		Пока ВыборкаВерсия.Следующий() Цикл
			ЭтоРелизнаяВерсия = ЭтоРелизнаяВерсия(ИмяПрограммы, ВыборкаВерсия.Наименование, ПоследняяРелизнаяПлатформа, ПараметрыПроверки);
			Если ЭтоРелизнаяВерсия Тогда
				// Запись элемента
				ВерсияОбъект = ВыборкаВерсия.ВерсияКонфигурации.ПолучитьОбъект();
				ВерсияОбъект.Релизная = Истина;
				Попытка
					ВерсияОбъект.Записать();
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					ШаблонСтроки = "Не удалось записать версию конфигурации %1. Описани: %2";
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ВыборкаВерсия.Наименование, ОписаниеОшибки); 		
					ЗаписьЖурналаРегистрации("ФоновыеЗадания.ПроверкаРелизности", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаИмпортСлужебный, , ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
			// Пауза
			КипВнешнийКомпонент.Пауза(ПараметрыПроверки.ПаузаМеждуВерсиями * 1000);
		КонецЦикла;			
		КипВнешнийКомпонент.Пауза(ПараметрыПроверки.ПаузаМеждуКонфигурациями * 1000);
	КонецЦикла;
	
	Общий.ЗаписатьВнутреннийЗамерПроизводительности("ПроверкаРелизностиВерсий", ВремяНачалаВмс, 3600, Ложь,, Истина);
	
КонецПроцедуры

Функция ЭтоРелизнаяВерсия(ИмяТекущейПрограммы, ВерсияТекущейПрограммы, ВерсияПлатформы, ПараметрыПодключения)
	
	ЭтоРелизнаяВерсия = Ложь;
	
	URLОперации = ПараметрыПодключения.АдресСервиса;
	
	СценарийОбновления = "РабочееОбновление";
	
	ПараметрыЗапросаJSON = InfoRequestJSON(
		ИмяТекущейПрограммы,
		ВерсияТекущейПрограммы,
		"",
		"",
		ВерсияПлатформы,
		СценарийОбновления,
		);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , Неопределено);
	
	РезультатОтправки = ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		ПараметрыПодключения.Логин,
		ПараметрыПодключения.Пароль,
		ПараметрыОтправки);
		
	Если ЗначениеЗаполнено(РезультатОтправки.КодОшибки) Тогда
		ШаблонСтроки = "Ошибка при обращении к HTTP-ресурсу. Код ошибки: %1. Описание: %2";
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, РезультатОтправки.КодОшибки, РезультатОтправки.ИнформацияОбОшибке); 		
		ЗаписьЖурналаРегистрации("ФоновыеЗадания.ПроверкаРелизности", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаИмпортСлужебный, , ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;		
		
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"         , "");
	Результат.Вставить("Сообщение"         , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("ДоступноОбновление", Ложь);
	
	КомпонентОбновлениеКонфигурации = НовыйИнформацияОДоступномОбновленииКонфигурации();
	ОбновлениеПлатформы             = НовыйИнформацияОДоступномОбновленииПлатформы();
	Результат.Вставить("Конфигурация", КомпонентОбновлениеКонфигурации);
	Результат.Вставить("Платформа"   , ОбновлениеПлатформы);
		
	Попытка
		ЗаполнитьИнформациюОбОбновленииИзInfoResonseИзJSON(Результат, РезультатОтправки.Содержимое);
	Исключение
		ШаблонСтроки = "При разборе HTTP-ответа произошла ошибка %1";
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ОписаниеОшибки); 		
		ЗаписьЖурналаРегистрации("ФоновыеЗадания.ПроверкаРелизности", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаИмпортСлужебный, , ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Результат.Конфигурация.Версия)
		ИЛИ ЗначениеЗаполнено(Результат.Платформа.Версия)
		ИЛИ Результат.Конфигурация.ЕстьИнформацияВОтвете Тогда
		ЭтоРелизнаяВерсия = Истина;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Платформа.Версия) И ВерсияПлатформы <> Результат.Платформа.Версия Тогда
		ВерсияПлатформы = Результат.Платформа.Версия;
		ЗаписатьРелизнуюВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	Возврат ЭтоРелизнаяВерсия;
	
КонецФункции

Функция ПолучитьПоследнююРелизнуюПлатформу()
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ВерсииПлатформыЦентрМониторинга.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.ВерсииПлатформыЦентрМониторинга КАК ВерсииПлатформыЦентрМониторинга
	                      |ГДЕ
	                      |	ВерсииПлатформыЦентрМониторинга.Релизная
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВерсииПлатформыЦентрМониторинга.ВерсияЧисло УБЫВ");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Наименование;
	КонецЕсли;
	Возврат "0.0.0.0";
КонецФункции

Процедура ЗаписатьРелизнуюВерсиюПлатформы(ВерсияПлатформы)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВерсииПлатформыЦентрМониторинга.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ВерсииПлатформыЦентрМониторинга КАК ВерсииПлатформыЦентрМониторинга
	                      |ГДЕ
	                      |	ВерсииПлатформыЦентрМониторинга.Наименование = &Наименование");
	Запрос.УстановитьПараметр("Наименование", ВерсияПлатформы);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВерсияОбъект.Релизная = Истина;
		Попытка
			ВерсияОбъект.Записать();
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонСтроки = "Не удалось записать версию платформы %1. Описани: %2";
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ВерсияПлатформы, ОписаниеОшибки); 		
			ЗаписьЖурналаРегистрации("ФоновыеЗадания.ПроверкаРелизности", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаИмпортСлужебный, , ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область АвтоматическийАнализПроизводительности

Процедура ВыполнитьАнализПроблемПроизводительности() Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
	ВремяНачалаВмс = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РегистрыСведений.РезультатАвтоматическогоАнализаПроизводительности.АктуализироватьСтатусыОшибок();	
	Справочники.НастройкиАнализаПроблемПроизводительности.ВыполнитьАнализПроблемПроизводительности();
	РегистрыСведений.РезультатАвтоматическогоАнализаПроизводительности.ЗарегистрироватьОшибкиВоВнешнейСистеме();
	
	Общий.ЗаписатьВнутреннийЗамерПроизводительности("АвтоматическийАнализПроизводительности", ВремяНачалаВмс, 7200, Ложь,, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область АвтоматическийАнилизПроизводительностиПлатформы

Процедура РассчитатьПроизводительностьПлатформы() Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
	КоличествоФоновыхЗаданий = Константы.КоличествоФоновыхПроизводительностьПлатформы.Получить();
	КоличествоФоновыхЗаданий = ?(КоличествоФоновыхЗаданий = 0, 1, КоличествоФоновыхЗаданий);
	
	Запрос = Новый Запрос("ВЫБРАТЬ //Первые
	                      |	НастройкиРасчетаПроизводительностиПлатформы.ПрофильКлючевыхОпераций КАК ПрофильКлючевыхОпераций
	                      |ИЗ
	                      |	РегистрСведений.НастройкиРасчетаПроизводительностиПлатформы КАК НастройкиРасчетаПроизводительностиПлатформы
	                      |ГДЕ
	                      |	НастройкиРасчетаПроизводительностиПлатформы.РассчитанПо < &ТекущаяДата");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Первые", "Первые " + Формат(КоличествоФоновыхЗаданий,"ЧГ="));
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата())); 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПрофильКлючевыхОпераций = Выборка.ПрофильКлючевыхОпераций;
		КлючЗадания = Строка(ПрофильКлючевыхОпераций.УникальныйИдентификатор());
		Отбор = Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно);
		МассивФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Если МассивФЗ.Количество() = 0 Тогда
			ПараметрыФЗ = Новый Массив;
			ПараметрыФЗ.Добавить(ПрофильКлючевыхОпераций);
			НаименованиеФЗ = "Расчет производительности платформы по профилю ключевых операций " + Строка(ПрофильКлючевыхОпераций);
			ФЗ = ФоновыеЗадания.Выполнить("ЦентрМониторингаИмпортСлужебный.РассчитатьПроизводительностьПлатформыПоПрофилю", ПараметрыФЗ, КлючЗадания, НаименованиеФЗ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьПроизводительностьПлатформыПоПрофилю(Профиль) Экспорт
	РегистрыСведений.ПроизводительностьПлатформы.РассчитатьПроизводительностьПлатформыПоПрофилю(Профиль);
КонецПроцедуры

#КонецОбласти

#Область РасчетДанныхИнформационныхБаз

Процедура РассчитатьДанныеИнформационныхБаз() Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();	
	
	ВремяНачалаВмс = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РегистрыНакопления.ДанныеИнформационныхБаз.РассчитатьДанныеИнформационныхБаз();
	
	Общий.ЗаписатьВнутреннийЗамерПроизводительности("РасчетДанныхИнформационныхБаз", ВремяНачалаВмс, 7200, Ложь,, Истина);
	
КонецПроцедуры	

#КонецОбласти

#Область ПереносБизнесСтатистикиИзБуфера

Процедура ПеренестиБизнесСтатистикуИзБуфера() Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();	
	ВремяНачалаВмс = ТекущаяУниверсальнаяДатаВМиллисекундах();	
	РегистрыСведений.ОперацииБизнесСтатистикиБуфер.ПеренестиБизнесСтатистикуИзБуфера();	
	Общий.ЗаписатьВнутреннийЗамерПроизводительности("ПереносБизнесСтатистикиИзБуфера", ВремяНачалаВмс, 600, Ложь,, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеРегламентнымиЗаданиями

// Выполняет проверку и добавление регламентных заданий центра мониторинга.
//
Процедура ДобавитьРегламентныеЗадания() Экспорт
	
	МассивЗаданий = СписокРегламентныхЗаданий();      
	
	Для Каждого Элемент Из МассивЗаданий Цикл
		ПолучитьРегламентноеЗадание(Элемент, Истина);
	КонецЦикла;
	            	
КонецПроцедуры

// Выполняет удаление регламентных заданий центра мониторинга.
//
Процедура УдалитьРегламентныеЗадания() Экспорт
	
	МассивЗаданий = СписокРегламентныхЗаданий();      
	
	Для Каждого Элемент Из МассивЗаданий Цикл
		УдалитьРегламентноеЗадание(Элемент);
	КонецЦикла;
	            	
КонецПроцедуры   

Функция СписокРегламентныхЗаданий()
	
	МассивЗаданий = Новый Массив;
	МассивЗаданий.Добавить("АвтоматическийАнализПроизводительностиЦентрМониторинга");
	МассивЗаданий.Добавить("АнализАктивностиИнформационныхБаз");
	МассивЗаданий.Добавить("АнализПроизводительностиПлатформы");
	МассивЗаданий.Добавить("ОбновлениеПрофилейОбъектовМетаданных");
	МассивЗаданий.Добавить("ПересчетСтатистикиЗаполненияИБ");
	МассивЗаданий.Добавить("ПроверкаРелизностиВерсий");
	МассивЗаданий.Добавить("РасчетДанныхИнформационныхБаз");
	МассивЗаданий.Добавить("РасчетИсторииПодробно");
	МассивЗаданий.Добавить("ЦентрМониторингаИмпортДанных");
	МассивЗаданий.Добавить("ЦентрМониторингаПолучениеДампов");
	МассивЗаданий.Добавить("ЦентрМониторингаПереносБизнесСтатистикиИзБуфера");
	Возврат МассивЗаданий;
	
КонецФункции

Функция ПолучитьРегламентноеЗадание(ИмяРегламентногоЗадания, СоздатьНовое = Истина)
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", ИмяРегламентногоЗадания));
	Если Задания.Количество() = 0 Тогда
		Если СоздатьНовое Тогда
			Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные["РегламентныеЗадания"][ИмяРегламентногоЗадания]);
			Задание.Записать();
			Результат = Задание;
		КонецЕсли;
	Иначе
		Результат = Задания[0];
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура УдалитьРегламентноеЗадание(ИмяРегламентногоЗадания)
	РегЗадание = ПолучитьРегламентноеЗадание(ИмяРегламентногоЗадания, Ложь);
	Если РегЗадание <> Неопределено Тогда
		РегЗадание.Удалить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИмпортДанных

Процедура ИмпортДанныхФоновоеЗадание() Экспорт
	
	ИмпортироватьДанные = Константы.ИмпортироватьДанныеЦентрМониторингаИмпорт.Получить();
	ИмпортироватьДанныеСледующееЧтение = ТекущаяУниверсальнаяДатаВМиллисекундах() + 60000;
	
	КаталогиИмпортаНастройки = Константы.КаталогиЦентраМониторинга.Получить().Получить();
	Если КаталогиИмпортаНастройки = Неопределено Тогда
		ЗаписьЖурналаРегистрации("ЦентрМониторингаИмпорт", УровеньЖурналаРегистрации.Предупреждение, Метаданные.ОбщиеМодули.ЦентрМониторингаИмпортСлужебный,,"Не настроены каталоги центра мониторинга");
		Возврат;
	КонецЕсли;
	
	КаталогиИмпорта = Новый Массив;
	Для Каждого ТекКаталог Из КаталогиИмпортаНастройки Цикл
		Если ТекКаталог["Использовать"] Тогда
			КаталогиИмпорта.Добавить(ТекКаталог);
		КонецЕсли;
	КонецЦикла;
	
	
	КоличествоФоновыхЗаданий = Константы.КоличествоФоновыхЗаданийЗагрузкиЦентрМониторингаИмпорт.Получить();
	КоличествоФоновыхЗаданий = ?(КоличествоФоновыхЗаданий <> 0, КоличествоФоновыхЗаданий, 1);
	
	УказательНаКаталог = 0;
	Если КаталогиИмпорта.Количество() > 0 Тогда
		Выполнять = Истина;
	Иначе
		Выполнять = Ложь;
	КонецЕсли;
	
	ФоновыеЗаданияАктивные = Новый Соответствие;
	КаталогиВОбработке = Новый Соответствие;
	
	Пока Выполнять Цикл
        
        Если ТекущаяУниверсальнаяДатаВМиллисекундах() >= ИмпортироватьДанныеСледующееЧтение Тогда
            
            ИмпортироватьДанныеСледующееЧтение = ТекущаяУниверсальнаяДатаВМиллисекундах() + 60000;
            
            КоличествоФоновыхЗаданий = Константы.КоличествоФоновыхЗаданийЗагрузкиЦентрМониторингаИмпорт.Получить();
	        КоличествоФоновыхЗаданий = ?(КоличествоФоновыхЗаданий <> 0, КоличествоФоновыхЗаданий, 1);
            
            РегЗаданияМассив = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ЦентрМониторингаИмпортДанных));
			Если РегЗаданияМассив.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			РегЗадание = РегЗаданияМассив[0];                           			
            ВремяЗавершения = РегЗадание.Расписание.ВремяЗавершения;
            ТекДата = ТекущаяДата();
            Если ТекДата - НачалоДня(ТекДата) >= ВремяЗавершения - Дата(1,1,1) Тогда
                Выполнять = Ложь;
                Возврат;
            КонецЕсли;
                       
        КонецЕсли;
        
		КоличествоФоновыхЗаданийДляЗапуска = КоличествоФоновыхЗаданий - ФоновыеЗаданияАктивные.Количество();
		
		Если КоличествоФоновыхЗаданийДляЗапуска > 0 Тогда
			ТекущийКаталог = КаталогиИмпорта[УказательНаКаталог];
			КаталогиДляОбработки = ПолучитьКаталогиСДаннымиНаСервере(ТекущийКаталог["КаталогЗагрузки"], КоличествоФоновыхЗаданийДляЗапуска, КаталогиВОбработке);
			
			УказательНаКаталог = УказательНаКаталог + 1;
			Если УказательНаКаталог > КаталогиИмпорта.ВГраница() Тогда
				УказательНаКаталог = 0;
			КонецЕсли;
			
			Для Каждого ТекКаталогДляОбработки Из КаталогиДляОбработки Цикл
				УникальныйКлючЗадания = Новый УникальныйИдентификатор();
				ПараметрыФоновогоЗадания = Новый Массив;
				ПараметрыФоновогоЗадания.Добавить(ТекКаталогДляОбработки.ПолноеИмя);
				ПараметрыФоновогоЗадания.Добавить(ТекущийКаталог);
				ТекущееФоновоеЗадание = ФоновыеЗадания.Выполнить("ЦентрМониторингаИмпортСлужебный.ИмпортПакетовФоновоеЗадание", ПараметрыФоновогоЗадания, УникальныйКлючЗадания, "Центр мониторинга: импорт пакетов из " + ТекКаталогДляОбработки.ПолноеИмя);
				
				ФоновыеЗаданияАктивные.Вставить(ТекущееФоновоеЗадание.УникальныйИдентификатор, ТекКаталогДляОбработки.ПолноеИмя);
				КаталогиВОбработке.Вставить(ТекКаталогДляОбработки.ПолноеИмя, Истина);
			КонецЦикла;
		КонецЕсли;
		
		КипВнешнийКомпонент.Пауза(1000);
		
		// Проверка завершенных фоновых заданий
		КлючиФоновыхЗаданийДляУдаления = Новый Массив;
		Для Каждого ТекущееФоновоеЗаданиеАктивно Из ФоновыеЗаданияАктивные Цикл
			ТекущееФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ТекущееФоновоеЗаданиеАктивно.Ключ);
			Если ТекущееФоновоеЗадание <> Неопределено Тогда
				Если ТекущееФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
					КлючиФоновыхЗаданийДляУдаления.Добавить(ТекущееФоновоеЗаданиеАктивно.Ключ);
				КонецЕсли;
			Иначе
				КлючиФоновыхЗаданийДляУдаления.Добавить(ТекущееФоновоеЗаданиеАктивно.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		// По ключам завершенных фоновых заданий удаляем каталоги из <КаталогиВОбработке>
		// Удаляем само фоновое задание из <ТекущееФоновоеЗаданиеАктивно>
		Для Каждого ТекКлючФЗ Из КлючиФоновыхЗаданийДляУдаления Цикл
			КаталогиВОбработке.Удалить(ФоновыеЗаданияАктивные[ТекКлючФЗ]);
			ФоновыеЗаданияАктивные.Удалить(ТекКлючФЗ);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьКаталогиСДаннымиНаСервере(КаталогПоиска, КоличествоКаталогов, КаталогиВОбработке)
	ТекДата = НачалоМинуты(ТекущаяДата());
	
	КаталогиДанных = Новый Массив;
	
	КаталогиДат = НайтиФайлы(КаталогПоиска, "*.", Ложь);
	Для Каждого ТекКаталогДат Из КаталогиДат Цикл
		ДатаВремяКаталога = ТекКаталогДат.ИмяБезРасширения;
		
		КаталогиМинут = НайтиФайлы(ТекКаталогДат.ПолноеИмя, "*.*", Ложь);
		Для Каждого ТекКаталогМинут Из КаталогиМинут Цикл
			Если КаталогиВОбработке[ТекКаталогМинут.ПолноеИмя] = Неопределено Тогда
				ДатаВремяКаталогаМинут = ДатаВремяКаталога + ТекКаталогМинут.ИмяБезРасширения;
				ДатаВремяКаталогаМинут = СтрЗаменить(ДатаВремяКаталогаМинут, "-", "");
				
				ФайлыДанных = НайтиФайлы(ТекКаталогМинут.ПолноеИмя, "*.json", Ложь);
				Количество = ФайлыДанных.Количество();
				Если Количество > 0 Тогда
					Если Дата(ДатаВремяКаталогаМинут) <> ТекДата Тогда
						КаталогиДанных.Добавить(ТекКаталогМинут);
						Если КаталогиДанных.Количество() >= КоличествоКаталогов Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Попытка
						УдалитьФайлы(ТекКаталогМинут.ПолноеИмя);
					Исключение
						ШаблонКомментария = "Не удалось удалить каталог %1. Описание: %2";
						Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, ТекКаталогМинут.ПолноеИмя, ОписаниеОшибки());
						ЗаписьЖурналаРегистрации("ЦентрМониторингаИмпорт", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ЦентрМониторингаИмпортСлужебный,,Комментарий);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если КаталогиДанных.Количество() >= КоличествоКаталогов Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КаталогиДанных;
	
КонецФункции

Процедура ИмпортПакетовФоновоеЗадание(КаталогДанных, КаталогНастройка) Экспорт
	ДатаJSON_ISO_1С = Новый Соответствие;
	
	ФайлыДанных = НайтиФайлы(КаталогДанных, "*.json", Ложь);
	
	Для Каждого ТекФайл Из ФайлыДанных Цикл
		РезультатВыполнения = ИмпортПакетаДанных(ТекФайл.ПолноеИмя, ДатаJSON_ISO_1С, КаталогНастройка);
	КонецЦикла;
	
КонецПроцедуры

Функция ИмпортПакетаДанных(ИмяФайла, ДатаJSON_ISO_1С, ТекФайл)
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатВыполнения = 1;
	
	НачатьТранзакцию();
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
		СоответствиеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
                
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОбъектыБлокировок");
			ЭлементБлокировки.УстановитьЗначение("Объект", СоответствиеJSON["ib"]);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
        Исключение
            ОтменитьТранзакцию();
			РезультатВыполнения = 0;
			ЧтениеJSON.Закрыть();
			Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
			
			ЗаписатьЗамерПроизводительностиЗагрузкиПакета("Импорт пакета центра мониторинга TLOCK инф. базы", Длительность, СоответствиеJSON["ib"], СоответствиеJSON["pn"]);
			ЗаписьЖурналаРегистрации("Импорт пакета центра мониторинга", УровеньЖурналаРегистрации.Информация,,СоответствиеJSON["ib"], "РезультатВыполнения = 0; Длительность = " + Длительность);
        КонецПопытки;
        		
        Если РезультатВыполнения = 1 Тогда
            
            Если СоответствиеJSON["ib"] = "ae10f552-ce9f-4ad0-a4d7-3b471ed25fe8" Тогда
                ЧтениеJSON.Закрыть();
                ДействияСФайломПослеОбработки(ИмяФайла, РезультатВыполнения, ТекФайл);
                ЗафиксироватьТранзакцию();
            Иначе
                ЗаписатьПакет(СоответствиеJSON, ДатаJSON_ISO_1С);
                
                ЧтениеJSON.Закрыть();
                ДействияСФайломПослеОбработки(ИмяФайла, РезультатВыполнения, ТекФайл);
                ЗафиксироватьТранзакцию();
                
                Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
                
                ЗаписатьЗамерПроизводительностиЗагрузкиПакета("Импорт пакета центра мониторинга", Длительность, СоответствиеJSON["ib"], СоответствиеJSON["pn"]);
                ЗаписьЖурналаРегистрации("Импорт пакета центра мониторинга", УровеньЖурналаРегистрации.Информация,,СоответствиеJSON["ib"], "РезультатВыполнения = 1; Длительность = " + Длительность);
            КонецЕсли;
        КонецЕсли;
        
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЧтениеJSON.Закрыть();
		Если СтрНайти(Комментарий, "Центр мониторинга. Ожидаемая управляемая блокировка при создании элемента справочника") > 0 Тогда
			РезультатВыполнения = 0;
				
			ОтменитьТранзакцию();
			
			Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
			
			ЗаписатьЗамерПроизводительностиЗагрузкиПакета("Импорт пакета центра мониторинга TLOCK создание справочника", Длительность, СоответствиеJSON["ib"], СоответствиеJSON["pn"]);
			ЗаписьЖурналаРегистрации("Импорт пакета центра мониторинга", УровеньЖурналаРегистрации.Информация,,СоответствиеJSON["ib"], "РезультатВыполнения = 0; Длительность = " + Длительность);
		Иначе
			РезультатВыполнения = 2;
			
			ЗаписьЖурналаРегистрации("Импорт пакета центра мониторинга", УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
			
			ДействияСФайломПослеОбработки(ИмяФайла, РезультатВыполнения, ТекФайл);
			ОтменитьТранзакцию();
			Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
			
			ЗаписатьЗамерПроизводительностиЗагрузкиПакета("Импорт пакета центра мониторинга ошибка", Длительность, СоответствиеJSON["ib"], СоответствиеJSON["pn"]);
			Если СоответствиеJSON <> Неопределено И СоответствиеJSON["ib"] <> Неопределено Тогда
				ЗаписьЖурналаРегистрации("Импорт пакета центра мониторинга", УровеньЖурналаРегистрации.Ошибка,,СоответствиеJSON["ib"], "РезультатВыполнения = 2; Длительность = " + Длительность);
			Иначе
				ЗаписьЖурналаРегистрации("Импорт пакета центра мониторинга", УровеньЖурналаРегистрации.Ошибка,,ИмяФайла, "РезультатВыполнения = 2; Длительность = " + Длительность);
			КонецЕсли;
        КонецЕсли;
        
	КонецПопытки;
	
	Возврат РезультатВыполнения;
КонецФункции

Процедура ДействияСФайломПослеОбработки(ИмяФайла, РезультатВыполнения, ТекФайл)
	Файл = Новый Файл(ИмяФайла);
	РазделительПути = ПолучитьРазделительПути();
	
	Если РезультатВыполнения = 1 Тогда
		НовыйФайлСтрока = ТекФайл["КаталогУспешно"];
		Если Прав(НовыйФайлСтрока, 1) <> РазделительПути Тогда
			НовыйФайлСтрока = НовыйФайлСтрока + РазделительПути;
		КонецЕсли;
		НовыйФайлСтрока = НовыйФайлСтрока + Файл.ИмяБезРасширения + ".json_ok";
		
		ПереместитьФайл(ИмяФайла, НовыйФайлСтрока);		
	ИначеЕсли РезультатВыполнения = 2 Тогда
		НовыйФайлСтрока = ТекФайл["КаталогОшибка"];
		Если Прав(НовыйФайлСтрока, 1) <> РазделительПути Тогда
			НовыйФайлСтрока = НовыйФайлСтрока + РазделительПути;
		КонецЕсли;
		НовыйФайлСтрока = НовыйФайлСтрока + Файл.ИмяБезРасширения + ".json_bad";
		
		ПереместитьФайл(ИмяФайла, НовыйФайлСтрока);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПарсингJSON

Процедура ЗаписатьПакет(Пакет, ДатаJSON_ISO_1С)
	ВерсияПакета = Пакет["versionPacket"];
	ДатаПакета = ДатаJSON_ISO(Пакет["datePacket"], ДатаJSON_ISO_1С);
	
	РезультатЗаписиИнформационнойБазы = ЗаписатьИнформационнуюБазу(Пакет, ДатаПакета);
	ИнформационнаяБаза = РезультатЗаписиИнформационнойБазы.ИнформационнаяБаза;
	РегистраторПакета = РезультатЗаписиИнформационнойБазы.РегистраторПакета;
	
	ЗаписатьСекциюИнформацию(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета);
	ЗаписатьСекциюВерсииПодсистем(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета);
	ЗаписатьСекциюДампы(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета);
	ЗаписатьСекциюСтатистикаКонфигурации(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета);
	ЗаписатьСекциюФункциональныеОпцииКонфигурации(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета);
	ЗаписатьСекциюБизнесСтатистики(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета, ДатаJSON_ISO_1С);
	ЗаписатьСекциюВнутреннейСтатистики(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета, ДатаJSON_ISO_1С);
	ЗаписатьСекциюОценкаПроизводительности(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета, ДатаJSON_ISO_1С);
	ЗаписатьСекциюРасширенияКонфигурации(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета);
	ЗаписатьСекциюОбИспользованииПрофилей(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета);
	ЗаписатьСекциюОРезультатахОтправкиДампа(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета);
	ЗаписатьСекциюКонтактнойИнформации(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета);
	ЗаписатьСекциюОшибки(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета, ДатаJSON_ISO_1С);
КонецПроцедуры

#Область Информационная_База

Функция ЗаписатьИнформационнуюБазу(Пакет, ДатаПакета)
	ИнформационнаяБазаПакет = Новый Соответствие;
	ИнформационнаяБазаПакет.Вставить("ib", Пакет["ib"]);
	Если Пакет["ibConst"] = Неопределено Тогда
		ИнформационнаяБазаПакет.Вставить("ibConst", "");
	Иначе
		ИнформационнаяБазаПакет.Вставить("ibConst", Пакет["ibConst"]);
	КонецЕсли;
    ИнформационнаяБазаПакет.Вставить("pn", Пакет["pn"]);
	ИнформационнаяБазаПакет.Вставить("Конфигурация", Пакет["Конфигурация"]);
	ИнформационнаяБазаПакет.Вставить("ВерсияКонфигурации", Пакет["ВерсияКонфигурации"]);
	
	ИнформационнаяБаза = ЗагрузитьИнформационнуюБазу(ИнформационнаяБазаПакет);
	РегистраторПакета = Документы.ПакетЦентраМониторинга.СоздатьДокументРегистратор(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ДатаПакета);
	
	Результат = Новый Структура("ИнформационнаяБаза, РегистраторПакета", ИнформационнаяБаза, РегистраторПакета);
	
	Возврат Результат;
КонецФункции

Функция ЗагрузитьИнформационнуюБазу(ИнформационнаяБазаПакет)
    
    ТаблицаИнформационнаяБаза = Новый ТаблицаЗначений;
	ТаблицаИнформационнаяБаза.Колонки.Добавить("ib", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТаблицаИнформационнаяБаза.Колонки.Добавить("ibConst", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТаблицаИнформационнаяБаза.Колонки.Добавить("Конфигурация", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
	ТаблицаИнформационнаяБаза.Колонки.Добавить("ВерсияКонфигурации", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(25)));
	
	НоваяСтрока = ТаблицаИнформационнаяБаза.Добавить();
	НоваяСтрока.ib = ИнформационнаяБазаПакет["ib"];
	НоваяСтрока.ibConst = ИнформационнаяБазаПакет["ibConst"];
	НоваяСтрока.Конфигурация = ИнформационнаяБазаПакет["Конфигурация"];
	НоваяСтрока.ВерсияКонфигурации = ИнформационнаяБазаПакет["ВерсияКонфигурации"];
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаИнформационнаяБаза.ib КАК УникальныйИдентификаторПакет,
	|	ТаблицаИнформационнаяБаза.ibConst КАК УникальныйИдентификаторПостоянный,
	|	ТаблицаИнформационнаяБаза.Конфигурация КАК КонфигурацияПакет,
	|	ТаблицаИнформационнаяБаза.ВерсияКонфигурации КАК ВерсияКонфигурацииПакет
	|ПОМЕСТИТЬ
	|	ТаблицаИнформационнаяБаза
	|ИЗ
	|	&ТаблицаИнформационнаяБаза КАК ТаблицаИнформационнаяБаза
	|;
	|ВЫБРАТЬ
	|	ТаблицаИнформационнаяБаза.УникальныйИдентификаторПакет КАК УникальныйИдентификаторПакет,
	|	ТаблицаИнформационнаяБаза.УникальныйИдентификаторПостоянный КАК УникальныйИдентификаторПостоянный,
	|	СпрИнформационныеБазы.Ссылка КАК ИнформационнаяБазаСсылка,
    |   ISNULL(СпрИнформационныеБазы.НомерПакета, 0) КАК НомерПакета,
	|   ISNULL(СпрИнформационныеБазы.УникальныйИдентификаторПостоянный, """") КАК УникальныйИдентификаторПостоянныйСправочника,
	|	ТаблицаИнформационнаяБаза.КонфигурацияПакет КАК КонфигурацияПакет,
	|	СпрКонфигурации.Ссылка КАК КонфигурацияСсылка,
	|	ТаблицаИнформационнаяБаза.ВерсияКонфигурацииПакет КАК ВерсияКонфигурацииПакет,
	|	СпрВерсииКонфигурации.Ссылка КАК ВерсияКонфигурацииСсылка
	|ИЗ
	|	ТаблицаИнформационнаяБаза
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ИнформационныеБазы КАК СпрИнформационныеБазы
	|ПО
	|	СпрИнформационныеБазы.УникальныйИдентификатор = ТаблицаИнформационнаяБаза.УникальныйИдентификаторПакет
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Конфигурации КАК СпрКонфигурации
	|ПО
	|	СпрКонфигурации.Наименование =ТаблицаИнформационнаяБаза.КонфигурацияПакет
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ВерсииКонфигурации КАК СпрВерсииКонфигурации
	|ПО
	|	СпрВерсииКонфигурации.Наименование = ТаблицаИнформационнаяБаза.ВерсияКонфигурацииПакет
	|	И СпрВерсииКонфигурации.Владелец.Наименование =ТаблицаИнформационнаяБаза.КонфигурацияПакет
	|";
	Запрос.УстановитьПараметр("ТаблицаИнформационнаяБаза", ТаблицаИнформационнаяБаза);
	ТаблицаИнформационнаяБаза = Запрос.Выполнить().Выгрузить();
	
	ИнформационнаяБазаПараметры = ТаблицаИнформационнаяБаза[0];
	
	Если НЕ ЗначениеЗаполнено(ИнформационнаяБазаПараметры.ИнформационнаяБазаСсылка) Тогда
		ИнформационнаяБазаПараметры.ИнформационнаяБазаСсылка = Справочники.ИнформационныеБазы.СоздатьЭлементПоУникальномуИдентификатору(ИнформационнаяБазаПараметры.УникальныйИдентификаторПакет, ИнформационнаяБазаПакет["pn"]);
    Иначе
        Справочники.ИнформационныеБазы.ПроверитьКоллизию(ИнформационнаяБазаПараметры.ИнформационнаяБазаСсылка, ИнформационнаяБазаПараметры.НомерПакета, ИнформационнаяБазаПакет["pn"]); 
		Если ИнформационнаяБазаПараметры.УникальныйИдентификаторПостоянный <> ИнформационнаяБазаПараметры.УникальныйИдентификаторПостоянныйСправочника Тогда
			Справочники.ИнформационныеБазы.УстановитьПостоянныйУникальныйИдентификатор(ИнформационнаяБазаПараметры.ИнформационнаяБазаСсылка, ИнформационнаяБазаПараметры.УникальныйИдентификаторПостоянный);
		КонецЕсли;
    КонецЕсли;
    	
	Если НЕ ЗначениеЗаполнено(ИнформационнаяБазаПараметры.КонфигурацияСсылка) Тогда
		ИнформационнаяБазаПараметры.КонфигурацияСсылка = Справочники.Конфигурации.СоздатьЭлементПоНаименованию(ИнформационнаяБазаПараметры.КонфигурацияПакет);	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИнформационнаяБазаПараметры.ВерсияКонфигурацииСсылка) Тогда
		ИнформационнаяБазаПараметры.ВерсияКонфигурацииСсылка = Справочники.ВерсииКонфигурации.СоздатьЭлементПоНаименованию(ИнформационнаяБазаПараметры.ВерсияКонфигурацииПакет, ИнформационнаяБазаПараметры.КонфигурацияСсылка);
	КонецЕсли;
	
	Возврат ТаблицаИнформационнаяБаза;
    
КонецФункции

#КонецОбласти

#Область Информация

Процедура ЗаписатьСекциюИнформацию(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета)
	Если Пакет["info"] <> Неопределено Тогда
		ИнформацияСоответствие = Пакет["info"];
		
		ИнформацияПакет = Новый Соответствие;
		ИнформацияПакет.Вставить("ДатаПакета", ДатаПакета);
		ИнформацияПакет.Вставить("ВерсияОС", ИнформацияСоответствие["ВерсияОС"]);
		ИнформацияПакет.Вставить("ВерсияПриложения", ИнформацияСоответствие["ВерсияПриложения"]);
		ИнформацияПакет.Вставить("ИдентификаторКлиента", ИнформацияСоответствие["ИдентификаторКлиента"]);
		ИнформацияПакет.Вставить("ИмяКомпьютера", ИнформацияСоответствие["ИмяКомпьютера"]);
		ИнформацияПакет.Вставить("ОперативнаяПамять", ИнформацияСоответствие["ОперативнаяПамять"]);
		ИнформацияПакет.Вставить("Процессор", ИнформацияСоответствие["Процессор"]);
		ИнформацияПакет.Вставить("ТекущийКодЛокализации", ИнформацияСоответствие["ТекущийКодЛокализации"]);
		ИнформацияПакет.Вставить("ТекущийРежимЗапуска", ИнформацияСоответствие["ТекущийРежимЗапуска"]);
		ИнформацияПакет.Вставить("ТекущийЯзык", ИнформацияСоответствие["ТекущийЯзык"]);
		ИнформацияПакет.Вставить("ТекущийЯзыкСистемы", ИнформацияСоответствие["ТекущийЯзыкСистемы"]);
		ИнформацияПакет.Вставить("ТипПлатформы", ИнформацияСоответствие["ТипПлатформы"]);
		ИнформацияПакет.Вставить("ЧасовойПоясСеанса", ИнформацияСоответствие["ЧасовойПоясСеанса"]);
		ИнформацияПакет.Вставить("ИнформационнаяБаза", ИнформационнаяБаза[0].ИнформационнаяБазаСсылка);
		ИнформацияПакет.Вставить("Конфигурация", ИнформационнаяБаза[0].КонфигурацияСсылка);
		ИнформацияПакет.Вставить("ВерсияКонфигурации", ИнформационнаяБаза[0].ВерсияКонфигурацииСсылка);
		
		ЗагрузитьИнформацию(ИнформацияПакет, РегистраторПакета);
	Иначе
		ИнформацияПакет = Новый Соответствие;
		ИнформацияПакет.Вставить("ДатаПакета", ДатаПакета);
		ИнформацияПакет.Вставить("ВерсияОС", "Нет данных");
		ИнформацияПакет.Вставить("ВерсияПриложения", "0.0.0.0");
		ИнформацияПакет.Вставить("ИдентификаторКлиента", "Нет данных");
		ИнформацияПакет.Вставить("ИмяКомпьютера", "Нет данных");
		ИнформацияПакет.Вставить("ОперативнаяПамять", 0);
		ИнформацияПакет.Вставить("Процессор", "Нет данных");
		ИнформацияПакет.Вставить("ТекущийКодЛокализации", "Нет данных");
		ИнформацияПакет.Вставить("ТекущийРежимЗапуска", "Нет данных");
		ИнформацияПакет.Вставить("ТекущийЯзык", "Нет данных");
		ИнформацияПакет.Вставить("ТекущийЯзыкСистемы", "Нет данных");
		ИнформацияПакет.Вставить("ТипПлатформы", "Нет данных");
		ИнформацияПакет.Вставить("ЧасовойПоясСеанса", "Нет данных");
		ИнформацияПакет.Вставить("ИнформационнаяБаза", ИнформационнаяБаза[0].ИнформационнаяБазаСсылка);
		ИнформацияПакет.Вставить("Конфигурация", ИнформационнаяБаза[0].КонфигурацияСсылка);
		ИнформацияПакет.Вставить("ВерсияКонфигурации", ИнформационнаяБаза[0].ВерсияКонфигурацииСсылка);
		
		ЗагрузитьИнформацию(ИнформацияПакет, РегистраторПакета);		
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьИнформацию(ИнформацияПакет, РегистраторПакета)
	ДанныеДляХеша = ""
		+ ИнформацияПакет["Конфигурация"].УникальныйИдентификатор()
		+ ИнформацияПакет["ВерсияКонфигурации"].УникальныйИдентификатор()
		+ ИнформацияПакет["ВерсияПриложения"]
		+ ИнформацияПакет["ВерсияОС"]
		+ ИнформацияПакет["Процессор"]
		+ ИнформацияПакет["ТипПлатформы"]
		+ ИнформацияПакет["ЧасовойПоясСеанса"]
		+ ИнформацияПакет["ОперативнаяПамять"]
		+ ИнформацияПакет["ИмяКомпьютера"]
		+ ИнформацияПакет["ИдентификаторКлиента"]
		+ ИнформацияПакет["ТекущийЯзык"]
		+ ИнформацияПакет["ТекущийКодЛокализации"]
		+ ИнформацияПакет["ТекущийЯзыкСистемы"]
		+ ИнформацияПакет["ТекущийРежимЗапуска"];
		
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ДанныеДляХеша);
	ХешСумма = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	
	СтатусИнформации = ПроверитьСтатусИнформации(ИнформацияПакет["ИнформационнаяБаза"], ХешСумма);
	
	Если СтатусИнформации <> 2 Тогда
		ЗаписатьИнформацию(ИнформацияПакет, ХешСумма, СтатусИнформации, РегистраторПакета);
	КонецЕсли;
КонецФункции

// Возвращаемое значение
//	0 - нет записи по информационной базе
//	1 - ХешЗаписиИнформация не совпадает с переданным значением
//	2 - ХешЗаписиИнформация совпадает с переданным значением
//
Функция ПроверитьСтатусИнформации(ИнформационнаяБаза, ХешЗаписиИнформация)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХешЗаписиИнформация КАК ХешЗаписиИнформация
	|ИЗ
	|	РегистрСведений.ИнформационныеБазы КАК ИнформационныеБазы
	|ГДЕ
	|	ИнформационныеБазы.ИнформационнаяБаза = &ИнформационнаяБаза
	|";
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтатусПроверки = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.ХешЗаписиИнформация <> ХешЗаписиИнформация Тогда
			СтатусПроверки = 1;
		Иначе
			СтатусПроверки = 2;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
КонецФункции

Функция ЗаписатьИнформацию(ИнформацияПакет, ХешЗаписиИнформация, СтатусИнформации, РегистраторПакета)
	Если СтатусИнформации = 0 Тогда
		ИнформационныеБазыМенеджерЗаписи = РегистрыСведений.ИнформационныеБазы.СоздатьМенеджерЗаписи();
		ИнформационныеБазыМенеджерЗаписи.ИнформационнаяБаза = ИнформацияПакет["ИнформационнаяБаза"];
		ИнформационныеБазыМенеджерЗаписи.ХешЗаписиИнформация = ХешЗаписиИнформация;
		ИнформационныеБазыМенеджерЗаписи.Записать(Ложь);
	ИначеЕсли СтатусИнформации = 1 Тогда
		ИнформационныеБазыМенеджерЗаписи = РегистрыСведений.ИнформационныеБазы.СоздатьМенеджерЗаписи();
		ИнформационныеБазыМенеджерЗаписи.ИнформационнаяБаза = ИнформацияПакет["ИнформационнаяБаза"];
		ИнформационныеБазыМенеджерЗаписи.Прочитать();
		ИнформационныеБазыМенеджерЗаписи.ХешЗаписиИнформация = ХешЗаписиИнформация;
		ИнформационныеБазыМенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	ТаблицаИнформацияПараметры = ПолучитьОбъектыИнформация(ИнформацияПакет);
	ЗаписатьИнформациюСрезПоследних(ИнформацияПакет, ТаблицаИнформацияПараметры);
	ЗаписатьИнформациюИстория(ИнформацияПакет, ТаблицаИнформацияПараметры, РегистраторПакета);	
КонецФункции

Функция ПолучитьОбъектыИнформация(ИнформацияПакет)
	ТаблицаИнформация = Новый ТаблицаЗначений;
	ТаблицаИнформация.Колонки.Добавить("ВерсияПлатформы", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(25)));
	ТаблицаИнформация.Колонки.Добавить("ВерсияОС", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТаблицаИнформация.Колонки.Добавить("ТипПроцессора", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТаблицаИнформация.Колонки.Добавить("ТипПлатформы", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТаблицаИнформация.Колонки.Добавить("ЧасовойПоясСеанса", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	
	НоваяСтрока = ТаблицаИнформация.Добавить();
	НоваяСтрока.ВерсияПлатформы = ИнформацияПакет["ВерсияПриложения"];
	НоваяСтрока.ВерсияОС = ИнформацияПакет["ВерсияОС"];
	НоваяСтрока.ТипПроцессора = ИнформацияПакет["Процессор"];
	НоваяСтрока.ТипПлатформы = ИнформацияПакет["ТипПлатформы"];
	НоваяСтрока.ЧасовойПоясСеанса = ИнформацияПакет["ЧасовойПоясСеанса"];
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаИнформация.ВерсияПлатформы КАК ВерсияПлатформыПакет,
	|	ТаблицаИнформация.ВерсияОС КАК ВерсияОСПакет,
	|	ТаблицаИнформация.ТипПроцессора КАК ТипПроцессораПакет,
	|	ТаблицаИнформация.ТипПлатформы КАК ТипПлатформыПакет,
	|	ТаблицаИнформация.ЧасовойПоясСеанса КАК ЧасовойПоясСеансаПакет
	|ПОМЕСТИТЬ
	|	ТаблицаИнформация
	|ИЗ
	|	&ТаблицаИнформация КАК ТаблицаИнформация
	|;
	|ВЫБРАТЬ
	|	ТаблицаИнформация.ВерсияПлатформыПакет КАК ВерсияПлатформыПакет,
	|	СпрВерсииПлатформыЦентрМониторинга.Ссылка КАК ВерсияПлатформыСсылка,
	|	ТаблицаИнформация.ВерсияОСПакет КАК ВерсияОСПакет,
	|	СпрВерсииОС.Ссылка КАК ВерсияОССсылка,
	|	ТаблицаИнформация.ТипПроцессораПакет КАК ТипПроцессораПакет,
	|	СпрТипыПроцессоров.Ссылка КАК ТипПроцессораСсылка,
	|	ТаблицаИнформация.ТипПлатформыПакет КАК ТипПлатформыПакет,
	|	СпрТипыПлатформы.Ссылка КАК ТипПлатформыСсылка,
	|	ТаблицаИнформация.ЧасовойПоясСеансаПакет КАК ЧасовойПоясСеансаПакет,
	|	СпрЧасовыеПояса.Ссылка КАК ЧасовойПоясСеансаСсылка
	|ИЗ
	|	ТаблицаИнформация
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ВерсииПлатформыЦентрМониторинга КАК СпрВерсииПлатформыЦентрМониторинга
	|ПО
	|	СпрВерсииПлатформыЦентрМониторинга.Наименование = ТаблицаИнформация.ВерсияПлатформыПакет
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ВерсииОС КАК СпрВерсииОС
	|ПО
	|	СпрВерсииОС.Наименование = ТаблицаИнформация.ВерсияОСПакет
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ТипыПроцессоров КАК СпрТипыПроцессоров
	|ПО
	|	СпрТипыПроцессоров.Наименование = ТаблицаИнформация.ТипПроцессораПакет
	|ЛЕВОЕ СОЕДИНЕНИЕ                                                                                                	
	|	Справочник.ТипыПлатформы КАК СпрТипыПлатформы
	|ПО
	|	СпрТипыПлатформы.Наименование = ТаблицаИнформация.ТипПлатформыПакет
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ЧасовыеПояса КАК СпрЧасовыеПояса
	|ПО
	|	СпрЧасовыеПояса.Наименование = ТаблицаИнформация.ЧасовойПоясСеансаПакет
	|";
	
	Запрос.УстановитьПараметр("ТаблицаИнформация", ТаблицаИнформация);
	ТаблицаИнформация = Запрос.Выполнить().Выгрузить();
	ТаблицаИнформацияПараметры = ТаблицаИнформация[0];
	
	Если НЕ ЗначениеЗаполнено(ТаблицаИнформацияПараметры.ВерсияПлатформыСсылка) Тогда
		ТаблицаИнформацияПараметры.ВерсияПлатформыСсылка = Справочники.ВерсииПлатформыЦентрМониторинга.СоздатьЭлементПоНаименованию(ТаблицаИнформацияПараметры.ВерсияПлатформыПакет);	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТаблицаИнформацияПараметры.ВерсияОССсылка) Тогда
		ТаблицаИнформацияПараметры.ВерсияОССсылка = Справочники.ВерсииОС.СоздатьЭлементПоНаименованию(ТаблицаИнформацияПараметры.ВерсияОСПакет);	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТаблицаИнформацияПараметры.ТипПроцессораСсылка) Тогда
		ТаблицаИнформацияПараметры.ТипПроцессораСсылка = Справочники.ТипыПроцессоров.СоздатьЭлементПоНаименованию(ТаблицаИнформацияПараметры.ТипПроцессораПакет);	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТаблицаИнформацияПараметры.ТипПлатформыСсылка) Тогда
		ТаблицаИнформацияПараметры.ТипПлатформыСсылка = Справочники.ТипыПлатформы.СоздатьЭлементПоНаименованию(ТаблицаИнформацияПараметры.ТипПлатформыПакет);	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТаблицаИнформацияПараметры.ЧасовойПоясСеансаСсылка) Тогда
		ТаблицаИнформацияПараметры.ЧасовойПоясСеансаСсылка = Справочники.ЧасовыеПояса.СоздатьЭлементПоНаименованию(ТаблицаИнформацияПараметры.ЧасовойПоясСеансаПакет);	
	КонецЕсли;
	
	Возврат ТаблицаИнформацияПараметры;
КонецФункции

Процедура ЗаписатьИнформациюСрезПоследних(ИнформацияПакет, ТаблицаИнформацияПараметры)
	ИнформацияСрезПоследнихНаборЗаписей = РегистрыСведений.ИнформацияСрезПоследних.СоздатьНаборЗаписей();
	ИнформацияСрезПоследнихНаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформацияПакет["ИнформационнаяБаза"]);
	
	ИнформацияСрезПоследнихНоваяЗапись = ИнформацияСрезПоследнихНаборЗаписей.Добавить();
	ИнформацияСрезПоследнихНоваяЗапись.Конфигурация = ИнформацияПакет["Конфигурация"];
	ИнформацияСрезПоследнихНоваяЗапись.ВерсияКонфигурации = ИнформацияПакет["ВерсияКонфигурации"];
	ИнформацияСрезПоследнихНоваяЗапись.ВерсияПлатформы = ТаблицаИнформацияПараметры.ВерсияПлатформыСсылка;
	ИнформацияСрезПоследнихНоваяЗапись.ВерсияОС = ТаблицаИнформацияПараметры.ВерсияОССсылка;
	ИнформацияСрезПоследнихНоваяЗапись.ТипПроцессора = ТаблицаИнформацияПараметры.ТипПроцессораСсылка;
	ИнформацияСрезПоследнихНоваяЗапись.ТипПлатформы = ТаблицаИнформацияПараметры.ТипПлатформыСсылка;
	ИнформацияСрезПоследнихНоваяЗапись.ЧасовойПоясСеанса = ТаблицаИнформацияПараметры.ЧасовойПоясСеансаСсылка;
	
	ОперативнаяПамятьСтр = СтрЗаменить(ИнформацияПакет["ОперативнаяПамять"], " ", "");
	ОперативнаяПамятьСтр = СтрЗаменить(ИнформацияПакет["ОперативнаяПамять"], Символ(160), "");
	ИнформацияСрезПоследнихНоваяЗапись.ОперативнаяПамять = Число(ОперативнаяПамятьСтр);
	
	ИнформацияСрезПоследнихНоваяЗапись.ИнформационнаяБаза = ИнформацияПакет["ИнформационнаяБаза"];
	ИнформацияСрезПоследнихНоваяЗапись.ИмяКомпьютера = ИнформацияПакет["ИмяКомпьютера"];
	ИнформацияСрезПоследнихНоваяЗапись.ИдентификаторКлиента = ИнформацияПакет["ИдентификаторКлиента"];
	ИнформацияСрезПоследнихНоваяЗапись.ТекущийЯзык = ИнформацияПакет["ТекущийЯзык"];
	ИнформацияСрезПоследнихНоваяЗапись.ТекущийКодЛокализации = ИнформацияПакет["ТекущийКодЛокализации"];
	ИнформацияСрезПоследнихНоваяЗапись.ТекущийЯзыкСистемы = ИнформацияПакет["ТекущийЯзыкСистемы"];
	ИнформацияСрезПоследнихНоваяЗапись.ТекущийРежимЗапуска = ИнформацияПакет["ТекущийРежимЗапуска"];
	
	ИнформацияСрезПоследнихНаборЗаписей.Записать(Истина);
КонецПроцедуры

Процедура ЗаписатьИнформациюИстория(ИнформацияПакет, ТаблицаИнформацияПараметры, РегистраторПакета)
	ИнформацияИсторияНаборЗаписей = РегистрыСведений.ИнформацияИстория.СоздатьНаборЗаписей();
	ИнформацияИсторияНаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформацияПакет["ИнформационнаяБаза"]);
	ИнформацияИсторияНаборЗаписей.Отбор.Период.Установить(ИнформацияПакет["ДатаПакета"]);
	
	ИнформацияИсторияНоваяЗапись = ИнформацияИсторияНаборЗаписей.Добавить();
	ИнформацияИсторияНоваяЗапись.Период = ИнформацияПакет["ДатаПакета"];
	ИнформацияИсторияНоваяЗапись.Конфигурация = ИнформацияПакет["Конфигурация"];
	ИнформацияИсторияНоваяЗапись.ВерсияКонфигурации = ИнформацияПакет["ВерсияКонфигурации"];
	ИнформацияИсторияНоваяЗапись.ВерсияПлатформы = ТаблицаИнформацияПараметры.ВерсияПлатформыСсылка;
	ИнформацияИсторияНоваяЗапись.ВерсияОС = ТаблицаИнформацияПараметры.ВерсияОССсылка;
	ИнформацияИсторияНоваяЗапись.ТипПроцессора = ТаблицаИнформацияПараметры.ТипПроцессораСсылка;
	ИнформацияИсторияНоваяЗапись.ТипПлатформы = ТаблицаИнформацияПараметры.ТипПлатформыСсылка;
	ИнформацияИсторияНоваяЗапись.ЧасовойПоясСеанса = ТаблицаИнформацияПараметры.ЧасовойПоясСеансаСсылка;
	
	ОперативнаяПамятьСтр = СтрЗаменить(ИнформацияПакет["ОперативнаяПамять"], " ", "");
	ОперативнаяПамятьСтр = СтрЗаменить(ИнформацияПакет["ОперативнаяПамять"], Символ(160), "");
	ИнформацияИсторияНоваяЗапись.ОперативнаяПамять = Число(ОперативнаяПамятьСтр);
	
	ИнформацияИсторияНоваяЗапись.ИнформационнаяБаза = ИнформацияПакет["ИнформационнаяБаза"];
	ИнформацияИсторияНоваяЗапись.ИмяКомпьютера = ИнформацияПакет["ИмяКомпьютера"];
	ИнформацияИсторияНоваяЗапись.ИдентификаторКлиента = ИнформацияПакет["ИдентификаторКлиента"];
	ИнформацияИсторияНоваяЗапись.ТекущийЯзык = ИнформацияПакет["ТекущийЯзык"];
	ИнформацияИсторияНоваяЗапись.ТекущийКодЛокализации = ИнформацияПакет["ТекущийКодЛокализации"];
	ИнформацияИсторияНоваяЗапись.ТекущийЯзыкСистемы = ИнформацияПакет["ТекущийЯзыкСистемы"];
	ИнформацияИсторияНоваяЗапись.ТекущийРежимЗапуска = ИнформацияПакет["ТекущийРежимЗапуска"];
	
	ИнформацияИсторияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	Если РегистраторПакета.ЭтоНовый Тогда
		ИнформацияИсторияНаборЗаписей.Записать(Ложь);
	Иначе
		ИнформацияИсторияНаборЗаписей.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВерсииПодсистем

Процедура ЗаписатьСекциюВерсииПодсистем(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета)
	Если Пакет["versions"] <> Неопределено Тогда
		ПодсистемыСоответствие = Пакет["versions"];
		ПодсистемыПакет = Новый Соответствие;
		ПодсистемыПакет.Вставить("ДатаПакета", ДатаПакета);
		ПодсистемыПакет.Вставить("Данные", Новый Соответствие);
		ПодсистемыПакетДанные = ПодсистемыПакет["Данные"];
		Для Каждого ТекПодсистема Из ПодсистемыСоответствие Цикл
			ПодсистемыПакетДанные.Вставить(ТекПодсистема.Ключ, ТекПодсистема.Значение);
		КонецЦикла;
		
		ЗагрузитьВерсииПодсистем(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ПодсистемыПакет, РегистраторПакета);
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьВерсииПодсистем(ИнформационнаяБаза, ПодсистемыПакет, РегистраторПакета)
	ДанныеДляХеша = "";
	ПодсистемыПакетДанные = ПодсистемыПакет["Данные"];
	Для Каждого ТекПодсистема Из ПодсистемыПакетДанные Цикл
		ДанныеДляХеша = ДанныеДляХеша + ТекПодсистема.Ключ + ТекПодсистема.Значение;
	КонецЦикла;
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ДанныеДляХеша);
	ХешЗаписиВерсияПодсистемы = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	
	СтатусПодсистем = ПроверитьСтатусПодсистем(ИнформационнаяБаза, ХешЗаписиВерсияПодсистемы);
	
	Если СтатусПодсистем <> 2 Тогда
		ЗаписатьПодсистемы(ИнформационнаяБаза, ПодсистемыПакет, ХешЗаписиВерсияПодсистемы, СтатусПодсистем, РегистраторПакета);
	КонецЕсли;
КонецФункции

Функция ПроверитьСтатусПодсистем(ИнформационнаяБаза, ХешЗаписиВерсияПодсистемы)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХешЗаписиВерсияПодсистемы КАК ХешЗаписиВерсияПодсистемы
	|ИЗ
	|	РегистрСведений.ИнформационныеБазы КАК ИнформационныеБазы
	|ГДЕ
	|	ИнформационныеБазы.ИнформационнаяБаза = &ИнформационнаяБаза
	|";
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтатусПроверки = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.ХешЗаписиВерсияПодсистемы <> ХешЗаписиВерсияПодсистемы Тогда
			СтатусПроверки = 1;
		Иначе
			СтатусПроверки = 2;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
КонецФункции

Функция ЗаписатьПодсистемы(ИнформационнаяБаза, ПодсистемыПакет, ХешСумма, СтатусПодсистем, РегистраторПакета)
	Если СтатусПодсистем = 0 Тогда
		ИнформационныеБазыМенеджерЗаписи = РегистрыСведений.ИнформационныеБазы.СоздатьМенеджерЗаписи();
		ИнформационныеБазыМенеджерЗаписи.ИнформационнаяБаза = ИнформационнаяБаза;
		ИнформационныеБазыМенеджерЗаписи.ХешЗаписиВерсияПодсистемы = ХешСумма;
		ИнформационныеБазыМенеджерЗаписи.Записать(Ложь);
	ИначеЕсли СтатусПодсистем = 1 Тогда
		ИнформационныеБазыМенеджерЗаписи = РегистрыСведений.ИнформационныеБазы.СоздатьМенеджерЗаписи();
		ИнформационныеБазыМенеджерЗаписи.ИнформационнаяБаза = ИнформационнаяБаза;
		ИнформационныеБазыМенеджерЗаписи.Прочитать();
		ИнформационныеБазыМенеджерЗаписи.ХешЗаписиВерсияПодсистемы = ХешСумма;
		ИнформационныеБазыМенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	ТаблицаПодсистемы = ПолучитьОбъектыПодсистем(ПодсистемыПакет["Данные"]);
	ЗаписатьПодсистемыСрезПоследних(ИнформационнаяБаза, ТаблицаПодсистемы);
	ЗаписатьПодсистемыИстория(ИнформационнаяБаза, ТаблицаПодсистемы, ПодсистемыПакет["ДатаПакета"], РегистраторПакета);
КонецФункции

Функция ПолучитьОбъектыПодсистем(ПодсистемыПакет)
	ТаблицаПодсистем = Новый ТаблицаЗначений;
	ТаблицаПодсистем.Колонки.Добавить("Подсистема", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
	ТаблицаПодсистем.Колонки.Добавить("ВерсияПодсистемы", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(25)));
	
	Для Каждого ТекПодсистема Из ПодсистемыПакет Цикл
		НоваяСтрока = ТаблицаПодсистем.Добавить();
		НоваяСтрока.Подсистема = ТекПодсистема.Ключ;
		НоваяСтрока.ВерсияПодсистемы = ТекПодсистема.Значение;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаПодсистем.Подсистема КАК ПодсистемаПакет,
	|	ТаблицаПодсистем.ВерсияПодсистемы КАК ВерсияПодсистемыПакет
	|ПОМЕСТИТЬ
	|	ТаблицаПодсистем
	|ИЗ
	|	&ТаблицаПодсистем КАК ТаблицаПодсистем
	|;
	|ВЫБРАТЬ
	|	ТаблицаПодсистем.ПодсистемаПакет КАК ПодсистемаПакет,
	|	СпрПодсистемы.Ссылка КАК ПодсистемаСсылка,
	|	ТаблицаПодсистем.ВерсияПодсистемыПакет КАК ВерсияПодсистемыПакет,
	|	СпрВерсииПодсистем.Ссылка КАК ВерсияПодсистемыСсылка
	|ИЗ
	|	ТаблицаПодсистем
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Подсистемы КАК СпрПодсистемы
	|ПО
	|	СпрПодсистемы.Наименование = ТаблицаПодсистем.ПодсистемаПакет
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ВерсииПодсистем КАК СпрВерсииПодсистем
	|ПО
	|	СпрВерсииПодсистем.Наименование = ТаблицаПодсистем.ВерсияПодсистемыПакет
	|";
	Запрос.УстановитьПараметр("ТаблицаПодсистем", ТаблицаПодсистем);
	ТаблицаПодсистемы = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекПодсистема Из ТаблицаПодсистемы Цикл
		Если НЕ ЗначениеЗаполнено(ТекПодсистема.ПодсистемаСсылка) Тогда
			ТекПодсистема.ПодсистемаСсылка = Справочники.Подсистемы.СоздатьЭлементПоНаименованию(ТекПодсистема.ПодсистемаПакет);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекПодсистема.ВерсияПодсистемыСсылка) Тогда
			ТекПодсистема.ВерсияПодсистемыСсылка = Справочники.ВерсииПодсистем.СоздатьЭлементПоНаименованию(ТекПодсистема.ВерсияПодсистемыПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПодсистемы; 
КонецФункции

Процедура ЗаписатьПодсистемыСрезПоследних(ИнформационнаяБаза, ТаблицаПодсистемы)
	ВерсииПодсистемСрезПоследнихНаборЗаписей = РегистрыСведений.ВерсииПодсистемСрезПоследних.СоздатьНаборЗаписей();
	ВерсииПодсистемСрезПоследнихНаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	
	Для Каждого ТекПодсистема Из ТаблицаПодсистемы Цикл
		ВерсииПодсистемСрезПоследнихНоваяЗапись = ВерсииПодсистемСрезПоследнихНаборЗаписей.Добавить();
		ВерсииПодсистемСрезПоследнихНоваяЗапись.Подсистема = ТекПодсистема.ПодсистемаСсылка;
		ВерсииПодсистемСрезПоследнихНоваяЗапись.ВерсияПодсистемы = ТекПодсистема.ВерсияПодсистемыСсылка;
		ВерсииПодсистемСрезПоследнихНоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
	КонецЦикла;
	
	ВерсииПодсистемСрезПоследнихНаборЗаписей.Записать(Истина);
КонецПроцедуры

Процедура ЗаписатьПодсистемыИстория(ИнформационнаяБаза, ТаблицаПодсистемы, ДатаПакета, РегистраторПакета)
	ВерсииПодсистемИсторияНаборЗаписей = РегистрыСведений.ВерсииПодсистемИстория.СоздатьНаборЗаписей();
	ВерсииПодсистемИсторияНаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	ВерсииПодсистемИсторияНаборЗаписей.Отбор.Период.Установить(ДатаПакета);
	
	Для Каждого ТекПодсистема Из ТаблицаПодсистемы Цикл
		ВерсииПодсистемИсторияНоваяЗапись = ВерсииПодсистемИсторияНаборЗаписей.Добавить();
		ВерсииПодсистемИсторияНоваяЗапись.Период = ДатаПакета;
		ВерсииПодсистемИсторияНоваяЗапись.Подсистема = ТекПодсистема.ПодсистемаСсылка;
		ВерсииПодсистемИсторияНоваяЗапись.ВерсияПодсистемы = ТекПодсистема.ВерсияПодсистемыСсылка;
		ВерсииПодсистемИсторияНоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
	КонецЦикла;
	
	ВерсииПодсистемИсторияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	Если РегистраторПакета.ЭтоНовый Тогда
		ВерсииПодсистемИсторияНаборЗаписей.Записать(Ложь);
	Иначе
		ВерсииПодсистемИсторияНаборЗаписей.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Дампы

Процедура ЗаписатьСекциюДампы(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета)
	Если Пакет["dumps"] <> Неопределено Тогда
		columns = Пакет["dumps"]["columns"];
		МаксимальныйИндекс = columns.ВГраница();
		rows = Пакет["dumps"]["rows"];
		ДампыПакет = Новый Соответствие;
		ДампыПакет.Вставить("ДатаПакета", ДатаПакета);
		ДампыПакет.Вставить("Данные", Новый Массив);
		ДампыПакетДанные = ДампыПакет["Данные"];
		Для Каждого ТекДамп Из rows Цикл
			ВариантДампа = Новый Структура;
			Для ТекИндекс = 0 По МаксимальныйИндекс Цикл
				ВариантДампа.Вставить(columns[ТекИндекс], ТекДамп[ТекИндекс]);				
			КонецЦикла;
			
			ДампыПакетДанные.Добавить(ВариантДампа);
		КонецЦикла;
		
		ЗагрузитьДампы(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ДампыПакет, РегистраторПакета);
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьДампы(ИнформационнаяБаза, ДампыПакет, РегистраторПакета)
	ТаблицаДампы = ПолучитьОбъектыДампов(ДампыПакет["Данные"]);
	
	НаборЗаписей = РегистрыСведений.ДампыЦентраМониторинга.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДампыПакет["ДатаПакета"]);
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	Для Каждого ТекДамп Из ТаблицаДампы Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ДампыПакет["ДатаПакета"];
		НоваяЗапись.ВариантДампа = ТекДамп.ВариантДампаСсылка;
		НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
		НоваяЗапись.Количество = ТекДамп.КоличествоПакет;
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Если РегистраторПакета.ЭтоНовый Тогда
		НаборЗаписей.Записать(Ложь);
	Иначе
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьОбъектыДампов(ДампыПакет)
	ТаблицаДампы = Новый ТаблицаЗначений;
	ТаблицаДампы.Колонки.Добавить("ВариантДампа", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ТаблицаДампы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	Для Каждого ТекДамп Из ДампыПакет Цикл
		НоваяСтрока = ТаблицаДампы.Добавить();
		НоваяСтрока.ВариантДампа = ТекДамп.ВариантДампа;
		НоваяСтрока.Количество = Число(ТекДамп.КоличествоВариантов);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДампы.ВариантДампа КАК ВариантДампаПакет,
	|	ТаблицаДампы.Количество КАК КоличествоПакет
	|ПОМЕСТИТЬ
	|	ТаблицаДампы
	|ИЗ
	|	&ТаблицаДампы КАК ТаблицаДампы
	|;
	|ВЫБРАТЬ
	|	ТаблицаДампы.ВариантДампаПакет КАК ВариантДампаПакет,
	|	СпрВариантыДамповЦентрМониторинга.Ссылка КАК ВариантДампаСсылка,
	|	ТаблицаДампы.КоличествоПакет КАК КоличествоПакет
	|ИЗ
	|	ТаблицаДампы
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ВариантыДамповЦентрМониторинга КАК СпрВариантыДамповЦентрМониторинга
	|ПО
	|	СпрВариантыДамповЦентрМониторинга.Наименование = ТаблицаДампы.ВариантДампаПакет
	|";
	Запрос.УстановитьПараметр("ТаблицаДампы", ТаблицаДампы);
	
	ТаблицаДампы = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекДамп Из ТаблицаДампы Цикл
		Если НЕ ЗначениеЗаполнено(ТекДамп.ВариантДампаСсылка) Тогда
			ТекДамп.ВариантДампаСсылка = Справочники.ВариантыДамповЦентрМониторинга.СоздатьЭлементПоНаименованию(ТекДамп.ВариантДампаПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДампы; 
КонецФункции


#КонецОбласти

#Область СтатистикаКонфигурации

Процедура ЗаписатьСекциюСтатистикаКонфигурации(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета)
	Если Пакет["config"] <> Неопределено Тогда
		config = Пакет["config"];
		
		КонфигурацияИнформационнойБазыПакет = Новый Соответствие;
		КонфигурацияИнформационнойБазыПакет.Вставить("Конфигурация", config["MetadataName"]);
		КонфигурацияИнформационнойБазыПакет.Вставить("РежимРаботыКонфигурации", Перечисления.РежимРаботыКонфигурации[config["WorkingMode"]]);
		КонфигурацияИнформационнойБазыПакет.Вставить("РазделениеПоОбластям", config["DivisionByRegions"]);
		КонфигурацияИнформационнойБазыПакет.Вставить("ДатаПакета", ДатаПакета);
				
		ЗагрузитьКонфигурациюИнфорационнойБазы(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, КонфигурацияИнформационнойБазыПакет, РегистраторПакета);
		
		// Загрузка дополнительных сведений
		ДополнительныеСведенияПакет = Новый Соответствие;
		ДополнительныеСведенияПакет.Вставить("РежимСовместимости", config["CompatibilityMode"]);
		ДополнительныеСведенияПакет.Вставить("РежимСовместимостиИнтерфейса", config["InterfaceCompatibilityMode"]);
		ДополнительныеСведенияПакет.Вставить("РежимИспользованияМодальности", config["ModalityUseMode"]);
		ДополнительныеСведенияПакет.Вставить("ИспользованиеРасширений", config["UsingExtensions"]);
		ЗаписатьДополнительнуюИнфомрациюОКонфигурации(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ДополнительныеСведенияПакет);
		
		Если config["DivisionByRegions"] <> Неопределено Тогда
			ЕстьРазделениеПоОбластям = config["DivisionByRegions"];
		Иначе
			ЕстьРазделениеПоОбластям = Ложь;
		КонецЕсли;
		
		Если НЕ ЕстьРазделениеПоОбластям Тогда
			columns = config["columns"];
			МаксимальныйИндекс = columns.ВГраница();
			rows = config["rows"];
			ОперацииСтатистикиКонфигурацииПакет = Новый Соответствие;
			ОперацииСтатистикиКонфигурацииПакет.Вставить("ДатаПакета", ДатаПакета);
			ОперацииСтатистикиКонфигурацииПакет.Вставить("Данные", Новый Массив);
			ОперацииСтатистикиКонфигурацииПакетДанные = ОперацииСтатистикиКонфигурацииПакет["Данные"];
			Для Каждого ТекОперация Из rows Цикл
				ОперацияСтатистики = Новый Структура;
				Для ТекИндекс = 0 По МаксимальныйИндекс Цикл
					ОперацияСтатистики.Вставить(columns[ТекИндекс], ТекОперация[ТекИндекс]);
				КонецЦикла;
				
				ОперацииСтатистикиКонфигурацииПакетДанные.Добавить(ОперацияСтатистики);
			КонецЦикла;
		Иначе
			ОперацииСтатистикиКонфигурацииПакет = Новый Соответствие;
			ОперацииСтатистикиКонфигурацииПакет.Вставить("ДатаПакета", ДатаПакета);
			ОперацииСтатистикиКонфигурацииПакет.Вставить("Данные", Новый Массив);
			ОперацииСтатистикиКонфигурацииПакетДанные = ОперацииСтатистикиКонфигурацииПакет["Данные"];
			
			MetadataIndexName = config["MetadataIndexName"];
			
			Для Каждого ТекОбласть Из config["StatisticsConfigurationByRegions"] Цикл
				columns = ТекОбласть.Значение["columns"];
				МаксимальныйИндекс = columns.ВГраница();
				rows = ТекОбласть.Значение["rows"];
				Для Каждого ТекОперация Из rows Цикл
					ОперацияСтатистики = Новый Структура;
					Для ТекИндекс = 0 По МаксимальныйИндекс Цикл
						ОперацияСтатистики.Вставить(columns[ТекИндекс], ТекОперация[ТекИндекс]);
					КонецЦикла;	
					
					ОперацииСтатистикиКонфигурацииПакетДанные.Добавить(ОперацияСтатистики);
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого ТекОперация Из ОперацииСтатистикиКонфигурацииПакетДанные Цикл
				ТекОперация.Вставить("ОперацияСтатистики", MetadataIndexName[Строка(ТекОперация.ОперацияСтатистикиИндекс)]);	
			КонецЦикла;
			
		КонецЕсли;		
		
		ЗагрузитьОперацииСтатистики(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ОперацииСтатистикиКонфигурацииПакет, РегистраторПакета, ЕстьРазделениеПоОбластям);
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьКонфигурациюИнфорационнойБазы(ИнформационнаяБаза, КонфигурацияИнформационнойБазыПакет, РегистраторПакета)
	ДанныеДляХеша = "";
	Для Каждого ТекПараметр Из КонфигурацияИнформационнойБазыПакет Цикл
		ДанныеДляХеша = ДанныеДляХеша + ТекПараметр.Ключ + ТекПараметр.Значение;
	КонецЦикла;
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ДанныеДляХеша);
	ХешЗаписиКонфигурации = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");

	СтатусКонфигурации = ПроверитьСтатусКонфигурации(ИнформационнаяБаза, ХешЗаписиКонфигурации);
	
	Если СтатусКонфигурации <> 2 Тогда
		ЗаписатьКонфигурациюИнформационнойБазы(ИнформационнаяБаза, КонфигурацияИнформационнойБазыПакет, ХешЗаписиКонфигурации, СтатусКонфигурации, РегистраторПакета);
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьСтатусКонфигурации(ИнформационнаяБаза, ХешЗаписиКонфигурации)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХешЗаписиКонфигурации КАК ХешЗаписиКонфигурации
	|ИЗ
	|	РегистрСведений.ИнформационныеБазы КАК ИнформационныеБазы
	|ГДЕ
	|	ИнформационныеБазы.ИнформационнаяБаза = &ИнформационнаяБаза
	|";
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтатусПроверки = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.ХешЗаписиКонфигурации <> ХешЗаписиКонфигурации Тогда
			СтатусПроверки = 1;
		Иначе
			СтатусПроверки = 2;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
КонецФункции

Функция ЗаписатьКонфигурациюИнформационнойБазы(ИнформационнаяБаза, КонфигурацияИнформационнойБазыПакет, ХешСумма, СтатусПодсистем, РегистраторПакета)
	Если СтатусПодсистем = 0 Тогда
		ИнформационныеБазыМенеджерЗаписи = РегистрыСведений.ИнформационныеБазы.СоздатьМенеджерЗаписи();
		ИнформационныеБазыМенеджерЗаписи.ИнформационнаяБаза = ИнформационнаяБаза;
		ИнформационныеБазыМенеджерЗаписи.ХешЗаписиКонфигурации = ХешСумма;
		ИнформационныеБазыМенеджерЗаписи.Записать(Ложь);
	ИначеЕсли СтатусПодсистем = 1 Тогда
		ИнформационныеБазыМенеджерЗаписи = РегистрыСведений.ИнформационныеБазы.СоздатьМенеджерЗаписи();
		ИнформационныеБазыМенеджерЗаписи.ИнформационнаяБаза = ИнформационнаяБаза;
		ИнформационныеБазыМенеджерЗаписи.Прочитать();
		ИнформационныеБазыМенеджерЗаписи.ХешЗаписиКонфигурации = ХешСумма;
		ИнформационныеБазыМенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	ТаблицаКонфигурацияИнформационнойБазы = ПолучитьОбъектыКонфигурацииИнформационнойБазы(КонфигурацияИнформационнойБазыПакет);
	ЗаписатьКонфигурацияИнформационнойБазыСрезПоследних(ИнформационнаяБаза, ТаблицаКонфигурацияИнформационнойБазы);
	ЗаписатьКонфигурацияИнформационнойБазыИстория(ИнформационнаяБаза, ТаблицаКонфигурацияИнформационнойБазы, КонфигурацияИнформационнойБазыПакет["ДатаПакета"], РегистраторПакета);
КонецФункции

Функция ПолучитьОбъектыКонфигурацииИнформационнойБазы(КонфигурацияИнформационнойБазыПакет)
	ТаблицаКонфигурации = Новый ТаблицаЗначений;
	ТаблицаКонфигурации.Колонки.Добавить("Конфигурация", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
	ТаблицаКонфигурации.Колонки.Добавить("РежимРаботыКонфигурации", Новый ОписаниеТипов("ПеречислениеСсылка.РежимРаботыКонфигурации"));
	ТаблицаКонфигурации.Колонки.Добавить("РазделениеПоОбластям", Новый ОписаниеТипов("Булево"));
	
	НоваяСтрока = ТаблицаКонфигурации.Добавить();
	НоваяСтрока.Конфигурация = КонфигурацияИнформационнойБазыПакет["Конфигурация"];
	НоваяСтрока.РежимРаботыКонфигурации = КонфигурацияИнформационнойБазыПакет["РежимРаботыКонфигурации"];
	НоваяСтрока.РазделениеПоОбластям = КонфигурацияИнформационнойБазыПакет["РазделениеПоОбластям"];
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаКонфигурации.Конфигурация КАК КонфигурацияПакет,
	|	ТаблицаКонфигурации.РежимРаботыКонфигурации КАК РежимРаботыКонфигурацииПакет,
	|	ТаблицаКонфигурации.РазделениеПоОбластям КАК РазделениеПоОбластямПакет
	|ПОМЕСТИТЬ
	|	ТаблицаКонфигурации
	|ИЗ
	|	&ТаблицаКонфигурации КАК ТаблицаКонфигурации
	|;
	|ВЫБРАТЬ
	|	ТаблицаКонфигурации.КонфигурацияПакет КАК КонфигурацияПакет,
	|	СпрКонфигурации.Ссылка КАК КонфигурацияСсылка,
	|	ТаблицаКонфигурации.РежимРаботыКонфигурацииПакет КАК РежимРаботыКонфигурацииПакет,
	|	ТаблицаКонфигурации.РазделениеПоОбластямПакет КАК РазделениеПоОбластямПакет	
	|ИЗ
	|	ТаблицаКонфигурации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Конфигурации КАК СпрКонфигурации
	|ПО
	|	СпрКонфигурации.Наименование = ТаблицаКонфигурации.КонфигурацияПакет
	|";
	Запрос.УстановитьПараметр("ТаблицаКонфигурации", ТаблицаКонфигурации);
	
	ТаблицаКонфигурации = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаКонфигурации Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.КонфигурацияСсылка) Тогда
			ТекСтрока.КонфигурацияСсылка = Справочники.Конфигурации.СоздатьЭлементПоНаименованию(ТекСтрока.КонфигурацияПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаКонфигурации; 
КонецФункции

Процедура ЗаписатьКонфигурацияИнформационнойБазыСрезПоследних(ИнформационнаяБаза, ТаблицаКонфигурацияИнформационнойБазы)
	КонфигурацияИнформационнойБазыСрезПоследнихНаборЗаписей = РегистрыСведений.КонфигурацияИнформационнойБазыСрезПоследних.СоздатьНаборЗаписей();
	КонфигурацияИнформационнойБазыСрезПоследнихНаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	
	Для Каждого ТекКонфигурация Из ТаблицаКонфигурацияИнформационнойБазы Цикл
		КонфигурацияИнформационнойБазыСрезПоследнихНоваяЗапись = КонфигурацияИнформационнойБазыСрезПоследнихНаборЗаписей.Добавить();
		КонфигурацияИнформационнойБазыСрезПоследнихНоваяЗапись.Конфигурация = ТекКонфигурация.КонфигурацияСсылка;
		КонфигурацияИнформационнойБазыСрезПоследнихНоваяЗапись.РежимРаботыКонфигурации = ТекКонфигурация.РежимРаботыКонфигурацииПакет;
		КонфигурацияИнформационнойБазыСрезПоследнихНоваяЗапись.РазделениеПоОбластям = ТекКонфигурация.РазделениеПоОбластямПакет;
		КонфигурацияИнформационнойБазыСрезПоследнихНоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
	КонецЦикла;
	
	КонфигурацияИнформационнойБазыСрезПоследнихНаборЗаписей.Записать(Истина);
КонецПроцедуры

Процедура ЗаписатьКонфигурацияИнформационнойБазыИстория(ИнформационнаяБаза, ТаблицаКонфигурацияИнформационнойБазы, ДатаПакета, РегистраторПакета)
	КонфигурацияИнформационнойБазыИсторияНаборЗаписей = РегистрыСведений.КонфигурацияИнформационнойБазыИстория.СоздатьНаборЗаписей();
	КонфигурацияИнформационнойБазыИсторияНаборЗаписей.Отбор.Период.Установить(ДатаПакета);
	КонфигурацияИнформационнойБазыИсторияНаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	
	Для Каждого ТекКонфигурация Из ТаблицаКонфигурацияИнформационнойБазы Цикл
		КонфигурацияИнформационнойБазыИсторияНоваяЗапись = КонфигурацияИнформационнойБазыИсторияНаборЗаписей.Добавить();
		КонфигурацияИнформационнойБазыИсторияНоваяЗапись.Период = ДатаПакета;
		КонфигурацияИнформационнойБазыИсторияНоваяЗапись.Конфигурация = ТекКонфигурация.КонфигурацияСсылка;
		КонфигурацияИнформационнойБазыИсторияНоваяЗапись.РежимРаботыКонфигурации = ТекКонфигурация.РежимРаботыКонфигурацииПакет;
		КонфигурацияИнформационнойБазыИсторияНоваяЗапись.РазделениеПоОбластям = ТекКонфигурация.РазделениеПоОбластямПакет;
		КонфигурацияИнформационнойБазыИсторияНоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
	КонецЦикла;
	
	КонфигурацияИнформационнойБазыИсторияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	Если РегистраторПакета.ЭтоНовый Тогда
		КонфигурацияИнформационнойБазыИсторияНаборЗаписей.Записать(Ложь);
	Иначе
		КонфигурацияИнформационнойБазыИсторияНаборЗаписей.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьОперацииСтатистики(ИнформационнаяБаза, ОперацииСтатистикиКонфигурацииПакет, РегистраторПакета, ЕстьРазделениеПоОбластям)
	ТаблицаОперацийСтатистики = ПолучитьОбъектыОперацийСтатистики(ОперацииСтатистикиКонфигурацииПакет, ЕстьРазделениеПоОбластям);
	ЗаписатьОперацииСтатистикиКонфигурацииСрезПоследних(ИнформационнаяБаза, ТаблицаОперацийСтатистики);
	ЗаписатьОперацииСтатистикиКонфигурацииИстория(ИнформационнаяБаза, ТаблицаОперацийСтатистики, ОперацииСтатистикиКонфигурацииПакет["ДатаПакета"], РегистраторПакета);
КонецПроцедуры

Функция ПолучитьОбъектыОперацийСтатистики(ОперацииСтатистикиКонфигурацииПакет, ЕстьРазделениеПоОбластям)
	ТаблицаОперацииСтатистики = Новый ТаблицаЗначений;
	ТаблицаОперацииСтатистики.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1000)));
	ТаблицаОперацииСтатистики.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОперацииСтатистики.Колонки.Добавить("ХешПолноеНаименование", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(32)));
	
	ОперацииСтатистикиКонфигурацииПакетДанные = ОперацииСтатистикиКонфигурацииПакет["Данные"];	
	Для Каждого ТекОперация Из ОперацииСтатистикиКонфигурацииПакетДанные Цикл
		НоваяСтрока = ТаблицаОперацииСтатистики.Добавить();
		НоваяСтрока.НаименованиеПолное = ТекОперация.ОперацияСтатистики;
		НоваяСтрока.Значение = ТекОперация.Значение;
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(НоваяСтрока.НаименованиеПолное);
		НоваяСтрока.ХешПолноеНаименование = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	КонецЦикла;
	
	Если ЕстьРазделениеПоОбластям Тогда
		ТаблицаОперацииСтатистики.Свернуть("НаименованиеПолное, ХешПолноеНаименование", "Значение");
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаОперацииСтатистики.НаименованиеПолное КАК НаименованиеПолноеПакет,
	|	ТаблицаОперацииСтатистики.Значение КАК ЗначениеПакет,
	|	ТаблицаОперацииСтатистики.ХешПолноеНаименование КАК ХешПолноеНаименованиеПакет
	|ПОМЕСТИТЬ
	|	ТаблицаОперацииСтатистики
	|ИЗ
	|	&ТаблицаОперацииСтатистики КАК ТаблицаОперацииСтатистики
	|;
	|ВЫБРАТЬ
	|	ТаблицаОперацииСтатистики.НаименованиеПолноеПакет КАК НаименованиеПолноеПакет,
	|	СпрОперацииСтатистикиКонфигурации.Ссылка КАК НаименованиеПолноеСсылка,
	|	ТаблицаОперацииСтатистики.ХешПолноеНаименованиеПакет КАК ХешПолноеНаименованиеПакет,
	|	ТаблицаОперацииСтатистики.ЗначениеПакет КАК ЗначениеПакет	
	|ИЗ
	|	ТаблицаОперацииСтатистики
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ОперацииСтатистикиКонфигурации КАК СпрОперацииСтатистикиКонфигурации
	|ПО
	|	СпрОперацииСтатистикиКонфигурации.ХешПолноеНаименование = ТаблицаОперацииСтатистики.ХешПолноеНаименованиеПакет
	|УПОРЯДОЧИТЬ ПО
	|   ТаблицаОперацииСтатистики.НаименованиеПолноеПакет
	|";
	
	Запрос.УстановитьПараметр("ТаблицаОперацииСтатистики", ТаблицаОперацииСтатистики);
	
	Результат = Запрос.Выполнить();
	ТаблицаОперацииСтатистики = Результат.Выгрузить();
	
	Для Каждого ТекОперация Из ТаблицаОперацииСтатистики Цикл
		Если НЕ ЗначениеЗаполнено(ТекОперация.НаименованиеПолноеСсылка) Тогда
			ТекОперация.НаименованиеПолноеСсылка = Справочники.ОперацииСтатистикиКонфигурации.СоздатьЭлементПоНаименованиюПолное(ТекОперация.НаименованиеПолноеПакет, ТекОперация.ХешПолноеНаименованиеПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОперацииСтатистики;
КонецФункции

Процедура ЗаписатьОперацииСтатистикиКонфигурацииСрезПоследних(ИнформационнаяБаза, ТаблицаОперацийСтатистики)
	НаборЗаписей = РегистрыСведений.ОперацииСтатистикиКонфигурацииСрезПоследних.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	
    Для Каждого ТекОперация Из ТаблицаОперацийСтатистики Цикл
        Если ТекОперация.ЗначениеПакет <> 0 Тогда
            НовЗапись = НаборЗаписей.Добавить();
            НовЗапись.ОперацияСтатистикиКонфигурации = ТекОперация.НаименованиеПолноеСсылка;
            НовЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
            НовЗапись.Значение = ТекОперация.ЗначениеПакет;
        КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать(Истина);	
КонецПроцедуры

Процедура ЗаписатьОперацииСтатистикиКонфигурацииИстория(ИнформационнаяБаза, ТаблицаОперацийСтатистики, ДатаПакета, РегистраторПакета)
	НаборЗаписей = РегистрыСведений.ОперацииСтатистикиКонфигурацииИстория.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДатаПакета);
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	
    Для Каждого ТекОперация Из ТаблицаОперацийСтатистики Цикл
        Если ТекОперация.ЗначениеПакет <> 0 Тогда
            НовЗапись = НаборЗаписей.Добавить();
            НовЗапись.Период = ДатаПакета;
            НовЗапись.ОперацияСтатистикиКонфигурации = ТекОперация.НаименованиеПолноеСсылка;
            НовЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
            НовЗапись.Значение = ТекОперация.ЗначениеПакет;
        КонецЕсли;
    КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Если РегистраторПакета.ЭтоНовый Тогда
		НаборЗаписей.Записать(Ложь);
	Иначе
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьДополнительнуюИнфомрациюОКонфигурации(ИнформационнаяБаза, ДополнительнаяИнформацияПакет)
	Запись = РегистрыСведений.ДополнительныеСведенияИнформационныхБаз.СоздатьМенеджерЗаписи();
	Запись.ИнформационнаяБаза = ИнформационнаяБаза;
	Для Каждого КлючИЗначение Из ДополнительнаяИнформацияПакет Цикл
		Запись[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	Запись.Записать();
КонецПроцедуры

#КонецОбласти

#Область ФункциональныеОпцииКонфигурации

Процедура ЗаписатьСекциюФункциональныеОпцииКонфигурации(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета)
	Если Пакет["options"] <> Неопределено Тогда
		options = Пакет["options"];
		
		Если options["DivisionByRegions"] <> Неопределено Тогда
			ЕстьРазделениеПоОбластям = options["DivisionByRegions"];
		Иначе
			ЕстьРазделениеПоОбластям = Ложь;
		КонецЕсли;
		
		Если НЕ ЕстьРазделениеПоОбластям Тогда
			columns = options["columns"];
			МаксимальныйИндекс = columns.ВГраница();
			rows = options["rows"];
			ФункциональныеОпцииКонфигурацииПакет = Новый Соответствие;
			ФункциональныеОпцииКонфигурацииПакет.Вставить("ДатаПакета", ДатаПакета);
			ФункциональныеОпцииКонфигурацииПакет.Вставить("Данные", Новый Массив);
			ФункциональныеОпцииКонфигурацииПакетДанные = ФункциональныеОпцииКонфигурацииПакет["Данные"];
			Для Каждого ТекОпция Из rows Цикл
				ФункциональнаяОпция = Новый Структура;
				Для ТекИндекс = 0 По МаксимальныйИндекс Цикл
					ФункциональнаяОпция.Вставить(columns[ТекИндекс], ТекОпция[ТекИндекс]);
				КонецЦикла;
				
				ФункциональныеОпцииКонфигурацииПакетДанные.Добавить(ФункциональнаяОпция);
			КонецЦикла;
		Иначе
			ФункциональныеОпцииКонфигурацииПакет = Новый Соответствие;
			ФункциональныеОпцииКонфигурацииПакет.Вставить("ДатаПакета", ДатаПакета);
			ФункциональныеОпцииКонфигурацииПакет.Вставить("Данные", Новый Массив);
			ФункциональныеОпцииКонфигурацииПакетДанные = ФункциональныеОпцииКонфигурацииПакет["Данные"];
			
			MetadataIndexName = options["MetadataIndexName"];
			
			Для Каждого ТекОбласть ИЗ options["OptionsByRegions"] Цикл
				columns = ТекОбласть.Значение["columns"];
				МаксимальныйИндекс = columns.ВГраница();
				rows = ТекОбласть.Значение["rows"];
				Для Каждого ТекОпция Из rows Цикл
					ФункциональнаяОпция = Новый Структура;
					Для ТекИндекс = 0 По МаксимальныйИндекс Цикл
						ФункциональнаяОпция.Вставить(columns[ТекИндекс], ТекОпция[ТекИндекс]);
					КонецЦикла;
					
					ФункциональныеОпцииКонфигурацииПакетДанные.Добавить(ФункциональнаяОпция);
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого ТекОперация Из ФункциональныеОпцииКонфигурацииПакетДанные Цикл
				ТекОперация.Вставить("ОперацияСтатистики", MetadataIndexName[Строка(ТекОперация.ОперацияСтатистикиИндекс)]);	
			КонецЦикла;
		КонецЕсли;
		
		ЗагрузитьФункциональныеОпции(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ФункциональныеОпцииКонфигурацииПакет, РегистраторПакета, ЕстьРазделениеПоОбластям);
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьФункциональныеОпции(ИнформационнаяБаза, ФункциональныеОпцииПакет, РегистраторПакета, ЕстьРазделениеПоОбластям)
	ДанныеДляХеша = "";
	ФункциональныеОпцииПакетДанные = ФункциональныеОпцииПакет["Данные"];
	Для Каждого ТекОпция Из ФункциональныеОпцииПакетДанные Цикл
		ДанныеДляХеша = ДанныеДляХеша + ТекОпция.ОперацияСтатистики + ТекОпция.Значение;
	КонецЦикла;
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ДанныеДляХеша);
	ХешЗаписиФункциональныеОпции = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	
	СтатусПроверки = ПроверитьСтатусФункциональныхОпций(ИнформационнаяБаза, ХешЗаписиФункциональныеОпции);
	
	Если СтатусПроверки <> 2 Тогда
		ЗаписатьФункциональныеОпции(ИнформационнаяБаза, ФункциональныеОпцииПакет, ХешЗаписиФункциональныеОпции, СтатусПроверки, РегистраторПакета, ЕстьРазделениеПоОбластям);
	КонецЕсли;
КонецФункции

Функция ПроверитьСтатусФункциональныхОпций(ИнформационнаяБаза, ХешЗаписиФункциональныеОпции)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХешЗаписиФункциональныеОпции КАК ХешЗаписиФункциональныеОпции
	|ИЗ
	|	РегистрСведений.ИнформационныеБазы КАК ИнформационныеБазы
	|ГДЕ
	|	ИнформационныеБазы.ИнформационнаяБаза = &ИнформационнаяБаза
	|";
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтатусПроверки = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.ХешЗаписиФункциональныеОпции <> ХешЗаписиФункциональныеОпции Тогда
			СтатусПроверки = 1;
		Иначе
			СтатусПроверки = 2;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
КонецФункции

Процедура ЗаписатьФункциональныеОпции(ИнформационнаяБаза, ФункциональныеОпцииПакет, ХешСумма, СтатусПроверки, РегистраторПакета, ЕстьРазделениеПоОбластям)
	Если СтатусПроверки = 0 Тогда
		ИнформационныеБазыМенеджерЗаписи = РегистрыСведений.ИнформационныеБазы.СоздатьМенеджерЗаписи();
		ИнформационныеБазыМенеджерЗаписи.ИнформационнаяБаза = ИнформационнаяБаза;
		ИнформационныеБазыМенеджерЗаписи.ХешЗаписиФункциональныеОпции = ХешСумма;
		ИнформационныеБазыМенеджерЗаписи.Записать(Ложь);
	ИначеЕсли СтатусПроверки = 1 Тогда
		ИнформационныеБазыМенеджерЗаписи = РегистрыСведений.ИнформационныеБазы.СоздатьМенеджерЗаписи();
		ИнформационныеБазыМенеджерЗаписи.ИнформационнаяБаза = ИнформационнаяБаза;
		ИнформационныеБазыМенеджерЗаписи.Прочитать();
		ИнформационныеБазыМенеджерЗаписи.ХешЗаписиФункциональныеОпции = ХешСумма;
		ИнформационныеБазыМенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	ТаблицаФункциональныеОпции = ПолучитьОбъектыФункциональныеопции(ФункциональныеОпцииПакет["Данные"], ЕстьРазделениеПоОбластям);
	ЗаписатьФункциональныеОпцииСрезПоследних(ИнформационнаяБаза, ТаблицаФункциональныеОпции);
	ЗаписатьФункциональныеОпцииИстория(ИнформационнаяБаза, ТаблицаФункциональныеОпции, ФункциональныеОпцииПакет["ДатаПакета"], РегистраторПакета);
КонецПроцедуры

Функция ПолучитьОбъектыФункциональныеопции(ФункциональныеОпцииПакет, ЕстьРазделениеПоОбластям)
	ТаблицаФункциональныеОпции = Новый ТаблицаЗначений;
	ТаблицаФункциональныеОпции.Колонки.Добавить("ФункциональнаяОпция", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
	ТаблицаФункциональныеОпции.Колонки.Добавить("Значение", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ТекОпция Из ФункциональныеОпцииПакет Цикл
		НоваяСтрока = ТаблицаФункциональныеОпции.Добавить();
		НоваяСтрока.ФункциональнаяОпция = СтрЗаменить(ТекОпция.ОперацияСтатистики, "ФункциональнаяОпция.", "");
		НоваяСтрока.Значение = Булево(ТекОпция.Значение);
	КонецЦикла;
	
	Если ЕстьРазделениеПоОбластям Тогда
		ТаблицаФункциональныеОпции.Свернуть("ФункциональнаяОпция", "Значение");
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаФункциональныеОпции.ФункциональнаяОпция КАК ФункциональнаяОпцияПакет,
	|	ТаблицаФункциональныеОпции.Значение КАК ЗначениеПакет
	|ПОМЕСТИТЬ
	|	ТаблицаФункциональныеОпции
	|ИЗ
	|	&ТаблицаФункциональныеОпции КАК ТаблицаФункциональныеОпции
	|;
	|ВЫБРАТЬ
	|	ТаблицаФункциональныеОпции.ФункциональнаяОпцияПакет КАК ФункциональнаяОпцияПакет,
	|	СпрФункциональныеОпции.Ссылка КАК ФункциональнаяОпцияСсылка,
	|	ТаблицаФункциональныеОпции.ЗначениеПакет КАК ЗначениеПакет
	|ИЗ
	|	ТаблицаФункциональныеОпции
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ФункциональныеОпции КАК СпрФункциональныеОпции
	|ПО
	|	СпрФункциональныеОпции.Наименование = ТаблицаФункциональныеОпции.ФункциональнаяОпцияПакет
	|";
	Запрос.УстановитьПараметр("ТаблицаФункциональныеОпции", ТаблицаФункциональныеОпции);
	
	ТаблицаФункциональныеОпции = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекОпция Из ТаблицаФункциональныеОпции Цикл
		Если НЕ ЗначениеЗаполнено(ТекОпция.ФункциональнаяОпцияСсылка) Тогда
			ТекОпция.ФункциональнаяОпцияСсылка = Справочники.ФункциональныеОпции.СоздатьЭлементПоНаименованию(ТекОпция.ФункциональнаяОпцияПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаФункциональныеОпции;
КонецФункции

Процедура ЗаписатьФункциональныеОпцииСрезПоследних(ИнформационнаяБаза, ТаблицаФункциональныеОпции)
	НаборЗаписей = РегистрыСведений.ФункциональныеОпцииКонфигурацииСрезПоследних.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	
	Для Каждого ТекОпция Из ТаблицаФункциональныеОпции Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ФункциональнаяОпцияКонфигурации = ТекОпция.ФункциональнаяОпцияСсылка;
		НоваяЗапись.Используется = ТекОпция.ЗначениеПакет;
		НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

Процедура ЗаписатьФункциональныеОпцииИстория(ИнформационнаяБаза, ТаблицаФункциональныеОпции, ДатаПакета, РегистраторПакета)
	НаборЗаписей = РегистрыСведений.ФункциональныеОпцииКонфигурацииИстория.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДатаПакета);
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	
	ТекДата = ТекущаяУниверсальнаяДата();
	Для Каждого ТекОпция Из ТаблицаФункциональныеОпции Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ДатаПакета;
		НоваяЗапись.ФункциональнаяОпцияКонфигурации = ТекОпция.ФункциональнаяОпцияСсылка;
		НоваяЗапись.Используется = ТекОпция.ЗначениеПакет;
		НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Если РегистраторПакета.ЭтоНовый Тогда
		НаборЗаписей.Записать(Ложь);
	Иначе
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область БизнесСтатистики
Процедура ЗаписатьСекциюБизнесСтатистики(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета, ДатаJSON_ISO_1С)
	Если Пакет["business"] <> Неопределено Тогда
		business = Пакет["business"];
		
		// Загружаем секцию операции статистики
		//
		OperationStatistics = business["OperationStatistics"];
		columnsOperationStatistics = OperationStatistics["columns"];
		columnsValueIndex = OperationStatistics["columnsValueIndex"];
		МаксимальныйИндексOperationStatistics = columnsOperationStatistics.ВГраница();
		rowsOperationStatistics = OperationStatistics["rows"];
		
		ОперацииБизнесСтатистикиПакет = Новый Массив;
		Для Каждого ТекОперацияБизнесСтатистики Из rowsOperationStatistics Цикл
			ОперацияБизнесСтатистики = Новый Структура;
			Для ТекИндекс = 0 По МаксимальныйИндексOperationStatistics Цикл
				Если columnsValueIndex[columnsOperationStatistics[ТекИндекс]] <> Неопределено Тогда
					Значение = columnsValueIndex[columnsOperationStatistics[ТекИндекс]][Формат(ТекОперацияБизнесСтатистики[ТекИндекс],"ЧГ=0")];
				Иначе
					Значение = ТекОперацияБизнесСтатистики[ТекИндекс];
				КонецЕсли;
				ОперацияБизнесСтатистики.Вставить(columnsOperationStatistics[ТекИндекс], Значение);
			КонецЦикла;
			
			ОперацииБизнесСтатистикиПакет.Добавить(ОперацияБизнесСтатистики);
		КонецЦикла;
		
		OperationStatisticsClientDay = business["OperationStatisticsClientDay"];
		Если OperationStatisticsClientDay <> Неопределено Тогда
			columnsSCD = OperationStatisticsClientDay["columns"];
			columnsValueIndexCD = OperationStatisticsClientDay["columnsValueIndex"];
			columnsValueIndexCD.Вставить("Период", columnsValueIndexCD["Период"]);
			columnsValueIndexCD.Вставить("ОперацияСтатистики", columnsValueIndexCD["ОперацияСтатистики"]);
			МаксимальныйИндексSCD = columnsSCD.ВГраница();
			rowsSCD = OperationStatisticsClientDay["rows"];
					
			Для Каждого rowSCD Из rowsSCD Цикл
				СтатистикаПоДням = Новый Структура;
				Для ТекИндекс = 0 По МаксимальныйИндексSCD Цикл
					Если columnsValueIndexCD[columnsSCD[ТекИндекс]] <> Неопределено Тогда
						Значение = columnsValueIndexCD[columnsSCD[ТекИндекс]][Формат(rowSCD[ТекИндекс],"ЧГ=0")];
					Иначе
						Значение = rowSCD[ТекИндекс];
					КонецЕсли;
					СтатистикаПоДням.Вставить(columnsSCD[ТекИндекс], Значение);
				КонецЦикла;
				ОперацииБизнесСтатистикиПакет.Добавить(СтатистикаПоДням);
			КонецЦикла;
			
		КонецЕсли;
		
		OperationStatisticsClientHour = business["OperationStatisticsClientHour"];
		Если OperationStatisticsClientHour <> Неопределено Тогда
			columnsSCH = OperationStatisticsClientHour["columns"];
			columnsValueIndexCH = OperationStatisticsClientHour["columnsValueIndex"];
			columnsValueIndexCH.Вставить("Период", columnsValueIndexCH["Период"]);
			columnsValueIndexCH.Вставить("ОперацияСтатистики", columnsValueIndexCH["ОперацияСтатистики"]);
			МаксимальныйИндексSCD = columnsSCH.ВГраница();
			rowsSCH = OperationStatisticsClientHour["rows"];
					
			Для Каждого rowSCH Из rowsSCH Цикл
				СтатистикаПоЧасам = Новый Структура;
				Для ТекИндекс = 0 По МаксимальныйИндексSCD Цикл
					Если columnsValueIndexCH[columnsSCH[ТекИндекс]] <> Неопределено Тогда
						Значение = columnsValueIndexCH[columnsSCH[ТекИндекс]][Формат(rowSCH[ТекИндекс],"ЧГ=0")];
					Иначе
						Значение = rowSCH[ТекИндекс];
					КонецЕсли;
					СтатистикаПоЧасам.Вставить(columnsSCH[ТекИндекс], Значение);
				КонецЦикла;
				
				ОперацииБизнесСтатистикиПакет.Добавить(СтатистикаПоЧасам);
			КонецЦикла;
			
		КонецЕсли;
		
		ЗагрузитьОперацииБизнесСтатистики(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ОперацииБизнесСтатистикиПакет, РегистраторПакета, ДатаJSON_ISO_1С);
		
		// Загружаем секцию комментарии статистики
		//
		CommentsStatistics = business["CommentsStatistics"];
		Если CommentsStatistics <> Неопределено Тогда
			columnsCommentsStatistics = CommentsStatistics["columns"];
			columnsValueIndexCS = CommentsStatistics["columnsValueIndex"];
			columnsValueIndexCS.Вставить("Период", columnsValueIndex["Период"]);
			columnsValueIndexCS.Вставить("ОперацияСтатистики", columnsValueIndex["ОперацияСтатистики"]);
			МаксимальныйИндексCommentsStatistics = columnsCommentsStatistics.ВГраница();
			rowsCommentsStatistics = CommentsStatistics["rows"];
			
			КомментарииБизнесСтатистикиПакет = Новый Массив;
			Для Каждого ТекКомментарийБизнесСтатистики Из rowsCommentsStatistics Цикл
				КомментарийБизнесСтатистики = Новый Структура;
				Для ТекИндекс = 0 По МаксимальныйИндексCommentsStatistics Цикл
					Если columnsValueIndexCS[columnsCommentsStatistics[ТекИндекс]] <> Неопределено Тогда
						Значение = columnsValueIndexCS[columnsCommentsStatistics[ТекИндекс]][Формат(ТекКомментарийБизнесСтатистики[ТекИндекс],"ЧГ=0")];
					Иначе
						Значение = ТекКомментарийБизнесСтатистики[ТекИндекс];
					КонецЕсли;
					КомментарийБизнесСтатистики.Вставить(columnsCommentsStatistics[ТекИндекс], Значение);
				КонецЦикла;
				
				КомментарииБизнесСтатистикиПакет.Добавить(КомментарийБизнесСтатистики);
			КонецЦикла;
			
			ЗагрузитьКомментарииБизнесСтатистики(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, КомментарииБизнесСтатистикиПакет, РегистраторПакета, ДатаJSON_ISO_1С);
		КонецЕсли;
				
		// Загружаем секцию области статистики
		//
		StatisticalAreas = business["StatisticalAreas"];
		Если StatisticalAreas <> Неопределено Тогда
			columnsStatisticalAreas = StatisticalAreas["columns"];
			columnsValueIndexSA = StatisticalAreas["columnsValueIndex"];
			columnsValueIndexSA.Вставить("Период", columnsValueIndex["Период"]);
			columnsValueIndexSA.Вставить("ОперацияСтатистики", columnsValueIndex["ОперацияСтатистики"]);
			МаксимальныйИндексStatisticalAreas = columnsStatisticalAreas.ВГраница();
			rowsStatisticalAreas = StatisticalAreas["rows"];
					
			ОбластиБизнесСтатистикиПакет = Новый Массив;
			Для Каждого ТекОбластьБизнесСтатистики Из rowsStatisticalAreas Цикл
				ОбластьБизнесСтатистики = Новый Структура;
				Для ТекИндекс = 0 По МаксимальныйИндексStatisticalAreas Цикл
					Если columnsValueIndexSA[columnsStatisticalAreas[ТекИндекс]] <> Неопределено Тогда
						Значение = columnsValueIndexSA[columnsStatisticalAreas[ТекИндекс]][Формат(ТекОбластьБизнесСтатистики[ТекИндекс],"ЧГ=0")];
					Иначе
						Значение = ТекОбластьБизнесСтатистики[ТекИндекс];
					КонецЕсли;
					ОбластьБизнесСтатистики.Вставить(columnsStatisticalAreas[ТекИндекс], Значение);
				КонецЦикла;
				
				ОбластиБизнесСтатистикиПакет.Добавить(ОбластьБизнесСтатистики);
			КонецЦикла;
			
			ЗагрузитьОбластиБизнесСтатистики(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ОбластиБизнесСтатистикиПакет, РегистраторПакета, ДатаJSON_ISO_1С);
		КонецЕсли;
						
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьОперацииБизнесСтатистики(ИнформационнаяБаза, ОперацииБизнесСтатистикиПакет, РегистраторПакета, ДатаJSON_ISO_1С)
	ТаблицаОперацийБизнесСтатистики = ПолучитьОбъектыОперацийБизнесСтатистики(ОперацииБизнесСтатистикиПакет, ДатаJSON_ISO_1С);
	ЗаписатьОперацииБизнесСтатистики(ИнформационнаяБаза, ТаблицаОперацийБизнесСтатистики, РегистраторПакета);
КонецПроцедуры

Функция ПолучитьОбъектыОперацийБизнесСтатистики(ОперацииБизнесСтатистикиПакет, ДатаJSON_ISO_1С)
	ТаблицаОперацийБизнесСтатистики = Новый ТаблицаЗначений;
	ТаблицаОперацийБизнесСтатистики.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаОперацийБизнесСтатистики.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1000)));
	ТаблицаОперацийБизнесСтатистики.Колонки.Добавить("КоличествоЗначений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОперацийБизнесСтатистики.Колонки.Добавить("СуммаЗначений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОперацийБизнесСтатистики.Колонки.Добавить("ХешПолноеНаименование", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(32)));
	
	
	Для Каждого ТекОперация Из ОперацииБизнесСтатистикиПакет Цикл
		НоваяСтрока = ТаблицаОперацийБизнесСтатистики.Добавить();
		НоваяСтрока.Период = ДатаJSON_ISO(ТекОперация.Период, ДатаJSON_ISO_1С);
		НоваяСтрока.НаименованиеПолное = ТекОперация.ОперацияСтатистики;
		НоваяСтрока.КоличествоЗначений = ТекОперация.КоличествоЗначений;
		НоваяСтрока.СуммаЗначений = ТекОперация.СуммаЗначений;
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(НоваяСтрока.НаименованиеПолное);
		НоваяСтрока.ХешПолноеНаименование = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|   ТаблицаОперацийБизнесСтатистики.Период КАК ПериодПакет,
	|	ТаблицаОперацийБизнесСтатистики.НаименованиеПолное КАК НаименованиеПолноеПакет,
	|	ТаблицаОперацийБизнесСтатистики.КоличествоЗначений КАК КоличествоЗначенийПакет,
	|	ТаблицаОперацийБизнесСтатистики.СуммаЗначений КАК СуммаЗначенийПакет,
	|	ТаблицаОперацийБизнесСтатистики.ХешПолноеНаименование КАК ХешПолноеНаименованиеПакет
	|ПОМЕСТИТЬ
	|	ТаблицаОперацийБизнесСтатистики
	|ИЗ
	|	&ТаблицаОперацийБизнесСтатистики КАК ТаблицаОперацийБизнесСтатистики
	|;
	|ВЫБРАТЬ
	|	ТаблицаОперацийБизнесСтатистики.ПериодПакет КАК ПериодПакет,
	|	ТаблицаОперацийБизнесСтатистики.НаименованиеПолноеПакет КАК НаименованиеПолноеПакет,
	|	СпрОперацииБизнесСтатистики.Ссылка КАК НаименованиеПолноеСсылка,
	|	ТаблицаОперацийБизнесСтатистики.ХешПолноеНаименованиеПакет КАК ХешПолноеНаименованиеПакет,
	|	ТаблицаОперацийБизнесСтатистики.КоличествоЗначенийПакет КАК КоличествоЗначенийПакет,	
	|	ТаблицаОперацийБизнесСтатистики.СуммаЗначенийПакет КАК СуммаЗначенийПакет
	|ИЗ
	|	ТаблицаОперацийБизнесСтатистики
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ОперацииБизнесСтатистики КАК СпрОперацииБизнесСтатистики
	|ПО
	|	СпрОперацииБизнесСтатистики.ХешПолноеНаименование = ТаблицаОперацийБизнесСтатистики.ХешПолноеНаименованиеПакет
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОперацийБизнесСтатистики.ПериодПакет,
	|   ТаблицаОперацийБизнесСтатистики.НаименованиеПолноеПакет
	|";
	
	Запрос.УстановитьПараметр("ТаблицаОперацийБизнесСтатистики", ТаблицаОперацийБизнесСтатистики);
	
	ТаблицаОперацийБизнесСтатистики = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекОперация Из ТаблицаОперацийБизнесСтатистики Цикл
		Если НЕ ЗначениеЗаполнено(ТекОперация.НаименованиеПолноеСсылка) Тогда
			ТекОперация.НаименованиеПолноеСсылка = Справочники.ОперацииБизнесСтатистики.СоздатьЭлементПоНаименованиюПолное(ТекОперация.НаименованиеПолноеПакет, ТекОперация.ХешПолноеНаименованиеПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОперацийБизнесСтатистики;
КонецФункции

Процедура ЗаписатьОперацииБизнесСтатистики(ИнформационнаяБаза, ТаблицаОперацийБизнесСтатистики, РегистраторПакета)
	НаборЗаписей = РегистрыСведений.ОперацииБизнесСтатистики.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	ТекущийПериод = Дата(1,1,1);

	Для Каждого ТекОперация Из ТаблицаОперацийБизнесСтатистики Цикл
		Если ТекОперация.ПериодПакет <> ТекущийПериод Тогда
			Если  НаборЗаписей.Количество() > 0 Тогда
				Если РегистраторПакета.ЭтоНовый Тогда
					НаборЗаписей.Записать(Истина);
				Иначе
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			НаборЗаписей.Отбор.Период.Установить(ТекОперация.ПериодПакет);
			ТекущийПериод = ТекОперация.ПериодПакет;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ТекОперация.ПериодПакет;
		НоваяЗапись.ОперацияБизнесСтатистики = ТекОперация.НаименованиеПолноеСсылка;
		НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
		НоваяЗапись.КоличествоЗначений = ТекОперация.КоличествоЗначенийПакет;
		НоваяЗапись.СуммаЗначений = ТекОперация.СуммаЗначенийПакет;
	КонецЦикла;
	
	Если  НаборЗаписей.Количество() > 0 Тогда
		Если РегистраторПакета.ЭтоНовый Тогда
			НаборЗаписей.Записать(Истина);
		Иначе
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьКомментарииБизнесСтатистики(ИнформационнаяБаза, КомментарииБизнесСтатистикиПакет, РегистраторПакета, ДатаJSON_ISO_1С)
	ТаблицаКомментарийБизнесСтатистики = ПолучитьОбъектыКомментарийБизнесСтатистики(КомментарииБизнесСтатистикиПакет, ДатаJSON_ISO_1С);
	ЗаписатьКомментарииБизнесСтатистики(ИнформационнаяБаза, ТаблицаКомментарийБизнесСтатистики, РегистраторПакета);
КонецПроцедуры

Функция ПолучитьОбъектыКомментарийБизнесСтатистики(КомментарииБизнесСтатистикиПакет, ДатаJSON_ISO_1С)
	ТаблицаКомментарийБизнесСтатистики = Новый ТаблицаЗначений;
	ТаблицаКомментарийБизнесСтатистики.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаКомментарийБизнесСтатистики.Колонки.Добавить("НаименованиеПолноеОперация", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1000)));
	ТаблицаКомментарийБизнесСтатистики.Колонки.Добавить("НаименованиеПолноеКомментарий", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1000)));
	ТаблицаКомментарийБизнесСтатистики.Колонки.Добавить("КоличествоЗначений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаКомментарийБизнесСтатистики.Колонки.Добавить("ХешПолноеНаименованиеОперация", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(32)));
	ТаблицаКомментарийБизнесСтатистики.Колонки.Добавить("ХешПолноеНаименованиеКомментарий", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(32)));
	
	
	Для Каждого ТекКомментарий Из КомментарииБизнесСтатистикиПакет Цикл
		НоваяСтрока = ТаблицаКомментарийБизнесСтатистики.Добавить();
		НоваяСтрока.Период = ДатаJSON_ISO(ТекКомментарий.Период, ДатаJSON_ISO_1С);
		НоваяСтрока.НаименованиеПолноеОперация = ТекКомментарий.ОперацияСтатистики;
		НоваяСтрока.НаименованиеПолноеКомментарий = ТекКомментарий.КомментарийСтатистики;
		НоваяСтрока.КоличествоЗначений = ТекКомментарий.КоличествоЗначений;
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(НоваяСтрока.НаименованиеПолноеОперация);
		НоваяСтрока.ХешПолноеНаименованиеОперация = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(НоваяСтрока.НаименованиеПолноеКомментарий);
		НоваяСтрока.ХешПолноеНаименованиеКомментарий = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|   ТаблицаКомментарийБизнесСтатистики.Период КАК ПериодПакет,
	|	ТаблицаКомментарийБизнесСтатистики.НаименованиеПолноеОперация КАК НаименованиеПолноеОперацияПакет,
	|	ТаблицаКомментарийБизнесСтатистики.НаименованиеПолноеКомментарий КАК НаименованиеПолноеКомментарийПакет,
	|	ТаблицаКомментарийБизнесСтатистики.КоличествоЗначений КАК КоличествоЗначенийПакет,
	|	ТаблицаКомментарийБизнесСтатистики.ХешПолноеНаименованиеОперация КАК ХешПолноеНаименованиеОперацияПакет,
	|	ТаблицаКомментарийБизнесСтатистики.ХешПолноеНаименованиеКомментарий КАК ХешПолноеНаименованиеКомментарийПакет
	|ПОМЕСТИТЬ
	|	ТаблицаКомментарийБизнесСтатистики
	|ИЗ
	|	&ТаблицаКомментарийБизнесСтатистики КАК ТаблицаКомментарийБизнесСтатистики
	|;
	|ВЫБРАТЬ
	|	ТаблицаКомментарийБизнесСтатистики.ПериодПакет КАК ПериодПакет,
	|	ТаблицаКомментарийБизнесСтатистики.НаименованиеПолноеОперацияПакет КАК НаименованиеПолноеОперацияПакет,
	|	СпрОперацииБизнесСтатистики.Ссылка КАК НаименованиеПолноеОперацияСсылка,
	|	ТаблицаКомментарийБизнесСтатистики.НаименованиеПолноеКомментарийПакет КАК НаименованиеПолноеКомментарийПакет,
	|	СпрКомментарииБизнесСтатистики.Ссылка КАК НаименованиеПолноеКомментарийСсылка,
	|	ТаблицаКомментарийБизнесСтатистики.ХешПолноеНаименованиеОперацияПакет КАК ХешПолноеНаименованиеОперацияПакет,
	|	ТаблицаКомментарийБизнесСтатистики.ХешПолноеНаименованиеКомментарийПакет КАК ХешПолноеНаименованиеКомментарийПакет,
	|	ТаблицаКомментарийБизнесСтатистики.КоличествоЗначенийПакет КАК КоличествоЗначенийПакет
	|ИЗ
	|	ТаблицаКомментарийБизнесСтатистики
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ОперацииБизнесСтатистики КАК СпрОперацииБизнесСтатистики
	|ПО
	|	СпрОперацииБизнесСтатистики.ХешПолноеНаименование = ТаблицаКомментарийБизнесСтатистики.ХешПолноеНаименованиеОперацияПакет
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.КомментарииБизнесСтатистики КАК СпрКомментарииБизнесСтатистики
	|ПО
	|	СпрКомментарииБизнесСтатистики.ХешПолноеНаименование = ТаблицаКомментарийБизнесСтатистики.ХешПолноеНаименованиеКомментарийПакет
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаКомментарийБизнесСтатистики.ПериодПакет,
	|   ТаблицаКомментарийБизнесСтатистики.НаименованиеПолноеОперацияПакет
	|";
	
	Запрос.УстановитьПараметр("ТаблицаКомментарийБизнесСтатистики", ТаблицаКомментарийБизнесСтатистики);
	
	ТаблицаКомментарийБизнесСтатистики = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекКомментарий Из ТаблицаКомментарийБизнесСтатистики Цикл
		Если НЕ ЗначениеЗаполнено(ТекКомментарий.НаименованиеПолноеКомментарийСсылка) Тогда
			ТекКомментарий.НаименованиеПолноеКомментарийСсылка = Справочники.КомментарииБизнесСтатистики.СоздатьЭлементПоНаименованию(ТекКомментарий.НаименованиеПолноеКомментарийПакет, ТекКомментарий.ХешПолноеНаименованиеКомментарийПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаКомментарийБизнесСтатистики;
КонецФункции

Процедура ЗаписатьКомментарииБизнесСтатистики(ИнформационнаяБаза, ТаблицаКомментарийБизнесСтатистики, РегистраторПакета)
	НаборЗаписей = РегистрыСведений.КомментарииБизнесСтатистики.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	ТекущийПериод = Дата(1,1,1);
			
	Для Каждого ТекКомментарий Из ТаблицаКомментарийБизнесСтатистики Цикл
		Если ТекКомментарий.ПериодПакет <> ТекущийПериод Тогда
			Если  НаборЗаписей.Количество() > 0 Тогда
				Если РегистраторПакета.ЭтоНовый Тогда
					НаборЗаписей.Записать(Истина);
				Иначе
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			НаборЗаписей.Отбор.Период.Установить(ТекКомментарий.ПериодПакет);
			ТекущийПериод = ТекКомментарий.ПериодПакет;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ТекКомментарий.ПериодПакет;
		НоваяЗапись.ОперацияБизнесСтатистики = ТекКомментарий.НаименованиеПолноеОперацияСсылка;
		НоваяЗапись.КомментарийБизнесСтатистики = ТекКомментарий.НаименованиеПолноеКомментарийСсылка;
		НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
		НоваяЗапись.КоличествоЗначений = ТекКомментарий.КоличествоЗначенийПакет;
	КонецЦикла;
	
	Если  НаборЗаписей.Количество() > 0 Тогда
		Если РегистраторПакета.ЭтоНовый Тогда
			НаборЗаписей.Записать(Истина);
		Иначе
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьОбластиБизнесСтатистики(ИнформационнаяБаза, ОбластиБизнесСтатистикиПакет, РегистраторПакета, ДатаJSON_ISO_1С)
	ТаблицаОбластейБизнесСтатистики = ПолучитьОбъектыОбластейБизнесСтатистики(ОбластиБизнесСтатистикиПакет, ДатаJSON_ISO_1С);
	ЗаписатьОбластиБизнесСтатистики(ИнформационнаяБаза, ТаблицаОбластейБизнесСтатистики, РегистраторПакета);
КонецПроцедуры

Функция ПолучитьОбъектыОбластейБизнесСтатистики(ОбластиБизнесСтатистикиПакет, ДатаJSON_ISO_1С)
	ТаблицаОбластейБизнесСтатистики = Новый ТаблицаЗначений;
	ТаблицаОбластейБизнесСтатистики.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаОбластейБизнесСтатистики.Колонки.Добавить("НаименованиеПолноеОперация", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1000)));
	ТаблицаОбластейБизнесСтатистики.Колонки.Добавить("НаименованиеПолноеОбласть", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1000)));
	ТаблицаОбластейБизнесСтатистики.Колонки.Добавить("КоличествоЗначений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОбластейБизнесСтатистики.Колонки.Добавить("ХешПолноеНаименованиеОперация", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(32)));
	ТаблицаОбластейБизнесСтатистики.Колонки.Добавить("ХешПолноеНаименованиеОбласть", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(32)));
	
	
	Для Каждого ТекОбласть Из ОбластиБизнесСтатистикиПакет Цикл
		НоваяСтрока = ТаблицаОбластейБизнесСтатистики.Добавить();
		НоваяСтрока.Период = ДатаJSON_ISO(ТекОбласть.Период, ДатаJSON_ISO_1С);
		НоваяСтрока.НаименованиеПолноеОперация = ТекОбласть.ОперацияСтатистики;
		НоваяСтрока.НаименованиеПолноеОбласть = ТекОбласть.ОбластьСтатистики;
		НоваяСтрока.КоличествоЗначений = ТекОбласть.КоличествоЗначений;
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(НоваяСтрока.НаименованиеПолноеОперация);
		НоваяСтрока.ХешПолноеНаименованиеОперация = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(НоваяСтрока.НаименованиеПолноеОбласть);
		НоваяСтрока.ХешПолноеНаименованиеОбласть = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|   ТаблицаОбластейБизнесСтатистики.Период КАК ПериодПакет,
	|	ТаблицаОбластейБизнесСтатистики.НаименованиеПолноеОперация КАК НаименованиеПолноеОперацияПакет,
	|	ТаблицаОбластейБизнесСтатистики.НаименованиеПолноеОбласть КАК НаименованиеПолноеОбластьПакет,
	|	ТаблицаОбластейБизнесСтатистики.КоличествоЗначений КАК КоличествоЗначенийПакет,
	|	ТаблицаОбластейБизнесСтатистики.ХешПолноеНаименованиеОперация КАК ХешПолноеНаименованиеОперацияПакет,
	|	ТаблицаОбластейБизнесСтатистики.ХешПолноеНаименованиеОбласть КАК ХешПолноеНаименованиеОбластьПакет
	|ПОМЕСТИТЬ
	|	ТаблицаОбластейБизнесСтатистики
	|ИЗ
	|	&ТаблицаОбластейБизнесСтатистики КАК ТаблицаОбластейБизнесСтатистики
	|;
	|ВЫБРАТЬ
	|	ТаблицаОбластейБизнесСтатистики.ПериодПакет КАК ПериодПакет,
	|	ТаблицаОбластейБизнесСтатистики.НаименованиеПолноеОперацияПакет КАК НаименованиеПолноеОперацияПакет,
	|	СпрОперацииБизнесСтатистики.Ссылка КАК НаименованиеПолноеОперацияСсылка,
	|	ТаблицаОбластейБизнесСтатистики.НаименованиеПолноеОбластьПакет КАК НаименованиеПолноеОбластьПакет,
	|	СпрОбластиБизнесСтатистики.Ссылка КАК НаименованиеПолноеОбластьСсылка,
	|	ТаблицаОбластейБизнесСтатистики.ХешПолноеНаименованиеОперацияПакет КАК ХешПолноеНаименованиеОперацияПакет,
	|	ТаблицаОбластейБизнесСтатистики.ХешПолноеНаименованиеОбластьПакет КАК ХешПолноеНаименованиеОбластьПакет,
	|	ТаблицаОбластейБизнесСтатистики.КоличествоЗначенийПакет КАК КоличествоЗначенийПакет
	|ИЗ
	|	ТаблицаОбластейБизнесСтатистики
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ОперацииБизнесСтатистики КАК СпрОперацииБизнесСтатистики
	|ПО
	|	СпрОперацииБизнесСтатистики.ХешПолноеНаименование = ТаблицаОбластейБизнесСтатистики.ХешПолноеНаименованиеОперацияПакет
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ОбластиБизнесСтатистики КАК СпрОбластиБизнесСтатистики
	|ПО
	|	СпрОбластиБизнесСтатистики.ХешПолноеНаименование = ТаблицаОбластейБизнесСтатистики.ХешПолноеНаименованиеОбластьПакет
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОбластейБизнесСтатистики.ПериодПакет,
	|   ТаблицаОбластейБизнесСтатистики.НаименованиеПолноеОперацияПакет
	|";
	
	Запрос.УстановитьПараметр("ТаблицаОбластейБизнесСтатистики", ТаблицаОбластейБизнесСтатистики);
	
	ТаблицаОбластейБизнесСтатистики = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекОбласть Из ТаблицаОбластейБизнесСтатистики Цикл
		Если НЕ ЗначениеЗаполнено(ТекОбласть.НаименованиеПолноеОбластьСсылка) Тогда
			ТекОбласть.НаименованиеПолноеОбластьСсылка = Справочники.ОбластиБизнесСтатистики.СоздатьЭлементПоНаименованию(ТекОбласть.НаименованиеПолноеОбластьПакет, ТекОбласть.ХешПолноеНаименованиеОбластьПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОбластейБизнесСтатистики;
КонецФункции

Процедура ЗаписатьОбластиБизнесСтатистики(ИнформационнаяБаза, ТаблицаОбластейБизнесСтатистики, РегистраторПакета)
	НаборЗаписей = РегистрыСведений.ОбластиБизнесСтатистики.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	ТекущийПериод = Дата(1,1,1);
			
	Для Каждого ТекОбласть Из ТаблицаОбластейБизнесСтатистики Цикл
		Если ТекОбласть.ПериодПакет <> ТекущийПериод Тогда
			Если  НаборЗаписей.Количество() > 0 Тогда
				Если РегистраторПакета.ЭтоНовый Тогда
					НаборЗаписей.Записать(Истина);
				Иначе
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			НаборЗаписей.Отбор.Период.Установить(ТекОбласть.ПериодПакет);
			ТекущийПериод = ТекОбласть.ПериодПакет;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ТекОбласть.ПериодПакет;
		НоваяЗапись.ОперацияБизнесСтатистики = ТекОбласть.НаименованиеПолноеОперацияСсылка;
		НоваяЗапись.ОбластьБизнесСтатистики = ТекОбласть.НаименованиеПолноеОбластьСсылка;
		НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
		НоваяЗапись.КоличествоЗначений = ТекОбласть.КоличествоЗначенийПакет;
	КонецЦикла;
	
	Если  НаборЗаписей.Количество() > 0 Тогда
		Если РегистраторПакета.ЭтоНовый Тогда
			НаборЗаписей.Записать(Истина);
		Иначе
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОценкаПроизводительности

Процедура ЗаписатьСекциюОценкаПроизводительности(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета, ДатаJSON_ISO_1С)
	ОценкаПроизводительностиПакет = Новый Массив;
	
	ВерсияПакета = "1.0.0.0";
	Если Пакет["versionPacket"] <> Неопределено Тогда
		ВерсияПакета = Пакет["versionPacket"];
	КонецЕсли;
	
	// Коллекция ключевых операций Клиента.
	КлючевыеОперации = Новый Соответствие;
		
	МаксимальныйИндекс = 0;
	Если Пакет["perf"] <> Неопределено Тогда
		perf = Пакет["perf"];
		columns = perf["columns"];
		columnsValueIndex = perf["columnsValueIndex"];
		KeyOperations = perf["KOHash"];
		МаксимальныйИндекс = columns.ВГраница();
		rows = perf["rows"];
		
		Для Каждого ТекЗамер Из rows Цикл
			ОценкаПроизводительности = Новый Структура;
			Для ТекИндекс = 0 По МаксимальныйИндекс Цикл
				Если columnsValueIndex[columns[ТекИндекс]] <> Неопределено Тогда
					Значение = columnsValueIndex[columns[ТекИндекс]][Формат(ТекЗамер[ТекИндекс],"ЧГ=0")];
				Иначе
					Значение = ТекЗамер[ТекИндекс];
				КонецЕсли;
				ОценкаПроизводительности.Вставить(columns[ТекИндекс], Значение);
			КонецЦикла;
			
			ОценкаПроизводительностиПакет.Добавить(ОценкаПроизводительности);
		КонецЦикла;
		
		Если KeyOperations <> Неопределено Тогда
			Для Каждого Запись Из KeyOperations Цикл
				Если КлючевыеОперации[Запись.Ключ] = Неопределено Тогда
					КлючевыеОперации.Вставить(Запись.Ключ, Запись.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
	Если Пакет["internal_perf"] <> Неопределено Тогда
		perf = Пакет["internal_perf"];
		columns = perf["columns"];
		columnsValueIndex = perf["columnsValueIndex"];
		KeyOperations = perf["KOHash"];
		// На случай если забыли в БСП забыли обновить технологические замеры.
		Если columns.ВГраница() = МаксимальныйИндекс Тогда
			МаксимальныйИндекс = columns.ВГраница();
			rows = perf["rows"];
			
			Для Каждого ТекЗамер Из rows Цикл
				ОценкаПроизводительности = Новый Структура;
				Для ТекИндекс = 0 По МаксимальныйИндекс Цикл
					Если columnsValueIndex[columns[ТекИндекс]] <> Неопределено Тогда
						Значение = columnsValueIndex[columns[ТекИндекс]][Формат(ТекЗамер[ТекИндекс],"ЧГ=0")];
					Иначе
						Значение = ТекЗамер[ТекИндекс];
					КонецЕсли;
					ОценкаПроизводительности.Вставить(columns[ТекИндекс], Значение);
				КонецЦикла;
				
				ОценкаПроизводительностиПакет.Добавить(ОценкаПроизводительности);
			КонецЦикла;
			
			Если KeyOperations <> Неопределено Тогда
				Для Каждого Запись Из KeyOperations Цикл
					Если КлючевыеОперации[Запись.Ключ] = Неопределено Тогда
						КлючевыеОперации.Вставить(Запись.Ключ, Запись.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОценкаПроизводительностиПакет.Количество() > 0 Тогда
		ЗагрузитьОценкуПроизводительности(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ОценкаПроизводительностиПакет, РегистраторПакета, ДатаJSON_ISO_1С, ВерсияПакета, КлючевыеОперации);
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьОценкуПроизводительности(ИнформационнаяБаза, ОценкаПроизводительностиПакет, РегистраторПакета, ДатаJSON_ISO_1С, ВерсияПакета, КлючевыеОперации)
	ТаблицаОценкиПроизводительности = ПолучитьОбъектыОценкиПроизводительности(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета);
	ЗаписатьОценкуПроизводительности(ИнформационнаяБаза, ТаблицаОценкиПроизводительности, РегистраторПакета, ВерсияПакета);
	
	Если ВерсияПакета = "1.0.1.0" Тогда
		ТаблицаЗамерыВремениЦентраМониторинга = ПолучитьОбъектыЗамерыВремениЦентраМониторинга(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета);
		ЗаписатьЗамерыВремениЦентраМониторинга(ИнформационнаяБаза, ТаблицаЗамерыВремениЦентраМониторинга, РегистраторПакета, ВерсияПакета);
	ИначеЕсли ВерсияПакета = "1.0.2.0" Тогда
		ТаблицаЗамерыВремениЦентраМониторинга = ПолучитьОбъектыЗамерыВремениЦентраМониторинга_1_0_2_0(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета);
		ЗаписатьЗамерыВремениЦентраМониторинга(ИнформационнаяБаза, ТаблицаЗамерыВремениЦентраМониторинга, РегистраторПакета, ВерсияПакета);
	ИначеЕсли ВерсияПакета = "1.0.3.0" Тогда
		ТаблицаЗамерыВремениЦентраМониторинга = ПолучитьОбъектыЗамерыВремениЦентраМониторинга_1_0_3_0(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета);
		ЗаписатьЗамерыВремениЦентраМониторинга(ИнформационнаяБаза, ТаблицаЗамерыВремениЦентраМониторинга, РегистраторПакета, ВерсияПакета);
	ИначеЕсли ВерсияПакета = "1.0.4.0" Тогда
		СсылкиКлючевыхОпераций = СсылкиКлючевыхОпераций(КлючевыеОперации);
		ТаблицаЗамерыВремениЦентраМониторинга = ПолучитьОбъектыЗамерыВремениЦентраМониторинга_1_0_4_0(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета, СсылкиКлючевыхОпераций);
		ЗаписатьЗамерыВремениЦентраМониторинга(ИнформационнаяБаза, ТаблицаЗамерыВремениЦентраМониторинга, РегистраторПакета, ВерсияПакета);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОбъектыОценкиПроизводительности(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета)
	
	Если ВерсияПакета = "1.0.0.0" Тогда
		Возврат ПолучитьОбъектыОценкиПроизводительности_1_0_0_0(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета);
	ИначеЕсли ВерсияПакета = "1.0.1.0" Тогда
		Возврат ПолучитьОбъектыОценкиПроизводительности_1_0_1_0(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбъектыОценкиПроизводительности_1_0_0_0(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета)
	ТаблицаОценкиПроизводительности = Новый ТаблицаЗначений;
	ТаблицаОценкиПроизводительности.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("КлючеваяОперация", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("ЦелевоеВремя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("N_T", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("N_T_4T", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("N_4T", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
		
	Для Каждого ТекОценка Из ОценкаПроизводительностиПакет Цикл
		НоваяСтрока = ТаблицаОценкиПроизводительности.Добавить();
		НоваяСтрока.Период = ДатаJSON_ISO(ТекОценка.Период, ДатаJSON_ISO_1С);
		НоваяСтрока.КлючеваяОперация = ТекОценка.КлючеваяОперация;
		НоваяСтрока.ЦелевоеВремя = ТекОценка.ЦелевоеВремя;
		НоваяСтрока.N_T = ТекОценка.N_T;
		НоваяСтрока.N_T_4T = ТекОценка.N_T_4T;
		НоваяСтрока.N_4T = ТекОценка.N_4T;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|   ТаблицаОценкиПроизводительности.Период КАК ПериодПакет,
	|	ТаблицаОценкиПроизводительности.КлючеваяОперация КАК КлючеваяОперацияПакет,
	|	ТаблицаОценкиПроизводительности.ЦелевоеВремя КАК ЦелевоеВремяПакет,
	|	ТаблицаОценкиПроизводительности.N_T КАК N_TПакет,
	|	ТаблицаОценкиПроизводительности.N_T_4T КАК N_T_4TПакет,
	|	ТаблицаОценкиПроизводительности.N_4T КАК N_4TПакет
	|ПОМЕСТИТЬ
	|	ТаблицаОценкиПроизводительности
	|ИЗ
	|	&ТаблицаОценкиПроизводительности КАК ТаблицаОценкиПроизводительности
	|;
	|ВЫБРАТЬ
	|	ТаблицаОценкиПроизводительности.ПериодПакет КАК ПериодПакет,
	|	ТаблицаОценкиПроизводительности.КлючеваяОперацияПакет КАК КлючеваяОперацияПакет,
	|	СпрКлючевыеОперации.Ссылка КАК КлючеваяОперацияСсылка,
	|	ТаблицаОценкиПроизводительности.ЦелевоеВремяПакет КАК ЦелевоеВремяПакет,
	|	ТаблицаОценкиПроизводительности.N_TПакет КАК N_TПакет,
	|	ТаблицаОценкиПроизводительности.N_T_4TПакет КАК N_T_4TПакет,
	|	ТаблицаОценкиПроизводительности.N_4TПакет КАК N_4TПакет
	|ИЗ
	|	ТаблицаОценкиПроизводительности
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.КлючевыеОперацииЦентрМониторинга КАК СпрКлючевыеОперации
	|ПО
	|	СпрКлючевыеОперации.Наименование = ТаблицаОценкиПроизводительности.КлючеваяОперацияПакет
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОценкиПроизводительности.ПериодПакет
	|";
	
	Запрос.УстановитьПараметр("ТаблицаОценкиПроизводительности", ТаблицаОценкиПроизводительности);
	
	ТаблицаОценкиПроизводительности = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекОценка Из ТаблицаОценкиПроизводительности Цикл
		Если НЕ ЗначениеЗаполнено(ТекОценка.КлючеваяОперацияСсылка) Тогда
			ТекОценка.КлючеваяОперацияСсылка = Справочники.КлючевыеОперацииЦентрМониторинга.СоздатьЭлементПоНаименованию(ТекОценка.КлючеваяОперацияПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОценкиПроизводительности;
КонецФункции

Функция ПолучитьОбъектыОценкиПроизводительности_1_0_1_0(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета)
	
	ТаблицаОценкиПроизводительности = Новый ТаблицаЗначений;
	ТаблицаОценкиПроизводительности.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("КлючеваяОперация", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("ЦелевоеВремя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("N_T", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("N_T_4T", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("N_4T", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	
	ТаблицаОценкиПроизводительности.Колонки.Добавить("ВремяВыполненияМаксимум", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("ВремяВыполненияМедиана", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("ВремяВыполненияМинимум", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("ВремяВыполненияСреднее", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("ВремяВыполненияСтандартноеОтклонение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("КоличествоОпераций", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("ВремяВыполненияМаксимум90", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("ВремяВыполненияМедиана90", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("ВремяВыполненияМинимум90", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("ВремяВыполненияСреднее90", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("ВремяВыполненияСтандартноеОтклонение90", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОценкиПроизводительности.Колонки.Добавить("КоличествоОпераций90", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
    
    Индексы = Новый Соответствие;
    
    Для Каждого ТекОценка Из ОценкаПроизводительностиПакет Цикл
        
        Период = ДатаJSON_ISO(ТекОценка.Период, ДатаJSON_ISO_1С);
        Индекс = Формат(Период, "ДФ=yyyyMMddhhmmss") + "_" + ТекОценка.КлючеваяОперация;
        
        Если Индексы[Индекс] = Неопределено Тогда
            Индексы.Вставить(Индекс, Истина);
            
            НоваяСтрока = ТаблицаОценкиПроизводительности.Добавить();
            НоваяСтрока.Период = Период;
            НоваяСтрока.КлючеваяОперация = ТекОценка.КлючеваяОперация;
            НоваяСтрока.ЦелевоеВремя = ТекОценка.ЦелевоеВремя;
            НоваяСтрока.N_T = ТекОценка.N_T;
            НоваяСтрока.N_T_4T = ТекОценка.N_T_4T;
            НоваяСтрока.N_4T = ТекОценка.N_4T;
            
            НоваяСтрока.ВремяВыполненияМаксимум = ТекОценка.ВремяВыполненияМаксимум;
            НоваяСтрока.ВремяВыполненияМедиана = ТекОценка.ВремяВыполненияМедиана;
            НоваяСтрока.ВремяВыполненияМинимум = ТекОценка.ВремяВыполненияМинимум;
            НоваяСтрока.ВремяВыполненияСреднее = ТекОценка.ВремяВыполненияСреднее;
            НоваяСтрока.ВремяВыполненияСтандартноеОтклонение = ТекОценка.ВремяВыполненияСтандартноеОтклонение;
            НоваяСтрока.КоличествоОпераций = ТекОценка.КоличествоОпераций;
            НоваяСтрока.ВремяВыполненияМаксимум90 = ТекОценка.ВремяВыполненияМаксимум90;
            НоваяСтрока.ВремяВыполненияМедиана90 = ТекОценка.ВремяВыполненияМедиана90;
            НоваяСтрока.ВремяВыполненияМинимум90 = ТекОценка.ВремяВыполненияМинимум90;
            НоваяСтрока.ВремяВыполненияСреднее90 = ТекОценка.ВремяВыполненияСреднее90;
            НоваяСтрока.ВремяВыполненияСтандартноеОтклонение90 = ТекОценка.ВремяВыполненияСтандартноеОтклонение90;
            НоваяСтрока.КоличествоОпераций90 = ТекОценка.КоличествоОпераций90;
        КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|   ТаблицаОценкиПроизводительности.Период КАК ПериодПакет,
	|	ТаблицаОценкиПроизводительности.КлючеваяОперация КАК КлючеваяОперацияПакет,
	|	ТаблицаОценкиПроизводительности.ЦелевоеВремя КАК ЦелевоеВремяПакет,
	|	ТаблицаОценкиПроизводительности.N_T КАК N_TПакет,
	|	ТаблицаОценкиПроизводительности.N_T_4T КАК N_T_4TПакет,
	|	ТаблицаОценкиПроизводительности.N_4T КАК N_4TПакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияМаксимум КАК ВремяВыполненияМаксимумПакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияМедиана КАК ВремяВыполненияМедианаПакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияМинимум КАК ВремяВыполненияМинимумПакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияСреднее КАК ВремяВыполненияСреднееПакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияСтандартноеОтклонение КАК ВремяВыполненияСтандартноеОтклонениеПакет,
	|	ТаблицаОценкиПроизводительности.КоличествоОпераций КАК КоличествоОперацийПакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияМаксимум90 КАК ВремяВыполненияМаксимум90Пакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияМедиана90 КАК ВремяВыполненияМедиана90Пакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияМинимум90 КАК ВремяВыполненияМинимум90Пакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияСреднее90 КАК ВремяВыполненияСреднее90Пакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияСтандартноеОтклонение90 КАК ВремяВыполненияСтандартноеОтклонение90Пакет,
	|	ТаблицаОценкиПроизводительности.КоличествоОпераций90 КАК КоличествоОпераций90Пакет
	|ПОМЕСТИТЬ
	|	ТаблицаОценкиПроизводительности
	|ИЗ
	|	&ТаблицаОценкиПроизводительности КАК ТаблицаОценкиПроизводительности
	|;
	|ВЫБРАТЬ
	|	ТаблицаОценкиПроизводительности.ПериодПакет КАК ПериодПакет,
	|	ТаблицаОценкиПроизводительности.КлючеваяОперацияПакет КАК КлючеваяОперацияПакет,
	|	СпрКлючевыеОперации.Ссылка КАК КлючеваяОперацияСсылка,
	|	ТаблицаОценкиПроизводительности.ЦелевоеВремяПакет КАК ЦелевоеВремяПакет,
	|	ТаблицаОценкиПроизводительности.N_TПакет КАК N_TПакет,
	|	ТаблицаОценкиПроизводительности.N_T_4TПакет КАК N_T_4TПакет,
	|	ТаблицаОценкиПроизводительности.N_4TПакет КАК N_4TПакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияМаксимумПакет КАК ВремяВыполненияМаксимумПакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияМедианаПакет КАК ВремяВыполненияМедианаПакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияМинимумПакет КАК ВремяВыполненияМинимумПакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияСреднееПакет КАК ВремяВыполненияСреднееПакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияСтандартноеОтклонениеПакет КАК ВремяВыполненияСтандартноеОтклонениеПакет,
	|	ТаблицаОценкиПроизводительности.КоличествоОперацийПакет КАК КоличествоОперацийПакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияМаксимум90Пакет КАК ВремяВыполненияМаксимум90Пакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияМедиана90Пакет КАК ВремяВыполненияМедиана90Пакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияМинимум90Пакет КАК ВремяВыполненияМинимум90Пакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияСреднее90Пакет КАК ВремяВыполненияСреднее90Пакет,
	|	ТаблицаОценкиПроизводительности.ВремяВыполненияСтандартноеОтклонение90Пакет КАК ВремяВыполненияСтандартноеОтклонение90Пакет,
	|	ТаблицаОценкиПроизводительности.КоличествоОпераций90Пакет КАК КоличествоОпераций90Пакет
	|ИЗ
	|	ТаблицаОценкиПроизводительности
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.КлючевыеОперацииЦентрМониторинга КАК СпрКлючевыеОперации
	|ПО
	|	СпрКлючевыеОперации.Наименование = ТаблицаОценкиПроизводительности.КлючеваяОперацияПакет
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОценкиПроизводительности.ПериодПакет
	|";
	
	Запрос.УстановитьПараметр("ТаблицаОценкиПроизводительности", ТаблицаОценкиПроизводительности);
	
	ТаблицаОценкиПроизводительности = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекОценка Из ТаблицаОценкиПроизводительности Цикл
		Если НЕ ЗначениеЗаполнено(ТекОценка.КлючеваяОперацияСсылка) Тогда
			ТекОценка.КлючеваяОперацияСсылка = Справочники.КлючевыеОперацииЦентрМониторинга.СоздатьЭлементПоНаименованию(ТекОценка.КлючеваяОперацияПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОценкиПроизводительности;
КонецФункции

Функция ПолучитьОбъектыЗамерыВремениЦентраМониторинга(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета)
	
	ТаблицаЗамерыВремениЦентраМониторинга = Новый ТаблицаЗначений;
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("КлючеваяОперация", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("ВремяВыполнения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("КоличествоОпераций", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	
	Для Каждого ТекОценка Из ОценкаПроизводительностиПакет Цикл
		Период = ДатаJSON_ISO(ТекОценка.Период, ДатаJSON_ISO_1С);
		КлючеваяОперация = ТекОценка.КлючеваяОперация;
		
		Если ТекОценка.N_0_5 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 0.5;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_0_5;
		КонецЕсли;
		
		Если ТекОценка.N_1 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 1;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_1;
		КонецЕсли;
		
		Если ТекОценка.N_2 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 2;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_2;
		КонецЕсли;
		
		Если ТекОценка.N_3 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 3;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_3;
		КонецЕсли;
		
		Если ТекОценка.N_4 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 4;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_4;
		КонецЕсли;
		
		Если ТекОценка.N_5 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 5;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_5;
		КонецЕсли;
		
		Если ТекОценка.N_6 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 6;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_6;
		КонецЕсли;
		
		Если ТекОценка.N_7 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 7;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_7;
		КонецЕсли;
		
		Если ТекОценка.N_8 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 8;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_8;
		КонецЕсли;
		
		Если ТекОценка.N_9 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 9;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_9;
		КонецЕсли;
		
		Если ТекОценка.N_10 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 10;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_10;
		КонецЕсли;
		
		Если ТекОценка.N_11 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 11;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_11;
		КонецЕсли;
		
		Если ТекОценка.N_12 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 12;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_12;
		КонецЕсли;
		
		Если ТекОценка.N_13 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 13;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_13;
		КонецЕсли;
		
		Если ТекОценка.N_14 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 14;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_14;
		КонецЕсли;
		
		Если ТекОценка.N_15 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 15;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_15;
		КонецЕсли;
		
		Если ТекОценка.N_16 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 16;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_16;
		КонецЕсли;
		
		Если ТекОценка.N_17 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 17;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_17;
		КонецЕсли;
		
		Если ТекОценка.N_18 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 18;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_18;
		КонецЕсли;
		
		Если ТекОценка.N_19 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 19;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_19;
		КонецЕсли;
		
		Если ТекОценка.N_20 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 20;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_20;
		КонецЕсли;
		
		Если ТекОценка.N_30 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 30;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_30;
		КонецЕсли;
		
		Если ТекОценка.N_60 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 60;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_60;
		КонецЕсли;
		
		Если ТекОценка.N_600 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 600;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_600;
		КонецЕсли;
		
		Если ТекОценка.N_MORE_600 <> 0 Тогда
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = 86400;
			НоваяСтрока.КоличествоОпераций = ТекОценка.N_MORE_600;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
    |ВЫБРАТЬ
	|   ТаблицаЗамерыВремениЦентраМониторинга.Период КАК Период,
	|	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперация КАК КлючеваяОперация,
	|	ТаблицаЗамерыВремениЦентраМониторинга.ВремяВыполнения КАК ВремяВыполнения,
	|	ТаблицаЗамерыВремениЦентраМониторинга.КоличествоОпераций КАК КоличествоОпераций
	|ПОМЕСТИТЬ
	|	ТаблицаЗамерыВремениЦентраМониторингаБуфер
	|ИЗ
	|	&ТаблицаЗамерыВремениЦентраМониторинга КАК ТаблицаЗамерыВремениЦентраМониторинга
    |ИНДЕКСИРОВАТЬ ПО
    |   Период,
    |   КлючеваяОперация,
    |   ВремяВыполнения
	|;
	|ВЫБРАТЬ
	|   ТаблицаЗамерыВремениЦентраМониторинга.Период КАК ПериодПакет,
	|	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперация КАК КлючеваяОперацияПакет,
	|	ТаблицаЗамерыВремениЦентраМониторинга.ВремяВыполнения КАК ВремяВыполненияПакет,
	|	СУММА(ТаблицаЗамерыВремениЦентраМониторинга.КоличествоОпераций) КАК КоличествоОперацийПакет
	|ПОМЕСТИТЬ
	|	ТаблицаЗамерыВремениЦентраМониторинга
	|ИЗ
	|	ТаблицаЗамерыВремениЦентраМониторингаБуфер КАК ТаблицаЗамерыВремениЦентраМониторинга 
    |СГРУППИРОВАТЬ ПО
    |   ТаблицаЗамерыВремениЦентраМониторинга.Период,
	|	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперация,
	|	ТаблицаЗамерыВремениЦентраМониторинга.ВремяВыполнения
    |ИНДЕКСИРОВАТЬ ПО
    |   ПериодПакет,
    |   КлючеваяОперацияПакет
	|;
	|ВЫБРАТЬ
	|	ТаблицаЗамерыВремениЦентраМониторинга.ПериодПакет КАК ПериодПакет,
	|	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперацияПакет КАК КлючеваяОперацияПакет,
	|	СпрКлючевыеОперации.Ссылка КАК КлючеваяОперацияСсылка,
	|	ТаблицаЗамерыВремениЦентраМониторинга.ВремяВыполненияПакет КАК ВремяВыполненияПакет,
	|	ТаблицаЗамерыВремениЦентраМониторинга.КоличествоОперацийПакет КАК КоличествоОперацийПакет
	|ИЗ
	|	ТаблицаЗамерыВремениЦентраМониторинга
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.КлючевыеОперацииЦентрМониторинга КАК СпрКлючевыеОперации
	|ПО
	|	СпрКлючевыеОперации.Наименование = ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперацияПакет
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗамерыВремениЦентраМониторинга.ПериодПакет
	|";
	
	Запрос.УстановитьПараметр("ТаблицаЗамерыВремениЦентраМониторинга", ТаблицаЗамерыВремениЦентраМониторинга);
	
	ТаблицаЗамерыВремениЦентраМониторинга = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекОценка Из ТаблицаЗамерыВремениЦентраМониторинга Цикл
		Если НЕ ЗначениеЗаполнено(ТекОценка.КлючеваяОперацияСсылка) Тогда
			ТекОценка.КлючеваяОперацияСсылка = Справочники.КлючевыеОперацииЦентрМониторинга.СоздатьЭлементПоНаименованию(ТекОценка.КлючеваяОперацияПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗамерыВремениЦентраМониторинга;
	
КонецФункции

Функция ПолучитьОбъектыЗамерыВремениЦентраМониторинга_1_0_2_0(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета)
	
	ТаблицаЗамерыВремениЦентраМониторинга = Новый ТаблицаЗначений;
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("КлючеваяОперация", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("ВремяВыполнения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("КоличествоОпераций", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	
	КолонкиТЧ = Новый Соответствие;
	Если ОценкаПроизводительностиПакет.Количество() Тогда
		Оценка = ОценкаПроизводительностиПакет[0];
		Для Каждого СтрЗапись Из Оценка Цикл
			Если НЕ СтрНачинаетсяС(СтрЗапись.Ключ, "N_") 
				ИЛИ СтрЗапись.Ключ = "N_T" 
				ИЛИ СтрЗапись.Ключ = "N_T_4T"
				ИЛИ СтрЗапись.Ключ = "N_4T" Тогда 
				Продолжить;
			КонецЕсли;
			Если СтрНачинаетсяС(СтрЗапись.Ключ, "N_MORE_") Тогда
				ЧисловаяЧастьИмениКолонки = СтрЗаменить(СтрЗапись.Ключ, "N_MORE_","");
			Иначе
				ЧисловаяЧастьИмениКолонки = СтрЗаменить(СтрЗапись.Ключ, "N_","");
			КонецЕсли;
			ЧисловаяЧастьИмениКолонки = СтрЗаменить(ЧисловаяЧастьИмениКолонки,"_",".");
			ВремяВыполнения = Число(ЧисловаяЧастьИмениКолонки);		
			КолонкиТЧ.Вставить(СтрЗапись.Ключ, ВремяВыполнения); 
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекОценка Из ОценкаПроизводительностиПакет Цикл
		Период = ДатаJSON_ISO(ТекОценка.Период, ДатаJSON_ISO_1С);
		КлючеваяОперация = ТекОценка.КлючеваяОперация;
		
		Для Каждого СтрЗапись Из КолонкиТЧ Цикл
			КоличествоОпераций = ТекОценка[СтрЗапись.Ключ];
			Если КоличествоОпераций = 0 Тогда
				Продолжить;
			КонецЕсли;
			ВремяВыполнения = СтрЗапись.Значение;		
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.ВремяВыполнения = ВремяВыполнения;
			НоваяСтрока.КоличествоОпераций = КоличествоОпераций;
		КонецЦикла;	
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
    |ВЫБРАТЬ
	|   ТаблицаЗамерыВремениЦентраМониторинга.Период КАК Период,
	|	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперация КАК КлючеваяОперация,
	|	ТаблицаЗамерыВремениЦентраМониторинга.ВремяВыполнения КАК ВремяВыполнения,
	|	ТаблицаЗамерыВремениЦентраМониторинга.КоличествоОпераций КАК КоличествоОпераций
	|ПОМЕСТИТЬ
	|	ТаблицаЗамерыВремениЦентраМониторингаБуфер
	|ИЗ
	|	&ТаблицаЗамерыВремениЦентраМониторинга КАК ТаблицаЗамерыВремениЦентраМониторинга
    |ИНДЕКСИРОВАТЬ ПО
    |   Период,
    |   КлючеваяОперация,
    |   ВремяВыполнения
	|;
	|ВЫБРАТЬ
	|   ТаблицаЗамерыВремениЦентраМониторинга.Период КАК ПериодПакет,
	|	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперация КАК КлючеваяОперацияПакет,
	|	ТаблицаЗамерыВремениЦентраМониторинга.ВремяВыполнения КАК ВремяВыполненияПакет,
	|	СУММА(ТаблицаЗамерыВремениЦентраМониторинга.КоличествоОпераций) КАК КоличествоОперацийПакет
	|ПОМЕСТИТЬ
	|	ТаблицаЗамерыВремениЦентраМониторинга
	|ИЗ
	|	ТаблицаЗамерыВремениЦентраМониторингаБуфер КАК ТаблицаЗамерыВремениЦентраМониторинга 
    |СГРУППИРОВАТЬ ПО
    |   ТаблицаЗамерыВремениЦентраМониторинга.Период,
	|	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперация,
	|	ТаблицаЗамерыВремениЦентраМониторинга.ВремяВыполнения
    |ИНДЕКСИРОВАТЬ ПО
    |   ПериодПакет,
    |   КлючеваяОперацияПакет
	|;
	|ВЫБРАТЬ
	|	ТаблицаЗамерыВремениЦентраМониторинга.ПериодПакет КАК ПериодПакет,
	|	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперацияПакет КАК КлючеваяОперацияПакет,
	|	СпрКлючевыеОперации.Ссылка КАК КлючеваяОперацияСсылка,
	|	ТаблицаЗамерыВремениЦентраМониторинга.ВремяВыполненияПакет КАК ВремяВыполненияПакет,
	|	ТаблицаЗамерыВремениЦентраМониторинга.КоличествоОперацийПакет КАК КоличествоОперацийПакет
	|ИЗ
	|	ТаблицаЗамерыВремениЦентраМониторинга
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.КлючевыеОперацииЦентрМониторинга КАК СпрКлючевыеОперации
	|ПО
	|	СпрКлючевыеОперации.Наименование = ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперацияПакет
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗамерыВремениЦентраМониторинга.ПериодПакет
	|";
	
	Запрос.УстановитьПараметр("ТаблицаЗамерыВремениЦентраМониторинга", ТаблицаЗамерыВремениЦентраМониторинга);
	
	ТаблицаЗамерыВремениЦентраМониторинга = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекОценка Из ТаблицаЗамерыВремениЦентраМониторинга Цикл
		Если НЕ ЗначениеЗаполнено(ТекОценка.КлючеваяОперацияСсылка) Тогда
			ТекОценка.КлючеваяОперацияСсылка = Справочники.КлючевыеОперацииЦентрМониторинга.СоздатьЭлементПоНаименованию(ТекОценка.КлючеваяОперацияПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗамерыВремениЦентраМониторинга;
	
КонецФункции

Функция ПолучитьОбъектыЗамерыВремениЦентраМониторинга_1_0_3_0(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета)
	
	ТаблицаЗамерыВремениЦентраМониторинга = ПолучитьОбъектыЗамерыВремениЦентраМониторинга_1_0_2_0(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета);
	
	Возврат ТаблицаЗамерыВремениЦентраМониторинга;
	
КонецФункции

Функция ПолучитьОбъектыЗамерыВремениЦентраМониторинга_1_0_4_0(ОценкаПроизводительностиПакет, ДатаJSON_ISO_1С, ВерсияПакета, СсылкиКлючевыхОпераций)
	
	ТаблицаЗамерыВремениЦентраМониторинга = Новый ТаблицаЗначений;
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("КлючеваяОперация", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("ВремяВыполнения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("КоличествоОпераций", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ТаблицаЗамерыВремениЦентраМониторинга.Колонки.Добавить("КлючеваяОперацияСсылка", Новый ОписаниеТипов("СправочникСсылка.КлючевыеОперацииЦентрМониторинга"));
	
	КолонкиТЧ = Новый Соответствие;
	Если ОценкаПроизводительностиПакет.Количество() Тогда
		Оценка = ОценкаПроизводительностиПакет[0];
		Для Каждого СтрЗапись Из Оценка Цикл
			Если НЕ СтрНачинаетсяС(СтрЗапись.Ключ, "N_") 
				ИЛИ СтрЗапись.Ключ = "N_T" 
				ИЛИ СтрЗапись.Ключ = "N_T_4T"
				ИЛИ СтрЗапись.Ключ = "N_4T" Тогда 
				Продолжить;
			КонецЕсли;
			Если СтрНачинаетсяС(СтрЗапись.Ключ, "N_MORE_") Тогда
				ЧисловаяЧастьИмениКолонки = СтрЗаменить(СтрЗапись.Ключ, "N_MORE_","");
			Иначе
				ЧисловаяЧастьИмениКолонки = СтрЗаменить(СтрЗапись.Ключ, "N_","");
			КонецЕсли;
			ЧисловаяЧастьИмениКолонки = СтрЗаменить(ЧисловаяЧастьИмениКолонки,"_",".");
			ВремяВыполнения = Число(ЧисловаяЧастьИмениКолонки);		
			КолонкиТЧ.Вставить(СтрЗапись.Ключ, ВремяВыполнения); 
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекОценка Из ОценкаПроизводительностиПакет Цикл
		Период = ДатаJSON_ISO(ТекОценка.Period, ДатаJSON_ISO_1С);
		КлючеваяОперация = ТекОценка.KOHash;
		КлючеваяОперацияСсылка = СсылкиКлючевыхОпераций[КлючеваяОперация];
		// Должно быть заполнено всегда, т.к. ранее создали все недостающие.
		Если Не ЗначениеЗаполнено(КлючеваяОперацияСсылка) Тогда
			ВызватьИсключение СтрШаблон("Не найдена ключевая операция для хеша %1", КлючеваяОперация);
		КонецЕсли;                                             		
		
		Для Каждого СтрЗапись Из КолонкиТЧ Цикл
			КоличествоОпераций = ТекОценка[СтрЗапись.Ключ];
			Если КоличествоОпераций = 0 Тогда
				Продолжить;
			КонецЕсли;
			ВремяВыполнения = СтрЗапись.Значение;		
			НоваяСтрока = ТаблицаЗамерыВремениЦентраМониторинга.Добавить();
			НоваяСтрока.Период = Период;
			НоваяСтрока.КлючеваяОперация = КлючеваяОперация;
			НоваяСтрока.КлючеваяОперацияСсылка = КлючеваяОперацияСсылка;
			НоваяСтрока.ВремяВыполнения = ВремяВыполнения;
			НоваяСтрока.КоличествоОпераций = КоличествоОпераций;
		КонецЦикла;	
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗамерыВремениЦентраМониторинга.Период КАК Период,
	               |	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперация КАК КлючеваяОперация,
	               |	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперацияСсылка КАК КлючеваяОперацияСсылка,
	               |	ТаблицаЗамерыВремениЦентраМониторинга.ВремяВыполнения КАК ВремяВыполнения,
	               |	ТаблицаЗамерыВремениЦентраМониторинга.КоличествоОпераций КАК КоличествоОпераций
	               |ПОМЕСТИТЬ ТаблицаЗамерыВремениЦентраМониторингаБуфер
	               |ИЗ
	               |	&ТаблицаЗамерыВремениЦентраМониторинга КАК ТаблицаЗамерыВремениЦентраМониторинга
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Период,
	               |	КлючеваяОперация,
	               |	ВремяВыполнения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаЗамерыВремениЦентраМониторинга.Период КАК ПериодПакет,
	               |	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперация КАК КлючеваяОперацияПакет,
	               |	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперацияСсылка КАК КлючеваяОперацияСсылка,
	               |	ТаблицаЗамерыВремениЦентраМониторинга.ВремяВыполнения КАК ВремяВыполненияПакет,
	               |	СУММА(ТаблицаЗамерыВремениЦентраМониторинга.КоличествоОпераций) КАК КоличествоОперацийПакет
	               |ИЗ
	               |	ТаблицаЗамерыВремениЦентраМониторингаБуфер КАК ТаблицаЗамерыВремениЦентраМониторинга
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаЗамерыВремениЦентраМониторинга.Период,
	               |	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперация,
	               |	ТаблицаЗамерыВремениЦентраМониторинга.КлючеваяОперацияСсылка,
	               |	ТаблицаЗамерыВремениЦентраМониторинга.ВремяВыполнения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПериодПакет";
	
	Запрос.УстановитьПараметр("ТаблицаЗамерыВремениЦентраМониторинга", ТаблицаЗамерыВремениЦентраМониторинга);
	
	ТаблицаЗамерыВремениЦентраМониторинга = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗамерыВремениЦентраМониторинга;
	
КонецФункции

Процедура ЗаписатьОценкуПроизводительности(ИнформационнаяБаза, ТаблицаОценкиПроизводительности, РегистраторПакета, ВерсияПакета)
	
	Если ВерсияПакета = "1.0.0.0" Тогда
		ЗаписатьОценкуПроизводительности_1_0_0_0(ИнформационнаяБаза, ТаблицаОценкиПроизводительности, РегистраторПакета, ВерсияПакета);
	ИначеЕсли ВерсияПакета = "1.0.1.0" Тогда
		ЗаписатьОценкуПроизводительности_1_0_1_0(ИнформационнаяБаза, ТаблицаОценкиПроизводительности, РегистраторПакета, ВерсияПакета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОценкуПроизводительности_1_0_0_0(ИнформационнаяБаза, ТаблицаОценкиПроизводительности, РегистраторПакета, ВерсияПакета)
	ТекущийПериод = Дата(1,1,1);
	
	НаборЗаписей = РегистрыСведений.ОценкаПроизводительности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекущийПериод);
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	НаборЗаписей.Отбор.ПакетЦентраМониторинга.Установить(РегистраторПакета.Регистратор);
	
		
	Для Каждого ТекОперация Из ТаблицаОценкиПроизводительности Цикл
		Если ТекОперация.ПериодПакет <> ТекущийПериод Тогда
			Если  НаборЗаписей.Количество() > 0 Тогда
				Если РегистраторПакета.ЭтоНовый Тогда
					НаборЗаписей.Записать(Ложь);
				Иначе
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			ТекущийПериод = ТекОперация.ПериодПакет;
			
			НаборЗаписей.Отбор.Период.Установить(ТекущийПериод);
			НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
			НаборЗаписей.Отбор.ПакетЦентраМониторинга.Установить(РегистраторПакета.Регистратор);
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ТекОперация.ПериодПакет;
		НоваяЗапись.КлючеваяОперация = ТекОперация.КлючеваяОперацияСсылка;
		НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
		НоваяЗапись.ПакетЦентраМониторинга = РегистраторПакета.Регистратор;
		НоваяЗапись.N_T = ТекОперация.N_TПакет;
		НоваяЗапись.N_T_4T = ТекОперация.N_T_4TПакет;
		НоваяЗапись.N_4T = ТекОперация.N_4TПакет;
		НоваяЗапись.ЦелевоеВремя = ТекОперация.ЦелевоеВремяПакет;
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Если РегистраторПакета.ЭтоНовый Тогда
			НаборЗаписей.Записать(Ложь);
		Иначе
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьОценкуПроизводительности_1_0_1_0(ИнформационнаяБаза, ТаблицаОценкиПроизводительности, РегистраторПакета, ВерсияПакета)
    
    ТекущийПериод = Дата(1,1,1);
    
    НаборЗаписей = РегистрыСведений.ОценкаПроизводительности.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Период.Установить(ТекущийПериод);
    НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
    НаборЗаписей.Отбор.ПакетЦентраМониторинга.Установить(РегистраторПакета.Регистратор);
    
    
    Для Каждого ТекОперация Из ТаблицаОценкиПроизводительности Цикл
        Если ТекОперация.ПериодПакет <> ТекущийПериод Тогда
            Если  НаборЗаписей.Количество() > 0 Тогда
                Если РегистрыСведений.ОценкаПроизводительности.ЕстьЗаписи(ТекущийПериод, ИнформационнаяБаза, РегистраторПакета.Регистратор) Тогда
                    НаборЗаписей.Записать(Истина);
                Иначе
                    НаборЗаписей.Записать(Ложь);
                КонецЕсли;
                
                НаборЗаписей.Очистить();
            КонецЕсли;
            
            ТекущийПериод = ТекОперация.ПериодПакет;
            
            НаборЗаписей.Отбор.Период.Установить(ТекущийПериод);
            НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
            НаборЗаписей.Отбор.ПакетЦентраМониторинга.Установить(РегистраторПакета.Регистратор);
        КонецЕсли;
        
        НоваяЗапись = НаборЗаписей.Добавить();
        НоваяЗапись.Период = ТекОперация.ПериодПакет;
        НоваяЗапись.КлючеваяОперация = ТекОперация.КлючеваяОперацияСсылка;
        НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
        НоваяЗапись.ПакетЦентраМониторинга = РегистраторПакета.Регистратор;
        НоваяЗапись.N_T = ТекОперация.N_TПакет;
        НоваяЗапись.N_T_4T = ТекОперация.N_T_4TПакет;
        НоваяЗапись.N_4T = ТекОперация.N_4TПакет;
        
        НоваяЗапись.ВремяВыполненияМаксимум = ТекОперация.ВремяВыполненияМаксимумПакет;
        НоваяЗапись.ВремяВыполненияМедиана = ТекОперация.ВремяВыполненияМедианаПакет;
        НоваяЗапись.ВремяВыполненияМинимум = ТекОперация.ВремяВыполненияМинимумПакет;
        НоваяЗапись.ВремяВыполненияСреднее = ТекОперация.ВремяВыполненияСреднееПакет;
        НоваяЗапись.ВремяВыполненияСтандартноеОтклонение = ТекОперация.ВремяВыполненияСтандартноеОтклонениеПакет;
        НоваяЗапись.КоличествоОпераций = ТекОперация.КоличествоОперацийПакет;
        НоваяЗапись.ВремяВыполненияМаксимум90 = ТекОперация.ВремяВыполненияМаксимум90Пакет;
        НоваяЗапись.ВремяВыполненияМедиана90 = ТекОперация.ВремяВыполненияМедиана90Пакет;
        НоваяЗапись.ВремяВыполненияМинимум90 = ТекОперация.ВремяВыполненияМинимум90Пакет;
        НоваяЗапись.ВремяВыполненияСреднее90 = ТекОперация.ВремяВыполненияСреднее90Пакет;
        НоваяЗапись.ВремяВыполненияСтандартноеОтклонение90 = ТекОперация.ВремяВыполненияСтандартноеОтклонение90Пакет;
        НоваяЗапись.КоличествоОпераций90 = ТекОперация.КоличествоОпераций90Пакет;
        
        
        НоваяЗапись.ЦелевоеВремя = ТекОперация.ЦелевоеВремяПакет;
    КонецЦикла;
    
    Если  НаборЗаписей.Количество() > 0 Тогда
        Если РегистрыСведений.ОценкаПроизводительности.ЕстьЗаписи(ТекущийПериод, ИнформационнаяБаза, РегистраторПакета.Регистратор) Тогда
            НаборЗаписей.Записать(Истина);
        Иначе
            НаборЗаписей.Записать(Ложь);
        КонецЕсли;
        
        НаборЗаписей.Очистить();
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗаписатьЗамерыВремениЦентраМониторинга(ИнформационнаяБаза, ТаблицаЗамерыВремениЦентраМониторинга, РегистраторПакета, ВерсияПакета)
    
    ТекущийПериод = Дата(1,1,1);
    
    НаборЗаписей = РегистрыСведений.ЗамерыВремениЦентрМониторинга.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Период.Установить(ТекущийПериод);
    НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
    НаборЗаписей.Отбор.ПакетЦентраМониторинга.Установить(РегистраторПакета.Регистратор);
    
    Для Каждого ТекОперация Из ТаблицаЗамерыВремениЦентраМониторинга Цикл
        Если ТекОперация.ПериодПакет <> ТекущийПериод Тогда
            Если  НаборЗаписей.Количество() > 0 Тогда
                Если РегистрыСведений.ЗамерыВремениЦентрМониторинга.ЕстьЗаписи(ТекущийПериод, ИнформационнаяБаза, РегистраторПакета.Регистратор) Тогда
                    НаборЗаписей.Записать(Истина);
                Иначе
                    НаборЗаписей.Записать(Ложь);
                КонецЕсли;
                НаборЗаписей.Очистить();
            КонецЕсли;
            
            ТекущийПериод = ТекОперация.ПериодПакет;
            
            НаборЗаписей.Отбор.Период.Установить(ТекущийПериод);
            НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
            НаборЗаписей.Отбор.ПакетЦентраМониторинга.Установить(РегистраторПакета.Регистратор);
        КонецЕсли;
        
        НоваяЗапись = НаборЗаписей.Добавить();
        НоваяЗапись.Период = ТекОперация.ПериодПакет;
        НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
        НоваяЗапись.КлючеваяОперация = ТекОперация.КлючеваяОперацияСсылка;
        НоваяЗапись.ПакетЦентраМониторинга = РегистраторПакета.Регистратор;
        НоваяЗапись.ВремяВыполнения = ТекОперация.ВремяВыполненияПакет;
        НоваяЗапись.КоличествоОпераций = ТекОперация.КоличествоОперацийПакет;
    КонецЦикла;
    
    Если  НаборЗаписей.Количество() > 0 Тогда
        Если РегистрыСведений.ЗамерыВремениЦентрМониторинга.ЕстьЗаписи(ТекущийПериод, ИнформационнаяБаза, РегистраторПакета.Регистратор) Тогда
            НаборЗаписей.Записать(Истина);
        Иначе
            НаборЗаписей.Записать(Ложь);
        КонецЕсли;
        НаборЗаписей.Очистить();
    КонецЕсли;
    
КонецПроцедуры

Функция СсылкиКлючевыхОпераций(КлючевыеОперации)
	ТаблицаКлючевыхОпераций = Новый ТаблицаЗначений;
	ТаблицаКлючевыхОпераций.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
	ТаблицаКлючевыхОпераций.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1000)));
	ТаблицаКлючевыхОпераций.Колонки.Добавить("ИмяХеш", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(40)));
	
	Для Каждого Запись ИЗ КлючевыеОперации Цикл
		НовСтр = ТаблицаКлючевыхОпераций.Добавить();
		НовСтр.ИмяХеш		 = Запись.Ключ; 
		НовСтр.Наименование	 = Запись.Значение["KOD"];
		НовСтр.Имя			 = Запись.Значение["KON"];
	КонецЦикла;
	
	СсылкиКлючевыхОпераций = Новый Соответствие;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КлючевыеОперации.Наименование КАК Наименование,
	                      |	КлючевыеОперации.ИмяХеш КАК ИмяХеш,
	                      |	КлючевыеОперации.Имя КАК Имя
	                      |ПОМЕСТИТЬ КлючевыеОперации
	                      |ИЗ
	                      |	&КлючевыеОперации КАК КлючевыеОперации
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ИмяХеш,
	                      |	Наименование
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	КлючевыеОперации.Наименование КАК Наименование,
	                      |	КлючевыеОперации.ИмяХеш КАК ИмяХеш,
	                      |	КлючевыеОперации.Имя КАК Имя,
	                      |	1 КАК Приоритет,
	                      |	КлючевыеОперацииЦентрМониторинга.Ссылка КАК Ссылка,
	                      |	КлючевыеОперацииЦентрМониторинга.ИмяХеш КАК СсылкаИмяХеш
	                      |ПОМЕСТИТЬ СсылкиКлючевыхОпераций
	                      |ИЗ
	                      |	КлючевыеОперации КАК КлючевыеОперации
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючевыеОперацииЦентрМониторинга КАК КлючевыеОперацииЦентрМониторинга
	                      |		ПО КлючевыеОперации.ИмяХеш = КлючевыеОперацииЦентрМониторинга.ИмяХеш
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	КлючевыеОперации.Наименование,
	                      |	КлючевыеОперации.ИмяХеш,
	                      |	КлючевыеОперации.Имя,
	                      |	2,
	                      |	КлючевыеОперацииЦентрМониторинга.Ссылка,
	                      |	КлючевыеОперацииЦентрМониторинга.ИмяХеш
	                      |ИЗ
	                      |	КлючевыеОперации КАК КлючевыеОперации
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючевыеОперацииЦентрМониторинга КАК КлючевыеОперацииЦентрМониторинга
	                      |		ПО КлючевыеОперации.Наименование = КлючевыеОперацииЦентрМониторинга.Наименование
						  |		И КлючевыеОперацииЦентрМониторинга.ИмяХеш = """"
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	КлючевыеОперации.Наименование,
	                      |	КлючевыеОперации.ИмяХеш,
	                      |	КлючевыеОперации.Имя,
	                      |	3,
	                      |	ЗНАЧЕНИЕ(Справочник.КлючевыеОперацииЦентрМониторинга.ПустаяСсылка),
	                      |	""""
	                      |ИЗ
	                      |	КлючевыеОперации КАК КлючевыеОперации
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ИмяХеш,
	                      |	Приоритет
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СсылкиКлючевыхОпераций.ИмяХеш КАК ИмяХеш,
	                      |	МИНИМУМ(СсылкиКлючевыхОпераций.Приоритет) КАК Приоритет
	                      |ПОМЕСТИТЬ МинимальныйПериоритетХеша
	                      |ИЗ
	                      |	СсылкиКлючевыхОпераций КАК СсылкиКлючевыхОпераций
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СсылкиКлючевыхОпераций.ИмяХеш
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ИмяХеш,
	                      |	Приоритет
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СсылкиКлючевыхОпераций.Наименование КАК Наименование,
	                      |	СсылкиКлючевыхОпераций.ИмяХеш КАК ИмяХеш,
	                      |	СсылкиКлючевыхОпераций.Имя КАК Имя,
	                      |	СсылкиКлючевыхОпераций.Приоритет КАК Приоритет,
	                      |	СсылкиКлючевыхОпераций.Ссылка КАК Ссылка,
	                      |	СсылкиКлючевыхОпераций.СсылкаИмяХеш КАК СсылкаИмяХеш
	                      |ИЗ
	                      |	МинимальныйПериоритетХеша КАК МинимальныйПериоритетХеша
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СсылкиКлючевыхОпераций КАК СсылкиКлючевыхОпераций
	                      |		ПО МинимальныйПериоритетХеша.ИмяХеш = СсылкиКлючевыхОпераций.ИмяХеш
	                      |			И МинимальныйПериоритетХеша.Приоритет = СсылкиКлючевыхОпераций.Приоритет");
	Запрос.УстановитьПараметр("КлючевыеОперации", ТаблицаКлючевыхОпераций);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			СсылкиКлючевыхОпераций.Вставить(Выборка.ИмяХеш, Выборка.Ссылка);
			Если ПустаяСтрока(Выборка.СсылкаИмяХеш) Тогда
				Справочники.КлючевыеОперацииЦентрМониторинга.УстановитьИмяХеш(Выборка.Ссылка, Выборка.Имя, Выборка.ИмяХеш);  
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Ссылка = Справочники.КлючевыеОперацииЦентрМониторинга.СоздатьЭлементПоХешу(Выборка.ИмяХеш, Выборка.Наименование, Выборка.Имя);
		СсылкиКлючевыхОпераций.Вставить(Выборка.ИмяХеш, Ссылка);
	КонецЦикла;
	
	Возврат СсылкиКлючевыхОпераций;
		
КонецФункции

#КонецОбласти

#Область РасширенияКонфигурации

Процедура ЗаписатьСекциюРасширенияКонфигурации(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета)
	Если Пакет["extensionsInfo"] <> Неопределено Тогда
		Расширения = Пакет["extensionsInfo"];
		РасширенияПакет = Новый Соответствие;
		РасширенияПакет.Вставить("ДатаПакета", ДатаПакета);
		РасширенияПакет.Вставить("Данные", Новый Соответствие);
		РасширенияПакетДанные = РасширенияПакет["Данные"];
		Для Каждого КлючИЗначение Из Расширения Цикл
			РасширенияПакетДанные.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		Если РасширенияПакетДанные.Количество() Тогда
			ЗаписатьИнформациюОРасширениях(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, РасширенияПакет, РегистраторПакета);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьИнформациюОРасширениях(ИнформационнаяБаза, РасширенияПакет, РегистраторПакета)
	
	РасширенияПакетДанные = РасширенияПакет["Данные"];
		
	// Загрузка информации об использовании расширений в разрезе объектов метаданных
	МетаданныеРасширений = РасширенияПакетДанные["МетаданныеРасширений"];
	Если МетаданныеРасширений <> Неопределено Тогда
	
		// Считается, что в пакете всегда приходит актульный срез списка объектов, модифицированных расширениями.
		// Следовательно, если объект выбыл из списка модифицированных с течением времени,
		// то такой объект должен исчезнуть из регистра.
		// Для реализации такого подхода, лучше записывать данные целиком по ИБ.
		// Если необходимо записывать данные только в случае изменения, то необходимо считать хеш по списку объектов метаданных.
		// Потом по хешу искать актуальный хеш для ИБ, если не равен, то записывать. Пока пишем всё.
		НаборИспользованиеРасширений = РегистрыСведений.ИспользованиеРасширений.СоздатьНаборЗаписей();
		НаборИспользованиеРасширений.ОбменДанными.Загрузка = Истина;
		НаборИспользованиеРасширений.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
		Для Каждого КлючИЗначение Из МетаданныеРасширений Цикл
			ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
			ХешированиеДанных.Добавить(КлючИЗначение.Ключ);
			ХешИмениОбъектаМетаданных = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
			
			Запись = НаборИспользованиеРасширений.Добавить();                                    
			Запись.ИнформационнаяБаза = ИнформационнаяБаза;		
			Запись.ХешОбъектаМетаданных = ХешИмениОбъектаМетаданных;
			Запись.ОбъектМетаданных = КлючИЗначение.Ключ;
			Если КлючИЗначение.Значение = Истина Тогда
				Запись.ИзмененоРасширением = КлючИЗначение.Значение;	
			Иначе			
				Запись.ПривнесеноРасширением = КлючИЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		НаборИспользованиеРасширений.Записать();
	КонецЕсли;
	
	// Загрузка информации о расширениях
	ОписанияРасширений = РасширенияПакетДанные["ОписанияРасширений"];
	Если ОписанияРасширений <> Неопределено Тогда
		// Считается, что в пакете всегда приходит актульный срез расширений конфигурации.
		// Следовательно, если расширение выбыло из списка течением времени,
		// то такое расширение должно исчезнуть из регистра.
		// Для реализации такого подхода, лучше записывать данные целиком по ИБ.
		// Если необходимо записывать данные только в случае изменения, то необходимо считать хеш по именам расширений в разрезе ИБ.
		// Потом по хешу искать актуальный хеш для ИБ, если не равен, то записывать. Пока пишем всё.
		НаборОписаниеРасширений = РегистрыСведений.ОписаниеРасширений.СоздатьНаборЗаписей();
		НаборОписаниеРасширений.ОбменДанными.Загрузка = Истина;
		НаборОписаниеРасширений.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
		Для Каждого Расширение Из ОписанияРасширений Цикл
			Запись = НаборОписаниеРасширений.Добавить();
			Запись.ИнформационнаяБаза = ИнформационнаяБаза;		
			Запись.ИмяРасширения = Расширение["Имя"];
			Запись.Версия = Расширение["Версия"];
			Запись.Назначение = Расширение["Назначение"];
			Запись.Синоним = Расширение["Синоним"];
			Запись.БезопасныйРежим = Расширение["БезопасныйРежим"];
			Запись.ЗащитаОтОпасныхДействий = Расширение["ЗащитаОтОпасныхДействий"];
		КонецЦикла;                                            	
		НаборОписаниеРасширений.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РолиИПрофили

Процедура ЗаписатьСекциюОбИспользованииПрофилей(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета)
	Если Пакет["statisticOfRoles"] <> Неопределено Тогда
		СтатистикаРолей = Пакет["statisticOfRoles"];
		Если НЕ ТипЗнч(СтатистикаРолей) = Тип("Соответствие") Тогда
			Возврат;				
		КонецЕсли;
		
		РолиПрофилей = СтатистикаРолей["RolesOfProfiles"];
		СтатистикаПрофилей = СтатистикаРолей["Profiles"];
		Если РолиПрофилей <> Неопределено И СтатистикаПрофилей <> Неопределено Тогда
			
			РолиЦентрМониторингаПустая = Справочники.РолиЦентрМониторинга.ПустаяСсылка();
			Роли = Новый Соответствие;
			Профили = Новый Соответствие;
			РолиПрофилейДляЗаписи = Новый Массив;			
			СтатистикаПрофилейДляЗаписи = Новый Массив;
			
			columns = РолиПрофилей["columns"];
			columnsValueIndex = РолиПрофилей["columnsValueIndex"];
			МаксимальныйИндекс = columns.ВГраница();
			rows = РолиПрофилей["rows"];
			
			Для Каждого Строка Из rows Цикл
				РолиПрофилейСтруктура = Новый Структура;
				Для ТекИндекс = 0 По МаксимальныйИндекс Цикл
					Если columnsValueIndex[columns[ТекИндекс]] <> Неопределено Тогда
						Значение = columnsValueIndex[columns[ТекИндекс]][Формат(Строка[ТекИндекс],"ЧГ=0")];
					Иначе
						Значение = Строка[ТекИндекс];
					КонецЕсли;
					РолиПрофилейСтруктура.Вставить(columns[ТекИндекс], Значение);
				КонецЦикла; 				
				РолиПрофилейДляЗаписи.Добавить(РолиПрофилейСтруктура);
				
				Если Роли[РолиПрофилейСтруктура.РольИмя] = Неопределено Тогда
					Роли.Вставить(РолиПрофилейСтруктура.РольИмя, РолиЦентрМониторингаПустая);
				КонецЕсли;
							
			КонецЦикла;
			
			columns = СтатистикаПрофилей["columns"];
			columnsValueIndex = СтатистикаПрофилей["columnsValueIndex"];
			МаксимальныйИндекс = columns.ВГраница();
			rows = СтатистикаПрофилей["rows"];
			
			Для Каждого Строка Из rows Цикл
				СтатистикаПрофилейСтруктура = Новый Структура;
				Для ТекИндекс = 0 По МаксимальныйИндекс Цикл
					Если columnsValueIndex[columns[ТекИндекс]] <> Неопределено Тогда
						Значение = columnsValueIndex[columns[ТекИндекс]][Формат(Строка[ТекИндекс],"ЧГ=0")];
					Иначе
						Значение = Строка[ТекИндекс];
					КонецЕсли;
					СтатистикаПрофилейСтруктура.Вставить(columns[ТекИндекс], Значение);
				КонецЦикла; 				
				СтатистикаПрофилейДляЗаписи.Добавить(СтатистикаПрофилейСтруктура);
				
				// Данные профиля сложим в отдельное соответствие
				ПрофильСтруктура = Новый Структура("Наименование,ПоставляемыйПрофильИзменен,ИдентификаторПоставляемыхДанных"); 
				ЗаполнитьЗначенияСвойств(ПрофильСтруктура, СтатистикаПрофилейСтруктура);
				Если Профили[СтатистикаПрофилейСтруктура.ПрофильУИД] = Неопределено Тогда
					Профили.Вставить(СтатистикаПрофилейСтруктура.ПрофильУИД, ПрофильСтруктура);
				КонецЕсли;
						
			КонецЦикла;

			ДанныеДляЗаписи = Новый Структура;
			ДанныеДляЗаписи.Вставить("РолиПрофилей", РолиПрофилейДляЗаписи);
			ДанныеДляЗаписи.Вставить("СтатистикаПрофилей", СтатистикаПрофилейДляЗаписи);
			ДанныеДляЗаписи.Вставить("Профили", Профили);
			ДанныеДляЗаписи.Вставить("Роли", Роли);
			
			ЗаписатьИнформациюОбИспользованииПрофилей(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ИнформационнаяБаза[0].УникальныйИдентификаторПакет, ДанныеДляЗаписи, РегистраторПакета);
			
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаписатьИнформациюОбИспользованииПрофилей(ИнформационнаяБаза, УИДБазы, ДанныеДляЗаписи, РегистраторПакета)
	
	// Получение и создание ссылок на ПрофилиГруппДоступаЦентрМониторинга. 
	СсылкиНаПрофили = Новый Соответствие;
	Для Каждого Профиль Из ДанныеДляЗаписи.Профили Цикл
		СтруктураПрофиля = Профиль.Значение;
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		
		// Проверяем, был ли создан профиль в типовой конфигурации и был ли он изменен.
		Если СтруктураПрофиля.ИдентификаторПоставляемыхДанных <> "00000000-0000-0000-0000-000000000000"
			И СтруктураПрофиля.ПоставляемыйПрофильИзменен = Ложь Тогда
			ХешированиеДанных.Добавить(СтруктураПрофиля.ИдентификаторПоставляемыхДанных);
		Иначе
			ХешированиеДанных.Добавить(Профиль.Ключ + УИДБазы);
		КонецЕсли;
		ХэшПрофиля = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
		ПрофильСсылка = Справочники.ПрофилиГруппДоступаЦентрМониторинга.СоздатьЭлементПоНаименованию(СтруктураПрофиля.Наименование, ХэшПрофиля);
		СсылкиНаПрофили.Вставить(Профиль.Ключ, ПрофильСсылка);
	КонецЦикла;
	
	// Получение и создание ссылок на РолиЦентрМониторинга.
	СсылкиНаРоли = Новый Соответствие;
	Для Каждого Роль Из ДанныеДляЗаписи.Роли Цикл
		Если ПустаяСтрока(Роль.Ключ) Тогда
			РольСсылка = Справочники.РолиЦентрМониторинга.ПустаяСсылка();
		Иначе     			
			РольСсылка = Справочники.РолиЦентрМониторинга.СоздатьЭлементПоНаименованию(Роль.Ключ);
		КонецЕсли;
		СсылкиНаРоли.Вставить(Роль.Ключ, РольСсылка);		
	КонецЦикла;
	
	// Поскольку писать данные о ролях надо строго в разрезе профилей групп доступа,
	// то набор записей очищаем по профилю.
	// Соответственно, нужно создать таблицу с ссылками и группировать по профилю.
	ТаблицаРолиПрофилей = Новый ТаблицаЗначений;
	ТаблицаРолиПрофилей.Колонки.Добавить("ПрофильГруппДоступа", Новый ОписаниеТипов("СправочникСсылка.ПрофилиГруппДоступаЦентрМониторинга"));
	ТаблицаРолиПрофилей.Колонки.Добавить("Роль", Новый ОписаниеТипов("СправочникСсылка.РолиЦентрМониторинга"));
	Для Каждого РольПрофиля Из ДанныеДляЗаписи.РолиПрофилей Цикл
		СтрокаТаблицы = ТаблицаРолиПрофилей.Добавить();
		СтрокаТаблицы.ПрофильГруппДоступа = СсылкиНаПрофили[РольПрофиля.ПрофильУИД];
		СтрокаТаблицы.Роль = СсылкиНаРоли[РольПрофиля.РольИмя];
	КонецЦикла;
	ТаблицаРолиПрофилей.Индексы.Добавить("ПрофильГруппДоступа");
	
	// Метод всегда вызывается при импорте пакета, который выполняется в транзакции.
	// Блокировка необходима для исключения взаимоблокировки.
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РолиПрофилейЦентрМониторинга");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаРолиПрофилей;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПрофильГруппДоступа", "ПрофильГруппДоступа");
	Блокировка.Заблокировать();
	
	// Запись в РС РолиПрофилейЦентрМониторинга.
	Для Каждого Запись Из СсылкиНаПрофили Цикл
		
		МассивСтрок = ТаблицаРолиПрофилей.НайтиСтроки(Новый Структура("ПрофильГруппДоступа", Запись.Значение));
		Если НЕ МассивСтрок.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.РолиПрофилейЦентрМониторинга.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрофильГруппДоступа.Установить(Запись.Значение);
		Для Каждого Строка Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);		
		КонецЦикла;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	// Запись в РС ПрофилиГруппДоступаИнформационныхБаз.
	НаборЗаписей = РегистрыСведений.ПрофилиГруппДоступаИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	Для Каждого ЗаписьМассива Из ДанныеДляЗаписи.СтатистикаПрофилей Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.ИнформационнаяБаза = ИнформационнаяБаза;
		Запись.ПрофильГруппДоступа = СсылкиНаПрофили[ЗаписьМассива.ПрофильУИД];
		Запись.ДействительныхПользователей = ЗаписьМассива.Пользователи;
		Запись.ДействительныхГруппПользователей = ЗаписьМассива.ГруппПользователей;
		Запись.ДействительныхВнешнихПользователей = ЗаписьМассива.ВнешниеПользователи;
		Запись.ДействительныхВнешнихГруппПользователей = ЗаписьМассива.ГруппВнешнихПользователей;
		Запись.ВидовДоступаОбщее = ЗаписьМассива.ВсегоВидовДоступа;
		Запись.ВидовДоступаПредустановленных = ЗаписьМассива.ПредустановленныхВидовДоступа;
		Запись.ГруппДоступаОбщее = ЗаписьМассива.ГруппаДоступа;
		Запись.ГруппДоступаПерсональных = ЗаписьМассива.ПерсональнаяГруппа;
		Запись.Поставляемый = ЗаписьМассива.ИдентификаторПоставляемыхДанных <> "00000000-0000-0000-0000-000000000000";
		Запись.ПоставляемыйИзменен = ЗаписьМассива.ПоставляемыйПрофильИзменен;
		ЗаписьМассива.Свойство("АктивныхЗаНеделю", Запись.АктивныхЗаНеделю);
		ЗаписьМассива.Свойство("АктивныхЗаМесяц", Запись.АктивныхЗаМесяц);
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область РезультатОтправкиДампа

Процедура ЗаписатьСекциюОРезультатахОтправкиДампа(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета)
	
	Если Пакет["FullDumps"] <> Неопределено Тогда
		ПолныеДампы = Пакет["FullDumps"];
		Если НЕ ТипЗнч(ПолныеДампы) = Тип("Соответствие") Тогда
			Возврат;				
		КонецЕсли;
		ДанныеДляЗаписи = Новый Структура("ОтправлятьФайлыДампов, РезультатОтправки, СпрашиватьПередОтправкой");
		ДанныеДляЗаписи.РезультатОтправки = ПолныеДампы["РезультатОтправки"];
		Если ДанныеДляЗаписи.РезультатОтправки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДанныеДляЗаписи.ОтправлятьФайлыДампов = ПолныеДампы["ОтправлятьФайлыДампов"];
		Если ДанныеДляЗаписи.ОтправлятьФайлыДампов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СпрашиватьПередОтправкой = ПолныеДампы["СпрашиватьПередОтправкой"];
		ДанныеДляЗаписи.СпрашиватьПередОтправкой = ?(СпрашиватьПередОтправкой = Неопределено, Истина, СпрашиватьПередОтправкой);
		
		Если Не ЗначениеЗаполнено(ДанныеДляЗаписи.РезультатОтправки) И ДанныеДляЗаписи.ОтправлятьФайлыДампов <> 2 Тогда
			// Проверим, изменилось ли ОтправлятьФайлыДампов.
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	РезультатОтправкиДампаСрезПоследних.ОтправлятьФайлыДампов КАК ОтправлятьФайлыДампов
			                      |ИЗ
			                      |	РегистрСведений.РезультатОтправкиДампа.СрезПоследних КАК РезультатОтправкиДампаСрезПоследних
			                      |ГДЕ
			                      |	РезультатОтправкиДампаСрезПоследних.ИнформационнаяБаза = &ИнформационнаяБаза");
			Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза[0].ИнформационнаяБазаСсылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда                                                  				
				Если ДанныеДляЗаписи.ОтправлятьФайлыДампов <> Выборка.ОтправлятьФайлыДампов Тогда
					// Пишем, потому что поменялся ответ.
					ЗаписатьИнформациюОРезультатахОтправкиДампа(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ДатаПакета, ДанныеДляЗаписи);
				КонецЕсли;
			Иначе				
				// Пишем, потому что данных еще вообще нет, а пользователь отреагировал.
				ЗаписатьИнформациюОРезультатахОтправкиДампа(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ДатаПакета, ДанныеДляЗаписи);
			КонецЕсли;     			
		ИначеЕсли ЗначениеЗаполнено(ДанныеДляЗаписи.РезультатОтправки) Тогда
			// Всегда пишем, если есть результат отправки
			ЗаписатьИнформациюОРезультатахОтправкиДампа(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ДатаПакета, ДанныеДляЗаписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры                                                                                             

Процедура ЗаписатьИнформациюОРезультатахОтправкиДампа(ИнформационнаяБаза, ДатаПакета, ДанныеДляЗаписи)
	НаборЗаписей = РегистрыСведений.РезультатОтправкиДампа.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	НаборЗаписей.Отбор.Период.Установить(ДатаПакета);
	
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, ДанныеДляЗаписи);
	Запись.ИнформационнаяБаза = ИнформационнаяБаза;
	Запись.Период = ДатаПакета;
	
	НаборЗаписей.Записать();
		
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

Процедура ЗаписатьСекциюКонтактнойИнформации(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета)
	Если Пакет["contacts"] <> Неопределено Тогда
		Контакты = Пакет["contacts"];
		ИнформационнаяБазаСсылка = ИнформационнаяБаза[0].ИнформационнаяБазаСсылка;
		Запись = РегистрыСведений.КонтактыИнформационныхБаз.СоздатьМенеджерЗаписи();
		Запись.ИнформационнаяБаза = ИнформационнаяБазаСсылка;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			ЕстьИзменения = Ложь;
			Если Запись.КонтактнаяИнформация <> Контакты["КонтактнаяИнформация"] Тогда
				Запись.КонтактнаяИнформация = Контакты["КонтактнаяИнформация"];
			    ЕстьИзменения = Истина;
			КонецЕсли;
			Если Запись.Комментарий <> Контакты["КонтактнаяИнформацияКомментарий"] Тогда
				Запись.Комментарий = Контакты["КонтактнаяИнформацияКомментарий"];
			    ЕстьИзменения = Истина;
			КонецЕсли;
			Если Запись.Логин <> Контакты["ЛогинПортала"] Тогда
				Запись.Логин = Контакты["ЛогинПортала"];
			    ЕстьИзменения = Истина;
			КонецЕсли;
			Если ЕстьИзменения Тогда
				Запись.Записать();
			КонецЕсли;
		Иначе     
			Запись.ИнформационнаяБаза = ИнформационнаяБазаСсылка;
			Запись.КонтактнаяИнформация = Контакты["КонтактнаяИнформация"];
			Запись.Комментарий = Контакты["КонтактнаяИнформацияКомментарий"];
			Запись.Логин = Контакты["ЛогинПортала"];
			Запись.ОтветНаЗапрос = Контакты["ЗапросКонтактнойИнформации"];
			Запись.Записать(Ложь);
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Ошибки
Процедура ЗаписатьСекциюОшибки(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета, ДатаJSON_ISO_1С)
	Если Пакет["errors"] <> Неопределено Тогда
		ИнформационнаяБазаСсылка = ИнформационнаяБаза[0].ИнформационнаяБазаСсылка;
		ОшибкиПакет = Новый Массив;
	
		// Коллекция ключевых операций Клиента.
		КлючевыеОперации = Новый Соответствие;
			
		МаксимальныйИндекс = 0;
		errors = Пакет["errors"];
		columns = errors["columns"];
		columnsValueIndex = errors["columnsValueIndex"];
		СтекиОшибок = errors["STHash"];
		МаксимальныйИндекс = columns.ВГраница();
		rows = errors["rows"];
		
		Для Каждого Строка Из rows Цикл
			Ошибка = Новый Структура;
			Для ТекИндекс = 0 По МаксимальныйИндекс Цикл
				Если columnsValueIndex[columns[ТекИндекс]] <> Неопределено Тогда
					Значение = columnsValueIndex[columns[ТекИндекс]][Формат(Строка[ТекИндекс],"ЧГ=0")];
				Иначе
					Значение = Строка[ТекИндекс];
				КонецЕсли;
				Ошибка.Вставить(columns[ТекИндекс], Значение);
			КонецЦикла;
			
			ОшибкиПакет.Добавить(Ошибка);
		КонецЦикла;
		
		Если ОшибкиПакет.Количество() > 0 Тогда
			
			ДанныеДляЗаписи = Новый Структура;
			ДанныеДляЗаписи.Вставить("ОшибкиПакет", ОшибкиПакет);
			ДанныеДляЗаписи.Вставить("СтекиОшибок", СтекиОшибок);
			
			ТаблицаОшибокЦентрМониторинга = ТаблицаОшибокЦентрМониторинга(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ДанныеДляЗаписи, ДатаJSON_ISO_1С);
			ЗаписатьОшибки(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ТаблицаОшибокЦентрМониторинга, РегистраторПакета)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ТаблицаОшибокЦентрМониторинга(ИнформационнаяБаза, ДанныеДляЗаписи, ДатаJSON_ISO_1С)
	
	ТаблицаОшибокЦентрМониторинга = Новый ТаблицаЗначений;
	ТаблицаОшибокЦентрМониторинга.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаОшибокЦентрМониторинга.Колонки.Добавить("ТипОшибки", Новый ОписаниеТипов("СправочникСсылка.ТипыОшибокЦентрМониторинга"));
	ТаблицаОшибокЦентрМониторинга.Колонки.Добавить("КлассОшибки", Новый ОписаниеТипов("СправочникСсылка.КлассыОшибокЦентрМониторинга"));
	ТаблицаОшибокЦентрМониторинга.Колонки.Добавить("СтекОшибки", Новый ОписаниеТипов("СправочникСсылка.СтекиОшибокЦентрМониторинга"));
	ТаблицаОшибокЦентрМониторинга.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	СсылкиНаТипыОшибок = Новый Соответствие;
	СсылкиНаКлассыОшибок = Новый Соответствие;
	СсылкиНаСтеки = Новый Соответствие;
	
	Для Каждого Запись Из ДанныеДляЗаписи.СтекиОшибок Цикл
		ХешСтека = Запись.Ключ;
		ПолныйСтек = Запись.Значение["ST"];
		СсылкаНаСтек = Справочники.СтекиОшибокЦентрМониторинга.СоздатьЭлементПоХешу(ХешСтека, ПолныйСтек);
		СсылкиНаСтеки.Вставить(ХешСтека, СсылкаНаСтек);
	КонецЦикла;
	
	Для Каждого Строка Из ДанныеДляЗаписи.ОшибкиПакет Цикл
		
		КлассОшибки = СсылкиНаКлассыОшибок[Строка.ErrorClass];
		Если СсылкиНаКлассыОшибок[Строка.ErrorClass] = Неопределено Тогда
			КлассОшибки = Справочники.КлассыОшибокЦентрМониторинга.СоздатьЭлементПоНаименованию(Строка.ErrorClass);
			СсылкиНаКлассыОшибок.Вставить(Строка.ErrorClass, КлассОшибки);
		КонецЕсли;
		
		ТипОшибки = СсылкиНаТипыОшибок[Строка.ErrorType];
		Если СсылкиНаТипыОшибок[Строка.ErrorType] = Неопределено Тогда
			ТипОшибки = Справочники.ТипыОшибокЦентрМониторинга.СоздатьЭлементПоНаименованию(Строка.ErrorType);
			СсылкиНаТипыОшибок.Вставить(Строка.ErrorType, ТипОшибки);
		КонецЕсли;
		
		Период = ДатаJSON_ISO(Строка.Period, ДатаJSON_ISO_1С);
		НовСтр = ТаблицаОшибокЦентрМониторинга.Добавить();
		НовСтр.Период = Период;
		НовСтр.ТипОшибки = ТипОшибки;
		НовСтр.КлассОшибки = КлассОшибки;
		НовСтр.СтекОшибки = СсылкиНаСтеки[Строка.STHash];
		НовСтр.Количество = Строка.Count;
	КонецЦикла;   
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ошибки.Период КАК Период,
	                      |	Ошибки.ТипОшибки КАК ТипОшибки,
	                      |	Ошибки.КлассОшибки КАК КлассОшибки,
	                      |	Ошибки.СтекОшибки КАК СтекОшибки,
	                      |	Ошибки.Количество КАК Количество
	                      |ПОМЕСТИТЬ Ошибки
	                      |ИЗ
	                      |	&Ошибки КАК Ошибки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Ошибки.Период КАК Период,
	                      |	Ошибки.ТипОшибки КАК ТипОшибки,
	                      |	Ошибки.КлассОшибки КАК КлассОшибки,
	                      |	Ошибки.СтекОшибки КАК СтекОшибки,
	                      |	СУММА(Ошибки.Количество) КАК Количество
	                      |ИЗ
	                      |	Ошибки КАК Ошибки
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Ошибки.Период,
	                      |	Ошибки.ТипОшибки,
	                      |	Ошибки.КлассОшибки,
	                      |	Ошибки.СтекОшибки
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Период");
	Запрос.УстановитьПараметр("Ошибки", ТаблицаОшибокЦентрМониторинга);
	ТаблицаОшибокЦентрМониторинга = Запрос.Выполнить().Выгрузить();
		
	Возврат ТаблицаОшибокЦентрМониторинга;
		
КонецФункции

Процедура ЗаписатьОшибки(ИнформационнаяБаза, ТаблицаОшибокЦентрМониторинга, РегистраторПакета)
    
    ТекущийПериод = Дата(1,1,1);
    
    НаборЗаписей = РегистрыСведений.ОшибкиЦентрМониторинга.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Период.Установить(ТекущийПериод);
    НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
    НаборЗаписей.Отбор.ПакетЦентраМониторинга.Установить(РегистраторПакета.Регистратор);
    
    Для Каждого ТекОшибка Из ТаблицаОшибокЦентрМониторинга Цикл
        Если ТекОшибка.Период <> ТекущийПериод Тогда
            Если  НаборЗаписей.Количество() > 0 Тогда
                Если РегистрыСведений.ОшибкиЦентрМониторинга.ЕстьЗаписи(ТекущийПериод, ИнформационнаяБаза, РегистраторПакета.Регистратор) Тогда
                    НаборЗаписей.Записать(Истина);
                Иначе
                    НаборЗаписей.Записать(Ложь);
                КонецЕсли;
                НаборЗаписей.Очистить();
            КонецЕсли;
            
            ТекущийПериод = ТекОшибка.Период;
            
            НаборЗаписей.Отбор.Период.Установить(ТекущийПериод);
            НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
            НаборЗаписей.Отбор.ПакетЦентраМониторинга.Установить(РегистраторПакета.Регистратор);
        КонецЕсли;
        
        НоваяЗапись = НаборЗаписей.Добавить();
        НоваяЗапись.Период = ТекОшибка.Период;
        НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
        НоваяЗапись.ТипОшибки = ТекОшибка.ТипОшибки;
        НоваяЗапись.КлассОшибки = ТекОшибка.КлассОшибки;
		НоваяЗапись.СтекОшибки = ТекОшибка.СтекОшибки;
		НоваяЗапись.ПакетЦентраМониторинга = РегистраторПакета.Регистратор;
        НоваяЗапись.Количество = ТекОшибка.Количество;
    КонецЦикла;
    
    Если  НаборЗаписей.Количество() > 0 Тогда
        Если РегистрыСведений.ОшибкиЦентрМониторинга.ЕстьЗаписи(ТекущийПериод, ИнформационнаяБаза, РегистраторПакета.Регистратор) Тогда
            НаборЗаписей.Записать(Истина);
        Иначе
            НаборЗаписей.Записать(Ложь);
        КонецЕсли;
        НаборЗаписей.Очистить();
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ВнутренняяСтатистика

Процедура ЗаписатьСекциюВнутреннейСтатистики(Пакет, ДатаПакета, ИнформационнаяБаза, РегистраторПакета, ДатаJSON_ISO_1С)
	Если Пакет["platformStatistics"] <> Неопределено Тогда
		platformStatistics = Пакет["platformStatistics"];
		
		// Загружаем секцию операции статистики
		//
		OperationStatistics = platformStatistics["OperationStatistics"];
		columnsOperationStatistics = OperationStatistics["columns"];
		columnsValueIndex = OperationStatistics["columnsValueIndex"];
		МаксимальныйИндексOperationStatistics = columnsOperationStatistics.ВГраница();
		rowsOperationStatistics = OperationStatistics["rows"];
		
		ОперацииВнутреннейСтатистикиПакет = Новый Массив;
		Для Каждого ТекОперацияБизнесСтатистики Из rowsOperationStatistics Цикл
			ОперацияБизнесСтатистики = Новый Структура;
			Для ТекИндекс = 0 По МаксимальныйИндексOperationStatistics Цикл
				Если columnsValueIndex[columnsOperationStatistics[ТекИндекс]] <> Неопределено Тогда
					Значение = columnsValueIndex[columnsOperationStatistics[ТекИндекс]][Формат(ТекОперацияБизнесСтатистики[ТекИндекс],"ЧГ=0")];
				Иначе
					Значение = ТекОперацияБизнесСтатистики[ТекИндекс];
				КонецЕсли;
				ОперацияБизнесСтатистики.Вставить(columnsOperationStatistics[ТекИндекс], Значение);
			КонецЦикла;
			
			ОперацииВнутреннейСтатистикиПакет.Добавить(ОперацияБизнесСтатистики);
		КонецЦикла;
		
		ЗагрузитьОперацииВнутреннейСтатистики(ИнформационнаяБаза[0].ИнформационнаяБазаСсылка, ОперацииВнутреннейСтатистикиПакет, РегистраторПакета, ДатаJSON_ISO_1С);		
								
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузитьОперацииВнутреннейСтатистики(ИнформационнаяБаза, ОперацииВнутреннейСтатистикиПакет, РегистраторПакета, ДатаJSON_ISO_1С)
	ТаблицаВнутреннейСтатистики = ПолучитьОбъектыВнутреннейСтатистики(ИнформационнаяБаза, ОперацииВнутреннейСтатистикиПакет, ДатаJSON_ISO_1С);
	ЗаписатьОперацииВнутреннейСтатистики(ИнформационнаяБаза, ТаблицаВнутреннейСтатистики, РегистраторПакета);
КонецПроцедуры

Функция ПолучитьОбъектыВнутреннейСтатистики(ИнформационнаяБаза, ОперацииВнутреннейСтатистикиПакет, ДатаJSON_ISO_1С)
	ТаблицаВнутреннейСтатистики = Новый ТаблицаЗначений;
	ТаблицаВнутреннейСтатистики.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаВнутреннейСтатистики.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1000)));
	ТаблицаВнутреннейСтатистики.Колонки.Добавить("КоличествоЗначений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаВнутреннейСтатистики.Колонки.Добавить("СуммаЗначений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаВнутреннейСтатистики.Колонки.Добавить("ХешПолноеНаименование", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(32)));
	
	МинимальныйПериод = Константы.МинимальныйПериодХраненияДанныхВБуфереОперацийБизнесСтатистики.Получить();
	
	Для Каждого ТекОперация Из ОперацииВнутреннейСтатистикиПакет Цикл
		Период = ДатаJSON_ISO(ТекОперация.Период, ДатаJSON_ISO_1С);
		// Строки старше минимального периода игнорируются.
		Если Период < МинимальныйПериод Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаВнутреннейСтатистики.Добавить();
		НоваяСтрока.Период = Период;
		НоваяСтрока.НаименованиеПолное = ТекОперация.ОперацияСтатистики;
		НоваяСтрока.КоличествоЗначений = ТекОперация.КоличествоЗначений;
		НоваяСтрока.СуммаЗначений = ТекОперация.СуммаЗначений;
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(НоваяСтрока.НаименованиеПолное);
		НоваяСтрока.ХешПолноеНаименование = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|   ТаблицаВнутреннейСтатистики.Период КАК ПериодПакет,
	|	ТаблицаВнутреннейСтатистики.НаименованиеПолное КАК НаименованиеПолноеПакет,
	|	ТаблицаВнутреннейСтатистики.КоличествоЗначений КАК КоличествоЗначенийПакет,
	|	ТаблицаВнутреннейСтатистики.СуммаЗначений КАК СуммаЗначенийПакет,
	|	ТаблицаВнутреннейСтатистики.ХешПолноеНаименование КАК ХешПолноеНаименованиеПакет
	|ПОМЕСТИТЬ
	|	ТаблицаВнутреннейСтатистики
	|ИЗ
	|	&ТаблицаВнутреннейСтатистики КАК ТаблицаВнутреннейСтатистики
	|;
	|ВЫБРАТЬ
	|	ТаблицаВнутреннейСтатистики.ПериодПакет КАК ПериодПакет,
	|	ТаблицаВнутреннейСтатистики.НаименованиеПолноеПакет КАК НаименованиеПолноеПакет,
	|	ЕСТЬNULL(СпрОперацииБизнесСтатистики.Ссылка, Значение(Справочник.ОперацииБизнесСтатистики.ПустаяСсылка)) КАК ОперацияБизнесСтатистики,
	|	ТаблицаВнутреннейСтатистики.ХешПолноеНаименованиеПакет КАК ХешПолноеНаименованиеПакет,
	|	ТаблицаВнутреннейСтатистики.КоличествоЗначенийПакет КАК КоличествоЗначенийПакет,	
	|	ТаблицаВнутреннейСтатистики.СуммаЗначенийПакет КАК СуммаЗначенийПакет
	|ИЗ
	|	ТаблицаВнутреннейСтатистики
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ОперацииБизнесСтатистики КАК СпрОперацииБизнесСтатистики
	|ПО
	|	СпрОперацииБизнесСтатистики.ХешПолноеНаименование = ТаблицаВнутреннейСтатистики.ХешПолноеНаименованиеПакет
	|УПОРЯДОЧИТЬ ПО
	|	ПериодПакет,
	|   НаименованиеПолноеПакет
	|";
	
	Запрос.УстановитьПараметр("ТаблицаВнутреннейСтатистики", ТаблицаВнутреннейСтатистики);
	
	ТаблицаВнутреннейСтатистики = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекОперация Из ТаблицаВнутреннейСтатистики Цикл
		Если НЕ ЗначениеЗаполнено(ТекОперация.ОперацияБизнесСтатистики) Тогда
			ТекОперация.ОперацияБизнесСтатистики = Справочники.ОперацииБизнесСтатистики.СоздатьЭлементПоНаименованиюПолное(ТекОперация.НаименованиеПолноеПакет, ТекОперация.ХешПолноеНаименованиеПакет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВнутреннейСтатистики;
КонецФункции

Процедура ЗаписатьОперацииВнутреннейСтатистики(ИнформационнаяБаза, ТаблицаВнутреннейСтатистики, РегистраторПакета)
	ТекущийПериод = Дата(1,1,1);
    
    НаборЗаписей = РегистрыСведений.ОперацииБизнесСтатистикиБуфер.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Период.Установить(ТекущийПериод);
    НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
    НаборЗаписей.Отбор.ПакетЦентраМониторинга.Установить(РегистраторПакета.Регистратор);
    
    Для Каждого ТекОперация Из ТаблицаВнутреннейСтатистики Цикл
        Если ТекОперация.ПериодПакет <> ТекущийПериод Тогда
            Если  НаборЗаписей.Количество() > 0 Тогда
                Если РегистрыСведений.ОперацииБизнесСтатистикиБуфер.ЕстьЗаписи(ТекущийПериод, ИнформационнаяБаза, РегистраторПакета.Регистратор) Тогда
                    НаборЗаписей.Записать(Истина);
                Иначе
                    НаборЗаписей.Записать(Ложь);
                КонецЕсли;
                НаборЗаписей.Очистить();
            КонецЕсли;
            
            ТекущийПериод = ТекОперация.ПериодПакет;
            
            НаборЗаписей.Отбор.Период.Установить(ТекущийПериод);
            НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
            НаборЗаписей.Отбор.ПакетЦентраМониторинга.Установить(РегистраторПакета.Регистратор);
        КонецЕсли;
        
        НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ТекОперация.ПериодПакет;
		НоваяЗапись.ОперацияБизнесСтатистики = ТекОперация.ОперацияБизнесСтатистики;
		НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
		НоваяЗапись.ПакетЦентраМониторинга = РегистраторПакета.Регистратор;
		НоваяЗапись.КоличествоЗначений = ТекОперация.КоличествоЗначенийПакет;
		НоваяЗапись.СуммаЗначений = ТекОперация.СуммаЗначенийПакет;
    КонецЦикла;
    
    Если  НаборЗаписей.Количество() > 0 Тогда
        Если РегистрыСведений.ОперацииБизнесСтатистикиБуфер.ЕстьЗаписи(ТекущийПериод, ИнформационнаяБаза, РегистраторПакета.Регистратор) Тогда
            НаборЗаписей.Записать(Истина);
        Иначе
            НаборЗаписей.Записать(Ложь);
        КонецЕсли;
        НаборЗаписей.Очистить();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбщегоНазначения
Функция ДатаJSON_ISO(ПредставлениеДаты, ДатаJSON_ISO_1С)
	Дата1С = ДатаJSON_ISO_1С[ПредставлениеДаты];
	Если Дата1С = Неопределено Тогда
		СтрРазделенная = СтрЗаменить(ПредставлениеДаты, "T", Символы.ПС);
		Дата1С = XMLЗначение(Тип("Дата"), ПредставлениеДаты);
		ДатаJSON_ISO_1С.Вставить(ПредставлениеДаты, Дата1С);
	КонецЕсли;
	
	Возврат Дата1С;
КонецФункции

Процедура ЗаписатьЗамерПроизводительностиЗагрузкиПакета(ИмяКлючевойОперации, Длительность, УникальныйИдентификаторБазы, НомерПакета)
    
    ТекДата = ТекущаяУниверсальнаяДатаВМиллисекундах() - Длительность;
    
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификаторБазы);
    ДопПараметры.Вставить("НомерПакета", НомерПакета);
	Общий.ЗаписатьВнутреннийЗамерПроизводительности(ИмяКлючевойОперации, ТекДата, 1, Истина, ДопПараметры, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Агрегаты

Процедура ОбновлениеАгрегатов() Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
    // начало замера выполнения регзадания
    ДатаНачалаЗамераРегЗадания = ТекущаяУниверсальнаяДатаВМиллисекундах();
    
    Если
        РегистрыНакопления.ЗамерыВремениЦентрМониторингаАгрегация.ПолучитьРежимАгрегатов()
        И РегистрыНакопления.ЗамерыВремениЦентрМониторингаАгрегация.ПолучитьИспользованиеАгрегатов()
    Тогда
        РегистрыНакопления.ЗамерыВремениЦентрМониторингаАгрегация.ОбновитьАгрегаты(Истина);
    КонецЕсли;
    
    Общий.ЗаписатьВнутреннийЗамерПроизводительности("РегЗадание.ОбновлениеАгрегатов", ДатаНачалаЗамераРегЗадания, 1800, Ложь);
    
КонецПроцедуры

Процедура РассчитатьЗамерыВремениЦентрМониторингаАгрегация() Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
    // начало замера выполнения регзадания
    ДатаНачалаЗамераРегЗадания = ТекущаяУниверсальнаяДатаВМиллисекундах();
    
    ДатаНачалаРасчета = НачалоДня(Константы.ГраницаАктуальностиРасчетаЗамерыВремениЦентрМониторингаАгрегация.Получить() - Константы.ПериодПересчетаДанных.Получить() * 86400);
    
    ДатаОкончанияРасчета = НачалоДня(ТекущаяДата() - 86400);
    Если ДатаНачалаРасчета < Дата(2015,1,1) Тогда
        ДатаНачалаРасчета = Дата(2015,1,1);
    КонецЕсли;
    
    ДопИнфоРегЗадания = Формат(ДатаНачалаРасчета,"ДФ=dd.MM.yyyy") + ";" + Формат(ДатаОкончанияРасчета,"ДФ=dd.MM.yyyy");
    
    ФоновыеЗаданияПул = Новый Соответствие;
    РазмерПула = Константы.РазмерПулаРассчитатьЗамерыВремениЦентрМониторингаАгрегация.Получить();
    Если РазмерПула = 0 Тогда
        РазмерПула = 1;
    КонецЕсли;
        
    ЗапросПриоритетаОбработки = Новый Запрос;
    ЗапросПриоритетаОбработки.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерПула, "ЧН=0; ЧГ=0") + "
    |   Конфигурация
    |ИЗ
    |   Справочник.ПриоритетРасчетаАгрегатовКонфигурации
    |УПОРЯДОЧИТЬ ПО
    |   Приоритет
    |";
    
    РезультатПриоритетаОбработки = ЗапросПриоритетаОбработки.Выполнить();
            
    Пока ДатаНачалаРасчета <= ДатаОкончанияРасчета Цикл
        
        // начало замера выборки
        ДатаНачалаЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
        
        ТаблицаПриоритетаОбработки = РезультатПриоритетаОбработки.Выгрузить();
        
        Запрос = Новый Запрос;
        
        Запрос.Текст = "
        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	    |   Конфигурация
        |ИЗ
	    |   РегистрСведений.ИнформацияИсторияПодробно КАК История
        |ГДЕ
	    |   ПериодЗаписи = &ПериодЗаписи
        |";
        
        Запрос.УстановитьПараметр("ПериодЗаписи", ДатаНачалаРасчета);
        РезультатКонфигурации = Запрос.Выполнить();
        
        КонфигурацииОбработки = Новый Соответствие;
        
        ВыборкаКонфигурации = РезультатКонфигурации.Выбрать();
        Пока ВыборкаКонфигурации.Следующий() Цикл
            КонфигурацииОбработки.Вставить(ВыборкаКонфигурации.Конфигурация, Истина);
        КонецЦикла;
        
        Пока КонфигурацииОбработки.Количество() > 0 Цикл
            
            // Анализ пула фоновых заданий по обработке конфигураций.
            Если ФоновыеЗаданияПул.Количество() >= РазмерПула Тогда
                
                КонфигурацииОбработано = Новый Массив;
                
                Для Каждого ТекФЗ Из ФоновыеЗаданияПул Цикл
                    ИсполняющиеФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ТекФЗ.Значение);
                    Если ИсполняющиеФЗ.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
                        КонфигурацииОбработано.Добавить(ТекФЗ.Ключ);
                    ИначеЕсли ИсполняющиеФЗ.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
                        ВызватьИсключение ИсполняющиеФЗ.ИнформацияОбОшибке;
                    ИначеЕсли ИсполняющиеФЗ.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
                        ВызватьИсключение ИсполняющиеФЗ.ИнформацияОбОшибке;
                    КонецЕсли;
                КонецЦикла;
                
                Для Каждого ТекКонфигурацияОбработано Из КонфигурацииОбработано Цикл
                    ФоновыеЗаданияПул.Удалить(ТекКонфигурацияОбработано);
                    КонфигурацииОбработки.Удалить(ТекКонфигурацияОбработано);
                КонецЦикла;
                
                КипВнешнийКомпонент.Пауза(100);
                               
            КонецЕсли;
            
            КонфигурацииВОбработку = Новый Массив;
            
            // Сначала запускаем на обработку приоритетные конфигурации, которые дольше всего обрабатываются.
            Для Каждого ТекСтрока Из ТаблицаПриоритетаОбработки Цикл
                ПараметрыФЗ = Новый Массив;
                ПараметрыФЗ.Добавить(ТекСтрока.Конфигурация);
                ПараметрыФЗ.Добавить(ДатаНачалаРасчета);
                НаименованиеФЗ = "Расчет агрегата для " + ТекСтрока.Конфигурация + " на " + ДатаНачалаРасчета;
                ФЗ = ФоновыеЗадания.Выполнить("ЦентрМониторингаИмпортСлужебный.РассчитатьАгрегатыКонфигурации", ПараметрыФЗ,,НаименованиеФЗ);
                ФоновыеЗаданияПул.Вставить(ТекСтрока.Конфигурация, ФЗ.УникальныйИдентификатор);
                КонфигурацииВОбработку.Добавить(ТекСтрока.Конфигурация);
            КонецЦикла;
            ТаблицаПриоритетаОбработки.Очистить();
            
            // После запуска приоритетных, все остальные.
            Для Каждого ТекКонфигурация Из КонфигурацииОбработки Цикл
                Если ФоновыеЗаданияПул.Количество() >= РазмерПула Тогда
                    Прервать;
                Иначе
                    ПараметрыФЗ = Новый Массив;
                    ПараметрыФЗ.Добавить(ТекКонфигурация.Ключ);
                    ПараметрыФЗ.Добавить(ДатаНачалаРасчета);
                    НаименованиеФЗ = "Расчет агрегата для " + ТекКонфигурация.Ключ + " на " + ДатаНачалаРасчета;
                    ФЗ = ФоновыеЗадания.Выполнить("ЦентрМониторингаИмпортСлужебный.РассчитатьАгрегатыКонфигурации", ПараметрыФЗ,,НаименованиеФЗ);
                    ФоновыеЗаданияПул.Вставить(ТекКонфигурация.Ключ, ФЗ.УникальныйИдентификатор);
                    КонфигурацииВОбработку.Добавить(ТекКонфигурация.Ключ);
                КонецЕсли;
            КонецЦикла;
            
            Для Каждого ТекКонфигурация Из КонфигурацииВОбработку Цикл
                КонфигурацииОбработки.Удалить(ТекКонфигурация);
            КонецЦикла;
                                    
        КонецЦикла;
        
        // Анализ пула фоновых заданий по обработке конфигураций.
        // Ждем, когда все завершаться
        Пока ФоновыеЗаданияПул.Количество() > 0 Цикл
            
            КонфигурацииОбработано = Новый Массив;
            
            Для Каждого ТекФЗ Из ФоновыеЗаданияПул Цикл
                    ИсполняющиеФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ТекФЗ.Значение);
                    Если ИсполняющиеФЗ.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
                        КонфигурацииОбработано.Добавить(ТекФЗ.Ключ);
                    ИначеЕсли ИсполняющиеФЗ.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
                        ВызватьИсключение ИсполняющиеФЗ.ИнформацияОбОшибке;
                    ИначеЕсли ИсполняющиеФЗ.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
                        ВызватьИсключение ИсполняющиеФЗ.ИнформацияОбОшибке;
                    КонецЕсли;
                КонецЦикла;
            
            Для Каждого ТекКонфигурацияОбработано Из КонфигурацииОбработано Цикл
                ФоновыеЗаданияПул.Удалить(ТекКонфигурацияОбработано);
                КонфигурацииОбработки.Удалить(ТекКонфигурацияОбработано);
            КонецЦикла;
            
            КипВнешнийКомпонент.Пауза(100);
            
        КонецЦикла;
        
        Константы.ГраницаАктуальностиРасчетаЗамерыВремениЦентрМониторингаАгрегация.Установить(ДатаНачалаРасчета);
        
        // запись замера выборки
        ДопПараметры = Новый Соответствие;
        ДопПараметры.Вставить("Дополнительная информация", Формат(ДатаНачалаРасчета,"ДФ=dd.MM.yyyy"));
        Общий.ЗаписатьВнутреннийЗамерПроизводительности("РасчетЗамерыВремениЦентрМониторингаАгрегация", ДатаНачалаЗамера, 55, Ложь, ДопПараметры);
        
        ДатаНачалаРасчета = НачалоДня(ДатаНачалаРасчета + 86400);
        
    КонецЦикла;
    
    // запись замера выполнения регзадания
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("Дополнительная информация", ДопИнфоРегЗадания);
    Общий.ЗаписатьВнутреннийЗамерПроизводительности("РегЗадание.РасчетЗамерыВремениЦентрМониторингаАгрегация", ДатаНачалаЗамера, 1800, Ложь, ДопПараметры);
    
КонецПроцедуры

Процедура РассчитатьАгрегатыКонфигурации(Конфигурация, ДатаРасчета) Экспорт
    
    // начало замера записи
    ДатаНачалаЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   История.ВерсияКонфигурации,
    |   История.ВерсияПлатформы,
    |   Замеры.КлючеваяОперация,
    |   Замеры.ВремяВыполнения,
    |   История.РежимРаботыКонфигурации,
    |   СУММА(КоличествоОпераций) КАК КоличествоОпераций
    |ИЗ
    |   РегистрСведений.ИнформацияИсторияПодробно КАК История
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ЗамерыВремениЦентрМониторинга КАК Замеры
    |ПО
    |   Замеры.Период = История.ПериодЗаписи
    |   И Замеры.ИнформационнаяБаза = История.ИнформационнаяБаза
    |ГДЕ
    |   История.ПериодЗаписи = &ДатаРасчета
    |   И История.Конфигурация = &Конфигурация
    |СГРУППИРОВАТЬ ПО
    |   История.ВерсияКонфигурации,
    |   История.ВерсияПлатформы,
    |   Замеры.КлючеваяОперация,
    |   Замеры.ВремяВыполнения,
    |   История.РежимРаботыКонфигурации
    |";
    
    Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
    Запрос.УстановитьПараметр("ДатаРасчета", ДатаРасчета);
    
    Результат = Запрос.Выполнить();
    
    // запись замера выборки
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("Дополнительная информация", Формат(ДатаРасчета,"ДФ=dd.MM.yyyy") + ";" + Конфигурация);
    Общий.ЗаписатьВнутреннийЗамерПроизводительности("РасчетЗамерыВремениЦентрМониторингаАгрегацияПоКонфигурацииВыборка", ДатаНачалаЗамера, 5, Ложь, ДопПараметры);
    
    // начало замера записи
    ДатаНачалаЗамераЗапись = ТекущаяУниверсальнаяДатаВМиллисекундах();
    
    НаборЗаписей = РегистрыНакопления.ЗамерыВремениЦентрМониторингаАгрегация.СоздатьНаборЗаписей();
    ДокументАгрегатаСсылка = Документы.АгрегатЗамерыВремени.ПолучитьДокументАгрегата(ДатаРасчета, Конфигурация);
    НаборЗаписей.Отбор.Регистратор.Установить(ДокументАгрегатаСсылка);
    
    ЗапросПроверкаУдаления = Новый Запрос;
    ЗапросПроверкаУдаления.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |   Регистратор
    |ИЗ
    |   РегистрНакопления.ЗамерыВремениЦентрМониторингаАгрегация
    |ГДЕ
    |   Регистратор = &Регистратор
    |";
    
    ЗапросПроверкаУдаления.УстановитьПараметр("Регистратор", ДокументАгрегатаСсылка);
    РезультатПроверкаУдаления = Запрос.Выполнить();
    
    Если НЕ РезультатПроверкаУдаления.Пустой() Тогда
        НаборЗаписей.Записать(Истина);
    КонецЕсли;
        
    Выборка = Результат.Выбрать();
    ТекущееКоличествоЗаписей = 0;
    ВсегоЗаписано = 0;
    МаксимальноеКоличествоЗаписей = 2000;
    Пока Выборка.Следующий() Цикл
        НовЗапись = НаборЗаписей.Добавить();
        ТекущееКоличествоЗаписей = ТекущееКоличествоЗаписей + 1;
        
        НовЗапись.Период = ДатаРасчета;
        НовЗапись.Регистратор = ДокументАгрегатаСсылка; 
        НовЗапись.Конфигурация = Конфигурация;
        НовЗапись.ВерсияКонфигурации = Выборка.ВерсияКонфигурации;
        НовЗапись.ВерсияПлатформы = Выборка.ВерсияПлатформы;
        НовЗапись.КлючеваяОперация = Выборка.КлючеваяОперация;
        НовЗапись.ВремяВыполнения = Выборка.ВремяВыполнения;
        НовЗапись.КоличествоОпераций = Выборка.КоличествоОпераций;
        НовЗапись.РежимРаботыКонфигурации = Выборка.РежимРаботыКонфигурации;
        
        Если ТекущееКоличествоЗаписей >= МаксимальноеКоличествоЗаписей Тогда
            НаборЗаписей.Записать(Ложь);
            НаборЗаписей.Очистить();
            ВсегоЗаписано = ВсегоЗаписано + ТекущееКоличествоЗаписей;
            ТекущееКоличествоЗаписей = 0;
        КонецЕсли;
    КонецЦикла;
    
    НаборЗаписей.Записать(Ложь);
    НаборЗаписей.Очистить();
    ВсегоЗаписано = ВсегоЗаписано + ТекущееКоличествоЗаписей;
    ТекущееКоличествоЗаписей = 0;
    
    // запись замера выборки
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("Дополнительная информация", Формат(ДатаРасчета,"ДФ=dd.MM.yyyy") + ";" + Формат(ВсегоЗаписано, "ЧН=0") + ";" + Конфигурация);
    Общий.ЗаписатьВнутреннийЗамерПроизводительности("РасчетЗамерыВремениЦентрМониторингаАгрегацияПоКонфигурацииЗапись", ДатаНачалаЗамераЗапись, 5, Ложь, ДопПараметры);
    
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДанныхДляОтчетов

#Область ОтчетМониторПроизводительностиКонфигурации

Процедура СформироватьДанныеКонфигурацииПоВерсииПлатформы(Параметры) Экспорт
    
    РаспределениеВерсийКонфигурацийПоВерсииПлатформы = ПолучитьРаспределениеКонфигурацийПоПлатформе(Параметры);
    ПроизводительностьВерсийКонфигурацийНаПлатформе = ПолучитьПроизводительностьКонфигурацийПоПлатформе(Параметры);
    
    РезультатВыполнения = Новый Структура;
    РезультатВыполнения.Вставить("РаспределениеВерсийКонфигурацийПоВерсииПлатформы", РаспределениеВерсийКонфигурацийПоВерсииПлатформы);
    РезультатВыполнения.Вставить("ПроизводительностьВерсийКонфигурацийНаПлатформе", ПроизводительностьВерсийКонфигурацийНаПлатформе);
    РезультатВыполнения.Вставить("ВерсияПлатформы", Параметры.ВерсияПлатформы);
    
    ПоместитьВоВременноеХранилище(РезультатВыполнения, Параметры.АдресХранилищаВерсийКонфигурацийПоВерсииПлатформы);
    
КонецПроцедуры

Процедура СформироватьДанныеКонфигурацииПоВерсииКонфигурации(Параметры) Экспорт
    
    РаспределениеВерсийПлатформыПоВерсииКонфигурации = ПолучитьРаспределениеПлатформыПоКонфигурации(Параметры);
    ПроизводительностьВерсийПлатформыНаКонфигурации = ПолучитьПроизводительностьПлатформыПоКонфигурации(Параметры);
    
    РезультатВыполнения = Новый Структура;
    РезультатВыполнения.Вставить("РаспределениеВерсийПлатформыПоВерсииКонфигурации", РаспределениеВерсийПлатформыПоВерсииКонфигурации);
    РезультатВыполнения.Вставить("ПроизводительностьВерсийПлатформыНаКонфигурации", ПроизводительностьВерсийПлатформыНаКонфигурации);
    РезультатВыполнения.Вставить("ВерсияКонфигурации", Параметры.ВерсияКонфигурации);
    
    ПоместитьВоВременноеХранилище(РезультатВыполнения, Параметры.АдресХранилищаВерсийПлатформыПоВерсииКонфигурации);
    
КонецПроцедуры

Функция ПолучитьРаспределениеКонфигурацийПоПлатформе(Параметры)
    
    Если Параметры.РежимРаботыКонфигурации = "Не учитывать" Тогда
        РезультатВыполнения = ПолучитьРаспределениеКонфигурацийПоПлатформеНеУчитывать(Параметры);
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Не учитывать + Количество пользователей" Тогда
        РезультатВыполнения = ПолучитьРаспределениеКонфигурацийПоПлатформеНеУчитыватьПлюсКоличествоПользователей(Параметры);
    Иначе
        РезультатВыполнения = ПолучитьРаспределениеКонфигурацийПоПлатформеРежимРаботы(Параметры);
    КонецЕсли;
    
    Возврат РезультатВыполнения; 
    
КонецФункции

Функция ПолучитьРаспределениеКонфигурацийПоПлатформеНеУчитывать(Параметры)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
	|   Выборка.ВерсияКонфигурации,
	|   Выборка.КолвоИБ
    |ИЗ
	|   (ВЫБРАТЬ
	|   	ВерсияКонфигурации,
	|   	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИнформационнаяБаза) КАК КолвоИБ
	|   ИЗ
	|   	РегистрСведений.ИнформацияИсторияПодробно
	|   ГДЕ
	|   	ПериодЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
	|   	И Конфигурация = &Конфигурация
	|       И ВерсияКонфигурации <> &ПустаяВерсия
	|   СГРУППИРОВАТЬ ПО
	|   	ВерсияКонфигурации
	|   ) КАК Выборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|   Справочник.ВерсииКонфигурации КАК Версии
    |ПО
	|   Версии.Ссылка = Выборка.ВерсияКонфигурации
    |УПОРЯДОЧИТЬ ПО
	|   Версии.ВерсияЧисло
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    //Запрос.УстановитьПараметр("ВерсияПлатформы", Параметры.ВерсияПлатформы);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииКонфигурации.НайтиПоНаименованию("0.0.0.0", Истина));
    
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗамерВерсии = Новый Структура("ВерсияКонфигурации, КолвоИБ", Выборка.ВерсияКонфигурации, Выборка.КолвоИБ);
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПолучитьРаспределениеКонфигурацийПоПлатформеНеУчитыватьПлюсКоличествоПользователей(Параметры)
    
    ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Параметры.РаспределениеПользователей);
	ТаблицаРаспределенияПользователей = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
        
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
	|   Выборка.ВерсияКонфигурации,
    |   Выборка.СерияПользователей,
	|   Выборка.КолвоИБ
    |ИЗ
	|   (ВЫБРАТЬ
	|   	ВерсияКонфигурации,
    |       %ПоляПользователей,
	|   	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИнформационнаяБаза) КАК КолвоИБ
	|   ИЗ
	|   	РегистрСведений.ИнформацияИсторияПодробно
	|   ГДЕ
	|   	ПериодЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
	|   	И Конфигурация = &Конфигурация
	|       И ВерсияКонфигурации <> &ПустаяВерсия
    |       И %УсловияПользователей
	|   СГРУППИРОВАТЬ ПО
	|   	ВерсияКонфигурации,
    |       %ПоляПользователейГруппировка
	|   ) КАК Выборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|   Справочник.ВерсииКонфигурации КАК Версии
    |ПО
	|   Версии.Ссылка = Выборка.ВерсияКонфигурации
    |УПОРЯДОЧИТЬ ПО
	|   Версии.ВерсияЧисло
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    //Запрос.УстановитьПараметр("ВерсияПлатформы", Параметры.ВерсияПлатформы);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииКонфигурации.НайтиПоНаименованию("0.0.0.0", Истина));
    
    ПоляПользователей = "ВЫБОР";
    УсловияПользователей = "";
    Для Каждого ТекСтрока Из ТаблицаРаспределенияПользователей Цикл
        
        Если ВРЕГ(ТекСтрока.Условие) = "МЕЖДУ" Тогда
            ПользователейОт = Формат(ТекСтрока.ПользователейОт, "ЧН=0; ЧГ=0");
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейОт + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ИЛИ
            |";
        ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "БОЛЬШЕ" Тогда
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей > " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей > " + ПользователейДо + " ИЛИ
            |";
        ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "МЕНЬШЕ" Тогда
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей < " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей < " + ПользователейДо + " ИЛИ
            |";
        КонецЕсли;
        
    КонецЦикла;
    ПоляПользователей = ПоляПользователей + "
    |          КОНЕЦ
    |";
    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователейГруппировка", Лев(ПоляПользователей, СтрДлина(ПоляПользователей) - 1));
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", Лев(ПоляПользователей, СтрДлина(ПоляПользователей) - 1) + " КАК СерияПользователей");
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловияПользователей", "(" + Лев(УсловияПользователей, СтрДлина(УсловияПользователей) - 4) + ")");
    
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗамерВерсии = Новый Структура("ВерсияКонфигурации, СерияПользователей, КолвоИБ", Выборка.ВерсияКонфигурации, Выборка.СерияПользователей, Выборка.КолвоИБ);
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПолучитьРаспределениеКонфигурацийПоПлатформеРежимРаботы(Параметры)
    
    ЕстьСерияПользователей = Ложь;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
	|   Выборка.ВерсияКонфигурации,
    |   Выборка.РежимРаботыКонфигурации,
    |   {Выборка.СерияПользователей КАК СерияПользователей,}
	|   Выборка.КолвоИБ
    |ИЗ
	|   (ВЫБРАТЬ
	|   	ВерсияКонфигурации,
    |       РежимРаботыКонфигурации,
    |       %ПоляПользователей
	|   	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИнформационнаяБаза) КАК КолвоИБ
	|   ИЗ
	|   	РегистрСведений.ИнформацияИсторияПодробно
	|   ГДЕ
	|   	ПериодЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
	|   	И Конфигурация = &Конфигурация
	|       И ВерсияКонфигурации <> &ПустаяВерсия
    |       И РежимРаботыКонфигурации В (&РежимыРаботыКонфигурации)
    |       {И КоличествоПользователей}
	|   СГРУППИРОВАТЬ ПО
	|   	ВерсияКонфигурации,
    |       РежимРаботыКонфигурации
    |       %ПоляПользователейГруппировка
	|   ) КАК Выборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|   Справочник.ВерсииКонфигурации КАК Версии
    |ПО
	|   Версии.Ссылка = Выборка.ВерсияКонфигурации
    |УПОРЯДОЧИТЬ ПО
	|   Версии.ВерсияЧисло
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    //Запрос.УстановитьПараметр("ВерсияПлатформы", Параметры.ВерсияПлатформы);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииКонфигурации.НайтиПоНаименованию("0.0.0.0", Истина));
    
    РежимыРаботыКонфигурации = Новый Массив;
    Если Параметры.РежимРаботыКонфигурации = "Все" Тогда
        
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.F);
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.S);
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И КоличествоПользователей}", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователейГруппировка", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{Выборка.СерияПользователей КАК СерияПользователей,}", "");
        
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Файловый" Тогда
        
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.F);
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И КоличествоПользователей}", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователейГруппировка", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{Выборка.СерияПользователей КАК СерияПользователей,}", "");
        
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Клиент-Серверный" Тогда
        
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.S);
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И КоличествоПользователей}", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователейГруппировка", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{Выборка.СерияПользователей КАК СерияПользователей,}", "");
        
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Файловый + Количество пользователей" ИЛИ Параметры.РежимРаботыКонфигурации = "Клиент-Серверный + Количество пользователей" Тогда
        
        ЕстьСерияПользователей = Истина;
        
        Если Параметры.РежимРаботыКонфигурации = "Файловый + Количество пользователей" Тогда
            РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.F);
        Иначе
            РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.S);
        КонецЕсли;
               
        ЧтениеXML = Новый ЧтениеXML;
        ЧтениеXML.УстановитьСтроку(Параметры.РаспределениеПользователей);
        ТаблицаРаспределенияПользователей = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
        
        ПоляПользователей = "ВЫБОР";
        УсловияПользователей = "";
        Для Каждого ТекСтрока Из ТаблицаРаспределенияПользователей Цикл
            
            ПользователейОт = Формат(ТекСтрока.ПользователейОт, "ЧН=0; ЧГ=0");
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
                
            Если ВРЕГ(ТекСтрока.Условие) = "МЕЖДУ" Тогда
                
                ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейОт + "_" + ПользователейДо;
                ПоляПользователей = ПоляПользователей + "
                |               КОГДА КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
                
                УсловияПользователей = УсловияПользователей + " КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ИЛИ
                |";
                
            ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "БОЛЬШЕ" Тогда
                
                ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
                ПоляПользователей = ПоляПользователей + "
                |               КОГДА КоличествоПользователей > " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
                
                УсловияПользователей = УсловияПользователей + " КоличествоПользователей > " + ПользователейДо + " ИЛИ
                |";
                                                
            ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "МЕНЬШЕ" Тогда
                
                ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
                ПоляПользователей = ПоляПользователей + "
                |               КОГДА КоличествоПользователей < " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
                
                УсловияПользователей = УсловияПользователей + " КоличествоПользователей < " + ПользователейДо + " ИЛИ
                |";
                
            КонецЕсли;
            
        КонецЦикла;
        ПоляПользователей = ПоляПользователей + "
        |          КОНЕЦ
        |";
        
        УсловияПользователей = Лев(УсловияПользователей, СтрДлина(УсловияПользователей) - 4);
        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователейГруппировка", "," + Лев(ПоляПользователей, СтрДлина(ПоляПользователей) - 1));
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", Лев(ПоляПользователей, СтрДлина(ПоляПользователей) - 1) + " КАК СерияПользователей,");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И КоличествоПользователей}", "И (" + УсловияПользователей + ")");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{Выборка.СерияПользователей КАК СерияПользователей,}", "Выборка.СерияПользователей КАК СерияПользователей,");
        
    КонецЕсли;
    
    Запрос.УстановитьПараметр("РежимыРаботыКонфигурации", РежимыРаботыКонфигурации);
        
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        Если ЕстьСерияПользователей  Тогда
            ЗамерВерсии = Новый Структура("ВерсияКонфигурации, РежимРаботыКонфигурации, СерияПользователей, КолвоИБ", Выборка.ВерсияКонфигурации, Выборка.РежимРаботыКонфигурации, Выборка.СерияПользователей, Выборка.КолвоИБ);
        Иначе
            ЗамерВерсии = Новый Структура("ВерсияКонфигурации, РежимРаботыКонфигурации, КолвоИБ", Выборка.ВерсияКонфигурации, Выборка.РежимРаботыКонфигурации, Выборка.КолвоИБ);
        КонецЕсли;
        
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПолучитьРаспределениеПлатформыПоКонфигурации(Параметры)
    
    Если Параметры.РежимРаботыКонфигурации = "Не учитывать" Тогда
        РезультатВыполнения = ПолучитьРаспределениеПлатформыПоКонфигурацииНеУчитывать(Параметры);
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Не учитывать + Количество пользователей" Тогда
        РезультатВыполнения = ПолучитьРаспределениеПлатформыПоКонфигурацииНеУчитыватьПлюсПоПользователям(Параметры);
    Иначе
        РезультатВыполнения = ПолучитьРаспределениеПлатформыПоКонфигурацииРежимРаботы(Параметры);
    КонецЕсли;
    
    Возврат РезультатВыполнения;  
    
КонецФункции

Функция ПолучитьРаспределениеПлатформыПоКонфигурацииНеУчитывать(Параметры)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
	|   Выборка.ВерсияПлатформы,
	|   Выборка.КолвоИБ
    |ИЗ
	|   (ВЫБРАТЬ
	|   	ВерсияПлатформы,
	|   	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИнформационнаяБаза) КАК КолвоИБ
	|   ИЗ
	|   	РегистрСведений.ИнформацияИсторияПодробно
	|   ГДЕ
	|   	ПериодЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
	|   	И Конфигурация = &Конфигурация
	|       И ВерсияПлатформы <> &ПустаяВерсия
	|   СГРУППИРОВАТЬ ПО
	|   	ВерсияПлатформы
	|   ) КАК Выборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|   Справочник.ВерсииПлатформыЦентрМониторинга КАК Версии
    |ПО
	|   Версии.Ссылка = Выборка.ВерсияПлатформы
    |УПОРЯДОЧИТЬ ПО
	|   Версии.ВерсияЧисло
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    Запрос.УстановитьПараметр("ВерсияКонфигурации", Параметры.ВерсияКонфигурации);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииПлатформыЦентрМониторинга.НайтиПоНаименованию("0.0.0.0", Истина));
    
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗамерВерсии = Новый Структура("ВерсияПлатформы, КолвоИБ", Выборка.ВерсияПлатформы, Выборка.КолвоИБ);
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПолучитьРаспределениеПлатформыПоКонфигурацииНеУчитыватьПлюсПоПользователям(Параметры)
    
    ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Параметры.РаспределениеПользователей);
	ТаблицаРаспределенияПользователей = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
        
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
	|   Выборка.ВерсияПлатформы,
    |   Выборка.СерияПользователей,
	|   Выборка.КолвоИБ
    |ИЗ
	|   (ВЫБРАТЬ
	|   	ВерсияПлатформы,
    |       %ПоляПользователей,
	|   	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИнформационнаяБаза) КАК КолвоИБ
	|   ИЗ
	|   	РегистрСведений.ИнформацияИсторияПодробно
	|   ГДЕ
	|   	ПериодЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
	|   	И Конфигурация = &Конфигурация
	|       И ВерсияКонфигурации <> &ПустаяВерсия
    |       И %УсловияПользователей
	|   СГРУППИРОВАТЬ ПО
	|   	ВерсияПлатформы,
    |       %ПоляПользователейГруппировка
	|   ) КАК Выборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|   Справочник.ВерсииПлатформыЦентрМониторинга КАК Версии
    |ПО
	|   Версии.Ссылка = Выборка.ВерсияПлатформы
    |УПОРЯДОЧИТЬ ПО
	|   Версии.ВерсияЧисло
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    Запрос.УстановитьПараметр("ВерсияПлатформы", Параметры.ВерсияПлатформы);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииПлатформыЦентрМониторинга.НайтиПоНаименованию("0.0.0.0", Истина));
    
    ПоляПользователей = "ВЫБОР";
    УсловияПользователей = "";
    Для Каждого ТекСтрока Из ТаблицаРаспределенияПользователей Цикл
        
        Если ВРЕГ(ТекСтрока.Условие) = "МЕЖДУ" Тогда
            ПользователейОт = Формат(ТекСтрока.ПользователейОт, "ЧН=0; ЧГ=0");
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейОт + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ИЛИ
            |";
        ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "БОЛЬШЕ" Тогда
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей > " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей > " + ПользователейДо + " ИЛИ
            |";
        ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "МЕНЬШЕ" Тогда
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей < " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей < " + ПользователейДо + " ИЛИ
            |";
        КонецЕсли;
        
    КонецЦикла;
    ПоляПользователей = ПоляПользователей + "
    |          КОНЕЦ
    |";
    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователейГруппировка", Лев(ПоляПользователей, СтрДлина(ПоляПользователей) - 1));
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", Лев(ПоляПользователей, СтрДлина(ПоляПользователей) - 1) + " КАК СерияПользователей");
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловияПользователей", "(" + Лев(УсловияПользователей, СтрДлина(УсловияПользователей) - 4) + ")");
    
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗамерВерсии = Новый Структура("ВерсияПлатформы, СерияПользователей, КолвоИБ", Выборка.ВерсияПлатформы, Выборка.СерияПользователей, Выборка.КолвоИБ);
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
   
КонецФункции

Функция ПолучитьРаспределениеПлатформыПоКонфигурацииРежимРаботы(Параметры)
    
    ЕстьСерияПользователей = Ложь;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
	|   Выборка.ВерсияПлатформы,
    |   Выборка.РежимРаботыКонфигурации,
    |   {Выборка.СерияПользователей КАК СерияПользователей,}
	|   Выборка.КолвоИБ
    |ИЗ
	|   (ВЫБРАТЬ
	|   	ВерсияПлатформы,
    |       РежимРаботыКонфигурации,
    |       %ПоляПользователей
	|   	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИнформационнаяБаза) КАК КолвоИБ
	|   ИЗ
	|   	РегистрСведений.ИнформацияИсторияПодробно
	|   ГДЕ
	|   	ПериодЗаписи МЕЖДУ &ДатаНачала И &ДатаОкончания
	|   	И Конфигурация = &Конфигурация
	|       И ВерсияПлатформы <> &ПустаяВерсия
    |       И РежимРаботыКонфигурации В (&РежимыРаботыКонфигурации)
    |       {И КоличествоПользователей}
	|   СГРУППИРОВАТЬ ПО
	|   	ВерсияПлатформы,
    |       РежимРаботыКонфигурации
    |       %ПоляПользователейГруппировка
	|   ) КАК Выборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|   Справочник.ВерсииПлатформыЦентрМониторинга КАК Версии
    |ПО
	|   Версии.Ссылка = Выборка.ВерсияПлатформы
    |УПОРЯДОЧИТЬ ПО
	|   Версии.ВерсияЧисло
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииПлатформыЦентрМониторинга.НайтиПоНаименованию("0.0.0.0", Истина));
    
    РежимыРаботыКонфигурации = Новый Массив;
    Если Параметры.РежимРаботыКонфигурации = "Все" Тогда
        
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.F);
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.S);
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И КоличествоПользователей}", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователейГруппировка", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{Выборка.СерияПользователей КАК СерияПользователей,}", "");
        
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Файловый" Тогда
        
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.F);
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И КоличествоПользователей}", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователейГруппировка", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{Выборка.СерияПользователей КАК СерияПользователей,}", "");
        
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Клиент-Серверный" Тогда
        
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.S);
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И КоличествоПользователей}", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователейГруппировка", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{Выборка.СерияПользователей КАК СерияПользователей,}", "");
        
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Файловый + Количество пользователей" ИЛИ Параметры.РежимРаботыКонфигурации = "Клиент-Серверный + Количество пользователей" Тогда
        
        ЕстьСерияПользователей = Истина;
        
        Если Параметры.РежимРаботыКонфигурации = "Файловый + Количество пользователей" Тогда
            РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.F);
        Иначе
            РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.S);
        КонецЕсли;
                
        ЧтениеXML = Новый ЧтениеXML;
        ЧтениеXML.УстановитьСтроку(Параметры.РаспределениеПользователей);
        ТаблицаРаспределенияПользователей = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
        
        ПоляПользователей = "ВЫБОР";
        УсловияПользователей = "";
        Для Каждого ТекСтрока Из ТаблицаРаспределенияПользователей Цикл
            
            ПользователейОт = Формат(ТекСтрока.ПользователейОт, "ЧН=0; ЧГ=0");
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
                
            Если ВРЕГ(ТекСтрока.Условие) = "МЕЖДУ" Тогда
                
                ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейОт + "_" + ПользователейДо;
                ПоляПользователей = ПоляПользователей + "
                |               КОГДА КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
                
                УсловияПользователей = УсловияПользователей + " КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ИЛИ
                |";
                
            ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "БОЛЬШЕ" Тогда
                
                ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
                ПоляПользователей = ПоляПользователей + "
                |               КОГДА КоличествоПользователей > " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
                
                УсловияПользователей = УсловияПользователей + " КоличествоПользователей > " + ПользователейДо + " ИЛИ
                |";
                                                
            ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "МЕНЬШЕ" Тогда
                
                ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
                ПоляПользователей = ПоляПользователей + "
                |               КОГДА КоличествоПользователей < " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
                
                УсловияПользователей = УсловияПользователей + " КоличествоПользователей < " + ПользователейДо + " ИЛИ
                |";
                
            КонецЕсли;
            
        КонецЦикла;
        ПоляПользователей = ПоляПользователей + "
        |          КОНЕЦ
        |";
        
        УсловияПользователей = Лев(УсловияПользователей, СтрДлина(УсловияПользователей) - 4);
        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователейГруппировка", "," + Лев(ПоляПользователей, СтрДлина(ПоляПользователей) - 1));
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", Лев(ПоляПользователей, СтрДлина(ПоляПользователей) - 1) + " КАК СерияПользователей,");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И КоличествоПользователей}", "И (" + УсловияПользователей + ")");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{Выборка.СерияПользователей КАК СерияПользователей,}", "Выборка.СерияПользователей КАК СерияПользователей,");
        
    КонецЕсли;
    
    Запрос.УстановитьПараметр("РежимыРаботыКонфигурации", РежимыРаботыКонфигурации);
        
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        Если ЕстьСерияПользователей  Тогда
            ЗамерВерсии = Новый Структура("ВерсияПлатформы, РежимРаботыКонфигурации, СерияПользователей, КолвоИБ", Выборка.ВерсияПлатформы, Выборка.РежимРаботыКонфигурации, Выборка.СерияПользователей, Выборка.КолвоИБ);
        Иначе
            ЗамерВерсии = Новый Структура("ВерсияПлатформы, РежимРаботыКонфигурации, КолвоИБ", Выборка.ВерсияПлатформы, Выборка.РежимРаботыКонфигурации, Выборка.КолвоИБ);
        КонецЕсли;
        
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПолучитьПроизводительностьКонфигурацийПоПлатформе(Параметры)
    
    Если Параметры.РежимРаботыКонфигурации = "Не учитывать" Тогда
        РезультатВыполнения = ПолучитьПроизводительностьКонфигурацийПоПлатформеНеУчитывать(Параметры);
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Не учитывать + Количество пользователей" Тогда
        РезультатВыполнения = ПолучитьПроизводительностьКонфигурацийПоПлатформеНеУчитыватьПлюсКоличествоПользователей(Параметры);
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Файловый + Количество пользователей" ИЛИ Параметры.РежимРаботыКонфигурации = "Клиент-Серверный + Количество пользователей" Тогда
        РезультатВыполнения = ПолучитьПроизводительностьКонфигурацийПоПлатформеРежимРаботыПлюсКоличествоПользователей(Параметры);
    Иначе
        РезультатВыполнения = ПолучитьПроизводительностьКонфигурацийПоПлатформеРежимРаботы(Параметры);
    КонецЕсли;
    
    Возврат РезультатВыполнения;
        
КонецФункции

Функция ПолучитьПроизводительностьКонфигурацийПоПлатформеНеУчитывать(Параметры)
    
    Запрос = Новый Запрос;
    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    Справочники.ПрофилиКлючевыхОпераций.ДобавитьВременнуюТаблицуКлючевыхОпераций(Параметры.ПрофильКлючевыхОпераций, Запрос, "КлючевыеОперации");
	
	Запрос.Текст = Запрос.Текст + Общий.ТекстЗапросаПериодов(Дата(Параметры.Период.ДатаНачала),КонецДня(Дата(Параметры.Период.ДатаОкончания)), "День");
    Запрос.Текст = Запрос.Текст + "
	|;
    |ВЫБРАТЬ
    |   Выборка.ВерсияКонфигурации,
	|	Сумма(Выборка.ВсегоОпераций) КАК КоличествоЗамеров, 
    |   ВЫРАЗИТЬ((Сумма(Выборка.N_T) + Сумма(Выборка.N_T_4T)/2)/Сумма(Выборка.ВсегоОпераций) КАК ЧИСЛО(5,2)) КАК APDEX
    |ИЗ
    |   (ВЫБРАТЬ
    |       ИнформационныеБазы.ВерсияКонфигурации,
    |       Замеры.КлючеваяОперация,
    |       СУММА( ВЫБОР
    |               КОГДА Замеры.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) ТОГДА Замеры.КоличествоОпераций
    |               ИНАЧЕ 0
    |           КОНЕЦ) КАК N_T,  
	|       СУММА( ВЫБОР
    |               КОГДА
    |                  Замеры.ВремяВыполнения > ISNULL(Профиль.ЦелевоеВремя, 1) И Замеры.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) * 4
    |               ТОГДА
    |                  Замеры.КоличествоОпераций
    |               ИНАЧЕ
    |                  0
    |           КОНЕЦ) КАК N_T_4T,
    |       СУММА(Замеры.КоличествоОпераций) КАК ВсегоОпераций
    |   ИЗ
    |       (ВЫБРАТЬ
    |           Периоды.Период,
    |           История.ВерсияКонфигурации,
    |           История.ИнформационнаяБаза
    |       ИЗ
    |           Периоды
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |           РегистрСведений.ИнформацияИсторияПодробно КАК История
    |       ПО
    |           История.ПериодЗаписи = Периоды.Период
    |           И История.Конфигурация = &Конфигурация
    |           И История.ВерсияКонфигурации <> &ПустаяВерсия
    |           //#ОтборПоВерсииПлатформы
    |       ) КАК ИнформационныеБазы
    |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |       РегистрСведений.ЗамерыВремениЦентрМониторинга КАК Замеры
    |   ПО
    |       Замеры.Период = ИнформационныеБазы.Период
    |       И Замеры.ИнформационнаяБаза = ИнформационныеБазы.ИнформационнаяБаза
	|       //#ОтборПоКлючевойОперации
	|{ЛЕВОЕ СОЕДИНЕНИЕ
    |       КлючевыеОперации КАК Профиль}
    |ПО
    |   Профиль.КлючеваяОперация = Замеры.КлючеваяОперация
	|//#ОтборПоСтатусу
    |   СГРУППИРОВАТЬ ПО
    |       ИнформационныеБазы.ВерсияКонфигурации,
    |       Замеры.КлючеваяОперация
	|       //#ОтборПоКоличествуЗамеров
    |   ) КАК Выборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ВерсииКонфигурации КАК Версии
    |ПО
    |   Версии.Ссылка = Выборка.ВерсияКонфигурации
	|СГРУППИРОВАТЬ ПО
	|   Выборка.ВерсияКонфигурации,
	|   Версии.ВерсияЧисло
    |УПОРЯДОЧИТЬ ПО
    |   Версии.ВерсияЧисло
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииКонфигурации.НайтиПоНаименованию("0.0.0.0", Истина));
    
    Если Параметры.ТолькоКлючевыеОперацииПрофиля Тогда
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
    Иначе
         Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
		КонецЕсли;
		
	Если Параметры.МинимальноеКоличествоЗамеров <> 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКоличествуЗамеров", "Имеющие СУММА(Замеры.КоличествоОпераций) >= &МинимальноеКоличествоЗамеров");
		Запрос.УстановитьПараметр("МинимальноеКоличествоЗамеров", Параметры.МинимальноеКоличествоЗамеров);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.КлючеваяОперация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКлючевойОперации", "И Замеры.КлючеваяОперация = &КлючеваяОперация");
		Запрос.УстановитьПараметр("КлючеваяОперация", Параметры.КлючеваяОперация);
	КонецЕсли;	
	Если Параметры.ОтборПоЧастойВерсииПлатформы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВерсииПлатформы", "И ВерсияПлатформы = &ВерсияПлатформы ");
		Запрос.УстановитьПараметр("ВерсияПлатформы", Параметры.ВерсияПлатформы);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.СтатусИнформационнойБазы) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//#ОтборПоСтатусу","ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусИнформационнойБазы КАК СтатусИнформационнойБазы 
		|ПО Замеры.ИнформационнаяБаза = СтатусИнформационнойБазы.ИнформационнаяБаза
		|И СтатусИнформационнойБазы.Статус В (&Статус)");
		Запрос.УстановитьПараметр("Статус", Параметры.СтатусИнформационнойБазы);
	КонецЕсли;
		
        
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗамерВерсии = Новый Структура("ВерсияКонфигурации, APDEX, КоличествоЗамеров", Выборка.ВерсияКонфигурации, Выборка.APDEX, Выборка.КоличествоЗамеров);
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПолучитьПроизводительностьКонфигурацийПоПлатформеНеУчитыватьПлюсКоличествоПользователей(Параметры)
    
    ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Параметры.РаспределениеПользователей);
	ТаблицаРаспределенияПользователей = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
    
    Запрос = Новый Запрос;
    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    Справочники.ПрофилиКлючевыхОпераций.ДобавитьВременнуюТаблицуКлючевыхОпераций(Параметры.ПрофильКлючевыхОпераций, Запрос, "КлючевыеОперации");
    
    Запрос.Текст = Запрос.Текст + Общий.ТекстЗапросаПериодов(Дата(Параметры.Период.ДатаНачала),КонецДня(Дата(Параметры.Период.ДатаОкончания)), "День");
    Запрос.Текст = Запрос.Текст +"
    |;
    |ВЫБРАТЬ
    |   ОбщаяВыборка.ВерсияКонфигурации,
    |   ОбщаяВыборка.СерияПользователей,
	|   Сумма(ОбщаяВыборка.ВсегоОпераций) КАК КоличествоЗамеров,
	|   ВЫРАЗИТЬ((Сумма(ОбщаяВыборка.N_T) + Сумма(ОбщаяВыборка.N_T_4T)/2)/Сумма(ОбщаяВыборка.ВсегоОпераций) КАК ЧИСЛО(5,2)) КАК APDEX
	|ИЗ
    |   (ВЫБРАТЬ
    |       ИнформационныеБазы.ВерсияКонфигурации,
    |       ИнформационныеБазы.СерияПользователей,
    |       Замеры.КлючеваяОперация,
    |       СУММА( ВЫБОР
    |               КОГДА Замеры.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) ТОГДА Замеры.КоличествоОпераций
    |               ИНАЧЕ 0
    |           КОНЕЦ) КАК N_T,  
	|       СУММА( ВЫБОР
    |               КОГДА
    |                  Замеры.ВремяВыполнения > ISNULL(Профиль.ЦелевоеВремя, 1) И Замеры.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) * 4
    |               ТОГДА
    |                  Замеры.КоличествоОпераций
    |               ИНАЧЕ
    |                  0
    |           КОНЕЦ) КАК N_T_4T,
    |       СУММА(Замеры.КоличествоОпераций) КАК ВсегоОпераций
    |   ИЗ
    |       (ВЫБРАТЬ
    |           Периоды.Период,
    |           История.ВерсияКонфигурации,
    |           История.ИнформационнаяБаза,
    |           %ПоляПользователей
    |       ИЗ
    |           Периоды
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |           РегистрСведений.ИнформацияИсторияПодробно КАК История
    |       ПО
    |           История.ПериодЗаписи = Периоды.Период
    |           И История.Конфигурация = &Конфигурация
    |           И История.ВерсияКонфигурации <> &ПустаяВерсия
    |           //#ОтборПоВерсииПлатформы
    |           И %УсловияПользователей
    |       ) КАК ИнформационныеБазы
    |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |       РегистрСведений.ЗамерыВремениЦентрМониторинга КАК Замеры
    |   ПО
    |       Замеры.Период = ИнформационныеБазы.Период
    |       И Замеры.ИнформационнаяБаза = ИнформационныеБазы.ИнформационнаяБаза
	|       //#ОтборПоКлючевойОперации
	|{ЛЕВОЕ СОЕДИНЕНИЕ
    |       КлючевыеОперации КАК Профиль}
    |ПО
    |   Профиль.КлючеваяОперация = Замеры.КлючеваяОперация
	|//#ОтборПоСтатусу
    |   СГРУППИРОВАТЬ ПО
    |       ИнформационныеБазы.ВерсияКонфигурации,
    |       ИнформационныеБазы.СерияПользователей,
    |       Замеры.КлючеваяОперация
	|       //#ОтборПоКоличествуЗамеров
    |   ) КАК ОбщаяВыборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ВерсииКонфигурации КАК СпрВерсииКонфигурации
    |ПО
    |   СпрВерсииКонфигурации.Ссылка = ОбщаяВыборка.ВерсияКонфигурации 
	|СГРУППИРОВАТЬ ПО
    |   ОбщаяВыборка.ВерсияКонфигурации,
    |   СпрВерсииКонфигурации.ВерсияЧисло,
    |   ОбщаяВыборка.СерияПользователей
    |УПОРЯДОЧИТЬ ПО
    |   СпрВерсииКонфигурации.ВерсияЧисло
    |;
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    Запрос.УстановитьПараметр("ВерсияПлатформы", Параметры.ВерсияПлатформы);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииКонфигурации.НайтиПоНаименованию("0.0.0.0", Истина));
    
    ПоляПользователей = "ВЫБОР";
    УсловияПользователей = "";
    Для Каждого ТекСтрока Из ТаблицаРаспределенияПользователей Цикл
        
        Если ВРЕГ(ТекСтрока.Условие) = "МЕЖДУ" Тогда
            ПользователейОт = Формат(ТекСтрока.ПользователейОт, "ЧН=0; ЧГ=0");
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейОт + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ИЛИ
            |";
        ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "БОЛЬШЕ" Тогда
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей > " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей > " + ПользователейДо + " ИЛИ
            |";
        ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "МЕНЬШЕ" Тогда
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей < " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей < " + ПользователейДо + " ИЛИ
            |";
        КонецЕсли;
        
    КонецЦикла;
    ПоляПользователей = ПоляПользователей + "
    |          КОНЕЦ
    |";
    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", Лев(ПоляПользователей, СтрДлина(ПоляПользователей) - 1) + " КАК СерияПользователей");
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловияПользователей", "(" + Лев(УсловияПользователей, СтрДлина(УсловияПользователей) - 4) + ")");
    
    Если Параметры.ТолькоКлючевыеОперацииПрофиля Тогда
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
    Иначе
         Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
	КонецЕсли;
		
	Если Параметры.МинимальноеКоличествоЗамеров <> 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКоличествуЗамеров", "Имеющие СУММА(Замеры.КоличествоОпераций) >= &МинимальноеКоличествоЗамеров");
		Запрос.УстановитьПараметр("МинимальноеКоличествоЗамеров", Параметры.МинимальноеКоличествоЗамеров);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.КлючеваяОперация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКлючевойОперации", "И Замеры.КлючеваяОперация = &КлючеваяОперация");
		Запрос.УстановитьПараметр("КлючеваяОперация", Параметры.КлючеваяОперация);
	КонецЕсли;	
	Если Параметры.ОтборПоЧастойВерсииПлатформы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВерсииПлатформы", "И ВерсияПлатформы = &ВерсияПлатформы ");
		Запрос.УстановитьПараметр("ВерсияПлатформы", Параметры.ВерсияПлатформы);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.СтатусИнформационнойБазы) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//#ОтборПоСтатусу","ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусИнформационнойБазы КАК СтатусИнформационнойБазы 
		|ПО Замеры.ИнформационнаяБаза = СтатусИнформационнойБазы.ИнформационнаяБаза
		|И СтатусИнформационнойБазы.Статус В (&Статус)");
		Запрос.УстановитьПараметр("Статус", Параметры.СтатусИнформационнойБазы);
	КонецЕсли;
        
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗамерВерсии = Новый Структура("ВерсияКонфигурации, СерияПользователей, APDEX, КоличествоЗамеров", 
						Выборка.ВерсияКонфигурации, Выборка.СерияПользователей, Выборка.APDEX, Выборка.КоличествоЗамеров);
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПолучитьПроизводительностьКонфигурацийПоПлатформеРежимРаботы(Параметры)
    
    Запрос = Новый Запрос;
    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    Справочники.ПрофилиКлючевыхОпераций.ДобавитьВременнуюТаблицуКлючевыхОпераций(Параметры.ПрофильКлючевыхОпераций, Запрос, "КлючевыеОперации");
    
    Запрос.Текст = Запрос.Текст + Общий.ТекстЗапросаПериодов(Дата(Параметры.Период.ДатаНачала),КонецДня(Дата(Параметры.Период.ДатаОкончания)), "День");
    Запрос.Текст = Запрос.Текст + "
	|;
    |ВЫБРАТЬ
    |   Выборка.ВерсияКонфигурации,
    |   Выборка.РежимРаботыКонфигурации,
	|   Сумма(Выборка.ВсегоОпераций) КАК КоличествоЗамеров,
    |   ВЫРАЗИТЬ((Сумма(Выборка.N_T) + Сумма(Выборка.N_T_4T)/2)/Сумма(Выборка.ВсегоОпераций) КАК ЧИСЛО(5,2)) КАК APDEX
    |ИЗ
    |   (ВЫБРАТЬ
    |       ИнформационныеБазы.ВерсияКонфигурации,
	|       ИнформационныеБазы.РежимРаботыКонфигурации,
    |       Замеры.КлючеваяОперация,
    |       СУММА( ВЫБОР
    |               КОГДА Замеры.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) ТОГДА Замеры.КоличествоОпераций
    |               ИНАЧЕ 0
    |           КОНЕЦ) КАК N_T,  
	|       СУММА( ВЫБОР
    |               КОГДА
    |                  Замеры.ВремяВыполнения > ISNULL(Профиль.ЦелевоеВремя, 1) И Замеры.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) * 4
    |               ТОГДА
    |                  Замеры.КоличествоОпераций
    |               ИНАЧЕ
    |                  0
    |           КОНЕЦ) КАК N_T_4T,
    |       СУММА(Замеры.КоличествоОпераций) КАК ВсегоОпераций
    |   ИЗ
    |       (ВЫБРАТЬ
    |           Периоды.Период,
    |           История.ВерсияКонфигурации,
	|           История.РежимРаботыКонфигурации,
    |           История.ИнформационнаяБаза
    |       ИЗ
    |           Периоды
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |           РегистрСведений.ИнформацияИсторияПодробно КАК История
    |       ПО
    |           История.ПериодЗаписи = Периоды.Период
    |           И История.Конфигурация = &Конфигурация
    |           И История.ВерсияКонфигурации <> &ПустаяВерсия
	|           И История.РежимРаботыКонфигурации В (&РежимыРаботыКонфигурации)
    |           //#ОтборПоВерсииПлатформы
    |       ) КАК ИнформационныеБазы
    |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |       РегистрСведений.ЗамерыВремениЦентрМониторинга КАК Замеры
    |   ПО
    |       Замеры.Период = ИнформационныеБазы.Период
    |       И Замеры.ИнформационнаяБаза = ИнформационныеБазы.ИнформационнаяБаза
	|       //#ОтборПоКлючевойОперации
	|{ЛЕВОЕ СОЕДИНЕНИЕ
    |       КлючевыеОперации КАК Профиль}
    |ПО
    |   Профиль.КлючеваяОперация = Замеры.КлючеваяОперация
	|//#ОтборПоСтатусу
    |   СГРУППИРОВАТЬ ПО
    |       ИнформационныеБазы.ВерсияКонфигурации,
	|       ИнформационныеБазы.РежимРаботыКонфигурации,
    |       Замеры.КлючеваяОперация
	|       //#ОтборПоКоличествуЗамеров
    |   ) КАК Выборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ВерсииКонфигурации КАК Версии
    |ПО
    |   Версии.Ссылка = Выборка.ВерсияКонфигурации
	|СГРУППИРОВАТЬ ПО
	|   Выборка.ВерсияКонфигурации,
	|   Выборка.РежимРаботыКонфигурации,
	|   Версии.ВерсияЧисло
    |УПОРЯДОЧИТЬ ПО
    |   Версии.ВерсияЧисло
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    Запрос.УстановитьПараметр("ВерсияПлатформы", Параметры.ВерсияПлатформы);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииКонфигурации.НайтиПоНаименованию("0.0.0.0", Истина));
    
    РежимыРаботыКонфигурации = Новый Массив;
    Если Параметры.РежимРаботыКонфигурации = "Все" Тогда
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.F);
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.S);
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Файловый" Тогда
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.F);
    ИначеЕсли  Параметры.РежимРаботыКонфигурации = "Клиент-Серверный" Тогда
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.S);
    КонецЕсли;
    
    Запрос.УстановитьПараметр("РежимыРаботыКонфигурации", РежимыРаботыКонфигурации);
    
    Если Параметры.ТолькоКлючевыеОперацииПрофиля Тогда
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
    Иначе
         Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
	КонецЕсли;
		
	Если Параметры.МинимальноеКоличествоЗамеров <> 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКоличествуЗамеров", "Имеющие СУММА(Замеры.КоличествоОпераций) >= &МинимальноеКоличествоЗамеров");
		Запрос.УстановитьПараметр("МинимальноеКоличествоЗамеров", Параметры.МинимальноеКоличествоЗамеров);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.КлючеваяОперация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКлючевойОперации", "И Замеры.КлючеваяОперация = &КлючеваяОперация");
		Запрос.УстановитьПараметр("КлючеваяОперация", Параметры.КлючеваяОперация);
	КонецЕсли;	
	Если Параметры.ОтборПоЧастойВерсииПлатформы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВерсииПлатформы", "И ВерсияПлатформы = &ВерсияПлатформы ");
		Запрос.УстановитьПараметр("ВерсияПлатформы", Параметры.ВерсияПлатформы);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.СтатусИнформационнойБазы) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//#ОтборПоСтатусу","ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусИнформационнойБазы КАК СтатусИнформационнойБазы 
		|ПО Замеры.ИнформационнаяБаза = СтатусИнформационнойБазы.ИнформационнаяБаза
		|И СтатусИнформационнойБазы.Статус В (&Статус)");
		Запрос.УстановитьПараметр("Статус", Параметры.СтатусИнформационнойБазы);
	КонецЕсли;
        
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗамерВерсии = Новый Структура("ВерсияКонфигурации, РежимРаботыКонфигурации, APDEX, КоличествоЗамеров",
						Выборка.ВерсияКонфигурации, Выборка.РежимРаботыКонфигурации, Выборка.APDEX, Выборка.КоличествоЗамеров);
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПолучитьПроизводительностьКонфигурацийПоПлатформеРежимРаботыПлюсКоличествоПользователей(Параметры)
    
    ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Параметры.РаспределениеПользователей);
	ТаблицаРаспределенияПользователей = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
    
    Запрос = Новый Запрос;
    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    Справочники.ПрофилиКлючевыхОпераций.ДобавитьВременнуюТаблицуКлючевыхОпераций(Параметры.ПрофильКлючевыхОпераций, Запрос, "КлючевыеОперации");
    
    Запрос.Текст = Запрос.Текст + Общий.ТекстЗапросаПериодов(Дата(Параметры.Период.ДатаНачала),КонецДня(Дата(Параметры.Период.ДатаОкончания)), "День");
    Запрос.Текст = Запрос.Текст +"
    |;
    |ВЫБРАТЬ
    |   ОбщаяВыборка.ВерсияКонфигурации,
    |   ОбщаяВыборка.СерияПользователей,
	|   Сумма(ОбщаяВыборка.ВсегоОпераций) КАК КоличествоЗамеров,
	|   ВЫРАЗИТЬ((Сумма(ОбщаяВыборка.N_T) + Сумма(ОбщаяВыборка.N_T_4T)/2)/Сумма(ОбщаяВыборка.ВсегоОпераций) КАК ЧИСЛО(5,2)) КАК APDEX
	|ИЗ
    |   (ВЫБРАТЬ
    |       ИнформационныеБазы.ВерсияКонфигурации,
    |       ИнформационныеБазы.СерияПользователей,
    |       Замеры.КлючеваяОперация,
    |       СУММА( ВЫБОР
    |               КОГДА Замеры.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) ТОГДА Замеры.КоличествоОпераций
    |               ИНАЧЕ 0
    |           КОНЕЦ) КАК N_T,  
	|       СУММА( ВЫБОР
    |               КОГДА
    |                  Замеры.ВремяВыполнения > ISNULL(Профиль.ЦелевоеВремя, 1) И Замеры.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) * 4
    |               ТОГДА
    |                  Замеры.КоличествоОпераций
    |               ИНАЧЕ
    |                  0
    |           КОНЕЦ) КАК N_T_4T,
    |       СУММА(Замеры.КоличествоОпераций) КАК ВсегоОпераций
	|   ИЗ
    |       (ВЫБРАТЬ
    |           Периоды.Период,
    |           История.ВерсияКонфигурации,
    |           История.ИнформационнаяБаза,
    |           %ПоляПользователей
    |       ИЗ
    |           Периоды
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |           РегистрСведений.ИнформацияИсторияПодробно КАК История
    |       ПО
    |           История.ПериодЗаписи = Периоды.Период
    |           И История.Конфигурация = &Конфигурация
    |           И История.ВерсияКонфигурации <> &ПустаяВерсия
    |           И История.РежимРаботыКонфигурации = &РежимРаботыКонфигурации
    |           //#ОтборПоВерсииПлатформы
    |           И %УсловияПользователей
    |       ) КАК ИнформационныеБазы
    |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |       РегистрСведений.ЗамерыВремениЦентрМониторинга КАК Замеры
    |   ПО
    |       Замеры.Период = ИнформационныеБазы.Период
    |       И Замеры.ИнформационнаяБаза = ИнформационныеБазы.ИнформационнаяБаза
	|       //#ОтборПоКлючевойОперации
	|{ЛЕВОЕ СОЕДИНЕНИЕ
    |       КлючевыеОперации КАК Профиль}
	|ПО
    |   Профиль.КлючеваяОперация = Замеры.КлючеваяОперация
	|//#ОтборПоСтатусу
    |   СГРУППИРОВАТЬ ПО
    |       ИнформационныеБазы.ВерсияКонфигурации,
    |       ИнформационныеБазы.СерияПользователей,
    |       Замеры.КлючеваяОперация
    |       //#ОтборПоКоличествуЗамеров
    |   ) КАК ОбщаяВыборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ВерсииКонфигурации КАК СпрВерсииКонфигурации
    |ПО
    |   СпрВерсииКонфигурации.Ссылка = ОбщаяВыборка.ВерсияКонфигурации 
    |СГРУППИРОВАТЬ ПО
    |   ОбщаяВыборка.ВерсияКонфигурации,
    |   СпрВерсииКонфигурации.ВерсияЧисло,
    |   ОбщаяВыборка.СерияПользователей
    |УПОРЯДОЧИТЬ ПО
    |   СпрВерсииКонфигурации.ВерсияЧисло
    |;
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    Запрос.УстановитьПараметр("ВерсияПлатформы", Параметры.ВерсияПлатформы);
    Если Параметры.РежимРаботыКонфигурации = "Файловый + Количество пользователей" Тогда
        Запрос.УстановитьПараметр("РежимРаботыКонфигурации", Перечисления.РежимРаботыКонфигурации.F);
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Клиент-Серверный + Количество пользователей" Тогда
        Запрос.УстановитьПараметр("РежимРаботыКонфигурации", Перечисления.РежимРаботыКонфигурации.S);
    КонецЕсли;
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииКонфигурации.НайтиПоНаименованию("0.0.0.0", Истина));
    
    ПоляПользователей = "ВЫБОР";
    УсловияПользователей = "";
    Для Каждого ТекСтрока Из ТаблицаРаспределенияПользователей Цикл
        
        Если ВРЕГ(ТекСтрока.Условие) = "МЕЖДУ" Тогда
            ПользователейОт = Формат(ТекСтрока.ПользователейОт, "ЧН=0; ЧГ=0");
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейОт + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ИЛИ
            |";
        ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "БОЛЬШЕ" Тогда
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей > " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей > " + ПользователейДо + " ИЛИ
            |";
        ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "МЕНЬШЕ" Тогда
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей < " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей < " + ПользователейДо + " ИЛИ
            |";
        КонецЕсли;
        
    КонецЦикла;
    ПоляПользователей = ПоляПользователей + "
    |          КОНЕЦ
    |";
    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", Лев(ПоляПользователей, СтрДлина(ПоляПользователей) - 1) + " КАК СерияПользователей");
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловияПользователей", "(" + Лев(УсловияПользователей, СтрДлина(УсловияПользователей) - 4) + ")");
    
    Если Параметры.ТолькоКлючевыеОперацииПрофиля Тогда
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
    Иначе
         Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
	КонецЕсли;
		
	Если Параметры.МинимальноеКоличествоЗамеров <> 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКоличествуЗамеров", "Имеющие СУММА(Замеры.КоличествоОпераций) >= &МинимальноеКоличествоЗамеров");
		Запрос.УстановитьПараметр("МинимальноеКоличествоЗамеров", Параметры.МинимальноеКоличествоЗамеров);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.КлючеваяОперация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКлючевойОперации", "И Замеры.КлючеваяОперация = &КлючеваяОперация");
		Запрос.УстановитьПараметр("КлючеваяОперация", Параметры.КлючеваяОперация);
	КонецЕсли;	
	Если Параметры.ОтборПоЧастойВерсииПлатформы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВерсииПлатформы", "И ВерсияПлатформы = &ВерсияПлатформы ");
		Запрос.УстановитьПараметр("ВерсияПлатформы", Параметры.ВерсияПлатформы);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.СтатусИнформационнойБазы) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//#ОтборПоСтатусу","ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусИнформационнойБазы КАК СтатусИнформационнойБазы 
		|ПО Замеры.ИнформационнаяБаза = СтатусИнформационнойБазы.ИнформационнаяБаза
		|И СтатусИнформационнойБазы.Статус В (&Статус)");
		Запрос.УстановитьПараметр("Статус", Параметры.СтатусИнформационнойБазы);
	КонецЕсли;
        
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗамерВерсии = Новый Структура("ВерсияКонфигурации, СерияПользователей, APDEX, КоличествоЗамеров",
						Выборка.ВерсияКонфигурации, Выборка.СерияПользователей, Выборка.APDEX, Выборка.КоличествоЗамеров);
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;    
    
КонецФункции

Функция ПолучитьПроизводительностьПлатформыПоКонфигурации(Параметры)
    
    Если Параметры.РежимРаботыКонфигурации = "Не учитывать" Тогда
        РезультатВыполнения = ПолучитьПроизводительностьПлатформыПоКонфигурацииНеУчитывать(Параметры);
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Не учитывать + Количество пользователей" Тогда
        РезультатВыполнения = ПолучитьПроизводительностьПлатформыПоКонфигурацииНеУчитыватьПлюсКоличествоПользователей(Параметры);
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Файловый + Количество пользователей" ИЛИ Параметры.РежимРаботыКонфигурации = "Клиент-Серверный + Количество пользователей" Тогда    
        РезультатВыполнения = ПолучитьПроизводительностьПлатформыПоКонфигурацииРежимРаботыПлюсКоличествоПользователей(Параметры);
    Иначе
        РезультатВыполнения = ПолучитьПроизводительностьПлатформыПоКонфигурацииРежимРаботы(Параметры);
    КонецЕсли;
    
    Возврат РезультатВыполнения;
        
КонецФункции

Функция ПолучитьПроизводительностьПлатформыПоКонфигурацииНеУчитывать(Параметры)
    
    Запрос = Новый Запрос;
    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    Справочники.ПрофилиКлючевыхОпераций.ДобавитьВременнуюТаблицуКлючевыхОпераций(Параметры.ПрофильКлючевыхОпераций, Запрос, "КлючевыеОперации");
	
	Запрос.Текст = Запрос.Текст + Общий.ТекстЗапросаПериодов(Дата(Параметры.Период.ДатаНачала),КонецДня(Дата(Параметры.Период.ДатаОкончания)), "День");
    Запрос.Текст = Запрос.Текст + ";
	|ВЫБРАТЬ
	|   Выборка.ВерсияПлатформы,
    |   ВЫРАЗИТЬ((Сумма(Выборка.N_T) + Сумма(Выборка.N_T_4T)/2)/Сумма(Выборка.ВсегоОпераций) КАК ЧИСЛО(5,2)) КАК APDEX
    |ИЗ
    |   (ВЫБРАТЬ
	|       ИнформационныеБазы.ВерсияПлатформы,
    |       Замеры.КлючеваяОперация,
    |       СУММА( ВЫБОР
    |               КОГДА Замеры.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) ТОГДА Замеры.КоличествоОпераций
    |               ИНАЧЕ 0
    |           КОНЕЦ) КАК N_T,  
	|       СУММА( ВЫБОР
    |               КОГДА
    |                  Замеры.ВремяВыполнения > ISNULL(Профиль.ЦелевоеВремя, 1) И Замеры.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) * 4
    |               ТОГДА
    |                  Замеры.КоличествоОпераций
    |               ИНАЧЕ
    |                  0
    |           КОНЕЦ) КАК N_T_4T,
    |       СУММА(Замеры.КоличествоОпераций) КАК ВсегоОпераций
    |   ИЗ
	|       (ВЫБРАТЬ
    |           Периоды.Период,
    |           История.ВерсияПлатформы,
    |           История.ИнформационнаяБаза
    |       ИЗ
    |           Периоды
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |           РегистрСведений.ИнформацияИсторияПодробно КАК История
    |       ПО
    |           История.ПериодЗаписи = Периоды.Период
    |           И История.Конфигурация = &Конфигурация
    |           И ВерсияКонфигурации = &ВерсияКонфигурации
    |           И ВерсияПлатформы <> &ПустаяВерсия  
    |       ) КАК ИнформационныеБазы
    |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |       РегистрСведений.ЗамерыВремениЦентрМониторинга КАК Замеры
    |   ПО
    |       Замеры.Период = ИнформационныеБазы.Период
    |       И Замеры.ИнформационнаяБаза = ИнформационныеБазы.ИнформационнаяБаза
	|{ЛЕВОЕ СОЕДИНЕНИЕ
    |       КлючевыеОперации КАК Профиль}
    |ПО
    |   Профиль.КлючеваяОперация = Замеры.КлючеваяОперация
	|   СГРУППИРОВАТЬ ПО
    |       ИнформационныеБазы.ВерсияПлатформы,
    |       Замеры.КлючеваяОперация
	|   ) КАК Выборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ВерсииПлатформыЦентрМониторинга КАК Версии
    |ПО
    |   Версии.Ссылка = Выборка.ВерсияПлатформы
	|СГРУППИРОВАТЬ ПО
	|   Выборка.ВерсияПлатформы,
	|   Версии.ВерсияЧисло
    |УПОРЯДОЧИТЬ ПО
    |   Версии.ВерсияЧисло
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    Запрос.УстановитьПараметр("ВерсияКонфигурации", Параметры.ВерсияКонфигурации);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииПлатформыЦентрМониторинга.НайтиПоНаименованию("0.0.0.0", Истина));
    
    Если Параметры.ТолькоКлючевыеОперацииПрофиля Тогда
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
    Иначе
         Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
    КонецЕсли;
    
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗамерВерсии = Новый Структура("ВерсияПлатформы, APDEX", Выборка.ВерсияПлатформы, Выборка.APDEX);
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПолучитьПроизводительностьПлатформыПоКонфигурацииНеУчитыватьПлюсКоличествоПользователей(Параметры)
    
    ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Параметры.РаспределениеПользователей);
	ТаблицаРаспределенияПользователей = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
    
    Запрос = Новый Запрос;
    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    Справочники.ПрофилиКлючевыхОпераций.ДобавитьВременнуюТаблицуКлючевыхОпераций(Параметры.ПрофильКлючевыхОпераций, Запрос, "КлючевыеОперации");
    
    Запрос.Текст = Запрос.Текст + Общий.ТекстЗапросаПериодов(Дата(Параметры.Период.ДатаНачала),КонецДня(Дата(Параметры.Период.ДатаОкончания)), "День");
    Запрос.Текст = Запрос.Текст +"
    |;
    |ВЫБРАТЬ
    |   ОбщаяВыборка.ВерсияПлатформы,
    |   ОбщаяВыборка.СерияПользователей,
    |   ВЫРАЗИТЬ((СУММА( ВЫБОР
    |               КОГДА ОбщаяВыборка.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) ТОГДА ОбщаяВыборка.КоличествоОпераций
    |               ИНАЧЕ 0
    |           КОНЕЦ)
    |           +
    |    СУММА( ВЫБОР
    |               КОГДА
    |                  ОбщаяВыборка.ВремяВыполнения > ISNULL(Профиль.ЦелевоеВремя, 1)
    |                  И ОбщаяВыборка.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) * 4
    |               ТОГДА
    |                  ОбщаяВыборка.КоличествоОпераций
    |               ИНАЧЕ
    |                  0
    |           КОНЕЦ)/2)
    |    /
    |    СУММА(ОбщаяВыборка.КоличествоОпераций) КАК ЧИСЛО(5,2)) КАК APDEX
    |ИЗ
    |   (ВЫБРАТЬ
    |       ИнформационныеБазы.ВерсияПлатформы,
    |       ИнформационныеБазы.СерияПользователей,
    |       Замеры.КлючеваяОперация,
    |       Замеры.ВремяВыполнения,
    |       СУММА(Замеры.КоличествоОпераций) КАК КоличествоОпераций
    |   ИЗ
    |       (ВЫБРАТЬ
    |           Периоды.Период,
    |           История.ВерсияПлатформы,
    |           История.ИнформационнаяБаза,
    |           %ПоляПользователей
    |       ИЗ
    |           Периоды
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |           РегистрСведений.ИнформацияИсторияПодробно КАК История
    |       ПО
    |           История.ПериодЗаписи = Периоды.Период
    |           И История.Конфигурация = &Конфигурация
    |           И История.ВерсияПлатформы <> &ПустаяВерсия
    |           И ВерсияКонфигурации = &ВерсияКонфигурации
    |           И %УсловияПользователей
    |       ) КАК ИнформационныеБазы
    |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |       РегистрСведений.ЗамерыВремениЦентрМониторинга КАК Замеры
    |   ПО
    |       Замеры.Период = ИнформационныеБазы.Период
    |       И Замеры.ИнформационнаяБаза = ИнформационныеБазы.ИнформационнаяБаза
    |   СГРУППИРОВАТЬ ПО
    |       ИнформационныеБазы.ВерсияПлатформы,
    |       ИнформационныеБазы.СерияПользователей,
    |       Замеры.КлючеваяОперация,
    |       Замеры.ВремяВыполнения
    |   ) КАК ОбщаяВыборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ВерсииПлатформыЦентрМониторинга КАК СпрВерсииПлатформы
    |ПО
    |   СпрВерсииПлатформы.Ссылка = ОбщаяВыборка.ВерсияПлатформы
    |{ЛЕВОЕ СОЕДИНЕНИЕ
    |       КлючевыеОперации КАК Профиль}
    |ПО
    |   Профиль.КлючеваяОперация = ОбщаяВыборка.КлючеваяОперация
    |СГРУППИРОВАТЬ ПО
    |   ОбщаяВыборка.ВерсияПлатформы,
    |   СпрВерсииПлатформы.ВерсияЧисло,
    |   ОбщаяВыборка.СерияПользователей
    |УПОРЯДОЧИТЬ ПО
    |   СпрВерсииПлатформы.ВерсияЧисло
    |;
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    Запрос.УстановитьПараметр("ВерсияКонфигурации", Параметры.ВерсияКонфигурации);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииПлатформыЦентрМониторинга.НайтиПоНаименованию("0.0.0.0", Истина));
    
    ПоляПользователей = "ВЫБОР";
    УсловияПользователей = "";
    Для Каждого ТекСтрока Из ТаблицаРаспределенияПользователей Цикл
        
        Если ВРЕГ(ТекСтрока.Условие) = "МЕЖДУ" Тогда
            ПользователейОт = Формат(ТекСтрока.ПользователейОт, "ЧН=0; ЧГ=0");
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейОт + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ИЛИ
            |";
        ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "БОЛЬШЕ" Тогда
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей > " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей > " + ПользователейДо + " ИЛИ
            |";
        ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "МЕНЬШЕ" Тогда
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей < " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей < " + ПользователейДо + " ИЛИ
            |";
        КонецЕсли;
        
    КонецЦикла;
    ПоляПользователей = ПоляПользователей + "
    |          КОНЕЦ
    |";
    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", Лев(ПоляПользователей, СтрДлина(ПоляПользователей) - 1) + " КАК СерияПользователей");
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловияПользователей", "(" + Лев(УсловияПользователей, СтрДлина(УсловияПользователей) - 4) + ")");
    
    Если Параметры.ТолькоКлючевыеОперацииПрофиля Тогда
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
    Иначе
         Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
    КонецЕсли;
        
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗамерВерсии = Новый Структура("ВерсияПлатформы, СерияПользователей, APDEX", Выборка.ВерсияПлатформы, Выборка.СерияПользователей, Выборка.APDEX);
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПолучитьПроизводительностьПлатформыПоКонфигурацииРежимРаботы(Параметры)
    
    Запрос = Новый Запрос;
    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    Справочники.ПрофилиКлючевыхОпераций.ДобавитьВременнуюТаблицуКлючевыхОпераций(Параметры.ПрофильКлючевыхОпераций, Запрос, "КлючевыеОперации");
	
	Запрос.Текст = Запрос.Текст + Общий.ТекстЗапросаПериодов(Дата(Параметры.Период.ДатаНачала),КонецДня(Дата(Параметры.Период.ДатаОкончания)), "День");
    Запрос.Текст = Запрос.Текст + ";
    |ВЫБРАТЬ
	|   Выборка.ВерсияПлатформы,
    |   Выборка.РежимРаботыКонфигурации,
	|   ВЫРАЗИТЬ((Сумма(Выборка.N_T) + Сумма(Выборка.N_T_4T)/2)/Сумма(Выборка.ВсегоОпераций) КАК ЧИСЛО(5,2)) КАК APDEX
	|ИЗ
    |   (ВЫБРАТЬ
	|       ИнформационныеБазы.ВерсияПлатформы,
	|       ИнформационныеБазы.РежимРаботыКонфигурации,
    |       Замеры.КлючеваяОперация,
    |       СУММА( ВЫБОР
    |               КОГДА Замеры.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) ТОГДА Замеры.КоличествоОпераций
    |               ИНАЧЕ 0
    |           КОНЕЦ) КАК N_T,  
	|       СУММА( ВЫБОР
    |               КОГДА
    |                  Замеры.ВремяВыполнения > ISNULL(Профиль.ЦелевоеВремя, 1) И Замеры.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) * 4
    |               ТОГДА
    |                  Замеры.КоличествоОпераций
    |               ИНАЧЕ
    |                  0
    |           КОНЕЦ) КАК N_T_4T,
    |       СУММА(Замеры.КоличествоОпераций) КАК ВсегоОпераций
    |   ИЗ
	|       (ВЫБРАТЬ
    |           Периоды.Период,
    |           История.ВерсияПлатформы,
	|           История.РежимРаботыКонфигурации,
    |           История.ИнформационнаяБаза
    |       ИЗ
    |           Периоды
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |           РегистрСведений.ИнформацияИсторияПодробно КАК История
    |       ПО
    |           История.ПериодЗаписи = Периоды.Период
    |           И История.Конфигурация = &Конфигурация
    |           И ВерсияКонфигурации = &ВерсияКонфигурации
	|           И История.РежимРаботыКонфигурации В (&РежимыРаботыКонфигурации)
    |           И ВерсияПлатформы <> &ПустаяВерсия
    |       ) КАК ИнформационныеБазы
    |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |       РегистрСведений.ЗамерыВремениЦентрМониторинга КАК Замеры
    |   ПО
    |       Замеры.Период = ИнформационныеБазы.Период
    |       И Замеры.ИнформационнаяБаза = ИнформационныеБазы.ИнформационнаяБаза
	|{ЛЕВОЕ СОЕДИНЕНИЕ
    |       КлючевыеОперации КАК Профиль}
    |ПО
    |   Профиль.КлючеваяОперация = Замеры.КлючеваяОперация
	|   СГРУППИРОВАТЬ ПО
    |       ИнформационныеБазы.ВерсияПлатформы,
	|       ИнформационныеБазы.РежимРаботыКонфигурации,
    |       Замеры.КлючеваяОперация
    |   ) КАК Выборка	
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ВерсииПлатформыЦентрМониторинга КАК Версии
    |ПО
    |   Версии.Ссылка = Выборка.ВерсияПлатформы
	|СГРУППИРОВАТЬ ПО
	|   Выборка.ВерсияПлатформы,
	|   Выборка.РежимРаботыКонфигурации,
	|   Версии.ВерсияЧисло
    |УПОРЯДОЧИТЬ ПО
    |   Версии.ВерсияЧисло
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    Запрос.УстановитьПараметр("ВерсияКонфигурации", Параметры.ВерсияКонфигурации);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииПлатформыЦентрМониторинга.НайтиПоНаименованию("0.0.0.0", Истина));
    
    РежимыРаботыКонфигурации = Новый Массив;
    Если Параметры.РежимРаботыКонфигурации = "Все" Тогда
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.F);
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.S);
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Файловый" Тогда
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.F);
    ИначеЕсли  Параметры.РежимРаботыКонфигурации = "Клиент-Серверный" Тогда
        РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.S);
    КонецЕсли;
    
    Запрос.УстановитьПараметр("РежимыРаботыКонфигурации", РежимыРаботыКонфигурации);
    
    Если Параметры.ТолькоКлючевыеОперацииПрофиля Тогда
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
    Иначе
         Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
    КонецЕсли;
    
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗамерВерсии = Новый Структура("ВерсияПлатформы, РежимРаботыКонфигурации, APDEX", Выборка.ВерсияПлатформы, Выборка.РежимРаботыКонфигурации, Выборка.APDEX);
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПолучитьПроизводительностьПлатформыПоКонфигурацииРежимРаботыПлюсКоличествоПользователей(Параметры)
    
    ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Параметры.РаспределениеПользователей);
	ТаблицаРаспределенияПользователей = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
    
    Запрос = Новый Запрос;
    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    Справочники.ПрофилиКлючевыхОпераций.ДобавитьВременнуюТаблицуКлючевыхОпераций(Параметры.ПрофильКлючевыхОпераций, Запрос, "КлючевыеОперации");
    
    Запрос.Текст = Запрос.Текст + Общий.ТекстЗапросаПериодов(Дата(Параметры.Период.ДатаНачала),КонецДня(Дата(Параметры.Период.ДатаОкончания)), "День");
    Запрос.Текст = Запрос.Текст +"
    |;
    |ВЫБРАТЬ
    |   ОбщаяВыборка.ВерсияПлатформы,
    |   ОбщаяВыборка.СерияПользователей,
    |   ВЫРАЗИТЬ((СУММА( ВЫБОР
    |               КОГДА ОбщаяВыборка.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) ТОГДА ОбщаяВыборка.КоличествоОпераций
    |               ИНАЧЕ 0
    |           КОНЕЦ)
    |           +
    |    СУММА( ВЫБОР
    |               КОГДА
    |                  ОбщаяВыборка.ВремяВыполнения > ISNULL(Профиль.ЦелевоеВремя, 1)
    |                  И ОбщаяВыборка.ВремяВыполнения <= ISNULL(Профиль.ЦелевоеВремя, 1) * 4
    |               ТОГДА
    |                  ОбщаяВыборка.КоличествоОпераций
    |               ИНАЧЕ
    |                  0
    |           КОНЕЦ)/2)
    |    /
    |    СУММА(ОбщаяВыборка.КоличествоОпераций) КАК ЧИСЛО(5,2)) КАК APDEX
    |ИЗ
    |   (ВЫБРАТЬ
    |       ИнформационныеБазы.ВерсияПлатформы,
    |       ИнформационныеБазы.СерияПользователей,
    |       Замеры.КлючеваяОперация,
    |       Замеры.ВремяВыполнения,
    |       СУММА(Замеры.КоличествоОпераций) КАК КоличествоОпераций
    |   ИЗ
    |       (ВЫБРАТЬ
    |           Периоды.Период,
    |           История.ВерсияПлатформы,
    |           История.ИнформационнаяБаза,
    |           %ПоляПользователей
    |       ИЗ
    |           Периоды
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |           РегистрСведений.ИнформацияИсторияПодробно КАК История
    |       ПО
    |           История.ПериодЗаписи = Периоды.Период
    |           И История.Конфигурация = &Конфигурация
    |           И История.ВерсияПлатформы <> &ПустаяВерсия
    |           И История.РежимРаботыКонфигурации = &РежимРаботыКонфигурации
    |           И ВерсияКонфигурации = &ВерсияКонфигурации
    |           И %УсловияПользователей
    |       ) КАК ИнформационныеБазы
    |   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |       РегистрСведений.ЗамерыВремениЦентрМониторинга КАК Замеры
    |   ПО
    |       Замеры.Период = ИнформационныеБазы.Период
    |       И Замеры.ИнформационнаяБаза = ИнформационныеБазы.ИнформационнаяБаза
    |   СГРУППИРОВАТЬ ПО
    |       ИнформационныеБазы.ВерсияПлатформы,
    |       ИнформационныеБазы.СерияПользователей,
    |       Замеры.КлючеваяОперация,
    |       Замеры.ВремяВыполнения
    |   ) КАК ОбщаяВыборка
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ВерсииПлатформыЦентрМониторинга КАК СпрВерсииПлатформы
    |ПО
    |   СпрВерсииПлатформы.Ссылка = ОбщаяВыборка.ВерсияПлатформы
    |{ЛЕВОЕ СОЕДИНЕНИЕ
    |       КлючевыеОперации КАК Профиль}
    |ПО
    |   Профиль.КлючеваяОперация = ОбщаяВыборка.КлючеваяОперация
    |СГРУППИРОВАТЬ ПО
    |   ОбщаяВыборка.ВерсияПлатформы,
    |   СпрВерсииПлатформы.ВерсияЧисло,
    |   ОбщаяВыборка.СерияПользователей
    |УПОРЯДОЧИТЬ ПО
    |   СпрВерсииПлатформы.ВерсияЧисло
    |;
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", Дата(Параметры.Период.ДатаНачала));
    Запрос.УстановитьПараметр("ДатаОкончания", Дата(Параметры.Период.ДатаОкончания));
    Запрос.УстановитьПараметр("Конфигурация", Параметры.Конфигурация);
    Запрос.УстановитьПараметр("ВерсияКонфигурации", Параметры.ВерсияКонфигурации);
    Если Параметры.РежимРаботыКонфигурации = "Файловый + Количество пользователей" Тогда
        Запрос.УстановитьПараметр("РежимРаботыКонфигурации", Перечисления.РежимРаботыКонфигурации.F);
    ИначеЕсли Параметры.РежимРаботыКонфигурации = "Клиент-Серверный + Количество пользователей" Тогда
        Запрос.УстановитьПараметр("РежимРаботыКонфигурации", Перечисления.РежимРаботыКонфигурации.S);
    КонецЕсли;
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииПлатформыЦентрМониторинга.НайтиПоНаименованию("0.0.0.0", Истина));
    
    ПоляПользователей = "ВЫБОР";
    УсловияПользователей = "";
    Для Каждого ТекСтрока Из ТаблицаРаспределенияПользователей Цикл
        
        Если ВРЕГ(ТекСтрока.Условие) = "МЕЖДУ" Тогда
            ПользователейОт = Формат(ТекСтрока.ПользователейОт, "ЧН=0; ЧГ=0");
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейОт + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей МЕЖДУ " + ПользователейОт + " И " + ПользователейДо + " ИЛИ
            |";
        ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "БОЛЬШЕ" Тогда
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей > " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей > " + ПользователейДо + " ИЛИ
            |";
        ИначеЕсли ВРЕГ(ТекСтрока.Условие) = "МЕНЬШЕ" Тогда
            ПользователейДо = Формат(ТекСтрока.ПользователейДо, "ЧН=0; ЧГ=0");
            ЗначениеПоля = ВРЕГ(ТекСтрока.Условие) + "_" + ПользователейДо;
            ПоляПользователей = ПоляПользователей + "
            |               КОГДА КоличествоПользователей < " + ПользователейДо + " ТОГДА """ + ЗначениеПоля + """";
            УсловияПользователей = УсловияПользователей + " КоличествоПользователей < " + ПользователейДо + " ИЛИ
            |";
        КонецЕсли;
        
    КонецЦикла;
    ПоляПользователей = ПоляПользователей + "
    |          КОНЕЦ
    |";
    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляПользователей", Лев(ПоляПользователей, СтрДлина(ПоляПользователей) - 1) + " КАК СерияПользователей");
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловияПользователей", "(" + Лев(УсловияПользователей, СтрДлина(УсловияПользователей) - 4) + ")");
    
    Если Параметры.ТолькоКлючевыеОперацииПрофиля Тогда
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
    Иначе
         Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль}",
            "ЛЕВОЕ СОЕДИНЕНИЕ
            |       КлючевыеОперации КАК Профиль"
            );
    КонецЕсли;
        
    Результат = Запрос.Выполнить();
    
    РезультатВыполнения = Новый Массив;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ЗамерВерсии = Новый Структура("ВерсияПлатформы, СерияПользователей, APDEX", Выборка.ВерсияПлатформы, Выборка.СерияПользователей, Выборка.APDEX);
        РезультатВыполнения.Добавить(ЗамерВерсии);
    КонецЦикла;
    
    Возврат РезультатВыполнения;
    
КонецФункции

#КонецОбласти

#Область ОтчетМониторПроизводительностиПлатформы

Процедура ПолучитьПроизводительностьПлатформы(Параметры) Экспорт
    
    Если Параметры.ТипАнализа = "APDEX" Тогда
        РезультатВыполнения = ПолучитьПроизводительностьПлатформыAPDEX(Параметры);
    ИначеЕсли Параметры.ТипАнализа = "Среднее время" Тогда
        РезультатВыполнения = ПолучитьПроизводительностьПлатформыСреднееВремя(Параметры);
    КонецЕсли;
               
    ПоместитьВоВременноеХранилище(РезультатВыполнения, Параметры.АдресХранилищаДиаграммаПроизводительностьПлатформы);
    
КонецПроцедуры

Функция ПолучитьПроизводительностьПлатформыAPDEX(Параметры)
    
    ПрофильКлючевыхОпераций = Параметры.ПрофильКлючевыхОпераций;
	ТолькоРелизныеПлатформы = Параметры.ТолькоРелизныеПлатформы;
	СтатусыИнформационнойБазы = Параметры.СтатусыИнформационнойБазы;
	ТолькоРелизныеВерсииКонфигураций = Параметры.ТолькоРелизныеВерсииКонфигураций;
    
    ДатаНачала = Параметры.Период.ДатаНачала;
    ДатаОкончания = Параметры.Период.ДатаОкончания;
    
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Выборка.Сборка КАК Сборка,
	               |	Выборка.РежимРаботыКонфигурации КАК РежимРаботыКонфигурации,
	               |	ВЫРАЗИТЬ((СУММА(Выборка.N_T) + СУММА(Выборка.N_T_4T) / 2) / СУММА(Выборка.ВсегоОпераций) КАК ЧИСЛО(5, 2)) КАК Значение
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПроизводительностьПлатформы.N_T КАК N_T,
	               |		ПроизводительностьПлатформы.N_T_4T КАК N_T_4T,
	               |		ПроизводительностьПлатформы.КоличествоОпераций КАК ВсегоОпераций,
	               |		ПроизводительностьПлатформы.РежимРаботыКонфигурации КАК РежимРаботыКонфигурации,
	               |		ВЫРАЗИТЬ(ПроизводительностьПлатформы.ВерсияПлатформы.ВерсияЧисло / 10000 - 0.5 КАК ЧИСЛО(12, 0)) КАК Сборка
	               |	ИЗ
	               |		РегистрСведений.ПроизводительностьПлатформы КАК ПроизводительностьПлатформы
	               |	ГДЕ
	               |		ПроизводительностьПлатформы.ПрофильКлючевыхОпераций = &ПрофильКлючевыхОпераций
				   |		И ПроизводительностьПлатформы.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
				   |		И ВЫБОР
				   |				КОГДА &ТолькоРелизныеПлатформы
				   |					ТОГДА ПроизводительностьПлатформы.ВерсияПлатформы.Релизная
				   |				ИНАЧЕ ИСТИНА
				   |			КОНЕЦ
				   |		И ВЫБОР
				   |				КОГДА &ОтборПоСтатусам
				   |					ТОГДА ПроизводительностьПлатформы.СтатусИнформационнойБазы В (&СтатусыИнформационнойБазы)
				   |				ИНАЧЕ ИСТИНА
				   |			КОНЕЦ
				   |		И ВЫБОР
				   |				КОГДА &ТолькоРелизныеВерсииКонфигураций
				   |					ТОГДА ПроизводительностьПлатформы.РелизнаяВерсияКонфигурации
				   |				ИНАЧЕ ИСТИНА
				   |			КОНЕЦ
				   |) КАК Выборка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Выборка.Сборка,
	               |	Выборка.РежимРаботыКонфигурации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Выборка.Сборка";
    
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииПлатформыЦентрМониторинга.НайтиПоНаименованию("0.0.0.0", Истина));
	Запрос.УстановитьПараметр("ПрофильКлючевыхОпераций", ПрофильКлючевыхОпераций);
	Запрос.УстановитьПараметр("ТолькоРелизныеПлатформы", ТолькоРелизныеПлатформы);
	Запрос.УстановитьПараметр("ОтборПоСтатусам", СтатусыИнформационнойБазы.Количество() > 0);
	Запрос.УстановитьПараметр("СтатусыИнформационнойБазы", СтатусыИнформационнойБазы);
	Запрос.УстановитьПараметр("ТолькоРелизныеВерсииКонфигураций", ТолькоРелизныеВерсииКонфигураций);
    
    Результат = Запрос.Выполнить();
    
    РезультатМассив = Новый Массив;
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        ЭлементМассива = Новый Структура("СборкаЧисло, СборкаСтрока, РежимРаботыКонфигурации, Значение");
        ЭлементМассива.СборкаЧисло = Выборка.Сборка;
        ЭлементМассива.СборкаСтрока = СборкаЧислоВСтроку(Выборка.Сборка);
        ЭлементМассива.РежимРаботыКонфигурации = Выборка.РежимРаботыКонфигурации;
        ЭлементМассива.Значение = Выборка.Значение;
        
        РезультатМассив.Добавить(ЭлементМассива);
        
    КонецЦикла;
    
    РезультатВыполнения = Новый Структура;
    РезультатВыполнения.Вставить("ПроизводительностьПлатформы", РезультатМассив);
    
    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПолучитьПроизводительностьПлатформыСреднееВремя(Параметры)
    
    ПрофильКлючевыхОпераций = Параметры.ПрофильКлючевыхОпераций;
	ТолькоРелизныеПлатформы = Параметры.ТолькоРелизныеПлатформы;
	СтатусыИнформационнойБазы = Параметры.СтатусыИнформационнойБазы;
	ТолькоРелизныеВерсииКонфигураций = Параметры.ТолькоРелизныеВерсииКонфигураций;
    
    ДатаНачала = Параметры.Период.ДатаНачала;
    ДатаОкончания = Параметры.Период.ДатаОкончания;
    
    Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Выборка.Сборка КАК Сборка,
	               |	Выборка.РежимРаботыКонфигурации КАК РежимРаботыКонфигурации,
	               |	ВЫРАЗИТЬ(СУММА(Выборка.ВремяВыполнения) / СУММА(Выборка.ВсегоОпераций) КАК ЧИСЛО(15, 3)) КАК Значение
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПроизводительностьПлатформы.СуммаВремениВыполнения КАК ВремяВыполнения,
	               |		ПроизводительностьПлатформы.КоличествоОпераций КАК ВсегоОпераций,
	               |		ПроизводительностьПлатформы.РежимРаботыКонфигурации КАК РежимРаботыКонфигурации,
	               |		ВЫРАЗИТЬ(ПроизводительностьПлатформы.ВерсияПлатформы.ВерсияЧисло / 10000 - 0.5 КАК ЧИСЛО(12, 0)) КАК Сборка
	               |	ИЗ
	               |		РегистрСведений.ПроизводительностьПлатформы КАК ПроизводительностьПлатформы
	               |	ГДЕ
	               |		ПроизводительностьПлатформы.ПрофильКлючевыхОпераций = &ПрофильКлючевыхОпераций
	               |		И ПроизводительностьПлатформы.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |		И ВЫБОР
	               |				КОГДА &ТолькоРелизныеПлатформы
	               |					ТОГДА ПроизводительностьПлатформы.ВерсияПлатформы.Релизная
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ
	               |		И ВЫБОР
	               |				КОГДА &ОтборПоСтатусам
	               |					ТОГДА ПроизводительностьПлатформы.СтатусИнформационнойБазы В (&СтатусыИнформационнойБазы)
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ
	               |		И ВЫБОР
	               |				КОГДА &ТолькоРелизныеВерсииКонфигураций
	               |					ТОГДА ПроизводительностьПлатформы.РелизнаяВерсияКонфигурации
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ) КАК Выборка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Выборка.Сборка,
	               |	Выборка.РежимРаботыКонфигурации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Выборка.Сборка";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииПлатформыЦентрМониторинга.НайтиПоНаименованию("0.0.0.0", Истина));
	Запрос.УстановитьПараметр("ПрофильКлючевыхОпераций", ПрофильКлючевыхОпераций);
	Запрос.УстановитьПараметр("ТолькоРелизныеПлатформы", ТолькоРелизныеПлатформы);
	Запрос.УстановитьПараметр("ОтборПоСтатусам", СтатусыИнформационнойБазы.Количество() > 0);
	Запрос.УстановитьПараметр("СтатусыИнформационнойБазы", СтатусыИнформационнойБазы);
	Запрос.УстановитьПараметр("ТолькоРелизныеВерсииКонфигураций", ТолькоРелизныеВерсииКонфигураций);

    Результат = Запрос.Выполнить();
    
    РезультатМассив = Новый Массив;
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        ЭлементМассива = Новый Структура("СборкаЧисло, СборкаСтрока, РежимРаботыКонфигурации, Значение");
        ЭлементМассива.СборкаЧисло = Выборка.Сборка;
        ЭлементМассива.СборкаСтрока = СборкаЧислоВСтроку(Выборка.Сборка);
        ЭлементМассива.РежимРаботыКонфигурации = Выборка.РежимРаботыКонфигурации;
        ЭлементМассива.Значение = Выборка.Значение;
        
        РезультатМассив.Добавить(ЭлементМассива);
        
    КонецЦикла;
    
    РезультатВыполнения = Новый Структура;
    РезультатВыполнения.Вставить("ПроизводительностьПлатформы", РезультатМассив);
    
    Возврат РезультатВыполнения;
    
КонецФункции

Процедура ПолучитьЧислоАктивныхСборок(Параметры) Экспорт
	
	ПрофильКлючевыхОпераций = Параметры.ПрофильКлючевыхОпераций;
	ТолькоРелизныеПлатформы = Параметры.ТолькоРелизныеПлатформы;
	СтатусыИнформационнойБазы = Параметры.СтатусыИнформационнойБазы;
	ТолькоРелизныеВерсииКонфигураций = Параметры.ТолькоРелизныеВерсииКонфигураций;
	ОтборПоСтатусу = СтатусыИнформационнойБазы.Количество() > 0; 
	
    ДатаНачала = Параметры.Период.ДатаНачала;
    ДатаОкончания = Параметры.Период.ДатаОкончания;
    
    Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеИнформационныхБаз.Период КАК Период,
	               |	ДанныеИнформационныхБаз.Сборка КАК Сборка,
	               |	СУММА(ДанныеИнформационныхБаз.КоличествоКонечныйОстаток) КАК КоличествоИБ
	               |ИЗ
	               |	РегистрНакопления.ДанныеИнформационныхБаз.ОстаткиИОбороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			День,
	               |			,
	               |			ВерсияПлатформы <> &ПустаяВерсия
	               |				И ВЫБОР
	               |					КОГДА &ТолькоРелизныеПлатформы
	               |						ТОГДА ВерсияПлатформы.Релизная
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &ОтборПоСтатусу
	               |						ТОГДА Статус В (&СтатусыИнформационнойБазы)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &ТолькоРелизныеВерсииКонфигураций
	               |						ТОГДА РелизнаяВерсияКонфигурации
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК ДанныеИнформационныхБаз
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеИнформационныхБаз.Период,
	               |	ДанныеИнформационныхБаз.Сборка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сборка,
	               |	Период";
    
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииПлатформыЦентрМониторинга.НайтиПоНаименованию("0.0.0.0"));
	Запрос.УстановитьПараметр("ТолькоРелизныеВерсииКонфигураций", ТолькоРелизныеВерсииКонфигураций);
	Запрос.УстановитьПараметр("ТолькоРелизныеПлатформы", ТолькоРелизныеПлатформы);
	Запрос.УстановитьПараметр("СтатусыИнформационнойБазы", СтатусыИнформационнойБазы);
	Запрос.УстановитьПараметр("ОтборПоСтатусу", ОтборПоСтатусу);
	
	Результат = Запрос.Выполнить();
    
    РезультатМассив = Новый Массив;
    Выборка = Результат.Выбрать();
	ПредыдущаяДата = Дата(3999,1,1);
	ЭлементМассива = Неопределено;
    Пока Выборка.Следующий() Цикл
		
		Если (Выборка.Период - ПредыдущаяДата)/86400 > 1 И ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			ПропущеннаяДата = ПредыдущаяДата;
			Пока ПропущеннаяДата < Выборка.Период - 86400 Цикл
				ПропущенныйЭлементМассива = Новый Структура("Период, СборкаЧисло, СборкаСтрока, КоличествоИБ");
				ЗаполнитьЗначенияСвойств(ПропущенныйЭлементМассива, ЭлементМассива);
				ПропущеннаяДата = ПропущеннаяДата + 86400;
				ПропущенныйЭлементМассива.Вставить("Период", ПропущеннаяДата);	
				РезультатМассив.Добавить(ПропущенныйЭлементМассива);
			КонецЦикла;
		КонецЕсли;
		
        ЭлементМассива = Новый Структура("Период, СборкаЧисло, СборкаСтрока, КоличествоИБ");
        ЭлементМассива.Период = Выборка.Период;
        ЭлементМассива.СборкаЧисло = Выборка.Сборка;
        ЭлементМассива.СборкаСтрока = СборкаЧислоВСтроку(Выборка.Сборка);
        ЭлементМассива.КоличествоИБ = Выборка.КоличествоИБ;
		
		ПредыдущаяДата = Выборка.Период;
        
        РезультатМассив.Добавить(ЭлементМассива);
        
    КонецЦикла;
    
    РезультатВыполнения = Новый Структура;
    РезультатВыполнения.Вставить("АктивныхСборок", РезультатМассив);
            
    ПоместитьВоВременноеХранилище(РезультатВыполнения, Параметры.АдресХранилищаДиаграммаАктивныхСборок);
    
КонецПроцедуры

Процедура ПолучитьЧислоАктивныхПоВерсияПлатформы(Параметры) Экспорт
	
	ПрофильКлючевыхОпераций = Параметры.ПрофильКлючевыхОпераций;
	ТолькоРелизныеПлатформы = Параметры.ТолькоРелизныеПлатформы;
	СтатусыИнформационнойБазы = Параметры.СтатусыИнформационнойБазы;
	ТолькоРелизныеВерсииКонфигураций = Параметры.ТолькоРелизныеВерсииКонфигураций;
	ОтборПоСтатусу = СтатусыИнформационнойБазы.Количество() > 0; 
	
    ДатаНачала = Параметры.Период.ДатаНачала;
    ДатаОкончания = Параметры.Период.ДатаОкончания;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеИнформационныхБаз.ВерсияПлатформы КАК ВерсияПлатформы,
	               |	ДанныеИнформационныхБаз.РежимРаботыКонфигурации КАК РежимРаботыКонфигурации,
	               |	СУММА(ДанныеИнформационныхБаз.КоличествоОстаток) КАК КоличествоИБ
	               |ИЗ
	               |	РегистрНакопления.ДанныеИнформационныхБаз.Остатки(
	               |			&ДатаОкончания,
	               |			ВерсияПлатформы <> &ПустаяВерсия
	               |				И ВЫБОР
	               |					КОГДА &ТолькоРелизныеПлатформы
	               |						ТОГДА ВерсияПлатформы.Релизная
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И РежимРаботыКонфигурации В (&РежимыРаботыКонфигурации)
	               |				И ВЫБОР
	               |					КОГДА &ОтборПоСтатусу
	               |						ТОГДА Статус В (&СтатусыИнформационнойБазы)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &ТолькоРелизныеВерсииКонфигураций
	               |						ТОГДА РелизнаяВерсияКонфигурации
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК ДанныеИнформационныхБаз
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеИнформационныхБаз.ВерсияПлатформы,
	               |	ДанныеИнформационныхБаз.РежимРаботыКонфигурации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДанныеИнформационныхБаз.ВерсияПлатформы.ВерсияЧисло";
    
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
    Запрос.УстановитьПараметр("ПустаяВерсия", Справочники.ВерсииПлатформыЦентрМониторинга.НайтиПоНаименованию("0.0.0.0", Истина));
	Запрос.УстановитьПараметр("ТолькоРелизныеВерсииКонфигураций", ТолькоРелизныеВерсииКонфигураций);
	Запрос.УстановитьПараметр("ТолькоРелизныеПлатформы", ТолькоРелизныеПлатформы);
	Запрос.УстановитьПараметр("СтатусыИнформационнойБазы", СтатусыИнформационнойБазы);
	Запрос.УстановитьПараметр("ОтборПоСтатусу", ОтборПоСтатусу);
	
	РежимыРаботыКонфигурации = Новый Массив;
    РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.F);
    РежимыРаботыКонфигурации.Добавить(Перечисления.РежимРаботыКонфигурации.S);
    Запрос.УстановитьПараметр("РежимыРаботыКонфигурации", РежимыРаботыКонфигурации);
    
    Результат = Запрос.Выполнить();
    
    РезультатМассив = Новый Массив;
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        ЭлементМассива = Новый Структура("ВерсияПлатформы, РежимРаботыКонфигурации, КоличествоИБ");
        ЭлементМассива.ВерсияПлатформы = Выборка.ВерсияПлатформы;
        ЭлементМассива.РежимРаботыКонфигурации = Выборка.РежимРаботыКонфигурации;
        ЭлементМассива.КоличествоИБ = Выборка.КоличествоИБ;
        
        РезультатМассив.Добавить(ЭлементМассива);
        
    КонецЦикла;
    
    РезультатВыполнения = Новый Структура;
    РезультатВыполнения.Вставить("АктивныеСборкиПоВерсиямПлатформы", РезультатМассив);
            
    ПоместитьВоВременноеХранилище(РезультатВыполнения, Параметры.АдресХранилищаДиаграммаЧислоАктивныхПоВерсиям);
    
КонецПроцедуры

Процедура ПолучитьЧислоАктивныхПоВерсиямКонфигурации(Параметры) Экспорт
    
	ПрофильКлючевыхОпераций = Параметры.ПрофильКлючевыхОпераций;
	ТолькоРелизныеПлатформы = Параметры.ТолькоРелизныеПлатформы;
	СтатусыИнформационнойБазы = Параметры.СтатусыИнформационнойБазы;
	ТолькоРелизныеВерсииКонфигураций = Параметры.ТолькоРелизныеВерсииКонфигураций;
	ОтборПоСтатусу = СтатусыИнформационнойБазы.Количество() > 0; 
	
    ДатаНачала = Параметры.Период.ДатаНачала;
    ДатаОкончания = Параметры.Период.ДатаОкончания;
    
    Запрос = Новый Запрос;
    
   	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеИнформационныхБаз.Конфигурация КАК Конфигурация,
	               |	СУММА(ДанныеИнформационныхБаз.КоличествоОстаток) КАК КоличествоИБ
	               |ИЗ
	               |	РегистрНакопления.ДанныеИнформационныхБаз.Остатки(
	               |			&ДатаОкончания,
	               |			ВЫБОР
	               |					КОГДА &ТолькоРелизныеПлатформы
	               |						ТОГДА ВерсияПлатформы.Релизная
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &ОтборПоСтатусу
	               |						ТОГДА Статус В (&СтатусыИнформационнойБазы)
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |				И ВЫБОР
	               |					КОГДА &ТолькоРелизныеВерсииКонфигураций
	               |						ТОГДА РелизнаяВерсияКонфигурации
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК ДанныеИнформационныхБаз
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеИнформационныхБаз.Конфигурация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КоличествоИБ УБЫВ";
    
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ТолькоРелизныеВерсииКонфигураций", ТолькоРелизныеВерсииКонфигураций);
	Запрос.УстановитьПараметр("ТолькоРелизныеПлатформы", ТолькоРелизныеПлатформы);
	Запрос.УстановитьПараметр("СтатусыИнформационнойБазы", СтатусыИнформационнойБазы);
	Запрос.УстановитьПараметр("ОтборПоСтатусу", ОтборПоСтатусу);
	
	Результат = Запрос.Выполнить();
    
    РезультатМассив = Новый Массив;
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        ЭлементМассива = Новый Структура("Конфигурация, КоличествоИБ");
        ЭлементМассива.Конфигурация = Выборка.Конфигурация;
        ЭлементМассива.КоличествоИБ = Выборка.КоличествоИБ;
        
        РезультатМассив.Добавить(ЭлементМассива);
        
    КонецЦикла;
    
    РезультатВыполнения = Новый Структура;
    РезультатВыполнения.Вставить("АктивныеСборкиПоВерсиямКонфигурации", РезультатМассив);
            
    ПоместитьВоВременноеХранилище(РезультатВыполнения, Параметры.АдресХранилищаДиаграммаЧислоАктивныхПоКонфигурациям);
    
КонецПроцедуры

Функция СборкаЧислоВСтроку(СборкаЧисло)
    
    СборкаСтрока = Формат(СборкаЧисло, "ЧГ=0");
    
    Первое = Формат(Число(Лев(СборкаСтрока, СтрДлина(СборкаСтрока) - 8)), "ЧГ=0");
    Второе = Формат(Число(Сред(СборкаСтрока, 2, 4)), "ЧГ=0");
    И_Компот = Формат(Число(Прав(СборкаСтрока, 4)), "ЧГ=0");
    
    СборкаСтрока = Первое + "." + Второе + "." + И_Компот;
    
    Возврат СборкаСтрока;
    
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроверкаРелизностиВерсийМетоды

#Область ПолучениеОбновленийПрограммыКлиентСервер

Функция НовыйИнформацияОДоступномОбновленииКонфигурации()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьИнформацияВОтвете"     , Ложь);
	Результат.Вставить("Версия"                    , "");
	Результат.Вставить("МинимальнаяВерсияПлатформы", "");
	Результат.Вставить("ФайлыДляЗагрузки"          , Новый Массив);
	Результат.Вставить("РазмерОбновления"          , 0);
	Результат.Вставить("URLНовоеВВерсии"           , "");
	Результат.Вставить("URLПорядокОбновления"      , "");
	Результат.Вставить("ИдентификаторВерсии"       , "");
	Результат.Вставить("ДоступноОбновление"        , Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИнформацияОДоступномОбновленииПлатформы()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьИнформацияВОтвете"     , Ложь);
	Результат.Вставить("Версия"                 , "");
	Результат.Вставить("ИдентификаторФайла"     , "");
	Результат.Вставить("РазмерОбновления"       , 0);
	Результат.Вставить("URLОсобенностиПерехода" , "");
	Результат.Вставить("URLСтраницыПлатформы"   , "");
	Результат.Вставить("РекомендуетсяПереход"   , Ложь);
	Результат.Вставить("ДоступноОбновление"     , Ложь);
	Результат.Вставить("ОбязательностьУстановки", 2);
	
	Возврат Результат;
	
КонецФункции

Функция InfoRequestJSON(
	ИмяТекущейПрограммы,
	ВерсияТекущейПрограммы,
	ИмяНовойПрограммы,
	НомерРедакцииНовойПрограммы,
	ВерсияПлатформы,
	СценарийОбновления,
	ДопПараметрыЗапроса)
	
	// {
	//  programName: String,
	//  versionNumber: String,
	//  platformVersion: String,
	//  programNewName: String,
	//  redactionNumber: String,
	//  updateType: NewConfigurationAndOrPlatform / NewProgramOrRedaction / NewPlatform,
	//  additionalParameters: [
	//    {
	//      key: String,
	//      value: String
	//    }
	//  ]
	//}
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programName");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИмяТекущейПрограммы));
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("versionNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ВерсияТекущейПрограммы);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("platformVersion");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ВерсияПлатформы);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programNewName");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяНовойПрограммы);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("redactionNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(НомерРедакцииНовойПрограммы);
	
	Если СценарийОбновления = "РабочееОбновление" Тогда
		ИмяСценарияВСервисе = "NewConfigurationAndOrPlatform";
	ИначеЕсли СценарийОбновления = "ПереходНаДругуюПрограммуИлиРедакцию" Тогда
		ИмяСценарияВСервисе = "NewProgramOrRedaction";
	Иначе
		ИмяСценарияВСервисе = "NewPlatform";
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("updateType");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИмяСценарияВСервисе);
	
	//ЗаписатьДополнительныеПараметрыЗапроса(ДопПараметрыЗапроса, ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Процедура ЗаполнитьИнформациюОбОбновленииИзInfoResonseИзJSON(Результат, ТелоJSON)
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "errorName" Тогда
				
				Результат.ИмяОшибки = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
				
			ИначеЕсли ИмяСвойства = "errorMessage" Тогда
				
				Результат.ИнформацияОбОшибке = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
				Результат.Сообщение          = Результат.ИнформацияОбОшибке;
				
			ИначеЕсли ИмяСвойства = "configurationUpdateResponse" Тогда
				
				ЗаполнитьИнформациюОбОбновленииКонфигурацииИзJSON(Результат, ЧтениеОтвета);
				
			ИначеЕсли ИмяСвойства = "platformUpdateResponse" Тогда
				
				ЗаполнитьИнформациюОбОбновленииПлатформыИзJSON(Результат, ЧтениеОтвета);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
КонецПроцедуры

Функция ЗначениеСвойстваJSON(ЧтениеОтвета, ЗначениеПоУмолчанию = Неопределено)
	
	ЧтениеОтвета.Прочитать();
	Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
		Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Число
		Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
		Возврат ЧтениеОтвета.ТекущееЗначение;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Процедура ЗаполнитьИнформациюОбОбновленииКонфигурацииИзJSON(Результат, ЧтениеОтвета)
	
	ОбновлениеКомКонф = Результат.Конфигурация;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			
			Возврат;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "configurationVersion" Тогда
				ОбновлениеКомКонф.ЕстьИнформацияВОтвете = Истина;
				ОбновлениеКомКонф.Версия = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "size" Тогда
				ОбновлениеКомКонф.РазмерОбновления = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ИмяСвойства = "platformVersion" Тогда
				ОбновлениеКомКонф.МинимальнаяВерсияПлатформы = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "updateInfoUrl" Тогда
				ОбновлениеКомКонф.URLНовоеВВерсии = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "howToUpdateInfoUrl" Тогда
				ОбновлениеКомКонф.URLПорядокОбновления = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "programVersionUin" Тогда
				ОбновлениеКомКонф.ИдентификаторВерсии = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "upgradeSequence" Тогда
				
				ЧтениеОтвета.Прочитать();
				Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
					Пока ЧтениеОтвета.Прочитать() Цикл
						Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
							Прервать;
						ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
							ОбновлениеКомКонф.ФайлыДляЗагрузки.Добавить(ЧтениеОтвета.ТекущееЗначение);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбОбновленииПлатформыИзJSON(Результат, ЧтениеОтвета)
	
	ОбновлениеКомПл = Результат.Платформа;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			
			Возврат;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "platformVersion" Тогда
				ОбновлениеКомПл.ЕстьИнформацияВОтвете = Истина;
				ОбновлениеКомПл.Версия = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "transitionInfoUrl" Тогда
				ОбновлениеКомПл.URLОсобенностиПерехода = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "releaseUrl" Тогда
				ОбновлениеКомПл.URLСтраницыПлатформы = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "distributionUin" Тогда
				ОбновлениеКомПл.ИдентификаторФайла = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "size" Тогда
				ОбновлениеКомПл.РазмерОбновления = ЗначениеСвойстваJSON(ЧтениеОтвета, 0);
			ИначеЕсли ИмяСвойства = "recommended" Тогда
				ОбновлениеКомПл.РекомендуетсяПереход = ЗначениеСвойстваJSON(ЧтениеОтвета, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыВеб

// Загружает содержимое из Интернет по протоколу HTTP(S)
// с использованием методов GET, POST или PUT.
//
Функция ЗагрузитьСодержимоеИзИнтернет(
	Знач URL,
	Знач Логин = Неопределено,
	Знач Пароль = Неопределено,
	ДопПараметры = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Содержимое"        , Неопределено);
	Результат.Вставить("КодСостояния"      , 0);
	Результат.Вставить("ФорматОтвета"      , 0);

	// Формат ответа: 0 - имя файла ответа, 1 - как строка, 2 - как двоичные данные.
	// Метод: "GET", "POST" или "PUT".
	// ДанныеДляОбработки: данные, передаваемые методом POST.
	// ФорматДанныхДляОбработки: 0 - имя файла, 1 как строка, 2 - как двоичные данные.
	// Заголовки - заголовки запроса.
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ФорматОтвета"            , 0);
	ПараметрыПолучения.Вставить("Метод"                   , "GET");
	ПараметрыПолучения.Вставить("ДанныеДляОбработки"      , Неопределено);
	ПараметрыПолучения.Вставить("ФорматДанныхДляОбработки", 0);
	ПараметрыПолучения.Вставить("Заголовки"               , Неопределено);
	ПараметрыПолучения.Вставить("ИмяФайлаОтвета"          , Неопределено);
	ПараметрыПолучения.Вставить("Таймаут"                 , 30);
	ПараметрыПолучения.Вставить("НастройкиПрокси"         , Неопределено);
	
	Если ДопПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПолучения, ДопПараметры);
	КонецЕсли;
	
	Результат.ФорматОтвета = ПараметрыПолучения.ФорматОтвета;
	
	КоличествоПеренаправлений  = 0;
	МаксКолвоПеренаправлений   = 7;
	Перенаправления            = Новый Массив;
	ВыполненныеПеренаправления = Новый Соответствие;
	ПроксиПоСхемам             = Новый Соответствие;
	ЗащищенноеСоединениеКэш    = Неопределено;
	
	URLДляПолучения = URL;
	HTTPЗапрос = Новый HTTPЗапрос;
	Если ПараметрыПолучения.Заголовки <> Неопределено Тогда
		HTTPЗапрос.Заголовки = ПараметрыПолучения.Заголовки;
	КонецЕсли;
	ТелоУстановлено = Ложь;
	Ответ = Неопределено;
	Пока КоличествоПеренаправлений < МаксКолвоПеренаправлений Цикл

		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLДляПолучения);
		Если СтруктураURI.Схема <> "https" Тогда
			ЗащищенноеСоединение = Неопределено;
		Иначе
			Если ЗащищенноеСоединениеКэш = Неопределено Тогда
				ЗащищенноеСоединениеКэш = НовыйЗащищенноеСоединение();
			КонецЕсли;
			ЗащищенноеСоединение = ЗащищенноеСоединениеКэш;
		КонецЕсли;

		Если НЕ ПустаяСтрока(СтруктураURI.Логин) Тогда
			ЛогинДляПолучения  = СтруктураURI.Логин;
			ПарольДляПолучения = СтруктураURI.Пароль;
		Иначе
			ЛогинДляПолучения  = Логин;
			ПарольДляПолучения = Пароль;
		КонецЕсли;

		Если СтруктураURI.Порт = Неопределено ИЛИ ПустаяСтрока(СтруктураURI.Порт) Тогда
			Порт = ?(ЗащищенноеСоединение = Неопределено, 80, 443);
		Иначе
			Порт = Число(СтруктураURI.Порт);
		КонецЕсли;

		Прокси = ПроксиПоСхемам.Получить(СтруктураURI.Схема);
		Если Прокси = Неопределено Тогда
			//Если ПараметрыПолучения.НастройкиПрокси = Неопределено Тогда
			//	Прокси = ПолучитьПрокси(СтруктураURI.Схема);
			//Иначе
				Прокси = СформироватьИнтернетПрокси(ПараметрыПолучения.НастройкиПрокси, СтруктураURI.Схема);
			//КонецЕсли;
			ПроксиПоСхемам.Вставить(СтруктураURI.Схема, Прокси);
		КонецЕсли;

		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			Порт,
			ЛогинДляПолучения,
			ПарольДляПолучения,
			Прокси,
			ПараметрыПолучения.Таймаут,
			ЗащищенноеСоединение);

		Попытка

			HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;

			Если ПараметрыПолучения.Метод = "GET" Тогда
				Ответ = Соединение.Получить(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
			ИначеЕсли ПараметрыПолучения.Метод = "HEAD" Тогда
				Ответ = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
			Иначе

				Если НЕ ТелоУстановлено Тогда

					Если ПараметрыПолучения.ДанныеДляОбработки <> Неопределено Тогда

						Если ПараметрыПолучения.ФорматДанныхДляОбработки = 0 Тогда

							HTTPЗапрос.УстановитьИмяФайлаТела(ПараметрыПолучения.ДанныеДляОбработки);

						ИначеЕсли ПараметрыПолучения.ФорматДанныхДляОбработки = 1 Тогда

							HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыПолучения.ДанныеДляОбработки);

						Иначе

							HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыПолучения.ДанныеДляОбработки);

						КонецЕсли;

					КонецЕсли;

					ТелоУстановлено = Истина;

				КонецЕсли;

				Если ПараметрыПолучения.Метод = "PUT" Тогда
					Ответ = Соединение.Записать(HTTPЗапрос);
				Иначе
					// POST
					Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
				КонецЕсли;

			КонецЕсли;

		Исключение
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось загрузить содержимое (%1). %2'"),
					URL,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
				Перенаправления);
			Возврат Результат;
		КонецПопытки;

		Результат.КодСостояния = Ответ.КодСостояния;

		Если Ответ.КодСостояния = 301 // 301 Moved Permanently
			ИЛИ Ответ.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
			ИЛИ Ответ.КодСостояния = 303 // 303 See Other by GET
			ИЛИ Ответ.КодСостояния = 307 Тогда // 307 Temporary Redirect

			КоличествоПеренаправлений = КоличествоПеренаправлений + 1;

			Если КоличествоПеренаправлений > МаксКолвоПеренаправлений Тогда
				УстановитьОписаниеОшибки(
					Результат,
					"ServerError",
					НСтр("ru = 'Превышено количество перенаправлений.'"),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка сервера при получении файла (%1). Превышено количество перенаправлений (%2).'"),
						URL,
						МаксКолвоПеренаправлений),
					Перенаправления);
				Возврат Результат;
			Иначе
				Location = Ответ.Заголовки.Получить("Location");
				Если Location = Неопределено Тогда
					УстановитьОписаниеОшибки(
						Результат,
						"ServerError",
						НСтр("ru = 'Некорректное перенаправление.'"),
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".'"),
							Ответ.КодСостояния,
							URL),
						Перенаправления);
					Возврат Результат;
				Иначе
					Location = СокрЛП(Location);
					Если ПустаяСтрока(Location) Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru = 'Некорректное перенаправление.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".'"),
								Ответ.КодСостояния,
								URL),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					Если ВыполненныеПеренаправления.Получить(Location) <> Неопределено Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru = 'Циклическое перенаправление.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Циклическое перенаправление (%3).'"),
								Ответ.КодСостояния,
								URL,
								Location),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					ВыполненныеПеренаправления.Вставить(Location, Истина);
					URLДляПолучения = Location;

					Перенаправления.Добавить(Строка(Ответ.КодСостояния) + ": " + Location);

				КонецЕсли;
			КонецЕсли;

		Иначе

			Прервать;

		КонецЕсли;

	КонецЦикла;

	Если ПараметрыПолучения.ФорматОтвета = 0 Тогда
		Результат.Содержимое = Ответ.ПолучитьИмяФайлаТела();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 1 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 2 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		Результат.Содержимое = Ответ;
	КонецЕсли;
	
	// Обработка ответа
	Если Ответ.КодСостояния < 200 Или Ответ.КодСостояния >= 300 Тогда

		// Анализ ошибки
		Если Ответ.КодСостояния = 407 Тогда

			// Ошибка подключения - не пройдена аутентификация на прокси-сервере.
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				НСтр("ru = 'Ошибка аутентификации на прокси-сервере.'"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния < 200
			ИЛИ Ответ.КодСостояния >= 300
			И Ответ.КодСостояния < 400 Тогда

			// Формат ответа сервера не поддерживается.
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Некорректный ответ сервера (%1).'"),
					Ответ.КодСостояния),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера при получении файла (%1). Некорректный (неподдерживаемый) ответ (%2).
						|Тело ответа: %3'"),
					URL,
					Ответ.КодСостояния,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния >= 400 И Ответ.КодСостояния < 500 Тогда

			// Ошибка клиентской части - некорректный запрос.
			УстановитьОписаниеОшибки(
				Результат,
				"ClientError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка (%1) при выполнении запроса к ресурсу.'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		Иначе

			// Ошибка сервера - 5хх
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Код ошибки: %1.'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера (%1) при обработке запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция НовыйЗащищенноеСоединение()

	Возврат Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);

КонецФункции

Функция СформироватьИнтернетПрокси(НастройкаПроксиСервера, Протокол)
	
	Если НастройкаПроксиСервера = Неопределено Тогда
		// Системные установки прокси-сервера.
		Возврат Неопределено;
	КонецЕсли;	
	
	ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
	Если Не ИспользоватьПрокси Тогда
		// Не использовать прокси-сервер.
		Возврат Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
	Если ИспользоватьСистемныеНастройки Тогда
		// Системные настройки прокси-сервера.
		Возврат Новый ИнтернетПрокси(Истина);
	КонецЕсли;
			
	// Настройки прокси-сервера, заданные вручную.
	Прокси = Новый ИнтернетПрокси;
	
	// Определение адреса и порта прокси-сервера.
	ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
	ПроксиПоПротоколу = Неопределено;
	Если ТипЗнч(ДополнительныеНастройки) = Тип("Соответствие") Тогда
		ПроксиПоПротоколу = ДополнительныеНастройки.Получить(Протокол);
	КонецЕсли;
	
	Если ТипЗнч(ПроксиПоПротоколу) = Тип("Структура") Тогда
		Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт,
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
	Иначе
		Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"], 
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
	КонецЕсли;
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
	
	АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
	Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
		Для каждого АдресИсключения Из АдресаИсключений Цикл
			Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Процедура УстановитьОписаниеОшибки(Результат, КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, Перенаправления)

	Результат.КодОшибки          = КодОшибки;
	Результат.СообщениеОбОшибке  = СообщениеОбОшибке;
	ДопСообщение = "";
	Если КодОшибки = "ConnectError" Тогда
		ДопСообщение = НСтр("ru = 'Ошибка при подключении к серверу.'");

	ИначеЕсли КодОшибки = "ServerError" Тогда
		ДопСообщение = НСтр("ru = 'На сервере возникла внутренняя ошибка при обработке запроса.'");

	ИначеЕсли КодОшибки = "ClientError" Тогда
		ДопСообщение = НСтр("ru = 'Некорректный запрос.'");

	ИначеЕсли КодОшибки = "InternalError" Тогда
		ДопСообщение = НСтр("ru = 'Внутренняя ошибка.'");

	ИначеЕсли КодОшибки = "LoginError" Тогда
		ДопСообщение = НСтр("ru = 'Ошибка аутентификации на сервере.'");

	КонецЕсли;

	Результат.СообщениеОбОшибке =
		?(ПустаяСтрока(ДопСообщение), "", ДопСообщение + " ")
		+ СообщениеОбОшибке;

	Результат.ИнформацияОбОшибке = ИнформацияОбОшибке;

	Если Перенаправления.Количество() > 0 Тогда
		Результат.ИнформацияОбОшибке = Результат.ИнформацияОбОшибке + Символы.ПС
			+ НСтр("ru = 'Перенаправления:'") + Символы.ПС
			+ СтрСоединить(Перенаправления, ", " + Символы.ПС);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
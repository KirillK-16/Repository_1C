
#Область ПрограммныйИнтерфейс

// Выполняет знакомство агента с ИБ.
//
Функция HandshakePOST(Запрос) Экспорт
    
    Ответ = Новый HTTPСервисОтвет(200);
    
	Данные = ПолучитьДанные(Запрос.ПолучитьТелоКакСтроку());
            	
	Если Данные["idAgent"] <> Неопределено Тогда
		УникальныйИдентификаторАгента = Новый УникальныйИдентификатор(Данные["idAgent"]);
	Иначе
		УникальныйИдентификаторАгента = Неопределено;
	КонецЕсли;
	
	ВерсияПакета = Данные["version"];
	Если ВерсияПакета = Неопределено Тогда
		ВерсияПакета = "1.0.0.1";
	КонецЕсли;
	
	КлючСообщения = ПолучитьКлючСообщения(ВерсияПакета);
	
	Хост = Данные["computerInfo"]["host"];
	ХостВРег = ВРег(Хост);   
	
	Если УникальныйИдентификаторАгента = Неопределено Тогда
		
		Ответ = Новый HTTPСервисОтвет(406);
		Ответ.УстановитьТелоИзСтроки(КлючСообщения + " No agent ID specified.");
		АгентКИППереопределяемый.ОбработатьОшибкуПриЗнакомстве(Перечисления.ТипыОшибокАгента.ОтсутствуетИдентификаторАгента, Данные);
		
		Возврат Ответ;
		
	КонецЕсли;
	
	ВерсияКорректна = Истина;
	АгентКИППереопределяемый.ПриПроверкеВерсииАгента(ВерсияПакета, ВерсияКорректна);
	
	Если Не ВерсияКорректна Тогда
		
		Ответ = Новый HTTPСервисОтвет(406);
		СтрокаОтвета = СтрШаблон(КлючСообщения + " Version agent %1 is not supported.", ВерсияПакета);
		Ответ.УстановитьТелоИзСтроки(СтрокаОтвета);
		
		Возврат Ответ;
	КонецЕсли;
	
	АгентКИП = Справочники.АгентыКИП.СоздатьЭлементПоУникальномуИдентификатору(УникальныйИдентификаторАгента, ХостВРег, ВерсияПакета);
	РегистрыСведений.АктивностьАгентовКИП.ЗаписатьИнформациюОбАктивностиАгента(АгентКИП, ТекущаяУниверсальнаяДата());			
	Данные.Вставить("refAgent", АгентКИП);
	Если ВРЕГ(АгентКИП.Хост) <> ХостВРег Тогда
		
		Ответ = Новый HTTPСервисОтвет(406);
		Ответ.УстановитьТелоИзСтроки(КлючСообщения + " Equipment and agent have different hosts.");
		АгентКИППереопределяемый.ОбработатьОшибкуПриЗнакомстве(Перечисления.ТипыОшибокАгента.ИмяХостаАгентаНеСоответствуетПолученному, Данные);
		
		Возврат Ответ;
		
    КонецЕсли;
    
    АгентКИППереопределяемый.ПередЗнакомством(Данные, Ответ);
    Если Ответ.КодСостояния <> 200 Тогда
        Возврат Ответ;
    КонецЕсли;

	
	АгентКИППереопределяемый.ОбработатьЗапросНаЗнакомство(Данные, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Обрабатывает данные от агента.
//
Функция InputDataPOST(Запрос) Экспорт
	
	МодульВнутренниеЗамеры = ОбщийМодуль("ВнутренниеЗамеры");
	Если МодульВнутренниеЗамеры <> Неопределено Тогда
		Замер = МодульВнутренниеЗамеры.НачатьЗамер("AgentETP.InputDataPOST");
	КонецЕсли;
	
	Данные = ПолучитьДанные(Запрос.ПолучитьТелоКакСтроку());
    
    НачатьТранзакцию();
        
    Попытка
	
		Ответ = ОбработатьДанныеАгентаКИП(Данные);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
        Ответ = Новый HTTPСервисОтвет(500);
		ОписаниеОшибки = ОписаниеОшибки();                  
        Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки);
		
	КонецПопытки;
	
	Если МодульВнутренниеЗамеры <> Неопределено Тогда
		ДопПараметры = Новый Соответствие;
		ДопПараметры.Вставить("Объект ЦКК", Данные["idAgent"]);
	    МодульВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбработатьДанныеАгентаКИП(Данные)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.АгентыКИП");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("УникальныйИдентификаторАгентаСтрока", Данные["idAgent"]);
	БлокировкаДанных.Заблокировать();
    
    УникальныйИдентификаторАгента = Новый УникальныйИдентификатор(Данные["idAgent"]);
	
	ВерсияПакета = Данные["version"];
	КлючСообщения = ПолучитьКлючСообщения(ВерсияПакета);
	
	ПараметрыАгента = Справочники.АгентыКИП.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторАгента);
	Если ПараметрыАгента.Версия <> ВерсияПакета Тогда
		Справочники.АгентыКИП.ИзменитьВерсиюАгента(ПараметрыАгента.Ссылка, ВерсияПакета);
		ПараметрыАгента.Версия = ВерсияПакета;
	КонецЕсли;
	
	Если ПараметрыАгента.Ссылка = Неопределено Тогда
		
		Ответ = Новый HTTPСервисОтвет(406);
		Ответ.УстановитьТелоИзСтроки(КлючСообщения + " No found agent by id " + УникальныйИдентификаторАгента + ".");
		
		Возврат Ответ
		
	КонецЕсли;
	
	РегистрыСведений.АктивностьАгентовКИП.ЗаписатьИнформациюОбАктивностиАгента(ПараметрыАгента.Ссылка, ТекущаяУниверсальнаяДата());
	
	АгентКИППереопределяемый.ПередОбработкойДанных(Данные, ПараметрыАгента, Ответ);
	Если Ответ.КодСостояния <> 200 Тогда
		Возврат Ответ;
	КонецЕсли;
	
	// Обработка данных.
	ВерсияМеньше_1_0_14 = ВерсияВЧисло(ВерсияПакета) < ВерсияВЧисло("1.0.14.0");
	
	Для Каждого ТипКоманды из Перечисления.ТипыКомандАгентаКИП Цикл
		ServicesData = Данные["ServicesData"];
		ИмяКоманды = ВРег(ТипКоманды);
		Если ServicesData <> Неопределено Тогда
			ДанныеКоманд = ServicesData[ИмяКоманды];
			Если ДанныеКоманд <> Неопределено Тогда	
				ВыполненныеКоманды = ДанныеКоманд["executedCommands"];
				Если ВыполненныеКоманды <> Неопределено Тогда
					Для Каждого ВыполненнаяКоманда Из ВыполненныеКоманды Цикл
						Если ВерсияМеньше_1_0_14 Тогда // версия меньше 1.0.14.0.
							ОбработатьВыполненнуюКоманду_До_1_0_14_0(ВыполненнаяКоманда, ТипКоманды);							
						Иначе
							ОбработатьВыполненнуюКоманду(ВыполненнаяКоманда);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	АгентКИППереопределяемый.ПриОбработкеДанныхАгентаКИП(Данные, ПараметрыАгента);
	
	// Формирование ответа.
	
	ТелоОтвета = Новый Соответствие;
	ТелоОтвета.Вставить("ServicesData", Новый Соответствие);
	
	Для Каждого ТипКоманды из Перечисления.ТипыКомандАгентаКИП Цикл
		ДобавитьКомандуВТелоОтвета(ТелоОтвета, ТипКоманды, ПараметрыАгента);
	КонецЦикла;
	
	Если ПараметрыАгента.ПериодОтправкиДанных <> 10 Тогда
		Ключ = ВРег(Перечисления.ТипыКомандАгентаКИП.MainService);
		MAIN_SERVICE = ТелоОтвета["ServicesData"][Ключ];
		Если MAIN_SERVICE = Неопределено Тогда
			MAIN_SERVICE = Новый Соответствие;	
		КонецЕсли;	
		MAIN_SERVICE.Вставить("SLEEP_SEND", ПараметрыАгента.ПериодОтправкиДанных);
		ТелоОтвета["ServicesData"].Вставить(Ключ, MAIN_SERVICE);
	КонецЕсли;
	
	Если ВерсияМеньше_1_0_14 Тогда // версия меньше 1.0.14.0.
		ТелоОтвета["ServicesData"].Вставить("REMOTE_CONTROL", Новый Структура("Enable", Ложь));
		ТелоОтвета["ServicesData"].Вставить("GET_SYSTEM_INFO", Ложь);
		ТелоОтвета.Вставить("DUMPS_COLLECT", Ложь);
	КонецЕсли;
	
	АгентКИППереопределяемый.ПередОтправкойОтветаАгенту(ТелоОтвета, Данные, ПараметрыАгента);
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(СформироватьДанныеДляОтправки(ТелоОтвета));
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьДанные(Текст)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Текст);
	
	Данные = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	Возврат Данные;
	
КонецФункции

Функция СформироватьДанныеДляОтправки(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКлючСообщения(ВерсияПакета)
	
	ВерсияМеньше_1_0_14_7 = ВерсияВЧисло(ВерсияПакета) < ВерсияВЧисло("1.0.14.7");
	Если ВерсияМеньше_1_0_14_7 Тогда
		КлючСообщения = "QMC message.";
	Иначе
		КлючСообщения = "ETP message.";
	КонецЕсли;
	
	Возврат КлючСообщения;
	
КонецФункции

Функция ВерсияВЧисло(Версия)
	Попытка
		Если НЕ ПустаяСтрока(Версия) Тогда
			ВерсияСтроки = СтрРазделить(Версия, ".");
						
			Возврат Число(ВерсияСтроки[0]) * 1000000000000000
			+ Число(ВерсияСтроки[1]) * 100000000000
			+ Число(ВерсияСтроки[2]) * 10000000
			+ Число(ВерсияСтроки[3]);
		Иначе
			Возврат 0;
		КонецЕсли;
	Исключение
		Возврат -1;
	КонецПопытки;
КонецФункции

Процедура ОбработатьВыполненнуюКоманду_До_1_0_14_0(ВыполненнаяКоманда, ТипКоманды)
	Если ТипКоманды = Перечисления.ТипыКомандАгентаКИП.RemoteControl Тогда
		РегистрыСведений.КомандыАгентаКИП.УстановитьСтатусКоманды(Новый УникальныйИдентификатор(ВыполненнаяКоманда), Перечисления.СтатусыКомандАгентаКИП.Выполнена);
	ИначеЕсли ТипКоманды = Перечисления.ТипыКомандАгентаКИП.PerformanceMonitor Тогда
		Результат = "";
		Если ВыполненнаяКоманда.Значение["supportedCounters"] <> Неопределено Тогда 
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
			ЗаписатьJSON(ЗаписьJSON, ВыполненнаяКоманда.Значение["supportedCounters"]);
			Результат = ЗаписьJSON.Закрыть();	
		КонецЕсли;
		РегистрыСведений.КомандыАгентаКИП.УстановитьСтатусРезультатКоманды(Новый УникальныйИдентификатор(ВыполненнаяКоманда.Ключ), Перечисления.СтатусыКомандАгентаКИП.Выполнена, Результат);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьВыполненнуюКоманду(ВыполненнаяКоманда)
	Статус = ВыполненнаяКоманда.Значение["status"];
	Описание = ВыполненнаяКоманда.Значение["description"];
	Если Статус <> Неопределено Тогда	
		СтатусКоманды = ?(Статус = 0, Перечисления.СтатусыКомандАгентаКИП.ВыполненаСОшибкой, Перечисления.СтатусыКомандАгентаКИП.Выполнена);
		РегистрыСведений.КомандыАгентаКИП.УстановитьСтатусРезультатКоманды(Новый УникальныйИдентификатор(ВыполненнаяКоманда.Ключ), СтатусКоманды, Описание);
    Иначе
        ВызватьИсключение НСтр("ru='У команды нет поля ""status""!'");
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКомандуВТелоОтвета(ТелоОтвета, ТипКоманды, ПараметрыАгента)
	КомандаОтправкиJSON = РегистрыСведений.КомандыАгентаКИП.ПолучитьКомандуОтправки(ПараметрыАгента.Ссылка, ТипКоманды, Перечисления.СтатусыКомандАгентаКИП.Отправлена);
	ИмяКоманды = ВРег(ТипКоманды);
	ServicesData = ТелоОтвета["ServicesData"];
	
	КомандаОтправки = Неопределено;
	Если КомандаОтправкиJSON <> Неопределено Тогда
		
		Если ServicesData = Неопределено Тогда
			ServicesData = Новый Соответствие;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(КомандаОтправкиJSON);
		КомандаОтправки = ПрочитатьJSON(ЧтениеJSON, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомандаОтправки) Тогда
		Если ВерсияВЧисло(ПараметрыАгента.Версия) < ВерсияВЧисло("1.0.14.0") Тогда
			ServicesData.Вставить(ИмяКоманды, КомандаОтправки);
		Иначе
			КомандаСоответствие = Новый Соответствие;
			КомандаСоответствие.Вставить("command", КомандаОтправки);
			ServicesData.Вставить(ИмяКоманды, КомандаСоответствие);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ОбщийМодуль(Имя)
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		Модуль = Неопределено;
	КонецЕсли;
	
	Возврат Модуль;
КонецФункции

#КонецОбласти



#Область ПрограммныйИнтерфейс

// Процедура обработки регламентного задания
//
// Параметры:
//  КонтрольнаяПроцедура - СправочникСсылка.КонтрольныеПроцедуры
//
Процедура ЗапускКонтрольнойПроцедуры(КонтрольнаяПроцедураСсылка) Экспорт
	
	Общий.ПриНачалеВыполненияРегламентногоЗадания();
    
    Если КонтрольнаяПроцедураСсылка = Неопределено Тогда
        ИсправлениеОшибкиНеопределено();
        ВызватьИсключение НСтр("ru='Ошибка в параметрах регламентного задания. Выполнена попытка исправления.'");
    КонецЕсли;
    
	Если КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений() Тогда
        
        // Контроль подключений выполняется отдельным регламентным заданием "КонтрольПодключений"
        
    ИначеЕсли КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий() Тогда
        
        УникальныйИдентификаторЗадания = КонтрольнаяПроцедураСсылка.УникальныйИдентификатор();
		Отбор = Новый Структура("Ключ, Состояние", УникальныйИдентификаторЗадания, СостояниеФоновогоЗадания.Активно);
		ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Запуск = Ложь;
		Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
			Запуск = Истина;
        КонецЕсли;
        
        Если Запуск Тогда
            ПараметрыЗапуска = Новый Массив;
			ПараметрыЗапуска.Добавить(КонтрольнаяПроцедураСсылка);
            ФоновыеЗадания.Выполнить("КонтрольРегламентныхЗаданийСервер.ВыполнитьАнализ", ПараметрыЗапуска, УникальныйИдентификаторЗадания, КонтрольнаяПроцедураСсылка.Наименование);
        Иначе
            ПараметрыИнцидента = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольВыполненияРегламентныхЗаданий(КонтрольнаяПроцедураСсылка, Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийОшибка);
            ТекстПредупреждения = НСтр("ru = 'Не завершился контроль от предыдущего запуска.'");
            ИнцидентыСервер.ОткрытьИнцидент(
                ПараметрыИнцидента.НаименованиеТипаИнцидента,
                ПараметрыИнцидента.КодИнцидента,
                КонтрольнаяПроцедураСсылка.ОбъектКонтроля,
                ,
                ТекстПредупреждения,
                1,
                ,
                ,
                Перечисления.УровниИнцидентов.Ошибка);
            Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедураСсылка, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноЕстьПроблемы, ТекстПредупреждения);    
        КонецЕсли;
        
    ИначеЕсли КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольПроизводительности() Тогда
        
        УникальныйИдентификаторЗадания = КонтрольнаяПроцедураСсылка.УникальныйИдентификатор();
		Отбор = Новый Структура("Ключ, Состояние", УникальныйИдентификаторЗадания, СостояниеФоновогоЗадания.Активно);
		ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Запуск = Ложь;
		Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
			Запуск = Истина;
        КонецЕсли;
        
        Если Запуск Тогда
            ПараметрыЗапуска = Новый Массив;
            ПараметрыЗапуска.Добавить(КонтрольнаяПроцедураСсылка);
            ФоновыеЗадания.Выполнить("КонтрольПроизводительности.ВыполнитьАнализ", ПараметрыЗапуска, УникальныйИдентификаторЗадания, Строка(КонтрольнаяПроцедураСсылка));
            ПараметрыИнцидента = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольПроизводительности(КонтрольнаяПроцедураСсылка, Справочники.ТипыЗадачКонтрольПроизводительности.НеЗавершиласьПредыдущаяЗагрузкаФайлов);
            ИнцидентыСервер.ЗакрытьИнцидент(ПараметрыИнцидента.НаименованиеТипаИнцидента, ПараметрыИнцидента.КодИнцидента, Истина);
        Иначе
            
            НавигационнаяСсылкаИсточника = Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(КонтрольнаяПроцедураСсылка), Строка(КонтрольнаяПроцедураСсылка));
            
            ПараметрыИнцидента = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольПроизводительности(КонтрольнаяПроцедураСсылка, Справочники.ТипыЗадачКонтрольПроизводительности.НеЗавершиласьПредыдущаяЗагрузкаФайлов);
            ТекстПредупреждения = НСтр("ru = 'Не завершился контроль от предыдущего запуска.'");
            ИнцидентыСервер.ОткрытьИнцидент(
                ПараметрыИнцидента.НаименованиеТипаИнцидента,
                ПараметрыИнцидента.КодИнцидента,
                КонтрольнаяПроцедураСсылка.ОбъектКонтроля,
                ,
                ТекстПредупреждения,
                1,
                ,
                ,
                Перечисления.УровниИнцидентов.Предупреждение,
                ,НавигационнаяСсылкаИсточника);
            
            Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедураСсылка, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноЕстьПроблемы, ТекстПредупреждения);    
        КонецЕсли;
        
    ИначеЕсли КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти() Тогда
        
        УникальныйИдентификаторЗадания = КонтрольнаяПроцедураСсылка.УникальныйИдентификатор();
		Отбор = Новый Структура("Ключ, Состояние", УникальныйИдентификаторЗадания, СостояниеФоновогоЗадания.Активно);
		ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Запуск = Ложь;
		Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
			Запуск = Истина;
        КонецЕсли;
        
        Если Запуск Тогда
            ПараметрыЗапуска = Новый Массив;
            ПараметрыЗапуска.Добавить(КонтрольнаяПроцедураСсылка);
            ФоновыеЗадания.Выполнить("КонтрольПамятиСервер.ВыполнитьАнализ", ПараметрыЗапуска, УникальныйИдентификаторЗадания, Строка(КонтрольнаяПроцедураСсылка));
        КонецЕсли;
    ИначеЕсли КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы() Тогда
        
        УникальныйИдентификаторЗадания = КонтрольнаяПроцедураСсылка.УникальныйИдентификатор();
        Отбор = Новый Структура("Ключ, Состояние", УникальныйИдентификаторЗадания, СостояниеФоновогоЗадания.Активно);
        ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Запуск = Ложь;
		Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
			Запуск = Истина;
        КонецЕсли;
        
        Если Запуск Тогда
            ПараметрыЗапуска = Новый Массив;
            ПараметрыЗапуска.Добавить(КонтрольнаяПроцедураСсылка);
            ФоновыеЗадания.Выполнить("СборДамповСервер.ВыполнитьАнализ", ПараметрыЗапуска, УникальныйИдентификаторЗадания, Строка(КонтрольнаяПроцедураСсылка));
        КонецЕсли;
        
    ИначеЕсли КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.АнализВызововКластера1С() Тогда
        
        УникальныйИдентификаторЗадания = КонтрольнаяПроцедураСсылка.УникальныйИдентификатор();
        Отбор = Новый Структура("Ключ, Состояние", УникальныйИдентификаторЗадания, СостояниеФоновогоЗадания.Активно);
        ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Запуск = Ложь;
		Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
			Запуск = Истина;
        КонецЕсли;
        
        Если Запуск Тогда
            ПараметрыЗапуска = Новый Массив;
            ПараметрыЗапуска.Добавить(КонтрольнаяПроцедураСсылка);
            ФоновыеЗадания.Выполнить("АнализВызововКластера1ССервер.ВыполнитьАнализ", ПараметрыЗапуска, УникальныйИдентификаторЗадания, Строка(КонтрольнаяПроцедураСсылка));
        КонецЕсли;
        
    ИначеЕсли КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.МониторингСистемныхОшибок() Тогда
        
        УникальныйИдентификаторЗадания = КонтрольнаяПроцедураСсылка.УникальныйИдентификатор();
        Отбор = Новый Структура("Ключ, Состояние", УникальныйИдентификаторЗадания, СостояниеФоновогоЗадания.Активно);
        ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Запуск = Ложь;
		Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
			Запуск = Истина;
        КонецЕсли;
        
        Если Запуск Тогда
            ПараметрыЗапуска = Новый Массив;
            ПараметрыЗапуска.Добавить(КонтрольнаяПроцедураСсылка);
            ФоновыеЗадания.Выполнить("КонтрольЧислаИсключенийСервер.ВыполнитьАнализ", ПараметрыЗапуска, УникальныйИдентификаторЗадания, Строка(КонтрольнаяПроцедураСсылка));
        КонецЕсли;
        
    ИначеЕсли КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольНагрузочныхТестов() Тогда
        
        УникальныйИдентификаторЗадания = КонтрольнаяПроцедураСсылка.УникальныйИдентификатор();
        Отбор = Новый Структура("Ключ, Состояние", УникальныйИдентификаторЗадания, СостояниеФоновогоЗадания.Активно);
        ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Запуск = Ложь;
		Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
			Запуск = Истина;
        КонецЕсли;
        
        Если Запуск Тогда
            ПараметрыЗапуска = Новый Массив;
            ПараметрыЗапуска.Добавить(КонтрольнаяПроцедураСсылка);
            ФоновыеЗадания.Выполнить("КонтрольНагрузочныхТестовСервер.ВыполнитьАнализ", ПараметрыЗапуска, УникальныйИдентификаторЗадания, Строка(КонтрольнаяПроцедураСсылка));
        КонецЕсли;
        
    ИначеЕсли КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.ОценкаПользователей() Тогда
        
        УникальныйИдентификаторЗадания = КонтрольнаяПроцедураСсылка.УникальныйИдентификатор();
        Отбор = Новый Структура("Ключ, Состояние", УникальныйИдентификаторЗадания, СостояниеФоновогоЗадания.Активно);
        ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Запуск = Ложь;
		Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
			Запуск = Истина;
        КонецЕсли;
        
        Если Запуск Тогда
            ПараметрыЗапуска = Новый Массив;
            ПараметрыЗапуска.Добавить(КонтрольнаяПроцедураСсылка);
            ФоновыеЗадания.Выполнить("ОценкаПользователейСервер.ВыполнитьАнализ", ПараметрыЗапуска, УникальныйИдентификаторЗадания, Строка(КонтрольнаяПроцедураСсылка));
        КонецЕсли;
        
    ИначеЕсли КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.ВнешнийКонтрольЦКК() Тогда
        
        УникальныйИдентификаторЗадания = КонтрольнаяПроцедураСсылка.УникальныйИдентификатор();
        Отбор = Новый Структура("Ключ, Состояние", УникальныйИдентификаторЗадания, СостояниеФоновогоЗадания.Активно);
        ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Запуск = Ложь;
		Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
			Запуск = Истина;
        КонецЕсли;
        
        Если Запуск Тогда
            ПараметрыЗапуска = Новый Массив;
            ПараметрыЗапуска.Добавить(КонтрольнаяПроцедураСсылка);
            ФоновыеЗадания.Выполнить("ВнешнийКонтрольЦККСервер.ВыполнитьАнализ", ПараметрыЗапуска, УникальныйИдентификаторЗадания, Строка(КонтрольнаяПроцедураСсылка));
        КонецЕсли;
        
    КонецЕсли;
	
КонецПроцедуры

// Зафиксировать состояние контрольной процедуры
//
// Параметры:
//  КонтрольнаяПроцедураСсылка - СправочникСсылка.КонтрольныеПроцедуры
//  Состояние - Перечисление.СостоянияКонтрольныхПроцедур
//
Процедура УстановитьСостояниеКонтрольнойПроцедуры(КонтрольнаяПроцедураСсылка, Состояние) Экспорт

	МенеджерЗапретов = РегистрыСведений.СостоянияКонтрольныхПроцедур.СоздатьМенеджерЗаписи();
	МенеджерЗапретов.КонтрольнаяПроцедура = КонтрольнаяПроцедураСсылка;
	МенеджерЗапретов.Состояние = Состояние;
	МенеджерЗапретов.Записать();
	
КонецПроцедуры

// Удаляет по отбору регламентные задания из базы данных
//
// Параметры:
//  ИмяПоля - Строка, ключ отбора
//  Значение - Произвольный, значение отбора для поиска регламентного задания
//
Процедура УдалитьРегламентныеЗадания(ИмяПоля, Значение) Экспорт
	
	Задания = ПолучитьРегламентныеЗадания(ИмяПоля, Значение);
	
	Для Каждого Задание Из Задания Цикл
		Задание.Удалить();
	КонецЦикла
	
КонецПроцедуры

// Изменяет параметры регламентного задания
//
// Параметры:
//  ИмяПоля - Строка, ключ отбора
//  Значение - Произвольный, значение отбора для поиска регламентного задания
//  Параметры - Структура
//
Процедура ОбновитьПараметрыЗадания(ИмяПоля, Значение, Параметры) Экспорт
	
	Задания = ПолучитьРегламентныеЗадания(ИмяПоля, Значение);
	Для Каждого Задание Из Задания Цикл
		Для Каждого Параметр Из Параметры Цикл
			Задание[Параметр.Ключ] = Параметр.Значение;
		КонецЦикла;
		Задание.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПроцедураЕстьПроблемы(КонтрольнаяПроцедура) Экспорт
	
	Если КонтрольнаяПроцедура.Владелец.ИмяБизнесПроцесса = "СборДампов" Тогда
		Возврат СборДамповСервер.ВсеНеИсправленныеДампыСервера(КонтрольнаяПроцедура.ОбъектКонтроля).Следующий();
	КонецЕсли;
	
	ВыборкаСостояний = РегистрыСведений.СостоянияКонтрольныхПроцедур.Выбрать(Новый Структура("КонтрольнаяПроцедура", КонтрольнаяПроцедура));
	Возврат ВыборкаСостояний.Следующий() И (
		ВыборкаСостояний.Состояние = Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноЕстьПроблемы 
			ИЛИ
		ВыборкаСостояний.Состояние = Перечисления.СостоянияКонтрольныхПроцедур.ПрерванаЕстьПроблемы 
		); 
	
КонецФункции

Функция ПроцедураНеизвестноеСостояние(КонтрольнаяПроцедура) Экспорт
	
	ВыборкаСостояний = РегистрыСведений.СостоянияКонтрольныхПроцедур.Выбрать(Новый Структура("КонтрольнаяПроцедура", КонтрольнаяПроцедура));
	Возврат НЕ ВыборкаСостояний.Следующий() ИЛИ 
		ВыборкаСостояний.Состояние = Перечисления.СостоянияКонтрольныхПроцедур.НеизвестноеСостояние; 
	
КонецФункции

// Получает регламентные задания из базы данных 
// по значению полей отбора
//
// Параметры:
//  ИмяПоля - Строка, ключ отбора
//  Значение - Произвольный, значение отбора для поиска регламентного задания
//
// Возвращаемое значение:
//  Массив - найденные регламентные задания
//
Функция ПолучитьРегламентныеЗадания(ИмяПоля, Значение) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить(ИмяПоля, Значение);
	
	Возврат РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураОтбора);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИсправлениеОшибкиНеопределено()
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Владелец,
    |   Ссылка,
    |   КлючРегламентногоЗадания
    |ИЗ
    |   Справочник.КонтрольныеПроцедуры
    |";
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        Ключ = Строка(Выборка.Владелец.УникальныйИдентификатор()) + "_" + Строка(Выборка.Ссылка.УникальныйИдентификатор());
        Отбор = Новый Структура("Ключ", Ключ);
        РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
        
        Если РегЗадания.Количество() = 1 Тогда
            
            РегЗадание = РегЗадания[0];
            КонтрольнаяПроцедура = РегЗадание.Параметры[0];
			Если КонтрольнаяПроцедура = Неопределено Тогда
				РегЗадание.Параметры[0] = Выборка.Ссылка;
				РегЗадание.Записать();
            КонецЕсли;
                        
        КонецЕсли;
        
	КонецЦикла;
        
КонецПроцедуры

#КонецОбласти
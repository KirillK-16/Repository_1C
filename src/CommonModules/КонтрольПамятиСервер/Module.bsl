
#Область ПрограммныйИнтерфейс

Процедура МониторингКластеров1С() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
    
    РезультатЗапросаНастройкиМониторинга = НастройкиМониторинга();
    
    Выборка = РезультатЗапросаНастройкиМониторинга.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        Кластер1С = Выборка.Кластер1С;
        КонтрольнаяПроцедура = Выборка.КонтрольнаяПроцедура;
        
        УИДЗадания = КонтрольнаяПроцедура.УникальныйИдентификатор();
        Отбор = Новый Структура("Ключ, Состояние", УИДЗадания, СостояниеФоновогоЗадания.Активно);
        ФоновыеЗаданияМониторинга = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
        
        Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
        Если ФоновыеЗаданияМониторинга.Количество() = 0 Тогда
            Параметры = Новый Массив;
            Параметры.Добавить(Кластер1С);
			Параметры.Добавить(КонтрольнаяПроцедура);
            ФоновыеЗадания.Выполнить("КонтрольПамятиСервер.МониторингКластера1С", Параметры, УИДЗадания, "Мониторинг кластера 1С """ + Кластер1С.Наименование + """.");
            КипВнешнийКомпонент.Пауза(100, Инструменты);
        КонецЕсли;
                
    КонецЦикла;
        
КонецПроцедуры

Процедура МониторингКластера1С(Кластер1С, КонтрольнаяПроцедура, Завершить = Ложь) Экспорт
    
    ЗаписьЖурналаРегистрации("МониторингКластера1С",,,,"СТАРТ");
    ЗаписьЖурналаРегистрации("МониторингКластера1С",,,,Кластер1С.Подключение.ТипПодключения);
    
    Если Кластер1С.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        
        ВерсияДанныхКластер = "";
        ВерсияДанныхКонтрольнаяПроцедура = "";
        
        ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
        МоментЗаписи = ГСЧ.СлучайноеЧисло(40, 50);
        
        ДатаНачала = Формат(ТекущаяДата(), "ДФ=ггггММддЧЧмм") + МоментЗаписи;
        
        Выполнять = Истина;
        Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
        ТипПодключения = Кластер1С.Подключение.ТипПодключения;
        НомераРабочихПроцессов = Новый Соответствие;
        ИнформационныеБазы = Новый Соответствие;
        СчетчикиКластера = Новый Соответствие;
        РабочиеПроцессы = Новый Соответствие;
        РабочиеСервера = Новый Соответствие;
        
        Попытка
            АдминистрированиеСервера = Кластер_1С.АдминистрированиеСервера(Кластер1С.Подключение);
            Кластер_1С.ЗакрытьИнцидентАдминистрированиеСервера(Кластер1С);
        Исключение
            //TODO инцидент, если подключение не удалось.
            //TODO инцидент, если подключение не удалось ко всем.
            Кластер_1С.ОткрытьИнцидентАдминистрированиеСервера(Кластер1С, ИнформацияОбОшибке().Описание);
            ВызватьИсключение(ИнформацияОбОшибке().Описание);
            Возврат;
        КонецПопытки;
        
        НастройкиКластера = НастройкиКластераСоздать(Кластер1С);
        НастройкиКластераОбновить(НастройкиКластера);
        
        Если НЕ НастройкиКластера.Настройки.Мониторинг И НЕ Завершить Тогда
            Возврат;
        КонецЕсли;
                    
        Если НЕ ЗначениеЗаполнено(Кластер1С.УникальныйИдентификаторОбъекта) Тогда
            УникальныйИдентификаторОбъекта = Кластер_1С.УникальныйИдентификаторКластера(ТипПодключения, АдминистрированиеСервера, НастройкиКластера.Настройки.ПортКластера);
            Кластер_1СОбъект = Кластер1С.ПолучитьОбъект();
            Кластер_1СОбъект.УникальныйИдентификаторОбъекта = УникальныйИдентификаторОбъекта;
            Кластер_1СОбъект.Записать();
        КонецЕсли;
                
        АдминистрированиеКластер = Кластер_1С.АдминистрированиеКластер(ТипПодключения, АдминистрированиеСервера, Кластер1С.УникальныйИдентификаторОбъекта);
        
        НастройкиКонтрольнаяПроцедура = НастройкиКонтрольнаяПроцедура(КонтрольнаяПроцедура);
        НастройкиКонтрольнаяПроцедураОбновить(НастройкиКонтрольнаяПроцедура);
        
        НастройкиРабочиеСервера = НастройкиРабочиеСервера();
        НастройкиИнформационныеБазы = НастройкиИнформационныеБазы();

        Попытка
            Кластер_1С.АутентификацияКластера(ТипПодключения, АдминистрированиеКластер, НастройкиКластера.Настройки.АдминистраторКластера, НастройкиКластера.Настройки.ПарольАдминистратораКластера);
            Инцидент = Инцидент();
            Кластер_1С.ЗакрытьИнцидентКластераАутентификация(Кластер1С, Инцидент);
        Исключение
            Инцидент = Инцидент(ИнформацияОбОшибке().Описание);
            Кластер_1С.ОткрытьИнцидентКластераАутентификация(Кластер1С, Инцидент);
            Возврат;
        КонецПопытки;
                
        Пока Выполнять Цикл
            
            Выполнять = НЕ Завершить;
            
            Результат = Новый Соответствие;
            Результат.Вставить("ИмяКластера", НастройкиКластера.Настройки.ИмяКластера);
            
            СвойстваКластера = Кластер_1С.СвойстваКластер(ТипПодключения, АдминистрированиеКластер, Истина);            
            Результат.Вставить("Свойства", СвойстваКластера);
            Результат.Вставить("НастройкиКластера", НастройкиКластера);
            
            РезультатРабочиеСервера = ЗагрузитьРабочиеСервера(ТипПодключения, АдминистрированиеКластер, НомераРабочихПроцессов, НастройкиРабочиеСервера, РабочиеСервера, НастройкиКЛастера.Кластер1С);
            ЗавершенныхРабочихПроцессовСервера = ЗагрузитьСчетчикиРабочихПроцессов(РабочиеПроцессы, РезультатРабочиеСервера["РабочиеПроцессы"]);
            ЗагрузитьСчетчикиЗавершенныхРабочихПроцессовСервера(РабочиеСервера, ЗавершенныхРабочихПроцессовСервера); 
            
            Соединения = Кластер_1С.Соединения(ТипПодключения, АдминистрированиеКластер, Истина);
            РезультатСоединения = Новый Соответствие;
            Для Каждого Соединение Из Соединения Цикл
                РезультатСоединения.Вставить(Строка(Соединение.ИдентификаторСоединения), Соединение);
            КонецЦикла;
                        
            Результат.Вставить("РабочиеСервера", РабочиеСервера);
            Результат.Вставить("НастройкиРабочиеСервера", НастройкиРабочиеСервера);
            Результат.Вставить("РабочиеПроцессы", РабочиеПроцессы);
            Результат.Вставить("Соединения", РезультатСоединения);
            
            Попытка
                ЗагрузитьИнформационныеБазы(ТипПодключения, АдминистрированиеКластер, ИнформационныеБазы, НастройкиИнформационныеБазы, Кластер1С);
                Результат.Вставить("ИнформационныеБазы", ИнформационныеБазы);
                Результат.Вставить("НастройкиИнформационныеБазы", НастройкиИнформационныеБазы);
                
                ЗагрузитьСчетчикиКластера(Результат, СчетчикиКластера);
                Результат.Вставить("СчетчикиКластера", СчетчикиКластера);
            Исключение
                ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
                // Запланированное поведение при обновлении с 2.1.2 на 2.1.3.
                // Т.к. административной аутентификации нет, мы должны продолжить мониторить процессы и сеансы.
            КонецПопытки;
            
            ЗаписатьСчетчики = Ложь;
            ТекущаяДата = ТекущаяДата();
            ТекДата = Формат(ТекущаяДата, "ДФ=ггггММддЧЧммсс");
            Если ТекДата > ДатаНачала Тогда
                ЗаписатьСчетчики = Истина;
                ДатаНачала = Формат(ТекущаяДата + 60, "ДФ=ггггММддЧЧмм") + МоментЗаписи;
            КонецЕсли;
            
            ЗаписатьРезультат(Кластер1С, Результат, ЗаписатьСчетчики, НастройкиКонтрольнаяПроцедура);
            
            Если ЗаписатьСчетчики Тогда
                
                СчетчикиКластера = Новый Соответствие;
                                
                Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
                    ИнформационнаяБаза.Значение.Вставить("Счетчики", Новый Соответствие);
                КонецЦикла;
                
                Для Каждого РабочийСервер Из РабочиеСервера Цикл
                    РабочийСервер.Значение.Вставить("Счетчики", Новый Соответствие);
                КонецЦикла;
                                
                Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
                    РабочийПроцесс.Значение.Вставить("Счетчики", Новый Соответствие);
                КонецЦикла;
                                
            КонецЕсли;
            
            КипВнешнийКомпонент.Пауза(5000, Инструменты);
            
            НастройкиКластераОбновить(НастройкиКластера);
            НастройкиКонтрольнаяПроцедураОбновить(НастройкиКонтрольнаяПроцедура);
            
        КонецЦикла;
        
    КонецЕсли;
    
    ЗаписьЖурналаРегистрации("МониторингКластера1С",,,,"ФИНИШ");
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Настройки

Функция НастройкиКластераСоздать(Кластер1С)
    
    НастройкиКластера = Новый Структура;
    НастройкиКластера.Вставить("Кластер1С", Кластер1С);
    НастройкиКластера.Вставить("Настройки", Новый Структура);
    НастройкиКластера.Вставить("НастройкиКонтроля", Новый Соответствие);
    НастройкиКластера.Вставить("Запрос", ЗапросВерсияДанныхКластер(Кластер1С));
    НастройкиКластера.Вставить("ВерсияДанных", "");
    
    Возврат НастройкиКластера;
    
КонецФункции

Процедура НастройкиКластераОбновить(Настройки)
    
    ВерсияДанныхТекущая = ВерсияДанных(Настройки.Запрос);
    
    Если ВерсияДанныхТекущая <> Настройки.ВерсияДанных Тогда
        
        Настройки.Настройки = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Настройки.Кластер1С);
        Настройки.НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(Настройки.Кластер1С);
        
        Настройки.ВерсияДанных = ВерсияДанныхТекущая;
        
    КонецЕсли;
    
КонецПроцедуры

Функция НастройкиКонтрольнаяПроцедура(КонтрольнаяПроцедура)
    
    НастройкиКонтрольнаяПроцедура = Новый Структура;
    НастройкиКонтрольнаяПроцедура.Вставить("КонтрольнаяПроцедура", КонтрольнаяПроцедура);
    НастройкиКонтрольнаяПроцедура.Вставить("Настройки", Новый Структура);
    НастройкиКонтрольнаяПроцедура.Вставить("Запрос", ЗапросВерсияДанныхКонтрольнаяПроцедура(КонтрольнаяПроцедура)); 
    НастройкиКонтрольнаяПроцедура.Вставить("ВерсияДанных", "");
    
    Возврат НастройкиКонтрольнаяПроцедура;
    
КонецФункции

Процедура НастройкиКонтрольнаяПроцедураОбновить(Настройки)
    
    ВерсияДанныхТекущая = ВерсияДанных(Настройки.Запрос);
    
    Если ВерсияДанныхТекущая <> Настройки.ВерсияДанных Тогда
        Настройки.Настройки = РегистрыСведений.НастройкиКонтрольПамяти.ПрочитатьНастройки(Настройки.КонтрольнаяПроцедура);
        Настройки.ВерсияДанных = ВерсияДанныхТекущая;
    КонецЕсли;
    
КонецПроцедуры

Функция НастройкиРабочиеСервера()
    
    НастройкиРабочиеСервера = Новый Соответствие;
    
    Возврат НастройкиРабочиеСервера;
    
КонецФункции

Функция НастройкиИнформационныеБазы()
    
    НастройкиИнформационныеБазы = Новый Соответствие;
    
    Возврат НастройкиИнформационныеБазы;
    
КонецФункции

Функция НастройкиРабочегоСервера(РабочийСервер)
    
    НастройкиРабочегоСервера = Новый Структура;
    НастройкиРабочегоСервера.Вставить("РабочийСервер", РабочийСервер);
    НастройкиРабочегоСервера.Вставить("Настройки", Новый Структура);
    НастройкиРабочегоСервера.Вставить("НастройкиКонтроля", Новый Соответствие);
    НастройкиРабочегоСервера.Вставить("Запрос", ЗапросВерсияДанныхРабочийСервер(РабочийСервер));
    НастройкиРабочегоСервера.Вставить("ВерсияДанных", "");
    
    Возврат НастройкиРабочегоСервера;
    
КонецФункции

Функция НастройкиИнформационнойБазы(ИнформационнаяБаза)
    
    НастройкиИнформационнаяБаза = Новый Структура;
    НастройкиИнформационнаяБаза.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
    НастройкиИнформационнаяБаза.Вставить("Настройки", Новый Структура);
    НастройкиИнформационнаяБаза.Вставить("НастройкиКонтроля", Новый Соответствие);
    НастройкиИнформационнаяБаза.Вставить("Запрос", ЗапросВерсияДанныхИнформационнаяБаза(ИнформационнаяБаза));
    НастройкиИнформационнаяБаза.Вставить("ВерсияДанных", "");
    
    Возврат НастройкиИнформационнаяБаза;
    
КонецФункции

Процедура НастройкиРабочиеСервераОбновить(Настройки, РабочиеСервера, Кластер1С)
    
    Для Каждого РабочийСервер Из РабочиеСервера Цикл
        
        НастройкиРабочегоСервера = Настройки[РабочийСервер["УникальныйИдентификаторОбъекта"]];
        Если НастройкиРабочегоСервера = Неопределено Тогда
            
            РабочийСерверСсылка = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуРабочийСервер(РабочийСервер["УникальныйИдентификаторОбъекта"]);
            
            Если РабочийСерверСсылка = Справочники.ОбъектыКонтроля.ПустаяСсылка() Тогда
                
                Оборудование = НайтиОборудование(РабочийСервер["Хост"], Кластер1С.ПлощадкаЭксплуатации);
                РабочийСерверСсылка = НайтиРабочийСерверПоОборудованиюБезИдентификатора(Оборудование, Кластер1С.ПлощадкаЭксплуатации);
                
                Если РабочийСерверСсылка <> Справочники.ОбъектыКонтроля.ПустаяСсылка() Тогда
                    
                    РабочийСерверОбъект = РабочийСерверСсылка.ПолучитьОбъект();
                    РабочийСерверОбъект.УникальныйИдентификаторОбъекта = РабочийСервер["УникальныйИдентификаторОбъекта"];
                    РабочийСерверОбъект.Записать();
                    
                Иначе
                    
                    Если Оборудование = Неопределено Тогда
                        Оборудование = Новый Соответствие;
                        Оборудование.Вставить("description", РабочийСервер["Хост"]);
                        Оборудование.Вставить("host", РабочийСервер["Хост"]);
                        Оборудование.Вставить("languageOS", "Английский");
                        
                        Роли = Новый Массив;
                        Роли.Добавить(Справочники.РолиОборудования.РабочийСервер1С);
                        Оборудование.Вставить("role", Роли);
                        
                    КонецЕсли;
                    
                    СоздатьРабочийСервер(Кластер1С, Оборудование, РабочийСервер); 
                    РабочийСерверСсылка = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуРабочийСервер(РабочийСервер["УникальныйИдентификаторОбъекта"]);                
                    
                КонецЕсли;
                
            КонецЕсли;
                        
            НастройкиРабочегоСервера = НастройкиРабочегоСервера(РабочийСерверСсылка);
            Настройки.Вставить(РабочийСерверСсылка["УникальныйИдентификаторОбъекта"], НастройкиРабочегоСервера); 
            
        КонецЕсли;
        
        НастройкиРабочегоСервераОбновить(НастройкиРабочегоСервера);
        
    КонецЦикла;
    
КонецПроцедуры

Функция НайтиРабочийСерверПоОборудованиюБезИдентификатора(Оборудование, ПлощадкаЭксплуатации)
    
    РабочийСерверСсылка = Справочники.ОбъектыКонтроля.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ОбъектыКонтроля.Ссылка
    |ИЗ
    |   РегистрСведений.ПараметрыРабочихСерверов КАК Параметры
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ОбъектыКонтроля КАК ОбъектыКонтроля
    |ПО
    |   ОбъектыКонтроля.Ссылка = Параметры.ОбъектКонтроля
    |   И ОбъектыКонтроля.ПлощадкаЭксплуатации = &ПлощадкаЭксплуатации
    |   И ОбъектыКонтроля.УникальныйИдентификаторОбъекта = &ПустаяСтрока
    |ГДЕ
    |   Параметры.Оборудование = &Оборудование
    |";
    
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    Запрос.УстановитьПараметр("Оборудование", Оборудование);
    Запрос.УстановитьПараметр("ПустаяСтрока", "");
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    
    Если Выборка.Количество() = 1 Тогда
        Выборка.Следующий();
        РабочийСерверСсылка = Выборка.Ссылка;
    КонецЕсли;
        
    Возврат РабочийСерверСсылка;
    
КонецФункции

Функция НайтиОборудование(Хост, ПлощадкаЭксплуатации)
    
    Оборудование = Неопределено;
    
    ОборудованиеМассив = Справочники.Оборудование.НайтиПоХостуВПлощадке(Хост, ПлощадкаЭксплуатации);
    Если ОборудованиеМассив.Количество() = 1 Тогда
        Оборудование = ОборудованиеМассив[0];
    ИначеЕсли ОборудованиеМассив.Количество() > 1 Тогда
        ВызватьИсключение "В площадке """ + ПлощадкаЭксплуатации + """ найдено несколько оборудований с хостом """ + Хост + """!";
    КонецЕсли;
    
    Возврат Оборудование;
    
КонецФункции

Процедура НастройкиИнформационныеБазыОбновить(Настройки, ИнформационныеБазы)
    
    Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
        
        Если ИнформационнаяБаза.Значение["АдминистрированиеИнформационнаяБаза"] <> Неопределено Тогда
            
            ИнформационнаяБазаСтруктура = АдминистрированиеКластераRAS.КонвертироватьИнформационнаяБаза(ИнформационнаяБаза.Значение["АдминистрированиеИнформационнаяБаза"]);
            Свойства = РегистрыСведений.ПараметрыИнформационныхБаз.КонвертироватьПараметры(ИнформационнаяБазаСтруктура, Перечисления.ТипыПараметровКластер1С.RAS, Перечисления.ТипыПараметровКластер1С.ЦКК);
            
            НастройкиИнформационнойБазы = Настройки[Свойства["УникальныйИдентификаторОбъекта"]];
            Если НастройкиИнформационнойБазы = Неопределено Тогда
                ИнформационнаяБазаСсылка = ИнформационнаяБаза.Значение["Ссылка"];
                НастройкиИнформационнойБазы = НастройкиИнформационнойБазы(ИнформационнаяБазаСсылка);
                Настройки.Вставить(Свойства["УникальныйИдентификаторОбъекта"], НастройкиИнформационнойБазы);
            КонецЕсли;
            НастройкиИнформационнойБазы.Вставить("Свойства", Свойства);
            
            НастройкиИнформационнойБазыОбновить(НастройкиИнформационнойБазы);
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура НастройкиРабочегоСервераОбновить(Настройки)
    
    ВерсияДанныхТекущая = ВерсияДанных(Настройки.Запрос);
    
    Если ВерсияДанныхТекущая <> Настройки.ВерсияДанных Тогда
        
        Настройки.Настройки = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(Настройки.РабочийСервер);
        Настройки.НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(Настройки.РабочийСервер);
        
        Настройки.ВерсияДанных = ВерсияДанныхТекущая;
        
    КонецЕсли;
        
КонецПроцедуры

Процедура НастройкиИнформационнойБазыОбновить(Настройки)
    
    ВерсияДанныхТекущая = ВерсияДанных(Настройки.Запрос);
    
    Если ВерсияДанныхТекущая <> Настройки.ВерсияДанных Тогда
        
        Настройки.Настройки = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(Настройки.ИнформационнаяБаза);
        Настройки.НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(Настройки.ИнформационнаяБаза);
        
        Настройки.ВерсияДанных = ВерсияДанныхТекущая;
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанных

Функция ЗагрузитьРабочиеСервера(ТипПодключения, АдминистрированиеКластер, НомераРабочихПроцессов, Настройки, РабочиеСервера, Кластер1С)
    
    РабочиеСервераБуфер = Кластер_1С.РабочиеСерверы(ТипПодключения, АдминистрированиеКластер, Истина);
    НастройкиРабочиеСервераОбновить(Настройки, РабочиеСервераБуфер, Кластер1С);
    
    РабочиеПроцессы = Кластер_1С.РабочиеПроцессы(ТипПодключения, АдминистрированиеКластер, Истина);
    
    Для Каждого РабочийСервер Из РабочиеСервера Цикл
        РабочийСервер.Значение["ЕстьОбновление"] = Ложь;
    КонецЦикла;
        
    УникальныеИдентификаторыРабочихСерверов = Новый Соответствие;
    Для Каждого РабочийСервер Из РабочиеСервераБуфер Цикл
        
        УникальныеИдентификаторыРабочихСерверов.Вставить(РабочийСервер["Хост"], РабочийСервер["УникальныйИдентификаторОбъекта"]);
        
        ТекРабочийСервер = РабочиеСервера[РабочийСервер["УникальныйИдентификаторОбъекта"]];
        Если ТекРабочийСервер = Неопределено Тогда
            
            ТекРабочийСервер = Новый Соответствие(Новый ФиксированноеСоответствие(РабочийСервер));
            ТекРабочийСервер.Вставить("Счетчики", Новый Соответствие);
            ТекРабочийСервер.Вставить("ЕстьОбновление", Истина);
            РабочиеСервера.Вставить(РабочийСервер["УникальныйИдентификаторОбъекта"], ТекРабочийСервер);
            
        Иначе
            
            Для Каждого ТекПараметр Из РабочийСервер Цикл
                ТекРабочийСервер.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
            КонецЦикла;
            ТекРабочийСервер["ЕстьОбновление"] = Истина;
            
        КонецЕсли;
        
    КонецЦикла;
    
    РабочиеПроцессыСоответствие = Новый Соответствие;
    Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл        
        РабочийПроцесс.Вставить("УникальныйИдентификаторРабочегоСервера", УникальныеИдентификаторыРабочихСерверов[РабочийПроцесс["Компьютер"]]);         
        РабочиеПроцессыСоответствие.Вставить(РабочийПроцесс["ИдентификаторРабочегоПроцесса"], РабочийПроцесс);
    КонецЦикла;
        
    УстановитьНомераРабочихПроцессов(РабочиеПроцессы, НомераРабочихПроцессов);
    
    Результат = Новый Соответствие;
    Результат.Вставить("РабочиеПроцессы", РабочиеПроцессыСоответствие);
    
    Возврат Результат;
        
КонецФункции

Функция ЗагрузитьСчетчикиРабочихПроцессов(РабочиеПроцессы, РабочиеПроцессыНовые)
    
    ЗавершенныхРабочихПроцессов = Новый Массив;
    ЗавершенныеРабочиеПроцессыСервера = Новый Соответствие;
    
    Если РабочиеПроцессы.Количество() <> 0 Тогда
        
        Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
            
            Если РабочиеПроцессыНовые[РабочийПроцесс.Ключ] = Неопределено Тогда
                
                ЗавершенныхРабочихПроцессов.Добавить(РабочийПроцесс.Ключ);
                
                ЗавершенныхРабочихПроцессовСервера = ЗавершенныеРабочиеПроцессыСервера[РабочийПроцесс.Значение["УникальныйИдентификаторРабочегоСервера"]];
                Если ЗавершенныхРабочихПроцессовСервера = Неопределено Тогда
                    ЗавершенныхРабочихПроцессовСервера = 0;
                КонецЕсли;
                ЗавершенныеРабочиеПроцессыСервера.Вставить(РабочийПроцесс.Значение["УникальныйИдентификаторРабочегоСервера"], ЗавершенныхРабочихПроцессовСервера + 1); 
                
            КонецЕсли;
            
        КонецЦикла
        
    КонецЕсли;
    
    Для Каждого ЗавершенныйРабочийПроцесс Из ЗавершенныхРабочихПроцессов Цикл
        РабочиеПроцессы.Удалить(ЗавершенныйРабочийПроцесс);
    КонецЦикла;
                
    Для Каждого РабочийПроцессНовый Из РабочиеПроцессыНовые Цикл
        
        РабочийПроцесс = РабочиеПроцессы[РабочийПроцессНовый.Ключ];
        
        Если РабочийПроцесс = Неопределено Тогда
            
            РабочийПроцесс = Новый Соответствие;
            РабочийПроцесс.Вставить("Компьютер", РабочийПроцессНовый.Значение["Компьютер"]);
            РабочийПроцесс.Вставить("ВремяЗапуска", РабочийПроцессНовый.Значение["ВремяЗапуска"]);
            РабочийПроцесс.Вставить("ИдентификаторПроцесса", РабочийПроцессНовый.Значение["ИдентификаторПроцесса"]);
            РабочийПроцесс.Вставить("Имя", РабочийПроцессНовый.Значение["Имя"]);
            РабочийПроцесс.Вставить("Порт", РабочийПроцессНовый.Значение["Порт"]);
            РабочийПроцесс.Вставить("ИдентификаторРабочегоПроцесса", РабочийПроцессНовый.Значение["ИдентификаторРабочегоПроцесса"]);
            РабочийПроцесс.Вставить("УникальныйИдентификаторРабочегоСервера", РабочийПроцессНовый.Значение["УникальныйИдентификаторРабочегоСервера"]);
            РабочийПроцесс.Вставить("Счетчики", Новый Соответствие);
            
            РабочиеПроцессы.Вставить(РабочийПроцессНовый.Ключ, РабочийПроцесс);
                        
        КонецЕсли;
        
        РабочийПроцесс.Вставить("Активен", РабочийПроцессНовый.Значение["Активен"]);
        РабочийПроцесс.Вставить("Лицензии", РабочийПроцессНовый.Значение["Лицензии"]);
        РабочийПроцесс.Вставить("Включен", РабочийПроцессНовый.Значение["Включен"]);
        РабочийПроцесс.Вставить("СостояниеРабочегоПроцесса", РабочийПроцессНовый.Значение["СостояниеРабочегоПроцесса"]);
        
        Счетчики = РабочийПроцесс["Счетчики"];
        ДобавитьЗначениеСчетчика(Счетчики, "Затрачено сервером, сек.", РабочийПроцессНовый.Значение["СредняяДлительностьОбработкиВызоваРабочимПроцессом"]);
        ДобавитьЗначениеСчетчика(Счетчики, "Превышение над критическим значением, сек.", РабочийПроцессНовый.Значение["ВремяПревышенияПоПамяти"]);
        ДобавитьЗначениеСчетчика(Счетчики, "Доступная производительность", РабочийПроцессНовый.Значение["ДоступнаяПроизводительность"]);
        ДобавитьЗначениеСчетчика(Счетчики, "Клиентских потоков", РабочийПроцессНовый.Значение["СреднееКоличествоПотоков"]);
        ДобавитьЗначениеСчетчика(Счетчики, "Реакция сервера, сек.", РабочийПроцессНовый.Значение["СредняяДлительностьВызова"]);
        ДобавитьЗначениеСчетчика(Счетчики, "Затрачено СУБД, сек.", РабочийПроцессНовый.Значение["СредняяДлительностьВызововСУБД"]);
        ДобавитьЗначениеСчетчика(Счетчики, "Затрачено менеджером блокировок, сек.", РабочийПроцессНовый.Значение["СредняяДлительностьВызововСервисов"]);
        ДобавитьЗначениеСчетчика(Счетчики, "Занято памяти, байт", РабочийПроцессНовый.Значение["ПотреблениеПамяти"]);
        
    КонецЦикла;
    
    Возврат ЗавершенныеРабочиеПроцессыСервера;
    
КонецФункции

Процедура ЗагрузитьСчетчикиЗавершенныхРабочихПроцессовСервера(РабочиеСервера, ЗавершенныхРабочихПроцессовСервера)
        
    Для Каждого РабочийСервер Из РабочиеСервера Цикл
        
        Счетчики = РабочийСервер.Значение["Счетчики"];
        
        КоличествоЗавершенныхПроцессов = ЗавершенныхРабочихПроцессовСервера[РабочийСервер.Ключ];
        Если КоличествоЗавершенныхПроцессов = Неопределено Тогда
            КоличествоЗавершенныхПроцессов = 0;
        КонецЕсли;
        
        ДобавитьЗначениеСчетчика(Счетчики, "Завершенных рабочих процессов", КоличествоЗавершенныхПроцессов);
        
    КонецЦикла;
    
КонецПроцедуры

Функция ЗагрузитьИнформационныеБазы(ТипПодключения, АдминистрированиеКластер, ИнформационныеБазы, Настройки, Кластер1С)
    
    АдминистрированиеИнформационныеБазы = Кластер_1С.ИнформационныеБазы(ТипПодключения, АдминистрированиеКластер);
    
    Для Каждого ТекИнформационнаяБаза Из ИнформационныеБазы Цикл
        ТекИнформационнаяБаза.Значение["ЕстьОбновление"] = Ложь;
    КонецЦикла;
        
    Для Каждого ТекИнформационнаяБаза Из АдминистрированиеИнформационныеБазы Цикл
        
        ИнформационнаяБаза = ИнформационныеБазы[ТекИнформационнаяБаза.ИдентификаторИнформационнойБазы];
        
        Если ИнформационнаяБаза = Неопределено Тогда
                        
            ИнформационнаяБазаСсылка = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуИнформационнаяБаза(Строка(ТекИнформационнаяБаза.ИдентификаторИнформационнойБазы));
            
            Если ИнформационнаяБазаСсылка = Справочники.ОбъектыКонтроля.ПустаяСсылка() Тогда
                
                ИнформационнаяБазаМассив = Справочники.ОбъектыКонтроля.НайтиИнформационнуюБазуПоИмениВКластере(Кластер1С.ПлощадкаЭксплуатации, Кластер1С, ТекИнформационнаяБаза.Имя);
                Если ИнформационнаяБазаМассив.Количество() > 0 Тогда
                    ИнформационнаяБазаСсылка = ИнформационнаяБазаМассив[0];
                    ИнформационнаяБазаОбъект = ИнформационнаяБазаСсылка.ПолучитьОбъект();
                    ИнформационнаяБазаОбъект.УникальныйИдентификаторОбъекта = ТекИнформационнаяБаза.ИдентификаторИнформационнойБазы;
                    ИнформационнаяБазаОбъект.Записать();
                КонецЕсли;
                                
            КонецЕсли;
                        
            ИнформационнаяБаза = Новый Соответствие;
            ИнформационнаяБаза.Вставить("Ссылка", ИнформационнаяБазаСсылка); 
            ИнформационнаяБаза.Вставить("ЕстьАутентификация", Ложь);
            ИнформационнаяБаза.Вставить("ЕстьОбновление", Истина);
            
            ИнформационныеБазы.Вставить(ТекИнформационнаяБаза.ИдентификаторИнформационнойБазы, ИнформационнаяБаза);
            
        Иначе
            
            ИнформационнаяБаза["ЕстьОбновление"] = Истина;
            
        КонецЕсли;
        
        Если НЕ ИнформационнаяБаза["ЕстьАутентификация"] Тогда
            
            НастройкиАутентификации = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(ИнформационнаяБаза["Ссылка"]);
            
            ИнформационнаяБаза.Вставить("Пользователь", НастройкиАутентификации.Пользователь);
            ИнформационнаяБаза.Вставить("Пароль", НастройкиАутентификации.Пароль);
            
        КонецЕсли;
                
        Попытка
            Кластер_1С.АутентификацияИнформационнаяБаза(ТипПодключения, ТекИнформационнаяБаза, ИнформационнаяБаза["Пользователь"], ИнформационнаяБаза["Пароль"]);
            ИнформационнаяБаза["ЕстьАутентификация"] = Истина;
            Инцидент = Инцидент();
            Кластер_1С.ЗакрытьИнцидентИнформационнаяБазаАутентификация(ИнформационнаяБаза["Ссылка"], Инцидент);
        Исключение
            ИнформационнаяБаза["ЕстьАутентификация"] = Ложь;
            Инцидент = Инцидент(ИнформацияОбОшибке().Описание);
            Кластер_1С.ОткрытьИнцидентИнформационнаяБазаАутентификация(ИнформационнаяБаза["Ссылка"], Инцидент);
        КонецПопытки;
        
        ИнформационнаяБаза.Вставить("АдминистрированиеИнформационнаяБаза", ТекИнформационнаяБаза);
        
        ЗагрузитьСеансы(ТипПодключения, ТекИнформационнаяБаза, ИнформационнаяБаза);
                        
    КонецЦикла;
    
    НастройкиИнформационныеБазыОбновить(Настройки, ИнформационныеБазы);
    
КонецФункции

Процедура ЗагрузитьСчетчикиКластера(Результат, СчетчикиКластера)
    
    Счетчики = СчетчикиКластера;
    
    СеансыВсего = 0;
    СеансыПоТипуПриложения = Новый Соответствие;
    
    ИнформационныеБазы = Результат["ИнформационныеБазы"];
    Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
        
        СчетчикиИБ = ИнформационнаяБаза.Значение["Счетчики"];
        
        Если СчетчикиИБ <> Неопределено Тогда
            СеансыВсего = СеансыВсего + СчетчикиИБ["Сеансов"]["cur"];
            ДобавитьСчетчикиКластераПоТипуПриложения(СеансыПоТипуПриложения, СчетчикиИБ["СеансовПоТипуПриложения"]);
        КонецЕсли;
        
    КонецЦикла;
    
    
    ЗавершенныхРабочихПроцессов = 0;
    РабочиеСервера = Результат["РабочиеСервера"];
    Для Каждого РабочийСервер Из РабочиеСервера Цикл
        
        СчетчикиРабочегоСервера = РабочийСервер.Значение["Счетчики"];
        ЗавершенныхРабочихПроцессов = ЗавершенныхРабочихПроцессов + СчетчикиРабочегоСервера["Завершенных рабочих процессов"]["cur"];
        
    КонецЦикла;
        
    ДобавитьЗначениеСчетчиков(Счетчики, СеансыПоТипуПриложения, "Сеансов", СеансыВсего);    
    ДобавитьЗначениеСчетчика(Счетчики, "Завершенных рабочих процессов", ЗавершенныхРабочихПроцессов);
        
КонецПроцедуры

Процедура ЗагрузитьСеансы(ТипПодключения, АдминистрированиеИнформационнаяБаза, ИнформационнаяБаза)
    
    Счетчики = ИнформационнаяБаза["Счетчики"];
    Если Счетчики = Неопределено Тогда
        Счетчики = Новый Соответствие;
        ИнформационнаяБаза.Вставить("Счетчики", Счетчики);
    КонецЕсли;
            
    Сеансы = Кластер_1С.Сеансы(ТипПодключения, АдминистрированиеИнформационнаяБаза, Истина);
            
    СеансыУникальные = Новый Соответствие;
    
    СеансыВсего = 0;
    СеансыПоТипуПриложения = Новый Соответствие;
    
    ВремяВызоваТекущее = 0;
    ВремяВызоваТекущееПоТипуПриложения = Новый Соответствие;
    
    СеансовВВызове = 0;
    СеансовВВызовеПоТипуПриложения = Новый Соответствие;
    
    СеансовВВызове5 = 0;
    СеансовВВызове5ПоТипуПриложения = Новый Соответствие;
    
    СеансовВВызове20 = 0;
    СеансовВВызове20ПоТипуПриложения = Новый Соответствие;
    
    ВремяВызоваСУБДТекущее = 0;
    ВремяВызоваСУБДТекущееПоТипуПриложения = Новый Соответствие;
    
    СеансовВВызовеСУБД = 0;
    СеансовВВызовеСУБДПоТипуПриложения = Новый Соответствие;
    
    ЗаблокированоСУБД = 0;
    ЗаблокированоСУБДПоТипуПриложения = Новый Соответствие;
    
    ЗаблокированоУпр = 0;
    ЗаблокированоУпрПоТипуПриложения = Новый Соответствие;
    
    ПамятьТекущая = 0;
    ПамятьТекущаяПоТипуПриложения = Новый Соответствие;
    
    ЧтениеТекущее = 0;
    ЧтениеТекущееПоТипуПриложения = Новый Соответствие;
    
    ЗаписьТекущая = 0;
    ЗаписьТекущаяПоТипуПриложения = Новый Соответствие;
    
    Для Каждого Сеанс Из Сеансы Цикл
        
        Если НЕ Сеанс["Спящий"] Тогда
            
            СеансУникальный = СеансыУникальные[Сеанс["Сеанс"]];
            Если СеансУникальный = Неопределено Тогда
                
                СеансыУникальные.Вставить(Сеанс["Сеанс"], Сеанс);
                Приложение = Сеанс["Приложение"]; 
                ВремяВызоваТекущееВеличина = Сеанс["ВремяВызоваТекущее"];
                ВремяВызоваСУБДТекущееВеличина = Сеанс["ВремяВызововСУБДТекущее"]; 
                
                СеансыВсего = СеансыВсего + 1;
                ДобавитьПоТипуПриложения(СеансыПоТипуПриложения, Приложение, 1);
                
                ВремяВызоваТекущее = ВремяВызоваТекущее + ВремяВызоваТекущееВеличина;
                ДобавитьПоТипуПриложения(ВремяВызоваТекущееПоТипуПриложения, Приложение, ВремяВызоваТекущееВеличина);
                
                Если ВремяВызоваТекущееВеличина > 0 Тогда
                    СеансовВВызове = СеансовВВызове + 1;
                    ДобавитьПоТипуПриложения(СеансовВВызовеПоТипуПриложения, Приложение, 1);
                Иначе
                    ДобавитьПоТипуПриложения(СеансовВВызовеПоТипуПриложения, Приложение, 0);
                КонецЕсли;
                
                Если ВремяВызоваТекущееВеличина > 5 Тогда
                    СеансовВВызове5 = СеансовВВызове5 + 1;
                    ДобавитьПоТипуПриложения(СеансовВВызове5ПоТипуПриложения, Приложение, 1);
                Иначе
                    ДобавитьПоТипуПриложения(СеансовВВызове5ПоТипуПриложения, Приложение, 0);
                КонецЕсли;
                
                Если ВремяВызоваТекущееВеличина > 20 Тогда
                    СеансовВВызове20 = СеансовВВызове20 + 1;
                    ДобавитьПоТипуПриложения(СеансовВВызове20ПоТипуПриложения, Приложение, 1);
                Иначе
                    ДобавитьПоТипуПриложения(СеансовВВызове20ПоТипуПриложения, Приложение, 0);
                КонецЕсли;
                
                ВремяВызоваСУБДТекущее = ВремяВызоваСУБДТекущееВеличина;
                ДобавитьПоТипуПриложения(ВремяВызоваСУБДТекущееПоТипуПриложения, Приложение, ВремяВызоваСУБДТекущееВеличина); 
                
                Если ВремяВызоваСУБДТекущее > 0 Тогда
                    СеансовВВызовеСУБД = СеансовВВызовеСУБД + 1;
                    ДобавитьПоТипуПриложения(СеансовВВызовеСУБДПоТипуПриложения, Приложение, 1); 
                Иначе
                    ДобавитьПоТипуПриложения(СеансовВВызовеСУБДПоТипуПриложения, Приложение, 0); 
                КонецЕсли;
                
                Если ЗначениеЗаполнено(Сеанс["ЗаблокированоСУБД"]) Тогда
                    ЗаблокированоСУБД = ЗаблокированоСУБД + 1;
                    ДобавитьПоТипуПриложения(ЗаблокированоСУБДПоТипуПриложения, Приложение, 1);
                Иначе
                    ДобавитьПоТипуПриложения(ЗаблокированоСУБДПоТипуПриложения, Приложение, 0);
                КонецЕсли;
                
                Если ЗначениеЗаполнено(Сеанс["ЗаблокированоУпр"]) Тогда
                    ЗаблокированоУпр = ЗаблокированоУпр + 1;
                    ДобавитьПоТипуПриложения(ЗаблокированоУпрПоТипуПриложения, Приложение, 1);
                Иначе
                    ДобавитьПоТипуПриложения(ЗаблокированоУпрПоТипуПриложения, Приложение, 0);
                КонецЕсли;
                
                ПамятьТекущая = ПамятьТекущая + Сеанс["ПамятьТекущая"];
                ДобавитьПоТипуПриложения(ПамятьТекущаяПоТипуПриложения, Приложение, Сеанс["ПамятьТекущая"]);
                
                ЧтениеТекущее = ЧтениеТекущее + Сеанс["ЧтениеТекущее"];
                ДобавитьПоТипуПриложения(ЧтениеТекущееПоТипуПриложения, Приложение, Сеанс["ЧтениеТекущее"]);
                
                ЗаписьТекущая = ЗаписьТекущая + Сеанс["ЗаписьТекущая"];
                ДобавитьПоТипуПриложения(ЗаписьТекущаяПоТипуПриложения, Приложение, Сеанс["ЗаписьТекущая"]);
                
            Иначе
                
                Если НЕ ЗначениеЗаполнено(СеансУникальный["ДатаПоследнейАктивности"]) ИЛИ Сеанс["ДатаПоследнейАктивности"] > СеансУникальный["ДатаПоследнейАктивности"] Тогда
                    СеансыУникальные.Вставить(Сеанс["Сеанс"], Сеанс);
                КонецЕсли;            
                
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
    ДобавитьЗначениеСчетчиков(Счетчики, СеансыПоТипуПриложения, "Сеансов", СеансыВсего);
    ДобавитьЗначениеСчетчиков(Счетчики, ВремяВызоваТекущееПоТипуПриложения, "Время вызова текущее, мсек.", ВремяВызоваТекущее);
    ДобавитьЗначениеСчетчиков(Счетчики, СеансовВВызовеПоТипуПриложения, "Сеансов в вызове", СеансовВВызове);
    ДобавитьЗначениеСчетчиков(Счетчики, СеансовВВызове5ПоТипуПриложения, "Сеансов в вызове > 5 сек", СеансовВВызове5);
    ДобавитьЗначениеСчетчиков(Счетчики, СеансовВВызове20ПоТипуПриложения, "Сеансов в вызове > 20 сек", СеансовВВызове20);
    ДобавитьЗначениеСчетчиков(Счетчики, ВремяВызоваСУБДТекущееПоТипуПриложения, "Время вызова СУБД текущее, мсек", ВремяВызоваСУБДТекущее);
    ДобавитьЗначениеСчетчиков(Счетчики, СеансовВВызовеСУБДПоТипуПриложения, "Сеансов в вызове СУБД", СеансовВВызовеСУБД);
    ДобавитьЗначениеСчетчиков(Счетчики, ЗаблокированоСУБДПоТипуПриложения, "Сеансов заблокировано СУБД", ЗаблокированоСУБД);
    ДобавитьЗначениеСчетчиков(Счетчики, ЗаблокированоУпрПоТипуПриложения, "Сеансов заблокировано упр", ЗаблокированоУпр);
    ДобавитьЗначениеСчетчиков(Счетчики, ПамятьТекущаяПоТипуПриложения, "Память текущая, байт", ПамятьТекущая);
    ДобавитьЗначениеСчетчиков(Счетчики, ЧтениеТекущееПоТипуПриложения, "Чтение текущее, байт", ЧтениеТекущее);
    ДобавитьЗначениеСчетчиков(Счетчики, ЗаписьТекущаяПоТипуПриложения, "Запись текущая, байт", ЗаписьТекущая);
        
    ИнформационнаяБаза.Вставить("Сеансы", СеансыУникальные);
    ИнформационнаяБаза.Вставить("СеансыПоТипуПриложения", СеансыПоТипуПриложения);
        
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДанных

Процедура ЗаписатьРезультат(Кластер1С, Результат, ЗаписатьСчетчики, НастройкиКонтрольнаяПроцедура)
    
    ЗаписатьПараметрыКонтроляКластер(Кластер1С, Результат);
    ЗаписатьПараметрыКонтроляРабочиеСервера(Результат);
    ЗаписатьПараметрыКонтроляИнформационныеБазы(Результат);
    
    ЗаписатьПараметрыРабочихПроцессов(Кластер1С, Результат);
    ЗаписатьПараметрыСеансов(Кластер1С, Результат, НастройкиКонтрольнаяПроцедура);
    
    Если ЗаписатьСчетчики Тогда
        ЗаписатьСчетчики(Кластер1С, Результат);
    КонецЕсли;
        
КонецПроцедуры

Процедура ЗаписатьПараметрыКонтроляКластер(Кластер1С, Результат)
    
    СвойстваНовые = Результат["Свойства"];
    Настройки = Результат["НастройкиКластера"]["Настройки"];
    НастройкиКонтроля = Результат["НастройкиКластера"]["НастройкиКонтроля"];
    
    Описание = ОписаниеКонтроляПараметров(СвойстваНовые, Настройки, НастройкиКонтроля);
   
    Если Описание.Количество() > 0 Тогда
        
        ЗаписьJSON = Новый ЗаписьJSON();
        ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
        ЗаписатьJSON(ЗаписьJSON, Описание);
        Инцидент = Инцидент(ЗаписьJSON.Закрыть());
        
        Кластер_1С.ОткрытьИнцидентКластераКонтрольПараметров(Кластер1С, Инцидент, Ложь);
        
    Иначе
        Инцидент = Инцидент();
        Кластер_1С.ЗакрытьИнцидентКластераКонтрольПараметров(Кластер1С, Инцидент);
    КонецЕсли;
        
КонецПроцедуры

Процедура ЗаписатьПараметрыКонтроляРабочиеСервера(Результат)
    
    РабочиеСервераСвойства = Результат["РабочиеСервера"];
    НастройкиРабочиеСервера = Результат["НастройкиРабочиеСервера"];
    
    Кластер1С = Результат["НастройкиКластера"]["Кластер1С"];
    РабочиеСерверыКластера = Справочники.ОбъектыКонтроля.РабочиеСерверыКластера(Кластер1С);
    Для Каждого РабочийСерверКластера Из РабочиеСерверыКластера Цикл
        
        РабочийСервер = РабочиеСервераСвойства[РабочийСерверКластера.УникальныйИдентификаторОбъекта];
        Если РабочийСервер = Неопределено Тогда
            Кластер_1С.ОткрытьИнцидентРабочийСерверУдалениеОбъекта(РабочийСерверКластера);
        Иначе
            Если НЕ РабочийСервер["ЕстьОбновление"] Тогда
                Кластер_1С.ОткрытьИнцидентРабочийСерверУдалениеОбъекта(РабочийСерверКластера);
            КонецЕсли;
        КонецЕсли;
                
    КонецЦикла;
        
    Для Каждого СвойстваНовые Из РабочиеСервераСвойства Цикл
        
        СвойстваНовыеЗначение = СвойстваНовые.Значение;
        
        Настройки = НастройкиРабочиеСервера[СвойстваНовыеЗначение["УникальныйИдентификаторОбъекта"]].Настройки;
        НастройкиКонтроля = НастройкиРабочиеСервера[СвойстваНовыеЗначение["УникальныйИдентификаторОбъекта"]].НастройкиКонтроля;
        
        РабочийСервер = НастройкиРабочиеСервера[СвойстваНовыеЗначение["УникальныйИдентификаторОбъекта"]].РабочийСервер; 
        
        Описание = ОписаниеКонтроляПараметров(СвойстваНовыеЗначение, Настройки, НастройкиКонтроля);
        
        Если Описание.Количество() > 0 Тогда
            
            ЗаписьJSON = Новый ЗаписьJSON();
            ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
            ЗаписатьJSON(ЗаписьJSON, Описание);
            Инцидент = Инцидент(ЗаписьJSON.Закрыть());
            
            Кластер_1С.ОткрытьИнцидентРабочийСерверКонтрольПараметров(РабочийСервер, Инцидент, Ложь);
            
        Иначе
            Инцидент = Инцидент();
            Кластер_1С.ЗакрытьИнцидентРабочийСерверКонтрольПараметров(РабочийСервер, Инцидент);
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ЗаписатьПараметрыКонтроляИнформационныеБазы(Результат)
    
    ИнформационныеБазы = Результат["ИнформационныеБазы"];
    НастройкиИнформационныеБазы = Результат["НастройкиИнформационныеБазы"];
    
    Кластер1С = Результат["НастройкиКластера"]["Кластер1С"];
    ИнформационныеБазыКластера = Справочники.ОбъектыКонтроля.ИнформационныеБазыКластера(Кластер1С);
    Для Каждого ИнформационнаяБазаКластера Из ИнформационныеБазыКластера Цикл
        
        ИнформационнаяБаза = Неопределено;
        
        Если ЗначениеЗаполнено(ИнформационнаяБазаКластера.УникальныйИдентификаторОбъекта) Тогда
            ИнформационнаяБаза = ИнформационныеБазы[Новый УникальныйИдентификатор(ИнформационнаяБазаКластера.УникальныйИдентификаторОбъекта)];
        КонецЕсли;
        
        Если ИнформационнаяБаза = Неопределено Тогда
            Кластер_1С.ОткрытьИнцидентИнформационнаяБазаУдалениеОбъекта(ИнформационнаяБазаКластера);
        Иначе
            Если НЕ ИнформационнаяБаза["ЕстьОбновление"] Тогда
                Кластер_1С.ОткрытьИнцидентИнформационнаяБазаУдалениеОбъекта(ИнформационнаяБазаКластера);
            КонецЕсли;
        КонецЕсли;
        
    КонецЦикла;
        
    Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
        
        ИнформационнаяБазаПараметры = НастройкиИнформационныеБазы[Строка(ИнформационнаяБаза.Ключ)];
        
        Если ИнформационнаяБазаПараметры <> Неопределено Тогда
            
            // Это новая информационная база, создаем.
            Если ИнформационнаяБазаПараметры.ВерсияДанных = Неопределено Тогда
                
                АдминистрированиеИнформационнаяБаза = ИнформационнаяБаза.Значение["АдминистрированиеИнформационнаяБаза"];
                СоздатьИнформационнуюБазу(Кластер1С, АдминистрированиеИнформационнаяБаза);                
                
            КонецЕсли;
                        
            СвойстваНовые = ИнформационнаяБазаПараметры["Свойства"];
            Настройки = ИнформационнаяБазаПараметры["Настройки"];
            НастройкиКонтроля = ИнформационнаяБазаПараметры["НастройкиКонтроля"];
            
            ИнформационнаяБазаСсылка = ИнформационнаяБазаПараметры["ИнформационнаяБаза"];
            
            Описание = ОписаниеКонтроляПараметров(СвойстваНовые, Настройки, НастройкиКонтроля);
            
            Если Описание.Количество() > 0 Тогда
                
                ЗаписьJSON = Новый ЗаписьJSON();
                ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
                ЗаписатьJSON(ЗаписьJSON, Описание);
                Инцидент = Инцидент(ЗаписьJSON.Закрыть());
                
                Кластер_1С.ОткрытьИнцидентИнформационнаяКонтрольПараметров(ИнформационнаяБазаСсылка, Инцидент, Ложь);
                
            Иначе
                Инцидент = Инцидент();
                Кластер_1С.ЗакрытьИнцидентИнформационнаяКонтрольПараметров(ИнформационнаяБазаСсылка, Инцидент);
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ЗаписатьПараметрыРабочихПроцессов(Кластер1С, Результат)
    
    ДанныеДляЗаписи = Новый Соответствие;
    
    ДанныеКластера = Новый Соответствие;
    ДанныеДляЗаписи.Вставить(Кластер1С.УникальныйИдентификаторОбъекта, ДанныеКластера);
    
    ПараметрыРабочихПроцессов = Новый Соответствие;
    ДанныеКластера.Вставить("ПараметрыРабочихПроцессов", ПараметрыРабочихПроцессов);
    
    Для Каждого РабочийПроцессЗначение Из Результат["РабочиеПроцессы"] Цикл
        
        РабочийПроцесс = РабочийПроцессЗначение.Значение;
        
        Если РабочийПроцесс["Активен"] Тогда
            
            ПараметрыРабочегоСервера = ПараметрыРабочихПроцессов[РабочийПроцесс["УникальныйИдентификаторРабочегоСервера"]];
            Если ПараметрыРабочегоСервера = Неопределено Тогда
                ПараметрыРабочегоСервера = Новый Массив;
                ПараметрыРабочихПроцессов.Вставить(РабочийПроцесс["УникальныйИдентификаторРабочегоСервера"], ПараметрыРабочегоСервера);
            КонецЕсли;
            
            ПараметрыРабочегоПроцесса = Новый Соответствие;
            ПараметрыРабочегоПроцесса.Вставить("isObtainedControlParametrs", Ложь);
            ПараметрыРабочегоПроцесса.Вставить("isAuthentificate", Ложь);
            ПараметрыРабочегоПроцесса.Вставить("monitoring", Истина);
            
            СвойстваРабочегоПроцесса = Новый Соответствие;
            СвойстваРабочегоПроцесса.Вставить("time", Формат(ТекущаяУниверсальнаяДата(), "ДФ='ггггММддЧЧммсс'"));
            СвойстваРабочегоПроцесса.Вставить("enable", РабочийПроцесс["Активен"]);
            СвойстваРабочегоПроцесса.Вставить("hostName", РабочийПроцесс["Компьютер"]);
            СвойстваРабочегоПроцесса.Вставить("name", РабочийПроцесс["Имя"]);
            СвойстваРабочегоПроцесса.Вставить("running", РабочийПроцесс["Включен"]);
            
            Если ЗначениеЗаполнено(РабочийПроцесс["ИдентификаторПроцесса"]) Тогда
                СвойстваРабочегоПроцесса.Вставить("pid", Число(РабочийПроцесс["ИдентификаторПроцесса"]));
            Иначе
                СвойстваРабочегоПроцесса.Вставить("pid", 0);
            КонецЕсли;
            
            СвойстваРабочегоПроцесса.Вставить("uuid", РабочийПроцесс["ИдентификаторРабочегоПроцесса"]);
            СвойстваРабочегоПроцесса.Вставить("license", РабочийПроцесс["Лицензии"]["Имя"]);
            Если РабочийПроцесс["СостояниеРабочегоПроцесса"] = "Используется" Тогда
                СвойстваРабочегоПроцесса.Вставить("use", 1);
            ИначеЕсли РабочийПроцесс["СостояниеРабочегоПроцесса"] = "НеИспользуется" Тогда
                СвойстваРабочегоПроцесса.Вставить("use", 2);
            ИначеЕсли РабочийПроцесс["СостояниеРабочегоПроцесса"] = "Резервный" Тогда
                СвойстваРабочегоПроцесса.Вставить("use", 3);
            КонецЕсли;
            СвойстваРабочегоПроцесса.Вставить("startedAt", Формат(РабочийПроцесс["ВремяЗапуска"], "ДФ='ггггММддЧЧммсс'"));
            СвойстваРабочегоПроцесса.Вставить("mainPort", РабочийПроцесс["Порт"]);
            СвойстваРабочегоПроцесса.Вставить("memorySize", РабочийПроцесс["Счетчики"]["Занято памяти, байт"]["cur"]);
            
            ПараметрыРабочегоПроцесса.Вставить("params", СвойстваРабочегоПроцесса);
            
            ПараметрыРабочегоСервера.Добавить(ПараметрыРабочегоПроцесса);
            
        КонецЕсли;
                   
    КонецЦикла;
    
    ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляЗаписи);
	ДанныеJSON = ЗаписьJSON.Закрыть();
    
    РегистрыСведений.ПараметрыКластераБуфер.ЗаписатьДанные("ПРП", ДанныеJSON);    
    
КонецПроцедуры

Процедура ЗаписатьПараметрыСеансов(Кластер, Результат, НастройкиКонтрольнаяПроцедура)
    
    ИнформационныеБазы = Результат["ИнформационныеБазы"];
    РабочиеПроцессы = Результат["РабочиеПроцессы"];
    Соединения = Результат["Соединения"];
    Время = Формат(ТекущаяУниверсальнаяДата(), "ДФ='ггггММддЧЧммсс'"); 
    
    Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
        
        Сеансы = ИнформационнаяБаза.Значение["Сеансы"];
        
        Если Сеансы <> Неопределено И Сеансы.Количество() > 0 Тогда
            
            СеансыДляЗаписи = Новый Массив;
            
            Для Каждого КлючЗначение Из Сеансы Цикл
                
                Сеанс = КлючЗначение.Значение;
                
                СеансМассив = Новый Массив;
                
                СеансМассив.Добавить(Время);
                СеансМассив.Добавить(Сеанс["ИдентификаторСеанса"]);
                СеансМассив.Добавить(Сеанс["Приложение"]);
                СеансМассив.Добавить(Сеанс["ЗаблокированоСУБД"]);
                СеансМассив.Добавить(Сеанс["ЗаблокированоУпр"]);
                СеансМассив.Добавить(Сеанс["ОбъемДанныхВсего"]);
                СеансМассив.Добавить(Сеанс["ОбъемДанных5Мин"]);
                СеансМассив.Добавить(Сеанс["КоличествоВызововВсего"]);
                СеансМассив.Добавить(Сеанс["КоличествоВызовов5Мин"]);
                СеансМассив.Добавить(Сеанс["ИдентификаторСоединения"]);
                СеансМассив.Добавить(Сеанс["ДанныхСУБДВсего"]);
                СеансМассив.Добавить(Сеанс["ДанныхСУБД5Мин"]);
                СеансМассив.Добавить(Сеанс["СоединениеССУБД"]);
                СеансМассив.Добавить(Сеанс["ВремяВызововВсего"]);
                СеансМассив.Добавить(Сеанс["ВремяВызововСУБДВсего"]);
                СеансМассив.Добавить(Сеанс["ВремяВызоваТекущее"]);
                СеансМассив.Добавить(Сеанс["ВремяВызововСУБДТекущее"]);
                СеансМассив.Добавить(Сеанс["ВремяВызовов5Мин"]);
                СеансМассив.Добавить(Сеанс["ВремяВызововСУБД5Мин"]);
                СеансМассив.Добавить(Сеанс["Компьютер"]);
                СеансМассив.Добавить(Сеанс["ИдентификаторИнформационнойБазы"]);
                СеансМассив.Добавить(Формат(Сеанс["ДатаПоследнейАктивности"], "ДФ='ггггММддЧЧммсс'"));
                СеансМассив.Добавить(Сеанс["Лицензия"]["Имя"]);
                СеансМассив.Добавить(Сеанс["Язык"]);
                СеансМассив.Добавить(Сеанс["ИдентификаторПроцесса"]);
                СеансМассив.Добавить(Сеанс["Сеанс"]);
                СеансМассив.Добавить(Формат(Сеанс["ДатаНачалаСеанса"], "ДФ='ггггММддЧЧммсс'"));
                СеансМассив.Добавить(Сеанс["Пользователь"]);
                СеансМассив.Добавить(Сеанс["Спящий"]);
                СеансМассив.Добавить(Сеанс["ЗаснутьЧерез"]);
                СеансМассив.Добавить(Сеанс["ЗавершитьЧерез"]);
                СеансМассив.Добавить(Сеанс["ПамятьТекущая"]);
                СеансМассив.Добавить(Сеанс["Память5Мин"]);
                СеансМассив.Добавить(Сеанс["ПамятьВсего"]);
                СеансМассив.Добавить(Сеанс["ЧтениеТекущее"]);
                СеансМассив.Добавить(Сеанс["Чтение5Мин"]);
                СеансМассив.Добавить(Сеанс["ЧтениеВсего"]);
                СеансМассив.Добавить(Сеанс["ЗаписьТекущая"]);
                СеансМассив.Добавить(Сеанс["Запись5Мин"]);
                СеансМассив.Добавить(Сеанс["ЗаписьВсего"]);
                СеансМассив.Добавить(Сеанс["ДлительностьВызововСервисаТекущее"]);
                СеансМассив.Добавить(Сеанс["ДлительностьВызововСервисовЗа5Мин"]);
                СеансМассив.Добавить(Сеанс["ДлительностьВызововСервисовВсего"]);
                СеансМассив.Добавить(Сеанс["ИмяТекущегоСервиса"]);
                СеансМассив.Добавить(Сеанс["ПроцессорноеВремяТекущее"]);
                СеансМассив.Добавить(Сеанс["ПроцессорноеВремяЗа5Мин"]);
                СеансМассив.Добавить(Сеанс["ПроцессорноеВремяВсего"]);
                
                РабочийПроцесс = РабочиеПроцессы[Сеанс["ИдентификаторПроцесса"]];
                Если РабочийПроцесс <> Неопределено Тогда
                    СеансМассив.Добавить(РабочийПроцесс["УникальныйИдентификаторРабочегоСервера"]);
                    ИдентификаторПроцессаСтрока = РабочийПроцесс["ИдентификаторПроцесса"];
                    Если ЗначениеЗаполнено(ИдентификаторПроцессаСтрока) Тогда
                        СеансМассив.Добавить(Число(ИдентификаторПроцессаСтрока));
                    Иначе
                        СеансМассив.Добавить(0);
                    КонецЕсли;
                Иначе
                    СеансМассив.Добавить(Неопределено);
                    СеансМассив.Добавить(0);
                КонецЕсли;
                
                Соединение = Соединения[Сеанс["ИдентификаторСоединения"]];
                Если Соединение <> Неопределено Тогда
                    СеансМассив.Добавить(Соединение["НомерСоединения"]);
                Иначе
                    СеансМассив.Добавить(0);
                КонецЕсли;
                                
                СеансыДляЗаписи.Добавить(СеансМассив);
                
            КонецЦикла;
            
            Если НастройкиКонтрольнаяПроцедура.Настройки.Мониторинг <> 0 Тогда
                
                НужнаЗапись = Истина;
                
                Если НастройкиКонтрольнаяПроцедура.Настройки.Мониторинг = 1 Тогда
                    
                    НужнаЗапись = Ложь;
                    
                    Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
                        
                        Если РабочийПроцесс.Значение["Счетчики"]["Занято памяти, байт"]["cur"] > НастройкиКонтрольнаяПроцедура.Настройки.ПороговаяПамятьМБ * 1024 * 1024 Тогда
                            НужнаЗапись = Истина;
                        КонецЕсли;
                                                
                    КонецЦикла;
                    
                КонецЕсли;
                
                
                Если НужнаЗапись Тогда
                    ЗаписьJSON = Новый ЗаписьJSON();
                    ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
                    ЗаписатьJSON(ЗаписьJSON, СеансыДляЗаписи);
                    РегистрыСведений.ПараметрыКластераБуфер.ЗаписатьДанные("ПСНС", ЗаписьJSON.Закрыть(), Кластер.УникальныйИдентификаторОбъекта);
                КонецЕсли;
                
            КонецЕсли;
            
        КонецЕсли;
        
        СеансыПоТипуПриложения = ИнформационнаяБаза.Значение["СеансыПоТипуПриложения"];
        Если СеансыПоТипуПриложения <> Неопределено И СеансыПоТипуПриложения.Количество() > 0 Тогда
            
            СеансыПоТипуПриложенияДляЗаписи = Новый Соответствие;
            СеансыПоТипуПриложенияДляЗаписи.Вставить("time", Время);
            СеансыПоТипуПриложенияДляЗаписи.Вставить("infoBaseId", Строка(ИнформационнаяБаза.Ключ));
            СеансыПоТипуПриложенияДляЗаписи.Вставить("data", СеансыПоТипуПриложения);
            
            ЗаписьJSON = Новый ЗаписьJSON();
            ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
            ЗаписатьJSON(ЗаписьJSON, СеансыПоТипуПриложенияДляЗаписи);
            РегистрыСведений.ПараметрыКластераБуфер.ЗаписатьДанные("ПСНС_ПРИЛ", ЗаписьJSON.Закрыть(), Кластер.УникальныйИдентификаторОбъекта);
            
        КонецЕсли;
                
    КонецЦикла;
    
КонецПроцедуры

Функция ИмяКластера(Результат)
    
    ИмяКластера = Новый Массив;
    ИмяКластера.Добавить(Результат["ИмяКластера"]);
    ИмяКластера.Добавить("(");
    
    РабочиеСервера = Результат["РабочиеСервера"];
    Для Каждого РабочийСервер Из РабочиеСервера Цикл
        
        РабочийСерверЗначение = РабочийСервер.Значение;
        
        Если РабочийСерверЗначение["ЦентральныйСервер"] = Истина Тогда
            
            ИмяКластера.Добавить(РабочийСерверЗначение["Хост"]);
            
            ПортГлавногоМенеджераКластера = РабочийСерверЗначение["ПортГлавногоМенеджераКластера"];
            Если ПортГлавногоМенеджераКластера <> 1541 Тогда
                ИмяКластера.Добавить(":");
                ИмяКластера.Добавить(Формат(ПортГлавногоМенеджераКластера, "ЧН=0; ЧГ=0"));
            КонецЕсли;
            
            ИмяКластера.Добавить(",");
            
        КонецЕсли;
                
    КонецЦикла;
    
    ИмяКластера.Удалить(ИмяКластера.ВГраница());
    ИмяКластера.Добавить(")");
    
    Возврат СтрСоединить(ИмяКластера, "");;
        
КонецФункции

Процедура ЗаписатьСчетчики(Кластер1С, Результат)
    
    Счетчики = Новый Массив;
    
    ИмяСчетчика = Новый Массив;
    ИмяСчетчика.Добавить("Производительность кластеров 1С");
    ИмяСчетчика.Добавить(Кластер1С.ПлощадкаЭксплуатации.Наименование);
    ИмяСчетчика.Добавить(ИмяКластера(Результат));
    
    СчетчикиСерверныхЛицензий(Результат);
    СчетчикиКлиентскихЛицензий(Результат);
    
    СчетчикиКластера = СчетчикиКластера(Результат["СчетчикиКластера"], ИмяСчетчика);
    ДобавитьСчетчики(Счетчики, СчетчикиКластера);
    
    СчетчикиРабочихПроцессовКластер = СчетчикиРабочихПроцессовКластер(Результат["РабочиеПроцессы"], ИмяСчетчика);
    Для Каждого СчетчикРабочихПроцессов Из СчетчикиРабочихПроцессовКластер Цикл
        Счетчики.Добавить(СчетчикРабочихПроцессов);
    КонецЦикла;
    
    СчетчикиРабочихСерверов = СчетчикиРабочихСерверов(Результат["РабочиеСервера"], Результат["РабочиеПроцессы"], ИмяСчетчика);
    Для Каждого СчетчикРабочегоСервера Из СчетчикиРабочихСерверов Цикл
        Счетчики.Добавить(СчетчикРабочегоСервера);
    КонецЦикла;
            
    ИмяСчетчика.Добавить("Информационных баз");
    
    ИнформационныеБазы = Результат["ИнформационныеБазы"];
    СчетчикИнформационныхБазКластера = СчетчикИнформационныхБазКластера(ИмяСчетчика, ИнформационныеБазы.Количество());
    Счетчики.Добавить(СчетчикИнформационныхБазКластера);
    
    Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
        
        ИнформационнаяБазаСтрока = ИнформационнаяБаза.Значение["Ссылка"].Наименование;
        ИнформационнаяБазаСчетчики = ИнформационнаяБаза.Значение["Счетчики"];
        СчетчикиИнформационнойБазы = СчетчикиИнформационнойБазы(ИнформационнаяБазаСтрока, ИнформационнаяБазаСчетчики, ИмяСчетчика); 
        Для Каждого СчетчикИнформационнойБазы Из СчетчикиИнформационнойБазы Цикл
            Счетчики.Добавить(СчетчикИнформационнойБазы);
        КонецЦикла;
        
    КонецЦикла;
        
    ЗаписьJSON = Новый ЗаписьJSON();
    ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
    ЗаписатьJSON(ЗаписьJSON, Счетчики);
    ДанныеJSON = ЗаписьJSON.Закрыть();
    
    РегистрыСведений.СтатистикаБуфер.ДобавитьДанные(ДанныеJSON);    
        
КонецПроцедуры

Процедура СоздатьИнформационнуюБазу(Кластер1С, АдминистрированиеИнформационнаяБаза)
    
    ЕдиницаМасштабированияПараметры = Новый Соответствие;
    ЕдиницаМасштабированияПараметры.Вставить("equipmentLocationRef", Кластер1С.ПлощадкаЭксплуатации);
    
    ИнформационныеБазы = Новый Массив;
    ЕдиницаМасштабированияПараметры.Вставить("infoBases", ИнформационныеБазы);
    
    ИнформационнаяБаза = Новый Соответствие;
    ИнформационныеБазы.Добавить(ИнформационнаяБаза);
    ИнформационнаяБаза.Вставить("uuid", Строка(АдминистрированиеИнформационнаяБаза.ИдентификаторИнформационнойБазы));
    ИнформационнаяБаза.Вставить("descr", АдминистрированиеИнформационнаяБаза.Описание);
    ИнформационнаяБаза.Вставить("cluster1CRef", Кластер1С);
    ИнформационнаяБаза.Вставить("name", АдминистрированиеИнформационнаяБаза.Имя);
    
    ЕдиницаМасштабирования.ЗагрузитьЕдиницуМасштабирования(ЕдиницаМасштабированияПараметры, Неопределено);
    
КонецПроцедуры

Процедура СоздатьРабочийСервер(Кластер1С, Оборудование, Настройки)
    
    ЕдиницаМасштабированияПараметры = Новый Соответствие;
    ЕдиницаМасштабированияПараметры.Вставить("equipmentLocationRef", Кластер1С.ПлощадкаЭксплуатации);
    
    Если ТипЗнч(Оборудование) = Тип("Соответствие") Тогда
        ОборудованиеМассив = Новый Массив;
        ОборудованиеМассив.Добавить(Оборудование);
        ЕдиницаМасштабированияПараметры.Вставить("equipment", ОборудованиеМассив);
    КонецЕсли;
        
    РабочиеСервера = Новый Массив;
    ЕдиницаМасштабированияПараметры.Вставить("workingServer1C", РабочиеСервера);
    
    РабочийСервер = Новый Соответствие;
    РабочиеСервера.Добавить(РабочийСервер);
    РабочийСервер.Вставить("tempDirectory", "");
    РабочийСервер.Вставить("dataDirectory", "");
    РабочийСервер.Вставить("uuid", Настройки["УникальныйИдентификаторОбъекта"]);
    РабочийСервер.Вставить("connectionsPerWorkingProcessLimit", Настройки["КоличествоСоединенийНаПроцесс"]);
    РабочийСервер.Вставить("description", Настройки["ОписаниеСервера"]);
    РабочийСервер.Вставить("equipment", Настройки["Хост"]);
    РабочийСервер.Вставить("equipmentDescr", Настройки["Хост"]);
    РабочийСервер.Вставить("name", Настройки["ОписаниеСервера"]);
    РабочийСервер.Вставить("cluster1CRef", Кластер1С);
    РабочийСервер.Вставить("portRange", Настройки["ДиапазоныПортов"]);
    РабочийСервер.Вставить("mainPort", Настройки["IPПорт"]);
    РабочийСервер.Вставить("safeWorkingProcessesMemoryLimit", Настройки["МаксимальныйОбъемПамятиРабочихПроцессов"]);
    РабочийСервер.Вставить("safeCallMemoryLimit", Настройки["БезопасныйРасходПамятиЗаОдинВызов"]);
    РабочийСервер.Вставить("workingProcessMemoryLimit", Настройки["ОбъемПамятиРабочихПроцессовДоКоторогоСерверСчитаетсяПроизводительным"]);
    РабочийСервер.Вставить("infoBasesPerWorkingProcessLimit", Настройки["КоличествоИбНаПроцесс"]);
    РабочийСервер.Вставить("clusterMainPort", Настройки["ПортГлавногоМенеджераКластера"]);
    РабочийСервер.Вставить("mainServer", Настройки["ЦентральныйСервер"]);
    РабочийСервер.Вставить("dedicatedManagers", Настройки["МенеджерНаКаждыйСервис"]);
    РабочийСервер.Вставить("dataDirectoryNetwork", "");
    РабочийСервер.Вставить("settingsDirectory", "");
    РабочийСервер.Вставить("settingsDirectoryNetwork", "");
    
    ЕдиницаМасштабирования.ЗагрузитьЕдиницуМасштабирования(ЕдиницаМасштабированияПараметры, Неопределено);
    
КонецПроцедуры

#КонецОбласти

#Область Лицензии

Процедура СчетчикиСерверныхЛицензий(Результат)
    
    ЛицензииУникальные = Новый Соответствие;
    
    Для Каждого РабочийПроцесс Из Результат["РабочиеПроцессы"] Цикл
        
        Для Каждого Лицензия Из РабочийПроцесс.Значение["Лицензии"]["Лицензии"] Цикл
            
            ЛицензияУникальная = ЛицензииУникальные[Лицензия.СерияКлюча];
            Если ЛицензияУникальная = Неопределено Тогда
                ЛицензияУникальная = ЛицензияУникальная(Лицензия, "rphost", 1);
                ЛицензияУникальная.Вставить("count", 1);
                ЛицензииУникальные.Вставить(Лицензия.СерияКлюча, ЛицензияУникальная); 
            КонецЕсли;
                        
        КонецЦикла;
        
    КонецЦикла;
    
    ЛицензииДляЗаписи = Новый Массив;
    Для Каждого Лицензия Из ЛицензииУникальные Цикл
        ЛицензииДляЗаписи.Добавить(Лицензия.Значение);
    КонецЦикла;
    
    Если ЛицензииДляЗаписи.Количество() > 0 Тогда
        ЗаписьJSON = Новый ЗаписьJSON();
        ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
        ЗаписатьJSON(ЗаписьJSON, ЛицензииДляЗаписи);
        РегистрыСведений.ПараметрыКластераБуфер.ЗаписатьДанные("ПЛИЦ", ЗаписьJSON.Закрыть());
    КонецЕсли;
        
КонецПроцедуры

Функция ЛицензияУникальная(Лицензия, Приложение, ТипЛицензии)
    
    ЛицензияУникальная = Новый Соответствие;
    ЛицензияУникальная.Вставить("licenseKind", ТипЛицензии);
    ЛицензияУникальная.Вставить("licenseType", ?(Лицензия.ПрограммнаяЛицензия,1,0));
    ЛицензияУникальная.Вставить("net", Лицензия.СетевойКлюч);
    ЛицензияУникальная.Вставить("maxUserCur", Лицензия.МаксимальноеКоличествоПользователей);
    ЛицензияУникальная.Вставить("maxUserAll", Лицензия.МаксимальноеКоличествоПользователейПрограммнойЛицензии);
    ЛицензияУникальная.Вставить("issusedByServer", Лицензия.ПолученаСервером);
    ЛицензияУникальная.Вставить("host", Лицензия.АдресСервера);
    ЛицензияУникальная.Вставить("appId", Приложение);
    ЛицензияУникальная.Вставить("name", Лицензия.КраткоеПредставление);
    ЛицензияУникальная.Вставить("count", 0);
        
    Возврат ЛицензияУникальная;
    
КонецФункции

Процедура СчетчикиКлиентскихЛицензий(Результат)
    
    ЛицензииУникальные = Новый Соответствие;
    
    Для Каждого ИнформационнаяБаза Из Результат["ИнформационныеБазы"] Цикл
        
        Для Каждого Сеанс Из ИнформационнаяБаза.Значение["Сеансы"] Цикл
            СчетчикКлиентскойЛицении(ЛицензииУникальные, Сеанс.Значение);
        КонецЦикла;
                
    КонецЦикла;
    
    ЛицензииДляЗаписи = Новый Массив;
    Для Каждого Лицензия Из ЛицензииУникальные Цикл
        Лицензия.Значение["count"] = Лицензия.Значение["count"] + Лицензия.Значение["Компьютеры"].Количество();
        Лицензия.Значение.Удалить("Компьютеры");
        ЛицензииДляЗаписи.Добавить(Лицензия.Значение);
    КонецЦикла;
    
    Если ЛицензииДляЗаписи.Количество() > 0 Тогда
        ЗаписьJSON = Новый ЗаписьJSON();
        ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
        ЗаписатьJSON(ЗаписьJSON, ЛицензииДляЗаписи);
        РегистрыСведений.ПараметрыКластераБуфер.ЗаписатьДанные("ПЛИЦ", ЗаписьJSON.Закрыть());
    КонецЕсли;
    
КонецПроцедуры

Процедура СчетчикКлиентскойЛицении(ЛицензииУникальные, Сеанс)
    
    Для Каждого Лицензия Из Сеанс["Лицензия"]["Лицензии"] Цикл
        
        ЛицензияУникальная = ЛицензииУникальные[Лицензия.СерияКлюча];
        Если ЛицензияУникальная = Неопределено Тогда
            ЛицензияУникальная = ЛицензияУникальная(Лицензия, Сеанс["Приложение"], 0);
            ЛицензияУникальная.Вставить("Компьютеры", Новый Соответствие);
            ЛицензииУникальные.Вставить(Лицензия.СерияКлюча, ЛицензияУникальная);
        КонецЕсли;
        
        РасчетУникальностиЛицензии(ЛицензияУникальная, Лицензия, Сеанс);
                
    КонецЦикла;
    
КонецПроцедуры

Процедура РасчетУникальностиЛицензии(ЛицензияУникальная, Лицензия, Сеанс)
    
    Если Лицензия.ПрограммнаяЛицензия Тогда
        РасчетУникальностиЛицензияПрограммная(ЛицензияУникальная, Лицензия, Сеанс);
    Иначе
        РасчетУникальностиЛицензияАппаратная(ЛицензияУникальная, Лицензия, Сеанс);
    КонецЕсли;
        
КонецПроцедуры

Процедура РасчетУникальностиЛицензияПрограммная(ЛицензияУникальная, Лицензия, Сеанс)
    
    Если Лицензия.МаксимальноеКоличествоПользователей > 1 И Лицензия.МаксимальноеКоличествоПользователейПрограммнойЛицензии > 1 Тогда
        ЛицензияУникальнаяДобавитьПоСеансу(ЛицензияУникальная);
    ИначеЕсли Лицензия.МаксимальноеКоличествоПользователей = 1 И Лицензия.МаксимальноеКоличествоПользователейПрограммнойЛицензии > 1 Тогда
        ЛицензияУникальнаяДобавитьПоКомпьютеру(ЛицензияУникальная, Сеанс);
    ИначеЕсли Лицензия.МаксимальноеКоличествоПользователей = 1 И Лицензия.МаксимальноеКоличествоПользователейПрограммнойЛицензии = 1 Тогда
        ЛицензияУникальнаяДобавитьПоКомпьютеру(ЛицензияУникальная, Сеанс);
    КонецЕсли;
    
КонецПроцедуры

Процедура РасчетУникальностиЛицензияАппаратная(ЛицензияУникальная, Лицензия, Сеанс)
    
    Если Лицензия.СетевойКлюч Тогда
        РасчетУникальностиЛицензияАппаратнаяСетевойКлюч(ЛицензияУникальная, Лицензия, Сеанс);
    Иначе
        ЛицензияУникальнаяДобавитьПоКомпьютеру(ЛицензияУникальная, Сеанс);
    КонецЕсли;
    
КонецПроцедуры

Процедура РасчетУникальностиЛицензияАппаратнаяСетевойКлюч(ЛицензияУникальная, Лицензия, Сеанс)
    
    Если Лицензия.ПолученаСервером Тогда
        ЛицензияУникальнаяДобавитьПоСеансу(ЛицензияУникальная);
    Иначе
        ЛицензияУникальнаяДобавитьНеПолученаСервером(ЛицензияУникальная, Лицензия, Сеанс);
    КонецЕсли;
    
КонецПроцедуры

Процедура ЛицензияУникальнаяДобавитьНеПолученаСервером(ЛицензияУникальная, Лицензия, Сеанс)
    
    Приложение = Сеанс["Приложение"];
    Компьютер = Сеанс["Компьютер"];
    
    Если Приложение = "1CV8C" Тогда
        Если ЗначениеЗаполнено(Компьютер) Тогда
            ЛицензияУникальнаяДобавитьПоКомпьютеру(ЛицензияУникальная, Сеанс);
        Иначе
            ЛицензияУникальнаяДобавитьПоСеансу(ЛицензияУникальная);
        КонецЕсли;
    ИначеЕсли Приложение = "WebClient" Тогда
        ЛицензияУникальнаяДобавитьПоСеансу(ЛицензияУникальная);
    ИначеЕсли Приложение = "1CV8" Тогда
        Если ЗначениеЗаполнено(Компьютер) Тогда
            ЛицензияУникальнаяДобавитьПоКомпьютеру(ЛицензияУникальная, Сеанс);
        Иначе
            ЛицензияУникальнаяДобавитьПоСеансу(ЛицензияУникальная);
        КонецЕсли;
    ИначеЕсли Приложение = "Designer" Тогда
        ЛицензияУникальнаяДобавитьПоКомпьютеру(ЛицензияУникальная, Сеанс);
    ИначеЕсли Приложение = "COMConnection" Тогда
        ЛицензияУникальнаяДобавитьПоКомпьютеру(ЛицензияУникальная, Сеанс);
    КонецЕсли;
        
КонецПроцедуры

Процедура ЛицензияУникальнаяДобавитьПоСеансу(ЛицензияУникальная)
    
    ЛицензияУникальная["count"] = ЛицензияУникальная["count"] + 1;
    
КонецПроцедуры

Процедура ЛицензияУникальнаяДобавитьПоКомпьютеру(ЛицензияУникальная, Сеанс)
    
    Компьютеры = ЛицензияУникальная["Компьютеры"];
    Компьютер = Компьютеры[Сеанс["Компьютер"]];
    Если Компьютер = Неопределено Тогда
        Компьютеры.Вставить(Сеанс["Компьютер"], 1);
    КонецЕсли;        
    
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ДобавитьСчетчикиКластераПоТипуПриложения(СчетчикиКластера, СчетчикиИБ)
    
    Для Каждого СчетчикИБ Из СчетчикиИБ Цикл
        
        СчетчикКластер = СчетчикиКластера[СчетчикИБ.Ключ];
        Если СчетчикКластер = Неопределено Тогда
            СчетчикКластер = 0;
        КонецЕсли;
        СчетчикКластер = СчетчикКластер + ?(ЗначениеЗаполнено(СчетчикИБ.Значение["cur"]),СчетчикИБ.Значение["cur"],0);
        
        СчетчикиКластера.Вставить(СчетчикИБ.Ключ, СчетчикКластер)
        
    КонецЦикла;
    
КонецПроцедуры

Функция ЗапросВерсияДанныхКластер(Ссылка)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ВерсияДанных
    |ИЗ
    |   Справочник.ОбъектыКонтроля
    |ГДЕ
    |   Ссылка = &Ссылка
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    
    Возврат Запрос;
    
КонецФункции

Функция ЗапросВерсияДанныхРабочийСервер(Ссылка)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ВерсияДанных
    |ИЗ
    |   Справочник.ОбъектыКонтроля
    |ГДЕ
    |   Ссылка = &Ссылка
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    
    Возврат Запрос;
    
КонецФункции

Функция ЗапросВерсияДанныхИнформационнаяБаза(Ссылка)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ВерсияДанных
    |ИЗ
    |   Справочник.ОбъектыКонтроля
    |ГДЕ
    |   Ссылка = &Ссылка
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    
    Возврат Запрос;
    
КонецФункции

Функция ЗапросВерсияДанныхКонтрольнаяПроцедура(Ссылка)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ВерсияДанных
    |ИЗ
    |   Справочник.КонтрольныеПроцедуры
    |ГДЕ
    |   Ссылка = &Ссылка
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    
    Возврат Запрос;
    
КонецФункции

Функция ВерсияДанных(Запрос)
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Выборка.Следующий();
    
    Возврат Выборка.ВерсияДанных;
    
КонецФункции

Процедура УстановитьНомераРабочихПроцессов(РабочиеПроцессы, НомераРабочихПроцессов)
       
    Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
        
        НомераРабочихПроцессовСервера = НомераРабочихПроцессов[РабочийПроцесс["УникальныйИдентификаторРабочегоСервера"]];
        Если НомераРабочихПроцессовСервера = Неопределено Тогда
            НомераРабочихПроцессовСервера = Новый Массив;
            НомераРабочихПроцессов.Вставить(РабочийПроцесс["УникальныйИдентификаторРабочегоСервера"], НомераРабочихПроцессовСервера);
        КонецЕсли;
        
        Для Индекс = 0 По НомераРабочихПроцессовСервера.ВГраница() Цикл
            
            ЕстьРабочийПроцесс = Ложь;
            Для ИндексПроцесса = 0 По РабочиеПроцессы.ВГраница() Цикл
                Если РабочиеПроцессы[ИндексПроцесса]["Активен"] Тогда
                    ЕстьРабочийПроцесс = Истина;
                    Прервать;
                КонецЕсли;
            КонецЦикла;
            
            Если НЕ ЕстьРабочийПроцесс Тогда
                НомераРабочихПроцессовСервера[Индекс] = Неопределено;
            КонецЕсли;
                               
        КонецЦикла;
                
        Если РабочийПроцесс["Активен"] Тогда
            УстановитьНомерРабочемуПроцессу(РабочийПроцесс, НомераРабочихПроцессовСервера);
        КонецЕсли;
                
    КонецЦикла;
    
КонецПроцедуры

Процедура УстановитьНомерРабочемуПроцессу(РабочийПроцесс, НомераРабочихПроцессов)
    
    СвободныйНомер = -1;
    Для Индекс = 0 По НомераРабочихПроцессов.ВГраница() Цикл
        
        Если НомераРабочихПроцессов[Индекс] = Неопределено Тогда
            
            НомераРабочихПроцессов[Индекс] = РабочийПроцесс["ИдентификаторПроцесса"];
            СвободныйНомер = Индекс + 1;
            Прервать;
            
        ИначеЕсли НомераРабочихПроцессов[Индекс] = РабочийПроцесс["ИдентификаторПроцесса"] Тогда
            
            СвободныйНомер = Индекс + 1;
            Прервать;            
            
        КонецЕсли;
        
    КонецЦикла;
    
    Если СвободныйНомер = -1 Тогда
        НомераРабочихПроцессов.Добавить(РабочийПроцесс["ИдентификаторПроцесса"]);
        СвободныйНомер = НомераРабочихПроцессов.Количество();
    КонецЕсли;
    
    РабочийПроцесс.Вставить("Имя", "rphost #" + Формат(СвободныйНомер, "ЧГ=0"));
    
КонецПроцедуры

Процедура ДобавитьЗначениеСчетчиков(Счетчики, СчетчикиПоТипуПриложения, Ключ, Величина)
    
    ДобавитьЗначениеСчетчика(Счетчики, Ключ, Величина);
    ДобавитьЗначениеСчетчикаПоТипуПриложения(Счетчики, СчетчикиПоТипуПриложения, Ключ);
    
КонецПроцедуры

Процедура ДобавитьЗначениеСчетчика(Счетчики, Ключ, Величина)
    
    ЗначениеСчетчика = Счетчики[Ключ];
    Если ЗначениеСчетчика = Неопределено Тогда
        ЗначениеСчетчика = ЗначениеСчетчика(Величина);
        Счетчики.Вставить(Ключ, ЗначениеСчетчика); 
    Иначе
        ЗначениеСчетчикаИзменить(ЗначениеСчетчика, Величина);
    КонецЕсли;
    
КонецПроцедуры

Процедура ДобавитьЗначениеСчетчикаПоТипуПриложения(Счетчики, СчетчикиПоТипуПриложения, Знач Ключ)
    
    Ключ = Ключ + "ПоТипуПриложения";
    
    СчетчиковПоТипуПриложения = Счетчики[Ключ];
    Если СчетчиковПоТипуПриложения = Неопределено Тогда
        СчетчиковПоТипуПриложения = Новый Соответствие;
        Счетчики.Вставить(Ключ, СчетчиковПоТипуПриложения);
    КонецЕсли;
    
    Для Каждого ТекЗначение Из СчетчикиПоТипуПриложения Цикл
        ДобавитьЗначениеСчетчика(СчетчиковПоТипуПриложения, ТекЗначение.Ключ, ТекЗначение.Значение);
    КонецЦикла;
            
КонецПроцедуры

Процедура ДобавитьПоТипуПриложения(СеансыПоТипуПриложения, ТипПриложения, ВеличинаДобавить)
    
    Величина = СеансыПоТипуПриложения[ТипПриложения];
    Если Величина = Неопределено Тогда
        Величина = 0;
    КонецЕсли;
    Величина = Величина + ВеличинаДобавить;
    
    СеансыПоТипуПриложения.Вставить(ТипПриложения, Величина);
    
КонецПроцедуры

Функция ЗначениеСчетчика(Величина)
    
    ЗначениеСчетчика = Новый Соответствие;
    ЗначениеСчетчика.Вставить("cur", Величина);
    ЗначениеСчетчика.Вставить("min", Величина);
    ЗначениеСчетчика.Вставить("max", Величина);
    ЗначениеСчетчика.Вставить("sum", Величина);
    ЗначениеСчетчика.Вставить("counter", 1);
    
    Возврат ЗначениеСчетчика;    
    
КонецФункции

Процедура ЗначениеСчетчикаИзменить(ЗначениеСчетчика, Величина)
    
    ЗначениеСчетчика.Вставить("cur", Величина);
    
    Если ЗначениеСчетчика["min"] > Величина Тогда
        ЗначениеСчетчика["min"] = Величина;
    КонецЕсли;
    
    Если ЗначениеСчетчика["max"] < Величина Тогда
        ЗначениеСчетчика["max"] = Величина;
    КонецЕсли;
    
    ЗначениеСчетчикаSum = ЗначениеСчетчика["sum"]; 
    Если ЗначениеЗаполнено(ЗначениеСчетчикаSum) Тогда
        ЗначениеСчетчика["sum"] = ЗначениеСчетчикаSum + Величина;
    Иначе
        ЗначениеСчетчика.Вставить("sum", Величина);
    КонецЕсли;
    
    ЗначениеСчетчика["counter"] = ЗначениеСчетчика["counter"] + 1;    
    
КонецПроцедуры

Функция ОписаниеКонтроляПараметров(СвойстваНовые, Настройки, НастройкиКонтроля)
    
    Описание = Новый Соответствие;
    
    Для Каждого ТекНастройка Из НастройкиКонтроля Цикл
        
        Если ТекНастройка.Значение Тогда
            
            Если СвойстваНовые[ТекНастройка.Ключ] <> Настройки[ТекНастройка.Ключ] Тогда
                
                Значение = Новый Соответствие;
                Значение.Вставить("value", СвойстваНовые[ТекНастройка.Ключ]);
                Значение.Вставить("referenceValue", Настройки[ТекНастройка.Ключ]);
                Описание.Вставить(ТекНастройка.Ключ, Значение);
                
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат Описание;
    
КонецФункции

Функция СчетчикиКластера(СчетчикиКластера, ПрефиксСчетчики)
    
    СчетчикиЗаписать = Новый Массив;
    
    ИмяСчетчика = Новый Массив(Новый ФиксированныйМассив(ПрефиксСчетчики));
    ИмяСчетчика.Добавить("Сеансов");
    ДобавитьВМассивСчетчик(СчетчикиЗаписать, ИмяСчетчика, СчетчикиКластера["Сеансов"]);
    
    Для Каждого СчетчикСеансовПоТипу Из СчетчикиКластера["СеансовПоТипуПриложения"] Цикл
        
        ИмяСчетчикаПоТипу = Новый Массив(Новый ФиксированныйМассив(ИмяСчетчика));
        ИмяСчетчикаПоТипу.Добавить(СчетчикСеансовПоТипу.Ключ);
        ДобавитьВМассивСчетчик(СчетчикиЗаписать, ИмяСчетчикаПоТипу, СчетчикСеансовПоТипу.Значение);
        
    КонецЦикла;
    
    ИмяСчетчика = Новый Массив(Новый ФиксированныйМассив(ПрефиксСчетчики));
    ИмяСчетчика.Добавить("Завершенных рабочих процессов");
    ДобавитьВМассивСчетчик(СчетчикиЗаписать, ИмяСчетчика, СчетчикиКластера["Завершенных рабочих процессов"]);
    
    Возврат СчетчикиЗаписать;
    
КонецФункции

Функция СчетчикиВМассив(Счетчики, ПрефиксСчетчики)
    
    СчетчикиМассив = Новый Массив;
    
    Для Каждого Счетчик Из Счетчики Цикл
        
        ИмяСчетчика = Новый Массив(Новый ФиксированныйМассив(ПрефиксСчетчики));
        ИмяСчетчика.Добавить(Счетчик.Ключ);
        
        Счетчик = Новый Соответствие(Новый ФиксированноеСоответствие(Счетчик.Значение));
        Счетчик.Вставить("avg", ОКР(Счетчик["sum"]/Счетчик["counter"],5));
        Счетчик.Удалить("cur");
        Счетчик.Удалить("sum");
        Счетчик.Вставить("name", ИмяСчетчика);
        
        СчетчикиМассив.Добавить(Счетчик);
        
    КонецЦикла;
    
    Возврат СчетчикиМассив;
    
КонецФункции

Процедура ДобавитьВМассив(Куда, Откуда)
    
    Для Каждого Элемент Из Откуда Цикл
        Куда.Добавить(Элемент);
    КонецЦикла;
        
КонецПроцедуры

Процедура ДобавитьВМассивЗначение(Куда, ИмяСчетчика, Величина)
    
    Счетчик = ЗначениеСчетчика(Величина);
    ПреобразоватьСчетчик(Счетчик);
    Счетчик.Вставить("name", ИмяСчетчика);
    Куда.Добавить(Счетчик);
    
КонецПроцедуры

Процедура ДобавитьВМассивСчетчик(Куда, ИмяСчетчика, Счетчик)
    
    СчетчикНовый = Новый Соответствие(Новый ФиксированноеСоответствие(Счетчик));
    ПреобразоватьСчетчик(Счетчик);
    Счетчик.Вставить("name", ИмяСчетчика);
    Куда.Добавить(Счетчик);
    
КонецПроцедуры

Процедура ПреобразоватьСчетчик(Счетчик)
    
    СчетчикSum = ?(ЗначениеЗаполнено(Счетчик["sum"]),Счетчик["sum"],0);
    СчетчикСounter = ?(ЗначениеЗаполнено(Счетчик["counter"]),Счетчик["counter"],0);
    
    Если СчетчикСounter <> 0 Тогда
        Счетчик.Вставить("avg", ОКР(СчетчикSum/СчетчикСounter,5));
    Иначе
        Счетчик.Вставить("avg", 0);
    КонецЕсли;
    
    Счетчик.Удалить("cur");
    Счетчик.Удалить("sum");
    
КонецПроцедуры

Функция СчетчикиРабочихСерверов(РабочиеСервера, РабочиеПроцессы, ПрефиксСчетчики)
    
    СчетчикиЗаписать = Новый Массив;
    
    ИмяСчетчика = Новый Массив(Новый ФиксированныйМассив(ПрефиксСчетчики));
    ИмяСчетчика.Добавить("Рабочих серверов");
    ДобавитьВМассивЗначение(СчетчикиЗаписать, ИмяСчетчика, РабочиеСервера.Количество()); 
    
    Для Каждого РабочийСервер Из РабочиеСервера Цикл
        
        РабочийСерверЗначение = РабочийСервер.Значение;
        
        ИмяСчетчикаРабочийСервер = Новый Массив(Новый ФиксированныйМассив(ИмяСчетчика));
        ИмяСчетчикаРабочийСервер.Добавить(РабочийСерверЗначение["Хост"]);
        
        СчетчикиРабочегоСервера = СчетчикиВМассив(РабочийСерверЗначение["Счетчики"], ИмяСчетчикаРабочийСервер);
        ДобавитьВМассив(СчетчикиЗаписать, СчетчикиРабочегоСервера);        
        
        ИмяСчетчикаРабочихПроцессов = Новый Массив(Новый ФиксированныйМассив(ИмяСчетчикаРабочийСервер));
        ИмяСчетчикаРабочихПроцессов.Добавить("Рабочих процессов");
        
        РабочихПроцессов = 0;
        Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
            
            Если РабочийПроцесс.Значение["УникальныйИдентификаторРабочегоСервера"] = РабочийСерверЗначение["УникальныйИдентификаторОбъекта"] Тогда
                
                РабочихПроцессов = РабочихПроцессов + 1;
                
                ИмяСчетчикаРабочийПроцесс = Новый Массив(Новый ФиксированныйМассив(ИмяСчетчикаРабочихПроцессов));
                ИмяСчетчикаРабочийПроцесс.Добавить(РабочийПроцесс.Значение["Имя"]);
                ДобавитьВМассивЗначение(СчетчикиЗаписать, ИмяСчетчикаРабочийПроцесс, 1);
                
                СчетчикиРабочегоПроцесса = СчетчикиВМассив(РабочийПроцесс.Значение["Счетчики"], ИмяСчетчикаРабочийПроцесс);
                ДобавитьВМассив(СчетчикиЗаписать, СчетчикиРабочегоПроцесса);
                
            КонецЕсли;
                        
        КонецЦикла;
        
        ДобавитьВМассивЗначение(СчетчикиЗаписать, ИмяСчетчикаРабочихПроцессов, РабочихПроцессов);
                        
    КонецЦикла;
    
    Возврат СчетчикиЗаписать;
    
КонецФункции

Функция СчетчикиРабочихПроцессовКластер(РабочиеПроцессы, ПрефиксСчетчики)
    
    СчетчикиЗаписать = Новый Массив;
    
    ИмяСчетчика = Новый Массив(Новый ФиксированныйМассив(ПрефиксСчетчики));
    ИмяСчетчика.Добавить("Рабочих процессов");
    ДобавитьВМассивЗначение(СчетчикиЗаписать, ИмяСчетчика, РабочиеПроцессы.Количество());
    
    Возврат СчетчикиЗаписать;
    
КонецФункции

Функция СчетчикИнформационныхБазКластера(ИмяСчетчика, Количество)
    
    Счетчик = Новый Соответствие;
    Счетчик.Вставить("name", Новый ФиксированныйМассив(ИмяСчетчика));
    Счетчик.Вставить("min", Количество);
    Счетчик.Вставить("avg", Количество);
    Счетчик.Вставить("max", Количество);
    Счетчик.Вставить("counter", 1);
    
    Возврат Счетчик;
    
КонецФункции

Функция СчетчикиИнформационнойБазы(ИнформационнаяБаза, Счетчики, ПрефиксСчетчики)
    
    СчетчикиЗаписать = Новый Массив;
    
    ИмяСчетчикаПрефикс = Новый Массив(Новый ФиксированныйМассив(ПрефиксСчетчики));
    ИмяСчетчикаПрефикс.Добавить(ИнформационнаяБаза);
    
    Ключи = Новый Массив;
    Ключи.Добавить("Сеансов");
    Ключи.Добавить("Время вызова текущее, мсек.");
    Ключи.Добавить("Сеансов в вызове");
    Ключи.Добавить("Сеансов в вызове > 5 сек");
    Ключи.Добавить("Сеансов в вызове > 20 сек");
    Ключи.Добавить("Время вызова СУБД текущее, мсек");
    Ключи.Добавить("Сеансов в вызове СУБД");
    Ключи.Добавить("Сеансов заблокировано СУБД");
    Ключи.Добавить("Сеансов заблокировано упр");
    Ключи.Добавить("Память текущая, байт");
    Ключи.Добавить("Чтение текущее, байт");
    Ключи.Добавить("Запись текущая, байт");
    
    Для Каждого Ключ Из Ключи Цикл
        СчетчикиКлюч = СчетчикиИнформационнойБазыКлюч(Ключ, Счетчики, ИмяСчетчикаПрефикс);
        ДобавитьСчетчики(СчетчикиЗаписать, СчетчикиКлюч);
    КонецЦикла;
               
    Возврат СчетчикиЗаписать;
    
КонецФункции

Процедура ДобавитьСчетчики(Куда, Откуда)
    
    Для Каждого ТекОткуда Из Откуда Цикл
        Куда.Добавить(ТекОткуда);
    КонецЦикла;
        
КонецПроцедуры

Функция СчетчикиИнформационнойБазыКлюч(Ключ, Счетчики, ИмяСчетчикаПрефикс)
    
    СчетчикиЗаписать = Новый Массив;
    
    ИмяСчетчика =  Новый Массив(Новый ФиксированныйМассив(ИмяСчетчикаПрефикс));
    ИмяСчетчика.Добавить(Ключ);
    
    ДобавитьВМассивСчетчик(СчетчикиЗаписать, ИмяСчетчика, Счетчики[Ключ]);
        
    СчетчикиПоТипуПриложения = Счетчики[Ключ + "ПоТипуПриложения"];
    Для Каждого ТекСчетчик Из СчетчикиПоТипуПриложения Цикл
        
        ИмяСчетчикаПоТипу = Новый Массив(Новый ФиксированныйМассив(ИмяСчетчика));
        ИмяСчетчикаПоТипу.Добавить(ТекСчетчик.Ключ);
        ДобавитьВМассивСчетчик(СчетчикиЗаписать, ИмяСчетчикаПоТипу, ТекСчетчик.Значение);
        
    КонецЦикла;
        
    Возврат СчетчикиЗаписать;
    
    
КонецФункции

Функция НастройкиМониторинга()
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ОбъектКонтроля КАК Кластер1С,
    |   Ссылка КАК КонтрольнаяПроцедура
    |ИЗ
    |   Справочник.КонтрольныеПроцедуры
    |ГДЕ
    |   Владелец = &КонтрольПотребленияПамяти
    |   И Выполнять
    |   И НЕ Пауза
    |   И НЕ ПометкаУдаления
    |";
    
    Запрос.УстановитьПараметр("КонтрольПотребленияПамяти", Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти());
    
    Возврат Запрос.Выполнить();    
    
КонецФункции

Функция Инцидент(Описание = Неопределено)
    
    Инцидент = Новый Соответствие;
    Инцидент.Вставить("date", Формат(ТекущаяДата(), "ДФ='yyyyMMddHHmmss'"));
    Инцидент.Вставить("descr", Описание);
    
    Возврат Инцидент;
    
КонецФункции

Процедура ПриОбновлении(ТекущаяВерсия, СохраненнаяВерсия) Экспорт
	Если СохраненнаяВерсия <= "2.0.8.11" И ТекущаяВерсия > "2.0.8.11" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МониторингСеансов.Кластер,
		|	МониторингСеансов.Время
		|ИЗ
		|	РегистрСведений.МониторингСеансов КАК МониторингСеансов";
		Выборка = Запрос.Выполнить().Выбрать();
		Набор = РегистрыСведений.МониторингСеансов.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СоздатьПредопределеннуюЗаписьОСеансе(Набор, Выборка.Кластер, Выборка.Время);
		КонецЦикла;
		Набор.Записать(Ложь);
	КонецЕсли;
КонецПроцедуры

// Проверяет возможность установления 
// COM-соединения с кластером 1с, задаваемым параметрами
//
// Параметры:
//  АдресКластера - Строка,
//  ПортКластера - Число
//	Администратор - Строка, 
//	Пароль - Строка, 
//
// Возвращаемое значение:
//  Структура - параметры соединения
//
Функция ПроверитьСоединениеСКластером(АдресКластера, ПортКластера, Администратор, Пароль, ВерсияПлатформы) Экспорт
    
    Попытка
		МенеджерСоединений = Общий.ПолучитьComСоединитель(ВерсияПлатформы);
		СоединениеСЦентральнымСервером = МенеджерСоединений.ConnectAgent(АдресКластера);
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ПроверитьСоединениеСКластером", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.КонтрольПамятиСервер,,Комментарий);
			
		Текст = "Ошибка создания com-соединения: " + Комментарий;
		ВызватьИсключение Текст;
	КонецПопытки;
	
	Попытка
		СписокКластеров = СоединениеСЦентральнымСервером.GetClusters();
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ПроверитьСоединениеСКластером", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.КонтрольПамятиСервер,,Комментарий);
			
		Текст = "Ошибка получения списка кластеров: " + Комментарий;
		ВызватьИсключение Текст;
	КонецПопытки;
	
	НомерКластера = СписокКластеров.GetLowerBound();
	МаксимальныйИндекс = СписокКластеров.GetUpperBound();
	Пока НомерКластера <= МаксимальныйИндекс Цикл
		Кластер = СписокКластеров.GetValue(НомерКластера);
		Если Кластер.MainPort = ПортКластера Тогда
			Прервать;
		КонецЕсли;
		НомерКластера = НомерКластера + 1;
	КонецЦикла;
	
	Если НомерКластера > МаксимальныйИндекс Тогда
		Текст = "Кластер с портом " + XMLСтрока(ПортКластера) + " не зарегистрирован на центральном сервере " + АдресКластера;		
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Кластер = СписокКластеров.GetValue(НомерКластера);
	
	Попытка
		СоединениеСЦентральнымСервером.Authenticate(Кластер, Администратор, Пароль);
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ПроверитьСоединениеСКластером", УровеньЖурналаРегистрации.Ошибка,	Метаданные.ОбщиеМодули.КонтрольПамятиСервер,,Комментарий);
			
		Текст = "Ошибка аутентификации администратора кластера: " + Комментарий;
		ВызватьИсключение Текст;
	КонецПопытки;
	
	Возврат Новый Структура("МенеджерСоединений, СоединениеСЦентральнымСервером, Кластер", МенеджерСоединений, СоединениеСЦентральнымСервером, Кластер);
		
КонецФункции

// Фиксирует информацию о расходовании памяти рабочим процессом кластера 
//
// Параметры:
// 	Массивы с соответствующими данными
//
Процедура ЗаписатьПоказанияПотребленияПамяти(ОбъектКонтроляСсылка, Время, Сервер, Процесс, Память, Изменение, СерверС, ПроцессС, База, НомерСоединения, Сеанс, Компьютер, Пользователь, Приложение, СписокНазванийБаз) Экспорт
	
	ЗаписатьПоказанияПотребленияПамятиБезусловно(
		ОбъектКонтроляСсылка,
		Время, 
		Сервер, 
		Процесс, 
		Память, 
		Изменение, 
		СерверС, 
		ПроцессС, 
		База, 
		НомерСоединения, 
		Сеанс, 
		Компьютер, 
		Пользователь, 
		Приложение,
		СписокНазванийБаз
	);
	
КонецПроцедуры

Функция СписокРабочихСерверов(Кластер) Экспорт
	Серверы = Новый Массив;
	
	ЗапросШаблон = "
	|ВЫБРАТЬ
	|    Процессы.Сервер КАК Сервер
	|ИЗ 
	|    РегистрСведений.МониторингПроцессов Как Процессы
	|ГДЕ 
	|    Процессы.Кластер = &Кластер
	|
	|СГРУППИРОВАТЬ ПО Процессы.Сервер";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кластер", Кластер);
	Запрос.Текст = ЗапросШаблон;
	
	ВыборкаЗамеров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗамеров.Следующий() Цикл
		Серверы.Добавить(ВыборкаЗамеров.Сервер);
	КонецЦикла;
	
	Возврат Серверы;
КонецФункции

Процедура УдалитьСтарыеДанные(Кластер, СрокХраненияДанных) Экспорт
    
    ТекущаяДата = ТекущаяДата();
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Время", ТекущаяДата - 3600 * СрокХраненияДанных);
    Запрос.УстановитьПараметр("Кластер", Кластер);
    
    МониторингСеансовЕстьУдаление = Истина;
    МониторингПроцессовЕстьУдаление = Истина;
    
    Пока МониторингСеансовЕстьУдаление ИЛИ МониторингПроцессовЕстьУдаление Цикл
        
        Если МониторингСеансовЕстьУдаление Тогда
            
            Запрос.Текст = " 
            |ВЫБРАТЬ ПЕРВЫЕ 1
            |	МониторингСеансов.Время КАК Время
            |ИЗ
            |	РегистрСведений.МониторингСеансов КАК МониторингСеансов
            |ГДЕ
            |	МониторингСеансов.Кластер = &Кластер
            |	И МониторингСеансов.Время < &Время
            |УПОРЯДОЧИТЬ ПО
            |   МониторингСеансов.Время ВОЗР
            |";
            
            РезультатЗапроса = Запрос.Выполнить();
            
            Если НЕ РезультатЗапроса.Пустой() Тогда
                
                Выборка = РезультатЗапроса.Выбрать();
                Выборка.Следующий();
                
                НаборЗаписей = РегистрыСведений.МониторингСеансов.СоздатьНаборЗаписей();
                НаборЗаписей.Отбор.Время.Установить(Выборка.Время);
                НаборЗаписей.Отбор.Кластер.Установить(Кластер);
                НаборЗаписей.Записать(Истина);
                
            Иначе
                
                МониторингСеансовЕстьУдаление = Ложь;
                
            КонецЕсли;
            
        КонецЕсли;
        
        Если МониторингПроцессовЕстьУдаление Тогда
            
            Запрос.Текст = "
            |ВЫБРАТЬ ПЕРВЫЕ 1
            |	МониторингПроцессов.Время КАК Время
            |ИЗ
            |	РегистрСведений.МониторингПроцессов КАК МониторингПроцессов
            |ГДЕ
            |	МониторингПроцессов.Кластер = &Кластер
            |	И МониторингПроцессов.Время < &Время
            |";
            
            РезультатЗапроса = Запрос.Выполнить();
            
            Если НЕ РезультатЗапроса.Пустой() Тогда
                
                Выборка = РезультатЗапроса.Выбрать();
                Выборка.Следующий();
                
                НаборЗаписей = РегистрыСведений.МониторингПроцессов.СоздатьНаборЗаписей();
                НаборЗаписей.Отбор.Время.Установить(Выборка.Время);
                НаборЗаписей.Отбор.Кластер.Установить(Кластер);
                НаборЗаписей.Записать();
                
            Иначе
                
                МониторингПроцессовЕстьУдаление = Ложь;
                
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ЗаписатьПоказанияПотребленияПамятиБезусловно(ОбъектКонтроляСсылка, Время, Сервер, Процесс, Память, Изменение, СерверС, ПроцессС, База, НомерСоединения, Сеанс, Компьютер, Пользователь, Приложение, Знач СписокНазванийБаз)
	
	ТекДата = ТекущаяДата();
	
	// Получаем предыдущие процессы кластера
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Сервер,
	|	Процесс
	|ИЗ
	|	РегистрСведений.МониторингПроцессовСрезПоследних
	|ГДЕ
	|	Кластер = &Кластер
	|";
	Запрос.УстановитьПараметр("Кластер", ОбъектКонтроляСсылка);
	
	ПроцессыКластера = Новый Соответствие;
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПроцессыКластера[Выборка.Сервер] = Неопределено Тогда
			ПроцессыКластера.Вставить(Выборка.Сервер, Новый Соответствие);
		КонецЕсли;
		ПроцессыКластера[Выборка.Сервер].Вставить(Выборка.Процесс, Истина);
	КонецЦикла;
		
	Набор = РегистрыСведений.МониторингПроцессов.СоздатьНаборЗаписей();
	
	МониторингПроцессовСрезПоследнихНаборЗаписей = РегистрыСведений.МониторингПроцессовСрезПоследних.СоздатьНаборЗаписей();
	МониторингПроцессовСрезПоследнихНаборЗаписей.Отбор.Кластер.Установить(ОбъектКонтроляСсылка);
	
	МаксимальныйИндекс = Сервер.ВГраница();
	
	ПроцессыКластераНовые = Новый Соответствие;
	Для Номер = 0 По МаксимальныйИндекс Цикл
		
		ТекущийПроцессСтр	= Процесс[Номер];
		ТекущийПроцессСтр	= СтрЗаменить(СокрЛП(ТекущийПроцессСтр), " ", "");
		ТекущийПроцессСтр	= СтрЗаменить(ТекущийПроцессСтр, Символы.НПП, "");
		
		Если ЗначениеЗаполнено(ТекущийПроцессСтр) Тогда 
			
			Запись					= Набор.Добавить();
			Запись.Время			= Время;
			Запись.Сервер			= Сервер[Номер];	
			Запись.Процесс			= Число(ТекущийПроцессСтр);
			Запись.ПроцессСтрокой	= ТекущийПроцессСтр;
			Запись.Память			= Память[Номер];
			Запись.Изменение		= Изменение[Номер];
			Запись.Кластер			= ОбъектКонтроляСсылка;
			
			НовЗаписьСрезПоследних = МониторингПроцессовСрезПоследнихНаборЗаписей.Добавить();
			НовЗаписьСрезПоследних.Кластер = ОбъектКонтроляСсылка;
			НовЗаписьСрезПоследних.Сервер = Сервер[Номер];
			НовЗаписьСрезПоследних.Процесс = Число(ТекущийПроцессСтр);
			НовЗаписьСрезПоследних.ДатаЗаписи = ТекДата;
			
			// Анализируем - новый ли это процесс
			Если ПроцессыКластераНовые[Сервер[Номер]] = Неопределено Тогда
				ПроцессыКластераНовые.Вставить(Сервер[Номер], 0);
			КонецЕсли;
			
			Если ПроцессыКластера[Сервер[Номер]] = Неопределено Тогда
				ПроцессыКластераНовые[Сервер[Номер]] = ПроцессыКластераНовые[Сервер[Номер]] + 1;
			Иначе
				Если ПроцессыКластера[Сервер[Номер]][Число(ТекущийПроцессСтр)] = Неопределено Тогда
					ПроцессыКластераНовые[Сервер[Номер]] = ПроцессыКластераНовые[Сервер[Номер]] + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Формируем счетчик по новым процессам
	Данные = Новый Массив;
            
    Для Каждого ТекСервер Из ПроцессыКластераНовые Цикл
        
        ЭлементДанных = Новый Соответствие;
        
        ИмяСчетчикаМассив = Новый Массив;
        ИмяСчетчикаМассив.Добавить("Кластеры 1С");
        ИмяСчетчикаМассив.Добавить(Строка(ОбъектКонтроляСсылка));
        ИмяСчетчикаМассив.Добавить(Строка(ТекСервер.Ключ));
        ИмяСчетчикаМассив.Добавить("Новых процессов");
        
        ЭлементДанных.Вставить("name", ИмяСчетчикаМассив);
        ЭлементДанных.Вставить("counter", 1);
        ЭлементДанных.Вставить("min", ТекСервер.Значение);
        ЭлементДанных.Вставить("max", ТекСервер.Значение);
        ЭлементДанных.Вставить("avg", ТекСервер.Значение); 
        
        Данные.Добавить(ЭлементДанных);
        
	КонецЦикла;
            
    Если Данные.Количество() > 0  Тогда
        
        ЗаписьJSON = Новый ЗаписьJSON();
        ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
        ЗаписатьJSON(ЗаписьJSON, Данные);
        ДанныеJSON = ЗаписьJSON.Закрыть();
        
        РегистрыСведений.СтатистикаБуфер.ДобавитьДанные(ДанныеJSON);
        
    КонецЕсли;
			
	Набор.Записать(Ложь);
	МониторингПроцессовСрезПоследнихНаборЗаписей.Записать(Истина);	
	
	МониторингСеансовДанные = Новый Соответствие();
    КлючиПолейОбщие = ИнициализироватьКлючиПолей();
    	
	МаксимальныйИндекс = Сеанс.ВГраница();
	РаспределениеСеансовПоБазам = Новый Соответствие;
	РаспределениеВызововПоБазам = Новый Соответствие;
	ЧислоБитыхСеансов = 0;
        
	Для Номер = 0 По МаксимальныйИндекс Цикл
        
        КлючиПолей = КлючиПолейОбщие[ТипЗнч(Сеанс[Номер])]; 
        
        СерверПредставление = СерверС[Номер];
        ИмяТекущейБазы = База[Номер];
                        
        ПроцессСтрокой	= СокрЛП(?(ЗначениеЗаполнено(ПроцессС[Номер]), ПроцессС[Номер], "0")); 
		ТекущийПроцесс	= Число(СтрЗаменить(СтрЗаменить(ПроцессСтрокой, Символы.НПП, ""), " ", ""));
        
        НомерСоединенияСтрокой = СокрЛП(?(ЗначениеЗаполнено(НомерСоединения[Номер]), НомерСоединения[Номер], "0"));
		ТекущйНомерСоединения = Число(СтрЗаменить(СтрЗаменить(НомерСоединенияСтрокой, Символы.НПП, ""), " ", ""));
        
        // Увеличиваем число сеансов для текущей базы
        ПриложенияТекущейБазы = РаспределениеСеансовПоБазам[ИмяТекущейБазы];
        Если ПриложенияТекущейБазы = Неопределено Тогда
            ПриложенияТекущейБазы = Новый Соответствие;
            РаспределениеСеансовПоБазам.Вставить(ИмяТекущейБазы, ПриложенияТекущейБазы);    
        КонецЕсли;
        
        КлючПриложения = Сеанс[Номер][КлючиПолей["ИдентификаторПриложения"]]; 
        ЧислоСеансовПриложения = ПриложенияТекущейБазы[КлючПриложения];
        Если ЧислоСеансовПриложения = Неопределено Тогда
            ЧислоСеансовПриложения = 0;    
        КонецЕсли;
        ПриложенияТекущейБазы.Вставить(КлючПриложения, ЧислоСеансовПриложения + 1); 
        
        ТекущийСеанс = Сеанс[Номер][КлючиПолей["Сеанс"]];
        Если ТекущийСеанс = 0 Тогда
            ЧислоБитыхСеансов = ЧислоБитыхСеансов + 1;
            ТекущийСеанс = -1 * ЧислоБитыхСеансов;
        КонецЕсли;
        
        //================
        ИнформационнаяБазаДанные = МониторингСеансовДанные[ИмяТекущейБазы];
        Если ИнформационнаяБазаДанные = Неопределено Тогда
            
            МониторингСеансовДанные.Вставить(ИмяТекущейБазы, Новый Соответствие);
            ИнформационнаяБазаДанные = МониторингСеансовДанные[ИмяТекущейБазы];
            
        КонецЕсли;
        
        СеансДанные = ИнформационнаяБазаДанные[ТекущийСеанс];
        Если СеансДанные = Неопределено Тогда
            
            ИнформационнаяБазаДанные.Вставить(ТекущийСеанс, Новый Структура);
            СеансДанные = ИнформационнаяБазаДанные[ТекущийСеанс];
            
        Иначе
            
            // Такое возможно при получении данных в отказоустойчивом кластере
            СеансДанные.Вставить("ЧислоДублейСеансов", СеансДанные["ЧислоДублейСеансов"] + 1);    
            Продолжить;
            
        КонецЕсли;
        
        СеансДанные.Вставить("Время", Время);
        СеансДанные.Вставить("Кластер", ОбъектКонтроляСсылка);
        СеансДанные.Вставить("ФлагВыполненияПроверки", Ложь);
        СеансДанные.Вставить("База", ИмяТекущейБазы);
        СеансДанные.Вставить("Сервер", СерверПредставление);
        СеансДанные.Вставить("Процесс", ТекущийПроцесс);
        СеансДанные.Вставить("Сеанс", Сеанс[Номер][КлючиПолей["Сеанс"]]);
        СеансДанные.Вставить("НомерСоединения", ТекущйНомерСоединения);
        СеансДанные.Вставить("ДатаНачалаСеанса", Сеанс[Номер][КлючиПолей["ДатаНачалаСеанса"]]);
        СеансДанные.Вставить("ДатаПоследнейАктивности", Сеанс[Номер][КлючиПолей["ДатаПоследнейАктивности"]]);
        СеансДанные.Вставить("Компьютер", Компьютер[Номер]);
        СеансДанные.Вставить("Пользователь", Пользователь[Номер]);
        СеансДанные.Вставить("Приложение", Приложение[Номер]);
        СеансДанные.Вставить("Язык", Сеанс[Номер][КлючиПолей["Язык"]]);
        
        Если ТипЗнч(Сеанс[Номер]) = Тип("COMОбъект") Тогда
            Процесс =  Сеанс[Номер][КлючиПолей["Процесс"]];
            Если Процесс <> Неопределено Тогда
                СеансДанные.Вставить("Порт",Процесс[КлючиПолей["Порт"]]);
            Иначе
                СеансДанные.Вставить("Порт", 0);
            КонецЕсли;
        ИначеЕсли ТипЗнч(Сеанс[Номер]) = Тип("Соответствие") Тогда
            СеансДанные.Вставить("Порт", 0);
        КонецЕсли;
        
        СеансДанные.Вставить("СоединениеССУБД", Сеанс[Номер][КлючиПолей["СоединениеССУБД"]]);
        СеансДанные.Вставить("ЗахваченоСУБД", Сеанс[Номер][КлючиПолей["ЗахваченоСУБД"]]);
        СеансДанные.Вставить("ЗаблокированоСУБД", Сеанс[Номер][КлючиПолей["ЗаблокированоСУБД"]]);
        СеансДанные.Вставить("ЗаблокированоУпр", Сеанс[Номер][КлючиПолей["ЗаблокированоУпр"]]);
        СеансДанные.Вставить("ВремяВызововСУБДТекущее", Сеанс[Номер][КлючиПолей["ВремяВызововСУБДТекущее"]]);
        СеансДанные.Вставить("ВремяВызововСУБД5Мин", Сеанс[Номер][КлючиПолей["ВремяВызововСУБД5Мин"]]);
        СеансДанные.Вставить("ВремяВызововСУБДВсего", Сеанс[Номер][КлючиПолей["ВремяВызововСУБДВсего"]]);
        СеансДанные.Вставить("ДанныхСУБД5Мин", Сеанс[Номер][КлючиПолей["ДанныхСУБД5Мин"]]);
        СеансДанные.Вставить("ДанныхСУБДВсего", Сеанс[Номер][КлючиПолей["ДанныхСУБДВсего"]]);
        СеансДанные.Вставить("ВремяВызоваТекущее", Сеанс[Номер][КлючиПолей["ВремяВызоваТекущее"]]);
        СеансДанные.Вставить("ВремяВызовов5Мин", Сеанс[Номер][КлючиПолей["ВремяВызовов5Мин"]]);
        СеансДанные.Вставить("ВремяВызововВсего", Сеанс[Номер][КлючиПолей["ВремяВызововВсего"]]);
        СеансДанные.Вставить("КоличествоВызовов5Мин", Сеанс[Номер][КлючиПолей["КоличествоВызовов5Мин"]]);
        СеансДанные.Вставить("КоличествоВызововВсего", Сеанс[Номер][КлючиПолей["КоличествоВызововВсего"]]);
        СеансДанные.Вставить("ОбъемДанных5Мин", Сеанс[Номер][КлючиПолей["ОбъемДанных5Мин"]]);
        СеансДанные.Вставить("ОбъемДанныхВсего", Сеанс[Номер][КлючиПолей["ОбъемДанныхВсего"]]);
        
        Если ЗначениеЗаполнено(Сеанс[Номер][КлючиПолей["ПамятьТекущая"]]) Тогда
            СеансДанные.Вставить("ПамятьТекущая", Сеанс[Номер][КлючиПолей["ПамятьТекущая"]]);
        Иначе
            СеансДанные.Вставить("ПамятьТекущая", 0);
        КонецЕсли;
        // Обход ошибки платформы получения отрицательного значения ras
        Если СеансДанные.ПамятьТекущая >= 999999999999999 Тогда
            СеансДанные.ПамятьТекущая = 0;
        КонецЕсли;
        
        Если ЗначениеЗаполнено(Сеанс[Номер][КлючиПолей["Память5Мин"]]) Тогда
            СеансДанные.Вставить("Память5Мин", Сеанс[Номер][КлючиПолей["Память5Мин"]]);
        Иначе
            СеансДанные.Вставить("Память5Мин", 0);
        КонецЕсли;
        // Обход ошибки платформы получения отрицательного значения ras
        Если СеансДанные.Память5Мин >= 999999999999999 Тогда
            СеансДанные.Память5Мин = 0;
        КонецЕсли;
        
        Если ЗначениеЗаполнено(Сеанс[Номер][КлючиПолей["ПамятьВсего"]]) Тогда
            СеансДанные.Вставить("ПамятьВсего", Сеанс[Номер][КлючиПолей["ПамятьВсего"]]);
        Иначе
            СеансДанные.Вставить("ПамятьВсего", 0);
        КонецЕсли;
        // Обход ошибки платформы получения отрицательного значения ras
        Если СеансДанные.ПамятьВсего >= 999999999999999 Тогда
            СеансДанные.ПамятьВсего = 0;
        КонецЕсли;        
        
        СеансДанные.Вставить("ЧтениеТекущее", Сеанс[Номер][КлючиПолей["ЧтениеТекущее"]]);
        СеансДанные.Вставить("Чтение5Мин", Сеанс[Номер][КлючиПолей["Чтение5Мин"]]);
        СеансДанные.Вставить("ЧтениеВсего", Сеанс[Номер][КлючиПолей["ЧтениеВсего"]]);
        СеансДанные.Вставить("ЗаписьТекущая", Сеанс[Номер][КлючиПолей["ЗаписьТекущая"]]);
        СеансДанные.Вставить("Запись5Мин", Сеанс[Номер][КлючиПолей["Запись5Мин"]]);
        СеансДанные.Вставить("ЗаписьВсего", Сеанс[Номер][КлючиПолей["ЗаписьВсего"]]);
        
        Лицензия = Сеанс[Номер][КлючиПолей["Лицензия"]];
        Если Лицензия <> Неопределено Тогда
            СеансДанные.Вставить("Лицензия", Лицензия[КлючиПолей["ЛицензияПолноеНаименование"]]);
        Иначе
            СеансДанные.Вставить("Лицензия", "");            
        КонецЕсли;
        
        СеансДанные.Вставить("Спящий", Сеанс[Номер][КлючиПолей["Спящий"]]);
        СеансДанные.Вставить("ЗаснутьЧерез", Сеанс[Номер][КлючиПолей["ЗаснутьЧерез"]]);
        СеансДанные.Вставить("ЗавершитьЧерез", Сеанс[Номер][КлючиПолей["ЗавершитьЧерез"]]);
        СеансДанные.Вставить("ЧислоДублейСеансов", 1);
        
        Если СеансДанные.ВремяВызоваТекущее > 0 И СеансДанные.ВремяВызововСУБДТекущее = 0 Тогда
            ЧислоСеансовДляТекущейБазы = РаспределениеВызововПоБазам.Получить(ИмяТекущейБазы);
            Если ЧислоСеансовДляТекущейБазы = Неопределено Тогда
                ЧислоСеансовДляТекущейБазы = 0;
            КонецЕсли;
            РаспределениеВызововПоБазам.Вставить(ИмяТекущейБазы, ЧислоСеансовДляТекущейБазы + 1);
        КонецЕсли;
    КонецЦикла;
    
    Набор = РегистрыСведений.МониторингСеансов.СоздатьНаборЗаписей();
	СоздатьПредопределеннуюЗаписьОСеансе(Набор, ОбъектКонтроляСсылка, Время);
    
    Для Каждого ИнформационнаяБазаДанные Из МониторингСеансовДанные Цикл
        
        Для Каждого СеансДанные Из ИнформационнаяБазаДанные.Значение Цикл
            
            НоваяЗапись = Набор.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяЗапись, СеансДанные.Значение);
            
        КонецЦикла;
        
    КонецЦикла;
        
	Набор.Записать(Ложь);
    
    НаборЗаписейЧислоСеансов = РегистрыСведений.ЧислоСеансов.СоздатьНаборЗаписей();
    ВидыПриложений = Перечисления.ВидыПриложений.ПустаяСсылка().Метаданные().ЗначенияПеречисления;
    Счетчики = Новый Массив;
    Для Каждого НазваниеБазы Из СписокНазванийБаз Цикл
        
        БазаСсылка = ИнформационнаяБазаПоИмени(НазваниеБазы);
        Если НЕ ЗначениеЗаполнено(БазаСсылка) Тогда
			Продолжить;
        КонецЕсли;
                                
        Приложения = РаспределениеСеансовПоБазам.Получить(НазваниеБазы);
        Если Приложения <> Неопределено Тогда
            ВсегоСеансов = 0;
            Для Каждого ТекПриложение Из Приложения Цикл
                
                ЧислоСеансовЗапись = НаборЗаписейЧислоСеансов.Добавить();
                ЧислоСеансовЗапись.Период = Время;
                ЧислоСеансовЗапись.Кластер = ОбъектКонтроляСсылка;
                ЧислоСеансовЗапись.ИнформационнаяБаза = БазаСсылка;
                
                ВидПриложения = ВидыПриложений.Найти("_" + ТекПриложение.Ключ);
                Если ВидПриложения = Неопределено Тогда
                    ВидПриложения = Перечисления.ВидыПриложений._Unknown;
                Иначе
                    ВидПриложения = Перечисления.ВидыПриложений[ВидПриложения.Имя];
                КонецЕсли;
                ЧислоСеансовЗапись.ВидПриложения = ВидПриложения;
                
                ЧислоСеансовЗапись.Количество = ТекПриложение.Значение;
                ВсегоСеансов = ВсегоСеансов + ТекПриложение.Значение;;
                
                Счетчик = Новый Массив;
                Счетчик.Добавить("Информационные базы");
                Счетчик.Добавить(СтрЗаменить(НазваниеБазы, ".", "♂"));
                Счетчик.Добавить("Число сеансов");
                Счетчик.Добавить(ВидПриложения);
                Счетчик.Добавить(Формат(ТекПриложение.Значение,"ЧРД=,; ЧН=0; ЧГ="));
                
                Счетчики.Добавить(СтрСоединить(Счетчик, "."));
            КонецЦикла;
        КонецЕсли;
        
    КонецЦикла;
    
    Счетчик = Новый Массив;
    Счетчик.Добавить("Информационные базы");
    Счетчик.Добавить(СтрЗаменить(НазваниеБазы, ".", "♂"));
    Счетчик.Добавить("Число сеансов");
    Счетчик.Добавить(Формат(ВсегоСеансов,"ЧРД=,; ЧН=0; ЧГ="));
    
    Счетчики.Добавить(СтрСоединить(Счетчик, "."));
    
    НаборЗаписейЧислоСеансов.Записать(Ложь);
        	
	Для Каждого НазваниеБазы Из СписокНазванийБаз Цикл
		ЧислоВызововЗапись = РегистрыСведений.ЧислоВызововСервера.СоздатьМенеджерЗаписи();
		ЧислоВызововЗапись.Период = Время;
		ЧислоВызововЗапись.Кластер = ОбъектКонтроляСсылка;
		БазаСсылка = ИнформационнаяБазаПоИмени(НазваниеБазы);
		Если НЕ ЗначениеЗаполнено(БазаСсылка) Тогда
			Продолжить;
		КонецЕсли;
		ЧислоВызововЗапись.ИнформационнаяБаза = БазаСсылка;
		
		Количество = РаспределениеВызововПоБазам.Получить(НазваниеБазы);
		Если Количество = Неопределено Тогда
			Количество = 0;
		КонецЕсли;
		ЧислоВызововЗапись.Количество = Количество;
		ЧислоВызововЗапись.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализироватьКлючиПолей()
    
    КлючиПолей = Новый Соответствие;
       
    КлючиCOMОбъект = Новый Соответствие;
    КлючиCOMОбъект.Вставить("ИдентификаторПриложения", "AppID");
    КлючиCOMОбъект.Вставить("Процесс", "process");
    КлючиCOMОбъект.Вставить("Порт", "MainPort");
    КлючиCOMОбъект.Вставить("Сеанс", "SessionID");
    КлючиCOMОбъект.Вставить("ДатаНачалаСеанса", "StartedAt");
    КлючиCOMОбъект.Вставить("ДатаПоследнейАктивности", "LastActiveAt");
    КлючиCOMОбъект.Вставить("Язык", "Locale");
    КлючиCOMОбъект.Вставить("СоединениеССУБД", "dbProcInfo");
    КлючиCOMОбъект.Вставить("ЗаблокированоСУБД", "blockedByDBMS");
    КлючиCOMОбъект.Вставить("ЗаблокированоУпр", "blockedByLS");
    КлючиCOMОбъект.Вставить("ВремяВызововСУБДТекущее", "durationCurrentDBMS");
    КлючиCOMОбъект.Вставить("ВремяВызововСУБД5Мин", "durationLast5MinDBMS");
    КлючиCOMОбъект.Вставить("ВремяВызововСУБДВсего", "durationAllDBMS");
    КлючиCOMОбъект.Вставить("ДанныхСУБД5Мин", "dbmsBytesLast5Min");
    КлючиCOMОбъект.Вставить("ДанныхСУБДВсего", "dbmsBytesAll");
    КлючиCOMОбъект.Вставить("ВремяВызоваТекущее", "durationCurrent");
    КлючиCOMОбъект.Вставить("ВремяВызовов5Мин", "durationLast5Min");
    КлючиCOMОбъект.Вставить("ВремяВызововВсего", "durationAll");
    КлючиCOMОбъект.Вставить("КоличествоВызовов5Мин", "callsLast5Min");
    КлючиCOMОбъект.Вставить("КоличествоВызововВсего", "callsAll");
    КлючиCOMОбъект.Вставить("ОбъемДанных5Мин", "bytesLast5Min");
    КлючиCOMОбъект.Вставить("ОбъемДанныхВсего", "bytesAll");
    КлючиCOMОбъект.Вставить("ПамятьТекущая", "MemoryCurrent");
    КлючиCOMОбъект.Вставить("Память5Мин", "MemoryLast5Min");
    КлючиCOMОбъект.Вставить("ПамятьВсего", "MemoryAll");
    КлючиCOMОбъект.Вставить("ЧтениеТекущее", "InBytesCurrent");
    КлючиCOMОбъект.Вставить("Чтение5Мин", "InBytesLast5Min");
    КлючиCOMОбъект.Вставить("ЧтениеВсего", "InBytesAll");
    КлючиCOMОбъект.Вставить("ЗаписьТекущая", "OutBytesCurrent");
    КлючиCOMОбъект.Вставить("Запись5Мин", "OutBytesLast5Min");
    КлючиCOMОбъект.Вставить("ЗаписьВсего", "OutBytesAll");
    КлючиCOMОбъект.Вставить("Лицензия", "License");
    КлючиCOMОбъект.Вставить("ЛицензияПолноеНаименование", "FullPresentation");
    КлючиCOMОбъект.Вставить("Спящий", "Hibernate");
    КлючиCOMОбъект.Вставить("ЗаснутьЧерез", "PassiveSessionHibernateTime");    
    КлючиCOMОбъект.Вставить("ЗавершитьЧерез", "HibernateSessionTerminateTime");
    
    КлючиПолей.Вставить(Тип("COMОбъект"), КлючиCOMОбъект);
    
    КлючиRAS = Новый Соответствие;
    КлючиRAS.Вставить("ИдентификаторПриложения", "app-id");
    КлючиRAS.Вставить("Процесс", "process");
    КлючиRAS.Вставить("Порт", "MainPort");
    КлючиRAS.Вставить("Сеанс", "session-id");
    КлючиRAS.Вставить("ДатаНачалаСеанса", "started-at");
    КлючиRAS.Вставить("ДатаПоследнейАктивности", "last-active-at");
    КлючиRAS.Вставить("Язык", "locale");
    КлючиRAS.Вставить("СоединениеССУБД", "db-proc-info");
    КлючиRAS.Вставить("ЗаблокированоСУБД", "blocked-by-dbms");
    КлючиRAS.Вставить("ЗаблокированоУпр", "blocked-by-ls");
    КлючиRAS.Вставить("ВремяВызововСУБДТекущее", "duration-current-dbms");
    КлючиRAS.Вставить("ВремяВызововСУБД5Мин", "duration-last-5min-dbms");
    КлючиRAS.Вставить("ВремяВызововСУБДВсего", "duration-all-dbms");
    КлючиRAS.Вставить("ДанныхСУБД5Мин", "dbms-bytes-last-5min");
    КлючиRAS.Вставить("ДанныхСУБДВсего", "dbms-bytes-all");
    КлючиRAS.Вставить("ВремяВызоваТекущее", "duration-current");
    КлючиRAS.Вставить("ВремяВызовов5Мин", "duration-last-5min");
    КлючиRAS.Вставить("ВремяВызововВсего", "duration-all");
    КлючиRAS.Вставить("КоличествоВызовов5Мин", "calls-last-5min");
    КлючиRAS.Вставить("КоличествоВызововВсего", "calls-all");
    КлючиRAS.Вставить("ОбъемДанных5Мин", "bytes-last-5min");
    КлючиRAS.Вставить("ОбъемДанныхВсего", "bytes-all");
    КлючиRAS.Вставить("ПамятьТекущая", "memory-current");
    КлючиRAS.Вставить("Память5Мин", "memory-last-5min");
    КлючиRAS.Вставить("ПамятьВсего", "memory-total");
    КлючиRAS.Вставить("ЧтениеТекущее", "read-current");
    КлючиRAS.Вставить("Чтение5Мин", "read-last-5min");
    КлючиRAS.Вставить("ЧтениеВсего", "read-total");
    КлючиRAS.Вставить("ЗаписьТекущая", "write-current");
    КлючиRAS.Вставить("Запись5Мин", "write-last-5min");
    КлючиRAS.Вставить("ЗаписьВсего", "write-total");
    КлючиRAS.Вставить("Лицензия", "license");
    КлючиRAS.Вставить("ЛицензияПолноеНаименование", "FullPresentation");
    КлючиRAS.Вставить("Спящий", "hibernate");
    КлючиRAS.Вставить("ЗаснутьЧерез", "passive-session-hibernate-time");    
    КлючиRAS.Вставить("ЗавершитьЧерез", "hibernate-session-terminate-time");
    
    КлючиПолей.Вставить(Тип("Соответствие"), КлючиRAS);
    
    Возврат КлючиПолей;
    
КонецФункции

Функция ИнформационнаяБазаПоИмени(ИмяБазы)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПараметрыИнформационныхБаз.ОбъектКонтроля.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПараметрыИнформационныхБаз КАК ПараметрыИнформационныхБаз
	|ГДЕ
	|	ПараметрыИнформационныхБаз.ОбъектКонтроля.Владелец = &Владелец
	|	И ПараметрыИнформационныхБаз.ИмяБазыВКластере = &ИмяБазыВКластере";
	Запрос.УстановитьПараметр("Владелец", Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
	Запрос.УстановитьПараметр("ИмяБазыВКластере", ИмяБазы);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура СоздатьПредопределеннуюЗаписьОСеансе(Набор, Кластер, ДатаЗаписи)
	Запись = Набор.Добавить();
	Запись.Кластер = Кластер;
	Запись.Время = ДатаЗаписи;
	Запись.ФлагВыполненияПроверки = Истина;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
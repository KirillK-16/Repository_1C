
Функция РазобратьДанныеJSON(Данные, СчетчикиКеш, СчетчикКешСсылки, ДатаВыборки)
    
    ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Данные);
    
    Попытка
        ДанныеМассив = ПрочитатьJSON(ЧтениеJSON, Истина);
    Исключение
        ДанныеМассив = Новый Массив;
        ЗаписьЖурналаРегистрации("РазобратьДанныеJSON", УровеньЖурналаРегистрации.Ошибка,,,Данные);
    КонецПопытки;
        
    ДанныеСоответствие = Новый Соответствие;
    
    Для Каждого ТекДанные Из ДанныеМассив Цикл
        
        ПолныйКод = СтрСоединить(ТекДанные["name"], "/");
        
        СобытиеСсылка = СчетчикиКеш[ПолныйКод];
        Если СобытиеСсылка = Неопределено Тогда
            ПолныйКод29 = СтрСоединить(ТекДанные["name"], "↔");
            НовСтрока = СчетчикКешСсылки.Добавить();
            НовСтрока.ПолныйКодДляПоиска = ПолныйКод;
            НовСтрока.ПолныйКодДляПоиска29 = ПолныйКод29;
        КонецЕсли;
        
        ДанныеСоответствиеПолныйКод = ДанныеСоответствие[ПолныйКод];
        Если ДанныеСоответствиеПолныйКод = Неопределено Тогда
            ДанныеСоответствие.Вставить(ПолныйКод, Новый Структура("Период, Событие, ЧислоСрабатываний, СреднееЗначение, МинимальноеЗначение, МаксимальноеЗначение", ДатаВыборки, СобытиеСсылка, ТекДанные["counter"], ТекДанные["avg"], ТекДанные["min"], ТекДанные["max"]));
        Иначе
            ДанныеСоответствиеПолныйКод["СреднееЗначение"] = (ДанныеСоответствиеПолныйКод["СреднееЗначение"] * ДанныеСоответствиеПолныйКод["ЧислоСрабатываний"] + ТекДанные["avg"] * ТекДанные["counter"])/(ДанныеСоответствиеПолныйКод["ЧислоСрабатываний"] + ТекДанные["counter"]);
            ДанныеСоответствиеПолныйКод["ЧислоСрабатываний"] = ДанныеСоответствиеПолныйКод["ЧислоСрабатываний"] + ТекДанные["counter"];
            Если ДанныеСоответствиеПолныйКод["МинимальноеЗначение"] > ТекДанные["min"] Тогда
                ДанныеСоответствиеПолныйКод["МинимальноеЗначение"] = ТекДанные["min"]
            КонецЕсли;
            Если ДанныеСоответствиеПолныйКод["МаксимальноеЗначение"] < ТекДанные["max"] Тогда
                ДанныеСоответствиеПолныйКод["МаксимальноеЗначение"] = ТекДанные["max"]
            КонецЕсли;
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат ДанныеСоответствие;
        
КонецФункции

Функция РазобратьДанные(Данные, ЕстьКоличествоВызовов) Экспорт
    
    ДанныеСоответствие = Новый Соответствие;
    
    СтрокиДанных = СтрРазделить(Данные, ";", Ложь);
    
    Для Каждого СтрокаДанных Из СтрокиДанных Цикл
        
        Если СтрокаДанных <> "" Тогда
            
            СтрокаДанныхЖР = СтрокаДанных;
            Если СтрНайти(СтрокаДанных, "/") > 0 Тогда
                СтрокаДанных = СтрЗаменить(СтрокаДанных, "/", "↔");
            КонецЕсли;
            
            Строки = СтрРазделить(СтрокаДанных, ".", Ложь);
            МаксИндекс = Строки.ВГраница();
            
            Попытка
                
                ДанныеСобытия = Новый Соответствие;
                
                Если ЕстьКоличествоВызовов Тогда
                    
                    ЗначениеСобытияСтрока = СтрЗаменить(Строки[МаксИндекс - 1], ",", ".");
                    ЗначениеКоличествоСтрока = СтрЗаменить(Строки[МаксИндекс], ",", ".");
                    
                    ЗначениеСобытия = Число(ЗначениеСобытияСтрока);
                    ЗначениеКоличество = Число(ЗначениеКоличествоСтрока);
                    
                    ДанныеСобытия.Вставить("ЗначениеСобытия", ЗначениеСобытия);
                    ДанныеСобытия.Вставить("ЗначениеКоличество", ЗначениеКоличество);
                    
                    Строки.Удалить(МаксИндекс);
                    Строки.Удалить(МаксИндекс - 1);
                    
                Иначе
                    
                    ЗначениеСобытияСтрока = СтрЗаменить(Строки[МаксИндекс], ",", ".");
                    ЗначениеСобытия = Число(ЗначениеСобытияСтрока);
                    ЗначениеКоличество = 1;
                    
                    ДанныеСобытия.Вставить("ЗначениеСобытия", ЗначениеСобытия);
                    ДанныеСобытия.Вставить("ЗначениеКоличество", ЗначениеКоличество);
                    
                    Строки.Удалить(МаксИндекс);
                    
                КонецЕсли;
                
                ПолныйКод = СтрСоединить(Строки, "/");
                
                ДанныеСоответствиеПолныйКод = ДанныеСоответствие[ПолныйКод];
                Если ДанныеСоответствиеПолныйКод = Неопределено Тогда
                    ДанныеСоответствие.Вставить(ПолныйКод, ДанныеСобытия);
                Иначе
                    ДанныеСоответствиеПолныйКод["ЗначениеСобытия"] = ДанныеСоответствиеПолныйКод["ЗначениеСобытия"] + ЗначениеСобытия;
                    ДанныеСоответствиеПолныйКод["ЗначениеКоличество"] = ДанныеСоответствиеПолныйКод["ЗначениеКоличество"] + ЗначениеКоличество;
                КонецЕсли;
                
            Исключение
                
                Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
                ЗаписьЖурналаРегистрации("Функция РазобратьДанные(Данные) Экспорт", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.СтатистикаГруппыСчетчиков,,Комментарий);
                
            КонецПопытки
            
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат ДанныеСоответствие;
    
КонецФункции

//Главная функция получения данных
//ВНИМАНИЕ!!! ДОЛЖНО БЫТЬ!!!
//ПоказателиСчетчиковСсылка = Ссылка И Счетчики = Неопределено
//ИЛИ
//ПоказателиСчетчиковСсылка = Неопределено И Счетчики = Массив
Функция ПолучитьДанные
	(
		Знач ПоказателиСчетчиковСсылка,
		Знач ОпорнаяДата,
		Знач НачальноеСмещение,
		Знач ЧислоТочек,
		Знач Шаг,
		Знач Счетчики,
		Знач Аналитика,
		Знач Периодичность
	) Экспорт
	
	ОпорнаяДата = ОпорнаяДата + НачальноеСмещение * Шаг;
	
	ТаблицаПериодов = НовыйТаблицаПериодов();
	ТаблицаПериодов = ЗаполнитьПериоды(ТаблицаПериодов, ОпорнаяДата, ЧислоТочек, Шаг, Периодичность);
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	СоздатьВременнуюТаблицуПериодов(ТаблицаПериодов, Запрос);
	
	Если Счетчики = Неопределено Тогда
		СоздатьВременнуюТаблицуДанныхПоПоказателю(ПоказателиСчетчиковСсылка, Запрос, Аналитика, Периодичность, ЧислоТочек);
	КонецЕсли;

	ДанныеРезультатЗапроса = ВыбратьДанные(Запрос, Аналитика, Периодичность);
	
	Данные = Новый Массив;
	
	ВыборкаДетальныеЗаписи = ДанныеРезультатЗапроса.Выбрать();
	ПредыдущееЗначение = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ЗначениеАналитики <> Неопределено Тогда
			ТекущееЗначение = ВыборкаДетальныеЗаписи.ЗначениеАналитики;
			ПредыдущееЗначение = ТекущееЗначение;
		Иначе
			ТекущееЗначение = ПредыдущееЗначение;
		КонецЕсли;
		
		Данные.Добавить(ТекущееЗначение);
	КонецЦикла;
	
	Возврат Данные;
КонецФункции

Функция НовыйТаблицаПериодов()
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	
	КС_30 = Новый КвалификаторыСтроки(30);
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока_30 = Новый ОписаниеТипов(Массив,,КС_30,,);
	Массив.Очистить();
	
	КД = Новый КвалификаторыДаты();
	Массив.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(Массив,,,КД,);
	Массив.Очистить();
	
	КЧ_5_0 = Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный);
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧисло_5_0 = Новый ОписаниеТипов(Массив, КЧ_5_0,,,);
	Массив.Очистить();
	
	КЧ_15_0 = Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный);
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧисло_15_0 = Новый ОписаниеТипов(Массив, КЧ_15_0,,,);
	Массив.Очистить();
	
	КЧ_15_10 = Новый КвалификаторыЧисла(15, 10, ДопустимыйЗнак.Неотрицательный);
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧисло_15_10 = Новый ОписаниеТипов(Массив, КЧ_15_10,,,);
	Массив.Очистить();
	
	ТаблицаЗначений.Колонки.Добавить("НачалоПериодаРасч", ОписаниеТиповДата);
	ТаблицаЗначений.Колонки.Добавить("КонецПериодаРасч", ОписаниеТиповДата);
	ТаблицаЗначений.Колонки.Добавить("НачалоПериода", ОписаниеТиповДата);
	ТаблицаЗначений.Колонки.Добавить("КонецПериода", ОписаниеТиповДата);
	ТаблицаЗначений.Колонки.Добавить("Коэффициент", ОписаниеТиповЧисло_15_10);
	ТаблицаЗначений.Колонки.Добавить("Шаг", ОписаниеТиповЧисло_15_0);
	ТаблицаЗначений.Колонки.Добавить("ИсточникДанных", ОписаниеТиповСтрока_30);
	ТаблицаЗначений.Колонки.Добавить("НомерТочки", ОписаниеТиповЧисло_5_0);
	
	Возврат ТаблицаЗначений;
КонецФункции

Функция ПолучитьАктуальностьСтатистики()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&СтатистикаНеделя КАК ИсточникДанных,
		|	ISNULL(МИНИМУМ(СтатистикаНеделя.Период), ДАТАВРЕМЯ(1,1,1)) КАК ПериодНачало,
		|	ISNULL(МАКСИМУМ(СтатистикаНеделя.Период), ДАТАВРЕМЯ(1,1,1)) КАК ПериодКонец
		|ИЗ
		|	РегистрСведений.СтатистикаНеделя КАК СтатистикаНеделя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&СтатистикаМесяц КАК ИсточникДанных,
		|	ISNULL(МИНИМУМ(СтатистикаМесяц.Период), ДАТАВРЕМЯ(1,1,1)),
		|	ISNULL(МАКСИМУМ(СтатистикаМесяц.Период), ДАТАВРЕМЯ(1,1,1))
		|ИЗ
		|	РегистрСведений.СтатистикаМесяц КАК СтатистикаМесяц
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&СтатистикаПолный КАК ИсточникДанных,
		|	ISNULL(МИНИМУМ(СтатистикаПолный.Период), ДАТАВРЕМЯ(1,1,1)),
		|	ISNULL(МАКСИМУМ(СтатистикаПолный.Период), ДАТАВРЕМЯ(1,1,1))
		|ИЗ
		|	РегистрСведений.СтатистикаПолный КАК СтатистикаПолный";

	Запрос.УстановитьПараметр("СтатистикаНеделя", "СтатистикаНеделя");
	Запрос.УстановитьПараметр("СтатистикаМесяц", "СтатистикаМесяц");
	Запрос.УстановитьПараметр("СтатистикаПолный", "СтатистикаПолный");
	
	Результат = Запрос.Выполнить();
	
	Данные = Новый Структура;
	
	ВыборкаДетальныеЗаписи =Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Диапазон = Новый Диапазон(ВыборкаДетальныеЗаписи.ПериодНачало, ВыборкаДетальныеЗаписи.ПериодКонец);
		Данные.Вставить(ВыборкаДетальныеЗаписи.ИсточникДанных, Диапазон);
	КонецЦикла;
	
	Возврат Данные;
КонецФункции

Функция ПолучитьИсточникДанных(НачалоПериода, КонецПериода, Актуальность)
	Если НачалоПериода >= Актуальность["СтатистикаНеделя"].Начало И Актуальность["СтатистикаНеделя"].Начало <> Дата(1,1,1) Тогда
		Возврат "СтатистикаНеделя";
	КонецЕсли;
	
	Если НачалоПериода >= Актуальность["СтатистикаМесяц"].Начало И Актуальность["СтатистикаМесяц"].Начало <> Дата(1,1,1) Тогда
		Возврат "СтатистикаМесяц";
	КонецЕсли;
	
	Если НачалоПериода >= Актуальность["СтатистикаПолный"].Начало И Актуальность["СтатистикаПолный"].Начало <> Дата(1,1,1) Тогда
		Возврат "СтатистикаПолный";
	КонецЕсли;
	
	Возврат "СтатистикаПолный";
КонецФункции

Функция ДобавитьНовуюСтроку
	(
		ТаблицаПериодов,
		НачалоПериода,
		КонецПериода,
		Шаг,
		ТекТочка,
		ИсточникДанных,
		Периодичность
	)
	НоваяСтрока = ТаблицаПериодов.Добавить();
			
	НоваяСтрока.НачалоПериодаРасч = НачалоПериода;
	НоваяСтрока.КонецПериодаРасч = КонецПериода;
	
	Если ИсточникДанных = "СтатистикаНеделя" Тогда
		КонецПериода = НачалоМинуты(КонецПериода);
		Если Периодичность = "Нет" Тогда
			НачалоПериода = НачалоМинуты(НачалоПериода) + 60;
			Если НачалоПериода > КонецПериода Тогда
				НачалоПериода = КонецПериода;
			КонецЕсли;
		ИначеЕсли Периодичность = "Час" Тогда
			НачалоПериода = КонецПериода - 3599;
		ИначеЕсли Периодичность = "День" Тогда
			НачалоПериода = КонецПериода - 86399;
		ИначеЕсли Периодичность = "Неделя" Тогда
			НачалоПериода = КонецПериода - 604799; 
		ИначеЕсли Периодичность = "Месяц" Тогда
			НачалоПериода = КонецПериода - 2591999;
		КонецЕсли;
	ИначеЕсли ИсточникДанных = "СтатистикаМесяц" Тогда
		КонецПериода = НачалоЧаса(КонецПериода);
		Если Периодичность = "Нет" Тогда
			НачалоПериода = НачалоЧаса(НачалоПериода) + 3600;
			Если НачалоПериода > КонецПериода Тогда
				НачалоПериода = КонецПериода;
			КонецЕсли;
		ИначеЕсли Периодичность = "Час" Тогда
			НачалоПериода = КонецПериода - 3599;
		ИначеЕсли Периодичность = "День" Тогда
			НачалоПериода = КонецПериода - 86399;
		ИначеЕсли Периодичность = "Неделя" Тогда
			НачалоПериода = КонецПериода - 604799; 
		ИначеЕсли Периодичность = "Месяц" Тогда
			НачалоПериода = КонецПериода - 2591999;
		КонецЕсли;
	ИначеЕсли ИсточникДанных = "СтатистикаПолный" Тогда
		КонецПериода = НачалоДня(КонецПериода);
		Если Периодичность = "Нет" Тогда
			НачалоПериода = НачалоДня(НачалоПериода) + 86400;
			Если НачалоПериода > КонецПериода Тогда
				НачалоПериода = КонецПериода;
			КонецЕсли;
		ИначеЕсли Периодичность = "Час" Тогда
			НачалоПериода = КонецПериода - 3599;
		ИначеЕсли Периодичность = "День" Тогда
			НачалоПериода = КонецПериода - 86399;
		ИначеЕсли Периодичность = "Неделя" Тогда
			НачалоПериода = КонецПериода - 604799; 
		ИначеЕсли Периодичность = "Месяц" Тогда
			НачалоПериода = КонецПериода - 2591999;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока.НачалоПериода = НачалоПериода;
	НоваяСтрока.КонецПериода = КонецПериода;
	
	НоваяСтрока.Шаг = Шаг;
	НоваяСтрока.НомерТочки = ТекТочка;
	НоваяСтрока.ИсточникДанных = ИсточникДанных;
КонецФункции

Функция ЗаполнитьПериоды(ТаблицаПериодов, ОпорнаяДата, ЧислоТочек, Шаг, Периодичность)
	ТекДата = ТекущаяДата();
	
	АктуальностьСтатистики = ПолучитьАктуальностьСтатистики();
		
	НачалоПериода = ОпорнаяДата - Шаг;
	
	КонецПериодаКоэфф = НачалоМинуты(ОпорнаяДата);
	НачалоПериодаКоэфф = НачалоМинуты(НачалоПериода) + 60;
	Если НачалоПериодаКоэфф > КонецПериодаКоэфф Тогда
		НачалоПериодаКоэфф = КонецПериодаКоэфф;
	КонецЕсли;
	
	Дельта = (КонецПериодаКоэфф - НачалоПериодаКоэфф) + 60;

	
	Для ТекТочка = 1 По ЧислоТочек Цикл
		НачалоПериодаРасч = НачалоПериода + (ТекТочка - 1) * Шаг + 1;
		КонецПериодаРасч = НачалоПериода + ТекТочка * Шаг;
		
		ИсточникДанных = ПолучитьИсточникДанных(НачалоПериодаРасч, КонецПериодаРасч, АктуальностьСтатистики);
		Если ИсточникДанных = "СтатистикаНеделя" Тогда
			ДобавитьНовуюСтроку(ТаблицаПериодов, НачалоПериодаРасч, КонецПериодаРасч, Шаг, ТекТочка, ИсточникДанных, Периодичность); 
		ИначеЕсли ИсточникДанных = "СтатистикаМесяц" Тогда
			ДобавитьНовуюСтроку(ТаблицаПериодов, НачалоПериодаРасч, КонецПериодаРасч, Шаг, ТекТочка, ИсточникДанных, Периодичность); 
		ИначеЕсли ИсточникДанных = "СтатистикаПолный" Тогда
			ДобавитьНовуюСтроку(ТаблицаПериодов, НачалоПериодаРасч, КонецПериодаРасч, Шаг, ТекТочка, ИсточникДанных, Периодичность); 
		КонецЕсли;
	КонецЦикла;
		
	Возврат ТаблицаПериодов;
КонецФункции

Функция СоздатьВременнуюТаблицуПериодов(ТаблицаЗначений, Запрос)
	Запрос.Текст = 
	"ВЫБРАТЬ
    |	Периоды.НачалоПериода КАК НачалоПериода,
	|	Периоды.КонецПериода КАК КонецПериода,
	|   Периоды.КонецПериодаРасч КАК КонецПериодаРасч,
	|	Периоды.ИсточникДанных КАК ИсточникДанных,
	|	Периоды.НомерТочки КАК НомерТочки,
	|	Периоды.Шаг КАК Шаг
	|ПОМЕСТИТЬ
	|	Периоды
    |ИЗ
    |	&Периоды КАК Периоды
	|ИНДЕКСИРОВАТЬ ПО
	|	НачалоПериода,
	|	ИсточникДанных
	|";
	Запрос.УстановитьПараметр("Периоды",ТаблицаЗначений);
	Результат = Запрос.Выполнить();	
КонецФункции

Функция ЗаполнитьКрайнююТочкуПоПоказателю(ПоказательСсылка, Запрос, Аналитика, Периодичность)
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НачалоПериода КАК НачалоПериода,
	|	КонецПериода КАК КонецПериода,
	|	Шаг КАК Шаг
	|ИЗ
	|	Периоды
	|ГДЕ
	|	НомерТочки = 1
	|";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		РезультатТаблица = Результат.Выгрузить();
		НачалоПериода = РезультатТаблица[0].НачалоПериода;
		КонецПериода = РезультатТаблица[0].КонецПериода;
		Если Периодичность = "Нет" Тогда
			Шаг = РезультатТаблица[0].Шаг;
		Иначе
			Шаг = КонецПериода - НачалоПериода;
		КонецЕсли;
				
		ИсточникДанных = Новый Массив();
		ИсточникДанных.Добавить("СтатистикаНеделя");
		ИсточникДанных.Добавить("СтатистикаМесяц");
		ИсточникДанных.Добавить("СтатистикаПолный");
		
		ЕстьКрайняяЗапись = Ложь;
		
		СчетчикиМассив = Справочники.ПоказателиСчетчиков.ПолучитьСчетчикиВМассив(ПоказательСсылка);
		
		ИндексИсточника = 0;
		Пока ИндексИсточника < ИсточникДанных.Количество() Цикл
			Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Статистика.Период КАК НачалоПериода
			|ИЗ
			|	РегистрСведений.&ИсточникДанных КАК Статистика
			|ГДЕ
			|	Статистика.Период < &НачалоПериода
			|   И Статистика.Событие В 	(&УслСчетчики)
			|УПОРЯДОЧИТЬ ПО
			|	Статистика.Период УБЫВ
			|";

		    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсточникДанных", ИсточникДанных[ИндексИсточника]);
			Запрос.УстановитьПараметр("УслСчетчики", СчетчикиМассив);
			Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
			Запрос.УстановитьПараметр("ПоказательСсылка", ПоказательСсылка);
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				НачалоПериода = Результат.Выгрузить()[0].НачалоПериода;
				ЕстьКрайняяЗапись = Истина;
				Прервать;
			КонецЕсли;
			
			ИндексИсточника = ИндексИсточника + 1;
		КонецЦикла;
		
		Если ИндексИсточника = ИсточникДанных.Количество() Тогда
			ИндексИсточника = ИндексИсточника - 1;
		КонецЕсли;
		
		Если ЕстьКрайняяЗапись Тогда
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Выборка.Точка КАК Точка,
			|	Выборка.КонецПериода КАК КонецПериода,
			|	СУММА(Выборка.ЗначениеАналитики)/КОЛИЧЕСТВО(*) КАК ЗначениеАналитики
			|ПОМЕСТИТЬ
			|	ДанныеКрайнейТочки
			|ИЗ
			|	(ВЫБРАТЬ
			|		1 КАК Точка,
			|		&КонецПериодаПервойТочки КАК КонецПериода,
			|		&Аналитика КАК ЗначениеАналитики
			|	ИЗ
			|		РегистрСведений.&ИсточникДанных КАК Статистика
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Справочник.ПоказателиСчетчиков.Счетчики КАК Счетчики
			|	ПО
			|		Счетчики.Ссылка = &ПоказательСсылка
			|		И Статистика.Событие = Счетчики.Счетчик
			|	ГДЕ
			|		Статистика.Период МЕЖДУ &НачалоПериода И &КонецПериода
			|	) КАК ВЫБОРКА
			|СГРУППИРОВАТЬ ПО
			|	Выборка.Точка,
			|	Выборка.КонецПериода
			|";
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Точка,
			|	&КонецПериодаПервойТочки КАК КонецПериода,
			|	0 КАК ЗначениеАналитики
			|ПОМЕСТИТЬ
			|	ДанныеКрайнейТочки
			|ИЗ
			|	РегистрСведений.&ИсточникДанных КАК Статистика
			|";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсточникДанных", ИсточникДанных[ИндексИсточника]);
		Если Аналитика = "Сумма" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Аналитика", "ЧислоСрабатываний * СреднееЗначение");
		ИначеЕсли Аналитика = "СреднееЗначение" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Аналитика", "СреднееЗначение");
		ИначеЕсли Аналитика = "ЧислоСрабатываний" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Аналитика", "ЧислоСрабатываний");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("УслСчетчики", СчетчикиМассив);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода - Шаг);
		Запрос.УстановитьПараметр("КонецПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериодаПервойТочки", КонецПериода);
		
		Результат = Запрос.Выполнить();
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция СоздатьВременнуюТаблицуДанныхПоПоказателю(ПоказательСсылка, Запрос, Аналитика, Периодичность, ЧислоТочек)
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Выборка.Точка,
	|	Выборка.КонецПериода,
	|	СУММА(Выборка.ЗначениеАналитики)/КОЛИЧЕСТВО(*) КАК ЗначениеАналитики
	|ПОМЕСТИТЬ
	|	ДанныеЗаПериод
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ПериодыСчетчики.Точка КАК Точка,
	|		ПериодыСчетчики.КонецПериода КАК КонецПериода,
	|		&АналитикаНеделя КАК ЗначениеАналитики
	|	ИЗ
	|		(
	|		ВЫБРАТЬ ПЕРВЫЕ 1000000000
	|			Периоды.НомерТочки КАК Точка,
	|			Периоды.НачалоПериода КАК НачалоПериода,
	|			Периоды.КонецПериода КАК КонецПериода,
	|			Счетчики.Счетчик КАК Ссылка
	|		ИЗ
	|			Периоды КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.ПоказателиСчетчиков.Счетчики КАК Счетчики
	|		ПО
	|			Счетчики.Ссылка = &ПоказательСсылка
	|		ГДЕ
	|			Периоды.ИсточникДанных = &СтатистикаНеделя
	|		) КАК ПериодыСчетчики
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатистикаНеделя КАК СтатистикаНеделя
	|	ПО
	|		СтатистикаНеделя.Событие = ПериодыСчетчики.Ссылка
	|		И СтатистикаНеделя.Период МЕЖДУ ПериодыСчетчики.НачалоПериода И ПериодыСчетчики.КонецПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ПериодыСчетчики.Точка КАК Точка,
	|		ПериодыСчетчики.КонецПериода КАК КонецПериода,
	|		&АналитикаМесяц КАК ЗначениеАналитики
	|	ИЗ
	|		(
	|		ВЫБРАТЬ ПЕРВЫЕ 1000000000
	|			Периоды.НомерТочки КАК Точка,
	|			Периоды.НачалоПериода КАК НачалоПериода,
	|			Периоды.КонецПериода КАК КонецПериода,
	|			Счетчики.Счетчик КАК Ссылка
	|		ИЗ
	|			Периоды КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.ПоказателиСчетчиков.Счетчики КАК Счетчики
	|		ПО
	|			Счетчики.Ссылка = &ПоказательСсылка
	|		ГДЕ
	|			Периоды.ИсточникДанных = &СтатистикаМесяц
	|		) КАК ПериодыСчетчики
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатистикаМесяц КАК СтатистикаМесяц
	|	ПО
	|		СтатистикаМесяц.Событие = ПериодыСчетчики.Ссылка
	|		И СтатистикаМесяц.Период МЕЖДУ ПериодыСчетчики.НачалоПериода И ПериодыСчетчики.КонецПериода
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ПериодыСчетчики.Точка КАК Точка,
	|		ПериодыСчетчики.КонецПериода КАК КонецПериода,
	|		&АналитикаПолный КАК ЗначениеАналитики
	|	ИЗ
	|		(
	|		ВЫБРАТЬ ПЕРВЫЕ 1000000000
	|			Периоды.НомерТочки КАК Точка,
	|			Периоды.НачалоПериода КАК НачалоПериода,
	|			Периоды.КонецПериода КАК КонецПериода,
	|			Счетчики.Счетчик КАК Ссылка
	|		ИЗ
	|			Периоды КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.ПоказателиСчетчиков.Счетчики КАК Счетчики
	|		ПО
	|			Счетчики.Ссылка = &ПоказательСсылка
	|		ГДЕ
	|			Периоды.ИсточникДанных = &СтатистикаПолный
	|		) КАК ПериодыСчетчики
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтатистикаПолный КАК СтатистикаПолный
	|	ПО
	|		СтатистикаПолный.Событие = ПериодыСчетчики.Ссылка
	|		И СтатистикаПолный.Период МЕЖДУ ПериодыСчетчики.НачалоПериода И ПериодыСчетчики.КонецПериода
	|	) КАК Выборка
	|СГРУППИРОВАТЬ ПО
	|	Выборка.Точка,
	|	Выборка.КонецПериода
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЧислоТочек", Формат(ЧислоТочек,"ЧГ=0"));
	Если Аналитика = "Сумма" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&АналитикаНеделя", "СтатистикаНеделя.ЧислоСрабатываний * СтатистикаНеделя.СреднееЗначение");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&АналитикаМесяц", "СтатистикаМесяц.ЧислоСрабатываний * СтатистикаМесяц.СреднееЗначение");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&АналитикаПолный", "СтатистикаПолный.ЧислоСрабатываний * СтатистикаПолный.СреднееЗначение");
	ИначеЕсли Аналитика = "СреднееЗначение" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&АналитикаНеделя", "СтатистикаНеделя.СреднееЗначение");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&АналитикаМесяц", "СтатистикаМесяц.СреднееЗначение");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&АналитикаПолный", "СтатистикаПолный.СреднееЗначение");
	ИначеЕсли Аналитика = "ЧислоСрабатываний" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&АналитикаНеделя", "СтатистикаНеделя.ЧислоСрабатываний");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&АналитикаМесяц", "СтатистикаМесяц.ЧислоСрабатываний");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&АналитикаПолный", "СтатистикаПолный.ЧислоСрабатываний");
	КонецЕсли;
		
	Запрос.УстановитьПараметр("СтатистикаНеделя", "СтатистикаНеделя");
	Запрос.УстановитьПараметр("СтатистикаМесяц", "СтатистикаМесяц");
	Запрос.УстановитьПараметр("СтатистикаПолный", "СтатистикаПолный");
	Запрос.УстановитьПараметр("Неопределено", Неопределено);
	Запрос.УстановитьПараметр("ПоказательСсылка", ПоказательСсылка);
	
	Результат = Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Точка
	|ИЗ
	|	ДанныеЗаПериод
	|ГДЕ
	|	Точка = 1
	|";
	РезультатПроверкиКрайнейТочки = Запрос.Выполнить();
	
	ЕстьКрайняяТочка = Ложь;
	Если РезультатПроверкиКрайнейТочки.Пустой() Тогда
		ЕстьКрайняяТочка = ЗаполнитьКрайнююТочкуПоПоказателю(ПоказательСсылка, Запрос, Аналитика, Периодичность);
	КонецЕсли;
	
	Если ЕстьКрайняяТочка Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Точка,
		|	КонецПериода,
		|	ЗначениеАналитики
		|ПОМЕСТИТЬ
		|	Данные
		|ИЗ
		|	(ВЫБРАТЬ
		|		Точка КАК Точка,
		|		КонецПериода КАК КонецПериода,
		|		ЗначениеАналитики КАК ЗначениеАналитики
		|	ИЗ
		|		ДанныеКрайнейТочки
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Точка,
		|		КонецПериода,
		|		ЗначениеАналитики
		|	ИЗ
		|		ДанныеЗаПериод
		|	) КАК Выборка
		|";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Точка,
		|	КонецПериода,
		|	ЗначениеАналитики
		|ПОМЕСТИТЬ
		|	Данные
		|ИЗ
		|	ДанныеЗаПериод
		|";
		Запрос.Выполнить();
	КонецЕсли;
КонецФункции

Функция ВыбратьДанные(Запрос, Аналитика, Периодичность)
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Периоды.НомерТочки КАК Точка,
	|	ISNULL(Данные.ЗначениеАналитики, &ЗначениеПоУмолчанию) КАК ЗначениеАналитики
	|ИЗ
	|	Периоды КАК Периоды
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Данные КАК Данные ПО
	|		Периоды.НомерТочки = Данные.Точка
	|УПОРЯДОЧИТЬ ПО
	|	Периоды.НомерТочки	
	|";
	
	Если Периодичность <> "Нет" Тогда
		Запрос.УстановитьПараметр("ЗначениеПоУмолчанию", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("ЗначениеПоУмолчанию", Неопределено);
	КонецЕсли;
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
КонецФункции

//Создает иерархию счетчиков по полному коду
//Входные параметры:
//	ПолныйКод Тип Строка
//Возвращаемое значение
//	Ссылка Тип Справочники.ГруппыСчетчиков.Ссылка
Функция СоздатьНовуюГруппуСчетчиков(ПолныйКод) Экспорт
    
    Ссылка = Справочники.ГруппыСчетчиков.ПустаяСсылка();
	ЕстьНовый = Ложь;
	
	Для Каждого ТекСтрока Из ПолныйКод Цикл
		СсылкаРодитель = Ссылка;
		Если НЕ ЕстьНовый Тогда
			Ссылка = Справочники.ГруппыСчетчиков.НайтиПоКодуДляПоиска(ЛЕВ(ТекСтрока,200), Ссылка);
		КонецЕсли;
		
		Если Ссылка.Пустая() ИЛИ ЕстьНовый Тогда
			НовыйЭлемент = Справочники.ГруппыСчетчиков.СоздатьЭлемент();
			НовыйЭлемент.Код = ТекСтрока;
			НовыйЭлемент.КодДляПоиска = ТекСтрока;
			НовыйЭлемент.Родитель = СсылкаРодитель;
			НовыйЭлемент.Записать();
			Ссылка = НовыйЭлемент.Ссылка;
			
			ЕстьНовый = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ссылка;
    
КонецФункции

//Основная функция по заполнения регистра сведений "СтатистикаНеделя"
//Выбирает записи из регистра сведений "СтатистикаБуфер"
//Записывает обработанные записи в регистр сведений "СтатистикаНеделя"
//Удаляет выбранные записи из регистра сведений "СтатистикаБуфер"
//Входные параметры:
//	ДатаЗапуска Тип Дата(Дата и время) - 	временная метка, до которой выбираются записи из регистра сведений "СтатистикаБуфер"
//											для записи в регистр сведений "СтатистикаНеделя"
Функция ЗаполнитьСтатистикаНеделя(ДатаЗапуска, СчетчикиКеш) Экспорт
    
    Замер = ВнутренниеЗамеры.НачатьЗамер("ЗаполнитьСтатистикаНеделя");
    
    КонецПериода = НачалоМинуты(ДатаЗапуска) - 1;
	ДатаВыборки = ПолучитьДатуВыборки(КонецПериода);
	
	Пока ДатаВыборки <> Неопределено Цикл
        
        СтатистикаБуферРезультатЗапроса = ПолучитьДанныеИзСтатистикаБуфер(ДатаВыборки);
        
        Если НЕ СтатистикаБуферРезультатЗапроса.Пустой() Тогда
            
            ДанныеДляЗаписи = ПодготовитьДанныеДляЗаписи(СтатистикаБуферРезультатЗапроса, СчетчикиКеш, ДатаВыборки);
            ЗаписатьДанныеВСтатистикаНеделя(ДанныеДляЗаписи);
            
            УдалитьДанныеИзБуфера(ДатаВыборки);
            
        КонецЕсли;
        
        ДатаВыборки = ДатаВыборки + 60;
        Если ДатаВыборки < ДатаЗапуска Тогда
            ДатаВыборки = ПолучитьДатуВыборки(КонецПериода);
        Иначе
            ДатаВыборки = Неопределено;
        КонецЕсли;
                
    КонецЦикла;
    
    ВнутренниеЗамеры.ЗавершитьЗамер(Замер);
    
КонецФункции

Функция ПолучитьДатуВыборки(КонецПериода) Экспорт
    
    ДатаВыборки = Неопределено;
    
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|   СтатистикаБуфер.ДатаЗаписи КАК Период
	|ИЗ
	|	РегистрСведений.СтатистикаБуфер КАК СтатистикаБуфер
    |ГДЕ
    |   СтатистикаБуфер.ДатаЗаписи <= &КонецПериода
    |УПОРЯДОЧИТЬ ПО
    |   СтатистикаБуфер.ДатаЗаписи ВОЗР
	|";
    
    Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
    Выборка.Следующий();
    
    Если Выборка.Период <> NULL Тогда
        
        ДатаВыборки = Выборка.Период;
                
    КонецЕсли;
		
	Возврат ДатаВыборки;
    
КонецФункции

Функция ПолучитьДанныеИзСтатистикаБуфер(ДатаЗаписи) Экспорт
    
    Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатистикаБуфер.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.СтатистикаБуфер КАК СтатистикаБуфер
	|ГДЕ
	|	СтатистикаБуфер.ДатаЗаписи = &ДатаЗаписи
	|";

	Запрос.УстановитьПараметр("ДатаЗаписи", ДатаЗаписи);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
    
КонецФункции

Функция ПолучитьДанныеИзСтатистикаБуферДата(ДатаОбработки)
    
    Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатистикаБуферДата.ДатаЗаписи КАК Период,
	|	НАЧАЛОПЕРИОДА(СтатистикаБуферДата.ДатаЗаписи, МИНУТА) КАК ПериодМинута,
    |   ГУИД КАК ГУИД,
	|	СтатистикаБуферДата.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.СтатистикаБуферДата КАК СтатистикаБуферДата
    |ГДЕ
    |   СтатистикаБуферДата.ДатаЗаписи <= &ДатаОбработки
	|УПОРЯДОЧИТЬ ПО
    |   СтатистикаБуферДата.ДатаЗаписи ВОЗР
	|";

    Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки + 59);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
    
КонецФункции

Функция НовыйСчетчикиКешСсылки()
    
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	
	КС_620 = Новый КвалификаторыСтроки(620);
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока_620 = Новый ОписаниеТипов(Массив,,КС_620,,);
	Массив.Очистить();
		
	ТаблицаЗначений.Колонки.Добавить("ПолныйКодДляПоиска", ОписаниеТиповСтрока_620);
    ТаблицаЗначений.Колонки.Добавить("ПолныйКодДляПоиска29", ОписаниеТиповСтрока_620);
		
	Возврат ТаблицаЗначений;
    
КонецФункции

Функция ПодготовитьДанныеДляЗаписи(СтатистикаБуферРезультатЗапроса, СчетчикиКеш, ДатаВыборкиПарам = Неопределено)
    
    ДанныеДляЗаписи = Новый Соответствие;
    СчетчикиКешСсылки = НовыйСчетчикиКешСсылки();
	ВыборкаДетальныеЗаписи = СтатистикаБуферРезультатЗапроса.Выбрать();

    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        Если ДатаВыборкиПарам = Неопределено Тогда
            ДатаВыборки = ВыборкаДетальныеЗаписи.ПериодМинута;
        Иначе
            ДатаВыборки = ДатаВыборкиПарам;
        КонецЕсли;
        
        ДанныеJSON = РазобратьДанныеJSON(ВыборкаДетальныеЗаписи.Данные, СчетчикиКеш, СчетчикиКешСсылки, ДатаВыборки);
                       
        Для Каждого ТекДанные Из ДанныеJSON Цикл
            
            ДанныеСчетчика = ДанныеДляЗаписи[ТекДанные.Ключ];
            
            Если ДанныеСчетчика = Неопределено Тогда
                
                ДанныеСчетчика = Новый Соответствие;
                ДанныеСчетчика.Вставить(ДатаВыборки, ТекДанные.Значение);
                ДанныеДляЗаписи.Вставить(ТекДанные.Ключ, ДанныеСчетчика);
                
            Иначе
                
                ДанныеСчетчикаНаДату = ДанныеСчетчика[ДатаВыборки];
                
                Если ДанныеСчетчикаНаДату = Неопределено Тогда
                    ДанныеСчетчика.Вставить(ДатаВыборки, ТекДанные.Значение);                    
                Иначе
                    ТекДанныеЗначение = ТекДанные.Значение;
                    ДанныеСчетчика = ДанныеСчетчикаНаДату;
                    
                    ЧислоСрабатыванийСумма = ДанныеСчетчика["ЧислоСрабатываний"] + ТекДанныеЗначение["ЧислоСрабатываний"];
                    Если ЧислоСрабатыванийСумма <> 0 Тогда
                        ДанныеСчетчика["СреднееЗначение"] = (ДанныеСчетчика["СреднееЗначение"]*ДанныеСчетчика["ЧислоСрабатываний"] + ТекДанныеЗначение["СреднееЗначение"]*ТекДанныеЗначение["ЧислоСрабатываний"])/ЧислоСрабатыванийСумма; 
                    Иначе
                        ДанныеСчетчика["СреднееЗначение"] = 0;
                    КонецЕсли;
                    ДанныеСчетчика["ЧислоСрабатываний"] = ЧислоСрабатыванийСумма;
                    Если ДанныеСчетчика["МинимальноеЗначение"] > ТекДанныеЗначение["МинимальноеЗначение"] Тогда
                        ДанныеСчетчика["МинимальноеЗначение"] = ТекДанныеЗначение["МинимальноеЗначение"];
                    КонецЕсли;
                    Если ДанныеСчетчика["МаксимальноеЗначение"] < ТекДанныеЗначение["МаксимальноеЗначение"] Тогда
                        ДанныеСчетчика["МаксимальноеЗначение"] = ТекДанныеЗначение["МаксимальноеЗначение"];
                    КонецЕсли;
                КонецЕсли;
                
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЦикла;
    
    Если СчетчикиКешСсылки.Количество() > 0 Тогда
        
        Запрос = Новый Запрос;
        
        Запрос.Текст = 
        "ВЫБРАТЬ
        |	СчетчикиКешСсылки.ПолныйКодДляПоиска КАК ПолныйКодДляПоиска,
        |	СчетчикиКешСсылки.ПолныйКодДляПоиска29 КАК ПолныйКодДляПоиска29
        |ПОМЕСТИТЬ
        |	СчетчикиКешСсылки
        |ИЗ
        |	&СчетчикиКешСсылки КАК СчетчикиКешСсылки
        |ИНДЕКСИРОВАТЬ ПО
        |	ПолныйКодДляПоиска
        |;
        |ВЫБРАТЬ
        |	ГруппыСчетчиков.Ссылка КАК Событие,
        |   СчетчикиКешСсылки.ПолныйКодДляПоиска КАК ПолныйКодДляПоиска,
        |   СчетчикиКешСсылки.ПолныйКодДляПоиска29 КАК ПолныйКодДляПоиска29
        |ИЗ
        |	СчетчикиКешСсылки КАК СчетчикиКешСсылки
        |ЛЕВОЕ СОЕДИНЕНИЕ
        |	Справочник.ГруппыСчетчиков КАК ГруппыСчетчиков
        |ПО
        |	СчетчикиКешСсылки.ПолныйКодДляПоиска = ГруппыСчетчиков.ПолныйКодДляПоиска
        |";
        
        Запрос.УстановитьПараметр("СчетчикиКешСсылки", СчетчикиКешСсылки);
        
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        Пока Выборка.Следующий() Цикл
            
            Если ЗначениеЗаполнено(Выборка.Событие) Тогда
                Событие = Выборка.Событие;
            Иначе
                Событие = СоздатьНовуюГруппуСчетчиков(СтрРазделить(Выборка.ПолныйКодДляПоиска29, "↔"));
            КонецЕсли;
            
            СчетчикиКеш.Вставить(Выборка.ПолныйКодДляПоиска, Событие);
            Для Каждого ДанныеНаДату Из ДанныеДляЗаписи[Выборка.ПолныйКодДляПоиска] Цикл
                ДанныеНаДату.Значение.Событие = Событие;
            КонецЦикла;
                        
        КонецЦикла;
                
    КонецЕсли;
    
    Возврат ДанныеДляЗаписи;

КонецФункции

Процедура ОткрытьИнцидент(КодИнцидента, Сообщение)
    
    // Тип инцидента "ЦКК.InputStatistics.Error"
    ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("ЦКК.InputStatistics.Error");
    ТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, "ЦКК.InputStatistics.Error", Перечисления.УровниИнцидентов.Ошибка);
    
    // Инцидент
    ХешИнцидента = Справочники.Инциденты.ХешИнцидента(КодИнцидента);
    Инцидент = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, КодИнцидента, Ложь);
            
	ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, Инцидент, "", "", Сообщение, 1);
    
КонецПроцедуры

Процедура ЗаписатьДанныеВСтатистикаНеделя(ДанныеДляЗаписи)
		
	НаборЗаписей = РегистрыСведений.СтатистикаНеделя.СоздатьНаборЗаписей();
	
	РазмерПакета = Константы.СтатистикаРазмерПакетаЗаписи.Получить();
	РазмерПакета = ?(РазмерПакета <> 0, РазмерПакета, 1000);
	ТекущийРазмер = 0;
	
	ВнешниеЦКК = Справочники.ВнешниеЦКК.ПолучитьВнешниеЦККДляОтправкиСчетчиков();
	Если ВнешниеЦКК.Количество() > 0 Тогда
		ЗаписыватьДанныеДляВнешнихЦКК = Истина;
	Иначе
		ЗаписыватьДанныеДляВнешнихЦКК = Ложь;
	КонецЕсли;
	
	Если ЗаписыватьДанныеДляВнешнихЦКК Тогда
		ДанныеДляОтправки = Новый Соответствие;
	КонецЕсли;
        
    Для Каждого ТекЗаписьДанные Из ДанныеДляЗаписи Цикл
        
        Для Каждого ТекЗапись Из ТекЗаписьДанные.Значение Цикл
            
            Если ТекущийРазмер > РазмерПакета Тогда
                
                Попытка
                    
                    НаборЗаписей.ОбменДанными.Загрузка = Истина;
                    НаборЗаписей.Записать(Ложь);
                    НаборЗаписей.Очистить();
                    ТекущийРазмер = 0;
                    
                Исключение
                    
                    ОписаниеДублей = ПолучитьДублиНабораЗаписей(НаборЗаписей);
                    ОписаниеУжеЕсть = ПолучитьУжеЕсть(НаборЗаписей, "СтатистикаНеделя");
                    
                    Сообщение = "Ошибка записи в РегистрСведений.СтатистикаНеделя.";
                    Если ЗначениеЗаполнено(ОписаниеДублей) Тогда
                        Сообщение = Сообщение + Символы.ПС + "Набор записей содержит дубли:" + Символы.ПС + ОписаниеДублей; 
                    КонецЕсли;
                    Если ЗначениеЗаполнено(ОписаниеУжеЕсть) Тогда
                        Сообщение = Сообщение + Символы.ПС + "Повторная запись данных:" + Символы.ПС + ОписаниеУжеЕсть; 
                    КонецЕсли;
                    
                    ОткрытьИнцидент("РегистрСведений.СтатистикаНеделя", Сообщение);
                    
                    Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
                    Если ЗначениеЗаполнено(ОписаниеДублей) Тогда
                        Комментарий = Комментарий + Символы.ПС + ОписаниеДублей;
                    КонецЕсли;
                    Если ЗначениеЗаполнено(ОписаниеУжеЕсть) Тогда
                        Комментарий = Комментарий + Символы.ПС + ОписаниеУжеЕсть;
                    КонецЕсли;
                    
                    ЗаписьЖурналаРегистрации("ЗаписатьДанныеВСтатистикаНеделя", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.СтатистикаНеделя, НаборЗаписей, Комментарий);
                    
                    НаборЗаписей.Очистить();
                    ТекущийРазмер = 0;
                    
                КонецПопытки;
                
            КонецЕсли;
            
            НоваяЗапись = НаборЗаписей.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекЗапись.Значение);
            ТекущийРазмер = ТекущийРазмер + 1;
        
        КонецЦикла;

	КонецЦикла;
	
	Попытка
        
        НаборЗаписей.ОбменДанными.Загрузка = Истина;
        НаборЗаписей.Записать(Ложь);
        НаборЗаписей.Очистить();
        ТекущийРазмер = 0;        
        
    Исключение
        
        ОписаниеДублей = ПолучитьДублиНабораЗаписей(НаборЗаписей);
        ОписаниеУжеЕсть = ПолучитьУжеЕсть(НаборЗаписей, "СтатистикаНеделя");
        
        Сообщение = "Ошибка записи в РегистрСведений.СтатистикаНеделя.";
        Если ЗначениеЗаполнено(ОписаниеДублей) Тогда
            Сообщение = Сообщение + Символы.ПС + "Набор записей содержит дубли:" + Символы.ПС + ОписаниеДублей; 
        КонецЕсли;
        Если ЗначениеЗаполнено(ОписаниеУжеЕсть) Тогда
            Сообщение = Сообщение + Символы.ПС + "Повторная запись данных:" + Символы.ПС + ОписаниеУжеЕсть; 
        КонецЕсли;
        ОткрытьИнцидент("РегистрСведений.СтатистикаНеделя", Сообщение);
        
        Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        Если ЗначениеЗаполнено(ОписаниеДублей) Тогда
            Комментарий = Комментарий + Символы.ПС + ОписаниеДублей;
        КонецЕсли;
        Если ЗначениеЗаполнено(ОписаниеУжеЕсть) Тогда
            Комментарий = Комментарий + Символы.ПС + ОписаниеУжеЕсть;
        КонецЕсли;
        
        ЗаписьЖурналаРегистрации("ЗаписатьДанныеВСтатистикаНеделя", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.СтатистикаНеделя, НаборЗаписей, Комментарий);
        
        НаборЗаписей.Очистить();
        ТекущийРазмер = 0;
        
    КонецПопытки;
	
	//Запись данных для передачи во внешние ЦКК
	Если ЗаписыватьДанныеДляВнешнихЦКК Тогда
		НаборЗаписейВнешниеЦКК = РегистрыСведений.СтатистикаБуферДатаВнешниеЦКК.СоздатьНаборЗаписей();
		ПорядковыйНомерПакета = Справочники.ПорядковыеНомераДанных.ПолучитьПорядковыйНомер(Справочники.ПорядковыеНомераДанных.СтатистикаБуферДатаВнешниеЦКК.Ссылка);
		Для Каждого ТекВнешнийЦКК Из ВнешниеЦКК Цикл
			Для Каждого ТекДанные Из ДанныеДляОтправки Цикл
				НовЗаписьВнешнийЦКК = НаборЗаписейВнешниеЦКК.Добавить();
				НовЗаписьВнешнийЦКК.ВнешнийЦКК = ТекВнешнийЦКК;
				НовЗаписьВнешнийЦКК.ПорядковыйНомерПакета = ПорядковыйНомерПакета;
				НовЗаписьВнешнийЦКК.ДатаЗаписи = ТекДанные.Ключ;
				НовЗаписьВнешнийЦКК.ГУИД = Новый УникальныйИдентификатор();
				НовЗаписьВнешнийЦКК.Данные = ТекДанные.Значение;
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписейВнешниеЦКК.ОбменДанными.Загрузка = Истина;
		НаборЗаписейВнешниеЦКК.Записать(Ложь);
        
    КонецЕсли;
		
КонецПроцедуры

Процедура ЗаписатьПорциюСтатистикаНеделя(Знач Порция) Экспорт
    
    НаборЗаписей = РегистрыСведений.СтатистикаНеделя.СоздатьНаборЗаписей();
    НаборЗаписей.Загрузить(Порция);
    НаборЗаписей.ОбменДанными.Загрузка = Истина;
    НаборЗаписей.Записать(Ложь);    
    
КонецПроцедуры

Функция ПолучитьДублиНабораЗаписей(НаборЗаписей)
    
    ТЗн = НаборЗаписей.Выгрузить(Неопределено, "Период, Событие");
    ТЗн.Индексы.Добавить("Период, Событие");
    ТЗн.Колонки.Добавить("СчетчикОдинаковых", Новый ОписаниеТипов("Число"));
    ТЗн.ЗаполнитьЗначения(1, "СчетчикОдинаковых");
    ТЗн.Свернуть("Период, Событие", "СчетчикОдинаковых");
    
    ОписаниеДублей = "";
    
    Если ТЗн.Количество() > 0 Тогда
        ОписаниеДублей = "Дубли набора записей:
        |";
    КонецЕсли;
    
    Для Каждого ТекСтрока Из ТЗн Цикл
        Если ТекСтрока.СчетчикОдинаковых > 1 Тогда
            ОписаниеДублей = ОписаниеДублей + ТекСтрока.Период + ";" + ТекСтрока.Событие + ";" + Формат(ТекСтрока.СчетчикОдинаковых, "ЧН=0; ЧГ=0") + Символы.ПС;
        КонецЕсли;
    КонецЦикла;
    
    Возврат ОписаниеДублей;
        
КонецФункции

Функция ПолучитьУжеЕсть(НаборЗаписей, ИмяРегистраСтатистики)
    
    ТЗн = НаборЗаписей.Выгрузить(Неопределено, "Период, Событие");
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Период,
    |   Событие
    |ПОМЕСТИТЬ
    |   НаборЗаписей
    |ИЗ
    |   &ТЗн КАК ТЗн
    |ИНДЕКСИРОВАТЬ ПО
    |   Период,
    |   Событие
    |;
    |ВЫБРАТЬ
    |   &ИмяРегистраСтатистики.Период,
    |   &ИмяРегистраСтатистики.Событие
    |ИЗ
    |   НаборЗаписей КАК НаборЗаписей
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   РегистрСведений.&ИмяРегистраСтатистики КАК &ИмяРегистраСтатистики
    |ПО
    |   &ИмяРегистраСтатистики.Период = НаборЗаписей.Период
    |   И &ИмяРегистраСтатистики.Событие = НаборЗаписей.Событие
    |";
    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРегистраСтатистики", ИмяРегистраСтатистики);
    
    Запрос.УстановитьПараметр("ТЗн", ТЗн);
    
    Результат = Запрос.Выполнить();
    
    УжеЕсть = "";
    Если НЕ Результат.Пустой() Тогда
        
        УжеЕсть = "Уже есть:
        |";
        
        Выборка = Результат.Выбрать();
        Пока Выборка.Следующий() Цикл
            УжеЕсть = УжеЕсть + Выборка.Период + ";" + Выборка.Событие + Символы.ПС;
        КонецЦикла;
        
    КонецЕсли;
    
    Возврат УжеЕсть;
    
КонецФункции

Функция ЗаписатьДанныеПоРегистрам(ДанныеДляЗаписиСоответствие, ИсточникВнешниеЦКК, ДатаОбработки)
    
    ДанныеСтатистикаМесяц = Новый Соответствие;
    ДанныеСтатистикаПолный = Новый Соответствие;
    
    Для Каждого ТекДанные Из ДанныеДляЗаписиСоответствие Цикл
        
        Для Каждого ТекДанныеНаДату Из ТекДанные.Значение Цикл
            
            ТекЗначения = ТекДанныеНаДату.Значение;
            
            ДобавитьДанныеСтатистики(ДанныеСтатистикаМесяц, ТекЗначения, "СтатистикаМесяц");
            ДобавитьДанныеСтатистики(ДанныеСтатистикаПолный, ТекЗначения, "СтатистикаПолный");
            
            МенеджерЗаписиСтатистикаНеделя = РегистрыСведений.СтатистикаНеделя.СоздатьМенеджерЗаписи();
            МенеджерЗаписиСтатистикаНеделя.Период = ТекЗначения.Период;
            МенеджерЗаписиСтатистикаНеделя.Событие = ТекЗначения.Событие;
            МенеджерЗаписиСтатистикаНеделя.Прочитать();
            МенеджерЗаписиСтатистикаНеделя.Период = ТекЗначения.Период;
            МенеджерЗаписиСтатистикаНеделя.Событие = ТекЗначения.Событие;
            
            Если МенеджерЗаписиСтатистикаНеделя.Выбран() Тогда
                
                ЧислоСрабатыванийБыло = МенеджерЗаписиСтатистикаНеделя.ЧислоСрабатываний;
                СреднееЗначениеБыло = МенеджерЗаписиСтатистикаНеделя.СреднееЗначение;
                
                МенеджерЗаписиСтатистикаНеделя.ЧислоСрабатываний = ЧислоСрабатыванийБыло + ТекЗначения.ЧислоСрабатываний; 
                МенеджерЗаписиСтатистикаНеделя.СреднееЗначение = (ЧислоСрабатыванийБыло * СреднееЗначениеБыло + ТекЗначения.ЧислоСрабатываний * ТекЗначения.СреднееЗначение)/(ЧислоСрабатыванийБыло + ТекЗначения.ЧислоСрабатываний);
                Если МенеджерЗаписиСтатистикаНеделя.МинимальноеЗначение > ТекЗначения.МинимальноеЗначение Тогда
                    МенеджерЗаписиСтатистикаНеделя.МинимальноеЗначение = ТекЗначения.МинимальноеЗначение;
                КонецЕсли;
                Если МенеджерЗаписиСтатистикаНеделя.МаксимальноеЗначение < ТекЗначения.МаксимальноеЗначение Тогда
                    МенеджерЗаписиСтатистикаНеделя.МаксимальноеЗначение = ТекЗначения.МаксимальноеЗначение;
                КонецЕсли;
                                                
            Иначе
                
                ЗаполнитьЗначенияСвойств(МенеджерЗаписиСтатистикаНеделя, ТекЗначения);
                Если НачалоЧаса(ТекЗначения.Период) < НачалоЧаса(ДатаОбработки) Тогда
                    МенеджерЗаписиСтатистикаНеделя.Обработано = Истина;
                КонецЕсли;
                
            КонецЕсли;
                        
            МенеджерЗаписиСтатистикаНеделя.Записать(Истина);
            
        КонецЦикла;
        
    КонецЦикла;
    
    ЗаписатьДанныеСтатистики(ДанныеСтатистикаМесяц, "СтатистикаМесяц", ДатаОбработки);
    ЗаписатьДанныеСтатистики(ДанныеСтатистикаПолный, "СтатистикаПолный", ДатаОбработки);
    
КонецФункции

Процедура ДобавитьДанныеСтатистики(ДанныеСтатистики, ТекЗначения, ВидСтатистики)
    
    Если ВидСтатистики = "СтатистикаМесяц" Тогда
        Период = НачалоЧаса(ТекЗначения.Период);
    ИначеЕсли ВидСтатистики = "СтатистикаПолный" Тогда
        Период = НачалоДня(ТекЗначения.Период);
    КонецЕсли;
    
    ДанныеПериода = ДанныеСтатистики[Период];
    Если ДанныеПериода = Неопределено Тогда
        ДанныеПериода = Новый Соответствие;
        ДанныеСтатистики.Вставить(Период, ДанныеПериода);
    КонецЕсли;
    
    ДанныеСобытия = ДанныеПериода[ТекЗначения.Событие];
    
    Если ДанныеСобытия = Неопределено Тогда
        
        ДанныеСобытия = Новый Структура("ЧислоСрабатываний, СреднееЗначение, МинимальноеЗначение, МаксимальноеЗначение");
        ЗаполнитьЗначенияСвойств(ДанныеСобытия, ТекЗначения);
        ДанныеПериода.Вставить(ТекЗначения.Событие, ДанныеСобытия);
        
    Иначе
        
        ЧислоСрабатыванийБыло = ДанныеСобытия.ЧислоСрабатываний;
        СреднееЗначениеБыло = ДанныеСобытия.СреднееЗначение;
        
        ДанныеСобытия.ЧислоСрабатываний = ЧислоСрабатыванийБыло + ТекЗначения.ЧислоСрабатываний; 
        ДанныеСобытия.СреднееЗначение = (ЧислоСрабатыванийБыло * СреднееЗначениеБыло + ТекЗначения.ЧислоСрабатываний * ТекЗначения.СреднееЗначение)/(ЧислоСрабатыванийБыло + ТекЗначения.ЧислоСрабатываний);
        Если ДанныеСобытия.МинимальноеЗначение > ТекЗначения.МинимальноеЗначение Тогда
            ДанныеСобытия.МинимальноеЗначение = ТекЗначения.МинимальноеЗначение;
        КонецЕсли;
        Если ДанныеСобытия.МаксимальноеЗначение < ТекЗначения.МаксимальноеЗначение Тогда
            ДанныеСобытия.МаксимальноеЗначение = ТекЗначения.МаксимальноеЗначение;
        КонецЕсли;
                
    КонецЕсли;
            
КонецПроцедуры

Процедура ЗаписатьДанныеСтатистики(ДанныеСтатистики, ВидСтатистики, ДатаОбработки)
    
    Для Каждого ДанныеПериода Из ДанныеСтатистики Цикл
        
        Период = ДанныеПериода.Ключ;
        
        Если ВидСтатистики = "СтатистикаМесяц" И НачалоЧаса(Период) >= НачалоЧаса(ДатаОбработки) Тогда
            Продолжить;
        ИначеЕсли ВидСтатистики = "СтатистикаПолный" И НачалоДня(Период) >= НачалоДня(ДатаОбработки) Тогда
            Продолжить;
        КонецЕсли;
        
        
        Для Каждого ДанныеСобытия Из ДанныеПериода.Значение Цикл
            
            Событие = ДанныеСобытия.Ключ;
            
            ТекЗначения = ДанныеСобытия.Значение;
            
            МенеджерЗаписи = РегистрыСведений[ВидСтатистики].СоздатьМенеджерЗаписи();
            МенеджерЗаписи.Период = Период;
            МенеджерЗаписи.Событие = Событие;
            
            МенеджерЗаписи.Прочитать();
            МенеджерЗаписи.Период = Период;
            МенеджерЗаписи.Событие = Событие;
            
            Если МенеджерЗаписи.Выбран() Тогда
                
                ЧислоСрабатыванийБыло = МенеджерЗаписи.ЧислоСрабатываний;
                СреднееЗначениеБыло = МенеджерЗаписи.СреднееЗначение;
                
                МенеджерЗаписи.ЧислоСрабатываний = ЧислоСрабатыванийБыло + ТекЗначения.ЧислоСрабатываний; 
                МенеджерЗаписи.СреднееЗначение = (ЧислоСрабатыванийБыло * СреднееЗначениеБыло + ТекЗначения.ЧислоСрабатываний * ТекЗначения.СреднееЗначение)/(ЧислоСрабатыванийБыло + ТекЗначения.ЧислоСрабатываний);
                Если МенеджерЗаписи.МинимальноеЗначение > ТекЗначения.МинимальноеЗначение Тогда
                    МенеджерЗаписи.МинимальноеЗначение = ТекЗначения.МинимальноеЗначение;
                КонецЕсли;
                Если МенеджерЗаписи.МаксимальноеЗначение < ТекЗначения.МаксимальноеЗначение Тогда
                    МенеджерЗаписи.МаксимальноеЗначение = ТекЗначения.МаксимальноеЗначение;
                КонецЕсли;
                                                
            Иначе
                
                ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекЗначения);
                Если ВидСтатистики = "СтатистикаМесяц" И НачалоДня(Период) < НачалоДня(ТекущаяДата()) Тогда
                    МенеджерЗаписи.Обработано = Истина;
                КонецЕсли;
                
            КонецЕсли;
                        
            МенеджерЗаписи.Записать(Истина);
            
        КонецЦикла;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура УдалитьДанныеИзБуфера(ДатаЗаписи)
    
    НаборЗаписей = РегистрыСведений.СтатистикаБуфер.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.ДатаЗаписи.Установить(ДатаЗаписи);
	НаборЗаписей.Записать();
		
КонецПроцедуры

Функция УдалитьДанныеИзСтатистикаНеделя(ДатаЗапуска) Экспорт
	ПериодХранения = Константы.ПериодХраненияДанныхСтатистикаНеделя.Получить();
	ПериодХранения = ?(ПериодХранения <> 0, ПериодХранения, 7);
	
	ДатаЗапускаНачалоДня = НачалоДня(ДатаЗапуска) - ПериодХранения * 86400;
	
	Если ЕстьДанныеДляУдаленияСтатистикаНеделя(ДатаЗапускаНачалоДня - 1) Тогда
		ДиапазонВыборки = ПолучитьПериодВыборкиУдаленияСтатистикаНеделя(ДатаЗапускаНачалоДня - 1);
		
		Пока ДиапазонВыборки.Конец < ДатаЗапускаНачалоДня Цикл
			УдалитьДанныеИзСтатистикаНеделяДиапазон(ДиапазонВыборки);
			ДиапазонВыборки = ПолучитьПериодВыборкиУдаленияСтатистикаНеделя(ДатаЗапускаНачалоДня - 1);
		КонецЦикла;
	КонецЕсли;
КонецФункции

Функция ЕстьДанныеДляУдаленияСтатистикаНеделя(КонецПериода)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатистикаНеделя.Период
	|ИЗ
	|	РегистрСведений.СтатистикаНеделя КАК СтатистикаНеделя
	|ГДЕ
	|	СтатистикаНеделя.Период <= &КонецПериода
	|	И СтатистикаНеделя.Обработано = &Истина
	|";
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Истина", Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции

Функция ПолучитьПериодВыборкиУдаленияСтатистикаНеделя(КонецПериода)
	РазмерПакета = Константы.СтатистикаРазмерПакетаЗапроса.Получить();
	РазмерПакета = ?(РазмерПакета <> 0, РазмерПакета, 10000);
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(Период) КАК ПериодМинимум,
	|	МАКСИМУМ(Период) КАК ПериодМаксимум
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерПакета, "ЧН=0; ЧГ=") + "
	|		СтатистикаНеделя.Период
	|	ИЗ
	|		РегистрСведений.СтатистикаНеделя КАК СтатистикаНеделя
	|	ГДЕ
	|		СтатистикаНеделя.Период <= &КонецПериода
	|		И СтатистикаНеделя.Обработано = &Истина
	|	УПОРЯДОЧИТЬ ПО
	|		СтатистикаНеделя.Период
	|	) КАК Выборка";
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Истина", Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ПериодМинимум <> NULL Тогда
			НачалоПериода = ВыборкаДетальныеЗаписи.ПериодМинимум;
			КонецПериода = КонецМинуты(ВыборкаДетальныеЗаписи.ПериодМаксимум);
			
			Диапазон = Новый Диапазон(НачалоПериода, КонецПериода);
		Иначе
			НачалоПериода = КонецПериода + 1;
			КонецПериода = КонецПериода + 1;
			
			Диапазон = Новый Диапазон(НачалоПериода, КонецПериода);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Диапазон;
КонецФункции

Функция УдалитьДанныеИзСтатистикаНеделяДиапазон(ДиапазонВыборки)
	НачалоПериода = ДиапазонВыборки.Начало;
	Пока НачалоПериода <= ДиапазонВыборки.Конец Цикл
		НаборЗаписей = РегистрыСведений.СтатистикаНеделя.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Использование = Истина;
		НаборЗаписей.Отбор.Период.ВидСравнения = ВидСравнения.Равно;
		НаборЗаписей.Отбор.Период.Установить(НачалоПериода);
		НаборЗаписей.Записать();
		
		НачалоПериода = НачалоПериода + 60;
	КонецЦикла;
КонецФункции

//Основная функция по заполнения регистра сведений "СтатистикаМесяц"
//Выбирает записи из регистра сведений "СтатистикаНеделя"
//Записывает обработанные записи в регистр сведений "СтатистикаМесяц"
//Устанавливает в выбранных записях регистра сведений "СтатистикаНеделя" измерение "Обработано = Истина"
//Входные параметры:
//	ДатаЗапуска Тип Дата(Дата и время) - 	временная метка, до начала часа которой выбираются записи
//											из регистра сведений "СтатистикаНеделя"
//											для записи в регистр сведений "СтатистикаМесяц"
Функция ЗаполнитьСтатистикаМесяц(ДатаЗапуска) Экспорт
    
    ДатаЗапускаНачалоЧаса = НачалоЧаса(ДатаЗапуска);
	ДиапазонВыборки = ПолучитьПериодВыборкиСтатистикаМесяц(ДатаЗапускаНачалоЧаса - 1);
	
	Пока ДиапазонВыборки <> Неопределено И ДиапазонВыборки.Конец < ДатаЗапускаНачалоЧаса Цикл
        
        СтатистикаНеделяРезультатЗапроса = ПолучитьДанныеИзСтатистикаНеделя(ДиапазонВыборки);
		ЗаписатьДанныеВСтатистикаМесяц(СтатистикаНеделяРезультатЗапроса);
		УстановитьФлагОбработкиВСтатистикаНеделя(ДиапазонВыборки);
		
		ДиапазонВыборки = ПолучитьПериодВыборкиСтатистикаМесяц(ДатаЗапускаНачалоЧаса - 1);
        
    КонецЦикла;
    
КонецФункции

Функция ПолучитьПериодВыборкиСтатистикаМесяц(КонецПериода)
    
    Запрос = Новый Запрос;
	
	Запрос.Текст = " 
	|ВЫБРАТЬ
	|   МИНИМУМ(СтатистикаНеделя.Период) КАК Период
	|ИЗ
	|	РегистрСведений.СтатистикаНеделя КАК СтатистикаНеделя
	|ГДЕ
	|	СтатистикаНеделя.Период <= &КонецПериода
	|	И НЕ СтатистикаНеделя.Обработано
	|";
    
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Период <> NULL Тогда
			НачалоПериода = НачалоЧаса(ВыборкаДетальныеЗаписи.Период);
			КонецПериода = КонецЧаса(ВыборкаДетальныеЗаписи.Период);
			
			Диапазон = Новый Диапазон(НачалоПериода, КонецПериода);
		Иначе
			Диапазон = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Диапазон;
    
КонецФункции

Функция ПолучитьДанныеИзСтатистикаНеделя(ДиапазонВыборки)
    
    Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтатистикаНеделя.Период, ЧАС) КАК Период,
	|	СтатистикаНеделя.Событие КАК Событие,
	|	СУММА(СтатистикаНеделя.ЧислоСрабатываний) КАК ЧислоСрабатываний,
	|	ВЫБОР
	|   	КОГДА СУММА(СтатистикаНеделя.ЧислоСрабатываний) <> 0 ТОГДА СУММА(СтатистикаНеделя.ЧислоСрабатываний * СтатистикаНеделя.СреднееЗначение) / СУММА(СтатистикаНеделя.ЧислоСрабатываний)
	|   	ИНАЧЕ 0
	|   КОНЕЦ  КАК СреднееЗначение,
    |   МИНИМУМ(СтатистикаНеделя.МинимальноеЗначение) КАК МинимальноеЗначение,
    |   МАКСИМУМ(СтатистикаНеделя.МаксимальноеЗначение) КАК МаксимальноеЗначение,
    |   ЛОЖЬ КАК Обработано
	|ИЗ
	|	РегистрСведений.СтатистикаНеделя КАК СтатистикаНеделя
	|ГДЕ
	|	СтатистикаНеделя.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СтатистикаНеделя.Обработано = ЛОЖЬ
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СтатистикаНеделя.Период, ЧАС),
	|	СтатистикаНеделя.Событие
	|";

	Запрос.УстановитьПараметр("НачалоПериода", ДиапазонВыборки.Начало);
	Запрос.УстановитьПараметр("КонецПериода", ДиапазонВыборки.Конец);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
    
КонецФункции

Функция ЗаписатьДанныеВСтатистикаМесяц(ДанныеДляЗаписиРезультатЗапроса)
	НаборЗаписей = РегистрыСведений.СтатистикаМесяц.СоздатьНаборЗаписей();
	
	РазмерПакета = Константы.СтатистикаРазмерПакетаЗаписи.Получить();
	РазмерПакета = ?(РазмерПакета <> 0, РазмерПакета, 1000);
	ТекущийРазмер = 0;
	
	ВыборкаДетальныеЗаписи = ДанныеДляЗаписиРезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        Если ТекущийРазмер > РазмерПакета Тогда
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать(Ложь);
				НаборЗаписей.Очистить();
				ТекущийРазмер = 0;
            Исключение
                
                ОписаниеДублей = ПолучитьДублиНабораЗаписей(НаборЗаписей);
                ОписаниеУжеЕсть = ПолучитьУжеЕсть(НаборЗаписей, "СтатистикаМесяц");
                                
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
                Если ЗначениеЗаполнено(ОписаниеДублей) Тогда
                    Комментарий = Комментарий + Символы.ПС + ОписаниеДублей;
                КонецЕсли;
                Если ЗначениеЗаполнено(ОписаниеУжеЕсть) Тогда
                    Комментарий = Комментарий + Символы.ПС + ОписаниеУжеЕсть;
                КонецЕсли;
                
				ЗаписьЖурналаРегистрации("ЗаписатьДанныеВСтатистикаМесяц",УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
				НаборЗаписей.Очистить();
				ТекущийРазмер = 0;
                
			КонецПопытки;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		ТекущийРазмер = ТекущийРазмер + 1;
			
	КонецЦикла;
	
    Попытка
        
        НаборЗаписей.ОбменДанными.Загрузка = Истина;
        НаборЗаписей.Записать(Ложь);
        НаборЗаписей.Очистить();
		ТекущийРазмер = 0;
        
    Исключение
        
        ОписаниеДублей = ПолучитьДублиНабораЗаписей(НаборЗаписей);
        ОписаниеУжеЕсть = ПолучитьУжеЕсть(НаборЗаписей, "СтатистикаМесяц");
        
        Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        Если ЗначениеЗаполнено(ОписаниеДублей) Тогда
            Комментарий = Комментарий + Символы.ПС + ОписаниеДублей;
        КонецЕсли;
        Если ЗначениеЗаполнено(ОписаниеУжеЕсть) Тогда
            Комментарий = Комментарий + Символы.ПС + ОписаниеУжеЕсть;
        КонецЕсли;
        
        ЗаписьЖурналаРегистрации("ЗаписатьДанныеВСтатистикаМесяц",УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
        НаборЗаписей.Очистить();
        ТекущийРазмер = 0;
                
    КонецПопытки;
            
КонецФункции

Функция УстановитьФлагОбработкиВСтатистикаНеделя(ДиапазонВыборки)
	НачалоПериода = ДиапазонВыборки.Начало;
	Пока НачалоПериода <= ДиапазонВыборки.Конец Цикл
		НаборЗаписей = РегистрыСведений.СтатистикаНеделя.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Использование = Истина;
		НаборЗаписей.Отбор.Период.ВидСравнения = ВидСравнения.Равно;
		НаборЗаписей.Отбор.Период.Установить(НачалоПериода);
		НаборЗаписей.Прочитать();
		Для Каждого ТекЗапись Из НаборЗаписей Цикл
			ТекЗапись.Обработано = Истина;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НачалоПериода = НачалоПериода + 60;
	КонецЦикла;
КонецФункции

Функция УдалитьДанныеИзСтатистикаМесяц(ДатаЗапуска) Экспорт
	ПериодХранения = Константы.ПериодХраненияДанныхСтатистикаМесяц.Получить();
	ПериодХранения = ?(ПериодХранения <> 0, ПериодХранения, 30);
	
	ДатаЗапускаНачалоДня = НачалоДня(ДатаЗапуска) - ПериодХранения * 86400;
	
	Если ЕстьДанныеДляУдаленияСтатистикаМесяц(ДатаЗапускаНачалоДня - 1) Тогда 
		ДиапазонВыборки = ПолучитьПериодВыборкиУдаленияСтатистикаМесяц(ДатаЗапускаНачалоДня - 1);
		
		Пока ДиапазонВыборки.Конец < ДатаЗапускаНачалоДня Цикл
			УдалитьДанныеИзСтатистикаМесяцДиапазон(ДиапазонВыборки);
			ДиапазонВыборки = ПолучитьПериодВыборкиУдаленияСтатистикаМесяц(ДатаЗапускаНачалоДня - 1);
		КонецЦикла;
	КонецЕсли;
КонецФункции

Функция ЕстьДанныеДляУдаленияСтатистикаМесяц(КонецПериода)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатистикаМесяц.Период
	|ИЗ
	|	РегистрСведений.СтатистикаМесяц КАК СтатистикаМесяц
	|ГДЕ
	|	СтатистикаМесяц.Период <= &КонецПериода
	|	И СтатистикаМесяц.Обработано = &Истина
	|";
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Истина", Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции

Функция ПолучитьПериодВыборкиУдаленияСтатистикаМесяц(КонецПериода)
	РазмерПакета = Константы.СтатистикаРазмерПакетаЗапроса.Получить();
	РазмерПакета = ?(РазмерПакета <> 0, РазмерПакета, 10000);
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(Период) КАК ПериодМинимум,
	|	МАКСИМУМ(Период) КАК ПериодМаксимум
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерПакета, "ЧН=0; ЧГ=") + "
	|		СтатистикаМесяц.Период
	|	ИЗ
	|		РегистрСведений.СтатистикаМесяц КАК СтатистикаМесяц
	|	ГДЕ
	|		СтатистикаМесяц.Период <= &КонецПериода
	|		И СтатистикаМесяц.Обработано = &Истина
	|	УПОРЯДОЧИТЬ ПО
	|		СтатистикаМесяц.Период
	|	) КАК Выборка";
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Истина", Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ПериодМинимум <> NULL Тогда
			НачалоПериода = ВыборкаДетальныеЗаписи.ПериодМинимум;
			КонецПериода = КонецЧаса(ВыборкаДетальныеЗаписи.ПериодМаксимум);
			
			Диапазон = Новый Диапазон(НачалоПериода, КонецПериода);
		Иначе
			НачалоПериода = КонецПериода + 1;
			КонецПериода = КонецПериода + 1;
			
			Диапазон = Новый Диапазон(НачалоПериода, КонецПериода);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Диапазон;
КонецФункции

Функция УдалитьДанныеИзСтатистикаМесяцДиапазон(ДиапазонВыборки)
	НачалоПериода = ДиапазонВыборки.Начало;
	Пока НачалоПериода <= ДиапазонВыборки.Конец Цикл
		НаборЗаписей = РегистрыСведений.СтатистикаМесяц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Использование = Истина;
		НаборЗаписей.Отбор.Период.ВидСравнения = ВидСравнения.Равно;
		НаборЗаписей.Отбор.Период.Установить(НачалоПериода);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
		НачалоПериода = НачалоПериода + 3600;
	КонецЦикла;
КонецФункции

//Основная функция по заполнения регистра сведений "СтатистикаПолный"
//Выбирает записи из регистра сведений "СтатистикаМесяц"
//Записывает обработанные записи в регистр сведений "СтатистикаПолный"
//Устанавливает в выбранных записях регистра сведений "СтатистикаМесяц" измерение "Обработано = Истина"
//Входные параметры:
//	ДатаЗапуска Тип Дата(Дата и время) - 	временная метка, до начала дня которой выбираются записи
//											из регистра сведений "СтатистикаМесяц"
//											для записи в регистр сведений "СтатистикаПолный"
Функция ЗаполнитьСтатистикаПолный(ДатаЗапуска) Экспорт
    
    ДатаЗапускаНачалоДня = НачалоДня(ДатаЗапуска);
	ДиапазонВыборки = ПолучитьПериодВыборкиСтатистикаПолный(ДатаЗапускаНачалоДня - 1);
	
	Пока ДиапазонВыборки.Конец < ДатаЗапускаНачалоДня Цикл
		СтатистикаМесяцРезультатЗапроса = ПолучитьДанныеИзСтатистикаМесяц(ДиапазонВыборки);
		ЗаписатьДанныеВСтатистикаПолный(СтатистикаМесяцРезультатЗапроса);
		УстановитьФлагОбработкиВСтатистикаМесяц(ДиапазонВыборки);
				
		ДиапазонВыборки = ПолучитьПериодВыборкиСтатистикаПолный(ДатаЗапускаНачалоДня - 1);
    КонецЦикла;
    
КонецФункции

Функция ПолучитьПериодВыборкиСтатистикаПолный(КонецПериода)
	РазмерПакета = Константы.СтатистикаРазмерПакетаЗапроса.Получить();
	РазмерПакета = ?(РазмерПакета <> 0, РазмерПакета, 10000);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(Период) КАК ПериодМинимум,
	|	МАКСИМУМ(Период) КАК ПериодМаксимум
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерПакета, "ЧГ=") + "
	|		СтатистикаМесяц.Период
	|	ИЗ
	|		РегистрСведений.СтатистикаМесяц КАК СтатистикаМесяц
	|	ГДЕ
	|		СтатистикаМесяц.Период <= &КонецПериода
	|		И СтатистикаМесяц.Обработано <> &Истина
	|	УПОРЯДОЧИТЬ ПО
	|		СтатистикаМесяц.Период
	|	) КАК Выборка";
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Истина", Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ПериодМинимум <> NULL Тогда
			НачалоПериода = ВыборкаДетальныеЗаписи.ПериодМинимум;
			КонецПериода = КонецДня(ВыборкаДетальныеЗаписи.ПериодМаксимум);
			
			Диапазон = Новый Диапазон(НачалоПериода, КонецПериода);
		Иначе
			НачалоПериода = КонецПериода + 1;
			КонецПериода = КонецПериода + 1;
			
			Диапазон = Новый Диапазон(НачалоПериода, КонецПериода);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Диапазон;
КонецФункции

Функция ПолучитьДанныеИзСтатистикаМесяц(ДиапазонВыборки)
    
    Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтатистикаМесяц.Период, ДЕНЬ) КАК Период,
	|	СтатистикаМесяц.Событие КАК Событие,
	|	СУММА(СтатистикаМесяц.ЧислоСрабатываний) КАК ЧислоСрабатываний,
    |   ВЫБОР
    |       КОГДА СУММА(СтатистикаМесяц.ЧислоСрабатываний) = 0 ТОГДА 0
    |       ИНАЧЕ СУММА(СтатистикаМесяц.ЧислоСрабатываний * СтатистикаМесяц.СреднееЗначение)/СУММА(СтатистикаМесяц.ЧислоСрабатываний)
    |   КОНЕЦ КАК СреднееЗначение,
    |   МИНИМУМ(СтатистикаМесяц.МинимальноеЗначение) КАК МинимальноеЗначение,
    |   МАКСИМУМ(СтатистикаМесяц.МаксимальноеЗначение) КАК МаксимальноеЗначение
	|ИЗ
	|	РегистрСведений.СтатистикаМесяц КАК СтатистикаМесяц
	|ГДЕ
	|	СтатистикаМесяц.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СтатистикаМесяц.Обработано = ЛОЖЬ
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СтатистикаМесяц.Период, ДЕНЬ),
	|	СтатистикаМесяц.Событие
	|";

	Запрос.УстановитьПараметр("НачалоПериода", ДиапазонВыборки.Начало);
	Запрос.УстановитьПараметр("КонецПериода", ДиапазонВыборки.Конец);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
    
КонецФункции

Функция ЗаписатьДанныеВСтатистикаПолный(ДанныеДляЗаписиРезультатЗапроса)
    
    НаборЗаписей = РегистрыСведений.СтатистикаПолный.СоздатьНаборЗаписей();
	
	РазмерПакета = Константы.СтатистикаРазмерПакетаЗаписи.Получить();
	РазмерПакета = ?(РазмерПакета <> 0, РазмерПакета, 1000);
	ТекущийРазмер = 0;
	
	ВыборкаДетальныеЗаписи = ДанныеДляЗаписиРезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТекущийРазмер > РазмерПакета Тогда
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать(Ложь);
				НаборЗаписей.Очистить();
				ТекущийРазмер = 0;
            Исключение
                
                ОписаниеДублей = ПолучитьДублиНабораЗаписей(НаборЗаписей);
                ОписаниеУжеЕсть = ПолучитьУжеЕсть(НаборЗаписей, "СтатистикаПолный");
                                
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
                Если ЗначениеЗаполнено(ОписаниеДублей) Тогда
                    Комментарий = Комментарий + Символы.ПС + ОписаниеДублей;
                КонецЕсли;
                Если ЗначениеЗаполнено(ОписаниеУжеЕсть) Тогда
                    Комментарий = Комментарий + Символы.ПС + ОписаниеУжеЕсть;
                КонецЕсли;
                
				ЗаписьЖурналаРегистрации("ЗаписатьДанныеВСтатистикаПолный",УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
				НаборЗаписей.Очистить();
				ТекущийРазмер = 0;
                
			КонецПопытки;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		ТекущийРазмер = ТекущийРазмер + 1;
			
	КонецЦикла;
	
    Попытка
        НаборЗаписей.ОбменДанными.Загрузка = Истина;
        НаборЗаписей.Записать(Ложь);
    Исключение
        
        ОписаниеДублей = ПолучитьДублиНабораЗаписей(НаборЗаписей);
        ОписаниеУжеЕсть = ПолучитьУжеЕсть(НаборЗаписей, "СтатистикаПолный");
        
        Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        Если ЗначениеЗаполнено(ОписаниеДублей) Тогда
            Комментарий = Комментарий + Символы.ПС + ОписаниеДублей;
        КонецЕсли;
        Если ЗначениеЗаполнено(ОписаниеУжеЕсть) Тогда
            Комментарий = Комментарий + Символы.ПС + ОписаниеУжеЕсть;
        КонецЕсли;
        
        ЗаписьЖурналаРегистрации("ЗаписатьДанныеВСтатистикаПолный",УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
        НаборЗаписей.Очистить();
        ТекущийРазмер = 0;

    КонецПопытки;
    
КонецФункции

Функция УстановитьФлагОбработкиВСтатистикаМесяц(ДиапазонВыборки)
	НачалоПериода = ДиапазонВыборки.Начало;
	Пока НачалоПериода <= ДиапазонВыборки.Конец Цикл
		НаборЗаписей = РегистрыСведений.СтатистикаМесяц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Использование = Истина;
		НаборЗаписей.Отбор.Период.ВидСравнения = ВидСравнения.Равно;
		НаборЗаписей.Отбор.Период.Установить(НачалоПериода);
		НаборЗаписей.Прочитать();
		Для Каждого ТекЗапись Из НаборЗаписей Цикл
			ТекЗапись.Обработано = Истина;
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НачалоПериода = НачалоПериода + 3600;
	КонецЦикла;
КонецФункции

Функция УдалитьДанныеИзСтатистикаПолный(ДатаЗапуска) Экспорт
	ПериодХранения = Константы.ПериодХраненияДанныхСтатистикаПолный.Получить();
	ПериодХранения = ?(ПериодХранения <> 0, ПериодХранения, 1000);
	
	ДатаЗапускаНачалоДня = НачалоДня(ДатаЗапуска) - ПериодХранения * 86400;
	Если ЕстьДанныеДляУдаленияСтатистикаПолный(ДатаЗапускаНачалоДня - 1) Тогда
		ДиапазонВыборки = ПолучитьПериодВыборкиУдаленияСтатистикаПолный(ДатаЗапускаНачалоДня - 1);
		
		Пока ДиапазонВыборки.Конец < ДатаЗапускаНачалоДня Цикл
			УдалитьДанныеИзСтатистикаПолныйДиапазон(ДиапазонВыборки);
			ДиапазонВыборки = ПолучитьПериодВыборкиУдаленияСтатистикаПолный(ДатаЗапускаНачалоДня - 1);
		КонецЦикла;
	КонецЕсли;
КонецФункции

Функция ЕстьДанныеДляУдаленияСтатистикаПолный(КонецПериода)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатистикаПолный.Период
	|ИЗ
	|	РегистрСведений.СтатистикаПолный КАК СтатистикаПолный
	|ГДЕ
	|	СтатистикаПолный.Период <= &КонецПериода
	|";
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции

Функция ПолучитьПериодВыборкиУдаленияСтатистикаПолный(КонецПериода)
	РазмерПакета = Константы.СтатистикаРазмерПакетаЗапроса.Получить();
	РазмерПакета = ?(РазмерПакета <> 0, РазмерПакета, 10000);
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(Период) КАК ПериодМинимум,
	|	МАКСИМУМ(Период) КАК ПериодМаксимум
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ " + Формат(РазмерПакета, "ЧН=0; ЧГ=") + "
	|		СтатистикаПолный.Период
	|	ИЗ
	|		РегистрСведений.СтатистикаПолный КАК СтатистикаПолный
	|	ГДЕ
	|		СтатистикаПолный.Период <= &КонецПериода
	|	УПОРЯДОЧИТЬ ПО
	|		СтатистикаПолный.Период
	|	) КАК Выборка";
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Истина", Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ПериодМинимум <> NULL Тогда
			НачалоПериода = ВыборкаДетальныеЗаписи.ПериодМинимум;
			КонецПериода = КонецДня(ВыборкаДетальныеЗаписи.ПериодМаксимум);
			
			Диапазон = Новый Диапазон(НачалоПериода, КонецПериода);
		Иначе
			НачалоПериода = КонецПериода + 1;
			КонецПериода = КонецПериода + 1;
			
			Диапазон = Новый Диапазон(НачалоПериода, КонецПериода);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Диапазон;
КонецФункции

Функция УдалитьДанныеИзСтатистикаПолныйДиапазон(ДиапазонВыборки)
	НачалоПериода = ДиапазонВыборки.Начало;
	Пока НачалоПериода <= ДиапазонВыборки.Конец Цикл
		НаборЗаписей = РегистрыСведений.СтатистикаПолный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Использование = Истина;
		НаборЗаписей.Отбор.Период.ВидСравнения = ВидСравнения.Равно;
		НаборЗаписей.Отбор.Период.Установить(НачалоПериода);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
		НачалоПериода = НачалоПериода + 86400;
	КонецЦикла;
КонецФункции

Процедура ОбработкаДанныхInputStatisticsDate(ДатаОбработки) Экспорт
    
    ВнешниеЦКК = Новый Соответствие;
    СчетчикиКеш = Новый Соответствие;
    
    Выполнять = Истина;
    
    Пока Выполнять Цикл
        
        Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
        
        СтатистикаБуферДатаРезультатЗапроса = ПолучитьДанныеИзСтатистикаБуферДата(ДатаОбработки);
        
    	Если НЕ СтатистикаБуферДатаРезультатЗапроса.Пустой() Тогда
            
            ДанныеДляЗаписиСоответствие = ПодготовитьДанныеДляЗаписи(СтатистикаБуферДатаРезультатЗапроса, СчетчикиКеш);
            
            НачатьТранзакцию();
            
    		ЗаписатьДанныеПоРегистрам(ДанныеДляЗаписиСоответствие, ВнешниеЦКК, ДатаОбработки);
    		РегистрыСведений.СтатистикаБуферДата.УдалитьДанныеПакета(СтатистикаБуферДатаРезультатЗапроса);
            
            ЗафиксироватьТранзакцию();
            
            Общий.ЗаписатьВнутреннийЗамерПроизводительности("ОбработкаДанныхСтатистикаБуферДата", Начало, 10, Ложь);
            
        Иначе
            Выполнять = Ложь;
        КонецЕсли;
        
    КонецЦикла;
        
КонецПроцедуры

Функция ЗапуститьРегламентноеЗадание() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
    
    Ключ = Новый УникальныйИдентификатор("acd9b3ad-7726-4954-a200-2038ff1735dd");
    Наименование = НСтр(" ru = 'Обработка регистра сведений ""Статистика буфер"".'");
    Если НЕ ФоновоеЗаданиеАктивно(Ключ) Тогда
        ФоновыеЗадания.Выполнить("СтатистикаГруппыСчетчиков.ОбработкаДанных",,Ключ, Наименование);
    КонецЕсли;
    
    Ключ = Новый УникальныйИдентификатор("3e1446eb-720e-4e7b-82b9-e5093a241619");
    Наименование = НСтр(" ru = 'Статистика: Контроль сбора счетчиков InputStatistics.");
    Если НЕ ФоновоеЗаданиеАктивно(Ключ) Тогда
    	ФоновыеЗадания.Выполнить("СтатистикаГруппыСчетчиков.КонтрольСбораСчетчиков",,Ключ, Наименование);
    КонецЕсли;

КонецФункции

Процедура ОбработкаДанных() Экспорт
    
    ДатаОбработки = Формат(Дата(1,1,1), "ДФ=ггггММддЧЧмм");
    СчетчикиКеш = Новый Соответствие;
    ЛицензииКеш = Новый Соответствие;
    
    Выполнять = Истина;
    
    Пока Выполнять Цикл
        
        ТекДата = Формат(ТекущаяДата(), "ДФ=ггггММддЧЧмм");
        
        Если ТекДата > ДатаОбработки Тогда
            ОбработкаДанныхШаг(СчетчикиКеш, ЛицензииКеш);
            ДатаОбработки = ТекДата;
        КонецЕсли;
                
        КипВнешнийКомпонент.Пауза(500);
        
    КонецЦикла;
	    
КонецПроцедуры

Процедура ОбработкаДанныхШаг(СчетчикиКеш, ЛицензииКеш)
    
    Замер = ВнутренниеЗамеры.НачатьЗамер("InputStatistics");
    
    ДатаЗапуска = НачалоМинуты(ТекущаяДата());
    
    ОбработатьЛицензии(УниверсальноеВремя(ДатаЗапуска), ЛицензииКеш);
	ЗаполнитьСтатистикаНеделя(ДатаЗапуска, СчетчикиКеш);
    Справочники.ОбнаружениеИнцидентовОперативное.ВыполнитьАктивныеОбнаружения();
    
    ВнутренниеЗамеры.ЗавершитьЗамер(Замер);
    
    ДатаЗапуска = ДатаЗапуска - 60;
    
    Ключ = Новый УникальныйИдентификатор("9ac6488a-c304-4f41-97a3-660eaf6d7382");
    Наименование = НСтр(" ru = 'Статистика: Агрегирование статистики.'");
    Если НЕ ФоновоеЗаданиеАктивно(Ключ) Тогда
    	МассивПараметров = Новый Массив(1);
    	МассивПараметров[0] = ДатаЗапуска;
    	
    	ФоновыеЗадания.Выполнить("СтатистикаГруппыСчетчиков.АгрегированиеСтатистики", МассивПараметров, Ключ, Наименование);
    КонецЕсли;
    
КонецПроцедуры

Процедура ОбработатьЛицензии(ДатаЗапускаUTC, ЛицензииКеш)
    
    ЗапросМинута = Новый Запрос;
    ЗапросМинута.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |   ДатаЗаписиМинутаUTC
    |ИЗ
    |   РегистрСведений.ПараметрыКластераБуфер
    |ГДЕ
    |   Тип = &Тип
    |   И ДатаЗаписиМинутаUTC < &ДатаЗаписиМинутаUTC
    |УПОРЯДОЧИТЬ ПО
    |   ДатаЗаписиМинутаUTC ВОЗР
    |";
    ЗапросМинута.УстановитьПараметр("Тип", "ПЛИЦ");
        
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Данные
    |ИЗ
    |   РегистрСведений.ПараметрыКластераБуфер
    |ГДЕ
    |   Тип = &Тип
    |   И ДатаЗаписиМинутаUTC = &ДатаЗаписиМинутаUTC
    |";
    Запрос.УстановитьПараметр("Тип", "ПЛИЦ");
    
    Выполнять = Истина;
    
    НаборЗаписейПараметрыКластераБуфер = РегистрыСведений.ПараметрыКластераБуфер.СоздатьНаборЗаписей();
    НаборЗаписейПараметрыКластераБуфер.Отбор.Тип.Установить("ПЛИЦ");
    
    Пока Выполнять Цикл
                        
        ЗапросМинута.УстановитьПараметр("ДатаЗаписиМинутаUTC", ДатаЗапускаUTC);
        Результат = ЗапросМинута.Выполнить();
        
        Если НЕ Результат.Пустой() Тогда
            
            ВсеЛицензии = Новый Массив;
            
            ВыборкаМинута = Результат.Выбрать();
            ВыборкаМинута.Следующий();
            ДатаЗаписиМинутаUTC = ВыборкаМинута.ДатаЗаписиМинутаUTC; 
            
            Запрос.УстановитьПараметр("ДатаЗаписиМинутаUTC", ДатаЗаписиМинутаUTC);
            НаборЗаписейПараметрыКластераБуфер.Отбор.ДатаЗаписиМинутаUTC.Установить(ДатаЗаписиМинутаUTC);
            Результат = Запрос.Выполнить();
            
            Выборка = Результат.Выбрать();
            Пока Выборка.Следующий() Цикл
                
                ЧтениеJSON = Новый ЧтениеJSON();
                ЧтениеJSON.УстановитьСтроку(Выборка.Данные);
                Лицензии = ПрочитатьJSON(ЧтениеJSON, Истина);
                
                ВсеЛицензии.Добавить(Лицензии);
                
            КонецЦикла;
            
            Если ВсеЛицензии.Количество() > 0 Тогда
                
                НаборЗаписейСчетчики = РегистрыСведений.СтатистикаБуфер.СоздатьНаборЗаписей();
                
                СчетчикиЛицензий = Новый Массив;
                
                ВсеЛицензииОбщ = Справочники.Лицензии.АгрегироватьЛицензии(ВсеЛицензии);
                ВсегоЛицензий = 0;
                ВсегоЛицензийСерверных = 0;
                Для Каждого Лицензия Из ВсеЛицензииОбщ Цикл
                    
                    series = Лицензия.Значение["series"];
                    Если series = Неопределено Тогда
                        series = Справочники.Лицензии.РегистрационныйНомерИзНаименования(Лицензия.Значение["name"]);
                    КонецЕсли;
                    
                    ЛицензияСсылка = ЛицензииКеш[series];
                    Если ЛицензияСсылка = Неопределено Тогда
                        
                        ПараметрыЛицензии = Новый Структура("Наименование, МаксимальноеКоличествоПользователей, КоличествоКлючей, ТипЛицензии, ВыданоСервером, Активная, ВидЛицензии, Поставка",
                            Лицензия.Значение["name"],
                            Лицензия.Значение["maxUserAll"],
                            1,
                            Лицензия.Значение["licenseType"],
                            Лицензия.Значение["issusedByServer"],
                            1,
                            Лицензия.Значение["licenseKind"],
                            Перечисления.ПоставкаЛицензии.НеИзвестно);
                                                
                        ЛицензияСсылка = Справочники.Лицензии.СоздатьЛицензию(series, ПараметрыЛицензии);
                        ПараметрыЛицензии.Удалить("Активная");
                        ПараметрыЛицензии.Удалить("Поставка");
                        Справочники.Лицензии.ИзменитьЛицензию(ЛицензияСсылка, ПараметрыЛицензии);
                        
                        ЛицензииКеш.Вставить(series, ЛицензияСсылка);    
                        
                    КонецЕсли;
                                        
                    СчетчикЛицензия = Новый Соответствие;
                    
                    СчетчикИмя = Новый Массив;
                    Если Лицензия.Значение["licenseKind"] = 0 Тогда
                        СчетчикИмя.Добавить("Лицензий клиентских");
                        ВсегоЛицензий = ВсегоЛицензий + Лицензия.Значение["count"];
                    ИначеЕсли Лицензия.Значение["licenseKind"] = 1 Тогда
                        СчетчикИмя.Добавить("Лицензий серверных");
                        ВсегоЛицензийСерверных = ВсегоЛицензийСерверных + Лицензия.Значение["count"];
                    КонецЕсли;
                    
                    СчетчикИмя.Добавить(Лицензия.Значение["name"]);
                    
                    СчетчикЛицензия.Вставить("name", СчетчикИмя);
                    СчетчикЛицензия.Вставить("min", Лицензия.Значение["count"]);
                    СчетчикЛицензия.Вставить("max", Лицензия.Значение["count"]);
                    СчетчикЛицензия.Вставить("avg", Лицензия.Значение["count"]);
                    СчетчикЛицензия.Вставить("counter", 1);
                                        
                    СчетчикиЛицензий.Добавить(СчетчикЛицензия);
                    
                КонецЦикла;
                
                СчетчикИмя = Новый Массив;
                СчетчикИмя.Добавить("Лицензий клиентских");
                
                СчетчикЛицензия = Новый Соответствие;
                СчетчикЛицензия.Вставить("name", СчетчикИмя);
                СчетчикЛицензия.Вставить("min", ВсегоЛицензий);
                СчетчикЛицензия.Вставить("max", ВсегоЛицензий);
                СчетчикЛицензия.Вставить("avg", ВсегоЛицензий);
                СчетчикЛицензия.Вставить("counter", 1);
                СчетчикиЛицензий.Добавить(СчетчикЛицензия);
                
                СчетчикИмя = Новый Массив;
                СчетчикИмя.Добавить("Лицензий серверных");
                
                СчетчикЛицензия = Новый Соответствие;
                СчетчикЛицензия.Вставить("name", СчетчикИмя);
                СчетчикЛицензия.Вставить("min", ВсегоЛицензийСерверных);
                СчетчикЛицензия.Вставить("max", ВсегоЛицензийСерверных);
                СчетчикЛицензия.Вставить("avg", ВсегоЛицензийСерверных);
                СчетчикЛицензия.Вставить("counter", 1);
                СчетчикиЛицензий.Добавить(СчетчикЛицензия);
                
                НовЗаписьСчетчики = НаборЗаписейСчетчики.Добавить();
                НовЗаписьСчетчики.ДатаЗаписи = МестноеВремя(ДатаЗаписиМинутаUTC);
                НовЗаписьСчетчики.ГУИД = Новый УникальныйИдентификатор;
                
                ЗаписьJSON = Новый ЗаписьJSON();
                ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
                ЗаписатьJSON(ЗаписьJSON, СчетчикиЛицензий);
                НовЗаписьСчетчики.Данные = ЗаписьJSON.Закрыть();
                
                НаборЗаписейСчетчики.Записать(Ложь);
                НаборЗаписейПараметрыКластераБуфер.Записать(Истина);
                
            КонецЕсли;
            
        Иначе
            Выполнять = Ложь;
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Функция ФоновоеЗаданиеАктивно(Ключ)
    
    Отбор = Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно);
	Массив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
    
	Возврат Массив.Количество() > 0;
		
КонецФункции

Функция АгрегированиеСтатистики(ДатаЗапуска) Экспорт
    
	ЗаполнитьСтатистикаМесяц(ДатаЗапуска);
	ЗаполнитьСтатистикаПолный(ДатаЗапуска);
	
	УдалитьДанныеИзСтатистикаНеделя(ДатаЗапуска);
	УдалитьДанныеИзСтатистикаМесяц(ДатаЗапуска);
	УдалитьДанныеИзСтатистикаПолный(ДатаЗапуска);
    
    ОбработкаДанныхInputStatisticsDate(ДатаЗапуска);
        
КонецФункции

Функция КонтрольСбораСчетчиков() Экспорт
	
	ТекДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ISNULL(МАКСИМУМ(ДопустимоеВремяОтсутствияДанных), 0) КАК ДопустимоеВремяОтсутствияДанных
	|ИЗ
	|	Справочник.ГруппыСчетчиков
	|";
	
	Результат = Запрос.Выполнить();
	
	ДопустимоеВремяОтсутствияДанных = 0;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДопустимоеВремяОтсутствияДанных = Выборка.ДопустимоеВремяОтсутствияДанных;
	КонецЦикла;
	
	Если ДопустимоеВремяОтсутствияДанных > 0 Тогда
        
        // Не успеваем загрузить счетчики и поэтому всегда создается инцидент нет данных
        Если ДопустимоеВремяОтсутствияДанных = 1 Тогда
            ДопустимоеВремяОтсутствияДанных = 2;
        КонецЕсли;
        
        // Тип инцидента "ЦКК.Счетчики.НетДанных"
        ТипИнцидентаСсылка = Справочники.ГруппыСчетчиков.ТипИнцидентаЦККСчетчикиНетДанных();
                       
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГруппыСчетчиков.Ссылка КАК Ссылка,
		               |	ГруппыСчетчиков.ПолныйКодДляПоиска КАК ПолныйКодДляПоиска,
		               |	ГруппыСчетчиков.КодДляПоиска КАК КодДляПоиска,
		               |	ГруппыСчетчиков.ДопустимоеВремяОтсутствияДанных КАК ДопустимоеВремяОтсутствияДанных,
		               |	ГруппыСчетчиков.ВерсияДанных КАК ВерсияДанных
		               |ПОМЕСТИТЬ Контроль
		               |ИЗ
		               |	Справочник.ГруппыСчетчиков КАК ГруппыСчетчиков
		               |ГДЕ
		               |	ГруппыСчетчиков.КонтрольПоступленияДанных = ИСТИНА
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СтатистикаНеделя.Событие КАК Событие,
		               |	МАКСИМУМ(СтатистикаНеделя.Период) КАК ДатаЗаписи
		               |ПОМЕСТИТЬ ДанныеСтатистикаНеделя
		               |ИЗ
		               |	РегистрСведений.СтатистикаНеделя КАК СтатистикаНеделя
		               |ГДЕ
		               |	СтатистикаНеделя.Период >= &ГраницаРасчета
		               |	И СтатистикаНеделя.Событие В
		               |			(ВЫБРАТЬ
		               |				Контроль.Ссылка
		               |			ИЗ
		               |				Контроль)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СтатистикаНеделя.Событие
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Событие
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Контроль.Ссылка КАК Ссылка,
		               |	Контроль.ПолныйКодДляПоиска КАК ПолныйКодДляПоиска,
		               |	Контроль.КодДляПоиска КАК КодДляПоиска,
		               |	Контроль.ДопустимоеВремяОтсутствияДанных КАК ДопустимоеВремяОтсутствияДанных,
		               |	Контроль.ВерсияДанных КАК ВерсияДанных,
		               |	ДанныеСтатистикаНеделя.ДатаЗаписи КАК ДатаЗаписи,
		               |	РАЗНОСТЬДАТ(ЕСТЬNULL(ДанныеСтатистикаНеделя.ДатаЗаписи, ДАТАВРЕМЯ(1, 1, 1)), &ТекДата, МИНУТА) КАК МинутНетДанных
		               |ИЗ
		               |	Контроль КАК Контроль
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСтатистикаНеделя КАК ДанныеСтатистикаНеделя
		               |		ПО (ДанныеСтатистикаНеделя.Событие = Контроль.Ссылка)";
		
		Запрос.УстановитьПараметр("ТекДата", ТекДата);
		Запрос.УстановитьПараметр("ГраницаРасчета", ТекДата - ДопустимоеВремяОтсутствияДанных * 60);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
        
        ЗапросТекущаяВерсияДанных = Новый Запрос;
        ЗапросТекущаяВерсияДанных.Текст = "
        |ВЫБРАТЬ
        |   ВерсияДанных
        |ИЗ
        |   Справочник.ГруппыСчетчиков
        |ГДЕ
        |   Ссылка = &Ссылка
        |";
        
        Пока Выборка.Следующий() Цикл
            
            ТипИнцидента = ТипИнцидентаСсылка;
            
            // Инцидент "НетДанных/Счетчик"
            КодИнцидента = Справочники.ГруппыСчетчиков.КодИнцидентаЦККСчетчикиНедДанных(Выборка.ПолныйКодДляПоиска);
                       
            Если Выборка.МинутНетДанных > Выборка.ДопустимоеВремяОтсутствияДанных Тогда
                
                Попытка
                    
                    НачатьТранзакцию();
                    
                    Блокировка = Новый БлокировкаДанных;
                    ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыСчетчиков");
                    ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
                    Блокировка.Заблокировать();
                    
                    ЗапросТекущаяВерсияДанных.УстановитьПараметр("Ссылка", Выборка.Ссылка);
                    РезультатТекущаяВерсияДанных = ЗапросТекущаяВерсияДанных.Выполнить();
                    
                    ТекущаяВерсияДанных = "";
                    Если НЕ РезультатТекущаяВерсияДанных.Пустой() Тогда
                        ВыборкаТекущаяВерсияДанных = РезультатТекущаяВерсияДанных.Выбрать();  
                        ВыборкаТекущаяВерсияДанных.Следующий();
                        ТекущаяВерсияДанных = ВыборкаТекущаяВерсияДанных.ВерсияДанных;
                    КонецЕсли;
                    
                    
                    Если Выборка.ВерсияДанных = ТекущаяВерсияДанных Тогда 
                        Сообщение = Выборка.ПолныйКодДляПоиска + ". Данных нет более " + Формат(Выборка.ДопустимоеВремяОтсутствияДанных ,"ЧГ = 0") + " мин.";
                        НавигационнаяСсылкаИсточника = Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(Выборка.Ссылка), "Счетчик: " + Выборка.КодДляПоиска);
                        ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, КодИнцидента, Выборка.ПолныйКодДляПоиска,, Сообщение,1,,,,,НавигационнаяСсылкаИсточника);
                    КонецЕсли;
                    
                    ЗафиксироватьТранзакцию();
                    
                Исключение
                    
                    ЗаписьЖурналаРегистрации("КонтрольСбораСчетчиков", УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
                    ОтменитьТранзакцию();
                    
                КонецПопытки;
                
            Иначе
                ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, КодИнцидента, Истина);
            КонецЕсли;
        КонецЦикла;
			
	КонецЕсли;
	
	
КонецФункции

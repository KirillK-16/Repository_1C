////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в подсистеме Мониторинг 
// для работы на сервере или на клиенте
//  
////////////////////////////////////////////////////////////////////////////////

// Загружает в список выбора элемента формы 
// предопределенные значения масштаба
//
// Параметры:
//  ЭлементМасштаб - Элемент формы
//
Процедура ЗагрузитьСписокЗначенийМасштаба(ЭлементМасштаб) Экспорт
	
	Значения = Новый Массив;
	М = 0.000000001;
	Пока М < 100000000 Цикл
		
		Значения.Добавить(М);
		М = М * 10;
		
	КонецЦикла;
	
	ЭлементМасштаб.СписокВыбора.ЗагрузитьЗначения(Значения);
		
КонецПроцедуры

// Возвращает данные оповещения ПоказательМониторингаСоздан/ПоказательМониторингаИзменен
Функция ПараметрОповещенияПоказательМониторингаСозданИзменен(Знач ИдентификаторВариантаПоказателя = Неопределено, 
	Знач Ссылка = Неопределено, 
	Знач СтарыйИдентификаторТипа = Неопределено) Экспорт
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Ссылка", Ссылка);
	ПараметрОповещения.Вставить("ИдентификаторВариантаПоказателя", ИдентификаторВариантаПоказателя);
	ПараметрОповещения.Вставить("СтарыйИдентификаторТипа", СтарыйИдентификаторТипа);
	ПараметрОповещения.Вставить("ИзменилисьДанные", Ложь);
	ПараметрОповещения.Вставить("ИзменилсяВид", Ложь);
	ПараметрОповещения.Вставить("ИзменилосьСглаживание", Ложь);
	
	Возврат ПараметрОповещения;
	
КонецФункции

// Формирует суффикс идентификатора данных для отображения на графике
//
// Параметры:
//  ПоказательМониторинга - Объект - данные показателя мониторинга
//
// Возвращаемое значение:
//  Строка
//
Функция СуффиксИдентификатораВариантаПоказателяМониторинга(Знач ПоказательМониторинга) Экспорт
	
	Результат = "";
	
	РазделительПолей = "__";
	Если ПоказательМониторинга.ПоказатьДанныеЗаПрошлыйПериод Тогда
		Результат = Результат + "1" + РазделительПолей;
		Результат = Результат + Строка(ПоказательМониторинга.ВременноеСмещение) + РазделительПолей;
	Иначе
		Результат = Результат + "0" + РазделительПолей;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Меняет параметры серии диаграммы в соответствии с переданными параметрами
//
// Параметры:
//  Параметры - Структура или Соответствие
//
// Возвращаемое значение:
//  Серия диаграммы
//
Функция ОбновитьСериюПоказателя(Серия, Параметры) Экспорт
	
	Для Каждого ИмяЗначение Из Параметры Цикл
		Серия[ИмяЗначение.Ключ] = ИмяЗначение.Значение;
	КонецЦикла;
	
	Возврат Серия;
	
КонецФункции

// Вычисляет среднее, минимум и максимум по данным из массива
//
// Параметры:
//  Замеры - Массив
//
// Возвращаемое значение:
//  Структура с полями Макс, Мин, Сред, Кол
//
Функция ВычислитьСредниеЗначения(Замеры)  Экспорт
	
	Статистика = Новый Структура("Макс, Мин, Сред, Сумм, Кол");
	
	МаксимальноеЗначение = Неопределено;
	МинимальноеЗначение = Неопределено;
	СуммарноеЗначение = 0;
	Значения = Новый Массив;
	
	Для Каждого Замер Из Замеры Цикл
		
		Если Замер <> Неопределено Тогда
			МаксимальноеЗначение = ?(МаксимальноеЗначение = Неопределено, Замер, Макс(МаксимальноеЗначение, Замер));
			МинимальноеЗначение = ?(МинимальноеЗначение = Неопределено, Замер, Мин(МинимальноеЗначение, Замер));
			СуммарноеЗначение = СуммарноеЗначение + Замер;
			
			Значения.Добавить(Замер);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧислоЗначимыхЗамеров = Значения.Количество();
	Статистика["Кол"] = ЧислоЗначимыхЗамеров;
	Если ЧислоЗначимыхЗамеров > 0 Тогда
		Статистика["Макс"] = МаксимальноеЗначение;
		Статистика["Мин"] = МинимальноеЗначение;
        Статистика["Сумм"] = СуммарноеЗначение;
		Статистика["Сред"] = СуммарноеЗначение / ЧислоЗначимыхЗамеров;
	Иначе
		Статистика["Макс"] = "";
		Статистика["Мин"] = "";
		Статистика["Сред"] = "";
        Статистика["Сумм"] = "";
    КонецЕсли;
    
	Возврат Статистика;
	
КонецФункции

//Вычисляет сумму замеров
Функция ВычислитьВсего(Замеры) Экспорт
	Всего = 0;
	Для Каждого Замер Из Замеры Цикл
		Если Замер <> Неопределено Тогда
			Всего = Всего + Замер;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Всего
КонецФункции

// Сглаживает замеры в соответствии с передаваемыми параметрами
//
// Параметры:
//  Значения - Массив,
//  ПараметрыСглаживания - Структура
//
// Возвращаемое значение:
//  Массив
//
Функция СгладитьДанные(Знач Значения, Знач ПараметрыСглаживания) Экспорт
	ТипСглаживания = ПараметрыСглаживания.ТипСглаживания;
	Если ТипСглаживания = ПредопределенноеЗначение("Перечисление.ТипыСглаживания.СкользящееСреднее") Тогда
		Возврат СгладитьДанныеСкользящимСредним(Значения, ПараметрыСглаживания.КоличествоУсредняемыхЗначений);
	ИначеЕсли ТипСглаживания = ПредопределенноеЗначение("Перечисление.ТипыСглаживания.ЛинейнаяАппроксимация") Тогда
		Возврат ЛинейнаяАппроксимация(Значения);
	ИначеЕсли ТипСглаживания = ПредопределенноеЗначение("Перечисление.ТипыСглаживания.Персептрон") Тогда
		Возврат СгладитьДанныеНейроном(Значения);
	Иначе
		Возврат Значения;
	КонецЕсли;
КонецФункции

// Вычисляет параметры сглаживания по ссылке на показатель мониторинга и
// сглаживает замеры в соответствии с передаваемыми параметрами
//
// Параметры:
//  Значения - Массив,
//  ПоказательМониторинга - СправочникСсылка.ПоказателиМониторинга
//
// Возвращаемое значение:
//  Массив
//
Функция СгладитьДанныеСсылкаНаПоказатель(Значения, ПоказательМониторинга) Экспорт
	
	ТипСглаживания = ПоказательМониторинга.ТипСглаживания;
	ПараметрыСглаживания = Новый Структура("ТипСглаживания", ТипСглаживания);
	Если ТипСглаживания = ПредопределенноеЗначение("Перечисление.ТипыСглаживания.СкользящееСреднее") Тогда
		ПараметрыСглаживания.Вставить("КоличествоУсредняемыхЗначений", ПоказательМониторинга.КоличествоУсредняемыхЗначений);
	КонецЕсли;
	
	Возврат СгладитьДанные(
		Значения, 
		ПараметрыСглаживания
	);
	
КонецФункции

// Заменяет все отрицательные значения в массиве на 0
//
// Параметры:
//  Значения - Массив,
//
// Возвращаемое значение:
//  Массив
//
Функция ОбработатьОтрицательныеЗначения(Знач Значения)
	ИндексЗначения = 0;
	МаксИндекс = Значения.Количество() - 1;
	Пока ИндексЗначения <= МаксИндекс Цикл
		Если Значения[ИндексЗначения] < 0 Тогда
			Значения[ИндексЗначения] = 0;
		КонецЕсли;
		ИндексЗначения = ИндексЗначения + 1;
	КонецЦикла;
	Возврат Значения;
КонецФункции

// Базовое значение на графике мониторинга
//
// Возвращаемое значение:
//  Число
//
Функция БазовоеЗначение() Экспорт
	
	Возврат 0;
	
КонецФункции

// Формирует текст подсказки для точки на графике мониторинга
//
// Параметры:
//  Наименование - Строка
//  Дата - Дата
//  Значение - Число или Неопределено
//  МаксимумВТочке - Число или Неопределено
//  МинимумВТочке - Число или Неопределено
//  Количество - Число или Неопределено
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстПодсказки(Наименование, Дата, Значение, МаксимумВТочке = Неопределено, МинимумВТочке = Неопределено, Количество = Неопределено, Шаг = Неопределено) Экспорт
    
    ТекстПостроитель = Новый Массив;
        
    Если МаксимумВТочке <> Неопределено ИЛИ МинимумВТочке <> Неопределено ИЛИ Количество <> Неопределено Тогда
        ПоказыватьСреднее = Истина;
    Иначе
        ПоказыватьСреднее = Ложь;
    КонецЕсли;
    
    ТекстПостроитель.Добавить("Показатель: ");
    ТекстПостроитель.Добавить(Наименование);
    ТекстПостроитель.Добавить(Символы.ПС);
        
	Если Значение <> Неопределено Тогда
		ТекстПостроитель.Добавить(?(ПоказыватьСреднее, "Среднее: ", "Значение: "));
        ТекстПостроитель.Добавить(Формат(Значение, "ЧН=;ЧДЦ=2"));
        ТекстПостроитель.Добавить(Символы.ПС);
	КонецЕсли;
		
	Если МаксимумВТочке <> Неопределено Тогда
		ТекстПостроитель.Добавить("Максимум: ");
        ТекстПостроитель.Добавить(Формат(МаксимумВТочке, "ЧН=;ЧДЦ=2"));
		ТекстПостроитель.Добавить(Символы.ПС);
    КонецЕсли;
    
    Если МинимумВТочке <> Неопределено Тогда
		ТекстПостроитель.Добавить("Минимум: ");
        ТекстПостроитель.Добавить(Формат(МинимумВТочке, "ЧН=;ЧДЦ=2"));
		ТекстПостроитель.Добавить(Символы.ПС);
	КонецЕсли;
    
    Если Количество <> Неопределено Тогда
		ТекстПостроитель.Добавить("Количество: ");
        ТекстПостроитель.Добавить(Формат(Количество, "ЧН=;ЧДЦ=0"));
		ТекстПостроитель.Добавить(Символы.ПС);
    КонецЕсли;
    
    Если Шаг <> Неопределено Тогда
		ТекстПостроитель.Добавить("Шаг: ");
        ТекстПостроитель.Добавить(Формат(Шаг, "ЧН=;ЧДЦ=0"));
        ТекстПостроитель.Добавить(" секунд");
		ТекстПостроитель.Добавить(Символы.ПС);
	КонецЕсли;
    
    ТекстПостроитель.Добавить("Время: ");
    ТекстПостроитель.Добавить(Формат(Дата, "ДЛФ="));
    
	Возврат СтрСоединить(ТекстПостроитель, "");
	
КонецФункции

// Вычисляет и возвращает серии по значению на диаграмме
//
// Параметры:
//  Диаграмма - Диаграмма
//  Значение - Произвольное
//
// Возвращаемое значение:
//  Серия
//
Функция СерияПоЗначению(Диаграмма, Значение) Экспорт
	
	Возврат Диаграмма.УстановитьСерию(Значение);
	
КонецФункции

// Формирует новую линию по толщине и типу
//
// Параметры:
//  ТипЛинии - Строка
//  Толщина - Число
//
// Возвращаемое значение:
//  Линия
//
Функция Линия(ТипЛинии, Толщина) Экспорт
	Возврат Новый Линия(
		ТипЛинииДиаграммы[?(ТипЛинии = "", "Сплошная", ТипЛинии)], 
		Толщина
	);
КонецФункции

// Добавляет новые точки на ось Х диаграммы
//
// Параметры:
//  Диаграмма - Диаграмма
//  ДатаНачала - Дата
//  Шаг - Число
//  ЧислоТочек - Число
//  ФорматДаты - Строка
//
// Возвращаемое значение:
//  Массив добавленных точек
//
Функция НанестиТочкиДиапазона(Диаграмма, ДатаНачала, Шаг, ЧислоТочек, ФорматДаты = Неопределено) Экспорт
	
	Точки = Новый Массив;
	Дата = ДатаНачала;
	
	НомерТочки = 0;
	КрайняяТочкаТекст = ЧислоТочек - Цел(ЧислоТочек/10);
	Пока НомерТочки < ЧислоТочек Цикл
		
		Точка = Диаграмма.Точки.Добавить(Дата);
		Если ФорматДаты = Неопределено Тогда
			Если НомерТочки < КрайняяТочкаТекст Тогда
				Точка.Текст = Дата;
			КонецЕсли;
		Иначе
			Если НомерТочки < КрайняяТочкаТекст Тогда
				Точка.Текст = Формат(Дата, ФорматДаты);
			КонецЕсли;
		КонецЕсли;
		Точки.Добавить(Точка);
		
		Дата = Дата + Шаг;
		НомерТочки = НомерТочки + 1;
		
	КонецЦикла;
	
	Возврат Точки;
	
КонецФункции

// Добавляет новые точки на ось Х диаграммы
//
// Параметры:
//  Диаграмма - Диаграмма
//  Интервалы - Массив структур с полями ДатаНачала, ДатаОкончания
//  ФорматДаты - Строка
//
// Возвращаемое значение:
//  Массив добавленных точек
//
Функция НанестиТочкиДиапазонаВВидеИнтервалов(Диаграмма, Интервалы, ФорматДаты = Неопределено) Экспорт
	
	Точки = Новый Массив;
	
	НомерТочки = 0;
	Для Каждого Интервал Из Интервалы Цикл
		
		ДатаНачала = Интервал.ДатаНачала;
		ДатаОкончания = Интервал.ДатаОкончания;
		
		Точка = Диаграмма.Точки.Добавить(ДатаОкончания);
		Точка.Текст = ПодписьДиапазонаВВидеИнтервала(ДатаНачала, ДатаОкончания, ФорматДаты);
		Точки.Добавить(Точка);
		
	КонецЦикла;
	
	Возврат Точки;
	
КонецФункции

// Подпись диапазона дат для подсказок и подписей осей на диаграммах
//
// Параметры:
//  ДатаНачала - Дата
//  ДатаОкончания - Дата
//  ФорматДаты - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция ПодписьДиапазонаВВидеИнтервала(ДатаНачала, ДатаОкончания, ФорматДаты = Неопределено) Экспорт
	
	Если ФорматДаты = Неопределено Тогда
		ДатаНачалаВСтроку = Строка(ДатаНачала);
		ДатаОкончанияВСтроку = Строка(ДатаОкончания);
	Иначе
		ДатаНачалаВСтроку = Формат(ДатаНачала, ФорматДаты);
		ДатаОкончанияВСтроку =Формат(ДатаОкончания, ФорматДаты);
	КонецЕсли;
	Если ДатаНачала = ДатаОкончания Тогда
		Возврат ДатаНачалаВСтроку;
	Иначе
		Возврат ДатаНачалаВСтроку + " - " + ДатаОкончанияВСтроку;
	КонецЕсли;
	
КонецФункции

// Вычисляет статистику по замерам, масштаб для отображения, а также
// выполняет сглаживание замеров, если нужно
//
// Параметры:
//  Данные - Структура
//
// Возвращаемое значение:
//  Структура
//
Функция ЗначенияСтатистикаИМасштаб(Данные)
	
	Замеры = Данные["Данные"];
	Если Замеры <> Неопределено Тогда	
		Если Замеры.Количество() > 0 И ТипЗнч(Замеры[0])= Тип("Структура") Тогда
			Значения = Новый Массив;
			Для Каждого Замер Из Замеры Цикл
				Значения.Добавить(Замер.Среднее);
			КонецЦикла;
		Иначе
			Значения = Замеры;
		КонецЕсли;
		
		Масштаб = Данные["Масштаб"];
		АвтоМасштаб = Данные["АвтоМасштаб"];
		Тренд = Данные["ПоказыватьТренд"];
		
		Результат = Новый Структура;
		
		Если Тренд Тогда
			ТипСглаживания = Данные.ТипСглаживания;
			ПараметрыСглаживания = Новый Структура("ТипСглаживания", ТипСглаживания);
			Если ТипСглаживания = ПредопределенноеЗначение("Перечисление.ТипыСглаживания.СкользящееСреднее") Тогда
				КоличествоУсредняемыхЗначений = Данные["КоличествоУсредняемыхЗначений"];
				ПараметрыСглаживания.Вставить("КоличествоУсредняемыхЗначений", КоличествоУсредняемыхЗначений);
			КонецЕсли;
			СглаженныеЗначения = МониторингКлиентСервер.СгладитьДанные(
			Значения, 
			ПараметрыСглаживания
			);
			Результат.Вставить("Значения", СглаженныеЗначения);
			Статистика = МониторингКлиентСервер.ВычислитьСредниеЗначения(СглаженныеЗначения);
		Иначе
			Статистика = МониторингКлиентСервер.ВычислитьСредниеЗначения(Значения);
			Результат.Вставить("Значения", Значения);
		КонецЕсли;
		Результат.Вставить("Статистика", Статистика);
		
		Если АвтоМасштаб Тогда
			Данные.Вставить("Масштаб", ОптимальныйМасштаб(Статистика.Макс));
		КонецЕсли;
		Результат.Вставить("Масштаб", Данные["Масштаб"]);
		
		Возврат Результат;
	КонецЕсли;
КонецФункции

// Вычисляет оптимальный масштаб для отображения замеров на диаграмме
//
// Параметры:
//  Макс - Число
//
// Возвращаемое значение:
//  Число
//
Функция ОптимальныйМасштаб(Макс) Экспорт
	Если Макс = Неопределено ИЛИ Макс = "" ИЛИ Макс = 0 Тогда
		М = 1;
	Иначе
		М = 0.000000001;
		Пока М < 100000000 Цикл
			Если Макс * (М*10) > 100 Тогда
				Прервать;
			КонецЕсли;
			М = М * 10;
		КонецЦикла;
	КонецЕсли;
	Возврат М;
КонецФункции

// Обновляет колонку Масштаб в таблице показателей
//
// Параметры:
//  ТаблицаПоказателей - ДанныеФормыКоллекция - таблица показателей
//  МасштабыПоВсемПоказателям - Соответствие
//
Процедура ОбновитьМасштабы(Знач ТаблицаПоказателей, Знач МасштабыПоВсемПоказателям) Экспорт
	
	Для Каждого ПоказательСтрока Из ТаблицаПоказателей Цикл
		Показатель = ПоказательСтрока.Показатель;
		Масштаб = МасштабыПоВсемПоказателям[Показатель];
		Если Масштаб = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПоказательСтрока.Масштаб = МасштабВСтроку(Масштаб);
	КонецЦикла;
	
КонецПроцедуры

// Выводит текстовое представление для колонки масштаб
//
// Параметры:
//  Масштаб - Число
//
// Возвращаемое значение:
//  Строка
//
Функция МасштабВСтроку(Знач Масштаб) Экспорт
	Возврат Строка(Масштаб);
КонецФункции

// Добавляет серии замеров по показателям
//
// Параметры:
//  Диаграмма - Диаграмма
//  Серия - Серия диаграммы
//  Данные - Структура
//  ДатаНачала - Дата
//  Шаг - Число
//
// Возвращаемое значение:
//  Структура
//
Функция ВывестиНаГрафикеДанныеПоПоказателю(Диаграмма, Серия, Данные, ДатаНачала, Шаг, ОграничениеПоМаксимумуЗначения = 100, ОсновнаяДиаграмма = Истина) Экспорт
	
	Наименование = Данные["Наименование"];
	Замеры = Данные.Данные;
	
	Если Замеры <> Неопределено Тогда
		ЗначенияСтатистикаИМасштаб = ЗначенияСтатистикаИМасштаб(Данные);
		
		Значения = ЗначенияСтатистикаИМасштаб["Значения"];
		Статистика = ЗначенияСтатистикаИМасштаб["Статистика"];
		Масштаб = ЗначенияСтатистикаИМасштаб["Масштаб"];
		
		ТекстыПодсказок = Новый Массив;
		ЧислоТочек = Диаграмма.Точки.Количество();
		НормированныеЗначения = Новый Массив;
		НомерТочки = 0;
		Если Значения.Количество() > 0 Тогда
			Пока НомерТочки < ЧислоТочек Цикл
				Попытка
					Значение = Значения[НомерТочки];
					Дата = ДатаНачала + Шаг * НомерТочки;
					
					ДанныеВТочке = Замеры[НомерТочки];
					МаксимумВТочке = Статистика.Макс;
					МинимумВТочке = Статистика.Мин;
					КоличествоВТочке = Статистика.Кол;
					ТекстПодсказки = МониторингКлиентСервер.ТекстПодсказки(Наименование, Дата, ДанныеВТочке, МаксимумВТочке, МинимумВТочке, КоличествоВТочке, Шаг);
				Исключение
					ТекстПодсказки = МониторингКлиентСервер.ТекстПодсказки(Наименование, Дата, Значение, ,,, Шаг);
				КонецПопытки;
				
				Если ТипЗнч(Значение) = Тип("Структура") Тогда
					Значение = Значение.Среднее;
				КонецЕсли;
				
				Если Значение <> Неопределено Тогда
					Если ОсновнаяДиаграмма Тогда
						Значение = Значение * Масштаб;
					КонецЕсли;
				КонецЕсли;
				
				Точка = Новый Структура("Значение, Текст",
				Значение,
				ТекстПодсказки
				);
				НормированныеЗначения.Добавить(Точка);
				НомерТочки = НомерТочки + 1;
				
			КонецЦикла;
		КонецЕсли;
		
		ВывестиНаГрафикеДанные(Диаграмма, Серия, НормированныеЗначения, ОграничениеПоМаксимумуЗначения, ОсновнаяДиаграмма);
		Возврат Новый Структура(
		"Статистика, Значения",
		Статистика,
		Значения
		);
	КонецЕсли;	
КонецФункции

// Добавляет точки одной серии замеров и сглаживает скользящим средним,
// если КоличествоУсредняемыхЗначений <> Неопределено
//
// Параметры:
//  Диаграмма - Диаграмма
//  Серия - Серия диаграммы
//  Данные - Структура
//  ОграничениеПоМаксимумуЗначения - Число или Неопределено
//
// Возвращаемое значение:
//  Структура
//
Процедура ВывестиНаГрафикеДанные(Диаграмма, Серия, Данные, ОграничениеПоМаксимумуЗначения = 100, ОсновнаяДиаграмма = Истина) Экспорт
	//Диаграмма.ПропускатьБазовоеЗначение = Истина;
	НомерТочки = 0;
	ЧислоТочек = Данные.Количество();
	Пока НомерТочки < ЧислоТочек Цикл
		ЗначениеПодсказка = Данные[НомерТочки];
		Значение = ЗначениеПодсказка.Значение;
		ТекстПодсказки = ЗначениеПодсказка.Текст;
		
		
		Если Значение = Неопределено Тогда
			
			Значение = МониторингКлиентСервер.БазовоеЗначение();
			
		КонецЕсли;
		
		Если ОсновнаяДиаграмма И Значение = 0 Тогда
			Значение = 0.0001;
		КонецЕсли;
				
		Диаграмма.УстановитьЗначение(
		НомерТочки, 
		Серия, 
		?(ОграничениеПоМаксимумуЗначения <> Неопределено И Значение > ОграничениеПоМаксимумуЗначения, ОграничениеПоМаксимумуЗначения, Значение),
		,
		ТекстПодсказки
		);
		
		НомерТочки = НомерТочки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает серию для замеров по показателю и выводит значения замеров на график
//
// Параметры:
//  Диаграмма - Диаграмма
//  ДанныеПоПоказателю - Структура
//  ДатаНачала - Дата
//  Шаг - Число
//  ИзменитьВидСерии - Булево
//
// Возвращаемое значение:
//  Структура
//
Функция ДобавитьСериюПоказателя(
					Диаграмма,
					ДанныеПоПоказателю,
					ДатаНачала,
					Шаг,
					ИзменитьВидСерии = Истина,
					ОграничениеПоМаксимумуЗначения = 100,
					Выделять = Ложь,
					ОсновнаяДиаграмма = Истина,
					ВыделятьЦветом = Ложь) Экспорт
					
	ДанныеПоПоказателю.Вставить("ИмеетсяСерия", Истина);
	
	ИдентификаторСерии = ДанныеПоПоказателю.ИдентификаторСерии;
	Серия = МониторингКлиентСервер.СерияПоЗначению(Диаграмма, ИдентификаторСерии);
	Если ИзменитьВидСерии Тогда
		ПараметрыСерии = Новый Структура;
		ПараметрыСерии.Вставить("Цвет",ДанныеПоПоказателю.Цвет);
		
		Если НЕ Выделять Тогда
			ТолщинаЛинии = ДанныеПоПоказателю.ТолщинаЛинии;
		Иначе
			Если ВыделятьЦветом Тогда
				ПараметрыСерии.Цвет = Новый Цвет(250, 242, 0);
			КонецЕсли;
			ТолщинаЛинии = 6;
		КонецЕсли;
		
		ПараметрыСерии.Вставить(
		"Линия", 
		МониторингКлиентСервер.Линия(ДанныеПоПоказателю.ТипЛинии, ТолщинаЛинии)
		);
		Если ДанныеПоПоказателю.Свойство("Маркер") И ДанныеПоПоказателю.Маркер <> "" Тогда
			ПараметрыСерии.Вставить("Маркер", ТипМаркераДиаграммы[ДанныеПоПоказателю.Маркер]);
		Иначе
			ПараметрыСерии.Вставить("Маркер", ТипМаркераДиаграммы["Нет"]);
		КонецЕсли;
		
		ПараметрыСерии.Вставить("Значение", ИдентификаторСерии);
		
		МониторингКлиентСервер.ОбновитьСериюПоказателя(Серия, ПараметрыСерии);
	КонецЕсли;
	
	Возврат МониторингКлиентСервер.ВывестиНаГрафикеДанныеПоПоказателю(
				Диаграмма,
				Серия, 
				ДанныеПоПоказателю,
				ДатаНачала,
				Шаг,
				ОграничениеПоМаксимумуЗначения,
				ОсновнаяДиаграмма);
КонецФункции

// Создает серии для замеров по каждому показателю и выводит значения замеров на диаграмму
//
// Параметры:
//  Диаграмма - Диаграмма
//  Буфер - Соответствие
//  ПараметрыДиаграммы - Структура
//  РезультатыДобавленияСерии - Структура или Неопределено
//  ОчиститьДиаграмму - Булево
//  ЗапретитьОбновление - Булево
//  ВыбранныйПоказатель - СправочникСсылка
//
// Возвращаемое значение:
//  Структура
//
Функция ВывестиСерииПоказателей(
	Диаграмма,
	Буфер, 
	ПараметрыДиаграммы,
	РезультатыДобавленияСерии = Неопределено,
	ОчиститьДиаграмму = Истина,
	ЗапретитьОбновление = Истина,
	ВыбранныйПоказатель = Неопределено,
	АвтоУстановкаБазовогоЗначения = Ложь,
	ОграничениеПоМаксимумуЗначения = 100,
	ФорматДаты = Неопределено,
	ВыводитьПолзунок = Истина,
	ОсновнаяДиаграмма = Истина,
	ПорядокПоказателей = Неопределено,
	ВыделятьЦветом = Ложь
) Экспорт
	
	ДатаНачала = ПараметрыДиаграммы.ДатаНачала;
	Шаг = ПараметрыДиаграммы.Шаг;
	
	ВыбранныйПоказательМассив = Новый Массив;
	ВыбранныйПоказательМассивСтруктур = Новый Массив;
	Если ТипЗнч(ВыбранныйПоказатель) = Тип("СправочникСсылка.ПоказателиМониторинга") Тогда
		ВыбранныйПоказательСтруктура = Новый Структура;
		ВыбранныйПоказательСтруктура.Вставить("Показатель", ВыбранныйПоказатель);
		ВыбранныйПоказательСтруктура.Вставить("Выделять", Ложь);
		ВыбранныйПоказательМассивСтруктур.Добавить(ВыбранныйПоказательСтруктура);
	ИначеЕсли ТипЗнч(ВыбранныйПоказатель) = Тип("Массив") Тогда
		ВыбранныйПоказательМассивСтруктур = ВыбранныйПоказатель;
	КонецЕсли;
	
	Для Каждого ТекСтруктура Из ВыбранныйПоказательМассивСтруктур Цикл
		ВыбранныйПоказательМассив.Добавить(ТекСтруктура.Показатель);
	КонецЦикла;
			
	Если ЗапретитьОбновление Тогда
		Диаграмма.Обновление = Ложь;
	КонецЕсли;
	
	Если ОчиститьДиаграмму Тогда
		Диаграмма.Очистить();
		
		Если ОсновнаяДиаграмма И ВыводитьПолзунок И Буфер.Количество() > 0 Тогда
			Для НомСерии = 1 По 50 Цикл
				НовСерия = Диаграмма.Серии.Добавить();
				НовСерия.Цвет = Новый Цвет(0,148,255);
				Если Диаграмма.ТипДиаграммы = ТипДиаграммы["График"] Тогда
					НовСерия.Маркер = ТипМаркераДиаграммы.Круг;
					НовСерия.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
				Иначе
					НовСерия.Маркер = ТипМаркераДиаграммы.Нет;
					НовСерия.Линия = Новый Линия(ТипЛинииДиаграммы.НетЛинии, 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Диаграмма.Точки.Количество() = 0 Тогда
		МониторингКлиентСервер.НанестиТочкиДиапазона(
			Диаграмма, 
			ДатаНачала, 
			Шаг, 
			ПараметрыДиаграммы.ЧислоТочек,
			ФорматДаты
		);
	КонецЕсли;

	ЗначенияПоВсемПоказателям = Новый Соответствие;
	МасштабыПоВсемПоказателям = Новый Соответствие;
	
	МинимальноеЗначениеНаГрафике = Неопределено;
	МаксимальноеЗначениеНаГрафике = Неопределено;
	
	Если ПорядокПоказателей = Неопределено Тогда
		ПорядокПоказателей = Новый Массив;
		Для Каждого ТекБуфер Из Буфер Цикл
			ПорядокПоказателей.Добавить(ТекБуфер.Ключ);
		КонецЦикла;
	КонецЕсли;
		
	//Для Каждого ПоказательДанныеПоПоказателю Из Буфер Цикл
	Для Каждого ТекПоказатель Из ПорядокПоказателей Цикл
		//Показатель = ПоказательДанныеПоПоказателю.Ключ;
		Показатель = ТекПоказатель;
		ДанныеПоПоказателю = Буфер[Показатель];
		Если ДанныеПоПоказателю = Неопределено Или НЕ ДанныеПоПоказателю.Свойство("ИдентификаторСерии") Тогда
			// Серии у показателя пока нет, выводить не требуется
			Продолжить;
		КонецЕсли;
		
		ИндексПоказателя = ВыбранныйПоказательМассив.Найти(Показатель);
		Если ВыбранныйПоказатель = Неопределено ИЛИ ИндексПоказателя <> Неопределено Тогда
			Если ВыбранныйПоказательМассивСтруктур[ИндексПоказателя].ОтображатьНаДиаграмме Тогда
				Результат = МониторингКлиентСервер.ДобавитьСериюПоказателя(
				Диаграмма, 
				ДанныеПоПоказателю, 
				ДатаНачала, 
				Шаг,
				,
				ОграничениеПоМаксимумуЗначения,
				ВыбранныйПоказательМассивСтруктур[ИндексПоказателя].Выделять,
				ОсновнаяДиаграмма,
				ВыделятьЦветом
				);
				Если Результат <> Неопределено Тогда
					Если Результат.Статистика.Мин <> "" Тогда
						Если ОсновнаяДиаграмма Тогда
							МинимальноеЗначениеНаГрафикеПоПоказателю = ДанныеПоПоказателю["Масштаб"] * Результат.Статистика.Мин;
						Иначе
							МинимальноеЗначениеНаГрафикеПоПоказателю = Результат.Статистика.Мин;
						КонецЕсли;
						Если МинимальноеЗначениеНаГрафике = Неопределено Тогда
							МинимальноеЗначениеНаГрафике = МинимальноеЗначениеНаГрафикеПоПоказателю;
						Иначе
							МинимальноеЗначениеНаГрафике = Мин(МинимальноеЗначениеНаГрафике, МинимальноеЗначениеНаГрафикеПоПоказателю);
						КонецЕсли;
					КонецЕсли;
					
					Если Результат.Статистика.Макс <> "" Тогда
						Если ОсновнаяДиаграмма Тогда
							МаксимальноеЗначениеНаГрафикеПоПоказателю = ДанныеПоПоказателю["Масштаб"] * Результат.Статистика.Макс;
						Иначе
							МаксимальноеЗначениеНаГрафикеПоПоказателю = Результат.Статистика.Макс;
						КонецЕсли;
						
						Если МаксимальноеЗначениеНаГрафике = Неопределено Тогда
							МаксимальноеЗначениеНаГрафике = МаксимальноеЗначениеНаГрафикеПоПоказателю;
						Иначе
							МаксимальноеЗначениеНаГрафике = Макс(МаксимальноеЗначениеНаГрафике, МаксимальноеЗначениеНаГрафикеПоПоказателю);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// просто рассчитываем масштаб
			Результат = ЗначенияСтатистикаИМасштаб(ДанныеПоПоказателю);
		КонецЕсли;
		
		Если РезультатыДобавленияСерии <> Неопределено Тогда
			Если РезультатыДобавленияСерии.Свойство("ЗначенияПоВсемПоказателям") И Результат <> Неопределено Тогда
				РезультатыДобавленияСерии["ЗначенияПоВсемПоказателям"].Вставить(
					Показатель,
					Результат["Значения"]
				);
			КонецЕсли;
			
			Если РезультатыДобавленияСерии.Свойство("МасштабыПоВсемПоказателям") Тогда
			РезультатыДобавленияСерии["МасштабыПоВсемПоказателям"].Вставить(
				Показатель,
				ДанныеПоПоказателю["Масштаб"]
			);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОсновнаяДиаграмма И АвтоУстановкаБазовогоЗначения И МинимальноеЗначениеНаГрафике <> Неопределено И МаксимальноеЗначениеНаГрафике <> Неопределено Тогда
		// БазовоеЗначение должно быть кратно величине шага по y, иначе плохо выглядит график
		МаксимальноеЗначениеНаГрафике = Макс(МаксимальноеЗначениеНаГрафике, Диаграмма.МаксимальноеЗначение);
		Если Диаграмма.БазовоеЗначение <> -1 Тогда
			МинимальноеЗначениеНаГрафике = Мин(МинимальноеЗначениеНаГрафике, Диаграмма.БазовоеЗначение);
		КонецЕсли;
		ШагШкалыНаГрафике = ШагПоОсиЗначенийНаГрафике(МаксимальноеЗначениеНаГрафике);
		Если ШагШкалыНаГрафике <> Неопределено Тогда
			БазовоеЗначение = ШагШкалыНаГрафике * (Цел(МинимальноеЗначениеНаГрафике / ШагШкалыНаГрафике) - 1);
			Если БазовоеЗначение < 0 Тогда
				БазовоеЗначение = 0;
			КонецЕсли;
		Иначе
			БазовоеЗначение = 0;
		КонецЕсли;
		Диаграмма.БазовоеЗначение = БазовоеЗначение;
		Диаграмма.МаксимальноеЗначение = МаксимальноеЗначениеНаГрафике;
	КонецЕсли;
	
	Если НЕ ОсновнаяДиаграмма Тогда
		Если МаксимальноеЗначениеНаГрафике <> Неопределено Тогда
			ДлинаМакс = СтрДлина(Строка(Цел(МаксимальноеЗначениеНаГрафике) + 1));
			Если ДлинаМакс > 1 Тогда
				Диаграмма.ОбластьПостроения.ФорматШкалыЗначений = "ЧДЦ=; ЧРГ=' '";
			Иначе
				Диаграмма.ОбластьПостроения.ФорматШкалыЗначений = "ЧДЦ=3";
			КонецЕсли;
		КонецЕсли;
		Диаграмма.БазовоеЗначение = 0;
	КонецЕсли;
	
	
	Если ЗапретитьОбновление Тогда
		Диаграмма.Обновление = Истина;
	КонецЕсли;
	
	МаксимальноеЗначениеНаГрафике = 0;
	КоличествоСерий = Диаграмма.Серии.Количество();
	Если КоличествоСерий > 50 Тогда
		Для ИндексСерии = 50 По КоличествоСерий - 1 Цикл
			Для ИндексТочки = 0 По Диаграмма.Точки.Количество() - 1 Цикл
				ТекЗначение = Диаграмма.ПолучитьЗначение(ИндексТочки, ИндексСерии).Значение;
				Если ТекЗначение <> Неопределено И ТекЗначение > МаксимальноеЗначениеНаГрафике Тогда
					МаксимальноеЗначениеНаГрафике = ТекЗначение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МаксимальноеЗначениеНаГрафике;
КонецФункции

Функция ВозможныеЦветаЛинии() Экспорт
	// возможные цвета
	Цвета = Новый Массив;
	Цвета.Добавить(Новый Структура("Красный, Зеленый, Синий, Название", 191, 191, 191, "Серый"));
	Цвета.Добавить(Новый Структура("Красный, Зеленый, Синий, Название", 64,  64, 64, "Темно-серый"));
	Цвета.Добавить(Новый Структура("Красный, Зеленый, Синий, Название", 148, 138, 84, "Коричнево-зеленый"));
	Цвета.Добавить(Новый Структура("Красный, Зеленый, Синий, Название", 0, 112, 192, "Голубой"));
	Цвета.Добавить(Новый Структура("Красный, Зеленый, Синий, Название", 149, 179, 215, "Бледно-голубой"));
	Цвета.Добавить(Новый Структура("Красный, Зеленый, Синий, Название", 218, 150, 148, "Розовый"));
	Цвета.Добавить(Новый Структура("Красный, Зеленый, Синий, Название", 0, 176,  80, "Зеленый"));
	Цвета.Добавить(Новый Структура("Красный, Зеленый, Синий, Название", 112,  48, 160, "Фиолетовый"));
	Цвета.Добавить(Новый Структура("Красный, Зеленый, Синий, Название", 192,   0,   0, "Красный"));
	Цвета.Добавить(Новый Структура("Красный, Зеленый, Синий, Название", 255, 192,   0, "Желтый"));
	Возврат Цвета;
КонецФункции

Функция ДанныеЦветаЛинии(Цвет) Экспорт
	// возможные цвета
	Название = "Произвольный(" + Цвет.Красный + ", " + Цвет.Зеленый + ", " + Цвет.Синий + ")";
	Цвета = ВозможныеЦветаЛинии();
	НомерЦвета = 0;
	Для Каждого ДанныеОЦвете Из Цвета Цикл
		Если Цвет = Новый Цвет(
			ДанныеОЦвете.Красный, 
			ДанныеОЦвете.Зеленый,
			ДанныеОЦвете.Синий
		) Тогда
			Возврат Новый Структура("Название, ИмяКартинки", ДанныеОЦвете.Название, ИмяКартинкиЦветаЛинии(НомерЦвета));
		КонецЕсли;
		НомерЦвета = НомерЦвета + 1;
	КонецЦикла;
	Возврат Новый Структура("Название, ИмяКартинки", Название,ИмяКартинкиЦветаЛинии(НомерЦвета));
КонецФункции

Функция ИмяКартинкиЦветаЛинии(НомерЦвета)
	Возврат "ЦветЛинииНаГрафике__" + Строка(НомерЦвета);
КонецФункции

Функция ПрефиксДиаграммыАнализа() Экспорт
	Возврат "ДиаграммаДляАнализа__";
КонецФункции

Функция СгладитьДанныеСкользящимСредним(Знач Значения, Знач КоличествоУсредняемыхЗначений)
	
	СглаженныеЗначения = Новый Массив;
	
	СуммаОкна = 0;
	НомерЗначимогоЗамера = 0;
	
	НомерТочки = 0;
	
	Для Каждого Значение Из Значения Цикл
		
		Если Значение = Неопределено Тогда
			
			Значение = Неопределено;
			СуммаОкна = 0;
			НомерЗначимогоЗамера = 0;
			
		ИначеЕсли КоличествоУсредняемыхЗначений <> Неопределено Тогда
			Если НомерЗначимогоЗамера < КоличествоУсредняемыхЗначений Тогда
				
				СуммаОкна = СуммаОкна + Значение;
				НомерЗначимогоЗамера = НомерЗначимогоЗамера + 1;
				
			Иначе
				
				СуммаОкна = СуммаОкна + Значение - Значения[НомерТочки - НомерЗначимогоЗамера];
				
			КонецЕсли;
			
			Значение = СуммаОкна / НомерЗначимогоЗамера;
			
		КонецЕсли;
		СглаженныеЗначения.Добавить(Значение);
		НомерТочки = НомерТочки + 1;
		
	КонецЦикла;
	Возврат СглаженныеЗначения;
КонецФункции

Функция ЛинейнаяАппроксимация(Знач Значения)
	
	ЧислоЗначений = Значения.Количество();
	
	Если ЧислоЗначений = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ЧислоЗначений = 1 Тогда
		Возврат Значения;
	КонецЕсли;
	
	Если (ЧислоЗначений % 2) <> 0 Тогда
		ИндексСерединыСписка = (ЧислоЗначений - 1) / 2;
		Значения.Удалить(ИндексСерединыСписка);
		ЧислоЗначений = Значения.Количество();
		
		НечетноеЧислоТочек = Истина;
	Иначе
		НечетноеЧислоТочек = Ложь;
	КонецЕсли;
	
	ИндексСерединыСписка = ЧислоЗначений / 2 - 1;
	
	СредниеПоПоловинам = Новый Массив;
	ИндексЭлемента = 0;
	СуммаОкна = 0;
	ЧислоЗначимыхЗамеров = 0;
	Для Каждого Значение Из Значения Цикл
		Если Значение <> Неопределено Тогда
			СуммаОкна = СуммаОкна + Значение;
			ЧислоЗначимыхЗамеров = ЧислоЗначимыхЗамеров + 1;
		КонецЕсли;
		Если ИндексЭлемента = ИндексСерединыСписка Тогда
			Если ЧислоЗначимыхЗамеров = 0 Тогда
				СредниеПоПоловинам.Добавить(0);
			Иначе
				СредниеПоПоловинам.Добавить(СуммаОкна / ЧислоЗначимыхЗамеров);
			КонецЕсли;
			ЧислоЗначимыхЗамеров = 0;
			СуммаОкна = 0;
		КонецЕсли;
		ИндексЭлемента = ИндексЭлемента + 1;
	КонецЦикла;
	
	Если ЧислоЗначимыхЗамеров = 0 Тогда
		СредниеПоПоловинам.Добавить(0);
	Иначе
		СредниеПоПоловинам.Добавить(СуммаОкна / ЧислоЗначимыхЗамеров);
	КонецЕсли;
	
	// Далее строим прямую по двум точкам
	
	// Нужно вычислить коэффициенты прямой линии
	// Вычисляем коэффициенты прямой решая систему из двух линейных уравнений
	
	// <Среднее справа> = А * (<Число значений> /4) + В
	// <Среднее слева>  = А * (<Число значений> /4 + <Число значений> / 2 + <1, если число элементов нечетное, иначе 0>) + В
	
	ДополнительноеРасстояниеМеждуСредними = ?(НечетноеЧислоТочек, 1, 0);
	// А, В - коэффициенты прямой
	Н = ЧислоЗначений - 1; // индексы начинаются с нуля
	С1 = СредниеПоПоловинам[0];
	С2 = СредниеПоПоловинам[1];
	Д = ДополнительноеРасстояниеМеждуСредними;
	А = 2 * (С2 - С1) / (2*Д + Н);
	В = (С1 * (4 * Д + 3 * Н) - С2 * Н) / (4*Д + 2*Н);
	
	Если НечетноеЧислоТочек Тогда 
		ЧислоЗначений = ЧислоЗначений + 1;
	КонецЕсли;
	
	Аппроксимация = Новый Массив;
	ИндексЗамера = 0;
	Пока ИндексЗамера < ЧислоЗначений Цикл
		Аппроксимация.Добавить(А * ИндексЗамера + В);
		ИндексЗамера = ИндексЗамера + 1;
	КонецЦикла;
	
	Возврат ОбработатьОтрицательныеЗначения(Аппроксимация);
КонецФункции

Функция СгладитьДанныеНейроном(Знач Значения)
	
	СглаженныеЗначения = Новый Массив;
	ЧислоТочек = Значения.Количество();
	Если ЧислоТочек = 0 Тогда
		Возврат СглаженныеЗначения;
	КонецЕсли;
	
	НомерТочки = 0;
	Пока Истина Цикл
		Значение = Значения[НомерТочки];
		СглаженныеЗначения.Добавить(Значение);
		НомерТочки = НомерТочки + 1;
		
		Если Значение <> Неопределено ИЛИ НомерТочки = ЧислоТочек Тогда
			ПредСглаженнноеЗначение = Значение;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЧислоТочек <= 50 Тогда
		Вес = 0.3;
	Иначе     
		//Коэффициент подобран эмперически для того, чтобы сглаживание было наиболее "красивым"
		Вес = 15 / ЧислоТочек;
	КонецЕсли;
	
	Пока НомерТочки < ЧислоТочек Цикл
		Значение = Значения[НомерТочки];
		Если Значение = Неопределено Тогда
			СглаженныеЗначения.Добавить(Неопределено);
		Иначе
			СглаженноеЗначение = ПредСглаженнноеЗначение + (Значение - ПредСглаженнноеЗначение) * Вес;
			ПредСглаженнноеЗначение = СглаженноеЗначение;
			СглаженныеЗначения.Добавить(СглаженноеЗначение);
		КонецЕсли;
		НомерТочки = НомерТочки + 1;
	КонецЦикла;
	
	Возврат СглаженныеЗначения;
КонецФункции

// Шаг по оси значений должен удовлетворять
// следующим условиям:
// Это целое число, кратное 1, 2 или 5, умноженное на некоторую 
// степень 10
Функция ШагПоОсиЗначенийНаГрафике(МаксЗначение)
	СтепеньДесяти = 1;
	Если МаксЗначение = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли МаксЗначение > 1 Тогда
		Пока МаксЗначение < 10 Цикл
			СтепеньДесяти = СтепеньДесяти / 10;
			МаксЗначение = МаксЗначение * 10;
		КонецЦикла;

		Пока МаксЗначение >= 100 Цикл
			СтепеньДесяти = СтепеньДесяти * 10;
			МаксЗначение = МаксЗначение / 10;
		КонецЦикла;
	Иначе
		Пока МаксЗначение <= 1 Цикл
			СтепеньДесяти = СтепеньДесяти / 10;
			МаксЗначение = МаксЗначение * 10;
		КонецЦикла;
	КонецЕсли;
	
	Коэффициент = 1;
	ВариантыКратности = Новый Массив;
	ВариантыКратности.Добавить(1);
	ВариантыКратности.Добавить(2);
	ВариантыКратности.Добавить(5);
	Пока Коэффициент < 100 Цикл
		ИскомыйВариант = Неопределено;
		Для Каждого ВариантКратности Из ВариантыКратности Цикл
			ЧислоДеленийПоОсиЗначений = Цел(МаксЗначение / (ВариантКратности * Коэффициент));
			Если ЧислоДеленийПоОсиЗначений <= 10 Тогда
				ИскомыйВариант = ВариантКратности;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИскомыйВариант <> Неопределено Тогда
			Возврат ИскомыйВариант * Коэффициент * СтепеньДесяти;
		КонецЕсли;
		Коэффициент = Коэффициент + 1;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции


#Область ПрограммныйИнтерфейс

// Получить объект инструментов (см. раздел ИНСТРУМЕНТЫ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция ПолучитьИнструменты() Экспорт
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьИнструменты();
	
КонецФункции // ПолучитьИнструменты()

// Получить версию текущего компонента.
// Реализована из-за невозможности получения имени компьютера стандартным
// способом на веб-клиенте
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
Функция ВерсияКомпонента(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьВерсию");
	
КонецФункции // ВерсияКомпонента()

// Получить хеш строки данных
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Данные - Строка, данные, хеш которых необходимо вычислить
//
Функция ПолучитьХеш(Инструменты, Данные) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьХеш",
		Новый Структура("Данные", Данные));
	
КонецФункции // ПолучитьХеш()

// Определяет, заблокирован ли файл каким-либо процессом
// Параметры:
//   ПутьКФайлу - Строка
//
// Возвращаемое значение:
//   Булево
//
Функция ФайлЗаблокирован(ПутьКФайлу) Экспорт
	
	Инструменты = ПолучитьИнструменты();
	Параметры = Новый Структура("ПутьКФайлу", ПутьКФайлу);
	Возврат ВыполнитьМетод(Инструменты, "ФайлЗаблокирован", Параметры);
	
КонецФункции

#Область СчетчикиПроизводительности

Функция ЯзыкПолученияСчетчиков(Хост) Экспорт
    
    КипВнешнийКомпонент.ПолучитьИнструменты();
    СчетчикиКИП = КипВнешнийКомпонент.ПолучитьСчетчики();
    КипВнешнийКомпонент.ПодключитьСчетчики(СчетчикиКИП);
    
    СчетчикАнгл = "\\" + Хост + "\Processor(_Total)\% Processor Time";
    Попытка
        ИндексАнгл = КипВнешнийКомпонент.ДобавитьСчетчик(СчетчикиКИП, СчетчикАнгл);
    Исключение
        ИндексАнгл = -1;
    КонецПопытки;
    
    СчетчикРус = "\\" + Хост + "\Процессор(_Total)\% загруженности процессора";
    Попытка
        ИндексРус = КипВнешнийКомпонент.ДобавитьСчетчик(СчетчикиКИП, СчетчикРус);
    Исключение
        ИндексРус = -1;
    КонецПопытки;
        
    КипВнешнийКомпонент.СобратьЗначенияСчетчиков(СчетчикиКИП);
    КипВнешнийКомпонент.СобратьЗначенияСчетчиков(СчетчикиКИП);
    КипВнешнийКомпонент.СобратьЗначенияСчетчиков(СчетчикиКИП);
    
    ЗначениеАнгл = Неопределено;
    Если ИндексАнгл > -1 Тогда
        ЗначениеАнгл = КипВнешнийКомпонент.ЗначениеСчетчика(СчетчикиКИП, ИндексАнгл);
    КонецЕсли;
    
    ЗначениеРус = Неопределено;
    Если ИндексРус > -1 Тогда
        ЗначениеРус = КипВнешнийКомпонент.ЗначениеСчетчика(СчетчикиКИП, ИндексРус);
    КонецЕсли;
        
    ЯзыкОС = Неопределено;
    
    Если ЗначениеАнгл <> Неопределено И ЗначениеРус = Неопределено Тогда
        ЯзыкОС = Перечисления.ЯзыкиСистемы.Английский;
    ИначеЕсли ЗначениеАнгл = Неопределено И ЗначениеРус <> Неопределено Тогда
        ЯзыкОС = Перечисления.ЯзыкиСистемы.Русский;
    КонецЕсли;
    
    Возврат ЯзыкОС;    
    
КонецФункции

Функция ПолучитьСчетчики() Экспорт
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьСчетчики();
КонецФункции

Функция СоздатьСчетчики()
	Возврат Новый("Addin.ETP.Counters");
КонецФункции

Процедура ПодключитьСчетчики(Счетчики) Экспорт
	ВыполнитьМетод(Счетчики, "Подключить");
КонецПроцедуры

Функция ДобавитьСчетчик(Счетчики, ПолноеИмяСчетчика) Экспорт
	Параметры = Новый Структура("ПолноеИмяСчетчика", ПолноеИмяСчетчика);
	Возврат ВыполнитьМетод(Счетчики, "ДобавитьСчетчик", Параметры);
КонецФункции

Процедура СобратьЗначенияСчетчиков(Счетчики) Экспорт
	ВыполнитьМетод(Счетчики, "СобратьЗначенияПоказателей");
КонецПроцедуры

Функция ЗначениеСчетчика(Счетчики, ИндексСчетчика) Экспорт
	Параметры = Новый Структура("ИндексСчетчика", ИндексСчетчика);
	Возврат ВыполнитьМетод(Счетчики, "ПолучитьЗначение", Параметры);
КонецФункции

Процедура ОтключитьСчетчики(Счетчики) Экспорт
	ВыполнитьМетод(Счетчики, "Отключить");
КонецПроцедуры

Функция ПолучитьЗначенияСчетчиков(ИмяКомпьютера, Счетчики, ЯзыкОС, ОписаниеОшибки = "") Экспорт
	СчетчикиРезультат = Новый Соответствие;
	
	СчетчикиКИП = КипВнешнийКомпонент.ПолучитьСчетчики();
	КипВнешнийКомпонент.ПодключитьСчетчики(СчетчикиКИП);
	
	СчетчикиПредставление = Справочники.СчетчикиПроизводительности.ПолучитьНаименованияСчетчиков(Счетчики, ЯзыкОС);
	
	СчетчиковУспешно = 0;
	Для Каждого ТекСчетчик Из Счетчики Цикл
		СчетчикиРезультат.Вставить(ТекСчетчик, Новый Соответствие);
		
		СчетчикСтр = "\\" + ИмяКомпьютера + СчетчикиПредставление[ТекСчетчик];
		Попытка
			Индекс = КипВнешнийКомпонент.ДобавитьСчетчик(СчетчикиКИП, СчетчикСтр);
			СчетчиковУспешно = СчетчиковУспешно + 1;
		Исключение
			Индекс = -1;
			
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = Комментарий + Символы.ПС + "Счетчик = '" + СчетчикСтр + "'";
			
			ЗаписьЖурналаРегистрации(
				"Функция ПолучитьЗначенияСчетчиков(ИмяКомпьютера, Счетчики, ЯзыкОС) Экспорт",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.КипВнешнийКомпонент,
				,
				Комментарий);
				
			ОписаниеОшибки = Комментарий;
		КонецПопытки;
		
		СчетчикиРезультат[ТекСчетчик].Вставить("СчетчикПредставление", СчетчикСтр);
		СчетчикиРезультат[ТекСчетчик].Вставить("Индекс", Индекс);
		СчетчикиРезультат[ТекСчетчик].Вставить("Значение", Неопределено);
		СчетчикиРезультат[ТекСчетчик].Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЦикла;
	
	Если СчетчиковУспешно > 0 Тогда
		ОписаниеОшибки = "";
		Для ТекущаяИтерация = 1 По 5 Цикл
			Попытка
				КипВнешнийКомпонент.СобратьЗначенияСчетчиков(СчетчикиКИП);
				КипВнешнийКомпонент.Пауза(500);
			Исключение
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Комментарий = Комментарий + Символы.ПС + "Счетчик = '" + СчетчикСтр + "'";
				
				ЗаписьЖурналаРегистрации(
					"Функция ПолучитьЗначенияСчетчиков(ИмяКомпьютера, Счетчики, ЯзыкОС) Экспорт",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.ОбщиеМодули.КипВнешнийКомпонент,
					,
					Комментарий);
				ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки), "", ОписаниеОшибки + Символы.ПС);
					ПолучитьПользовательскоеПредставлениеОшибкиПолученияСчетчика(Комментарий);
			КонецПопытки;
		КонецЦикла;
		
		Для Каждого ТекСчетчик Из Счетчики Цикл
			Индекс = СчетчикиРезультат[ТекСчетчик]["Индекс"];
			Если Индекс > -1 Тогда
				Попытка
					СчетчикиРезультат[ТекСчетчик]["Значение"] = КипВнешнийКомпонент.ЗначениеСчетчика(СчетчикиКИП, Индекс);
				Исключение
					СчетчикиРезультат[ТекСчетчик]["Значение"] = Неопределено;
					СчетчикиРезультат[ТекСчетчик]["Индекс"] = -2;
					
					Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ОписаниеОшибки = ПолучитьПользовательскоеПредставлениеОшибкиПолученияСчетчика(Комментарий);
						
					СчетчикиРезультат[ТекСчетчик].Вставить("ОписаниеОшибки", 
						?(ПустаяСтрока(СчетчикиРезультат[ТекСчетчик]["ОписаниеОшибки"]), 
							"", СчетчикиРезультат[ТекСчетчик]["ОписаниеОшибки"] + Символы.ПС)
						+ ОписаниеОшибки);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КипВнешнийКомпонент.ОтключитьСчетчики(СчетчикиКИП);
	
	Возврат СчетчикиРезультат;
КонецФункции

Функция ПроверитьСчетчикиПроизводительностиНаСервере(ИмяКомпьютера, ЯзыкОС, Счетчики) Экспорт
    
    ЗначенияСчетчиков = КипВнешнийКомпонент.ПолучитьЗначенияСчетчиков(ИмяКомпьютера,Счетчики, ЯзыкОС);
	ВсегоСчетчиков = ЗначенияСчетчиков.Количество();
	ПрошлиПроверку = 0;
	РезультатПроверкиПодродробно =
		"Результат проверки получения счетчиков производительности" + Символы.ПС +
		"Текущее время: " + ТекущаяДата() + Символы.ПС +
		"Сервер: " + ИмяКомпьютера + Символы.ПС +
		"Язык ОС: " + ЯзыкОС + Символы.ПС +
		"========================================================================" + Символы.ПС + Символы.ПС;
	Для Каждого ТекСчетчик Из ЗначенияСчетчиков Цикл
		Если ТекСчетчик.Значение["Индекс"] > -1 Тогда
			ПрошлиПроверку = ПрошлиПроверку + 1;
			РезультатПроверкиПодродробно = РезультатПроверкиПодродробно + "ОК: " + СтрЗаменить(ТекСчетчик.Значение["СчетчикПредставление"], "\\" + ИмяКомпьютера ,"") + " = " + ТекСчетчик.Значение["Значение"] + Символы.ПС;
		Иначе
			РезультатПроверкиПодродробно = РезультатПроверкиПодродробно + "ОШИБКА: " + СтрЗаменить(ТекСчетчик.Значение["СчетчикПредставление"], "\\" + ИмяКомпьютера ,"")
				+ ?(ПустаяСтрока(ТекСчетчик.Значение["ОписаниеОшибки"]), "", Символы.ПС + ТекСчетчик.Значение["ОписаниеОшибки"])
				+ Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Соответствие;
	Результат.Вставить("РезультатПроверки", Строка(ПрошлиПроверку) + " из " + ВсегоСчетчиков);
	Результат.Вставить("РезультатПроверкиПодробно", РезультатПроверкиПодродробно);
	
	Возврат Результат;
    
КонецФункции

#КонецОбласти

#Область Системные_функции_операционной_системы

// Приостановить текущий поток на указанное количество миллисекунд
//
// Параметры:
//  Длительность - Число, количество миллисекунд, на которое приостановить поток
//
Процедура Пауза(Длительность, Инструменты = Неопределено) Экспорт
    
    Если Инструменты = Неопределено Тогда
        Инструменты = ПолучитьИнструменты();
    КонецЕсли;
    
	Параметры = Новый Структура("Длительность", Длительность);
	ВыполнитьМетод(Инструменты, "Пауза", Параметры);
	
КонецПроцедуры

// Функция - Пинг
//
// Параметры:
//  Хост    - Строка - имя хоста или ip-адрес.
//  Таймаут - Число  - максимальное время ожидания ответа в миллисекундах. 
// 
// Возвращаемое значение:
//  Булево. 
//
Функция Пинг(Хост, Таймаут = 5000) Экспорт
	
	Результат = Ложь;
	
	ФайлПотокаВывода = ПолучитьИмяВременногоФайла("out");
	ФайлПотокаОшибок = ПолучитьИмяВременногоФайла("err");
	КаталогИсполняемыхФайловПлатформы = КаталогПрограммы();
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		
        ТаймаутСтрока = Формат(Таймаут, "ЧН=0; ЧГ=0");
		КомандаПинг = "cmd /c ""chcp 437&ping " + Хост + " -4 -n 1 -w " + ТаймаутСтрока + ">^""" + ФайлПотокаВывода + "^"" 2>^""" + ФайлПотокаОшибок + "^""""";
				
		ЗапуститьПриложение(КомандаПинг, КаталогИсполняемыхФайловПлатформы, Истина);
	ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Кодировка = КодировкаТекста.Системная;
		КомандаПинг = "ping " + Хост + " -4 -n 1 -w " + ТаймаутСтрока + ">^""" + ФайлПотокаВывода + "^"" 2>^""" + ФайлПотокаОшибок + "^""""";
		
		ЗапуститьПриложение(КомандаПинг, КаталогИсполняемыхФайловПлатформы, Истина);	
	КонецЕсли;
	
	ЧтениеПотокаОшибок = Новый ЧтениеТекста(ФайлПотокаОшибок, Кодировка);
	ПотокОшибок = ЧтениеПотокаОшибок.Прочитать();
	ЧтениеПотокаОшибок.Закрыть();
	
	Если НЕ ЗначениеЗаполнено(ПотокОшибок) Тогда
		ЧтениеПотокаВывода = Новый ЧтениеТекста(ФайлПотокаВывода, Кодировка); 
		ПотокВывода = ЧтениеПотокаВывода.Прочитать();
		Если ПотокВывода = Неопределено Тогда
			ПотокВывода = "";
		КонецЕсли;
		ЧтениеПотокаВывода.Закрыть();
		
        Если СтрНайти(ВРЕГ(ПотокВывода), "TTL=") Тогда
            СтрВремя = СтрРазделить(ПотокВывода, Символы.ПС)[2];
            СтрВремя = СтрРазделить(СтрВремя,":")[1];
            СтрВремя = СтрРазделить(СтрВремя, " ")[2];
            СтрВремя = СтрРазделить(СтрВремя, "=");
            Если СтрВремя.Количество() = 1 Тогда
                ДлительностьПодключения = 1;
            Иначе
                ДлительностьПодключения = Число(СтрЗаменить(СтрВремя[1],"ms",""));
            КонецЕсли;
            
            Данные = Новый Массив;
            ЭлементДанных = Новый Соответствие;
            
            ИмяСчетчикаМассив = Новый Массив;
            ИмяСчетчикаМассив.Добавить("Длительность подключения");
            ИмяСчетчикаМассив.Добавить("Доступность оборудования");
            ИмяСчетчикаМассив.Добавить(Строка(Хост) + ", мс.");
            
            ЭлементДанных.Вставить("name", ИмяСчетчикаМассив);
            ЭлементДанных.Вставить("counter", 1);
            ЭлементДанных.Вставить("min", ДлительностьПодключения);
            ЭлементДанных.Вставить("max", ДлительностьПодключения);
            ЭлементДанных.Вставить("avg", ДлительностьПодключения); 
            
            Данные.Добавить(ЭлементДанных);
            
            ЗаписьJSON = Новый ЗаписьJSON();
            ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
            ЗаписатьJSON(ЗаписьJSON, Данные);
            ДанныеJSON = ЗаписьJSON.Закрыть();
            
            РегистрыСведений.СтатистикаБуфер.ДобавитьДанные(ДанныеJSON);
                            
            Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ФайлПО = Новый Файл(ФайлПотокаОшибок);
	Если ФайлПО.Существует() Тогда
		Попытка
			УдалитьФайлы(ФайлПотокаОшибок);
		Исключение
			// Ожидаемое поведение
		КонецПопытки;
	КонецЕсли;
	
	ФайлПВ = Новый Файл(ФайлПотокаВывода);
	Если ФайлПВ.Существует() Тогда
		Попытка
			УдалитьФайлы(ФайлПотокаВывода);
		Исключение
			// Ожидаемое исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдресаПоИмени(Хост) Экспорт
    
    Адреса = Новый Массив;
    
    Команда = "nslookup " + Хост;
    
    Данные = ВыполнитьКомандуКонсоли(Команда, Ложь);
    ДанныеМассив = СтрРазделить(Данные, Символы.ПС, Ложь);
    
    Для Индекс = 3 По ДанныеМассив.ВГраница() Цикл
        
        Если Индекс = 3 Тогда
            АдресМассив = СтрРазделить(ДанныеМассив[Индекс], ":");
            АдресМассив.Удалить(0);
            Адреса.Добавить(СокрЛП(СтрСоединить(АдресМассив,":")));
        Иначе
            Адреса.Добавить(СокрЛП(ДанныеМассив[Индекс]));
        КонецЕсли;
                
    КонецЦикла;
    
    Возврат Адреса;
    
КонецФункции

Функция ВыполнитьКомандуКонсоли(Команда, ПриОшибкеИсключение = Истина) Экспорт
    
    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
    ИмяВременногоФайлаОшибок = ПолучитьИмяВременногоФайла("txt");
    
    cmd = "cmd /c ""chcp 437&" + Команда + ">""" + ИмяВременногоФайла + """ 2>""" + ИмяВременногоФайлаОшибок + """""";
    
    ЗапуститьПриложение(cmd,,Истина);
    
    ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла); 
    Данные = ЧтениеТекста.Прочитать();
    ЧтениеТекста.Закрыть();
    УдалитьФайлы(ИмяВременногоФайла);
    
    ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайлаОшибок); 
    ДанныеОшибка = ЧтениеТекста.Прочитать();
    ЧтениеТекста.Закрыть();
    УдалитьФайлы(ИмяВременногоФайлаОшибок);
    
    Если ПриОшибкеИсключение И ЗначениеЗаполнено(ДанныеОшибка) Тогда
        ВызватьИсключение ДанныеОшибка;
    КонецЕсли;
        
    Возврат Данные;
    
КонецФункции

Функция ВыполнитьКомандуWMIC(Команда, Хост = Неопределено, Пользователь = Неопределено, Пароль = Неопределено) Экспорт
    
    КомандаWMIC = "wmic /locale:ms_409 %Хост% %Пользователь% %Пароль% " + Команда + " /FORMAT:CSV";
    ЗаменитьПараметрыWMIC(КомандаWMIC, Хост, Пользователь, Пароль);
    
    Возврат ВыполнитьКомандуКонсоли(КомандаWMIC);
    
КонецФункции

#КонецОбласти

#Область ТехнологическийЖурнал
// Получить инструмент чтения технологического журнала
// (см. раздел ТЕХНОЛОГИЧЕСКИЙ ЖУРНАЛ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.TechLog"
//
Функция ПолучитьТЖ() Экспорт
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьТЖ();
	
КонецФункции // ПолучитьТЖ()

// Открыть исходные каталоги технологического журнала
//
// Параметры:
//  ТЖ - Объект внешнего компонента (см. ПолучитьТЖ())
//  Каталоги - Строка, каталоги технологического журнала, перечисленные через
//             разделитель (; - для Windows, : - для Linux)
//  МаскаПроцессов - Число, младшие биты которого определяют набор
//                   процессов, журналы которых будут прочитаны.
//                   Биты (числа) и их значения:
//                     0 (1) - 1cv8, клиент 1С:Предприятия
//                     1 (2) - rmngr, сервер
//                     2 (4) - ragent, агент сервера
//                     3 (8) - rphost, рабочий процесс
//  Компактно - Булево, Ложь - выходной формат удобный для чтения
//              человеком с переносами строк, Истина - компактный
//              формат для машинного разбора без переноса строк
//
Процедура ОткрытьТЖ(ТЖ, Каталоги, МаскаПроцессов, Компактно = Истина) Экспорт
	
	КаталогиТЖ = "";
	
	Для каждого Каталог Из Каталоги Цикл
		Если Не ПустаяСтрока(КаталогиТЖ) Тогда
			КаталогиТЖ = КаталогиТЖ + КипОбщий.РазделительПути();
		КонецЕсли;
		
		КаталогиТЖ = КаталогиТЖ + Каталог;
	КонецЦикла;
	
	Параметры = Новый Структура("КаталогиТЖ, МаскаПроцессов, Компактно",
		КаталогиТЖ, МаскаПроцессов, Компактно);
	ВыполнитьМетод(ТЖ, "Открыть", Параметры);
	
КонецПроцедуры // ОткрытьТЖ()

// Прочитать 
//
// Параметры:
//  ТЖ - Объект внешнего компонента (см. ПолучитьТЖ())
//  КоличествоСобытий - Число, количество читаемых событий
//
// Возвращаемое значение:
//  
//
Функция ПрочитатьТЖ(ТЖ, КоличествоСобытий = 5000) Экспорт
	
	Параметры = Новый Структура("КоличествоСобытий", КоличествоСобытий);
	Возврат ВыполнитьМетод(ТЖ, "Прочитать", Параметры);
	
КонецФункции // ПрочитатьТЖ()

// Определить, достигнут ли конец технологического журнала
//
// Параметры:
//  ТЖ - Объект внешнего компонента (см. ПолучитьТЖ())
//
// Возвращаемое значение:
//  Булево - Истина, конец достигнут, Ложь - конец не достигнут
//
Функция КонецТЖ(ТЖ) Экспорт
	
	Возврат ВыполнитьМетод(ТЖ, "ЭтоКонец");
	
КонецФункции // КонецТЖ()

// Открыть исходные каталоги технологического журнала
//
// Параметры:
//  ТЖ - Объект внешнего компонента (см. ПолучитьТЖ())
//
Процедура ЗакрытьТЖ(ТЖ) Экспорт
	
	ВыполнитьМетод(ТЖ, "Закрыть");
	
КонецПроцедуры // ЗакрытьТЖ()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаменитьПараметрыWMIC(Команда, Хост, Пользователь, Пароль)
    
    Если ЗначениеЗаполнено(Хост) Тогда
        Команда = СтрЗаменить(Команда, "%Хост%", "/NODE:'" + Хост + "'");
    Иначе
        Команда = СтрЗаменить(Команда, "%Хост%", "");
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Пользователь) И НЕ ЗначениеЗаполнено(Пароль) Тогда
        
        Команда = СтрЗаменить(Команда, "%Пользователь%", "");    
        Команда = СтрЗаменить(Команда, "%Пароль%", "");
        
    Иначе
        
        Если ЗначениеЗаполнено(Пользователь) Тогда
            Команда = СтрЗаменить(Команда, "%Пользователь%", "/USER:'" + Пользователь + "'");
        Иначе
            Команда = СтрЗаменить(Команда, "%Пользователь%", "/USER:''");
        КонецЕсли;
        
        СимволыЭкранировать = Новый Соответствие;
        СимволыЭкранировать.Вставить("&", 0);
        СимволыЭкранировать.Вставить("|", 0);
        
        Если ЗначениеЗаполнено(Пароль) Тогда
            
            ПарольМассив = Новый Массив;
            
            Для Индекс = 1 По СтрДлина(Пароль) Цикл
                
                Симв = Сред(Пароль, Индекс, 1);
                
                Если СимволыЭкранировать[Симв] <> Неопределено Тогда
                    ПарольМассив.Добавить("^");
                КонецЕсли;
                
                ПарольМассив.Добавить(Симв);
                
            КонецЦикла;
            
            ПарольНовый = СтрСоединить(ПарольМассив, "");
            Команда = СтрЗаменить(Команда, "%Пароль%", "/PASSWORD:'" + ПарольНовый + "'");
            
        Иначе
            
            ПарольНовый = Пароль;
            Команда = СтрЗаменить(Команда, "%Пароль%", "/PASSWORD:''");
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

// Создать объект инструментов (см. раздел ИНСТРУМЕНТЫ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция СоздатьИнструменты()
	
	Возврат Новый("Addin.ETP.Tools");
	
КонецФункции // СоздатьИнструменты()

// Подключить внешнюю компоненту КИП
//
Процедура ПодключитьВнешнийКомпонент()
	ИмяКомпонента = "ОбщийМакет.КипВнешнийКомпонент";
	
	Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP") Тогда
		
		Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP") Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка подключения внешнего компонента.'");
		КонецЕсли;
	КонецЕсли;
	
	Инструменты = СоздатьИнструменты();
	ПодключеннаяВерсия = ВерсияКомпонента(Инструменты);
	ТребуемаяВерсия = "2.0.4.11";
	
КонецПроцедуры // ПодключитьВнешнийКомпонент()

// Выполнить метод внешнего компонента
//
// Параметры:
//  Объект - "Addin.ETP.*", экземпляр класса внешнего компонента
//  Имя - Строка, имя выполняемого метода
//  Параметры - Структура, содержит имена и значения параметров
//
// Возвращаемое значение:
//   Произвольный - результат, возвращаемый методом
//
Функция ВыполнитьМетод(Объект, Имя, Параметры = Неопределено)
	
	ИменаПараметров = "";
	
	Если Параметры <> Неопределено Тогда
		Для каждого Параметр Из Параметры Цикл
			Если Не ПустаяСтрока(ИменаПараметров) Тогда
				ИменаПараметров = ИменаПараметров + ", ";
			КонецЕсли;
			
			ИменаПараметров = ИменаПараметров + "Параметры." + Параметр.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		Возврат Вычислить("Объект." + Имя + "(" + ИменаПараметров + ")");
	Исключение
		Если Объект <> Неопределено И Объект.ЕстьОшибка() Тогда
			ВызватьИсключение Объект.ОписаниеОшибки();
		Иначе
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение Комментарий;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции // ВыполнитьМетод()

// Создать инструмент чтения технологического журнала
// (см. раздел ТЕХНОЛОГИЧЕСКИЙ ЖУРНАЛ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.TechLog"
//
Функция СоздатьТЖ()
	
	Возврат Новый("Addin.ETP.TechLog");
	
КонецФункции // СоздатьТЖ()

Функция ПолучитьПользовательскоеПредставлениеОшибкиПолученияСчетчика(ОписаниеОшибки)
	
	ТекстЭлементаОписание = "";
	
	НачалоЭлементаОписание = СтрНайти(ОписаниеОшибки, "Описание = '");
	Если НачалоЭлементаОписание <> 0 Тогда
		ТекстЭлементаОписание = Сред(ОписаниеОшибки, НачалоЭлементаОписание + 12);
		КонецЭлемента = СтрНайти(ТекстЭлементаОписание, "'");
		Если КонецЭлемента <> 0 Тогда
			ТекстЭлементаОписание = Лев(ТекстЭлементаОписание, КонецЭлемента-1);
		КонецЕсли;
		ТекстЭлементаОписание = СтрЗаменить(ТекстЭлементаОписание, Символы.ВК + Символы.ПС+")", ")");
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстЭлементаОписание) Тогда
		ТекстЭлементаОписание = "Причина: " + ТекстЭлементаОписание;
	КонецЕсли;
	
	Возврат ТекстЭлементаОписание;
	
КонецФункции

#Область Фоновое_задание_сбора_производительности

Процедура СтартСбораПроизводительности() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
    
    Сервера = Справочники.Оборудование.ПолучитьСервераСбораПроизводительности();
	Для Каждого Сервер Из Сервера Цикл
		УИДЗадания = Сервер.УникальныйИдентификатор();
		Отбор = Новый Структура("Ключ, Состояние", УИДЗадания, СостояниеФоновогоЗадания.Активно);
		ФЗСервер = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		Запуск = Ложь;
		Если ФЗСервер.Количество() = 0 Тогда
			Запуск = Истина;
		КонецЕсли;
		
		Если Запуск Тогда
			Параметры = Новый Массив;
			Параметры.Добавить(Сервер);
			ФоновыеЗадания.Выполнить("КипВнешнийКомпонент.СборПроизводительностиСервер", Параметры, УИДЗадания, "Сбор счетчиков производительности " + Сервер.Наименование);
            КипВнешнийКомпонент.Пауза(100);
		КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

Функция ИнициализироватьСчетчики(Счетчики, СчетчикиКИП, Сервер)
    
    ИндексСчетчик = Новый Соответствие;
    ИндексПлохой = 0;
    
    // Тип инцидента "ИнициализацияСчетчика"
    ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("ИнициализацияСчетчика");
    ИнициализацияСчетчикаТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, "ИнициализацияСчетчика", Перечисления.УровниИнцидентов.Ошибка);
    
    НавигационнаяСсылкаСервер = Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(Сервер), "Оборудование: " + Сервер);

	Для Каждого ТекСчетчик Из Счетчики[Сервер]["Счетчики"] Цикл
        
        ТекСчетчик.Значение.Вставить("Замеры", Новый Массив);
        
		Попытка
            
            Индекс = КипВнешнийКомпонент.ДобавитьСчетчик(СчетчикиКИП, ТекСчетчик.Значение["НаименованиеПолное"]);
            ТекСчетчик.Значение["Инициализирован"] = Истина;
            
            // Инцидент "Счетчик"
            ХешИнцидентаСчетчик = Справочники.Инциденты.ХешИнцидента(Строка(Сервер.УникальныйИдентификатор()) + ТекСчетчик.Значение["УникальныйИдентификатор"]);
            ИнцидентСчетчик = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидентаСчетчик, ТекСчетчик.Значение["НаименованиеПолное"], Ложь);
            
            ИнцидентыСервер.ЗакрытьИнцидент(ИнициализацияСчетчикаТипИнцидента, ИнцидентСчетчик, Истина);
            
        Исключение
            
            ИндексПлохой = ИндексПлохой - 1;
			Индекс = ИндексПлохой;
            ТекСчетчик.Значение["Инициализирован"] = Ложь;
            
            // Инцидент "Счетчик"
            ХешИнцидентаСчетчик = Справочники.Инциденты.ХешИнцидента(Строка(Сервер.УникальныйИдентификатор()) + ТекСчетчик.Значение["УникальныйИдентификатор"]);
            ИнцидентСчетчик = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидентаСчетчик, ТекСчетчик.Значение["НаименованиеПолное"], Ложь);
            
            Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
            ИнцидентыСервер.ОткрытьИнцидент(ИнициализацияСчетчикаТипИнцидента, ИнцидентСчетчик,ТекСчетчик.Значение["НаименованиеПолное"],,Сообщение,1,,,Перечисления.УровниИнцидентов.Ошибка,,НавигационнаяСсылкаСервер);
            
		КонецПопытки;
		
		ИндексСчетчик.Вставить(Индекс, ТекСчетчик.Ключ);
        
	КонецЦикла;
	
	Возврат ИндексСчетчик;
    
КонецФункции

Процедура СборПроизводительностиСервер(Сервер) Экспорт
    
    ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
    МоментЗаписи = ГСЧ.СлучайноеЧисло(40, 55);
    
    ДатаНачала = Формат(ТекущаяДата(), "ДФ=ггггММддЧЧмм") + МоментЗаписи;
    
    Если Справочники.Оборудование.СобиратьДанные(Сервер) Тогда
        
        ЗаписьЖурналаРегистрации("СборСчетчиковПроизводительности.СтартФоновогоЗадания", УровеньЖурналаРегистрации.Информация, Метаданные.РегламентныеЗадания.СборСчетчиковПроизводительности, Сервер);
        Счетчики = Справочники.Оборудование.ПолучитьСчетчикиПроизводительностиСЭкспортомВЦКК(Сервер);
        
        // Тип инцидента "СобратьЗначенияСчетчиков"
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("СобратьЗначенияСчетчиков");
        СобратьЗначенияСчетчиковТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, "СобратьЗначенияСчетчиков", Перечисления.УровниИнцидентов.Ошибка);
        
        // Тип инцидента "ИнициализацияСчетчика"
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("ИнициализацияСчетчика");
        ИнициализацияСчетчикаТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, "ИнициализацияСчетчика", Перечисления.УровниИнцидентов.Ошибка);
        
        // Тип инцидента "ПолучениеЗначенияСчетчика"
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("ПолучениеЗначенияСчетчика");
        ПолучениеЗначенияСчетчикаТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, "ПолучениеЗначенияСчетчика", Перечисления.УровниИнцидентов.Ошибка);
        
        // Инцидент "Сервер"
        ХешИнцидентаСервер = Справочники.Инциденты.ХешИнцидента(Строка(Сервер.УникальныйИдентификатор()));
        ИнцидентСервер = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидентаСервер, Сервер.Наименование, Ложь);
        
        НавигационнаяСсылкаСервер = Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(Сервер), "Оборудование: " + Сервер);
        
        Если Счетчики[Сервер]["Счетчики"].Количество() > 0 Тогда
            
            ПериодЗаписи = Счетчики[Сервер]["ПериодЗаписи"];
            ДатаЗаписи = ТекущаяДата();
            
            КипВнешнийКомпонент.ПолучитьИнструменты();
            СчетчикиКИП = КипВнешнийКомпонент.ПолучитьСчетчики();
            КипВнешнийКомпонент.ПодключитьСчетчики(СчетчикиКИП);
            ИндексСчетчик = ИнициализироватьСчетчики(Счетчики, СчетчикиКИП, Сервер);
            
            НаборЗаписейТекущиеЗначения = РегистрыСведений.ТекущиеЗначенияПроизводительности.СоздатьНаборЗаписей();
            НаборЗаписейТекущиеЗначения.Отбор.Сервер.Установить(Сервер);
            
            СобиратьДанные = Истина;
            
            Пока СобиратьДанные Цикл
                
                ТекДатаЗаписи = ТекущаяДата();
                
                Попытка
                    
                    КипВнешнийКомпонент.СобратьЗначенияСчетчиков(СчетчикиКИП);
                    ИнцидентыСервер.ЗакрытьИнцидент(СобратьЗначенияСчетчиковТипИнцидента, ИнцидентСервер, Истина);                
                    ЕстьИзмененияСчетчиков = Ложь;
                    
                    Для Каждого Индекс Из ИндексСчетчик Цикл
                        
                        Если Индекс.Ключ >= 0 Тогда
                            Попытка
                                Значение = КипВнешнийКомпонент.ЗначениеСчетчика(СчетчикиКИП, Индекс.Ключ);
                            Исключение
                                Значение = -1;
                            КонецПопытки;
                        Иначе
                            Значение = -1;
                        КонецЕсли;
                        
                        Счетчики[Сервер]["Счетчики"][Индекс.Значение]["Замеры"].Добавить(Значение);
                        
                        // Если необходимо, добавляем текущие значения счетчика для записи
                        Если ПериодЗаписи > 0 И ТекДатаЗаписи >= ДатаЗаписи Тогда
                            НовЗапись = НаборЗаписейТекущиеЗначения.Добавить();
                            НовЗапись.Сервер = Сервер;
                            НовЗапись.СчетчикПроизводительности = Индекс.Значение;
                            НовЗапись.Значение = Значение;
                            НовЗапись.ДатаЗамера = ТекДатаЗаписи;
                        КонецЕсли;
                        
                    КонецЦикла;
                    
                    КипВнешнийКомпонент.Пауза(1000);
                    
                Исключение
                    
                    Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
                    ИнцидентыСервер.ОткрытьИнцидент(СобратьЗначенияСчетчиковТипИнцидента, ИнцидентСервер, Сервер.Наименование,,Сообщение,1,,,Перечисления.УровниИнцидентов.Ошибка,,НавигационнаяСсылкаСервер);
                    ЕстьИзмененияСчетчиков = Истина;
                    КипВнешнийКомпонент.Пауза(20000);
                    
                КонецПопытки;
                
                // Если необходимо, записываем текущие значения счетчика
                Если ПериодЗаписи > 0 И ТекДатаЗаписи >= ДатаЗаписи Тогда
                    
                    Если НаборЗаписейТекущиеЗначения.Количество() > 0 Тогда 
                        НаборЗаписейТекущиеЗначения.Записать(Истина);
                        НаборЗаписейТекущиеЗначения.Очистить();
                    КонецЕсли;
                    
                    ДатаЗаписи = ТекДатаЗаписи + ПериодЗаписи;
                    
                КонецЕсли;
                
                ТекущаяДата = ТекущаяДата();
                ТекДата = Формат(ТекущаяДата, "ДФ=ггггММддЧЧммсс");
                Если ТекДата > ДатаНачала Тогда
                    
                    РезультатЗаписи = ЗаписатьДанныеВСтатистикаБуфер(Сервер, Счетчики);
                    СобиратьДанные = РезультатЗаписи.СобиратьДанные;
                    ЕстьИзмененияСчетчиков = ЕстьИзмененияСчетчиков ИЛИ РезультатЗаписи.ЕстьИзмененияСчетчиков;
                    
                    ДатаНачала = Формат(ТекущаяДата + 60, "ДФ=ггггММддЧЧмм") + МоментЗаписи;
                    
                    Если СобиратьДанные Тогда
                        
                        // Получаем новые счетчики
                        НовСчетчики = Справочники.Оборудование.ПолучитьСчетчикиПроизводительностиСЭкспортомВЦКК(Сервер);
                        НовПериодЗаписи = НовСчетчики[Сервер]["ПериодЗаписи"];
                        Если НовПериодЗаписи <> ПериодЗаписи Тогда
                            ПериодЗаписи = НовПериодЗаписи;
                            ДатаЗаписи = ТекДатаЗаписи + ПериодЗаписи;
                        КонецЕсли;
                        
                        Если НЕ ЕстьИзмененияСчетчиков Тогда
                            Если Счетчики[Сервер]["Счетчики"].Количество() <> НовСчетчики[Сервер]["Счетчики"].Количество() Тогда
                                ЕстьИзмененияСчетчиков = Истина;	
                            Иначе
                                ВсегоСчетчиков = 0;
                                Для Каждого ТекНовСчетчик Из НовСчетчики[Сервер]["Счетчики"] Цикл
                                    Если Счетчики[Сервер]["Счетчики"][ТекНовСчетчик.Ключ] <> Неопределено И Счетчики[Сервер]["Счетчики"][ТекНовСчетчик.Ключ]["НаименованиеПолное"] = ТекНовСчетчик.Значение["НаименованиеПолное"] Тогда
                                        ВсегоСчетчиков = ВсегоСчетчиков + 1;
                                    КонецЕсли;
                                КонецЦикла;
                            КонецЕсли;
                            
                            Если ВсегоСчетчиков <> НовСчетчики[Сервер]["Счетчики"].Количество() Тогда
                                ЕстьИзмененияСчетчиков = Истина;
                            КонецЕсли;
                            
                            
                        КонецЕсли;
                        
                        Если ЕстьИзмененияСчетчиков Тогда
                            
                            Счетчики = НовСчетчики;
                            КипВнешнийКомпонент.ОтключитьСчетчики(СчетчикиКИП);
                            КипВнешнийКомпонент.ПодключитьСчетчики(СчетчикиКИП);
                            ИндексСчетчик = ИнициализироватьСчетчики(Счетчики, СчетчикиКИП, Сервер);
                            
                        КонецЕсли;
                        
                    Иначе
                        
                        Для Каждого ТекСчетчик Из Счетчики[Сервер]["Счетчики"] Цикл
                            
                            // Инцидент "Счетчик"
                            ХешИнцидентаСчетчик = Справочники.Инциденты.ХешИнцидента(Строка(Счетчики[Сервер].УникальныйИдентификатор()) + ТекСчетчик.Значение["УникальныйИдентификатор"]);
                            ИнцидентСчетчик = Справочники.Инциденты.НайтиСсылкуПоХешу(ХешИнцидентаСчетчик);
                            
                            ИнцидентыСервер.ЗакрытьИнцидент(ИнициализацияСчетчикаТипИнцидента, ИнцидентСчетчик, Истина, "Отключен сбор счетчиков");
                            ИнцидентыСервер.ЗакрытьИнцидент(СобратьЗначенияСчетчиковТипИнцидента, ИнцидентСервер, Истина, "Отключен сбор счетчиков");
                            ИнцидентыСервер.ЗакрытьИнцидент(ПолучениеЗначенияСчетчикаТипИнцидента, ИнцидентСчетчик, Истина, "Отключен сбор счетчиков");
                            
                        КонецЦикла;
                        
                    КонецЕсли;
                    
                КонецЕсли;
                
            КонецЦикла;
            
            КипВнешнийКомпонент.ОтключитьСчетчики(СчетчикиКИП);
            
        КонецЕсли;
        ЗаписьЖурналаРегистрации("СборСчетчиковПроизводительности.ЗавершениеФоновогоЗадания", УровеньЖурналаРегистрации.Информация, Метаданные.РегламентныеЗадания.СборСчетчиковПроизводительности, Сервер);
        
    КонецЕсли;
    
КонецПроцедуры

Функция ЗаписатьДанныеВСтатистикаБуфер(Сервер, Счетчики)
    
    ТекДата = НачалоМинуты(ТекущаяДата());
	Данные = Новый Массив;
    ЕстьИзмененияСчетчиков = Ложь;
    
    // Тип инцидента "ПолучениеЗначенияСчетчика"
    ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("ПолучениеЗначенияСчетчика");
    ПолучениеЗначенияСчетчикаТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, "ПолучениеЗначенияСчетчика", Перечисления.УровниИнцидентов.Ошибка);
    
    НавигационнаяСсылкаСервер = Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(Сервер), "Оборудование: " + Сервер);
    
    Для Каждого ТекСчетчик Из Счетчики[Сервер]["Счетчики"] Цикл
        
        // Если хотя бы один счетчин не инициализирован, надо инициализировать заново
        ЕстьИзмененияСчетчиков = ЕстьИзмененияСчетчиков ИЛИ НЕ ТекСчетчик.Значение["Инициализирован"];
        
		Счетчик = ТекСчетчик.Значение["Наименование"];
		Вызовов = 0;
		Сумма = 0;
        МинимальноеЗначение = Неопределено;
        МаксимальноеЗначение = Неопределено;
        КоличествоОшибок = 0;
        
        
		Для Каждого ТекЗамер Из ТекСчетчик.Значение["Замеры"] Цикл
            
            Если ТекЗамер > -1 Тогда
				Вызовов = Вызовов + 1;
				Сумма = Сумма + ТекЗамер;
                
                Если МинимальноеЗначение = Неопределено ИЛИ МинимальноеЗначение > ТекЗамер Тогда
                    МинимальноеЗначение = ТекЗамер;
                КонецЕсли;
                
                Если МаксимальноеЗначение = Неопределено ИЛИ МаксимальноеЗначение < ТекЗамер Тогда
                    МаксимальноеЗначение = ТекЗамер;
                КонецЕсли;
               
            Иначе
                КоличествоОшибок = КоличествоОшибок + 1;
            КонецЕсли;
            
        КонецЦикла;
        
		ТекСчетчик.Значение["Замеры"].Очистить();
		Если Вызовов > 0 Тогда
            
            ЭлементДанных = Новый Соответствие;
                       
            ИмяСчетчикаМассив = Новый Массив;
            ИмяСчетчикаМассив.Добавить("Производительность оборудования");
            ИмяСчетчикаМассив.Добавить(Сервер.ПлощадкаЭксплуатации.Наименование);
            Если Сервер.ФормироватьСчетчикПоНаименованию Тогда
                ИмяСчетчикаМассив.Добавить(Строка(Сервер));
            Иначе
                ИмяСчетчикаМассив.Добавить(ВРЕГ(Сервер.Хост));
            КонецЕсли;
            
            ИмяСчетчикаМассив.Добавить(Счетчик);
                
            ЭлементДанных.Вставить("name", ИмяСчетчикаМассив);
            ЭлементДанных.Вставить("counter", Вызовов);
            ЭлементДанных.Вставить("min", Окр(МинимальноеЗначение, 5));
            ЭлементДанных.Вставить("max", Окр(МаксимальноеЗначение, 5));
            ЭлементДанных.Вставить("avg", Окр(Сумма/Вызовов, 5)); 
            
            Данные.Добавить(ЭлементДанных);
            
            // Инцидент "Счетчик"
            ХешИнцидентаСчетчик = Справочники.Инциденты.ХешИнцидента(Строка(Сервер.УникальныйИдентификатор()) + ТекСчетчик.Значение["УникальныйИдентификатор"]);
            ИнцидентСчетчик = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидентаСчетчик, ТекСчетчик.Значение["НаименованиеПолное"], Ложь);
            
            ИнцидентыСервер.ЗакрытьИнцидент(ПолучениеЗначенияСчетчикаТипИнцидента, ИнцидентСчетчик, Истина);
            
        ИначеЕсли КоличествоОшибок = ТекСчетчик.Значение["Замеры"].Количество() Тогда
            
            // Инцидент "Счетчик"
            ХешИнцидентаСчетчик = Справочники.Инциденты.ХешИнцидента(Строка(Сервер.УникальныйИдентификатор()) + ТекСчетчик.Значение["УникальныйИдентификатор"]);
            ИнцидентСчетчик = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидентаСчетчик, ТекСчетчик.Значение["НаименованиеПолное"], Ложь);
            
            Сообщение = "Не удается получить значение счетчика.";
            ИнцидентыСервер.ОткрытьИнцидент(ПолучениеЗначенияСчетчикаТипИнцидента, ИнцидентСчетчик, ТекСчетчик.Значение["НаименованиеПолное"],,Сообщение,1,,,Перечисления.УровниИнцидентов.Ошибка,,НавигационнаяСсылкаСервер);
            ЕстьИзмененияСчетчиков = Истина;
            
        КонецЕсли;
        
	КонецЦикла;
    
    ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, Данные);
	ДанныеJSON = ЗаписьJSON.Закрыть();
    
    НаборЗаписей = РегистрыСведений.СтатистикаБуфер.СоздатьНаборЗаписей();
	НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.ДатаЗаписи = ТекДата;
	НовЗапись.ГУИД = Новый УникальныйИдентификатор();
    НовЗапись.Данные = ДанныеJSON;
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать(Ложь);
	
	Если Константы.ОтправлятьДанныеВнешнимЦКК.Получить() Тогда 
		ПорядковыйНомерПакета = Справочники.ПорядковыеНомераДанных.ПолучитьПорядковыйНомер(Справочники.ПорядковыеНомераДанных.СтатистикаБуферДатаВнешниеЦКК.Ссылка);
		НаборЗаписейЭкспорт = РегистрыСведений.СтатистикаБуферДатаВнешниеЦКК.СоздатьНаборЗаписей();
		ЕстьДанные = Ложь;
		Для Каждого ТекЦКК Из Счетчики[Сервер]["ВнешниеЦКК"] Цикл
			Если ТекЦКК.Ключ <> Справочники.ВнешниеЦКК.ПустаяСсылка() Тогда 
				НовЗапись = НаборЗаписейЭкспорт.Добавить();
				НовЗапись.ВнешнийЦКК = ТекЦКК.Ключ;
				НовЗапись.ПорядковыйНомерПакета = ПорядковыйНомерПакета;
				НовЗапись.ДатаЗаписи = ТекДата;
				НовЗапись.ГУИД = Новый УникальныйИдентификатор();
				НовЗапись.Данные = ДанныеJSON;
                НовЗапись.ЭтоJSON = Истина;
				
				ЕстьДанные = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьДанные Тогда
			НаборЗаписейЭкспорт.ОбменДанными.Загрузка = Истина;
			НаборЗаписейЭкспорт.Записать(Ложь);
		КонецЕсли;
	КонецЕсли;
    
    СобиратьДанные = Справочники.Оборудование.СобиратьДанные(Сервер);
	Возврат Новый Структура("СобиратьДанные, ЕстьИзмененияСчетчиков", СобиратьДанные, ЕстьИзмененияСчетчиков); 
    
КонецФункции

#КонецОбласти

#КонецОбласти


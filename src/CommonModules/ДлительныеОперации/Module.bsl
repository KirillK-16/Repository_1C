
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьВФонеВнешняяОбработка(ПараметрыЗапуска) Экспорт
    
    ИмяФайлаОбработки = ПолучитьИмяВременногоФайла("epf");
       
    ПараметрыЗапуска.ДвоичныеДанныеОбработка.Записать(ИмяФайлаОбработки);
    ПараметрыЗапуска.Вставить("ИмяФайлаОбработки", ИмяФайлаОбработки);
    
    ВнешняяОбработкаМоя = ВнешниеОбработки.Создать(ИмяФайлаОбработки, Ложь);
    ВнешняяОбработкаМоя.ДлительнаяОперацияВФоне(ПараметрыЗапуска);
    
КонецПроцедуры

Процедура ВыполнитьВФоне(ПараметрыЗапуска) Экспорт
    
    Контекст = Вычислить(ПараметрыЗапуска.Контекст);
    Выполнить "Контекст." + ПараметрыЗапуска.ИмяПроцедуры + "(ПараметрыЗапуска)";
    
КонецПроцедуры

#КонецОбласти

//СтатистикаГруппыСчетчиков Запускает выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище – Булево – признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию – Ложь.
//
// Возвращаемое значение:
//  Структура              - Возвращает свойства: 
//                             - АдресХранилища - адрес временного хранилища, в которое будет
//                          	 помещен результат работы задания;
//                             - АдресХранилищаДополнительный - адрес дополнительного временного хранилища,
//                               в которое будет помещен результат работы задания (доступно только если 
//                               установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//                             - ИдентификаторЗадания - уникальный идентификатор запущенного
//                               фонового задания;
//                             - ЗаданиеВыполнено - Истина если задание было успешно выполнено 
//                               за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить("Общий.ВыполнитьЗадание", ПараметрыЗадания,, НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение		
		Инфо = ИнформацияОбОшибке();
		Комментарий =
			"Описание = '" +Инфо.Описание + "', " +
			"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
			"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
			"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
			
			ЗаписьЖурналаРегистрации(
				"Функция ЗапуститьВыполнениеВФоне(...) Экспорт",
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.ОбщиеМодули.ДлительныеОперации,
				,
				Комментарий);
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     ЗаданиеВыполнено(Задание.УникальныйИдентификатор));
	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Отменяет выполнение фонового задания по переданному идентификатору.
// 
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
// 
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт 
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
    
    ЗавершитьОтмену = ТекущаяУниверсальнаяДатаВМиллисекундах() + 50000;
    Пока ТекущаяУниверсальнаяДатаВМиллисекундах() <= ЗавершитьОтмену Цикл
        
        Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
        Если Задание = Неопределено ИЛИ Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
            Возврат;
        КонецЕсли;
                
        Попытка
            Задание.Отменить();
        Исключение
            // Возможно задание как раз в этот момент закончилось и ошибки нет
            ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Отмена выполнения фонового задания'", Метаданные.ОсновнойЯзык.КодЯзыка),
            УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        КонецПопытки;
        
        КипВнешнийКомпонент.Пауза(200);
        
    КонецЦикла;
	
КонецПроцедуры

// Проверяет состояние фонового задания по переданному идентификатору.
// 
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
//
// Возвращаемое значение:
//  Булево              - возвращает Истина, если задание успешно выполнено,
//                        Ложь - если выполняется. В иных случаях вызывается исключение.
// 
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	
	Если Задание <> Неопределено
		И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОперацияНеВыполнена = Истина;
	ПоказатьПолныйТекстОшибки = Ложь;
	Если Задание = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Фоновое задание не найдено'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка, , , Строка(ИдентификаторЗадания));
	Иначе	
		Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ОшибкаЗадания = Задание.ИнформацияОбОшибке;
			Если ОшибкаЗадания <> Неопределено Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Фоновое задание завершено аварийно'", Метаданные.ОсновнойЯзык.КодЯзыка),
					УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке));
				ПоказатьПолныйТекстОшибки = Истина;
			Иначе
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Длительные операции.Фоновое задание завершено аварийно'", Метаданные.ОсновнойЯзык.КодЯзыка),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					НСтр("ru = 'Задание завершилось с неизвестной ошибкой.'"));
			КонецЕсли;
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Длительные операции.Фоновое задание отменено администратором'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				НСтр("ru = 'Задание завершилось с неизвестной ошибкой.'"));
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказатьПолныйТекстОшибки Тогда
		ТекстОшибки = КраткоеПредставлениеОшибки(ПолучитьИнформациюОбОшибке(Задание.ИнформацияОбОшибке));
		ВызватьИсключение(ТекстОшибки);
	ИначеЕсли ОперацияНеВыполнена Тогда
		ВызватьИсключение(НСтр("ru = 'Не удалось выполнить данную операцию. 
                                |Подробности см. в Журнале регистрации.'"));
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция НайтиЗаданиеПоИдентификатору(Знач ИдентификаторЗадания)
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание;
	
КонецФункции

Функция ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке)
	
	Результат = ИнформацияОбОшибке;
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			Результат = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке.Причина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область Отчет_Анализ_потребления_памяти

Процедура ВыполнитьАнализПотребленияПамятиВФоне(Кластер, Сервер, PID, ДатаНачала, ДатаОкончания, ИБ, АдресХранилища, Диаграмма, ДиаграммаСеансов) Экспорт
	
	Динамика = ДинамикаПотребления(Кластер, Сервер, PID, ДатаНачала, ДатаОкончания, ИБ);
	ДинамикаНетДанных = Динамика.Даты.Количество() = 0;
	
	РейтингСеансов = ОбновитьДиаграмму(Динамика, Диаграмма, ДатаНачала, ДатаОкончания, PID, ИБ);
	
	ОбновитьДиаграммуПотребления(РейтингСеансов, ДиаграммаСеансов, ДатаНачала, ДатаОкончания);
	ДинамикаПотребленияНовая(Кластер, Сервер, PID, ДатаНачала, ДатаОкончания, ИБ, Диаграмма);
	
	Результат = Новый Структура;
	Результат.Вставить("Диаграмма", Диаграмма);
	Результат.Вставить("ДиаграммаСеансов", ДиаграммаСеансов);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ДинамикаПотребления(Знач ОбъектКонтроля, Знач Сервер, Знач Процесс, Знач ДатаНачала, Знач ДатаОкончания, Знач ИБ)
	
	ЗапросШаблон = "
	|ВЫБРАТЬ 
	|    Процессы.Время КАК Время,
	|    Процессы.Память КАК Память, 
	|    Процессы.Сервер КАК Сервер,
	|    Процессы.Процесс КАК Процесс,
	|    Сеансы.Сеанс КАК НомерСеанса,
	|    Сеансы.Пользователь КАК Пользователь,
	|    Сеансы.Приложение КАК Приложение,
	|    Сеансы.База КАК ИнформационнаяБаза
	|ИЗ 
	|    РегистрСведений.МониторингПроцессов Как Процессы
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.МониторингСеансов КАК Сеансы
	|ПО 
	|    Процессы.Время = Сеансы.Время
	|	И Процессы.Кластер = Сеансы.Кластер
	|	И Процессы.Сервер = Сеансы.Сервер
	|	И Процессы.Процесс = Сеансы.Процесс
	|ГДЕ 
	|    Процессы.Кластер = &Кластер И
	|    Процессы.Сервер = &Сервер И
	|    Процессы.Время >= &ДатаНачала И
	|    Процессы.Время < &ДатаОкончания И
	|    Сеансы.ВремяВызоваТекущее > 0 И
	|    Сеансы.ВремяВызововСУБДТекущее = 0
	|УПОРЯДОЧИТЬ ПО
	|	Процессы.Процесс,
	|	Сеансы.База,
	|   Сеансы.Сеанс,
	|	Процессы.Время
	|";
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Кластер", ОбъектКонтроля);
	Запрос.УстановитьПараметр("Сервер", Сервер);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);	
	Запрос.Текст = ЗапросШаблон;
	
	Результат = Запрос.Выполнить();
	ВыборкаЗамеров = Результат.Выбрать();
	
	ДинамикаПотребления = Новый Соответствие;
	Процессы = Новый Соответствие;
	Даты = Новый Массив;
	
	Пока ВыборкаЗамеров.Следующий() Цикл
		Время = ВыборкаЗамеров.Время;
		Процесс = ВыборкаЗамеров.Процесс;
		Память = ВыборкаЗамеров.Память;
		
		ЧислоДат = Даты.Количество();
		Если ЧислоДат = 0 ИЛИ Даты[ЧислоДат - 1] <> Время Тогда
			Даты.Добавить(Время);
		КонецЕсли;

		ТекущийСрез = ДинамикаПотребления.Получить(Время);
		Если ТекущийСрез = Неопределено Тогда
			ТекущийСрез = Новый Соответствие;
			ДинамикаПотребления.Вставить(Время, ТекущийСрез);
		КонецЕсли;
		
		ДанныеПоСерверу = ТекущийСрез.Получить(Сервер);
		Если ДанныеПоСерверу = Неопределено Тогда
			ДанныеПоСерверу = Новый Соответствие;
			ТекущийСрез.Вставить(Сервер, ДанныеПоСерверу);
		КонецЕсли;
		
		ДанныеПоПроцессу = ДанныеПоСерверу.Получить(Процесс);
		Если ДанныеПоПроцессу = Неопределено Тогда
			ДанныеПоПроцессу = Новый Соответствие;
			ДанныеПоСерверу.Вставить(Процесс, ДанныеПоПроцессу);
		КонецЕсли;
		
		ДанныеПоПроцессу.Вставить("Память", Память / 1024.0);
		Процессы.Вставить(Процесс, Память);
		
		СписокСеансов = ДанныеПоПроцессу.Получить("СписокСеансов");
		Если СписокСеансов = Неопределено Тогда
			СписокСеансов = Новый Массив;
			ДанныеПоПроцессу.Вставить("СписокСеансов", СписокСеансов);
		КонецЕсли;	
		
		Сеанс = Новый Структура("НомерСеанса, Пользователь, Приложение, ИнформационнаяБаза",
			ВыборкаЗамеров.НомерСеанса,
			ВыборкаЗамеров.Пользователь,
			ВыборкаЗамеров.Приложение,
			ВыборкаЗамеров.ИнформационнаяБаза
		);
		СписокСеансов.Добавить(Сеанс);
		
	КонецЦикла;
	
	Возврат Новый Структура("Процессы, Даты, Динамика", Процессы, Даты, ДинамикаПотребления);
	
КонецФункции

Функция ОбновитьДиаграмму(Динамика, Диаграмма, ДатаНачала, ДатаОкончания, PID, ИБ)
	
	Диаграмма.Обновление = Ложь;
	
	Диаграмма.АвтоМаксимальноеЗначение	= Ложь;
	Диаграмма.АвтоМинимальноеЗначение	= Ложь;
	Диаграмма.МинимальноеЗначение		= 0;
	Диаграмма.БазовоеЗначение			= 0;
	Диаграмма.ПропускатьБазовоеЗначение	= Истина;
		
	Диаграмма.Очистить();
	
	ИдентификаторСерия = Новый Соответствие;
	Для Каждого ПроцессТекущий Из Динамика.Процессы Цикл
		Серия = Диаграмма.Серии.Добавить(Строка(ПроцессТекущий.Ключ));
		ИдентификаторСерия.Вставить(ПроцессТекущий.Ключ, Серия);
	КонецЦикла;
	
	ПотреблениеСеансов = Новый Соответствие;
	ТЗнПотреблениеСеансов = Новый ТаблицаЗначений;
	ТЗнПотреблениеСеансов.Колонки.Добавить("ИнформационнаяБаза");
	ТЗнПотреблениеСеансов.Колонки.Добавить("НомерСеанса");
	ТЗнПотреблениеСеансов.Колонки.Добавить("Пользователь");
	ТЗнПотреблениеСеансов.Колонки.Добавить("Приложение");
	ТЗнПотреблениеСеансов.Колонки.Добавить("Процесс");
	ТЗнПотреблениеСеансов.Колонки.Добавить("ПредставлениеСеанса");
	ТЗнПотреблениеСеансов.Колонки.Добавить("Значение");
	
	Если PID <> 0 ИЛИ  ЗначениеЗаполнено(ИБ) Тогда
		ЕстьФильтрЗаписей = Истина;
	Иначе
		ЕстьФильтрЗаписей = Ложь;
	КонецЕсли;
		
	ПрежняяДата = Неопределено;
	Для Каждого Дата Из Динамика.Даты Цикл
		
		Точка = Диаграмма.Точки.Добавить(Дата);
		Точка.Текст = Строка(Дата);
		
		ВременнойСрез = Динамика.Динамика[Дата];
		Для Каждого ДанныеПоСерверу Из ВременнойСрез Цикл
			ИмяСервера = ДанныеПоСерверу.Ключ;
			ДанныеПоПроцессам = ДанныеПоСерверу.Значение;
			Для Каждого ДанныеПоПроцессу Из ДанныеПоПроцессам Цикл
				
				Процесс = ДанныеПоПроцессу.Ключ;
				Память = ДанныеПоПроцессу.Значение["Память"];
				Диаграмма.УстановитьЗначение(Точка, ИдентификаторСерия[Процесс], Память);
				
				СписокСеансов = ДанныеПоПроцессу.Значение["СписокСеансов"];
				
				Если ПрежняяДата <> Неопределено Тогда
					ПоСерверу = Динамика.Динамика[ПрежняяДата].Получить(ИмяСервера);
					Если ПоСерверу <> Неопределено Тогда
						ДанныеПоПотреблениюНаПредыдущемШаге = ПоСерверу.Получить(Процесс);
					КонецЕсли;
				Иначе
					ДанныеПоПотреблениюНаПредыдущемШаге = Неопределено;
				КонецЕсли;
				
				Если ДанныеПоПотреблениюНаПредыдущемШаге <> Неопределено Тогда
					ПрежняяПамять = ДанныеПоПотреблениюНаПредыдущемШаге["Память"];
					
					ПриращениеПамяти = (Память - ПрежняяПамять) / СписокСеансов.Количество();
					ПриращениеПамяти = ?(ПриращениеПамяти < 0, 0, ПриращениеПамяти);
					
					Для Каждого Сеанс Из СписокСеансов Цикл
						
						ТекущееПотреблениеСеанса = ПотреблениеСеансов.Получить(ПредставлениеСеанса(Сеанс));
						Если ТекущееПотреблениеСеанса = Неопределено Тогда
							ТекущееПотреблениеСеанса = 0;
						КонецЕсли;	
						
						ТекущееПотреблениеСеанса = ТекущееПотреблениеСеанса + ПриращениеПамяти;
						СтрокаПредставлениеСеанса = ПредставлениеСеанса(Сеанс);
						ПотреблениеСеансов.Вставить(СтрокаПредставлениеСеанса, ТекущееПотреблениеСеанса);
						
						
						ТЗнНоваяСтрока = ТЗнПотреблениеСеансов.Добавить();
						ТЗнНоваяСтрока.ИнформационнаяБаза = Сеанс.ИнформационнаяБаза;
						ТЗнНоваяСтрока.НомерСеанса = Сеанс.НомерСеанса;
						ТЗнНоваяСтрока.Пользователь = Сеанс.Пользователь;
						ТЗнНоваяСтрока.Приложение = Сеанс.Приложение;
						ТЗнНоваяСтрока.Процесс = Процесс;
						ТЗнНоваяСтрока.ПредставлениеСеанса = СтрокаПредставлениеСеанса;
						ТЗнНоваяСтрока.Значение = ТекущееПотреблениеСеанса;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ПрежняяДата = Дата;
		
	КонецЦикла;
	Диаграмма.ТипДиаграммы = ТипДиаграммы.График;
	Диаграмма.Очистить();

	РейтингСеансов = Новый СписокЗначений;
	Если ЕстьФильтрЗаписей Тогда
		ЕстьФильтрПоПроцессу = ?(PID <> 0, Истина, Ложь);
		ЕстьФильтрПоИБ = ?(ЗначениеЗаполнено(ИБ), Истина, Ложь);
		
		Для Каждого ТекЗапись ИЗ ТЗнПотреблениеСеансов Цикл
			
			Если ЕстьФильтрПоПроцессу И ТекЗапись.Процесс <> PID Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЕстьФильтрПоИБ И ТекЗапись.ИнформационнаяБаза <> ИБ Тогда
				Продолжить;
			КонецЕсли;
			
			РейтингСеансов.Добавить(ТекЗапись.Значение, ТекЗапись.ПредставлениеСеанса);
			
		КонецЦикла;
	Иначе
		Для Каждого СеансПотребление Из ПотреблениеСеансов Цикл
			РейтингСеансов.Добавить(СеансПотребление.Значение, СеансПотребление.Ключ);
		КонецЦикла;
	КонецЕсли;
		
	РейтингСеансов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Возврат РейтингСеансов;
	
КонецФункции

Процедура ОбновитьДиаграммуПотребления(РейтингСеансов, ДиаграммаСеансов, ДатаНачала, ДатаОкончания)
		
	ДиаграммаСеансов.Обновление = Ложь;
	
	ДиаграммаСеансов.АвтоМаксимальноеЗначение	= Ложь;
	ДиаграммаСеансов.АвтоМинимальноеЗначение	= Ложь;
	ДиаграммаСеансов.МинимальноеЗначение		= 0;
	ДиаграммаСеансов.БазовоеЗначение			= 0;
	ДиаграммаСеансов.ПропускатьБазовоеЗначение	= Истина;
    
	ДиаграммаСеансов.ОбластьЛегенды.Лево = 0.50;
	ДиаграммаСеансов.ОбластьЛегенды.Право = 1;
	ДиаграммаСеансов.ОбластьПостроения.Право = 0.5;
	ДиаграммаСеансов.ОбластьПостроения.Лево = 0;
	
	ДиаграммаСеансов.Очистить();
	
	НомерТочки = 1;	
	Для Каждого СеансПотребление Из РейтингСеансов Цикл
		
		Серия = ДиаграммаСеансов.Серии.Добавить("Точка " + НомерТочки + ": " +СеансПотребление.Представление);
		Точка = ДиаграммаСеансов.Точки.Добавить(НомерТочки);
		Точка.Текст = Строка(НомерТочки);
		
		ДиаграммаСеансов.УстановитьЗначение(Точка, Серия, СеансПотребление.Значение);
		
		НомерТочки = НомерТочки + 1;
		Если НомерТочки > 31 Тогда
			Прервать;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДинамикаПотребленияНовая(Знач ОбъектКонтроля, Знач Сервер, Знач Процесс, Знач ДатаНачала, Знач ДатаОкончания, Знач ИБ, Диаграмма)
	
	ПериодАгрегации = (ДатаОкончания - ДатаНачала)/299;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(2015,1,1),СЕКУНДА, ВЫРАЗИТЬ((РАЗНОСТЬДАТ(ДАТАВРЕМЯ(2015,1,1), Время, СЕКУНДА) + 63555667200)/&ПериодАгрегации - 0.5 КАК ЧИСЛО(11,0)) * &ПериодАгрегации - 63555667200) КАК Время,
	|	Процесс,
	|	МАКСИМУМ(Память) КАК Память
	|ИЗ
	|	РегистрСведений.МониторингПроцессов
	|ГДЕ
	|	Кластер = &Кластер
	|	И Сервер = &Сервер
	|	И Время МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	{И Процесс = &Процесс}
	|СГРУППИРОВАТЬ ПО
	|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(2015,1,1),СЕКУНДА, ВЫРАЗИТЬ((РАЗНОСТЬДАТ(ДАТАВРЕМЯ(2015,1,1), Время, СЕКУНДА) + 63555667200)/&ПериодАгрегации - 0.5 КАК ЧИСЛО(11,0)) * &ПериодАгрегации - 63555667200),
	|	Процесс
	|УПОРЯДОЧИТЬ ПО
	|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(2015,1,1),СЕКУНДА, ВЫРАЗИТЬ((РАЗНОСТЬДАТ(ДАТАВРЕМЯ(2015,1,1), Время, СЕКУНДА) + 63555667200)/&ПериодАгрегации - 0.5 КАК ЧИСЛО(11,0)) * &ПериодАгрегации - 63555667200)	
	|";
	Запрос.УстановитьПараметр("Кластер", ОбъектКонтроля);
	Запрос.УстановитьПараметр("Сервер", Сервер);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ПериодАгрегации", ПериодАгрегации);
	Если Процесс = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И Процесс = &Процесс}", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И Процесс = &Процесс}", "И Процесс = &Процесс");
		Запрос.УстановитьПараметр("Процесс", Процесс);
	КонецЕсли;
		
	РезультатПроцесс = Запрос.Выполнить();
	
	ОбновитьДиаграммуНовая(РезультатПроцесс, Диаграмма, ДатаНачала, ДатаОкончания);
	
КонецФункции

Функция ОбновитьДиаграммуНовая(РезультатЗапроса, Диаграмма, ДатаНачала, ДатаОкончания)
	
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	
	ТекстЗаголовка = НСтр("ru = 'Потребление памяти(в мегабайтах) с %1 по %2'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(ДатаНачала, "ДФ='дд.ММ.гг ЧЧ:мм'"));
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%2", Формат(ДатаОкончания, "ДФ='дд.ММ.гг ЧЧ:мм'"));
	
	Диаграмма.ОбластьЗаголовка.Верх = 0;
	Диаграмма.ОбластьЗаголовка.Лево = 0;
	Диаграмма.ОбластьЗаголовка.Право = 1;
	Диаграмма.ОбластьЗаголовка.Низ = 0.1;
	
	Диаграмма.ОбластьПостроения.Верх = 0.1;
	
	Диаграмма.ОбластьЗаголовка.Текст = ТекстЗаголовка;
	
	Диаграмма.ОбластьПостроения.ФорматШкалыЗначений = "ЧДЦ=0";
	
	ПроцессСерия = Новый Соответствие;
	Точка = Неопределено;
	
	КоличествоТочек = 0;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Точка = Неопределено ИЛИ Точка.Значение <> Выборка.Время Тогда
			Точка = Диаграмма.УстановитьТочку(Выборка.Время);
			КоличествоТочек = КоличествоТочек + 1;
		КонецЕсли;
		
		Если ПроцессСерия[Выборка.Процесс] = Неопределено Тогда
			Серия = Диаграмма.УстановитьСерию("PID " + Формат(Выборка.Процесс, "ЧН=0; ЧГ=0"));
			Серия.Маркер = ТипМаркераДиаграммы.Нет;
			ПроцессСерия.Вставить(Выборка.Процесс, Серия);
		КонецЕсли;
		Серия = ПроцессСерия[Выборка.Процесс];
		
		Подсказка = "Память = " + Формат(Выборка.Память/1024, "ЧДЦ=3") + " Мб
		|" + Серия.Значение + "
		|" + Точка.Значение;
		
		Диаграмма.УстановитьЗначение(Точка, Серия, Выборка.Память/1024,,Подсказка);
	КонецЦикла;
	
	Если КоличествоТочек = 1 Тогда
		Для Каждого ТекСерия ИЗ Диаграмма.Серии Цикл
			ТекСерия.Маркер = ТипМаркераДиаграммы.Круг;
		КонецЦикла;
	КонецЕсли;
	
	
	Диаграмма.Обновление = Истина;
		
КонецФункции

Функция ПредставлениеСеанса(Сеанс)
	
	Пользователь = Строка(Сеанс.Пользователь);
	НомерСеанса = Строка(Сеанс.НомерСеанса);
	Приложение = Строка(Сеанс.Приложение);
	ИнформационнаяБаза = Строка(Сеанс.ИнформационнаяБаза);
	
	Возврат ?(ПустаяСтрока(Строка(Пользователь)), "", "Пользователь: " + Пользователь + ", ") +
	?(ПустаяСтрока(Строка(НомерСеанса)), "", "Сеанс: " + НомерСеанса + ", ") +
	?(ПустаяСтрока(Строка(Приложение)), "", "Приложение: " + Приложение + ", ") +
	?(ПустаяСтрока(Строка(ИнформационнаяБаза)), "", "ИБ: " + ИнформационнаяБаза);
	
КонецФункции
	
#КонецОбласти
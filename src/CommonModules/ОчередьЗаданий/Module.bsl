// Добавляет новое задание в очередь.
// В случае вызова в транзакции на задание устанавливается объектная блокировка.
// 
// Параметры: 
//  ПараметрыЗадания - Структура - Параметры добавляемого задания, возможные ключи:
//   Использование
//   ЗапланированныйМоментЗапуска
//   ИмяМетода - обязательно для указания.
//   Параметры
//   Ключ
//   ИнтервалПовтораПриАварийномЗавершении
//   Расписание
//   КоличествоПовторовПриАварийномЗавершении
//
// Возвращаемое значение: 
//  СправочникСсылка.ОчередьЗаданий - Идентификатор добавленного задания.
// 
Функция ДобавитьЗадание(Знач ПараметрыЗадания) Экспорт
	
	ПроверитьПараметрыЗадания(ПараметрыЗадания, "Добавление");
	
	// Проверка имени метода
	Если НЕ ПараметрыЗадания.Свойство("ИмяМетода") Тогда
		ВызватьИсключение(НСтр("ru = 'Не задан обязательный параметр задания ИмяМетода'"));
	КонецЕсли;
	
	// Проверка уникальности ключа
	Если ПараметрыЗадания.Свойство("Ключ") И ЗначениеЗаполнено(ПараметрыЗадания.Ключ) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяМетода", ПараметрыЗадания.ИмяМетода);
		Отбор.Вставить("Ключ", ПараметрыЗадания.Ключ);
		Отбор.Вставить("ОбластьДанных", ПараметрыЗадания.ОбластьДанных);
		Отбор.Вставить("СостояниеЗадания", Новый Массив);
		
		// Не учитывать завершенные.
		ОписаниеОтбора = Новый Структура;
		ОписаниеОтбора.Вставить("ВидСравнения", ВидСравнения.НеРавно);
		ОписаниеОтбора.Вставить("Значение", Перечисления.СостоянияЗаданий.Завершено);
		
		Отбор.СостояниеЗадания.Добавить(ОписаниеОтбора);
		
		Если ПолучитьЗадания(Отбор).Количество() > 0 Тогда
			ВызватьИсключение ПолучитьТекстИсключенияДублированиеЗаданийСОдинаковымКлючом();
		КонецЕсли;
	КонецЕсли;
	
	// Умолчания
	Если НЕ ПараметрыЗадания.Свойство("Использование") Тогда
		ПараметрыЗадания.Вставить("Использование", Истина);
	КонецЕсли;
	
	ПланируемыйМоментЗапуска = Неопределено;
	Если ПараметрыЗадания.Свойство("ЗапланированныйМоментЗапуска", ПланируемыйМоментЗапуска) Тогда
		
		ПланируемыйМоментЗапуска = УниверсальноеВремя(ПланируемыйМоментЗапуска);
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ПланируемыйМоментЗапуска);
		
		УказанМоментЗапуска = Истина;
		
	Иначе
		
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ТекущаяУниверсальнаяДата());
		УказанМоментЗапуска = Ложь;
		
	КонецЕсли;
	
	// Типы сохраняемые в хранилище значения
	Если ПараметрыЗадания.Свойство("Параметры") Тогда
		ПараметрыЗадания.Вставить("Параметры", Новый ХранилищеЗначения(ПараметрыЗадания.Параметры));
	Иначе
		ПараметрыЗадания.Вставить("Параметры", Новый ХранилищеЗначения(Новый Массив));
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Расписание") 
		И ПараметрыЗадания.Расписание <> Неопределено Тогда
		
		ПараметрыЗадания.Вставить("Расписание", Новый ХранилищеЗначения(ПараметрыЗадания.Расписание));
	Иначе
		ПараметрыЗадания.Вставить("Расписание", Неопределено);
	КонецЕсли;
	
	// Формирование записи задания
	
	СправочникДляЗадания = Справочники.ОчередьЗаданий;
	
	Задание = СправочникДляЗадания.СоздатьЭлемент();
	Для каждого ОписаниеПараметра Из ОчередьЗаданийСлужебный.ПараметрыЗаданийОчереди() Цикл
		Если ПараметрыЗадания.Свойство(ОписаниеПараметра.Имя) Тогда
			Задание[ОписаниеПараметра.Поле] = ПараметрыЗадания[ОписаниеПараметра.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Если Задание.Использование
		И (УказанМоментЗапуска ИЛИ ПараметрыЗадания.Расписание = Неопределено) Тогда
			
		Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Запланировано;
	Иначе
		Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.НеЗапланировано;
	КонецЕсли;
	
	СсылкаЗадания = СправочникДляЗадания.ПолучитьСсылку();
	Задание.УстановитьСсылкуНового(СсылкаЗадания);
	
	Если ТранзакцияАктивна() Тогда
		
		ЗаблокироватьДанныеДляРедактирования(СсылкаЗадания);
		// Блокировка будет автоматически снята при завершении транзакции
	КонецЕсли;
	
	Задание.Записать();
	
	Возврат Задание.Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Проверяет переданную структуру параметров на соответствие требованиям
// подсистемы:
//  - состав ключей
//  - типы параметров
//
// Параметры:
//  Параметры - Структура - параметры заданий
//  Режим - Строка - режим в котором следует проверять параметры
//   Допустимые значения:
//    Отбор - проверка параметров для отбора
//    Добавление - проверка параметров для добавления
//    Изменение - проверка параметров для изменения
// 
Процедура ПроверитьПараметрыЗадания(Знач Параметры, Знач Режим)
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		ШаблонСообщения = НСтр("ru = 'Передан недопустимый тип набора параметров задания - %1'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ТипЗнч(Параметры));
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Отбор = Режим = "Отбор";
	
	ОписанияПараметров = ОчередьЗаданийСлужебный.ПараметрыЗаданийОчереди();
	
	ВидыСравнения = ОчередьЗаданийСлужебный.ВидыСравненияОтбораЗаданий();
	
	КлючиОписанияОтбора = Новый Массив;
	КлючиОписанияОтбора.Добавить("ВидСравнения");
	КлючиОписанияОтбора.Добавить("Значение");
	
	Для каждого КлючИЗначение Из Параметры Цикл
		ОписаниеПараметра = ОписанияПараметров.Найти(ВРег(КлючИЗначение.Ключ), "ИмяВРег");
		Если ОписаниеПараметра = Неопределено 
			ИЛИ НЕ ОписаниеПараметра[Режим] Тогда
			
			ШаблонСообщения = НСтр("ru = 'Передан недопустимый параметр задания - %1'");
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", КлючИЗначение.Ключ);
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		Если Отбор И ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			// Массив описаний отбора
			Для каждого ОписаниеОтбора Из КлючИЗначение.Значение Цикл
				Если ТипЗнч(ОписаниеОтбора) <> Тип("Структура") Тогда
					ШаблонСообщения = НСтр("ru = 'Передан недопустимый тип %1 в коллекции описания отбора %2'");
					ТекстСообщения = СтрЗаменить(СтрЗаменить(ШаблонСообщения, "%1", ТипЗнч(ОписаниеОтбора)), "%2", КлючИЗначение.Ключ);
					ВызватьИсключение(ТекстСообщения);
				КонецЕсли;
				
				// Проверка ключей
				Для каждого ИмяКлюча Из КлючиОписанияОтбора Цикл
					Если НЕ ОписаниеОтбора.Свойство(ИмяКлюча) Тогда
						ШаблонСообщения = НСтр("ru = 'Передано недопустимое описание отбора в коллекции описания отбора %1.
							|Отсутствует свойство %2.'");
						ТекстСообщения = СтрЗаменить(СтрЗаменить(ШаблонСообщения, "%1", КлючИЗначение.Ключ), "%2", ИмяКлюча);
						ВызватьИсключение(ТекстСообщения);
					КонецЕсли;
				КонецЦикла;
				
				// Проверка вида сравнения
				Если ВидыСравнения.Получить(ОписаниеОтбора.ВидСравнения) = Неопределено Тогда
					ШаблонСообщения = НСтр("ru = 'Передан недопустимый вид сравнения в описании отбора в коллекции описания отбора %1'");
					ТекстСообщения =  СтрЗаменить(ШаблонСообщения, "%1", КлючИЗначение.Ключ);
					ВызватьИсключение(ТекстСообщения);
				КонецЕсли;
				
				// Проверка значения
				Если ОписаниеОтбора.ВидСравнения = ВидСравнения.ВСписке
					ИЛИ ОписаниеОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
					
					Если ТипЗнч(ОписаниеОтбора.Значение) <> Тип("Массив") Тогда
						ШаблонСообщения = НСтр("ru = 'Передан недопустимый тип %1 в описании отбора в коллекции описания отбора %2.
							|Для вида сравнения %3 ожидается тип Массив.'");
						ТекстСообщения = СтрЗаменить(СтрЗаменить(СтрЗаменить(ШаблонСообщения, "%1", 
							ТипЗнч(ОписаниеОтбора.Значение)), "%2", КлючИЗначение.Ключ), "%3", ОписаниеОтбора.ВидСравнения);
						ВызватьИсключение(ТекстСообщения);
					КонецЕсли;
					
					Для каждого ЗначениеОтбора Из ОписаниеОтбора.Значение Цикл
						ПроверитьЗначениеНаСоответствиеОписаниюПараметра(ЗначениеОтбора, ОписаниеПараметра);
					КонецЦикла;
				Иначе
					ПроверитьЗначениеНаСоответствиеОписаниюПараметра(ОписаниеОтбора.Значение, ОписаниеПараметра);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПроверитьЗначениеНаСоответствиеОписаниюПараметра(КлючИЗначение.Значение, ОписаниеПараметра);
		КонецЕсли;
	КонецЦикла;
	
	// ЗапланированныйМоментЗапуска
	Если Параметры.Свойство("ЗапланированныйМоментЗапуска")
		И НЕ ЗначениеЗаполнено(Параметры.ЗапланированныйМоментЗапуска) Тогда
		
		ШаблонСообщения = НСтр("ru = 'Передано недопустимое значение %1 параметра задания %2'");
		ТекстСообщения = СтрЗаменить(СтрЗаменить(ШаблонСообщения, "%1",
			Параметры.ЗапланированныйМоментЗапуска), "%2", 
			ОписанияПараметров.Найти(ВРег("ЗапланированныйМоментЗапуска"), "ИмяВРег").Имя);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Получает задания очереди по заданному отбору.
// Возможно получение неконсистентных данных.
//
// Параметры:
//  Отбор – Структура, Массив – значения по которым, требуется отбирать задания. 
//  Возможные ключи структуры:
//   ИмяМетода
//   Идентификатор
//   СостояниеЗадания
//   Ключ
//   Шаблон
//   Использование
//  Так же может быть передан массив структур - описаний отбора со следующими ключами:
//   ВидСравнения – ВидСравнения – допустимыми значениями являются только
//    ВидСравнения.Равно
//    ВидСравнения.НеРавно
//    ВидСравнения.ВСписке
//    ВидСравнения.НеВСписке
//   Значение – Значение отбора, для видов сравнения ВСписке и НеВСписке – массив значений.
//    Для видов сравнения  Равно / НеРавно – сами значения.
//  Все условия отбора объединяются по И.
//
// Возвращаемое значение:
//  ТаблицаЗначений – таблица найденных заданий. Колонки соответствуют параметрам заданий.
//
Функция ПолучитьЗадания(Знач Отбор) Экспорт
	
	ПроверитьПараметрыЗадания(Отбор, "Отбор");
	
	// Формирование таблицы с условиями отбора
	ТаблицаУсловий = Новый ТаблицаЗначений;
	ТаблицаУсловий.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаУсловий.Колонки.Добавить("ВидСравнения", Новый ОписаниеТипов("ВидСравнения"));
	ТаблицаУсловий.Колонки.Добавить("Параметр", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаУсловий.Колонки.Добавить("Значение");
	
	ОписанияПараметров = ОчередьЗаданийСлужебный.ПараметрыЗаданийОчереди();
	
	ПолучатьРазделенные = Истина;
	ПолучатьНеразделенные = Истина;
	
	Для каждого КлючИЗначение Из Отбор Цикл
		
		ОписаниеПараметра = ОписанияПараметров.Найти(ВРег(КлючИЗначение.Ключ), "ИмяВРег");
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			Для Индекс = 0 По КлючИЗначение.Значение.ВГраница() Цикл
				ОписаниеОтбора = КлючИЗначение.Значение[Индекс];
				
				Условие = ТаблицаУсловий.Добавить();
				Условие.Поле = ОписаниеПараметра.Поле;
				Условие.ВидСравнения = ОписаниеОтбора.ВидСравнения;
				Условие.Параметр = ОписаниеПараметра.Имя + ФорматИндекса(Индекс);
				Условие.Значение = ОписаниеОтбора.Значение;
				
			КонецЦикла;
		Иначе
			
			Условие = ТаблицаУсловий.Добавить();
			Условие.Поле = ОписаниеПараметра.Поле;
			Условие.ВидСравнения = ВидСравнения.Равно;
			Условие.Параметр = ОписаниеПараметра.Имя;
			Условие.Значение = КлючИЗначение.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Подготовка запроса
	Запрос = Новый Запрос;
		
	ПоляВыборки = ОчередьЗаданийСлужебный.ПоляВыборкиОчередиЗаданий();
	
	СтрокаУсловий = "";
	Если ТаблицаУсловий.Количество() > 0 Тогда
		
		ВидыСравнения = ОчередьЗаданийСлужебный.ВидыСравненияОтбораЗаданий();
		
		Для Каждого Условие Из ТаблицаУсловий Цикл
			
			Если НЕ ПустаяСтрока(СтрокаУсловий) Тогда
				СтрокаУсловий = СтрокаУсловий + Символы.ПС + Символы.Таб + "И ";
			КонецЕсли;
			
			СтрокаУсловий = СтрокаУсловий + "Очередь." + Условие.Поле + " " + 
				ВидыСравнения.Получить(Условие.ВидСравнения) + " (&" + Условие.Параметр + ")";
			
			Запрос.УстановитьПараметр(Условие.Параметр, Условие.Значение);
		КонецЦикла;
		
	КонецЕсли;
			
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|" + ПоляВыборки + ",
		|	"""" КАК ЧасовойПояс
		|ИЗ
		|	Справочник.ОчередьЗаданий КАК Очередь";
		
	Если Не ПустаяСтрока(СтрокаУсловий) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	" + СтрокаУсловий;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	// Получение данных
	Если ТранзакцияАктивна() Тогда
		Результат = Запрос.Выполнить().Выгрузить();
	Иначе
		Результат = ОчередьЗаданийСлужебный.ВыполнитьЗапросВнеТранзакции(Запрос).Выгрузить();
	КонецЕсли;
	
	// Приведение результатов
	Результат.Колонки.Расписание.Имя = "РасписаниеХранилище";
	Результат.Колонки.Параметры.Имя = "ПараметрыХранилище";
	Результат.Колонки.Добавить("Расписание", Новый ОписаниеТипов("РасписаниеРегламентногоЗадания, Неопределено"));
	Результат.Колонки.Добавить("Параметры", Новый ОписаниеТипов("Массив"));
	
	Для каждого СтрокаЗадания Из Результат Цикл
		СтрокаЗадания.Расписание = СтрокаЗадания.РасписаниеХранилище.Получить();
		СтрокаЗадания.Параметры = СтрокаЗадания.ПараметрыХранилище.Получить();
		
		ЧасовойПоясОбласти = СтрокаЗадания.ЧасовойПояс;
		Если Не ЗначениеЗаполнено(ЧасовойПоясОбласти) Тогда
			ЧасовойПоясОбласти = Неопределено;
		КонецЕсли;
		
		СтрокаЗадания.ЗапланированныйМоментЗапуска = 
			МестноеВремя(СтрокаЗадания.ЗапланированныйМоментЗапуска, ЧасовойПоясОбласти);
	КонецЦикла;
	
	Результат.Колонки.Удалить("РасписаниеХранилище");
	Результат.Колонки.Удалить("ПараметрыХранилище");
	Результат.Колонки.Удалить("ЧасовойПояс");
	
	Возврат Результат;
	
КонецФункции

// Изменяет задание с указанным идентификатором
// В случае вызова в транзакции на задание устанавливается объектная блокировка.
// 
// Параметры: 
//  Идентификатор - СправочникСсылка.ОчередьЗаданий - Идентификатор задания
//  ПараметрыЗадания - Структура - Параметры, которые следует установить заданию, 
//   возможные ключи:
//   Использование
//   ЗапланированныйМоментЗапуска
//   ЭксклюзивноеВыполнение
//   ИмяМетода
//   Параметры
//   Ключ
//   ИнтервалПовтораПриАварийномЗавершении
//   Расписание
//   КоличествоПовторовПриАварийномЗавершении
//   
//   В случае если задание создано на основе шаблона, могут быть указаны
//   только следующие ключи: Использование.
// 
Процедура ИзменитьЗадание(Идентификатор, ПараметрыЗадания, ОбязательноИзменитьСостояние = Ложь) Экспорт
	
	ПроверитьПараметрыЗадания(ПараметрыЗадания, "Изменение");
	
	Задание = ОписаниеЗаданияПоИдентификатору(Идентификатор);
	
	// Проверка уникальности ключа
	Если ПараметрыЗадания.Свойство("Ключ") И ЗначениеЗаполнено(ПараметрыЗадания.Ключ) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяМетода", ПараметрыЗадания.ИмяМетода);
		Отбор.Вставить("Ключ", ПараметрыЗадания.Ключ);
		Отбор.Вставить("ОбластьДанных", Задание.ОбластьДанных);
		Отбор.Вставить("Идентификатор", Новый Массив);
		
		// Не учитывать само изменяемое.
		ОписаниеОтбора = Новый Структура;
		ОписаниеОтбора.Вставить("ВидСравнения", ВидСравнения.НеРавно);
		ОписаниеОтбора.Вставить("Значение", Идентификатор);
		
		Отбор.Идентификатор.Добавить(ОписаниеОтбора);
		
		Если ПолучитьЗадания(Отбор).Количество() > 0 Тогда
			ВызватьИсключение ПолучитьТекстИсключенияДублированиеЗаданийСОдинаковымКлючом();
		КонецЕсли;
	КонецЕсли;
	
	ЗапланированныйМоментЗапуска = Неопределено;
	Если ПараметрыЗадания.Свойство("ЗапланированныйМоментЗапуска", ЗапланированныйМоментЗапуска)
			И ЗначениеЗаполнено(ПараметрыЗадания.ЗапланированныйМоментЗапуска) Тогда
		
		ЗапланированныйМоментЗапуска = УниверсальноеВремя(ЗапланированныйМоментЗапуска);
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ЗапланированныйМоментЗапуска);
		
		УказанМоментЗапуска = Истина;
	Иначе
		УказанМоментЗапуска = Ложь;
	КонецЕсли;
	
	// Типы сохраняемые в хранилище значения
	Если ПараметрыЗадания.Свойство("Параметры") Тогда
		ПараметрыЗадания.Вставить("Параметры", Новый ХранилищеЗначения(ПараметрыЗадания.Параметры));
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Расписание")
		И ПараметрыЗадания.Расписание <> Неопределено Тогда
		
		ПараметрыЗадания.Вставить("Расписание", Новый ХранилищеЗначения(ПараметрыЗадания.Расписание));
	КонецЕсли;
	
	// Перепланирование задания с расписанием
	Если НЕ ПараметрыЗадания.Свойство("ЗапланированныйМоментЗапуска", ЗапланированныйМоментЗапуска)
		И ПараметрыЗадания.Свойство("Расписание") Тогда
		
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ЗапланированныйМоментЗапуска);
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Идентификатор.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Идентификатор);
		Блокировка.Заблокировать();
		
		// Формирование записи задания
		
		Если Не Общий.СсылкаСуществует(Идентификатор) Тогда
			ШаблонСообщения = НСтр("ru = 'Задание с идентификатором %1 к изменению не найдено'");
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", Идентификатор);
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		Задание = Идентификатор.ПолучитьОбъект();
		
		Для каждого ОписаниеПараметра Из ОчередьЗаданийСлужебный.ПараметрыЗаданийОчереди() Цикл
			Если ПараметрыЗадания.Свойство(ОписаниеПараметра.Имя) Тогда
				Задание[ОписаниеПараметра.Поле] = ПараметрыЗадания[ОписаниеПараметра.Имя];
			КонецЕсли;
		КонецЦикла;
		
		Если Задание.Использование
			И (УказанМоментЗапуска 
			ИЛИ НЕ ПараметрыЗадания.Свойство("Расписание")
			ИЛИ ПараметрыЗадания.Расписание = Неопределено) Тогда
				
			Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Запланировано;
		Иначе
			Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.НеЗапланировано;
		КонецЕсли;
		
		Если ОбязательноИзменитьСостояние Тогда
			Задание.СостояниеЗадания = ПараметрыЗадания.СостояниеЗадания;
		КонецЕсли;
				
		Задание.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							
		ЗаписьЖурналаРегистрации(
			"Процедура ИзменитьЗадание(Идентификатор, ПараметрыЗадания) Экспорт",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ОчередьЗаданий,
			,
			Комментарий);
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если НЕ ТранзакцияАктивна() Тогда // Иначе блокировка будет снята при завершении транзакции
		РазблокироватьДанныеДляРедактирования(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст ошибки при попытке выполнить одновременно два задания с одним ключом.
//
// Возвращаемое значение:
// Строка.
//
Функция ПолучитьТекстИсключенияДублированиеЗаданийСОдинаковымКлючом() Экспорт
	
	Возврат НСтр("ru = 'Дублирование заданий с одинаковым значения поля ''Ключ'' не допустимо.'");
	
КонецФункции

Процедура ПроверитьЗначениеНаСоответствиеОписаниюПараметра(Знач Значение, Знач ОписаниеПараметра)
	
	Если НЕ ОписаниеПараметра.Тип.СодержитТип(ТипЗнч(Значение)) Тогда
		ШаблонСообщения = НСтр("ru = 'Передан недопустимый тип %1 параметра задания %2'");
		ТекстСообщения = СтрЗаменить(СтрЗаменить(ШаблонСообщения, "%1",
			ТипЗнч(Значение)), "%2", ОписаниеПараметра.Имя);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция ФорматИндекса(Знач Индекс)
	
	Возврат Формат(Индекс, "ЧН=0; ЧГ=")
	
КонецФункции

Функция ОписаниеЗаданияПоИдентификатору(Знач Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) ИЛИ Не Общий.СсылкаСуществует(Идентификатор) Тогда
		ШаблонСообщения = НСтр("ru = 'Передано недопустимое значение %1 параметра задания Идентификатор. Проверьте корректность настройки расписания запуска'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", Идентификатор.УникальныйИдентификатор());
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Задания = ПолучитьЗадания(Новый Структура("Идентификатор", Идентификатор));
	Если Задания.Количество() = 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Задание очереди с идентификатором %1 не найдено'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", Идентификатор.УникальныйИдентификатор());
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Возврат Задания[0];
	
КонецФункции

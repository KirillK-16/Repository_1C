// Отправляет SMS через веб-сервис Билайн, возвращает идентификатор сообщения.
//
// Параметры:
//  НомераПолучателей - Массив - номера получателей в формате +7ХХХХХХХХХХ;
//  Текст 			  - Строка - текст сообщения, длиной не более 480 символов;
//  ИмяОтправителя 	  - Строка - имя отправителя, которое будет отображаться вместо номера входящей смс;
//  Логин			  - Строка - логин пользователя услуги отправки sms;
//  Пароль			  - Строка - пароль пользователя услуги отправки sms.
//
// Возвращаемое значение:
//  Структура: ПараметрыОтправки - Массив структур: НомерОтправителя
//                                                  ИдентификаторСообщения
//             ОписаниеОшибки    - Строка - пользовательское представление ошибки, если пустая строка,
//                                          то ошибки нет.
Функция ОтправитьSMS(НомераПолучателей, Текст, ИмяОтправителя, Логин, Пароль) Экспорт
	
	Результат = Новый Структура("ПараметрыОтправки,ОписаниеОшибки", Новый Массив, "");
	
	// подготовка строки получателей
	СтрокаПолучателей = МассивПолучателейСтрокой(НомераПолучателей);
	Если ПустаяСтрока(СтрокаПолучателей) Или ПустаяСтрока(Текст) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// подготовка текста запроса
	СтрокаЗапроса =    "user=" + URLEncode(Логин)
					+ "&pass=" + URLEncode(Пароль)
					+ "&gzip=none" 
					+ "&action=post_sms"
					+ "&message=" + URLEncode(Текст)
					+ "&target=" + URLEncode(СтрокаПолучателей)
					+ "&sender=" + URLEncode(ИмяОтправителя);

	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла("txt");
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла("xml");
	
	// формирование файла с запросом
	ФайлЗапроса = Новый ЗаписьТекста(ИмяФайлаЗапроса, КодировкаТекста.ANSI);
	ФайлЗапроса.Записать(СтрокаЗапроса);
	ФайлЗапроса.Закрыть();
	
	// определение размера файла с запросом
    ФайлЗапроса = Новый Файл(ИмяФайлаЗапроса);
    РазмерФайлаЗапроса = XMLСтрока(ФайлЗапроса.Размер());
	
	// формирование заголовков
	Заголовок = Новый Соответствие;
	Заголовок.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовок.Вставить("Content-Length", РазмерФайлаЗапроса);

	// отправка запроса и получение ответа
	Попытка
		Соединение = Новый HTTPСоединение("beeline.amega-inform.ru",,,,,Ложь);
		Соединение.ОтправитьДляОбработки(ИмяФайлаЗапроса, "/sendsms/", ИмяФайлаОтвета, Заголовок);
	Исключение
		Событие = НСтр("ru = 'Отправка SMS'", Метаданные.ОсновнойЯзык.КодЯзыка);
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки 
								 + НСтр("ru = 'Соединение не установлено'") + ": "
								 + КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
								 + Символы.ПС;
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаЗапроса);
	
	// получение идентификаторов сообщений
	СтруктураОтвета = Новый ЧтениеXML;
	СтруктураОтвета.ОткрытьФайл(ИмяФайлаОтвета);
	ОписаниеОшибки = "";
	ЭтоРазделОшибок = Ложь;
	Пока СтруктураОтвета.Прочитать() Цикл 
		Если СтруктураОтвета.Имя = "errors" Тогда			
			ЭтоРазделОшибок = (СтруктураОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента);	
		КонецЕсли;
		
		Если ЭтоРазделОшибок И СтруктураОтвета.ТипУзла = ТипУзлаXML.Текст Тогда
			ОписаниеОшибки = ОписаниеОшибки + СтруктураОтвета.Значение + Символы.ПС;			
		КонецЕсли;	
		
	КонецЦикла;
	Результат.ОписаниеОшибки = СокрП(ОписаниеОшибки);
	СтруктураОтвета.Закрыть();
	УдалитьФайлы(ИмяФайлаОтвета);
	
	Возврат Результат;
	
КонецФункции

Функция МассивПолучателейСтрокой(Массив)
	Результат = "";
	Для Каждого Элемент Из Массив Цикл
		Номер = ФорматироватьНомер(Элемент);
		Если НЕ ПустаяСтрока(Номер) Тогда 
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + ",";
			КонецЕсли;
			Результат = Результат + Номер;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ФорматироватьНомер(Номер)
	Результат = "";
	ДопустимыеСимволы = "+1234567890";
	Для Позиция = 1 По СтрДлина(Номер) Цикл
		Символ = Сред(Номер,Позиция,1);
		Если СтрНайти(ДопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;	
КонецФункции

Функция СтатусДоставки(ИдентификаторСообщения, Логин, Пароль) Экспорт
	
КонецФункции

Функция URLEncode(Строка) Экспорт
	Результат = "";
	НаборСимволов = "0123456789ABCDEF";
	Для НомерСимвола = 1 По СтрДлина(Строка) Цикл
		КодСимвола = КодСимвола(Строка, НомерСимвола);
		Символ = Сред(Строка, НомерСимвола, 1);
		
		// пропускаем A..Z, a..z, 0..9
		Если СтрНайти("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", Символ) > 0 Тогда // символы -_.!~*\() кодируем как небезопасные  
			Результат = Результат + Символ;
			Продолжить;
		КонецЕсли;
		
		Если Символ = " " Тогда
			Результат = Результат + "+";
			Продолжить;
		КонецЕсли;
		
		Если КодСимвола <= 127 Тогда // 0x007F
			Результат = Результат + ПредставлениеБайта(КодСимвола);
		ИначеЕсли КодСимвола <= 2047 Тогда // 0x07FF 
			Результат = Результат 
					  + ПредставлениеБайта(
					  					   БинарныйМассивВЧисло(
																ВнутрПобитовоеИли(
																			 ЧислоВБинарныйМассив(192,8),
																			 ЧислоВБинарныйМассив(Цел(КодСимвола / Pow(2,6)),8)
																			)
															   )
										  ); // 0xc0 | (ch >> 6)
			Результат = Результат 
					  + ПредставлениеБайта(
					  					   БинарныйМассивВЧисло(
										   						ВнутрПобитовоеИли(
																			 ЧислоВБинарныйМассив(128,8),
																			 ВнутрПобитовоеИ(
																			 			ЧислоВБинарныйМассив(КодСимвола,8),
																						ЧислоВБинарныйМассив(63,8)
																						)
																			)
																)
										  );  //0x80 | (ch & 0x3F)
		Иначе  // 0x7FF < ch <= 0xFFFF
			Результат = Результат 
					  + ПредставлениеБайта	(
					  						 БинарныйМассивВЧисло(
																  ВнутрПобитовоеИли(
																			   ЧислоВБинарныйМассив(224,8), 
																			   ЧислоВБинарныйМассив(Цел(КодСимвола / Pow(2,12)),8)
																			  )
																 )
											); // 0xe0 | (ch >> 12)
											
			Результат = Результат 
					  + ПредставлениеБайта(
					  					   БинарныйМассивВЧисло(
										   						ВнутрПобитовоеИли(
																			 ЧислоВБинарныйМассив(128,8),
																			 ВнутрПобитовоеИ(
																			 			ЧислоВБинарныйМассив(Цел(КодСимвола / Pow(2,6)),8),
																						ЧислоВБинарныйМассив(63,8)
																						)
																			)
																)
										  );  //0x80 | ((ch >> 6) & 0x3F)
											
			Результат = Результат 
					  + ПредставлениеБайта(
					  					   БинарныйМассивВЧисло(
										   						ВнутрПобитовоеИли(
																			 ЧислоВБинарныйМассив(128,8),
																			 ВнутрПобитовоеИ(
																			 			ЧислоВБинарныйМассив(КодСимвола,8),
																						ЧислоВБинарныйМассив(63,8)
																						)
																			)
																)
										  );  //0x80 | (ch & 0x3F)
								
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПредставлениеБайта(Знач Байт)
	Результат = "";
	СтрокаСимволов = "0123456789ABCDEF";
	Для Счетчик = 1 По 2 Цикл
		Результат = Сред(СтрокаСимволов, Байт % 16 + 1, 1) + Результат;
		Байт = Цел(Байт / 16);
	КонецЦикла;
	Возврат "%" + Результат;
КонецФункции

Функция ЧислоВБинарныйМассив(Знач Число, Знач ВсегоРазрядов = 32)
	Результат = Новый Массив;
	ТекущийРазряд = 0;
	Пока ТекущийРазряд < ВсегоРазрядов Цикл
		ТекущийРазряд = ТекущийРазряд + 1;
		Результат.Добавить(Булево(Число % 2));
		Число = Цел(Число / 2);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция БинарныйМассивВЧисло(Массив)
	Результат = 0;
	Для НомерРазряда = -(Массив.Количество()-1) По 0 Цикл
		Результат = Результат * 2 + Число(Массив[-НомерРазряда]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ВнутрПобитовоеИ(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] И БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ВнутрПобитовоеИли(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] Или БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции





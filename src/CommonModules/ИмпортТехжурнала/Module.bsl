
Процедура ИмпортироватьТехЖурнал(Знач КонтрольнаяПроцедура, Знач КаталогТЖСетевой, Знач СобиратьИсключения, КаталогВременныхФайлов = "") Экспорт
	
    Замер = ВнутренниеЗамеры.НачатьЗамер("Импортировать ТехЖурнал");
	
	Сообщение = "ИмпортироватьТехЖурнал.Старт";
	Отладка.Информация(Сообщение);
	
	РабочийСервер = КонтрольнаяПроцедура.ОбъектКонтроля;
	
	Попытка
			
		Источник = Новый Структура("РабочийСервер, ПутьКЖурналам, КонтрольнаяПроцедура, СобиратьИсключения", 
			РабочийСервер, 
			КаталогТЖСетевой,
			КонтрольнаяПроцедура,
			СобиратьИсключения
		);
		ИмпортироватьЖурналИзИсточника(Источник, КаталогВременныхФайлов);
		УдалениеТЖ(Источник);
        
        ДопПараметры = Новый Соответствие;
        ДопПараметры.Вставить("Объект ЦКК", РабочийСервер.Наименование);
		ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отладка.Ошибка(ТекстОшибки);
        ДопПараметры = Новый Соответствие;
        ДопПараметры.Вставить("Объект ЦКК", РабочийСервер.Наименование);
        ВнутренниеЗамеры.УстановитьИмяКлючевойОперации(Замер, "Импортировать ТехЖурнал ошибка");
		ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
	КонецПопытки;
	
	Сообщение = "ИмпортироватьТехЖурнал.Завершение";
	Отладка.Информация(Сообщение);
	
КонецПроцедуры

// Копирует файлы в локальную папку для дальнейшего анализа
// Параметры:
//  Источник - Структура с полями
//   РабочийСервер - Справочник.ОбъектКонтроля
//   ПутьКЖурналам - сетевой путь к файлам
//
Функция КопироватьФайлыВЛокальнуюПапку(Знач Источник, Знач КаталогВременныхФайлов = "")
	
    Замер = ВнутренниеЗамеры.НачатьЗамер("Импортировать ТехЖурнал копирование файлов");
	
	РабочийСервер = Источник.РабочийСервер;
	КонтрольнаяПроцедура = Источник.КонтрольнаяПроцедура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФайлыЖурнала.Процесс,
		|	ФайлыЖурнала.Дата,
		|	ФайлыЖурнала.Размер,
		|	ФайлыЖурнала.Ссылка
		|ИЗ
		|	Справочник.ФайлыЖурнала КАК ФайлыЖурнала
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		ФайлыЖурнала.Процесс КАК Процесс,
		|		МАКСИМУМ(ФайлыЖурнала.Дата) КАК МаксДата
		|	ИЗ
		|		Справочник.ФайлыЖурнала КАК ФайлыЖурнала
		|	СГРУППИРОВАТЬ ПО
		|			ФайлыЖурнала.Процесс
		|	) КАК МаксДаты
		|ПО
		|	МаксДаты.Процесс = ФайлыЖурнала.Процесс
		|	И МаксДаты.МаксДата = ФайлыЖурнала.Дата
		|ГДЕ
		|	ФайлыЖурнала.Владелец = &КонтрольнаяПроцедура
		|";
		
	Запрос.УстановитьПараметр("КонтрольнаяПроцедура", КонтрольнаяПроцедура);
	ПоследниеФайлы = Запрос.Выполнить().Выгрузить();
	
	Если НЕ ЗначениеЗаполнено(КаталогВременныхФайлов) Тогда
		КаталогВременныхФайлов = Константы.КаталогВременныхФайлов.Получить();
	КонецЕсли;
	
	ЛокальнаяПапка = ОбщийКлиентСервер.РазобратьИмяКаталога(КаталогВременныхФайлов);
	Если Не ЗначениеЗаполнено(ЛокальнаяПапка) Тогда
		ЛокальнаяПапка = КаталогВременныхФайлов();
	КонецЕсли;
	
	ИмяФайлаШаблонБезРасширения = Формат(НачалоЧаса(ТекущаяДата() - 3600),"ДФ=yyMMddHH"); 
	ЛокальнаяПапка = ЛокальнаяПапка + ОбщийКлиентСервер.РазделительКаталоговОпределитьПоКаталогу(ЛокальнаяПапка) +
		"TJ" + РабочийСервер.УникальныйИдентификатор() + ИмяФайлаШаблонБезРасширения;
	УдалитьФайлы(ЛокальнаяПапка);
	СоздатьКаталог(ЛокальнаяПапка);
	
	Файлы = НайтиФайлы(Источник.ПутьКЖурналам, "*.log", Истина);
	Для Каждого Файл Из Файлы Цикл
        
        Если Файл.ИмяБезРасширения <> ИмяФайлаШаблонБезРасширения ИЛИ Файл.Размер() <= 3 Тогда
			Продолжить;
		КонецЕсли;
        
		ИмяПроцесса = Неопределено; 
		ДатаФайла = Неопределено;
		Попытка
			ПараметрыФайлаЖурнала(Файл, ИмяПроцесса, ДатаФайла);
		Исключение
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
			ЗаписьЖурналаРегистрации(
				"Функция КопироватьФайлыВЛокальнуюПапку(...).Точка1",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ИмпортТехжурнала,
				,
				Комментарий);
			
			Продолжить;
		КонецПопытки;
		
		ПоследнийФайл = ПоследниеФайлы.Найти(ИмяПроцесса, "Процесс");
		
		Если ПоследнийФайл <> Неопределено И 
			(ПоследнийФайл.Дата > ДатаФайла Или ПоследнийФайл.Дата = ДатаФайла И ПоследнийФайл.Размер = Файл.Размер())
		Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПроцессаМассив = СтрРазделить(ИмяПроцесса, "_");
		Подкаталог = ЛокальнаяПапка + "\" + Новый УникальныйИдентификатор() + "\" + ИмяПроцесса;
		Попытка
			
			СоздатьКаталог(Подкаталог);
			КопироватьФайл(Файл.ПолноеИмя, Подкаталог + "\" + Файл.Имя);
			
		Исключение
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
			ЗаписьЖурналаРегистрации(
				"Функция КопироватьФайлыВЛокальнуюПапку(...).Точка3",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ИмпортТехжурнала,
				,
				Комментарий);
				
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
    
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("Объект ЦКК", РабочийСервер.Наименование);
	ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
	
	Возврат ЛокальнаяПапка;
	
КонецФункции

Процедура ИмпортироватьЖурналИзИсточника(Знач Источник, Знач КаталогВременныхФайлов = "") Экспорт
	
	ЛокальнаяПапка = КопироватьФайлыВЛокальнуюПапку(Источник, КаталогВременныхФайлов);
	ФайлыЖурнала = Новый Массив;
	Попытка
		Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
		ТЖ = КипВнешнийКомпонент.ПолучитьТЖ();
		
		Папка = Новый Файл(ЛокальнаяПапка);
		ПрочитатьСобытияПроцесса(Папка, Источник, ТЖ, ФайлыЖурнала);
		
		УдалитьФайлы(ЛокальнаяПапка);
		
	Исключение
		УдалитьФайлы(ЛокальнаяПапка);
		
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			"Процедура ИмпортироватьЖурналИзИсточника(...) Экспорт",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ИмпортТехжурнала,
			,
			Комментарий);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПрочитатьСобытияПроцесса(Знач Папка, Знач Источник, Знач ТЖ, ФайлыЖурнала) Экспорт
	
    Замер = ВнутренниеЗамеры.НачатьЗамер("Импортировать ТехЖурнал обработка и запись");
	
	ТекущаяДата = ТекущаяДата();
	
	КонтрольнаяПроцедура = Источник.КонтрольнаяПроцедура;
	РабочийСервер = Источник.РабочийСервер;
	Кластер = РегистрыСведений.ПараметрыРабочихСерверов.Получить(Новый Структура(
		"ОбъектКонтроля", РабочийСервер
	))["Кластер"];
	
	ПоляВыборки = Новый Массив;
	ПоляВыборки.Добавить("АвтоматическиУдалятьЗаписиТЖ");
	ПоляВыборки.Добавить("СрокХраненияТЖ");
	
	ТекущаяДата = ТекущаяДата();
	
	ПараметрыКонтрольнойПроцедуры = Общий.ПараметрыКонтрольнойПроцедуры(
		РабочийСервер,
		КонтрольнаяПроцедура.Владелец.ИмяБизнесПроцесса,
		ПоляВыборки 
	);
	АвтоматическиУдалятьЗаписиТЖ = ПараметрыКонтрольнойПроцедуры["АвтоматическиУдалятьЗаписиТЖ"];
	Если АвтоматическиУдалятьЗаписиТЖ Тогда
		МинимальнаяДатаФайлов = ТекущаяДата - ПараметрыКонтрольнойПроцедуры["СрокХраненияТЖ"] * 3600;
	Иначе
		МинимальнаяДатаФайлов = Неопределено;
	КонецЕсли;
	
	ИнформационныеБазы = Новый Соответствие;
	
	ФайлыЖурналаВПапке = ФайлыЖурналаВПапке(Папка.ПолноеИмя);
	УдалитьЗаписиРегистра(ФайлыЖурналаВПапке, КонтрольнаяПроцедура);
	Для ТекПозиция = 1 По ФайлыЖурналаВПапке.Количество() Цикл
		ИндексСтроки = ТекПозиция - 1;
		ФайлыЖурналаВПапке[ИндексСтроки].ФайлЖурнала = СоздатьФайлЖурнала(ФайлыЖурналаВПапке, ИндексСтроки, КонтрольнаяПроцедура);
	КонецЦикла;
	
	Для Каждого ТекФайл Из ФайлыЖурналаВПапке Цикл
		Папка = Новый Файл(ТекФайл.Путь);
		Папка = Новый Файл(Папка.Путь);
		// Открыть технологический журнал
		ИменаКаталогов = Новый Массив;
		ИменаКаталогов.Добавить(Папка.ПолноеИмя);
		КипВнешнийКомпонент.ОткрытьТЖ(ТЖ, ИменаКаталогов, 10);
		Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
		
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ПараметрыЧтенияXML = Новый ПараметрыЧтенияXML(,,,,,,,,,Истина);
			
			ТипОбъектаСобытия = ФабрикаXDTO.Тип("http://v8.1c.ru/v8/tech-log-instance",
			"Event");
			
			ФайлыЖурналаВПапке.Сортировать("Дата");
			ПозицияВПапке = -1;
			
			ПоследнееИсключение = Неопределено;
			
			// Получить события технологического журнала
			Пока Не КипВнешнийКомпонент.КонецТЖ(ТЖ) Цикл
				
				НачатьТранзакцию();
				Попытка
					Результат = СтрЗаменить(КипВнешнийКомпонент.ПрочитатьТЖ(ТЖ), Символы.ВК + Символы.ПС, Символы.ПС);
					
					ЗаписиЖурнала = ТаблицаЗаписейЖурнала();
					
					Если Результат = Неопределено Тогда
						Прервать;
					КонецЕсли;
					
					ЧтениеXML.УстановитьСтроку(Результат, ПараметрыЧтенияXML);
					ЧтениеXML.ПерейтиКСодержимому(); // Прейти к <log...>
					ЧтениеXML.Прочитать();           // Пропустить <log...>
					
					// Чтение событий
					Пока Истина Цикл
						
						Если ЧтениеXML.ЛокальноеИмя = "log" Тогда
							Прервать;
						КонецЕсли;
						
						Попытка
							Событие = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаСобытия);
						Исключение
							Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
														
							ЗаписьЖурналаРегистрации(
								"Процедура ПрочитатьСобытияПроцесса(Знач Папка, Знач Источник, Знач ТЖ, ФайлыЖурнала) Экспорт",
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.ОбщиеМодули.ИмпортТехжурнала,
								,
								Комментарий);
							
							Прервать;
						КонецПопытки;
						
						Если Событие = Неопределено Тогда
							Прервать;
						КонецЕсли;
						
						ФайлЖурнала = ТекФайл.ФайлЖурнала;
						
						Если МинимальнаяДатаФайлов <> Неопределено И ФайлЖурнала.Дата < МинимальнаяДатаФайлов Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаЖурнала = ЗаписиЖурнала.Добавить();
						СтрокаЖурнала.ФайлЖурнала = ФайлЖурнала;
						
						СтрокаЖурнала.Кластер = Кластер;
						СтрокаЖурнала.РабочийСервер = РабочийСервер;
						СтрокаЖурнала.КонтрольнаяПроцедура = КонтрольнаяПроцедура;
						СтрокаЖурнала.УникальныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
						
						ИмяСобытия = ВРег(Событие.name);
						Если ИмяСобытия = "SCALL" Тогда
							СтрокаЖурнала.Тип = Перечисления.СобытияТЖ.ВызовКластера1С;
						ИначеЕсли ИмяСобытия = "EXCP" ИЛИ ИмяСобытия = "EXCPCNTX" Тогда
							СтрокаЖурнала.Тип = Перечисления.СобытияТЖ.ОшибкаВыполнения;
						КонецЕсли;
						
						СтрокаЖурнала.ТипВСтроку = Событие.name;
						СтрокаЖурнала.Дата = Событие.date;
						
						Если СтрДлина(Событие.ms) = 6 Тогда
							
							ЧислоМикросекунд = Число(Событие.ms);
							ПродолжительностьВМикросекундах = Событие.len;
						Иначе
							
							ЧислоМикросекунд = Число(Событие.ms) * 100;
							ПродолжительностьВМикросекундах = Событие.len * 100;
						КонецЕсли;
						
						СтрокаЖурнала.ДробныеСекунды = ЧислоМикросекунд;
						СтрокаЖурнала.Продолжительность = ПродолжительностьВМикросекундах;
						
						СтрокаЖурнала.МоментВремени = ОбщийКлиентСервер.ПреобразоватьДатуВСекунды(Событие.date) * 1000000 + ЧислоМикросекунд;
						ЭтоИсключение = Ложь;
						Если Событие.name = "EXCP" Тогда
							ПоследнееИсключение = СтрокаЖурнала;
							ЭтоИсключение = Истина;
						ИначеЕсли Событие.name = "EXCPCNTX" Тогда
							Если ПоследнееИсключение <> Неопределено Тогда
								СтрокаЖурнала.ГоловнаяЗапись = ПоследнееИсключение.УникальныйИдентификатор;
							КонецЕсли;
						КонецЕсли;
						
						Для Каждого Свойство Из Событие.prop Цикл
							Ключ = ВРег(Свойство.name);
							
							Если Ключ = "CONTEXT" Тогда
								ТекстКонтекста = Свойство.content;
								СтрокаЖурнала.Контекст = ТекстКонтекста;
								СтрокаЖурнала.КонтекстХэш = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, ТекстКонтекста);
								СтрокаЖурнала.ПоследняяСтрокаКонтекста = СтрПолучитьСтроку(
								ТекстКонтекста,
								СтрЧислоСтрок(ТекстКонтекста)
								);
							ИначеЕсли Ключ = "EXCEPTION" Тогда
								СтрокаЖурнала.КодИсключения = Свойство.content;
							ИначеЕсли Ключ = "DESCR" Тогда
								ТекстИсключения = Свойство.content;
								Если ЭтоИсключение Тогда
									// ТаймаутСУБД
									ТекстИсключенияАнализ = Врег(ТекстИсключения);
									ЭтоБлокировка = Истина;
									Если СтрЧислоВхождений(ТекстИсключенияАнализ, ВРег("Lock request time out period exceeded")) > 0 
										ИЛИ СтрЧислоВхождений(ТекстИсключенияАнализ, ВРег("native=1222")) > 0 
										Тогда
										
										СтрокаЖурнала.ВидБлокировки = Перечисления.ВидыБлокировок.ТаймаутСУБД;
										
										// Таймаут1С
									ИначеЕсли СтрЧислоВхождений(ТекстИсключенияАнализ, ВРег("Превышено максимальное время ожидания предоставления блокировки")) > 0 Тогда
										СтрокаЖурнала.ВидБлокировки = Перечисления.ВидыБлокировок.Таймаут1С;
										
										// ВзаимоблокировкаСУБД
									ИначеЕсли СтрЧислоВхождений(ТекстИсключенияАнализ, ВРег("was deadlocked")) > 0 
										ИЛИ СтрЧислоВхождений(ТекстИсключенияАнализ, ВРег("взаимоблокировки")) > 0 Тогда
										
										СтрокаЖурнала.ВидБлокировки = Перечисления.ВидыБлокировок.ВзаимоблокировкаСУБД;
										
										// Взаимоблокировка1С
									ИначеЕсли СтрЧислоВхождений(ТекстИсключенияАнализ, ВРег("неустранимый конфликт")) > 0 Тогда
										СтрокаЖурнала.ВидБлокировки = Перечисления.ВидыБлокировок.Взаимоблокировка1С;
									Иначе
										ЭтоБлокировка = Ложь;
									КонецЕсли;
									
									Если ЭтоБлокировка Тогда
										СтрокаЖурнала.Тип = Перечисления.СобытияТЖ.ОшибкаБлокировки;
									КонецЕсли;
									
								КонецЕсли;
								
								СтрокаЖурнала.ПоследняяСтрокаТекстаИсключения = СтрПолучитьСтроку(
								ТекстИсключения,
								СтрЧислоСтрок(ТекстИсключения)
								);
								СтрокаЖурнала.ТекстИсключения = ТекстИсключения;
								СтрокаЖурнала.ТекстИсключенияХэш = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, ТекстИсключения);
							ИначеЕсли Ключ = "T:APPLICATIONNAME" Тогда
								СтрокаЖурнала.КлиентскоеПриложение = Свойство.content;
							ИначеЕсли Ключ = "P:PROCESSNAME" Или Ключ = "IB" Тогда
								
								ИмяИнформационнойБазы = Свойство.content;
								СтрокаЖурнала.ИнформационнаяБазаВСтроку = ИмяИнформационнойБазы;
								СсылкаНаБазу = ИнформационныеБазы[ИмяИнформационнойБазы];
								Если СсылкаНаБазу = Неопределено Тогда
									Запрос = Новый Запрос;
									Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
									|	ПараметрыИнформационныхБаз.ОбъектКонтроля
									|ИЗ
									|	РегистрСведений.ПараметрыИнформационныхБаз КАК ПараметрыИнформационныхБаз
									|ГДЕ
									|	ПараметрыИнформационныхБаз.ИмяБазыВКластере = &ИмяБазыВКластере";
									Запрос.УстановитьПараметр("ИмяБазыВКластере", ИмяИнформационнойБазы);
									
									ВыборкаПараметров = Запрос.Выполнить().Выбрать();
									Если ВыборкаПараметров.Следующий() Тогда
										СсылкаНаБазу = ВыборкаПараметров.ОбъектКонтроля;
									Иначе
										СсылкаНаБазу = Справочники.ОбъектыКонтроля.ПустаяСсылка();
									КонецЕсли;
									ИнформационныеБазы.Вставить(ИмяИнформационнойБазы, СсылкаНаБазу);
								КонецЕсли;
								СтрокаЖурнала.ИнформационнаяБаза = СсылкаНаБазу;
								
							ИначеЕсли Ключ = "SESSIONID" Или Ключ = "NMB" Тогда
								СтрокаЖурнала.НомерСеанса = Свойство.content;
							ИначеЕсли Ключ = "T:CONNECTID" Тогда
								СтрокаЖурнала.ИдентификаторСоединения = Свойство.content;
							ИначеЕсли Ключ = "T:CLIENTID" Тогда
								СтрокаЖурнала.ИдентификаторTCPСоединения = Свойство.content;
							ИначеЕсли Ключ = "STATUS" Тогда
								СтрокаЖурнала.СтатусHttp = Свойство.content;
							ИначеЕсли Ключ = "HEADERS" Тогда
								СтрокаЖурнала.ЗаголовкиHttp = Свойство.content;
								СтрокаЖурнала.УникальныйИдентификаторСеанса = ПолучитьИдентификаторСеансаИзCookie(Свойство.content);
							ИначеЕсли Ключ = "FUNC" Тогда
								СтрокаЖурнала.Действие = Свойство.content;
							ИначеЕсли Ключ = "ID" Тогда
								СтрокаЖурнала.УникальныйИдентификаторСеанса = СтрЗаменить(Свойство.content, "-", "");
							ИначеЕсли Ключ = "INTERFACE" Тогда
								СтрокаЖурнала.Интерфейс = Свойство.content;
							ИначеЕсли Ключ = "METHOD" Тогда
								СтрокаЖурнала.Метод = Свойство.content;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
					Если Источник.СобиратьИсключения Тогда
						ИмпортТехжурналаИсключения.СобратьИсключения(ЗаписиЖурнала);
					КонецЕсли;
					
					Если ЗаписиЖурнала.Количество() > 0 Тогда
						
						Набор = РегистрыСведений.ТехнологическийЖурнал.СоздатьНаборЗаписей();
						Набор.Загрузить(ЗаписиЖурнала);
						Набор.Записать(Ложь);
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
					ЗаписьЖурналаРегистрации(
					"Процедура ПрочитатьСобытияПроцесса(Знач Папка, Знач Источник, Знач ТЖ, ФайлыЖурнала) Экспорт",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.ОбщиеМодули.ИмпортТехжурнала,
					,
					Комментарий);
					
					ВызватьИсключение;
				КонецПопытки;
			КонецЦикла;
			
			ЧтениеXML.Закрыть();
			КипВнешнийКомпонент.ЗакрытьТЖ(ТЖ);
				
		Исключение
			КипВнешнийКомпонент.ЗакрытьТЖ(ТЖ);
			
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
			"Процедура ПрочитатьСобытияПроцесса(Знач Папка, Знач Источник, Знач ТЖ, ФайлыЖурнала) Экспорт",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ИмпортТехжурнала,
			,
			Комментарий);
			
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
    
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("Объект ЦКК", РабочийСервер.Наименование);
	ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
    
КонецПроцедуры

Функция ПолучитьИдентификаторСеансаИзCookie(Знач ЗаголовкиHTTP)
	
	НачалоCookie = СтрНайти(ЗаголовкиHTTP, "vrs_session=");
	Если НачалоCookie = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат СтрЗаменить(Сред(ЗаголовкиHTTP, НачалоCookie + СтрДлина("vrs_session="), 36), "-", "");
		
КонецФункции

Функция ТаблицаЗаписейЖурнала()
	
	ЗаписиЖурнала = Новый ТаблицаЗначений;
	ЗаписиЖурнала.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(32, ДопустимаяДлина.Фиксированная)));
	ЗаписиЖурнала.Колонки.Добавить("ФайлЖурнала", Новый ОписаниеТипов("СправочникСсылка.ФайлыЖурнала"));
	ЗаписиЖурнала.Колонки.Добавить("Кластер", Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля"));
	ЗаписиЖурнала.Колонки.Добавить("РабочийСервер", Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля"));
	ЗаписиЖурнала.Колонки.Добавить("КонтрольнаяПроцедура", Новый ОписаниеТипов("СправочникСсылка.КонтрольныеПроцедуры"));
	ЗаписиЖурнала.Колонки.Добавить("ВидБлокировки", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыБлокировок"));
	
	ЗаписиЖурнала.Колонки.Добавить("ИсключительнаяСитуация", Новый ОписаниеТипов("СправочникСсылка.ИсключительныеСитуации"));	
	ЗаписиЖурнала.Колонки.Добавить("МоментВремени", Новый ОписаниеТипов("Число"));
	
	ЗаписиЖурнала.Колонки.Добавить("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияТЖ"));
	ЗаписиЖурнала.Колонки.Добавить("ТипВСтроку", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ЗаписиЖурнала.Колонки.Добавить("Контекст", Новый ОписаниеТипов("Строка"));
	ЗаписиЖурнала.Колонки.Добавить("КонтекстХэш", Новый ОписаниеТипов("Число"));
	ЗаписиЖурнала.Колонки.Добавить("КодИсключения", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ЗаписиЖурнала.Колонки.Добавить("ТекстИсключения", Новый ОписаниеТипов("Строка"));
	ЗаписиЖурнала.Колонки.Добавить("ТекстИсключенияХэш", Новый ОписаниеТипов("Число"));
	ЗаписиЖурнала.Колонки.Добавить("ПоследняяСтрокаТекстаИсключения", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(256)));
	ЗаписиЖурнала.Колонки.Добавить("ПоследняяСтрокаКонтекста", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(256)));

	ЗаписиЖурнала.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ЗаписиЖурнала.Колонки.Добавить("ДробныеСекунды", Новый ОписаниеТипов("Число"));
	ЗаписиЖурнала.Колонки.Добавить("Продолжительность", Новый ОписаниеТипов("Число"));
	
	ЗаписиЖурнала.Колонки.Добавить("КлиентскоеПриложение", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(80)));
	ЗаписиЖурнала.Колонки.Добавить("ИнформационнаяБазаВСтроку", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(60)));
	ЗаписиЖурнала.Колонки.Добавить("ИнформационнаяБаза", Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля"));
	ЗаписиЖурнала.Колонки.Добавить("НомерСеанса", Новый ОписаниеТипов("Число"));
	ЗаписиЖурнала.Колонки.Добавить("ИдентификаторСоединения", Новый ОписаниеТипов("Число"));
	ЗаписиЖурнала.Колонки.Добавить("ИдентификаторTCPСоединения", Новый ОписаниеТипов("Число"));
	ЗаписиЖурнала.Колонки.Добавить("СтатусHttp", Новый ОписаниеТипов("Число"));
	ЗаписиЖурнала.Колонки.Добавить("ЗаголовкиHttp", Новый ОписаниеТипов("Строка"));
	ЗаписиЖурнала.Колонки.Добавить("УникальныйИдентификаторСеанса", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(32)));
	ЗаписиЖурнала.Колонки.Добавить("Действие", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(30)));
	ЗаписиЖурнала.Колонки.Добавить("Интерфейс", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(40)));
	ЗаписиЖурнала.Колонки.Добавить("Метод", Новый ОписаниеТипов("Число"));
	
	ЗаписиЖурнала.Колонки.Добавить("Дубликат", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(32, ДопустимаяДлина.Фиксированная)));
	ЗаписиЖурнала.Колонки.Добавить("ГоловнаяЗапись", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(32)));
	
	Возврат ЗаписиЖурнала;
	
КонецФункции

Функция СоздатьФайлЖурнала(Знач ФайлыЖурналаВПапке, Знач Позиция, Знач Источник)
	Наименование = ФайлыЖурналаВПапке[Позиция].Процесс + " - " + Формат(ФайлыЖурналаВПапке[Позиция].Дата, "ДФ='yyyy-MM-dd HH:mm:ss'");
	
	Ссылка = Справочники.ФайлыЖурнала.НайтиПоНаименованию(Наименование);
	Если НЕ ЗначениеЗаполнено(Ссылка) = Неопределено Тогда
		ФайлЖурнала = Справочники.ФайлыЖурнала.СоздатьЭлемент();
		ФайлЖурнала.Владелец = Источник;
		ФайлЖурнала.Наименование = Наименование;
		ФайлЖурнала.Процесс = ФайлыЖурналаВПапке[Позиция].Процесс;
		ФайлЖурнала.Дата = ФайлыЖурналаВПапке[Позиция].Дата;
		ФайлЖурнала.Размер = ФайлыЖурналаВПапке[Позиция].Размер;
		ФайлЖурнала.Записать();
		
		Ссылка = ФайлЖурнала.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ФайлыЖурналаВПапке(Знач Путь)
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Процесс",  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаФайлов.Колонки.Добавить("Дата",  Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаФайлов.Колонки.Добавить("Размер",  Новый ОписаниеТипов("Число"));
	ТаблицаФайлов.Колонки.Добавить("Путь",  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(300)));
	ТаблицаФайлов.Колонки.Добавить("ФайлЖурнала", Новый ОписаниеТипов("СправочникСсылка.ФайлыЖурнала"));
	
	Журналы = НайтиФайлы(путь, "*.log", Истина);
	Для Каждого Журнал Из Журналы Цикл

		ИмяПроцесса = Неопределено; 
		ДатаФайла = Неопределено;
		Попытка
			ПараметрыФайлаЖурнала(Журнал, ИмяПроцесса, ДатаФайла);
		Исключение
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				"Функция ФайлыЖурналаВПапке(Знач Путь)",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ИмпортТехжурнала,
				,
				Комментарий);
				
			Продолжить;
		КонецПопытки;
		
		Строка = ТаблицаФайлов.Добавить();
		Строка.Процесс = ИмяПроцесса;
		Строка.Дата = ДатаФайла;
		Строка.Размер = Журнал.Размер();
		Строка.Путь = Журнал.Путь;
		
	КонецЦикла;
	
	Возврат ТаблицаФайлов;
	
КонецФункции

Процедура УдалитьЗаписиРегистра(Знач ТаблицаФайлов, Знач КонтрольнаяПроцедура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НовыеФайлы.Процесс,
		|	НовыеФайлы.Дата
		|ПОМЕСТИТЬ НовыеФайлы
		|ИЗ
		|	&НовыеФайлы КАК НовыеФайлы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыЖурнала.Ссылка КАК Ссылка
		|ИЗ
		|	НовыеФайлы КАК НовыеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФайлыЖурнала КАК ФайлыЖурнала
		|		ПО НовыеФайлы.Процесс = ФайлыЖурнала.Процесс
		|			И НовыеФайлы.Дата = ФайлыЖурнала.Дата
		|ГДЕ
		|	ФайлыЖурнала.Владелец = &КонтрольнаяПроцедура";
	Запрос.УстановитьПараметр("КонтрольнаяПроцедура", КонтрольнаяПроцедура);
	Запрос.УстановитьПараметр("НовыеФайлы", ТаблицаФайлов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		УдалениеОбъекта = Новый УдалениеОбъекта(Выборка.Ссылка);
		УдалениеОбъекта.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПараметрыФайлаЖурнала(Знач Файл, ИмяПроцесса, ДатаФайла)
	
	ИмяФайла = Файл.ИмяБезРасширения;
	ДатаФайла = Дата("20" + Сред(ИмяФайла, 1, 2), 
		Сред(ИмяФайла, 3, 2),
		Сред(ИмяФайла, 5, 2),
		Сред(ИмяФайла, 7, 2),
		0, 0);

	ДлинаСтроки = СтрДлина(Файл.Путь);
	Позиция = ДлинаСтроки - 1;
	Пока Позиция > 0 Цикл
		
		Если Сред(Файл.Путь, Позиция, 1) = "\" Тогда
			ИмяПроцесса = Сред(Файл.Путь, Позиция + 1, ДлинаСтроки - Позиция - 1);
			Возврат;
		КонецЕсли;
		
		Позиция = Позиция - 1;
		
	КонецЦикла;
	
	ВызватьИсключение "Не найдена папка файла в имени";
	
КонецПроцедуры

// Задание проходит по всем зарегистрированным рабочим серверам
// 
Процедура УдалениеТЖ(Источник) Экспорт
	
	Сообщение = "Удаление записей технологического журнала.Старт";
	
	Отладка.Информация(Сообщение);
	
	ТекущаяДата = ТекущаяДата();
	
	КонтрольнаяПроцедура = Источник.КонтрольнаяПроцедура;
	РабочийСервер = Источник.РабочийСервер;
	
	ПоляВыборки = Новый Массив;
	ПоляВыборки.Добавить("АвтоматическиУдалятьЗаписиТЖ");
	ПоляВыборки.Добавить("СрокХраненияТЖ");
	
	ПараметрыКонтрольнойПроцедуры = Общий.ПараметрыКонтрольнойПроцедуры(
		РабочийСервер,
		КонтрольнаяПроцедура.Владелец.ИмяБизнесПроцесса,
		ПоляВыборки 
	);
	АвтоматическиУдалятьЗаписиТЖ = ПараметрыКонтрольнойПроцедуры["АвтоматическиУдалятьЗаписиТЖ"];
	Если АвтоматическиУдалятьЗаписиТЖ Тогда
		МинимальнаяДатаФайлов = ТекущаяДата - ПараметрыКонтрольнойПроцедуры["СрокХраненияТЖ"] * 3600;
		
		ЗапросТекст = "ВЫБРАТЬ Различные
		|	ТехнологическийЖурнал.ФайлЖурнала
		|ИЗ
		|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
		|ГДЕ
		|	ТехнологическийЖурнал.КонтрольнаяПроцедура = &КонтрольнаяПроцедура
		|	И ТехнологическийЖурнал.Дата < &Дата";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ЗапросТекст;
		Запрос.УстановитьПараметр("КонтрольнаяПроцедура", КонтрольнаяПроцедура);
		Запрос.УстановитьПараметр("Дата", МинимальнаяДатаФайлов);
		
		ВыборкаФайлов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаФайлов.Следующий() Цикл
			ФайлСсылка = ВыборкаФайлов.ФайлЖурнала;
			Попытка
				ФайлСсылка.ПолучитьОбъект().Удалить();
			Исключение
				Сообщение = "Ошибка удаления файла технологического журнала " + ФайлСсылка + ": " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Отладка.Ошибка(Сообщение);
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	Сообщение = "Удаление записей технологического журнала.Завершение";
	Отладка.Информация(Сообщение);
	
КонецПроцедуры

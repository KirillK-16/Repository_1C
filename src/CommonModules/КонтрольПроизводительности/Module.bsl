
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьАнализ(КонтрольнаяПроцедура) Экспорт
    
    НавигационнаяСсылкаИсточника = Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(КонтрольнаяПроцедура), Строка(КонтрольнаяПроцедура));
                
    НастройкиСловарь = РегистрыСведений.НастройкиКонтрольПроизводительности.Получить(Новый Структура("КонтрольнаяПроцедура", КонтрольнаяПроцедура));
	КаталогФайловОценкиПроизводительности = ОбщийКлиентСервер.РазобратьИмяКаталога(НастройкиСловарь.КаталогФайловОценкиПроизводительности);
    ДатаАнализаUTC = УниверсальноеВремя(ТекущаяДата(), ЧасовойПоясСеанса());
		
	ИменаПустыхФайлов = Новый Массив;
	КлючевыеОперацииНовыеЗамеры = Новый Соответствие;
    
    // Тип инцидента "APDEX/НетКаталога"
    ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("APDEX/НетКаталога");
    APDEXНетКаталогаТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, "APDEX/НетКаталога", Перечисления.УровниИнцидентов.Ошибка);
    
    // Инцидент "Счетчик"
    ХешИнцидентаСчетчик = Справочники.Инциденты.ХешИнцидента("APDEX/НетКаталога" + Строка(КонтрольнаяПроцедура.УникальныйИдентификатор()));
    ИнцидентAPDEXНетКаталога = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидентаСчетчик, КонтрольнаяПроцедура.Наименование, Ложь);
            
    Если СтрНачинаетсяС(ВРЕГ(КаталогФайловОценкиПроизводительности), "FTP") Тогда
        ЭтоФТП = Истина;
        Попытка
            СтруктураАдреса = ОбщийКлиентСервер.СтруктураURI(КаталогФайловОценкиПроизводительности);
            Если СтруктураАдреса.Порт = Неопределено Тогда
                СтруктураАдреса.Порт = 21;
            КонецЕсли;
            фтпСоединение = Новый FTPСоединение(СтруктураАдреса.ИмяСервера,СтруктураАдреса.Порт,СтруктураАдреса.Логин,СтруктураАдреса.Пароль,,Истина);
            фтпСоединение.УстановитьТекущийКаталог(СтруктураАдреса.ПутьНаСервере);
            Файлы = фтпСоединение.НайтиФайлы("", "*.xml");
            
            ИнцидентыСервер.ЗакрытьИнцидент(APDEXНетКаталогаТипИнцидента, ИнцидентAPDEXНетКаталога, Истина);
            
        Исключение
            
            Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
            ДопПараметры = "ИБ = '" + КонтрольнаяПроцедура.ОбъектКонтроля + ".";
            ИнцидентыСервер.ОткрытьИнцидент(APDEXНетКаталогаТипИнцидента, ИнцидентAPDEXНетКаталога, ДопПараметры,,Сообщение,1,,,,,НавигационнаяСсылкаИсточника);
            
            Возврат;
            
        КонецПопытки;
    Иначе
        ЭтоФТП = Ложь;
        Каталог = Новый Файл(КаталогФайловОценкиПроизводительности);
        Если Каталог.Существует() Тогда
            ИнцидентыСервер.ЗакрытьИнцидент(APDEXНетКаталогаТипИнцидента, ИнцидентAPDEXНетКаталога, Истина);
            Файлы = НайтиФайлы(КаталогФайловОценкиПроизводительности, "*.xml");
        Иначе
            Сообщение = "Не найден каталог или нет прав доступа.";
            ДопПараметры = "ИБ = '" + КонтрольнаяПроцедура.ОбъектКонтроля + "'. Каталог = '" + КаталогФайловОценкиПроизводительности + "'.";
            ИнцидентыСервер.ОткрытьИнцидент(APDEXНетКаталогаТипИнцидента, ИнцидентAPDEXНетКаталога, ДопПараметры,,Сообщение,1,,,,,НавигационнаяСсылкаИсточника);
            Возврат;
        КонецЕсли;
    КонецЕсли;
       
    ПараметрыИнцидента = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольПроизводительности(КонтрольнаяПроцедура, Справочники.ТипыЗадачКонтрольПроизводительности.НетФайлов);
	Если Файлы.Количество() = 0 Тогда
	    ТекстПредупреждения = НСтр("ru = 'Не найдены файлы с замерами производительности.'");
		ИнцидентыСервер.ОткрытьИнцидент(
                ПараметрыИнцидента.НаименованиеТипаИнцидента,
                ПараметрыИнцидента.КодИнцидента,
                КонтрольнаяПроцедура.ОбъектКонтроля,
                ,
                ТекстПредупреждения,
                1,
                ,
                ,
                Перечисления.УровниИнцидентов.Предупреждение,
                ,НавигационнаяСсылкаИсточника);
            Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноЕстьПроблемы, ТекстПредупреждения);    
		Возврат;
    Иначе
        ИнцидентыСервер.ЗакрытьИнцидент(ПараметрыИнцидента.НаименованиеТипаИнцидента, ПараметрыИнцидента.КодИнцидента, Истина);     
	КонецЕсли;
    
    ФайлыПолноеИмя = Новый Массив;
    Если ЭтоФТП Тогда
        ВременныйКаталог = ПолучитьИмяВременногоФайла("");
        СоздатьКаталог(ВременныйКаталог);
        Для Каждого ТекФайл Из Файлы Цикл
            фтпСоединение.Получить(ТекФайл.Имя, ВременныйКаталог + ПолучитьРазделительПутиСервера() + ТекФайл.Имя);
            ФайлыПолноеИмя.Добавить(ВременныйКаталог + ПолучитьРазделительПутиСервера() + ТекФайл.Имя);
            фтпСоединение.Удалить(ТекФайл.Имя);
        КонецЦикла;
    Иначе
        Для Каждого ТекФайл Из Файлы Цикл
            ФайлыПолноеИмя.Добавить(ТекФайл.ПолноеИмя);
        КонецЦикла;
    КонецЕсли;
    
    НетПроблем = Истина;
	
	ТекстыПоручений = Новый Соответствие;
	
	МаксимальныеЗначенияАпдекса = Новый Соответствие;
	
	РегКО = РегистрыСведений.ОценкаПроизводительностиКлючевыеОперации;
	ИБ = КонтрольнаяПроцедура.ОбъектКонтроля;
	КлючевыеОперацииТекущийАпдекс = РегКО.КлючевыеОперацииИнформационнойБазы(ИБ);
	
	НовыеМаксимальныеЗначенияАпдекса = Новый Соответствие;
	НовыеМинимальныеЗначенияАпдекса = Новый Соответствие;
	ДинамикаApdex = Новый Соответствие;
	
	ТекущиеКлючевыеОперации = Новый Соответствие;
	ВыборкаКлючевыхОпераций = РегистрыСведений.ОценкаПроизводительностиКлючевыеОперации.Выбрать(
		Новый Структура("ИнформационнаяБаза", КонтрольнаяПроцедура.ОбъектКонтроля)
	);
	Пока ВыборкаКлючевыхОпераций.Следующий() Цикл
		ТекущиеКлючевыеОперации.Вставить(ВыборкаКлючевыхОпераций.УникальныйИдентификатор, Новый Структура(
			"Приоритет, ЦелевоеВремя",
			ВыборкаКлючевыхОпераций.Приоритет, ВыборкаКлючевыхОпераций.ЦелевоеВремя
		));	
	КонецЦикла;
    
    ДанныеФЗ = ЗагрузитьФайлы(ФайлыПолноеИмя, КонтрольнаяПроцедура, КлючевыеОперацииТекущийАпдекс);
	
	ФайлыСНевернымФорматом = ДанныеФЗ.ФайлыСНевернымФорматом;
	ФайлыСНевернымФорматомПолноеИмя = ДанныеФЗ.ФайлыСНевернымФорматомПолноеИмя;
	ФайлыНеУдалосьЗаписать = ДанныеФЗ.ФайлыНеУдалосьЗаписать;
	КлючевыеОперацииТекущийАпдекс = ДанныеФЗ.КлючевыеОперацииТекущийАпдекс;
	
	Для НомерФайла = 0 По ФайлыСНевернымФорматомПолноеИмя.Количество() - 1 Цикл
		ПолныйПутьФайла = ФайлыСНевернымФорматомПолноеИмя[НомерФайла];
		ВыбФайл = Новый Файл(ПолныйПутьФайла);
		Если ВыбФайл.Существует() Тогда
			ПолныйПутьНовыйФайл = СтрЗаменить(ПолныйПутьФайла, ".xml",".badxml");
			ПереместитьФайл(ПолныйПутьФайла, ПолныйПутьНовыйФайл);
			УдалитьФайлы(ПолныйПутьФайла);
		КонецЕсли;
	КонецЦикла;

	Если ФайлыСНевернымФорматомПолноеИмя.Количество() <> 0 Тогда
        ПараметрыИнцидента = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольПроизводительности(КонтрольнаяПроцедура, Справочники.ТипыЗадачКонтрольПроизводительности.НеверныйФорматФайлов);
		ТекстПредупреждения = НСтр("ru = 'Найдены файлы имеющие неверный формат.'");
		ИнцидентыСервер.ОткрытьИнцидент(
                ПараметрыИнцидента.НаименованиеТипаИнцидента,
                ПараметрыИнцидента.КодИнцидента,
                КонтрольнаяПроцедура.ОбъектКонтроля,
                ,
                ТекстПредупреждения,
                1,
                ,
                ,
                Перечисления.УровниИнцидентов.Предупреждение,
                ,НавигационнаяСсылкаИсточника);
        Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноЕстьПроблемы, ТекстПредупреждения);
    Иначе
        Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноПроблемНет);    
    КонецЕсли;
    
    Если ЭтоФТП Тогда
        УдалитьФайлы(ВременныйКаталог);
    КонецЕсли;
        
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗагрузитьФайлы(ФайлыПолноеИмя, КонтрольнаяПроцедура, КлючевыеОперацииТекущийАпдекс)
	
	НаименованияКлючевыхОпераций = Новый Соответствие;
	
	ФайлыСНевернымФорматом = Новый Массив;
	ФайлыСНевернымФорматомПолноеИмя = Новый Массив;
	ФайлыНеУдалосьЗаписать = Новый Массив;
	
	Для Каждого ФайлПолноеИмя Из ФайлыПолноеИмя Цикл
		ЗагрузитьФайлОценкиПроизводительности(
			ФайлПолноеИмя,
			КонтрольнаяПроцедура,
			КлючевыеОперацииТекущийАпдекс,
			НаименованияКлючевыхОпераций,
			ФайлыСНевернымФорматом,
			ФайлыСНевернымФорматомПолноеИмя,
			ФайлыНеУдалосьЗаписать);			
	КонецЦикла;
	
	ДанныеФЗ = Новый Структура;
	ДанныеФЗ.Вставить("ФайлыСНевернымФорматом", ФайлыСНевернымФорматом);
	ДанныеФЗ.Вставить("ФайлыСНевернымФорматомПолноеИмя", ФайлыСНевернымФорматомПолноеИмя);
	ДанныеФЗ.Вставить("ФайлыНеУдалосьЗаписать", ФайлыНеУдалосьЗаписать);
	ДанныеФЗ.Вставить("КлючевыеОперацииТекущийАпдекс", КлючевыеОперацииТекущийАпдекс);
	
	Возврат ДанныеФЗ;
	
КонецФункции

// Возвращает значение Apdex по 100 последним замерам
//
// Параметры:
//  Замеры - Массив
//  ЦелевоеВремя - Число
//
// Возвращаемое значение:
//  Число
//
Функция ЗначениеApdex(Замеры, ЦелевоеВремя, Период = 100) Экспорт
	Если Замеры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Apdex = 0;
	ЧислоЗамеров = ?(Замеры.Количество() > Период, Период, Замеры.Количество());
	
	ЧислоРассмотренныхЗамеров = 0;
	Пока ЧислоРассмотренныхЗамеров < ЧислоЗамеров Цикл
		ТекущийЗамер = Замеры[Замеры.Количество() - ЧислоРассмотренныхЗамеров - 1];
		Если ТекущийЗамер <= ЦелевоеВремя Тогда
			Apdex = Apdex + 1;
		ИначеЕсли ТекущийЗамер <= 4*ЦелевоеВремя Тогда	
			Apdex = Apdex + 0.5;
		КонецЕсли;	
		ЧислоРассмотренныхЗамеров = ЧислоРассмотренныхЗамеров + 1;
	КонецЦикла;	
	Возврат ?(ЧислоРассмотренныхЗамеров = 0, Неопределено, Apdex / ЧислоЗамеров);	
КонецФункции

Функция ИдентификаторОбщаяПроизводительность() Экспорт
	
	Возврат "ОбщаяПроизводительность";
	
КонецФункции

Процедура ВставитьФильтрыВЗапросПроизводительности(Запрос, ЗапросТекст, ОбъектКонтроля = Неопределено, КлючевыеОперации = Неопределено, ВыбранныеПользователи = Неопределено, ТипСписка = Неопределено) Экспорт
	// Фильтр по пользователям
	Если ВыбранныеПользователи <> Неопределено Тогда 
		Если ТипСписка = Перечисления.ТипыСпискаПользователей.ВсеКроме Тогда
			УсловиеНаПользователя = " И НЕ Замеры.Пользователь В(&Пользователи) ";
		Иначе
			УсловиеНаПользователя = " И Замеры.Пользователь В(&Пользователи) ";
		КонецЕсли;
		Запрос.УстановитьПараметр("Пользователи", ВыбранныеПользователи);
	Иначе
		УсловиеНаПользователя = "";
	КонецЕсли;
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%УсловиеНаПользователя", УсловиеНаПользователя);
	
	// Фильтр по информационной базе
	Если ОбъектКонтроля <> Неопределено Тогда
		Если ТипЗнч(ОбъектКонтроля) = Тип("СправочникСсылка.ОбъектыКонтроля") И НЕ ОбъектКонтроля.Пустая() Тогда
			УсловиеНаБазу = " Замеры.ОбъектКонтроля = &ОбъектКонтроля И ";
			Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектКонтроля);
		ИначеЕсли ТипЗнч(ОбъектКонтроля) = Тип("Массив") Тогда
			Если ОбъектКонтроля.Количество() = 1 Тогда
				УсловиеНаБазу = " Замеры.ОбъектКонтроля = &ОбъектКонтроля И ";
				Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектКонтроля[0]);
			Иначе
				УсловиеНаБазу = " Замеры.ОбъектКонтроля В (&ОбъектКонтроля) И ";
				Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектКонтроля);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		УсловиеНаБазу = "";
	КонецЕсли;
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%УсловиеНаБазу", УсловиеНаБазу);
	
	// Фильтр по ключевым операциям
	ИдентификаторОбщаяПроизводительность = ИдентификаторОбщаяПроизводительность();
	Если КлючевыеОперации = Неопределено 
		ИЛИ (КлючевыеОперации.Количество() = 1 И КлючевыеОперации[0] = ИдентификаторОбщаяПроизводительность)
	Тогда
		УсловиеНаКлючевыеОперации = "";
	Иначе
		УсловиеНаКлючевыеОперации = " И Замеры.ИдентификаторКлючевойОперации В (&ИдентификаторыКлючевыхОпераций) ";
		Запрос.УстановитьПараметр("ИдентификаторыКлючевыхОпераций", КлючевыеОперации);
	КонецЕсли;
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%УсловиеНаКлючевыеОперации", УсловиеНаКлючевыеОперации);
КонецПроцедуры

Функция ДинамикаApdex(ДатаНачала, ЧислоТочек, Шаг, Период, ОбъектКонтроля = Неопределено, КлючевыеОперации = Неопределено, ВыбранныеПользователи = Неопределено, ТипСписка = Неопределено, БратьЦелевоеВремяИзИБ = Истина) Экспорт
	
	Если ЧислоТочек <= 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗапросТекст = "
	|ВЫБРАТЬ 
	|	ВнутреннийПодзапрос.НомерШага,
	|	ВнутреннийПодзапрос.СуммаНормированныхЗамеров,
	|	ВнутреннийПодзапрос.КоличествоНормированныхЗамеров
	|ИЗ
	|(%ВнутренниеПодзапросы) КАК ВнутреннийПодзапрос
	|УПОРЯДОЧИТЬ ПО ВнутреннийПодзапрос.НомерШага";
	
	ШаблонПодзапроса = "ВЫБРАТЬ
	|	%НомерШага КАК НомерШага,
	|	СУММА(ВложенныйЗапрос%НомерШага.Значение) КАК СуммаНормированныхЗамеров,
	|	КОЛИЧЕСТВО(ВложенныйЗапрос%НомерШага.Значение) КАК КоличествоНормированныхЗамеров
	|ИЗ
	|(ВЫБРАТЬ ПЕРВЫЕ %Период 
	|	%НомерШага КАК НомерШага,
	|	ВЫБОР 
	|		КОГДА 
	|			Замеры.Значение <= КлючевыеОперации.ЦелевоеВремя%ВИБ
	|		ТОГДА 
	|			1
	|		КОГДА 
	|			Замеры.Значение <= 4*КлючевыеОперации.ЦелевоеВремя%ВИБ
	|		ТОГДА 
	|			0.5
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Значение,
	|	Замеры.ИдентификаторКлючевойОперации КАК ИдентификаторКлючевойОперации
	|ИЗ 
	|	РегистрСведений.ЗамерыПроизводительности Как Замеры
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОценкаПроизводительностиКлючевыеОперации КАК КлючевыеОперации
	|	ПО Замеры.ИдентификаторКлючевойОперации = КлючевыеОперации.УникальныйИдентификатор
	|        И Замеры.ОбъектКонтроля = КлючевыеОперации.ИнформационнаяБаза
	|ГДЕ
	|	%УсловиеНаБазу
	|	Замеры.ДатаЗамераUTC <= &ДатаНачала%НомерШага
	|	%УсловиеНаКлючевыеОперации
	|	%УсловиеНаПользователя
	|	
	|УПОРЯДОЧИТЬ ПО ДатаЗамераUTC УБЫВ) КАК ВложенныйЗапрос%НомерШага
	|
	| ";
	
	ВнутренниеПодзапросы = "";
	НомерШага = 0;
	Дата = ДатаНачала;
	Пока НомерШага < ЧислоТочек Цикл
		
		ШагВСтроку = Формат(НомерШага, "ЧГ='100,0';ЧН=");
		Подзапрос = СтрЗаменить(ШаблонПодзапроса, "%НомерШага", ШагВСтроку);
		Подзапрос = СтрЗаменить(Подзапрос, "%ВИБ", ?(БратьЦелевоеВремяИзИБ, "ВИБ", ""));
		
		ФорматПериода = Формат(Период, "ЧГ='100,0';ЧН=");
		Подзапрос = СтрЗаменить(Подзапрос, "%Период", ФорматПериода); 
		
		ВставитьФильтрыВЗапросПроизводительности(Запрос, Подзапрос, ОбъектКонтроля, КлючевыеОперации, ВыбранныеПользователи, ТипСписка);
		
		// Фильтр по дате
		Запрос.УстановитьПараметр("ДатаНачала" + ШагВСтроку, (Дата - Дата(1,1,1)) * 1000);
		
		Дата = Дата + Шаг;
		НомерШага = НомерШага + 1;
		
		ВнутренниеПодзапросы = ВнутренниеПодзапросы + ?(НЕ ПустаяСтрока(ВнутренниеПодзапросы), " ОБЪЕДИНИТЬ ВСЕ ", "") + Подзапрос;
	КонецЦикла;
	
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%ВнутренниеПодзапросы", ВнутренниеПодзапросы);
	Запрос.Текст = ЗапросТекст;
	ВыборкаЗамеров = Запрос.Выполнить().Выбрать();
	
	APDEX = Новый Массив;
	ОбщийКлиентСервер.ЗаполнитьМассивБазовымиЗначениями(APDEX, ЧислоТочек, 0);
	
	Пока ВыборкаЗамеров.Следующий() Цикл
		КоличествоНормированныхЗамеров = ВыборкаЗамеров.КоличествоНормированныхЗамеров;
		Если КоличествоНормированныхЗамеров > 0 Тогда
			НомерШага = ВыборкаЗамеров.НомерШага;
			СуммаНормированныхЗамеров = ВыборкаЗамеров.СуммаНормированныхЗамеров;
			APDEX[НомерШага] = СуммаНормированныхЗамеров / КоличествоНормированныхЗамеров;
		КонецЕсли;
	КонецЦикла;
	
	Возврат APDEX;
	
КонецФункции

// Формирует гистограмму времени выполнения операций по заданным критериям
//
// Параметры:
//  Диаграмма - Диаграмма - Диаграмма для заполнения
//  ИнформационнаяБаза - СправочникСсылка.ОбъектыКонтроля - Информационная база
//  Пользователи - Массив - Массив строк с именами пользователей
//  КлючевыеОперации - Массив - Массив структур с полями Имя и УникальныйИдентификатор
//  ДатаНачала - Дата - Дата начала
//  ДатаОкончания - Дата - Дата окончания
//  ШагРаспределения - Число - Шаг распределения
//  ОбрезатьПоследние - Число - При построении гистограммы ее хвост, вес которого менее указанного процента от
//   максимального значения на гистограмме, будет просуммирован в один столбик
//  ВычислятьСтатистику - Булево - Признак того, что при построении гистограммы попутно вычисляется средняя величина и дисперсия
//
// Возвращаемое значение:
//  Соответствие - Если ВычислятьСтатистику=Истина, то в соответствие помещаются структуры с полями
//      Среднее, Дисперсия, Минимум, ДатаМинимума, Максимум, ДатаМаксимума, ЧастоеВремя. Ключ соответствия - 
//      уникальный идентификатор операции. В противном случае соответствие не заполняется.
//  
Функция ПостроитьРаспределение(Знач Диаграмма, Знач ИнформационнаяБаза, Знач Пользователи, Знач КлючевыеОперации, 
	Знач ДатаНачала, Знач ДатаОкончания, Знач ШагРаспределения, Знач ОбрезатьПоследние, Знач ВычислятьСтатистику) Экспорт
	
	ДанныеКорзин = ЗаполнитьКорзины(ИнформационнаяБаза, Пользователи, КлючевыеОперации, ДатаНачала,
		ДатаОкончания, ШагРаспределения, ОбрезатьПоследние, ВычислятьСтатистику);
		
	Диаграмма.Обновление = Ложь;
	
	Диаграмма.АвтоМаксимальноеЗначение	= Ложь;
	Диаграмма.АвтоМинимальноеЗначение	= Ложь;
	Диаграмма.МаксимальноеЗначение		= 1;
	Диаграмма.МинимальноеЗначение		= 0;
	Диаграмма.БазовоеЗначение			= 0;
	Диаграмма.ПропускатьБазовоеЗначение	= Истина;
	
	Диаграмма.Очистить();
	
	ИдентификаторСерия = Новый Соответствие;	
	Для Каждого КлючеваяОперация Из КлючевыеОперации Цикл
		Наименование = ДанныеКорзин.ДанныеПоОперациям[КлючеваяОперация.УникальныйИдентификатор]["Название"]; 
		Серия = Диаграмма.Серии.Добавить(Наименование);
		ИдентификаторСерия.Вставить(КлючеваяОперация.УникальныйИдентификатор, Серия);
	КонецЦикла;
	
	ЧислоОпераций = ИдентификаторСерия.Количество();
		
	Порог = 0;
	Пока Порог <= ДанныеКорзин.МаксимальноеЗначениеПорога Цикл
		
		Если ЧислоОпераций = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		Точка = Диаграмма.Точки.Добавить(Порог);
		Точка.Текст = Порог;
		
		НомерКорзины = Порог / ШагРаспределения;
		Для Каждого КлючеваяОперацияРаспределение Из ДанныеКорзин.ДанныеПоОперациям Цикл
			КлючеваяОперация = КлючеваяОперацияРаспределение.Ключ;
			ИнформацияОбОперации = КлючеваяОперацияРаспределение.Значение;
			Распределение = ИнформацияОбОперации["Данные"];
			
			ЦенностьКорзины = Распределение.Получить(НомерКорзины);
			Если ЦенностьКорзины = Неопределено Тогда
				ЦенностьКорзины = 0;
			КонецЕсли;
			
			ЧислоОставшихсяЗамеров = ИнформацияОбОперации["ОбщееЧислоЗамеров"] - ЦенностьКорзины;
			Если ЧислоОставшихсяЗамеров = 0 Тогда
				ЧислоОпераций = ЧислоОпераций - 1;
			КонецЕсли;
			
			Если ЧислоОставшихсяЗамеров < ИнформацияОбОперации["МаксимальнаяЦенностьКорзины"] * ОбрезатьПоследние Тогда
				Распределение.Вставить(НомерКорзины + 1, ЧислоОставшихсяЗамеров);
				
				НомерКорзиныДляОчистки = НомерКорзины + 2;
				МаксимальныйНомерКорзины = ИнформацияОбОперации["МаксимальныйНомерКорзины"];
				Пока НомерКорзиныДляОчистки <= МаксимальныйНомерКорзины Цикл
					Распределение.Удалить(НомерКорзиныДляОчистки);
					НомерКорзиныДляОчистки = НомерКорзиныДляОчистки + 1;
				КонецЦикла;
			КонецЕсли;
			ИнформацияОбОперации["ОбщееЧислоЗамеров"] = ЧислоОставшихсяЗамеров;
			
			Диаграмма.УстановитьЗначение(Точка, ИдентификаторСерия[КлючеваяОперация], ЦенностьКорзины);
		КонецЦикла;
		
		Порог = Порог + ШагРаспределения;
	КонецЦикла;
	
	Диаграмма.ТипДиаграммы = ТипДиаграммы.Гистограмма;
	Диаграмма.Обновление = Истина;
	
	Возврат ДанныеКорзин.Статистика;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьФайлОценкиПроизводительности(ФайлПолноеИмя, КонтрольнаяПроцедура, КлючевыеОперацииТекущийАпдекс, НаименованияКлючевыхОпераций, ФайлыСНевернымФорматом, ФайлыСНевернымФорматомПолноеИмя, ФайлыНеУдалосьЗаписать)
    
    Замер = ВнутренниеЗамеры.НачатьЗамер("Загрузка файла");
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("Объект ЦКК", КонтрольнаяПроцедура.Наименование);
    
	ЧтениеXML = Новый ЧтениеXML;
	
	КлючевыеОперацииДляЗаписи = Новый Массив;
	СырыеЗамерыДляЗаписи = Новый Массив;
	
	Попытка
        
        ЧтениеXML.ОткрытьФайл(ФайлПолноеИмя);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.URIПространстваИмен = "www.v8.1c.ru/ssl/performace-assessment/apdexExport" Тогда
			ЗагрузитьФайлОценкиПроизводительностиApdexExport(
				ЧтениеXML,
				НаименованияКлючевыхОпераций,
				КлючевыеОперацииТекущийАпдекс,
				КонтрольнаяПроцедура,
				КлючевыеОперацииДляЗаписи,
				СырыеЗамерыДляЗаписи);
		ИначеЕсли ЧтениеXML.URIПространстваИмен = "www.v8.1c.ru/ssl/performace-assessment/apdexExport/1.0.0.2" Тогда
			ЗагрузитьФайлОценкиПроизводительностиApdexExport_1_0_0_2(
				ЧтениеXML,
				НаименованияКлючевыхОпераций,
				КлючевыеОперацииТекущийАпдекс,
				КонтрольнаяПроцедура,
				КлючевыеОперацииДляЗаписи,
				СырыеЗамерыДляЗаписи);
		ИначеЕсли ЧтениеXML.URIПространстваИмен = "www.v8.1c.ru/ssl/performace-assessment/apdexExport/1.0.0.3" Тогда
			ЗагрузитьФайлОценкиПроизводительностиApdexExport_1_0_0_3(
				ЧтениеXML,
				НаименованияКлючевыхОпераций,
				КлючевыеОперацииТекущийАпдекс,
				КонтрольнаяПроцедура,
				КлючевыеОперацииДляЗаписи,
				СырыеЗамерыДляЗаписи);
		ИначеЕсли ЧтениеXML.URIПространстваИмен = "www.v8.1c.ru/ssl/performace-assessment/apdexExport/1.0.0.4" Тогда
			ЗагрузитьФайлОценкиПроизводительностиApdexExport_1_0_0_4(
				ЧтениеXML,
				НаименованияКлючевыхОпераций,
				КлючевыеОперацииТекущийАпдекс,
				КонтрольнаяПроцедура,
				КлючевыеОперацииДляЗаписи,
				СырыеЗамерыДляЗаписи);
        КонецЕсли;
            
	Исключение
        
        ЧтениеXML.Закрыть();
		Файл = Новый Файл(ФайлПолноеИмя);
		ФайлыСНевернымФорматом.Добавить(Файл.Имя);
		ФайлыСНевернымФорматомПолноеИмя.Добавить(Файл.ПолноеИмя);
		
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДанныеЖР = СтрЗаменить(Файл.ПолноеИмя, ".xml",".badxml");
		ЗаписьЖурналаРегистрации(
		    "Загрузка файла оценки производительности",
		    УровеньЖурналаРегистрации.Ошибка,
		    КонтрольнаяПроцедура.ОбъектКонтроля,
		    ДанныеЖР,
		    Комментарий);
        
        ВнутренниеЗамеры.УстановитьИмяКлючевойОперации(Замер, "Загрузка файла ошибка формата");
		ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
        
	КонецПопытки;
	
	Попытка
		Для Каждого КлючеваяОперацияДляЗаписи ИЗ КлючевыеОперацииДляЗаписи Цикл
			МенеджерЗаписи = РегистрыСведений.ОценкаПроизводительностиКлючевыеОперации.СоздатьМенеджерЗаписи();
            
            МенеджерЗаписи.УникальныйИдентификатор = Новый УникальныйИдентификатор(КлючеваяОперацияДляЗаписи["УникальныйИдентификатор"]);
			МенеджерЗаписи.ИнформационнаяБаза = КлючеваяОперацияДляЗаписи["ИнформационнаяБаза"];
			МенеджерЗаписи.ПриоритетВИБ = КлючеваяОперацияДляЗаписи["ПриоритетВИБ"];
			МенеджерЗаписи.ЦелевоеВремяВИБ = КлючеваяОперацияДляЗаписи["ЦелевоеВремяВИБ"];
			МенеджерЗаписи.Имя = КлючеваяОперацияДляЗаписи["Имя"];
			Если КлючеваяОперацияДляЗаписи.Свойство("МинимальноДопустимыйУровень") Тогда
				МенеджерЗаписи.МинимальноДопустимыйУровень = КлючеваяОперацияДляЗаписи["МинимальноДопустимыйУровень"];
			КонецЕсли;
			Если КлючеваяОперацияДляЗаписи.Свойство("ВыполненаСОшибкой") Тогда
				МенеджерЗаписи.ВыполненаСОшибкой = КлючеваяОперацияДляЗаписи["ВыполненаСОшибкой"];
			КонецЕсли;
						
			// Если это новая ключевая операция, тогда пользовательские настройки выставляем
			// как в базе
			Если КлючеваяОперацияДляЗаписи["ЭтоНоваяКО"] Тогда
				МенеджерЗаписи.Приоритет = КлючеваяОперацияДляЗаписи["Приоритет"];;
				МенеджерЗаписи.ЦелевоеВремя = КлючеваяОперацияДляЗаписи["ЦелевоеВремя"];;
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		Для Каждого СыройЗамерДляЗаписи ИЗ СырыеЗамерыДляЗаписи Цикл
			ЗаписатьСыройЗамер(
				СыройЗамерДляЗаписи["ОбъектКонтроля"], 
				СыройЗамерДляЗаписи["УникальныйИдентификаторКлючевойОперации"], 
				СыройЗамерДляЗаписи["tUTC"], 
				СыройЗамерДляЗаписи["value"], 
				СыройЗамерДляЗаписи["userName"],
				СыройЗамерДляЗаписи["tSaveUTC"],
				СыройЗамерДляЗаписи["sessionNumber"],
				СыройЗамерДляЗаписи["comment"],
				СыройЗамерДляЗаписи["version"]);	
		КонецЦикла;
		
		УдалитьФайлы(ФайлПолноеИмя);
		
        ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
        
    Исключение
        
        Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        
        Если СтрНайти(Комментарий, "ВызватьИсключение ""Ожидаемая управляемая блокировка""") > 0 Тогда
                           
            ДанныеЖР = "Ожидаемая управляемая блокировка. " + ФайлПолноеИмя;
            ЗаписьЖурналаРегистрации(
                "Загрузка файла оценки производительности",
                УровеньЖурналаРегистрации.Информация,
                КонтрольнаяПроцедура.ОбъектКонтроля,
                ДанныеЖР,
                Комментарий
            );
                        
            ВнутренниеЗамеры.УстановитьИмяКлючевойОперации(Замер, "Загрузка файла ожидаемая управляемая блокировка");
            ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
        Иначе
                
            ФайлыНеУдалосьЗаписать.Добавить(ФайлПолноеИмя);
            
            ДанныеЖР = ФайлПолноеИмя;
            ЗаписьЖурналаРегистрации(
                "Загрузка файла оценки производительности",
                УровеньЖурналаРегистрации.Ошибка,
                КонтрольнаяПроцедура.ОбъектКонтроля,
                ДанныеЖР,
                Комментарий
            );
                        
            ВнутренниеЗамеры.УстановитьИмяКлючевойОперации(Замер, "Загрузка файла ошибка");
            ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
        КонецЕсли;
        
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьСыройЗамер(ОбъектКонтроляСсылка, ИдентификаторКлючевойОперации, ДатаЗамера, Длительность, Пользователь,
							 ДатаЗаписи, НомерСеанса, Комментарий, Версия)
							 
	ПользовательЗамерПроизводительности = ОбщийСерверПовтИсп.ПолучитьПользователяЗамераПроизводительностиПоНаименованию(Пользователь, Истина);
	РегистрыСведений.ОбъектыКонтроляПользователи.ДобавитьПользователя(ОбъектКонтроляСсылка, ПользовательЗамерПроизводительности);
    
    УникальныйИдентификаторЗаписи = Новый УникальныйИдентификатор();
    
    МенеджерЗаписи = РегистрыСведений.ЗамерыПроизводительности.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектКонтроля = ОбъектКонтроляСсылка;
	Если Версия = "1.0.0.1" Тогда
		МенеджерЗаписи.ДатаЗамераUTC = (ДатаЗамера - Дата(1,1,1)) * 1000;
	Иначе
		МенеджерЗаписи.ДатаЗамераUTC = ДатаЗамера;
    КонецЕсли;
    МенеджерЗаписи.ИдентификаторКлючевойОперации = Новый УникальныйИдентификатор(ИдентификаторКлючевойОперации);
    МенеджерЗаписи.НомерСеанса = НомерСеанса;
	МенеджерЗаписи.Значение = Длительность;
    МенеджерЗаписи.ДатаЗаписи = ДатаЗаписи;
	МенеджерЗаписи.Пользователь = ПользовательЗамерПроизводительности;
    МенеджерЗаписи.УникальныйИдентификаторЗаписи = УникальныйИдентификаторЗаписи;
	МенеджерЗаписи.Записать();
	
	Если Версия = "1.0.0.1" Тогда
		ДопИнформацияДляЗаписи = РегистрыСведений.ЗамерыПроизводительностиДополнительнаяИнформация.РазобратьКомментарий(Комментарий);
	Иначе
		ДопИнформацияДляЗаписи = Комментарий;
	КонецЕсли;
	
	Для Каждого ТекЗапись Из ДопИнформацияДляЗаписи Цикл
        
        Если ТипЗнч(ТекЗапись.Значение) = Тип("Строка") Тогда
            ПараметрЗамера = ОбщийСерверПовтИсп.ПолучитьПараметрЗамераПоНаименованию(ТекЗапись.Ключ);
            ЗначениеПараметра = ОбщийСерверПовтИсп.ПолучитьЗначениеПараметраЗамераПоНаименованию(ТекЗапись.Значение, ПараметрЗамера);
            
            МенеджерЗаписиДопИнфо = РегистрыСведений.ЗамерыПроизводительностиДополнительнаяИнформация.СоздатьМенеджерЗаписи();
            МенеджерЗаписиДопИнфо.УникальныйИдентификаторЗаписи = УникальныйИдентификаторЗаписи;
            МенеджерЗаписиДопИнфо.ПараметрыЗамера = ПараметрЗамера;
            МенеджерЗаписиДопИнфо.Значение = ЗначениеПараметра;
            
            МенеджерЗаписиДопИнфо.Записать();
        КонецЕсли;
        
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьФайлОценкиПроизводительностиApdexExport(ЧтениеXML, НаименованияКлючевыхОпераций, КлючевыеОперацииТекущийАпдекс, КонтрольнаяПроцедура, КлючевыеОперацииДляЗаписи, СырыеЗамерыДляЗаписи)
	
	ТребуемыеВерсии = Новый Соответствие;
	ТребуемыеВерсии.Вставить("1.0.0.0", "1.0.0.0");
	ТребуемыеВерсии.Вставить("1.0.0.1", "1.0.0.1");
	
	ПространствоИмен = ЧтениеXML.URIПространстваИмен;
	
	ВерсияМеханизмаЭкспорта = ЧтениеXML.ЗначениеАтрибута("version", ПространствоИмен);
	ТребуемаяВерсия = ТребуемыеВерсии[ВерсияМеханизмаЭкспорта];
	
	ДатаФормированияФайла = ЧтениеXML.ЗначениеАтрибута("period", ПространствоИмен);
	Если ВерсияМеханизмаЭкспорта <> ТребуемаяВерсия Тогда
		ТекстИсключения = НСтр("ru = 'Требуемая версия механизма экспорта: %1 используемая: %2'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%1", ТребуемаяВерсия);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%2", ВерсияМеханизмаЭкспорта);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	measurement = "measurement";
	ТипКлючеваяОперация = ФабрикаXDTO.Тип(ПространствоИмен, "KeyOperation");
	
	ЧтениеXML.Прочитать();
	
	ЭтотФайлПустой = Истина;
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		ЭтотФайлПустой = Ложь;
		
		КлючеваяОперация = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипКлючеваяОперация); //ТипИзмерение);//ТипКлючеваяОперация);							
		
		УникальныйИдентификаторКлючевойОперации = КлючеваяОперация.uid;
		КлючеваяОперацияНаименование = КлючеваяОперация.name;
		Приоритет = КлючеваяОперация.priority;
		ЦелевоеВремя = КлючеваяОперация.targetValue;
		
		НаименованияКлючевыхОпераций.Вставить(
		УникальныйИдентификаторКлючевойОперации,
		КлючеваяОперацияНаименование);
		
		ТекПараметрыКО = КлючевыеОперацииТекущийАпдекс[УникальныйИдентификаторКлючевойОперации];
		Если ТекПараметрыКО = Неопределено Тогда
			ЭтоНоваяКО = Истина;
			
			ТекПараметрыКО = Новый Структура;
			ТекПараметрыКО.Вставить("Имя", "");
			ТекПараметрыКО.Вставить("МинимальноДопустимыйУровень", 0);
			ТекПараметрыКО.Вставить("ПредыдущийАпдекс", Неопределено);
			ТекПараметрыКО.Вставить("Приоритет", 0);
			ТекПараметрыКО.Вставить("ПриоритетВИБ", 0);
			ТекПараметрыКО.Вставить("УникальныйИдентификатор", "");
			ТекПараметрыКО.Вставить("ЦелевоеВремя", 0);
			ТекПараметрыКО.Вставить("ЦелевоеВремяВИБ", 0);
			
			КлючевыеОперацииТекущийАпдекс.Вставить(УникальныйИдентификаторКлючевойОперации, ТекПараметрыКО);
		Иначе
			ЭтоНоваяКО = Ложь;
		КонецЕсли;
		
		//Проверка необходимости записи ключевой операции - Начало
		НеобходимаЗаписьКО = Ложь;
		Если ТекПараметрыКО.Имя <> КлючеваяОперацияНаименование Тогда
			ТекПараметрыКО.Имя = КлючеваяОперацияНаименование;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.МинимальноДопустимыйУровень <> КлючеваяОперация.minimalApdexValue Тогда
			ТекПараметрыКО.МинимальноДопустимыйУровень = КлючеваяОперация.minimalApdexValue;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.УникальныйИдентификатор <> УникальныйИдентификаторКлючевойОперации Тогда
			ТекПараметрыКО.УникальныйИдентификатор = УникальныйИдентификаторКлючевойОперации;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.ПриоритетВИБ <> Приоритет Тогда
			ТекПараметрыКО.ПриоритетВИБ = Приоритет;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.ЦелевоеВремяВИБ <> ЦелевоеВремя Тогда
			ТекПараметрыКО.ЦелевоеВремяВИБ = ЦелевоеВремя;
			НеободимаЗаписьКО = Истина;
		КонецЕсли;
		
		//Проверка необходимости записи ключевой операции - Конец
		
		// Записать данные по ключевой операции, если необходимо
		Если НеобходимаЗаписьКО  тогда
			КлючеваяОперацияДляЗаписи = Новый Структура;
			КлючеваяОперацияДляЗаписи.Вставить("УникальныйИдентификатор", УникальныйИдентификаторКлючевойОперации);
			КлючеваяОперацияДляЗаписи.Вставить("ИнформационнаяБаза", КонтрольнаяПроцедура.ОбъектКонтроля);
			КлючеваяОперацияДляЗаписи.Вставить("ПриоритетВИБ", Приоритет);
			КлючеваяОперацияДляЗаписи.Вставить("ЦелевоеВремяВИБ", ЦелевоеВремя);
			КлючеваяОперацияДляЗаписи.Вставить("Имя", КлючеваяОперацияНаименование);
			КлючеваяОперацияДляЗаписи.Вставить("МинимальноДопустимыйУровень", КлючеваяОперация.minimalApdexValue);
			
			КлючеваяОперацияДляЗаписи.Вставить("ЭтоНоваяКО", ЭтоНоваяКО);
			Если ЭтоНоваяКО Тогда
				КлючеваяОперацияДляЗаписи.Вставить("Приоритет", Приоритет);
				КлючеваяОперацияДляЗаписи.Вставить("ЦелевоеВремя", ЦелевоеВремя);
			КонецЕсли;
			КлючевыеОперацииДляЗаписи.Добавить(КлючеваяОперацияДляЗаписи);
			
		КонецЕсли;
		
		МаксимальнаяДатаЗамера = Неопределено;
		ЧислоЗамеров = КлючеваяОперация[measurement].Количество();
		НомерЗамера = 0;
		Пока НомерЗамера < ЧислоЗамеров Цикл
			Замер = КлючеваяОперация[measurement].Получить(НомерЗамера);
			ДатаЗамера = Замер.tUTC;
			Если МаксимальнаяДатаЗамера = Неопределено ИЛИ МаксимальнаяДатаЗамера < ДатаЗамера Тогда
				МаксимальнаяДатаЗамера = ДатаЗамера;
			КонецЕсли;
			
			СыройЗамерДляЗаписи = Новый Соответствие;
			СыройЗамерДляЗаписи.Вставить("ОбъектКонтроля", КонтрольнаяПроцедура.ОбъектКонтроля.Ссылка);
			СыройЗамерДляЗаписи.Вставить("УникальныйИдентификаторКлючевойОперации", УникальныйИдентификаторКлючевойОперации);
			СыройЗамерДляЗаписи.Вставить("tUTC", Замер.tUTC);
			СыройЗамерДляЗаписи.Вставить("value", Замер.value);
			СыройЗамерДляЗаписи.Вставить("userName", Замер.userName);
			СыройЗамерДляЗаписи.Вставить("tSaveUTC", Замер.tSaveUTC);
			СыройЗамерДляЗаписи.Вставить("sessionNumber", Замер.sessionNumber);
			СыройЗамерДляЗаписи.Вставить("comment", Замер.comment);
			СыройЗамерДляЗаписи.Вставить("version", "1.0.0.1");
			
			СырыеЗамерыДляЗаписи.Добавить(СыройЗамерДляЗаписи);
			
			НомерЗамера = НомерЗамера + 1;
		КонецЦикла;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
КонецПроцедуры

Процедура ЗагрузитьФайлОценкиПроизводительностиApdexExport_1_0_0_2(ЧтениеXML, НаименованияКлючевыхОпераций, КлючевыеОперацииТекущийАпдекс, КонтрольнаяПроцедура, КлючевыеОперацииДляЗаписи, СырыеЗамерыДляЗаписи)
	
	ПространствоИмен = ЧтениеXML.URIПространстваИмен;
	
	ДатаФормированияФайла = ЧтениеXML.ЗначениеАтрибута("period", ПространствоИмен);
		
	measurement = "measurement";
	ТипКлючеваяОперация = ФабрикаXDTO.Тип(ПространствоИмен, "KeyOperation");
	
	ЧтениеXML.Прочитать();
	
	ЭтотФайлПустой = Истина;
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		ЭтотФайлПустой = Ложь;
		
		КлючеваяОперация = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипКлючеваяОперация); //ТипИзмерение);//ТипКлючеваяОперация);							
		
		УникальныйИдентификаторКлючевойОперации = КлючеваяОперация.uid;
		КлючеваяОперацияНаименование = КлючеваяОперация.name;
		Приоритет = КлючеваяОперация.priority;
		ЦелевоеВремя = КлючеваяОперация.targetValue;
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(КлючеваяОперация.comment);
		КомментарийВременный = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		КомментарийБуфер = Новый Соответствие;
		КомментарийБуфер.Вставить("Конф", "Конфигурация");
		КомментарийБуфер.Вставить("Разд", "Область данных");
		КомментарийБуфер.Вставить("Платф", "Платформа");
		КомментарийБуфер.Вставить("КонфВер", "Версия конфигурации");
        КомментарийБуфер.Вставить("ИнфКл", "Информация о клиенте");
		КомментарийБуфер.Вставить("ДопИнф", "Дополнительная информация");
		
		Комментарий = Новый Соответствие;
        Для Каждого ТекЭл Из КомментарийВременный Цикл
            Ключ = КомментарийБуфер[ТекЭл.Ключ];
            Если Ключ = Неопределено Тогда
                Ключ = ТекЭл.Ключ;
            КонецЕсли;
                        
			Если ТекЭл.Ключ <> "Разд" Тогда
				Комментарий.Вставить(Ключ, ТекЭл.Значение);	
			Иначе
				Комментарий.Вставить(Ключ, СтрСоединить(КомментарийВременный["Разд"],","));
			КонецЕсли;
		КонецЦикла;
				
		ВыполненаСОшибой = КлючеваяОперация.runningError;
		
		НаименованияКлючевыхОпераций.Вставить(УникальныйИдентификаторКлючевойОперации, КлючеваяОперацияНаименование);
		
		ТекПараметрыКО = КлючевыеОперацииТекущийАпдекс[УникальныйИдентификаторКлючевойОперации];
		Если ТекПараметрыКО = Неопределено Тогда
			ЭтоНоваяКО = Истина;
			
			ТекПараметрыКО = Новый Структура;
			ТекПараметрыКО.Вставить("Имя", "");
			ТекПараметрыКО.Вставить("МинимальноДопустимыйУровень", 0);
			ТекПараметрыКО.Вставить("ПредыдущийАпдекс", Неопределено);
			ТекПараметрыКО.Вставить("Приоритет", 0);
			ТекПараметрыКО.Вставить("ПриоритетВИБ", 0);
			ТекПараметрыКО.Вставить("УникальныйИдентификатор", "");
			ТекПараметрыКО.Вставить("ЦелевоеВремя", 0);
			ТекПараметрыКО.Вставить("ЦелевоеВремяВИБ", 0);
			
			КлючевыеОперацииТекущийАпдекс.Вставить(УникальныйИдентификаторКлючевойОперации, ТекПараметрыКО);
		Иначе
			ЭтоНоваяКО = Ложь;
		КонецЕсли;
		
		//Проверка необходимости записи ключевой операции - Начало
		НеобходимаЗаписьКО = Ложь;
		Если ТекПараметрыКО.Имя <> КлючеваяОперацияНаименование Тогда
			ТекПараметрыКО.Имя = КлючеваяОперацияНаименование;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.УникальныйИдентификатор <> УникальныйИдентификаторКлючевойОперации Тогда
			ТекПараметрыКО.УникальныйИдентификатор = УникальныйИдентификаторКлючевойОперации;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.ПриоритетВИБ <> Приоритет Тогда
			ТекПараметрыКО.ПриоритетВИБ = Приоритет;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.ЦелевоеВремяВИБ <> ЦелевоеВремя Тогда
			ТекПараметрыКО.ЦелевоеВремяВИБ = ЦелевоеВремя;
			НеободимаЗаписьКО = Истина;
		КонецЕсли;
		
		//Проверка необходимости записи ключевой операции - Конец
		
		// Записать данные по ключевой операции, если необходимо
		Если НеобходимаЗаписьКО  тогда
			КлючеваяОперацияДляЗаписи = Новый Структура;
			КлючеваяОперацияДляЗаписи.Вставить("УникальныйИдентификатор", УникальныйИдентификаторКлючевойОперации);
			КлючеваяОперацияДляЗаписи.Вставить("ИнформационнаяБаза", КонтрольнаяПроцедура.ОбъектКонтроля);
			КлючеваяОперацияДляЗаписи.Вставить("ПриоритетВИБ", Приоритет);
			КлючеваяОперацияДляЗаписи.Вставить("ЦелевоеВремяВИБ", ЦелевоеВремя);
			КлючеваяОперацияДляЗаписи.Вставить("Имя", КлючеваяОперацияНаименование);
			КлючеваяОперацияДляЗаписи.Вставить("ВыполненаСОшибкой", ВыполненаСОшибой);
			
			КлючеваяОперацияДляЗаписи.Вставить("ЭтоНоваяКО", ЭтоНоваяКО);
			Если ЭтоНоваяКО Тогда
				КлючеваяОперацияДляЗаписи.Вставить("Приоритет", Приоритет);
				КлючеваяОперацияДляЗаписи.Вставить("ЦелевоеВремя", ЦелевоеВремя);
			КонецЕсли;
			КлючевыеОперацииДляЗаписи.Добавить(КлючеваяОперацияДляЗаписи);
			
		КонецЕсли;
		
		МаксимальнаяДатаЗамера = Неопределено;
		ЧислоЗамеров = КлючеваяОперация[measurement].Количество();
		НомерЗамера = 0;
		Пока НомерЗамера < ЧислоЗамеров Цикл
			Замер = КлючеваяОперация[measurement].Получить(НомерЗамера);
			ДатаЗамера = Замер.tUTC;
			Если МаксимальнаяДатаЗамера = Неопределено ИЛИ МаксимальнаяДатаЗамера < ДатаЗамера Тогда
				МаксимальнаяДатаЗамера = ДатаЗамера;
			КонецЕсли;
			
			СыройЗамерДляЗаписи = Новый Соответствие;
			СыройЗамерДляЗаписи.Вставить("ОбъектКонтроля", КонтрольнаяПроцедура.ОбъектКонтроля.Ссылка);
			СыройЗамерДляЗаписи.Вставить("УникальныйИдентификаторКлючевойОперации", УникальныйИдентификаторКлючевойОперации);
			СыройЗамерДляЗаписи.Вставить("tUTC", Замер.tUTC);
			СыройЗамерДляЗаписи.Вставить("value", Замер.value);
			СыройЗамерДляЗаписи.Вставить("userName", Замер.userName);
			СыройЗамерДляЗаписи.Вставить("tSaveUTC", Замер.tSaveUTC);
			СыройЗамерДляЗаписи.Вставить("sessionNumber", Замер.sessionNumber);
			СыройЗамерДляЗаписи.Вставить("comment", Комментарий);
			СыройЗамерДляЗаписи.Вставить("version", "1.0.0.2");
			
			СырыеЗамерыДляЗаписи.Добавить(СыройЗамерДляЗаписи);
			
			НомерЗамера = НомерЗамера + 1;
		КонецЦикла;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
КонецПроцедуры

Процедура ЗагрузитьФайлОценкиПроизводительностиApdexExport_1_0_0_3(ЧтениеXML, НаименованияКлючевыхОпераций, КлючевыеОперацииТекущийАпдекс, КонтрольнаяПроцедура, КлючевыеОперацииДляЗаписи, СырыеЗамерыДляЗаписи)
	
	ПространствоИмен = ЧтениеXML.URIПространстваИмен;
	
	ДатаФормированияФайла = ЧтениеXML.ЗначениеАтрибута("period", ПространствоИмен);
		
	measurement = "measurement";
	ТипКлючеваяОперация = ФабрикаXDTO.Тип(ПространствоИмен, "KeyOperation");
	
	ЧтениеXML.Прочитать();
	
	ЭтотФайлПустой = Истина;
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		ЭтотФайлПустой = Ложь;
		
		КлючеваяОперация = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипКлючеваяОперация); //ТипИзмерение);//ТипКлючеваяОперация);							
		
		УникальныйИдентификаторКлючевойОперации = КлючеваяОперация.uid;
		КлючеваяОперацияНаименование = КлючеваяОперация.name;
		Приоритет = КлючеваяОперация.priority;
		ЦелевоеВремя = КлючеваяОперация.targetValue;
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(КлючеваяОперация.comment);
		КомментарийВременный = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		КомментарийБуфер = Новый Соответствие;
		КомментарийБуфер.Вставить("Конф", "Конфигурация");
		КомментарийБуфер.Вставить("Разд", "Область данных");
		КомментарийБуфер.Вставить("Платф", "Платформа");
		КомментарийБуфер.Вставить("КонфВер", "Версия конфигурации");
        КомментарийБуфер.Вставить("ИнфКл", "Информация о клиенте");
		КомментарийБуфер.Вставить("ДопИнф", "Дополнительная информация");
		
		Комментарий = Новый Соответствие;
        Для Каждого ТекЭл Из КомментарийВременный Цикл
            Ключ = КомментарийБуфер[ТекЭл.Ключ];
            Если Ключ = Неопределено Тогда
                Ключ = ТекЭл.Ключ;
            КонецЕсли;
                        
			Если ТекЭл.Ключ <> "Разд" Тогда
				Комментарий.Вставить(Ключ, ТекЭл.Значение);	
			Иначе
				Комментарий.Вставить(Ключ, СтрСоединить(КомментарийВременный["Разд"],","));
			КонецЕсли;
		КонецЦикла;
				
		ВыполненаСОшибой = КлючеваяОперация.runningError;
		
		НаименованияКлючевыхОпераций.Вставить(УникальныйИдентификаторКлючевойОперации, КлючеваяОперацияНаименование);
		
		ТекПараметрыКО = КлючевыеОперацииТекущийАпдекс[УникальныйИдентификаторКлючевойОперации];
		Если ТекПараметрыКО = Неопределено Тогда
			ЭтоНоваяКО = Истина;
			
			ТекПараметрыКО = Новый Структура;
			ТекПараметрыКО.Вставить("Имя", "");
			ТекПараметрыКО.Вставить("МинимальноДопустимыйУровень", 0);
			ТекПараметрыКО.Вставить("ПредыдущийАпдекс", Неопределено);
			ТекПараметрыКО.Вставить("Приоритет", 0);
			ТекПараметрыКО.Вставить("ПриоритетВИБ", 0);
			ТекПараметрыКО.Вставить("УникальныйИдентификатор", "");
			ТекПараметрыКО.Вставить("ЦелевоеВремя", 0);
			ТекПараметрыКО.Вставить("ЦелевоеВремяВИБ", 0);
			
			КлючевыеОперацииТекущийАпдекс.Вставить(УникальныйИдентификаторКлючевойОперации, ТекПараметрыКО);
		Иначе
			ЭтоНоваяКО = Ложь;
		КонецЕсли;
		
		//Проверка необходимости записи ключевой операции - Начало
		НеобходимаЗаписьКО = Ложь;
		Если ТекПараметрыКО.Имя <> КлючеваяОперацияНаименование Тогда
			ТекПараметрыКО.Имя = КлючеваяОперацияНаименование;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.УникальныйИдентификатор <> УникальныйИдентификаторКлючевойОперации Тогда
			ТекПараметрыКО.УникальныйИдентификатор = УникальныйИдентификаторКлючевойОперации;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.ПриоритетВИБ <> Приоритет Тогда
			ТекПараметрыКО.ПриоритетВИБ = Приоритет;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.ЦелевоеВремяВИБ <> ЦелевоеВремя Тогда
			ТекПараметрыКО.ЦелевоеВремяВИБ = ЦелевоеВремя;
			НеободимаЗаписьКО = Истина;
		КонецЕсли;
		
		//Проверка необходимости записи ключевой операции - Конец
		
		// Записать данные по ключевой операции, если необходимо
		Если НеобходимаЗаписьКО  тогда
			КлючеваяОперацияДляЗаписи = Новый Структура;
			КлючеваяОперацияДляЗаписи.Вставить("УникальныйИдентификатор", УникальныйИдентификаторКлючевойОперации);
			КлючеваяОперацияДляЗаписи.Вставить("ИнформационнаяБаза", КонтрольнаяПроцедура.ОбъектКонтроля);
			КлючеваяОперацияДляЗаписи.Вставить("ПриоритетВИБ", Приоритет);
			КлючеваяОперацияДляЗаписи.Вставить("ЦелевоеВремяВИБ", ЦелевоеВремя);
			КлючеваяОперацияДляЗаписи.Вставить("Имя", КлючеваяОперацияНаименование);
			КлючеваяОперацияДляЗаписи.Вставить("ВыполненаСОшибкой", ВыполненаСОшибой);
			
			КлючеваяОперацияДляЗаписи.Вставить("ЭтоНоваяКО", ЭтоНоваяКО);
			Если ЭтоНоваяКО Тогда
				КлючеваяОперацияДляЗаписи.Вставить("Приоритет", Приоритет);
				КлючеваяОперацияДляЗаписи.Вставить("ЦелевоеВремя", ЦелевоеВремя);
			КонецЕсли;
			КлючевыеОперацииДляЗаписи.Добавить(КлючеваяОперацияДляЗаписи);
			
		КонецЕсли;
		
		МаксимальнаяДатаЗамера = Неопределено;
		ЧислоЗамеров = КлючеваяОперация[measurement].Количество();
		НомерЗамера = 0;
		Пока НомерЗамера < ЧислоЗамеров Цикл
			Замер = КлючеваяОперация[measurement].Получить(НомерЗамера);
			ДатаЗамера = Замер.tUTC;
			Если МаксимальнаяДатаЗамера = Неопределено ИЛИ МаксимальнаяДатаЗамера < ДатаЗамера Тогда
				МаксимальнаяДатаЗамера = ДатаЗамера;
			КонецЕсли;
			
			СыройЗамерДляЗаписи = Новый Соответствие;
			СыройЗамерДляЗаписи.Вставить("ОбъектКонтроля", КонтрольнаяПроцедура.ОбъектКонтроля.Ссылка);
			СыройЗамерДляЗаписи.Вставить("УникальныйИдентификаторКлючевойОперации", УникальныйИдентификаторКлючевойОперации);
			СыройЗамерДляЗаписи.Вставить("tUTC", Замер.tUTC);
			СыройЗамерДляЗаписи.Вставить("value", Замер.value);
			СыройЗамерДляЗаписи.Вставить("userName", Замер.userName);
			СыройЗамерДляЗаписи.Вставить("tSaveUTC", Замер.tSaveUTC);
			СыройЗамерДляЗаписи.Вставить("sessionNumber", Замер.sessionNumber);
			СыройЗамерДляЗаписи.Вставить("comment", Комментарий);
			СыройЗамерДляЗаписи.Вставить("version", "1.0.0.2");
			
			СырыеЗамерыДляЗаписи.Добавить(СыройЗамерДляЗаписи);
			
			НомерЗамера = НомерЗамера + 1;
		КонецЦикла;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
КонецПроцедуры

Процедура ЗагрузитьФайлОценкиПроизводительностиApdexExport_1_0_0_4(ЧтениеXML, НаименованияКлючевыхОпераций, КлючевыеОперацииТекущийАпдекс, КонтрольнаяПроцедура, КлючевыеОперацииДляЗаписи, СырыеЗамерыДляЗаписи)
	
	ПространствоИмен = ЧтениеXML.URIПространстваИмен;
	
	ДатаФормированияФайла = ЧтениеXML.ЗначениеАтрибута("period", ПространствоИмен);
		
	measurement = "measurement";
	ТипКлючеваяОперация = ФабрикаXDTO.Тип(ПространствоИмен, "KeyOperation");
	
	ЧтениеXML.Прочитать();
	
	ЭтотФайлПустой = Истина;
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		ЭтотФайлПустой = Ложь;
		
		КлючеваяОперация = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипКлючеваяОперация); //ТипИзмерение);//ТипКлючеваяОперация);							
		
		УникальныйИдентификаторКлючевойОперации = КлючеваяОперация.uid;
		КлючеваяОперацияНаименование = КлючеваяОперация.name;
		Приоритет = КлючеваяОперация.priority;
		ЦелевоеВремя = КлючеваяОперация.targetValue;
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(КлючеваяОперация.comment);
		КомментарийВременный = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		КомментарийБуфер = Новый Соответствие;
		КомментарийБуфер.Вставить("Конф", "Конфигурация");
		КомментарийБуфер.Вставить("Разд", "Область данных");
		КомментарийБуфер.Вставить("Платф", "Платформа");
		КомментарийБуфер.Вставить("КонфВер", "Версия конфигурации");
        КомментарийБуфер.Вставить("ИнфКл", "Информация о клиенте");
		КомментарийБуфер.Вставить("ДопИнф", "Дополнительная информация");
		
		Комментарий = Новый Соответствие;
        Для Каждого ТекЭл Из КомментарийВременный Цикл
            Ключ = КомментарийБуфер[ТекЭл.Ключ];
            Если Ключ = Неопределено Тогда
                Ключ = ТекЭл.Ключ;
            КонецЕсли;
                        
			Если ТекЭл.Ключ <> "Разд" Тогда
				Комментарий.Вставить(Ключ, ТекЭл.Значение);	
			Иначе
				Комментарий.Вставить(Ключ, СтрСоединить(КомментарийВременный["Разд"],","));
			КонецЕсли;
		КонецЦикла;
				
		ВыполненаСОшибой = Ложь;
		
		НаименованияКлючевыхОпераций.Вставить(УникальныйИдентификаторКлючевойОперации, КлючеваяОперацияНаименование);
		
		ТекПараметрыКО = КлючевыеОперацииТекущийАпдекс[УникальныйИдентификаторКлючевойОперации];
		Если ТекПараметрыКО = Неопределено Тогда
			ЭтоНоваяКО = Истина;
			
			ТекПараметрыКО = Новый Структура;
			ТекПараметрыКО.Вставить("Имя", "");
			ТекПараметрыКО.Вставить("МинимальноДопустимыйУровень", 0);
			ТекПараметрыКО.Вставить("ПредыдущийАпдекс", Неопределено);
			ТекПараметрыКО.Вставить("Приоритет", 0);
			ТекПараметрыКО.Вставить("ПриоритетВИБ", 0);
			ТекПараметрыКО.Вставить("УникальныйИдентификатор", "");
			ТекПараметрыКО.Вставить("ЦелевоеВремя", 0);
			ТекПараметрыКО.Вставить("ЦелевоеВремяВИБ", 0);
			
			КлючевыеОперацииТекущийАпдекс.Вставить(УникальныйИдентификаторКлючевойОперации, ТекПараметрыКО);
		Иначе
			ЭтоНоваяКО = Ложь;
		КонецЕсли;
		
		//Проверка необходимости записи ключевой операции - Начало
		НеобходимаЗаписьКО = Ложь;
		Если ТекПараметрыКО.Имя <> КлючеваяОперацияНаименование Тогда
			ТекПараметрыКО.Имя = КлючеваяОперацияНаименование;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.УникальныйИдентификатор <> УникальныйИдентификаторКлючевойОперации Тогда
			ТекПараметрыКО.УникальныйИдентификатор = УникальныйИдентификаторКлючевойОперации;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.ПриоритетВИБ <> Приоритет Тогда
			ТекПараметрыКО.ПриоритетВИБ = Приоритет;
			НеобходимаЗаписьКО = Истина;
		КонецЕсли;
		
		Если ТекПараметрыКО.ЦелевоеВремяВИБ <> ЦелевоеВремя Тогда
			ТекПараметрыКО.ЦелевоеВремяВИБ = ЦелевоеВремя;
			НеободимаЗаписьКО = Истина;
		КонецЕсли;
		
		//Проверка необходимости записи ключевой операции - Конец
		
		// Записать данные по ключевой операции, если необходимо
		Если НеобходимаЗаписьКО  тогда
			КлючеваяОперацияДляЗаписи = Новый Структура;
			КлючеваяОперацияДляЗаписи.Вставить("УникальныйИдентификатор", УникальныйИдентификаторКлючевойОперации);
			КлючеваяОперацияДляЗаписи.Вставить("ИнформационнаяБаза", КонтрольнаяПроцедура.ОбъектКонтроля);
			КлючеваяОперацияДляЗаписи.Вставить("ПриоритетВИБ", Приоритет);
			КлючеваяОперацияДляЗаписи.Вставить("ЦелевоеВремяВИБ", ЦелевоеВремя);
			КлючеваяОперацияДляЗаписи.Вставить("Имя", КлючеваяОперацияНаименование);
			КлючеваяОперацияДляЗаписи.Вставить("ВыполненаСОшибкой", ВыполненаСОшибой);
			
			КлючеваяОперацияДляЗаписи.Вставить("ЭтоНоваяКО", ЭтоНоваяКО);
			Если ЭтоНоваяКО Тогда
				КлючеваяОперацияДляЗаписи.Вставить("Приоритет", Приоритет);
				КлючеваяОперацияДляЗаписи.Вставить("ЦелевоеВремя", ЦелевоеВремя);
			КонецЕсли;
			КлючевыеОперацииДляЗаписи.Добавить(КлючеваяОперацияДляЗаписи);
			
		КонецЕсли;
		
		МаксимальнаяДатаЗамера = Неопределено;
		ЧислоЗамеров = КлючеваяОперация[measurement].Количество();
		НомерЗамера = 0;
		Пока НомерЗамера < ЧислоЗамеров Цикл
			Замер = КлючеваяОперация[measurement].Получить(НомерЗамера);
			ДатаЗамера = Замер.tUTC;
			Если МаксимальнаяДатаЗамера = Неопределено ИЛИ МаксимальнаяДатаЗамера < ДатаЗамера Тогда
				МаксимальнаяДатаЗамера = ДатаЗамера;
			КонецЕсли;
			
			СыройЗамерДляЗаписи = Новый Соответствие;
			СыройЗамерДляЗаписи.Вставить("ОбъектКонтроля", КонтрольнаяПроцедура.ОбъектКонтроля.Ссылка);
			СыройЗамерДляЗаписи.Вставить("УникальныйИдентификаторКлючевойОперации", УникальныйИдентификаторКлючевойОперации);
			СыройЗамерДляЗаписи.Вставить("tUTC", Замер.tUTC);
			СыройЗамерДляЗаписи.Вставить("value", Замер.value);
			СыройЗамерДляЗаписи.Вставить("userName", Замер.userName);
			СыройЗамерДляЗаписи.Вставить("tSaveUTC", Замер.tSaveUTC);
			СыройЗамерДляЗаписи.Вставить("sessionNumber", Замер.sessionNumber);
			СыройЗамерДляЗаписи.Вставить("comment", Комментарий);
			СыройЗамерДляЗаписи.Вставить("version", "1.0.0.4");
			
			СырыеЗамерыДляЗаписи.Добавить(СыройЗамерДляЗаписи);
			
			НомерЗамера = НомерЗамера + 1;
		КонецЦикла;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
КонецПроцедуры

// Формирует данные для построения гистограммы функцией ПостроитьРаспределение
//
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ОбъектыКонтроля - Информационная база
//  Пользователи - Массив - Массив строк с именами пользователей
//  КлючевыеОперации - Массив - Массив структур с полями Имя и УникальныйИдентификатор
//  ДатаНачала - Дата - Дата начала
//  ДатаОкончания - Дата - Дата окончания
//  ШагРаспределения - Число - Шаг распределения
//  ОбрезатьПоследние - Число - При построении гистограммы ее хвост, вес которого менее указанного процента от
//   максимального значения на гистограмме, будет просуммирован в один столбик
//  ВычислятьСтатистику - Булево - Признак того, что при построении гистограммы попутно вычисляется средняя величина и дисперсия
//  МаксимальнаяПродолжительность - Число - Время в секундах, по истечению которого формирование гистограммы 
//   будет завершено с ошибкой
//
// Возвращаемое значение:
//  Структура - Структура с полями 
//   ДанныеПоОперациям - Соответствие - Ключ: идентификатор операции, Значение: Данные статистики по операции
//   МаксимальноеЗначениеПорога - Число - Максимум времени выполнения в выборке 
//   Статистика - Соответствие - см. описание возвращаемого значения ПостроитьРаспределение
//  
Функция ЗаполнитьКорзины(Знач ИнформационнаяБаза, Знач Пользователи, Знач КлючевыеОперации, 
	Знач ДатаНачала, Знач ДатаОкончания, Знач ШагРаспределения, Знач ОбрезатьПоследние, 
	Знач ВычислятьСтатистику, Знач МаксимальнаяПродолжительность = 300)
	
	ТекущиеИдентификаторыОпераций = Новый Массив;
	ДанныеПоОперациям = Новый Соответствие;
	
	Для Каждого Операция Из КлючевыеОперации Цикл
		ТекущиеИдентификаторыОпераций.Добавить(Операция.УникальныйИдентификатор);
		ИнформацияОбОперации = Новый Структура;
		ИнформацияОбОперации.Вставить("Название", Операция.Имя);
		ИнформацияОбОперации.Вставить("ОбщееЧислоЗамеров", 0);
		ИнформацияОбОперации.Вставить("Данные", Новый Соответствие);
		ИнформацияОбОперации.Вставить("МаксимальныйНомерКорзины", 0);
		ИнформацияОбОперации.Вставить("МаксимальнаяЦенностьКорзины", 0);
		ИнформацияОбОперации.Вставить("Среднее", 0);
		ИнформацияОбОперации.Вставить("М2", 0);
		ИнформацияОбОперации.Вставить("Минимум", -1);
		ИнформацияОбОперации.Вставить("ДатаМинимума", 0);
		ИнформацияОбОперации.Вставить("Максимум", 0);
		ИнформацияОбОперации.Вставить("ДатаМаксимума", 0);
		ИнформацияОбОперации.Вставить("ЧастоеВремя", 0);
		ДанныеПоОперациям.Вставить(Операция.УникальныйИдентификатор, ИнформацияОбОперации);
	КонецЦикла;
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("Поле, ВидСравнения, Значение", 
		"ИдентификаторКлючевойОперации", ВидСравнения.ВСписке, ТекущиеИдентификаторыОпераций));
	Отбор.Добавить(Новый Структура("Поле, ВидСравнения, Значение", 
		"ДатаЗамераUTC", ВидСравнения.БольшеИлиРавно, (ДатаНачала - Дата(1,1,1)) * 1000));
	Отбор.Добавить(Новый Структура("Поле, ВидСравнения, Значение", 
		"ДатаЗамераUTC", ВидСравнения.МеньшеИлиРавно, (ДатаОкончания - Дата(1,1,1)) * 1000));
	Отбор.Добавить(Новый Структура("Поле, ВидСравнения, Значение", 
		"ОбъектКонтроля", ВидСравнения.Равно, ИнформационнаяБаза));
	Если Пользователи <> Неопределено Тогда
		Отбор.Добавить(Новый Структура("Поле, ВидСравнения, Значение", 
			"Пользователь", ВидСравнения.ВСписке, Пользователи));
	КонецЕсли;
		
	МаксимальноеЗначениеПорога = 0;
	
	Состояние = Неопределено;
	МожноПродолжать = Истина;
	
	ДатаНачала = ТекущаяДата();
	
	Пока МожноПродолжать Цикл
		
		МассивТаблиц = ТехнологияСервисаСлужебныйЗапросы.ПолучитьПорциюДанныхНезависимогоНабораЗаписей(
			Метаданные.РегистрыСведений.ЗамерыПроизводительности, Отбор, 1000, МожноПродолжать, Состояние);
			
		Для Каждого ТаблицаЗначений Из МассивТаблиц Цикл
			
			ЗаполнитьКорзиныПоФрагменту(ТаблицаЗначений, ДанныеПоОперациям, ШагРаспределения, ВычислятьСтатистику,
				МаксимальноеЗначениеПорога);

		КонецЦикла;
			
		Если ТекущаяДата() - ДатаНачала > МаксимальнаяПродолжительность Тогда
			ВызватьИсключение НСтр("ru = 'Отчет не был сформирован за максимально допустимое время. Уточните критерии.'");
		КонецЕсли;
		
	КонецЦикла;
	
	Статистика = Новый Соответствие;
	Если ВычислятьСтатистику Тогда
		Для Каждого Пара Из ДанныеПоОперациям Цикл
			
			Запись = Новый Структура("Среднее, Дисперсия, Минимум, ДатаМинимума, Максимум, ДатаМаксимума, ЧастоеВремя, ОбщееЧислоЗамеров");
			ЗаполнитьЗначенияСвойств(Запись, Пара.Значение);
			Если Пара.Значение.ОбщееЧислоЗамеров > 1 Тогда
				Запись.Дисперсия = Пара.Значение.М2 / (Пара.Значение.ОбщееЧислоЗамеров - 1);
			КонецЕсли;
			Статистика.Вставить(Пара.Ключ, Запись);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("ДанныеПоОперациям, МаксимальноеЗначениеПорога, Статистика",
		ДанныеПоОперациям, МаксимальноеЗначениеПорога, Статистика);
	
КонецФункции

// Заполняет столбцы гистограммы по прочитанному фрагменту данных
// 
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений - Фрагмент регистра ЗамерыПроизводительности
//  Распределения - Соответствие - Ключ: идентификатор операции, Значение: Данные статистики по операции
//  ШагРаспределения - Число - Шаг распределения
//  ВычислятьСтатистику - Булево
//  МаксимальноеЗначениеПорога - Число - входной-выходной параметр для вычисления максимума в выборке
//
Процедура ЗаполнитьКорзиныПоФрагменту(Знач ТаблицаЗначений, Знач Распределения, Знач ШагРаспределения, 
	Знач ВычислятьСтатистику, МаксимальноеЗначениеПорога)
	
	Для Каждого Запись Из ТаблицаЗначений Цикл
		
		КлючеваяОперация = Запись.ИдентификаторКлючевойОперации;
		Длительность = Запись.Значение;
		ИнформацияОбОперации = Распределения.Получить(КлючеваяОперация);
		НомерКорзины = Цел(Длительность / ШагРаспределения);
		ЦенностьТекущейКорзины = ИнформацияОбОперации.Данные.Получить(НомерКорзины);
		
		Если ЦенностьТекущейКорзины = Неопределено Тогда
			ЦенностьТекущейКорзины = 0;
		КонецЕсли;
		ЦенностьТекущейКорзины = ЦенностьТекущейКорзины + 1;
		ИнформацияОбОперации.Данные.Вставить(НомерКорзины, ЦенностьТекущейКорзины);
		
		ИнформацияОбОперации.ОбщееЧислоЗамеров = ИнформацияОбОперации.ОбщееЧислоЗамеров + 1;
		ИнформацияОбОперации.МаксимальныйНомерКорзины = Макс(
			ИнформацияОбОперации.МаксимальныйНомерКорзины, 
			НомерКорзины
		);
		
		Если ЦенностьТекущейКорзины > ИнформацияОбОперации.МаксимальнаяЦенностьКорзины Тогда
			ИнформацияОбОперации.МаксимальнаяЦенностьКорзины = ЦенностьТекущейКорзины;
			ИнформацияОбОперации.ЧастоеВремя = НомерКорзины * ШагРаспределения;
		КонецЕсли;
		
		Если ВычислятьСтатистику Тогда
			Дельта = Длительность - ИнформацияОбОперации.Среднее;
			Дельта = Окр(Дельта, 50 - Log10(?(Дельта > 0, Дельта, -Дельта)));
			ИнформацияОбОперации.Среднее = ИнформацияОбОперации.Среднее 
				+ Дельта / ИнформацияОбОперации.ОбщееЧислоЗамеров;
				
			ИнформацияОбОперации.М2 = ИнформацияОбОперации.М2 
				+ Дельта * (Длительность - ИнформацияОбОперации.Среднее);
				
			Если Длительность < ИнформацияОбОперации.Минимум Или ИнформацияОбОперации.Минимум < 0 Тогда
				ИнформацияОбОперации.Минимум = Длительность;
				ИнформацияОбОперации.ДатаМинимума = Запись.ДатаЗамера;
			КонецЕсли;
			Если Длительность > ИнформацияОбОперации.Максимум Тогда
				ИнформацияОбОперации.Максимум = Длительность;
				ИнформацияОбОперации.ДатаМаксимума = Запись.ДатаЗамера;
			КонецЕсли;
		КонецЕсли;
		
		МаксимальноеЗначениеПорога = Макс(Длительность, МаксимальноеЗначениеПорога);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
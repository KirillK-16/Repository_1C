
#Область ПрограммныйИнтерфейс

// Процедура - Загрузить единицу масштабирования
//
// Параметры:
//  ПараметрыЕдиницыМасштабирования - Соответсвие - Параметры единицы масштабирования.
//  ХранилищеОбщихНастроекПараметры - ХранилищеОбщихНастроек - Хранилище общих настроек для записи хода выполнения процедуры.
//
Процедура ЗагрузитьЕдиницуМасштабирования(ПараметрыЕдиницыМасштабирования, ХранилищеОбщихНастроекПараметры = Неопределено) Экспорт
    
    ВсегоОбъектов = 0;
    СозданоОбъектов = 0;
    
    Если ХранилищеОбщихНастроекПараметры <> Неопределено Тогда
        
        КолвоИБ = ПараметрыЕдиницыМасштабирования["infoBases"].Количество();
        КолвоОборудование = ПараметрыЕдиницыМасштабирования["equipment"].Количество();
        КолвоРабочихСерверов = ПараметрыЕдиницыМасштабирования["workingServer1C"].Количество();
        
        ВсегоОбъектов = КолвоИБ + КолвоОборудование + КолвоРабочихСерверов;
        
        КлючОбъекта = ХранилищеОбщихНастроекПараметры.КлючОбъекта; 
        КлючНастроек = ХранилищеОбщихНастроекПараметры.КлючНастроек;
        Пользователь = ХранилищеОбщихНастроекПараметры.Пользователь;
        
    КонецЕсли;
    
    
    Если ПараметрыЕдиницыМасштабирования["equipmentLocationRef"] <> Неопределено Тогда
        Площадка = ПараметрыЕдиницыМасштабирования["equipmentLocationRef"];
    Иначе
        Площадка = Справочники.ПлощадкиЭксплуатации.НайтиПоНаименованию(ПараметрыЕдиницыМасштабирования["equipmentLocation"], Истина, Неопределено);
    КонецЕсли;
    
    Если ПараметрыЕдиницыМасштабирования["equipment"] <> Неопределено Тогда
        Для Каждого ТекПараметры Из ПараметрыЕдиницыМасштабирования["equipment"] Цикл
            
            НачатьТранзакцию();
            
            Попытка
                
                ЗагрузитьОборудование(Площадка, ТекПараметры);
                ЗафиксироватьТранзакцию();
                
            Исключение
                
                ОтменитьТранзакцию();
                
            КонецПопытки;
            
            СозданоОбъектов = СозданоОбъектов + 1;
            
            Если ХранилищеОбщихНастроекПараметры <> Неопределено Тогда
                Описание = "Обработано " + СозданоОбъектов + " из " + ВсегоОбъектов +". Текущий объект: Оборудование '" + ТекПараметры["description"] + "'.";
                НастройкиЗаписать = Новый Структура("Значение, Описание", (СозданоОбъектов/ВсегоОбъектов)*100, Описание);
                ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, НастройкиЗаписать,,Пользователь);
            КонецЕсли;
            
        КонецЦикла;
    КонецЕсли;
    
    Если ПараметрыЕдиницыМасштабирования["cluster1C"] <> Неопределено Тогда
        Для Каждого ТекПараметры Из ПараметрыЕдиницыМасштабирования["cluster1C"] Цикл
            
            НачатьТранзакцию();
            Попытка
                СоздатьКластер1С(Площадка, ТекПараметры);
                ЗафиксироватьТранзакцию();
            Исключение
                ЗаписьЖурналаРегистрации("СоздатьНоду", УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
                ОтменитьТранзакцию();
                ВызватьИсключение;
            КонецПопытки;
            
            СозданоОбъектов = СозданоОбъектов + 1;
            
            Если ХранилищеОбщихНастроекПараметры <> Неопределено Тогда
                Описание = "Обработано " + СозданоОбъектов + " из " + ВсегоОбъектов +". Текущий объект: Кластер 1С '" + ТекПараметры["description"] + "'.";
                НастройкиЗаписать = Новый Структура("Значение, Описание", (СозданоОбъектов/ВсегоОбъектов)*100, Описание);
                ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, НастройкиЗаписать,,Пользователь);
            КонецЕсли;
            
        КонецЦикла;
    КонецЕсли;
    
    Если ПараметрыЕдиницыМасштабирования["workingServer1C"] <> Неопределено Тогда 
        Для Каждого ТекПараметры Из ПараметрыЕдиницыМасштабирования["workingServer1C"] Цикл
            
            НачатьТранзакцию();
            Попытка
                СоздатьРабочийСервер1С(Площадка, ТекПараметры);
                ЗафиксироватьТранзакцию();
            Исключение
                ОтменитьТранзакцию();
            КонецПопытки;
            
            СозданоОбъектов = СозданоОбъектов + 1;
            
            Если ХранилищеОбщихНастроекПараметры <> Неопределено Тогда
                Описание = "Обработано " + СозданоОбъектов + " из " + ВсегоОбъектов +". Текущий объект: Рабочий сервер 1С '" + ТекПараметры["description"] + "'.";
                НастройкиЗаписать = Новый Структура("Значение, Описание", (СозданоОбъектов/ВсегоОбъектов)*100, Описание);
                ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, НастройкиЗаписать,,Пользователь);
            КонецЕсли;
            
        КонецЦикла;
    КонецЕсли;
    
    Если ПараметрыЕдиницыМасштабирования["infoBases"] <> Неопределено Тогда
        Для Каждого ТекПараметры Из ПараметрыЕдиницыМасштабирования["infoBases"] Цикл
            
            НачатьТранзакцию();
            Попытка
                СоздатьИнформационнуюБазу(Площадка, ТекПараметры);
                ЗафиксироватьТранзакцию();
            Исключение
                ОтменитьТранзакцию();
            КонецПопытки;
                            
            СозданоОбъектов = СозданоОбъектов + 1;
            
            Если ХранилищеОбщихНастроекПараметры <> Неопределено Тогда
                Описание = "Обработано " + СозданоОбъектов + " из " + ВсегоОбъектов +". Текущий объект: Информационная база '" + ТекПараметры["description"] + "'.";
                НастройкиЗаписать = Новый Структура("Значение, Описание", (СозданоОбъектов/ВсегоОбъектов)*100, Описание);
                ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, НастройкиЗаписать,,Пользователь);
            КонецЕсли;
            
        КонецЦикла;
    КонецЕсли;
    
    Если ПараметрыЕдиницыМасштабирования["webPublishing"] <> Неопределено Тогда
        Для Каждого ТекПараметры Из ПараметрыЕдиницыМасштабирования["webPublishing"] Цикл
            
            НачатьТранзакцию();
            Попытка
                СоздатьПубликацию(Площадка, ТекПараметры);
                ЗафиксироватьТранзакцию();
            Исключение
                ОтменитьТранзакцию();
            КонецПопытки;
            
            СозданоОбъектов = СозданоОбъектов + 1;
            
            Если ХранилищеОбщихНастроекПараметры <> Неопределено Тогда
                Описание = "Обработано " + СозданоОбъектов + " из " + ВсегоОбъектов +". Текущий объект: Публикация '" + ТекПараметры["description"] + "'.";
                НастройкиЗаписать = Новый Структура("Значение, Описание", (СозданоОбъектов/ВсегоОбъектов)*100, Описание);
                ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, НастройкиЗаписать,,Пользователь);
            КонецЕсли;
            
        КонецЦикла;
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныПроцедурыИФункции

Процедура СоздатьКластер1С(ПлощадкаЭксплуатации, ДополнительныеПараметры)
    
    Наименование = ДополнительныеПараметры["host"] + ":" + Формат(ДополнительныеПараметры["portRmngr"], "ЧН=0; ЧГ=0");
    УникальныйИдентификаторОбъекта = ДополнительныеПараметры["UUID"];
    Кластер1С = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуКластер(УникальныйИдентификаторОбъекта);
    
    Если НЕ ЗначениеЗаполнено(Кластер1С) Тогда
        
        Кластеры1С = Справочники.ОбъектыКонтроля.НайтиКластер1С(ПлощадкаЭксплуатации, ДополнительныеПараметры["host"], ДополнительныеПараметры["portRmngr"]);
        Для Каждого Кластер Из Кластеры1С Цикл
            
            Если Кластер.УникальныйИдентификаторОбъекта = УникальныйИдентификаторОбъекта Тогда
                ВызватьИсключение "Найдены кластеры с наименованием """ + Наименование + ", идентификатором """ + УникальныйИдентификаторОбъекта + """. Создание не возможно!"; 
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЕсли;
        
    ПараметрыСоздания = РегистрыСведений.ПараметрыКластеров.КонвертироватьПараметры(ДополнительныеПараметры, Перечисления.ТипыПараметровКластер1С.Нода, Перечисления.ТипыПараметровКластер1С.ЦКК);
    ПараметрыСоздания.Вставить("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    ПараметрыСоздания.Вставить("АдминистраторКластера", "");
    ПараметрыСоздания.Вставить("ПарольАдминистратораКластера", "");
    ПараметрыСоздания.Вставить("ПортRAS", ДополнительныеПараметры["portRAS"]);
    
    Кластер1С = Справочники.ОбъектыКонтроля.СоздатьЭлементКластер1С(ПараметрыСоздания);
    
    Если ДополнительныеПараметры["memoryMonitoring"] <> Неопределено Тогда
        СоздатьКонтрольПотребленияПамяти(Кластер1С, ДополнительныеПараметры["memoryMonitoring"]);
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗагрузитьОборудование(ПлощадкаЭксплуатации, ДополнительныеПараметры)
    
    ЭтоНовыйОбъект = Истина;
    Если ДополнительныеПараметры["type"] <> Неопределено Тогда
        Если ДополнительныеПараметры["type"] = "refresh" Тогда
            ЭтоНовыйОбъект = Ложь;
        КонецЕсли;
    КонецЕсли;
    
    Наименование = ДополнительныеПараметры["description"];
    Хост = ДополнительныеПараметры["host"];
    
    ОборудованиеМассив = НайтиОборудованиеПоХосту(ПлощадкаЭксплуатации, Хост);
    
    Если ОборудованиеМассив.Количество() = 0 Тогда
        
        Оборудование = Справочники.Оборудование.СоздатьЭлемент();
        Оборудование.Заполнить(Неопределено);
        Оборудование.Наименование = Наименование;
        Оборудование.Хост = Хост;
        Оборудование.ПериодЗаписиПредставление = "Не записывать";
        Оборудование.ПлощадкаЭксплуатации = ПлощадкаЭксплуатации;
        
    ИначеЕсли ОборудованиеМассив.Количество() = 1 Тогда
        
        Если НЕ ЭтоНовыйОбъект Тогда
            Оборудование = ОборудованиеМассив[0].ПолучитьОбъект();
        Иначе
            ВызватьИсключение "В площадке эксплуатации """ + ПлощадкаЭксплуатации + """ уже есть оборудование с данным хостом. ""Хост = " + Хост + """!";
        КонецЕсли;
        
    Иначе
        ВызватьИсключение "На площадке эксплуатации """ + ПлощадкаЭксплуатации + """ несколько единиц оборудования с данным хостом. ""Хост = " + Хост + """!";
    КонецЕсли;
        
    Если ДополнительныеПараметры["collectPerformanceData"] <> Неопределено  Тогда
        Оборудование.СобиратьДанныеПроизводительности = Число(ДополнительныеПараметры["collectPerformanceData"]);
    КонецЕсли;
    
    Если ДополнительныеПараметры["checkAvailability"] <> Неопределено  Тогда
        Оборудование.ПроверятьДоступность = Булево(ДополнительныеПараметры["checkAvailability"]);
    КонецЕсли;
        
    Если ДополнительныеПараметры["languageOS"] <> Неопределено Тогда
        Оборудование.ЯзыкОС = Перечисления.ЯзыкиСистемы[ДополнительныеПараметры["languageOS"]];
     КонецЕсли;
    
    Если ДополнительныеПараметры["timeout"] <> Неопределено Тогда
        Оборудование.Таймаут = Число(ДополнительныеПараметры["timeout"]);
    КонецЕсли;
    
    Если ДополнительныеПараметры["сontrolPeriod"] <> Неопределено Тогда
        Оборудование.ПериодКонтроля = Число(ДополнительныеПараметры["сontrolPeriod"]);
    КонецЕсли;
    
    Если ДополнительныеПараметры["мinPercentageAvailability"] <> Неопределено Тогда
        Оборудование.МинимальныйПроцентДоступности = Число(ДополнительныеПараметры["мinPercentageAvailability"]);
    КонецЕсли;
    
    Если ДополнительныеПараметры["noDataAllowed"] <> Неопределено Тогда
        Оборудование.ДопустимоНетДанных = Число(ДополнительныеПараметры["noDataAllowed"]);
    КонецЕсли;
    
    Если ДополнительныеПараметры["role"] <> Неопределено Тогда
        
        Для Каждого ТекРоль Из ДополнительныеПараметры["role"] Цикл
            
            Роль = Справочники.РолиОборудования.НайтиПоНаименованию(ТекРоль, Истина);
            
            Если ЗначениеЗаполнено(Роль) Тогда
                
                Если Оборудование.РолиОборудования.Найти(Роль, "Роль") = Неопределено Тогда
                    НовРоль = Оборудование.РолиОборудования.Добавить();
                    НовРоль.Роль = Роль;
                КонецЕсли;
                
            КонецЕсли;
            
        КонецЦикла;
        
        // Получаем включенные назначенные роли
        Роли = Новый Массив;
        Для Каждого ТекСтрока Из Оборудование.РолиОборудования Цикл
            Роли.Добавить(ТекСтрока.Роль);
        КонецЦикла;
        
        // Получаем счетчики ролей
        Счетчики = Справочники.РолиОборудования.ПолучитьСчетчикиПроизводительности(Роли);
        
        // Заполняем счетчики производительности ролей и собираем различные
        СчетчикиРазличные = Новый Соответствие;
        Для Каждого ТекСчетчик Из Счетчики Цикл
            
            НовСтрока = Оборудование.СчетчикиПроизводительностиРолей.Добавить();
            НовСтрока.СчетчикПроизводительности = ТекСчетчик.СчетчикПроизводительности;
            НовСтрока.Роль = ТекСчетчик.РольОборудования;
                        
            Если СчетчикиРазличные[ТекСчетчик.СчетчикПроизводительности] = Неопределено Тогда
                СчетчикиРазличные.Вставить(ТекСчетчик.СчетчикПроизводительности, Истина);
            КонецЕсли;
            
        КонецЦикла;
        
        Для Каждого ТекСчетчик Из СчетчикиРазличные Цикл
            
            НовСтрока = Оборудование.СчетчикиПроизводительности.Добавить();
            НовСтрока.СобиратьДанные = Истина;
            НовСтрока.СчетчикПроизводительности = ТекСчетчик.Ключ;
            
        КонецЦикла;
        
        Оборудование.СчетчикиПроизводительности.Сортировать("СчетчикПроизводительности");
        
    КонецЕсли;
                
    Оборудование.Записать();
           
КонецПроцедуры

Процедура СоздатьРабочийСервер1С(ПлощадкаЭксплуатации, ДополнительныеПараметры)
    
    ПараметрыСоздания = РегистрыСведений.ПараметрыРабочихСерверов.КонвертироватьПараметры(ДополнительныеПараметры, Перечисления.ТипыПараметровКластер1С.Нода, Перечисления.ТипыПараметровКластер1С.ЦКК);
    ПараметрыСоздания.Вставить("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    
    Наименование = ПараметрыСоздания["Оборудование"];
    Если ПараметрыСоздания["ЦентральныйСервер"] Тогда
        Наименование = Наименование + " (Центральный)";
    КонецЕсли;
    ПараметрыСоздания["Наименование"] = Наименование;
        
    Если ДополнительныеПараметры["cluster1CRef"] <> Неопределено Тогда
        ПараметрыСоздания["Кластер"] = ДополнительныеПараметры["cluster1CRef"];
    КонецЕсли;
    
    РабочийСервер = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуРабочийСервер(ПараметрыСоздания["УникальныйИдентификаторОбъекта"]);
            
    Если РабочийСервер = Справочники.ОбъектыКонтроля.ПустаяСсылка() Тогда
        
        ОборудованиеМассив = НайтиОборудованиеПоХосту(ПлощадкаЭксплуатации, ПараметрыСоздания["Оборудование"]);
        Если ОборудованиеМассив.Количество() = 0 Тогда
            ВызватьИсключение "На площадке """ + ПлощадкаЭксплуатации + """ не найдено оборудование хост =  """ + ПараметрыСоздания["Оборудование"] + """. Создание рабочего сервера 1С не возможно!";
        ИначеЕсли ОборудованиеМассив.Количество() > 1 Тогда
            ВызватьИсключение "На площадке """ + ПлощадкаЭксплуатации + """ найдено более одного оборудования хост =  """ + ПараметрыСоздания["Оборудование"] + """. Создание рабочего сервера 1С не возможно!";
        ИначеЕсли ОборудованиеМассив.Количество() = 1 Тогда
            ПараметрыСоздания["Оборудование"] = ОборудованиеМассив[0];
        КонецЕсли;
        
        Если ТипЗнч(ПараметрыСоздания["Кластер"]) = Тип("Строка") Тогда
            Кластеры1С = Справочники.ОбъектыКонтроля.НайтиПоНаименованиюКластер1С(ПлощадкаЭксплуатации, ПараметрыСоздания["Кластер"]);
            Если Кластеры1С.Количество() = 0 Тогда
                ВызватьИсключение "На площадке """ + ПлощадкаЭксплуатации + """ не найден кластер 1С =  """ + ПараметрыСоздания["Кластер"] + """. Создание рабочего сервера 1С не возможно!";
            ИначеЕсли Кластеры1С.Количество() > 1 Тогда
                ВызватьИсключение "На площадке """ + ПлощадкаЭксплуатации + """ найдено более одного кластера 1С =  """ + ПараметрыСоздания["Кластер"] + """. Создание рабочего сервера 1С не возможно!";
            ИначеЕсли Кластеры1С.Количество() = 1 Тогда
                ПараметрыСоздания["Кластер"] = Кластеры1С[0];
            КонецЕсли;
        КонецЕсли;
        
        РабочийСервер1С = Справочники.ОбъектыКонтроля.СоздатьЭлементРабочийСервер1С(ПараметрыСоздания);
        
        СоздатьАнализВызововКластера1С(РабочийСервер1С, ДополнительныеПараметры);
        СоздатьКонтрольУстойчивости(РабочийСервер1С, ДополнительныеПараметры);
        СоздатьМониторингСистемныхОшибок(РабочийСервер1С, ДополнительныеПараметры);
        
   КонецЕсли;
    
КонецПроцедуры

Процедура СоздатьИнформационнуюБазу(ПлощадкаЭксплуатации, ДополнительныеПараметры)
        
    ПараметрыСоздания = РегистрыСведений.ПараметрыИнформационныхБаз.КонвертироватьПараметры(ДополнительныеПараметры, Перечисления.ТипыПараметровКластер1С.Нода, Перечисления.ТипыПараметровКластер1С.ЦКК);
    ПараметрыСоздания.Вставить("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    ПараметрыСоздания.Вставить("Наименование", ПараметрыСоздания["ИмяБазыВКластере"]);
    
    Если ДополнительныеПараметры["cluster1CRef"] <> Неопределено Тогда
        ПараметрыСоздания["Кластер"] = ДополнительныеПараметры["cluster1CRef"];
    КонецЕсли;
    
    uuid = ДополнительныеПараметры["uuid"];
    ИнформационнаяБаза = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуИнформационнаяБаза(uuid);
        
    Если ИнформационнаяБаза = Справочники.ОбъектыКонтроля.ПустаяСсылка() Тогда
        
        Если ТипЗнч(ПараметрыСоздания["Кластер"]) = Тип("Строка") Тогда
            Кластеры1С = Справочники.ОбъектыКонтроля.НайтиПоНаименованиюКластер1С(ПлощадкаЭксплуатации, ПараметрыСоздания["Кластер"]);
            Если Кластеры1С.Количество() = 0 Тогда
                ВызватьИсключение "На площадке """ + ПлощадкаЭксплуатации + """ не найден кластер 1С =  """ + ПараметрыСоздания["Кластер"] + """. Создание рабочего сервера 1С не возможно!";
            ИначеЕсли Кластеры1С.Количество() > 1 Тогда
                ВызватьИсключение "На площадке """ + ПлощадкаЭксплуатации + """ найдено более одного кластера 1С =  """ + ПараметрыСоздания["Кластер"] + """. Создание рабочего сервера 1С не возможно!";
            ИначеЕсли Кластеры1С.Количество() = 1 Тогда
                ПараметрыСоздания["Кластер"] = Кластеры1С[0];
            КонецЕсли;
        КонецЕсли;
        
        ИнформационнаяБаза = Справочники.ОбъектыКонтроля.СоздатьЭлементИнформационнуюБазу(ПараметрыСоздания);
        
        СоздатьКонтрольНагрузочныхТестов(ИнформационнаяБаза, ДополнительныеПараметры);
        
        // Контроль выполнения регламентных заданий
        Если ДополнительныеПараметры["controlRoutineTasks"] <> Неопределено Тогда
            СоздатьКонтрольВыполненияРегламентныхЗаданий(ИнформационнаяБаза, ДополнительныеПараметры["controlRoutineTasks"]);
        Иначе
            СоздатьКонтрольВыполненияРегламентныхЗаданий(ИнформационнаяБаза, Новый Соответствие);
        КонецЕсли;
                
        // Контроль подключений
        Если ДополнительныеПараметры["connectionMonitoring"] <> Неопределено Тогда
            СоздатьКонтрольПодключений(ИнформационнаяБаза, ДополнительныеПараметры["connectionMonitoring"]);
        Иначе
            СоздатьКонтрольПодключений(ИнформационнаяБаза, Новый Соответствие);
        КонецЕсли;
        
        // Контроль производительности
        Если ДополнительныеПараметры["apdexMonitoring"] <> Неопределено Тогда
            СоздатьКонтрольПроизводительности(ИнформационнаяБаза, ДополнительныеПараметры["apdexMonitoring"]);
        Иначе
            СоздатьКонтрольПроизводительности(ИнформационнаяБаза, Новый Соответствие);
        КонецЕсли;
        
        СоздатьОценкаПользователей(ИнформационнаяБаза, ДополнительныеПараметры);
        
    КонецЕсли;
            
КонецПроцедуры

Процедура СоздатьПубликацию(Площадка, ТекПараметры)
    
    ПараметрыСоздания = Новый Структура;
    ПараметрыСоздания.Вставить("ПлощадкаЭксплуатации", Площадка);
    ПараметрыСоздания.Вставить("Наименование", ТекПараметры["description"]);
    ПараметрыСоздания.Вставить("АдресРесурса", ТекПараметры["addressResource"]);
    ПараметрыСоздания.Вставить("ВыполнятьКонтроль", ТекПараметры["controlEnable"]);
    ПараметрыСоздания.Вставить("ЗапретитьПеренаправление", ТекПараметры["notRedirection"]);
    ПараметрыСоздания.Вставить("Логин", ТекПараметры["login"]);
    ПараметрыСоздания.Вставить("Пароль", ТекПараметры["password"]);
    
    Ответственный = Справочники.Пользователи.НайтиПоНаименованию(ТекПараметры["responsibleUser"]);
    Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
        Ответственный = Справочники.Пользователи.ПустаяСсылка();
    КонецЕсли;
    ПараметрыСоздания.Вставить("Ответсвенный", Ответственный);
    
    ПараметрыСоздания.Вставить("Таймаут", ТекПараметры["connectionTimeout"]);
    ПараметрыСоздания.Вставить("ПериодКонтроля", ТекПараметры["controlPeriod"]);
    ПараметрыСоздания.Вставить("МинимальныйПроцентДоступности", ТекПараметры["minimumAvailability"]);
    ПараметрыСоздания.Вставить("ПериодичностьКонтроля", ТекПараметры["periodicityOfVerification"]);
    ПараметрыСоздания.Вставить("ДопустимоНетДанных", ТекПараметры["noDataAllowed"]);
    
    Справочники.Публикации.СоздатьПубликацию(ПараметрыСоздания);
        
КонецПроцедуры

Процедура СоздатьКонтрольПотребленияПамяти(Кластер1С, ДополнительныеПараметры)
    
    Ответственный = Справочники.РолиПользователей.НайтиПоНаименованию(ДополнительныеПараметры["responsibleUser"]);
    Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
        Ответственный = Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля;
    КонецЕсли;
        
    ПараметрыСоздания = Новый Структура;
    ПараметрыСоздания.Вставить("Наименование", ДополнительныеПараметры["description"]); 
    ПараметрыСоздания.Вставить("ОбъектКонтроля", Кластер1С);
    ПараметрыСоздания.Вставить("ПороговаяПамятьМБ", ДополнительныеПараметры["memoryThreshold"]);
    ПараметрыСоздания.Вставить("СрокХраненияДанных", ДополнительныеПараметры["storeDataHour"]);
    ПараметрыСоздания.Вставить("АвтоматическиУдалятьЗаписиСеансов", ДополнительныеПараметры["automaticallyDelete"]);
    ПараметрыСоздания.Вставить("Выполнять", ДополнительныеПараметры["start"]);
    ПараметрыСоздания.Вставить("Сохранено", Истина);
    ПараметрыСоздания.Вставить("НастройкаВыполнена", Истина);
    ПараметрыСоздания.Вставить("Пауза", Ложь);
    ПараметрыСоздания.Вставить("Ответственный", Ответственный);
    Если ДополнительныеПараметры["schedule"] <> Неопределено Тогда
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", ДополнительныеПараметры["schedule"]["repeatDays"], ДополнительныеПараметры["schedule"]["repeatSeconds"]);
    Иначе
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 60);
    КонецЕсли;
    ПараметрыСоздания.Вставить("Расписание", РасписаниеПараметры);
    ПараметрыСоздания.Вставить("Мониторинг", ДополнительныеПараметры["monitoring"]);
        
    Справочники.КонтрольныеПроцедуры.СоздатьЭлементКонтрольПотребленияПамяти(ПараметрыСоздания);
    
КонецПроцедуры

Процедура СоздатьАнализВызововКластера1С(РабочийСервер1С, ДополнительныеПараметры)
    
    Если ДополнительныеПараметры["callAnalysisCluster1C"] = Неопределено Тогда
        
        ПараметрыСоздания = Новый Структура;
        ПараметрыСоздания.Вставить("Наименование", "Анализ вызовов кластера 1С для " + РабочийСервер1С);
        ПараметрыСоздания.Вставить("ОбъектКонтроля", РабочийСервер1С);
        ПараметрыСоздания.Вставить("Ответственный", Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля);
        Если ДополнительныеПараметры["schedule"] <> Неопределено Тогда
            РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", ДополнительныеПараметры["schedule"]["repeatDays"], ДополнительныеПараметры["schedule"]["repeatSeconds"]);
        Иначе
            РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 600);
        КонецЕсли;
        
    Иначе
        
        Настройки = ДополнительныеПараметры["callAnalysisCluster1C"];
        
        ПараметрыСоздания = Новый Структура;
        ПараметрыСоздания.Вставить("Наименование", Настройки["description"]);
        ПараметрыСоздания.Вставить("ОбъектКонтроля", РабочийСервер1С);
        ПараметрыСоздания.Вставить("Ответственный", Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля);
        ПараметрыСоздания.Вставить("КаталогВременныхФайлов", Настройки["folderTemp"]);
        ПараметрыСоздания.Вставить("КаталогТЖЛокальный", Настройки["dataDirectory"]);
        ПараметрыСоздания.Вставить("КаталогТЖСетевой", Настройки["dataDirectoryNetwork"]);
        ПараметрыСоздания.Вставить("ДлительностьХраненияФайловТЖ", Настройки["storageTimeTJ"]);
        ПараметрыСоздания.Вставить("СрокХраненияТЖ", Настройки["storageTimeQMC"]);
        ПараметрыСоздания.Вставить("АвтоматическиУдалятьЗаписиТЖ", Настройки["autoDelete"]);
        
        Если Настройки["schedule"] <> Неопределено Тогда
            РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", Настройки["schedule"]["repeatDays"], Настройки["schedule"]["repeatSeconds"]);
        Иначе
            РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 600);
        КонецЕсли;
        
        ПараметрыСоздания.Вставить("Расписание", РасписаниеПараметры);
        
    КонецЕсли;
    
    Справочники.КонтрольныеПроцедуры.СоздатьЭлементАнализВызововКластера1С(ПараметрыСоздания);
    
КонецПроцедуры

Процедура СоздатьКонтрольУстойчивости(РабочийСервер1С, ДополнительныеПараметры)
    
    Если ДополнительныеПараметры["controlCollectionDumps"] = Неопределено Тогда
        
        ПараметрыСоздания = Новый Структура;
        ПараметрыСоздания.Вставить("Наименование", "Контроль устойчивости для " + РабочийСервер1С);
        ПараметрыСоздания.Вставить("ОбъектКонтроля", РабочийСервер1С);
        ПараметрыСоздания.Вставить("Ответственный", Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля);
        ПараметрыСоздания.Вставить("КаталогЭкспортаДампов", "");
        ПараметрыСоздания.Вставить("Выполнять", Ложь);
        
        Если ДополнительныеПараметры["schedule"] <> Неопределено Тогда
            РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", ДополнительныеПараметры["schedule"]["repeatDays"], ДополнительныеПараметры["schedule"]["repeatSeconds"]);
        Иначе
            РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 60);
        КонецЕсли;
        ПараметрыСоздания.Вставить("Расписание", РасписаниеПараметры);
        
    Иначе
        
        Настройки = ДополнительныеПараметры["controlCollectionDumps"];
        
        ПараметрыСоздания = Новый Структура;
        ПараметрыСоздания.Вставить("Наименование", Настройки["description"]);
        ПараметрыСоздания.Вставить("ОбъектКонтроля", РабочийСервер1С);
        ПараметрыСоздания.Вставить("Ответственный", Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля);
        ПараметрыСоздания.Вставить("КаталогТЖСетевой", Настройки["folderTjNetwork"]);
        ПараметрыСоздания.Вставить("КаталогТЖЛокальный", Настройки["folderTjLocal"]);
        ПараметрыСоздания.Вставить("ДлительностьХраненияФайловТЖ", Настройки["durationFileTj"]);
        ПараметрыСоздания.Вставить("КаталогВыгрузкиДамповСетевой", Настройки["folderDumpNetwork"]);
        ПараметрыСоздания.Вставить("КаталогВыгрузкиДампов", Настройки["folderDumpLocal"]);
        ПараметрыСоздания.Вставить("КаталогВременныхФайлов", Настройки["folderTemp"]);
        ПараметрыСоздания.Вставить("УровеньДетализацииДампов", Настройки["levelDetailDump"]);
        ПараметрыСоздания.Вставить("АвтоматическаяНастройка", Настройки["autoSettingsTj"]);
        ПараметрыСоздания.Вставить("ИспользоватьАгента", Настройки["agentEnable"]);
        ПараметрыСоздания.Вставить("КаталогЭкспортаДампов", Настройки["folderExportDumps"]);
        ПараметрыСоздания.Вставить("Выполнять", Настройки["start"]);
        Если Настройки["schedule"] <> Неопределено Тогда
            РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", Настройки["schedule"]["repeatDays"], Настройки["schedule"]["repeatSeconds"]);
        Иначе
            РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 60);
        КонецЕсли;
        ПараметрыСоздания.Вставить("Расписание", РасписаниеПараметры);
        
    КонецЕсли;
    
    Справочники.КонтрольныеПроцедуры.СоздатьЭлементКонтрольУстойчивости(ПараметрыСоздания);
    
КонецПроцедуры

Процедура СоздатьМониторингСистемныхОшибок(РабочийСервер1С, ДополнительныеПараметры)
    
    Если ДополнительныеПараметры["monitoringSystemErrors"] = Неопределено Тогда
        
        ПараметрыСоздания = Новый Структура;
        ПараметрыСоздания.Вставить("Наименование", "Мониторинг системных ошибок для " + РабочийСервер1С);
        ПараметрыСоздания.Вставить("ОбъектКонтроля", РабочийСервер1С);
        ПараметрыСоздания.Вставить("Ответственный", Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля);
        Если ДополнительныеПараметры["schedule"] <> Неопределено Тогда
            РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", ДополнительныеПараметры["schedule"]["repeatDays"], ДополнительныеПараметры["schedule"]["repeatSeconds"]);
        Иначе
            РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 600);
        КонецЕсли;
        
    Иначе
        
        Настройки = ДополнительныеПараметры["monitoringSystemErrors"];
        
        ПараметрыСоздания = Новый Структура;
        ПараметрыСоздания.Вставить("Наименование", Настройки["description"]);
        ПараметрыСоздания.Вставить("ОбъектКонтроля", РабочийСервер1С);
        ПараметрыСоздания.Вставить("Ответственный", Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля);
        ПараметрыСоздания.Вставить("КаталогВременныхФайлов", Настройки["folderTemp"]);
        ПараметрыСоздания.Вставить("КаталогТЖЛокальный", Настройки["dataDirectory"]);
        ПараметрыСоздания.Вставить("КаталогТЖСетевой", Настройки["dataDirectoryNetwork"]);
        ПараметрыСоздания.Вставить("ДлительностьХраненияФайловТЖ", Настройки["storageTimeTJ"]);
        ПараметрыСоздания.Вставить("СрокХраненияТЖ", Настройки["storageTimeQMC"]);
        ПараметрыСоздания.Вставить("АвтоматическиУдалятьЗаписиТЖ", Настройки["autoDelete"]);
        
        Если Настройки["schedule"] <> Неопределено Тогда
            РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", Настройки["schedule"]["repeatDays"], Настройки["schedule"]["repeatSeconds"]);
        Иначе
            РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 600);
        КонецЕсли;
        
        ПараметрыСоздания.Вставить("Расписание", РасписаниеПараметры);
        
    КонецЕсли;
    
    Справочники.КонтрольныеПроцедуры.СоздатьЭлементМониторингСистемныхОшибок(ПараметрыСоздания);
            
КонецПроцедуры

Процедура СоздатьКонтрольВыполненияРегламентныхЗаданий(ИнформационнаяБаза, ДополнительныеПараметры)
    
    ПараметрыСоздания = Новый Структура;
    
    ПараметрыСоздания.Вставить("Наименование", "Контроль выполнения регламентных заданий для " + ИнформационнаяБаза);
    ПараметрыСоздания.Вставить("ОбъектКонтроля", ИнформационнаяБаза);
    ПараметрыСоздания.Вставить("Ответственный", Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля);
    
    Если ДополнительныеПараметры["start"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("Выполнять", ДополнительныеПараметры["start"]);
    Иначе
        ПараметрыСоздания.Вставить("Выполнять", Ложь);
    КонецЕсли;
    
    Если ДополнительныеПараметры["allowableDuration"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("ДопустимаяДлительностьВыполнения", ДополнительныеПараметры["allowableDuration"]);
    Иначе
        ПараметрыСоздания.Вставить("ДопустимаяДлительностьВыполнения", 300);
    КонецЕсли;
    
    Если ДополнительныеПараметры["clientDirectory"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("КаталогЗапускаКлиента", ДополнительныеПараметры["clientDirectory"]);
    Иначе
        ПараметрыСоздания.Вставить("КаталогЗапускаКлиента", "");
    КонецЕсли;
        
    Если ДополнительныеПараметры["schedule"] <> Неопределено Тогда
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", ДополнительныеПараметры["schedule"]["repeatDays"], ДополнительныеПараметры["schedule"]["repeatSeconds"]);
    Иначе
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 60);
    КонецЕсли;
    ПараметрыСоздания.Вставить("Расписание", РасписаниеПараметры);
    
    Справочники.КонтрольныеПроцедуры.СоздатьЭлементКонтрольВыполненияРегламентныхЗадания(ПараметрыСоздания);
    
КонецПроцедуры

Процедура СоздатьКонтрольНагрузочныхТестов(ИнформационнаяБаза, ДополнительныеПараметры)
    
    ПараметрыСоздания = Новый Структура;
    
    ПараметрыСоздания.Вставить("Наименование", "Контроль выполнения нагрузочных тестов для " + ИнформационнаяБаза);
    ПараметрыСоздания.Вставить("ОбъектКонтроля", ИнформационнаяБаза);
    ПараметрыСоздания.Вставить("Ответственный", Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля);
    Если ДополнительныеПараметры["schedule"] <> Неопределено Тогда
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", ДополнительныеПараметры["schedule"]["repeatDays"], ДополнительныеПараметры["schedule"]["repeatSeconds"]);
    Иначе
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 60);
    КонецЕсли;
    
    Справочники.КонтрольныеПроцедуры.СоздатьЭлементКонтрольНагрузочныхТестов(ПараметрыСоздания);
    
КонецПроцедуры

Процедура СоздатьКонтрольПодключений(ИнформационнаяБаза, ДополнительныеПараметры)
    
    ПараметрыСоздания = Новый Структура;
    
    // Наименование
    Если ДополнительныеПараметры["description"] = Неопределено Тогда
        ПараметрыСоздания.Вставить("Наименование", "Контроль подключений для " + ИнформационнаяБаза);
    Иначе
        ПараметрыСоздания.Вставить("Наименование", ДополнительныеПараметры["description"]); 
    КонецЕсли;
    ПараметрыСоздания.Вставить("ОбъектКонтроля", ИнформационнаяБаза);
    
    // Ответсвенный
    Если ДополнительныеПараметры["responsibleUser"] <> Неопределено Тогда
        Ответственный = Справочники.РолиПользователей.НайтиПоНаименованию(ДополнительныеПараметры["responsibleUser"]);
        Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
            Ответственный = Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля;
        КонецЕсли;
    Иначе
        Ответственный = Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля;
    КонецЕсли;
    ПараметрыСоздания.Вставить("Ответственный", Ответственный);
    
    // Выполненять контрольную процедуру
    ПараметрыСоздания.Вставить("НастройкаВыполнена", Истина);
    Если ДополнительныеПараметры["start"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("Выполнять", ДополнительныеПараметры["start"]);
    Иначе
        ПараметрыСоздания.Вставить("Выполнять", Ложь);
    КонецЕсли;
    ПараметрыСоздания.Вставить("Пауза", Ложь);
    
    // Тип соединения
    Если ДополнительныеПараметры["connectionType"] <> Неопределено Тогда
        Если ДополнительныеПараметры["connectionType"] = "WEB" Тогда
            МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.WEBСервис;
        ИначеЕсли ДополнительныеПараметры["connectionType"] = "COM" Тогда
            МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.COMСоединитель;
        КонецЕсли;
    Иначе
        МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.WEBСервис;
    КонецЕсли;
    ПараметрыСоздания.Вставить("МеханизмПроверкиОбрабатыватьИзменения", МеханизмПроверкиОбрабатыватьИзменения);
    
    // Строка соединения с ИБ, зависит от типа соединения
    Если МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.WEBСервис И ДополнительныеПараметры["connectionString"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("URLОпубликованнойИнформационнойБазы", ДополнительныеПараметры["connectionString"]);
        ПараметрыСоздания.Вставить("СтрокаСоединения", "");
    ИначеЕсли МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.COMСоединитель И ДополнительныеПараметры["connectionString"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("URLОпубликованнойИнформационнойБазы", "");
        ПараметрыСоздания.Вставить("СтрокаСоединения", ДополнительныеПараметры["connectionString"]);
    КонецЕсли;
    
    // Таймаут
    Если ДополнительныеПараметры["connectionTimeout"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("Таймаут", ДополнительныеПараметры["connectionTimeout"]);
    КонецЕсли;
    
    // Пользователь
    Если ДополнительныеПараметры["login"] <> Неопределено Тогда 
        ПараметрыСоздания.Вставить("ЛогинПриПодключении", ДополнительныеПараметры["login"]);
    КонецЕсли;
    
    // Пароль
    Если ДополнительныеПараметры["password"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("ПарольПриПодключении", ДополнительныеПараметры["password"]);
    КонецЕсли;
    
    // Использовать прокси
    Если ДополнительныеПараметры["proxyEnable"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("ИспользоватьПрокси", ДополнительныеПараметры["proxyEnable"]);
    Иначе
        ПараметрыСоздания.Вставить("ИспользоватьПрокси", Ложь);
    КонецЕсли;
    
    // Сервер прокси
    Если ДополнительныеПараметры["proxyServer"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("ПроксиСервер", ДополнительныеПараметры["proxyServer"]);
    КонецЕсли;
    
    // Порт прокси
    Если ДополнительныеПараметры["proxyPort"] <> Неопределено Тогда 
        ПараметрыСоздания.Вставить("ПроксиПорт", ДополнительныеПараметры["proxyPort"]);
    КонецЕсли;
    
    // Период контроля
    Если ДополнительныеПараметры["controlPeriod"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("ПериодКонтроля", ДополнительныеПараметры["controlPeriod"]);
    КонецЕсли;
    
    // Минимальный процент доступности
    Если ДополнительныеПараметры["minimumAvailability"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("МинимальныйПроцентДоступности", ДополнительныеПараметры["minimumAvailability"]);
    КонецЕсли;
    
    // Допустимо нет данных
    Если ДополнительныеПараметры["noDataAllowed"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("ДопустимоНетДанных", ДополнительныеПараметры["noDataAllowed"]);
    КонецЕсли;
    
    // Расписание
    Если ДополнительныеПараметры["schedule"] <> Неопределено Тогда
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", ДополнительныеПараметры["schedule"]["repeatDays"], ДополнительныеПараметры["schedule"]["repeatSeconds"]);
    Иначе
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 60);
    КонецЕсли;
    
    Справочники.КонтрольныеПроцедуры.СоздатьЭлементКонтрольПодключений(ПараметрыСоздания);
    
КонецПроцедуры

Процедура СоздатьКонтрольПроизводительности(ИнформационнаяБаза, ДополнительныеПараметры)
    
    ПараметрыСоздания = Новый Структура;
    
    Если ДополнительныеПараметры["description"] = Неопределено Тогда
        ПараметрыСоздания.Вставить("Наименование", "Контроль производительности для " + ИнформационнаяБаза);
    Иначе
        ПараметрыСоздания.Вставить("Наименование", ДополнительныеПараметры["description"]);
    КонецЕсли;
    
    ПараметрыСоздания.Вставить("ОбъектКонтроля", ИнформационнаяБаза);
    
    Ответственный = Справочники.РолиПользователей.НайтиПоНаименованию(ДополнительныеПараметры["responsibleUser"]);
    Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
        Ответственный = Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля;
    КонецЕсли;
    ПараметрыСоздания.Вставить("Ответственный", Ответственный);
    
    ПараметрыСоздания.Вставить("НастройкаВыполнена", Истина);
    Если ДополнительныеПараметры["start"] <> Неопределено Тогда
        ПараметрыСоздания.Вставить("Выполнять", ДополнительныеПараметры["start"]);
    Иначе
        ПараметрыСоздания.Вставить("Выполнять", Ложь);
    КонецЕсли;
    ПараметрыСоздания.Вставить("Пауза", Ложь);
    
    ПараметрыСоздания.Вставить("КаталогФайловОценкиПроизводительности", ДополнительныеПараметры["directoryOfApdexFiles"]);
    
    Если ДополнительныеПараметры["schedule"] <> Неопределено Тогда
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", ДополнительныеПараметры["schedule"]["repeatDays"], ДополнительныеПараметры["schedule"]["repeatSeconds"]);
    Иначе
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 60);
    КонецЕсли;
    ПараметрыСоздания.Вставить("Расписание", РасписаниеПараметры);
    
    Справочники.КонтрольныеПроцедуры.СоздатьЭлементКонтрольОценкиПроизводительности(ПараметрыСоздания);
    
КонецПроцедуры

Процедура СоздатьОценкаПользователей(ИнформационнаяБаза, ДополнительныеПараметры)
    
    ПараметрыСоздания = Новый Структура;
    
    ПараметрыСоздания.Вставить("Наименование", "Оценка пользователей для " + ИнформационнаяБаза);
    ПараметрыСоздания.Вставить("ОбъектКонтроля", ИнформационнаяБаза);
    ПараметрыСоздания.Вставить("Ответственный", Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля);
    
    Справочники.КонтрольныеПроцедуры.СоздатьЭлементОценкаПользователей(ПараметрыСоздания);
    
    Если ДополнительныеПараметры["schedule"] <> Неопределено Тогда
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", ДополнительныеПараметры["schedule"]["repeatDays"], ДополнительныеПараметры["schedule"]["repeatSeconds"]);
    Иначе
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 60);
    КонецЕсли;
    
КонецПроцедуры

Функция НайтиОборудованиеПоХосту(ПлощадкаЭксплуатации, Хост)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.Оборудование
    |ГДЕ
    |   Хост = &Хост
    |   И ПлощадкаЭксплуатации = &ПлощадкаЭксплуатации
    |";
    
    Запрос.УстановитьПараметр("Хост", Хост);
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    
    Результат = Запрос.Выполнить();
    
    Если НЕ Результат.Пустой() Тогда
        
        Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
        
    Иначе
        
        Возврат РегистрыСведений.ОборудованиеСетевыеАдаптеры.НайтиОборудование(Хост, ПлощадкаЭксплуатации);
        
    КонецЕсли;
        
КонецФункции

#КонецОбласти
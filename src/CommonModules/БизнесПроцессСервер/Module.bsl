
// Процедура выполняет привязку задачи к точке маршрута бизнес-процесса
//
// Параметры:
//  БизнесПроцессСсылка,
//  ЗадачаОбъект,
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка
//
Процедура ПривязатьЗадачуКТочкеМаршрута(БизнесПроцессСсылка, ЗадачаОбъект, ТочкаМаршрута) Экспорт
	ЗадачаОбъект.БизнесПроцесс = БизнесПроцессСсылка;
	ЗадачаОбъект.ТочкаМаршрута = ТочкаМаршрута;
КонецПроцедуры

// Создается и запускается бизнес-процесс
//
// Параметры:
//  КонтрольнаяПроцедура - СправочникСсылка.КонтрольныеПроцедуры,
//
Процедура НачатьБизнесПроцесс(КонтрольнаяПроцедура) Экспорт  
	
	НачатьТранзакцию();
	
	УправлениеЗаданиямиСервер.УстановитьСостояниеКонтрольнойПроцедуры(
		КонтрольнаяПроцедура,
		Перечисления.СостоянияКонтрольныхПроцедур.НеизвестноеСостояние
	);
	
	ИмяБизнесПроцесса = КонтрольнаяПроцедура.Владелец.ИмяБизнесПроцесса;
	
	БизнесПроцесс = БизнесПроцессы[ИмяБизнесПроцесса].СоздатьБизнесПроцесс();	
	БизнесПроцесс.КонтрольнаяПроцедура = КонтрольнаяПроцедура;	
	БизнесПроцесс.Дата = ТекущаяДата();
	БизнесПроцесс.Записать();
	
	БизнесПроцесс.Старт();
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Функция находит задачу по очередному запуску контрольной процедуры
//
// Параметры:
Функция НайтиЗадачуПерезапуска(БизнесПроцесс) Экспорт
	
	ИмяТаблицы = БизнесПроцесс.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаОтветственному.Ссылка
		|ИЗ
		|	Задача.ЗадачаОтветственному КАК ЗадачаОтветственному
		|ГДЕ
		|	ЗадачаОтветственному.Выполнена = ЛОЖЬ
		|	И ЗадачаОтветственному.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаОтветственному.ТочкаМаршрута = &ТочкаМаршрута
		|";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы[ИмяТаблицы].ТочкиМаршрута.НачатьПроверку);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗадачаПоПерезапуску = Неопределено;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	    ВыборкаДетальныеЗаписи.Следующий();
		ЗадачаПоПерезапуску = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ЗадачаПоПерезапуску; 
	
КонецФункции

// Функция находит бизнес-процесс по контрольной процедуре
//
// Параметры:
Функция НайтиБизнесПроцессПоКонтрольнойПроцедуре(КонтрольнаяПроцедура, КолВызовов = 0) Экспорт

	БизнесПроцесс = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаБизнесПроцесса.Ссылка
	               |ИЗ
	               |	&БизнесПроцесс КАК ТаблицаБизнесПроцесса
	               |ГДЕ
	               |	ТаблицаБизнесПроцесса.КонтрольнаяПроцедура = &КонтрольнаяПроцедура
	               |	И ТаблицаБизнесПроцесса.Завершен = ЛОЖЬ
	               |	И ТаблицаБизнесПроцесса.Стартован = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТаблицаБизнесПроцесса.Дата УБЫВ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&БизнесПроцесс", "БизнесПроцесс." + КонтрольнаяПроцедура.Владелец.ИмяБизнесПроцесса);
	Запрос.УстановитьПараметр("КонтрольнаяПроцедура", КонтрольнаяПроцедура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		БизнесПроцесс = Выборка.Ссылка;
	Иначе
		// Временный обход проблемы параллельного запуска фонового задания при
		// старте бизнес-процесса из формы контрольной процедуры. Регзадание стартует
		// быстрее, чем записывается контрольная процедура, создается бизнес-процесс
		// и задачи по бизнес-процессу
		КипВнешнийКомпонент.Пауза(250);
		
		КолВызовов = КолВызовов + 1;
		Если КолВызовов < 50 Тогда
			БизнесПроцесс = НайтиБизнесПроцессПоКонтрольнойПроцедуре(КонтрольнаяПроцедура, КолВызовов);
		КонецЕсли;
	КонецЕсли;
	
	Возврат БизнесПроцесс;
	
КонецФункции

Функция УстановитьДатуВШаблоне(Знач Шаблон, Маска, Дата) Экспорт
	ИндексНачалаДаты = СтрНайти(Шаблон, "[" + Маска);
	Если ИндексНачалаДаты > 0 Тогда
		ШаблонЛево = Лев(Шаблон, ИндексНачалаДаты - 1);
		
		Шаблон = Прав(Шаблон, СтрДлина(Шаблон) - (ИндексНачалаДаты - 1));
		ИндексКонецДаты = СтрНайти(Шаблон, "]");
		
		ШаблонДата = Лев(Шаблон, ИндексКонецДаты);
		Шаблон = СтрЗаменить(Шаблон, ШаблонДата, "");
		
		ШаблонДата = СтрЗаменить(ШаблонДата, "[" + Маска, "");
		ШаблонДата = СтрЗаменить(ШаблонДата, "]", "");
		ШаблонДата = Формат(Дата, "ДФ='" + ШаблонДата + "'");
		
		Шаблон = ШаблонЛево + ШаблонДата + Шаблон;
	КонецЕсли;
	
	Возврат Шаблон;
КонецФункции



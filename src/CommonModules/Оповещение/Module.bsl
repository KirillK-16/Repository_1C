
#Область ПрограммныйИнтерфейс

// Создает письмо и смс для отправки его указанному пользователю
//
// Параметры:
//  Тема - Строка - тема письма
//  Текст - Строка - текст письма
//  Адресат - СправочникСсылка.Пользователи
//  ПоSMS - Булево - Признак отправки по SMS
//  ПоПочте - Булево - Признак отправки по почте
//
Функция ОповеститьПользователя(
    Знач Тема,
    Знач ТекстСообщения,
    Знач Адресат,
    Знач ПоSMS = Истина,
    Знач ПоПочте = Истина,
    Знач ПоСкайпу = Истина,
    Знач RestAPI = Ложь,
    Отправить = Истина,
    ОтложитьДо = Неопределено,
    НеУведомлятьУдалять = Ложь,
    Источник = Неопределено
    ) Экспорт
	
	ЕстьОповещение = Ложь;
    
    Если ТипЗнч(ТекстСообщения) = Тип("Строка") Тогда
		ТекстСообщенияПочта = ТекстСообщения;
		ТекстСообщенияСМС = ТекстСообщения;
	Иначе
		ТекстСообщенияПочта = ТекстСообщения.ТелоПисьма;
		ТекстСообщенияСМС = ТекстСообщения.ТелоСМС;
	КонецЕсли;
		
	Попытка
		Если ТипЗнч(Адресат) = Тип("СправочникСсылка.Пользователи") Тогда
            
            Если ПоSMS Тогда
				ПоSMS = ЗначениеЗаполнено(Адресат.НомерТелефона);
			КонецЕсли;
			
			Если ПоПочте Тогда
				ПоПочте = ЗначениеЗаполнено(Адресат.АдресЭлектроннойПочты);
            КонецЕсли;
            
            Если ПоСкайпу Тогда
                ПоСкайпу = ЗначениеЗаполнено(Адресат.Скайп);
            КонецЕсли;
            
            Если RestAPI Тогда
                RestAPI = ЗначениеЗаполнено(Адресат.RestApiМетод) И ЗначениеЗаполнено(Адресат.RestApiАдрес);
            КонецЕсли;
                        
		КонецЕсли;
		
		Если ПоSMS ИЛИ ПоПочте ИЛИ ПоСкайпу ИЛИ RestAPI Тогда
			ДанныеОповещения = Справочники.ОтправкаСообщений.СоздатьЭлемент();
			ДанныеОповещения.Адресат = Адресат;
			ДанныеОповещения.Отправлено = НЕ Отправить;
			ДанныеОповещения.Тема = Тема;
			ДанныеОповещения.Текст = ТекстСообщенияПочта;
			ДанныеОповещения.ТекстСМС = ТекстСообщенияСМС;
			ДанныеОповещения.Отправлено = НЕ Отправить;
			ДанныеОповещения.ПоSMS = Константы.ВыполнятьОповещениеПоСМС.Получить() И ПоSMS;
			ДанныеОповещения.ПоПочте = Константы.ВыполнятьОповещениеПоПочте.Получить() И ПоПочте;
            ДанныеОповещения.ПоСкайпу = Константы.ВыполнятьОповещениеПоSkype.Получить() И ПоСкайпу;
            ДанныеОповещения.ПоRestApi = Константы.ВыполнятьОповещениеПоRestAPI.Получить() И RestAPI;
			ДанныеОповещения.ДатаОтправки = ТекущаяДата();
            ДанныеОповещения.Источник = Источник;
			Если ОтложитьДо <> Неопределено Тогда
				ДанныеОповещения.ОтложитьОтправкуДо = ОтложитьДо;
				Если НеУведомлятьУдалять Тогда
					ДанныеОповещения.Отправлено = Истина;
				КонецЕсли;
				ДанныеОповещения.ДатаОтправкиФакт = ДанныеОповещения.ДатаОтправки;
			КонецЕсли;
												
			Если ДанныеОповещения.ПоSMS ИЛИ ДанныеОповещения.ПоПочте ИЛИ ДанныеОповещения.ПоСкайпу ИЛИ ДанныеОповещения.ПоRestApi Тогда
				ДанныеОповещения.Записать();
				ЕстьОповещение = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		ЗаписьЖурналаРегистрации("ОповеститьПользователя", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.Оповещение,,Комментарий);
	КонецПопытки;
	
	Возврат ЕстьОповещение;
	
КонецФункции

// Префикс в теме электронного письма при отправке отчета ЦКК
//
// Возвращаемое значение:
//  Строка 
//
Функция ПрефиксЗаголовкаОтчетаЦКК() Экспорт
	Возврат "Report_QMCName_";
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

Процедура ОповещениеФормирование() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
    
    ДатаНачала = Формат(Дата(1,1,1), "ДФ=ггггММддЧЧмм");
    Оповещения = Новый Соответствие;
    Выполнять = Истина;
    
    Пока Выполнять Цикл
        
        ТекДата = Формат(ТекущаяДата(), "ДФ=ггггММддЧЧмм");
        ДатаВыполнения = ТекущаяУниверсальнаяДата();
        
        Если ТекДата <> ДатаНачала Тогда
            ОбновитьНастройки(Оповещения);
            ДатаНачала = ТекДата;
        КонецЕсли;
        
        Для Каждого ТекОповещение Из Оповещения Цикл
            Если ТекОповещение.Значение.ВремяОповещения <= ДатаВыполнения Тогда
                ТекОповещение.Значение.ВремяОповещения = Справочники.ОповещенияОперативные.ВыполнитьОповещение(ТекОповещение.Ключ);
            КонецЕсли;
        КонецЦикла;
        
        КипВнешнийКомпонент.Пауза(1000);
      
    КонецЦикла;
                                  
КонецПроцедуры

Процедура ОбновитьНастройки(Оповещения)
    
    АктивныеОповещения = АктивныеОповещения();
    
    ОповещенияНовые = Новый Соответствие;
    Для Каждого ТекОповещение Из АктивныеОповещения Цикл
        
        ОповещенияНовые.Вставить(ТекОповещение.Оповещение, Истина);
        
        Если Оповещения[ТекОповещение.Оповещение] = Неопределено Тогда
            Оповещения.Вставить(ТекОповещение.Оповещение, Новый Структура("ВремяОповещения", ТекОповещение.ВремяОповещения));
        КонецЕсли;
        
    КонецЦикла;
    
    ОповещенияУдалить = Новый Массив;
    Для Каждого ТекОповещение Из Оповещения Цикл
        
        Если ОповещенияНовые[ТекОповещение.Ключ] = Неопределено Тогда
            ОповещенияУдалить.Добавить(ТекОповещение.Ключ);
        КонецЕсли;
                
    КонецЦикла;
    
    Для Каждого ТекОповещение Из ОповещенияУдалить Цикл
        Оповещения.Удалить(ТекОповещение);
    КонецЦикла;
                
КонецПроцедуры

Функция АктивныеОповещения()
    
    ТекДата = ТекущаяУниверсальнаяДата();
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Оповещения.Ссылка КАК Оповещение,
    |   ВЫБОР
    |       КОГДА ТекущееСостояниеПовторногоОповещения.ВремяГрупповогоОповещения IS NULL ТОГДА &ТекДата
    |       КОГДА ТекущееСостояниеПовторногоОповещения.ВремяГрупповогоОповещения < ТекущееСостояниеПовторногоОповещения.ВремяПовторногоОповещения ТОГДА ТекущееСостояниеПовторногоОповещения.ВремяГрупповогоОповещения
    |       ИНАЧЕ ТекущееСостояниеПовторногоОповещения.ВремяПовторногоОповещения
    |   КОНЕЦ КАК ВремяОповещения
    |ИЗ
    |   Справочник.ОповещенияОперативные КАК Оповещения
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ТекущееСостояниеПовторногоОповещенияОперативного КАК ТекущееСостояниеПовторногоОповещения
    |ПО
    |   ТекущееСостояниеПовторногоОповещения.Оповещение = Оповещения.Ссылка
    |ГДЕ
    |   Активно
    |";
    
    Запрос.УстановитьПараметр("ТекДата", ТекДата);
    
    Результат = Запрос.Выполнить();
    
    Возврат Результат.Выгрузить();
    
КонецФункции

Процедура ПровестиОповещение() Экспорт
	Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка,
	|	Тема,
	|	Текст,
	|	ТекстСМС,
	|	Адресат,
	|	ПоSMS,
	|	ПоПочте,
    |   ПоСкайпу,
    |   ПоRestApi
	|ИЗ
	|	Справочник.ОтправкаСообщений
	|ГДЕ
	|	Отправлено = ЛОЖЬ
	|	И ОтложитьОтправкуДо < &ТекДата
	|";
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
    
    ОткладыватьДоставку = Константы.ОткладыватьДоставкуОповещенийПриНевозможностиОтправки.Получить();
    
	Результат = Запрос.Выполнить();
	ДанныеОповещения = Результат.Выбрать();		
	Пока ДанныеОповещения.Следующий() Цикл
		
		ЕстьОтправка = ОповеститьПользователяОтложенное(
			ДанныеОповещения.Тема, 
			ДанныеОповещения.Текст,
			ДанныеОповещения.ТекстСМС,
			ДанныеОповещения.Адресат,
			ДанныеОповещения.ПоSMS,
			ДанныеОповещения.ПоПочте,
            ДанныеОповещения.ПоСкайпу,
            ДанныеОповещения.ПоRestApi
		);
        
        Если ЕстьОтправка["Общая"] Тогда
            ДанныеОбъект = ДанныеОповещения.Ссылка.ПолучитьОбъект();
            ДанныеОбъект.Отправлено = Истина;
            ДанныеОбъект.ДатаОтправкиФакт = ТекущаяДата();
            ДанныеОбъект.ПоSMS = ЕстьОтправка["СМС"]; 
            ДанныеОбъект.ПоПочте = ЕстьОтправка["Почта"];
            ДанныеОбъект.ПоСкайпу = ЕстьОтправка["Скайп"];
            ДанныеОбъект.ПоRestApi = ЕстьОтправка["RestAPI"];
            ДанныеОбъект.Записать();
        Иначе
            Если ОткладыватьДоставку Тогда
                ДанныеОбъект = ДанныеОповещения.Ссылка.ПолучитьОбъект();
                ДанныеОбъект.Отправлено = Ложь;
                ДанныеОбъект.ВозниклаОшибкаПриОтправке = Истина;
                ДанныеОбъект.Записать();
            Иначе
                ДанныеОбъект = ДанныеОповещения.Ссылка.ПолучитьОбъект();
                ДанныеОбъект.Отправлено = Истина;
                ДанныеОбъект.ВозниклаОшибкаПриОтправке = Истина;
                ДанныеОбъект.Записать();
            КонецЕсли;
        КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует и отправляет отчет на указанный в настройках ЦКК электронный 
// почтовый адрес
//
Процедура ОтправкаОтчета() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
	Сообщение = "Отправка отчета.Старт";
	Отладка.Информация(Сообщение);
	
	Если Константы.ПосылатьОтчетыЦКК.Получить() Тогда
		Адрес = Константы.АдресДляОтчетовЦКК.Получить();
		ИнтернетПочта.ОтправитьПочтовоеСообщение(
			Адрес, 
			ПрефиксЗаголовкаОтчетаЦКК() + Константы.ИмяЭтогоЦКК.Получить(), 
			СтрЗаменить("%1", "%1", ТекущаяДата()),
			,
			Новый Структура("ИмяОтправителя, ОбратныйАдрес", 
				Константы.ИмяЭтогоЦКК.Получить(), Константы.ОбратныйАдресЭлектроннойПочты.Получить() 
			)
		);
			
	КонецЕсли;
	
	Сообщение = "Отправка отчета.Завершение";
	Отладка.Информация(Сообщение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОповеститьПользователяОтложенное(
    Тема,
    ТекстСообщения,
    ТекстСообщенияСМС,
    Адресат,
    ВыполнятьОповещениеПоСМС = Истина,
    ВыполнятьОповещениеПоПочте = Истина,
    ВыполнятьОповещениеПоСкайпу = Истина,
    ВыполнятьОповещенияПоRestApi = Истина)
    
    КонстантаПоСМС = Константы.ВыполнятьОповещениеПоСМС.Получить();
    КонстантаПоПочте = Константы.ВыполнятьОповещениеПоПочте.Получить();
    КонстантаПоSkype = Константы.ВыполнятьОповещениеПоSkype.Получить();
    КонстантаПоRestAPI = Константы.ВыполнятьОповещениеПоRestAPI.Получить();
    
    ЕстьОтправка = Новый Соответствие;
    ЕстьОтправка.Вставить("Общая", Ложь);
    ЕстьОтправка.Вставить("СМС", Ложь);
    ЕстьОтправка.Вставить("Почта", Ложь);
    ЕстьОтправка.Вставить("Скайп", Ложь);
    ЕстьОтправка.Вставить("RestAPI", Ложь);
    
    
	Если ВыполнятьОповещениеПоСМС И КонстантаПоСМС Тогда
        
        Попытка
			Если ТипЗнч(Адресат) = Тип("СправочникСсылка.Пользователи") Тогда
				
				НомераТелефоновСтроки = Новый Массив;
				НомераТелефоновСтроки.Добавить(Адресат.НомерТелефона);
				
				РезультатОтправки = ОтправкаSMS.ОтправитьSMS(НомераТелефоновСтроки, ТекстСообщенияСМС, Константы.ОтправительSMS.Получить());
                
                Если НЕ ЕстьОтправка И НЕ РезультатОтправки.ОшибкаПодключения Тогда
                    
                    ЕстьОтправка["СМС"] = Истина;
                    ЕстьОтправка["Общая"] = ЕстьОтправка["СМС"] ИЛИ ЕстьОтправка["Общая"];
                    
                КонецЕсли;
                
			КонецЕсли;
			
		Исключение
			Отладка.Ошибка(ИнформацияОбОшибке());
        КонецПопытки;
        
	КонецЕсли;
	
	Если ВыполнятьОповещениеПоПочте И КонстантаПоПочте Тогда
        
        Попытка
			Если ЗначениеЗаполнено(Тема) ИЛИ ЗначениеЗаполнено(ТекстСообщения) Тогда
				
				ПочтовыеАдреса = Новый Массив;
				Если ТипЗнч(Адресат) = Тип("Массив") Тогда
					ПочтовыеАдреса = Адресат;
				ИначеЕсли ТипЗнч(Адресат) = Тип("СправочникСсылка.Пользователи") Тогда
					ПочтовыеАдреса.Добавить(Адресат.АдресЭлектроннойПочты);
				Иначе	
					ПочтовыеАдреса.Добавить(Адресат);
				КонецЕсли;	
				
				Для Каждого ПочтовыйАдрес Из ПочтовыеАдреса Цикл
					ИнтернетПочта.ОтправитьПочтовоеСообщение(
					ПочтовыйАдрес, Тема, ТекстСообщения,,
					Новый Структура("ИмяОтправителя, ОбратныйАдрес", 
					Константы.ИмяЭтогоЦКК.Получить(), Константы.ОбратныйАдресЭлектроннойПочты.Получить() 
					)
					);
                КонецЦикла;
                
                ЕстьОтправка["Почта"] = Истина;
                ЕстьОтправка["Общая"] = ЕстьОтправка["Почта"] ИЛИ ЕстьОтправка["Общая"];
                
                
			Иначе
				ЗаписьЖурналаРегистрации("Отправка e-mail", УровеньЖурналаРегистрации.Ошибка,,,НСтр("ru = 'Попытка отправки пустого e-mail.'"));
			КонецЕсли;
		Исключение
			Отладка.Ошибка(ИнформацияОбОшибке());
        КонецПопытки;
        
    КонецЕсли;
    
    Если ВыполнятьОповещениеПоСкайпу И КонстантаПоSkype Тогда
        
        Попытка
            
            ЕстьОтправка["Скайп"] = СкайпБот.ОтправитьСообщение(Адресат.Скайп, ТекстСообщенияСМС);
            ЕстьОтправка["Общая"] = ЕстьОтправка["Скайп"] ИЛИ ЕстьОтправка["Общая"];
                         
        Исключение
            
            Отладка.Ошибка(ИнформацияОбОшибке());
            
        КонецПопытки;
        
    КонецЕсли;
    
    Если ВыполнятьОповещенияПоRestApi И КонстантаПоRestAPI Тогда
        
        Попытка 
            
            ЕстьОтправка["RestAPI"] = ОповещениеRestAPI(Адресат.RestApiМетод, Адресат.RestApiАдрес, ТекстСообщенияСМС);
            ЕстьОтправка["Общая"] = ЕстьОтправка["RestAPI"] ИЛИ ЕстьОтправка["Общая"];
            
        Исключение
            
            Отладка.Ошибка(ИнформацияОбОшибке());
            
        КонецПопытки;
        
    КонецЕсли;
        
    Возврат ЕстьОтправка; 
    
КонецФункции

Функция ОповещениеRestAPI(Метод, Адрес, Текст)
    
    СтруктураURI = ОбщийКлиентСервер.СтруктураURI(Адрес);
    
    Если НРег(СтруктураURI.Схема) = "https" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Иначе
		ЗащищенноеСоединение = Неопределено;
    КонецЕсли;
    
    HTTPСоединение = Новый HTTPСоединение(
        СтруктураURI.Хост, 
	    СтруктураURI.Порт,
	    "СоломатинД",
	    ,
	    ,
	    Константы.ТаймаутУстановкиСоединенияСПубликациейСек.Получить(),
	    ЗащищенноеСоединение
    );
    
        
    Если Метод = "POST" Тогда
        
        HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
        
        ПараметрыОтправки = Новый Соответствие;
        ПараметрыОтправки.Вставить("message_text", Текст);
        
        ЗаписьJSON = Новый ЗаписьJSON();
        ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
        ЗаписатьJSON(ЗаписьJSON, ПараметрыОтправки);
        Тело = ЗаписьJSON.Закрыть();
        
        HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
        
        Результат =  HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
        
    ИначеЕсли Метод = "GET" Тогда
        
        HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере + "?message_text=" + КодироватьСтроку(Текст, СпособКодированияСтроки.КодировкаURL));
        Результат = HTTPСоединение.Получить(HTTPЗапрос);
        
    КонецЕсли;
    
    Если Результат.КодСостояния <> 200 Тогда
        Описание = "ОповещениеRestAPI: КодСостояния=" + Результат.КодСостояния + ". " + Результат.ПолучитьТелоКакСтроку();
        Отладка.Ошибка(Описание);
    КонецЕсли;
        
    Возврат Результат.КодСостояния = 200;
    
КонецФункции

#КонецОбласти
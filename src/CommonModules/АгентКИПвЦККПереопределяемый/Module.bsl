
#Область СправочникАгентыЦККМодульМенеджера

Функция ТекстЗапросаНайтиАгентаПоУникальномуИдентификатору() Экспорт
    
    Возврат "
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |   Агенты.Ссылка,
    |   Агенты.Версия,
    |   ISNULL(ДопРеквизиты.КонтрольДоступностиИнформационныхБаз, ЛОЖЬ) КАК КонтрольДоступностиИнформационныхБаз,
    |   ISNULL(Активность.ДатаКрайнейАктивности, &ПустаяДата) КАК ДатаАктивности,
    |   ISNULL(ДопРеквизиты.ПериодКонтроляИнформационнойБазы,0) КАК ПериодКонтроляИнформационнойБазы,
    |   ISNULL(ДопРеквизиты.МинимальныйПроцентДоступностиИнформационнойБазы, 0) КАК МинимальныйПроцентДоступностиИнформационнойБазы,
    |   ДопРеквизиты.МониторингКластеров КАК МониторингКластеров,
    |   Агенты.ПериодОтправкиДанных,
    |   Агенты.ЛогироватьПакеты,
    |   Агенты.УникальныйИдентификаторАгента
    |ИЗ
    |   Справочник.АгентыКИП КАК Агенты
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   Справочник.АгентыКИПДополнительныеРеквизиты КАК ДопРеквизиты
    |ПО
    |   ДопРеквизиты.Владелец = Агенты.Ссылка
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.АктивностьАгентовКИП КАК Активность
    |ПО
    |   Активность.АгентКИП = Агенты.Ссылка
    |ГДЕ
    |   Агенты.УникальныйИдентификаторАгента = &УникальныйИдентификаторАгента
    |";
    
КонецФункции

Процедура СоздатьСвязанныеОбъектыАгентаКИП(ДанныеАгента) Экспорт
    
    ДопРеквизиты = Справочники.АгентыКИПДополнительныеРеквизиты.СоздатьЭлемент();
    ДопРеквизиты.Владелец = ДанныеАгента.Ссылка;
    ДопРеквизиты.Заполнить(Неопределено);
    ДопРеквизиты.Записать();    
    
КонецПроцедуры

Процедура ДополнитьСоответствиеФорм(СоответствиеФорм) Экспорт 
    
    СоответствиеФорм.Вставить("ФормаВыбора", "ФормаВыбораЦКК");
    СоответствиеФорм.Вставить("ФормаСписка", "ФормаСпискаЦКК");
    СоответствиеФорм.Вставить("ФормаЭлемента", "ФормаЭлементаЦКК");
    СоответствиеФорм.Вставить("ФормаОбъекта", "ФормаЭлементаЦКК");
    
КонецПроцедуры

#КонецОбласти

#Область HttpСервис

Процедура ПередЗнакомством(Данные, Ответ) Экспорт
    
    #Если НЕ ВнешнееСоединение Тогда
        
    Если Общий.ВерсияЦКК() <> Общий.СохраненнаяВерсия() Тогда
        Ответ = Новый HTTPСервисОтвет(403);
        Ответ.УстановитьТелоИзСтроки("Execution temporarily unavailable due to upgrade to new version.");
    КонецЕсли;
    
    #Иначе
        
        ВызватьИсключение НСтр("ru='Внешнее соединение не поддерживается!'");
    
    #КонецЕсли
    
КонецПроцедуры

Процедура ОбработатьОшибкуПриЗнакомстве(ТипОшибки, Данные) Экспорт
    
    Если ТипОшибки = Перечисления.ТипыОшибокАгента.ОтсутствуетИдентификаторАгента Тогда
        ОшибкаОтсутствуетИдентификаторАгента(Данные);
    ИначеЕсли ТипОшибки = Перечисления.ТипыОшибокАгента.ИмяХостаАгентаНеСоответствуетПолученному Тогда
        ОшибкаИмяХостаАгентаНеСоответсвуетПолученному(Данные);
    КонецЕсли;
    
КонецПроцедуры

Процедура ОбработатьЗапросНаЗнакомство(Данные, Ответ) Экспорт
    
    #Если НЕ ВнешнееСоединение Тогда
        
    ОсновныеДанные = ОсновныеДанныеПакета(Данные);
    
    Оборудование = Справочники.Оборудование.НайтиПоАгенту(ОсновныеДанные.АгентКИП, Истина);
    Если Оборудование = Неопределено Тогда
        
        ПлощадкаПоУмолчанию = Константы.ПлощадкаЭксплуатацииПоУмолчанию.Получить();
        
        Оборудование = Справочники.Оборудование.НайтиПоХостуВПлощадке(ОсновныеДанные.Хост, ПлощадкаПоУмолчанию);
        
        // Нашли несколько единиц оборудования с искомым хостом.
        Если Оборудование.Количество() > 1 Тогда
            
            Сообщение = "Много оборудования с хостом = " + ОсновныеДанные.Хост + "!";
            
            // Тип инцидента "АгентКИП"
            ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("АгентКИП");
            ТипИнцидентаАгентКИП = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, "АгентКИП", Перечисления.УровниИнцидентов.Предупреждение);
            
            // Инцидент "Ошибка инициализации оборудования"
            ХешИнцидента = Справочники.Инциденты.ХешИнцидента("Ошибка инициализации оборудования" + ОсновныеДанные.Хост);
            Инцидент = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, "Ошибка инициализации оборудования", Ложь);
            
            ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидентаАгентКИП, Инцидент, ОсновныеДанные.СтрокаПодключения,,Сообщение,1,,,);
            
            Ответ = Новый HTTPСервисОтвет(406);
            Ответ.УстановитьТелоИзСтроки("QMC message. A lot of the equipment to the host " + ОсновныеДанные.Хост + ".");
            
            Возврат;
            
        КонецЕсли;
        
        // Нашли одну единицу оборудования с искомым хостом, но агент уже установлен.
        Если Оборудование.Количество() = 1 И ЗначениеЗаполнено(Оборудование[0].АгентКИП) Тогда
            
            Сообщение = "У оборудования  " + Оборудование[0] + " установлен агент КИП " + Оборудование[0].АгентКИП + ".
            |Для корректной работы установите оборудованию агента с id = " + ОсновныеДанные.ИдентификаторАгента + ".";
            
            // Тип инцидента "АгентКИП"
            ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("АгентКИП");
            ТипИнцидентаАгентКИП = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, "АгентКИП", Перечисления.УровниИнцидентов.Предупреждение);
            
            // Инцидент "Ошибка инициализации оборудования"
            ХешИнцидента = Справочники.Инциденты.ХешИнцидента("Ошибка инициализации оборудования" + ОсновныеДанные.Хост);
            Инцидент = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, "Ошибка инициализации оборудования", Ложь);
            
            НавигационнаяСсылкаИсточника = Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(Оборудование[0]), "Оборудование: " + Оборудование[0]);
            
            ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидентаАгентКИП, Инцидент, ОсновныеДанные.СтрокаПодключения,,Сообщение,1,,,,,НавигационнаяСсылкаИсточника);
            
            Ответ = Новый HTTPСервисОтвет(406);
            Ответ.УстановитьТелоИзСтроки("QMC message. Equipment has agent. Host = " + ОсновныеДанные.Хост + ".");
            
            Возврат;
            
        КонецЕсли;
        
        // Нашли одну единицу оборудования с искомым хостом, агент не заполнен.
        Если Оборудование.Количество() = 1 И НЕ ЗначениеЗаполнено(Оборудование[0].АгентКИП) Тогда
            
            ОборудованиеОбъект = Оборудование[0].ПолучитьОбъект();
            ОборудованиеОбъект.АгентКИП = ОсновныеДанные.АгентКИП;
            ОборудованиеОбъект.ИспользоватьВнешнегоАгента = Истина;
            Если ОборудованиеОбъект.ПериодКонтроля = 0 Тогда
                ОборудованиеОбъект.ПериодКонтроля = 240;
            КонецЕсли;
            Если ОборудованиеОбъект.МинимальныйПроцентДоступности = 0 Тогда
                ОборудованиеОбъект.МинимальныйПроцентДоступности = 90;
            КонецЕсли;
            Если ОборудованиеОбъект.ДопустимоНетДанных = 0 Тогда
                ОборудованиеОбъект.ДопустимоНетДанных = 240;
            КонецЕсли;
            Если ОборудованиеОбъект.Таймаут = 0 Тогда
                ОборудованиеОбъект.Таймаут = 3;
            КонецЕсли;
            
            ОборудованиеОбъект.Записать();
                        
            АгентКИПВЦКК.ЗагрузитьИнформациюОСистеме(ОборудованиеОбъект.Ссылка, Данные["computerInfo"]["systemInfoBrief"]);
            
            Оборудование = ОборудованиеОбъект.Ссылка;
            
        Иначе
            
            ТекПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
            Если ТекПользователь.Роли.Содержит(Метаданные.Роли.АгентПолныеПрава) Тогда
                
                РольСбораДамповИспользование = Ложь;
                
                Роли = Данные["Roles"];
                Если Роли <> Неопределено Тогда
                    РольСбораДамповИспользование = Данные["Roles"]["DUMPS_COLLECT"];
                КонецЕсли;
                
                ДополнительныеПараметры = Новый Структура;
                ДополнительныеПараметры.Вставить("РегистрироватьДампы", РольСбораДамповИспользование); 
                ДополнительныеПараметры.Вставить("Адрес", Данные["computerInfo"]["adress"]); 
                ДополнительныеПараметры.Вставить("МакАдрес", Данные["computerInfo"]["mac"]);
                
                РолиОборудования = Новый Массив;
                ИмяОС = ВРЕГ(Данные["computerInfo"]["systemInfoBrief"]["osType"]);
                Если СтрНайти(ИмяОС, "WINDOWS") > 0 Тогда
                    ДополнительныеПараметры.Вставить("ТипОС", Перечисления.ТипОС.Windows);
                    РолиОборудования.Добавить(Справочники.РолиОборудования.СерверWindows);
                ИначеЕсли СтрНайти(ИмяОС, "LINUX") > 0 Тогда
                    РолиОборудования.Добавить(Справочники.РолиОборудования.СерверLinux);
                    ДополнительныеПараметры.Вставить("ТипОС", Перечисления.ТипОС.Linux);
                КонецЕсли;
                                
                Роли = Данные["computerInfo"]["systemInfoBrief"]["roles"];
                Если Роли <> Неопределено Тогда
                    Для Каждого ТекРоль Из Роли Цикл
                        
                        Если ТекРоль.Ключ = "WorkingServer1c" И ТекРоль.Значение Тогда
                            РолиОборудования.Добавить(Справочники.РолиОборудования.РабочийСервер1С);
                        ИначеЕсли ТекРоль.Ключ = "MSSQL" И ТекРоль.Значение Тогда
                            РолиОборудования.Добавить(Справочники.РолиОборудования.СерверMSSQL);
                        ИначеЕсли ТекРоль.Ключ = "PostgreSQL" И ТекРоль.Значение Тогда
                            РолиОборудования.Добавить(Справочники.РолиОборудования.СерверPostgreSQL);
                        ИначеЕсли ТекРоль.Ключ = "Apache" И ТекРоль.Значение Тогда
                            РолиОборудования.Добавить(Справочники.РолиОборудования.Apache);
                        ИначеЕсли ТекРоль.Ключ = "IIS" И ТекРоль.Значение Тогда
                            РолиОборудования.Добавить(Справочники.РолиОборудования.СерверIIS);    
                        КонецЕсли;
                        
                    КонецЦикла;
                КонецЕсли;
                ДополнительныеПараметры.Вставить("РолиОборудования", РолиОборудования);
                                
                Если НЕ ЗначениеЗаполнено(ПлощадкаПоУмолчанию) Тогда
                    ПлощадкаПоУмолчанию = Справочники.ПлощадкиЭксплуатации.Основная();
                    Константы.ПлощадкаЭксплуатацииПоУмолчанию.Установить(ПлощадкаПоУмолчанию);
                КонецЕсли;
                
                ДополнительныеПараметры.Вставить("ПлощадкаЭксплуатации", Константы.ПлощадкаЭксплуатацииПоУмолчанию.Получить());
                
                НастройкиПоУмолчанию = Справочники.Оборудование.ПрочитатьНастройкиПоУмолчанию();
                ДополнительныеПараметры.Вставить("НастройкиПоУмолчанию", НастройкиПоУмолчанию);
                                
                Оборудование = Справочники.Оборудование.СоздатьОборудованиеАгента(ОсновныеДанные.АгентКИП, ДополнительныеПараметры);
                
                АгентКИПВЦКК.ЗагрузитьИнформациюОСистеме(Оборудование, Данные["computerInfo"]["systemInfoBrief"]);
                
            Иначе
                
                Сообщение = "Нет прав на создание оборудования! Установите роль ""АгентПолныеПрава"".";
                ИнцидентыСервер.ОткрытьИнцидент("АгентКИП", "Ошибка инициализации оборудования " + ОсновныеДанные.Хост, ОсновныеДанные.СтрокаПодключения,,Сообщение,1,,,Перечисления.УровниИнцидентов.Предупреждение);
                
                Ответ = Новый HTTPСервисОтвет(403);
                Ответ.УстановитьТелоИзСтроки("QMC message. No permission to create equipment.");
                
                Возврат;
                
            КонецЕсли;
        КонецЕсли;
                   
    КонецЕсли;
    
    
    Если НЕ Оборудование.ИспользоватьВнешнегоАгента Тогда
        
        Ответ = Новый HTTPСервисОтвет(403);
        Ответ.УстановитьТелоИзСтроки("QMC message. The equipment '" + Оборудование +"' it is forbidden to use an agent.");
        
        Возврат;
        
    КонецЕсли;
    
    Если Оборудование.ПлощадкаЭксплуатации.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.Корзина Тогда
        
        Ответ = Новый HTTPСервисОтвет(403);
        Ответ.УстановитьТелоИзСтроки("QMC message. The equipment '" + Оборудование +"' it is forbidden to use an agent. Equipment in the trash bin.");
        
        Возврат;
        
    КонецЕсли;
    
    ВсеАдреса = Справочники.Оборудование.ВсеАдреса(Оборудование);
    
    Если ВсеАдреса[ВРег(ОсновныеДанные.Хост)] = Неопределено Тогда
        
        Сообщение = "У оборудования  " + Оборудование + " не найден хост агента '" + ОсновныеДанные.Хост +"'.
        |Для корректной работы установите оборудованию или сетевому адаптеру хост агента.
        |Для нового агента удалите старого из оборудования.";
        
        // Тип инцидента "АгентКИП"
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("АгентКИП");
        ТипИнцидентаАгентКИП = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, "АгентКИП", Перечисления.УровниИнцидентов.Предупреждение);
        
        // Инцидент "Ошибка привязки агента"
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента("Ошибка привязки агента" + ОсновныеДанные.ИдентификаторАгента);
        Инцидент = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, "Ошибка привязки агента", Ложь);
        
        НавигационнаяСсылкаИсточника = Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(Оборудование), "Оборудование: " + Оборудование);
        
        ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидентаАгентКИП, Инцидент, ОсновныеДанные.СтрокаПодключения,,Сообщение,1,,,,,НавигационнаяСсылкаИсточника);
        
        Ответ = Новый HTTPСервисОтвет(406);
        Ответ.УстановитьТелоИзСтроки("QMC message. Equipment and agent have different hosts.");
        
        Возврат;        
        
    Иначе
        
        // Тип инцидента "АгентКИП"
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("АгентКИП");
        ТипИнцидентаАгентКИП = Справочники.ТипыИнцидентов.СсылкаПоХешу(ХешТипа);
        
        // Инцидент "Ошибка инициализации оборудования"
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента("Ошибка инициализации оборудования" + ОсновныеДанные.Хост);
        Инцидент = Справочники.Инциденты.НайтиСсылкуПоХешу(ХешИнцидента);
        ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидентаАгентКИП, Инцидент, Истина);
        
        // Инцидент "Ошибка привязки агента"
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента("Ошибка привязки агента" + Данные["idAgent"]);
        Инцидент = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, "Ошибка привязки агента", Ложь);
        ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидентаАгентКИП, Инцидент, Истина);
        
        ДанныеОтвета = Новый Соответствие;
        ДанныеОтвета.Вставить("PRODUCTION_SITE", Оборудование.ПлощадкаЭксплуатации.Наименование);
        ДанныеОтвета.Вставить("ServicesData", Новый Соответствие);
        
        ServicesData = ДанныеОтвета["ServicesData"];
        ServicesData.Вставить("PERFORMANCE_MONITOR", Справочники.Оборудование.НастройкиАгентаМониторПроизводительности(Оборудование));
                        
        Ответ = Новый HTTPСервисОтвет(200);
        ЗаписьJSON = Новый ЗаписьJSON();
        ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
        ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета);
        ТелоОтвета = ЗаписьJSON.Закрыть();
        Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
        
    КонецЕсли;
    
    #Иначе
        
        ВызватьИсключение НСтр("ru='Внешнее соединение не поддерживается!'");
    
    #КонецЕсли
    
КонецПроцедуры

Процедура ПередОбработкойДанных(Данные, ПараметрыАгента, Ответ) Экспорт
    
    #Если НЕ ВнешнееСоединение Тогда
        
    Если Общий.ВерсияЦКК() <> Общий.СохраненнаяВерсия() Тогда
        
        Ответ = Новый HTTPСервисОтвет(403);
        Ответ.УстановитьТелоИзСтроки("Execution temporarily unavailable due to upgrade to new version.");
        
        Возврат;
        
    КонецЕсли;
    
    ПараметрыАгентаЦКК = Справочники.Оборудование.ПолучитьПараметры(ПараметрыАгента.Ссылка);
    Если ПараметрыАгентаЦКК = Неопределено Тогда
        
        Ответ = Новый HTTPСервисОтвет(406);
        Ответ.УстановитьТелоИзСтроки("QMC message. No equipment agent id " + ПараметрыАгента.УникальныйИдентификаторАгента + ".");
        
        Возврат;
        
    КонецЕсли;
    
    Для Каждого ТекПараметр Из ПараметрыАгентаЦКК Цикл
        ПараметрыАгента.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
    КонецЦикла;
    
    Если НЕ ПараметрыАгента.ИспользоватьВнешнегоАгента Тогда
        
        Ответ = Новый HTTPСервисОтвет(403);
        Ответ.УстановитьТелоИзСтроки("QMC message. The equipment '" + ПараметрыАгента.Оборудование +"' it is forbidden to use an agent.");
        
    КонецЕсли;
    
    #Иначе
        
        ВызватьИсключение НСтр("ru='Внешнее соединение не поддерживается!'");
    
    #КонецЕсли
    
КонецПроцедуры

Процедура ПриОбработкеДанных(Данные, ПараметрыАгента) Экспорт

    ПриОбработкеДанныхДоступность(Данные, ПараметрыАгента);
    ПриОбработкеДанныхДампы(Данные, ПараметрыАгента);
    ПриОбработкеДанныхИнформацияОСистеме(Данные, ПараметрыАгента);
    ПриОбработкеДанныхГлавныйСервис(Данные, ПараметрыАгента);
    ПриОбработкеДанныхКонтрольДоступностиИнформационныхБаз(ПараметрыАгента, Данные);
    ПриОбработкеДанныхМониторПроизводительности(ПараметрыАгента, Данные);
    ПриОбработкеДанныхКластер1С(ПараметрыАгента, Данные);
    ПриОбработкеДанныхЛицензии1С(ПараметрыАгента, Данные);
    
КонецПроцедуры

Процедура ПередОтправкойОтветаАгенту(ТелоОтвета, Данные, ПараметрыАгента) Экспорт
    
    ПередОтправкойОтветаАгентуДампы(ТелоОтвета, Данные, ПараметрыАгента);
    ПередОтправкойОтветаАгентуИнформацияОСистеме(ТелоОтвета, Данные, ПараметрыАгента);
    ПередОтправкойОтветаАгентуКонтрольДоступностиИнформационныхБаз(ТелоОтвета, Данные, ПараметрыАгента);
    ПередОтправкойОтветаАгентуМониторПроизводительности(ТелоОтвета, Данные, ПараметрыАгента);
    ПередОтправкойОтветаАгентуКластер1С(ТелоОтвета, Данные, ПараметрыАгента);
    ПередОтправкойОтветаАгентуЛицензии1С(ТелоОтвета, Данные, ПараметрыАгента);
    ПередОтправкойОтветаАгентуГлавныйСервис(ТелоОтвета, Данные, ПараметрыАгента);
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОсновныеДанныеПакета(Данные)
    
    ОсновныеДанные = Новый Структура;
    
    ОсновныеДанные.Вставить("ИдентификаторАгента", Данные["idAgent"]);
    ОсновныеДанные.Вставить("АгентКИП", Данные["refAgent"]);
    ОсновныеДанные.Вставить("Хост", Данные["computerInfo"]["host"]);
    
    ВерсияПакета = Данные["version"];
    Если ВерсияПакета = Неопределено Тогда
        ВерсияПакета = "1.0.0.1";
    КонецЕсли;
    ОсновныеДанные.Вставить("ВерсияПакета", ВерсияПакета);
    
    СтрокаПодключения = "host=" + Данные["computerInfo"]["host"] + ";version=" + ВерсияПакета + ";id=" + Данные["idAgent"]; 
    ОсновныеДанные.Вставить("СтрокаПодключения", СтрокаПодключения);
    
    Возврат ОсновныеДанные;
    
КонецФункции

Процедура ОшибкаОтсутствуетИдентификаторАгента(Данные)
    
    ОсновныеДанные = ОсновныеДанныеПакета(Данные);
    Сообщение = "Версии агента ниже 1.0.2.1 не поддерживаются!";
    
    ИнцидентыСервер.ОткрытьИнцидент("АгентКИП", "Ошибка инициализации " + ОсновныеДанные.Хост, ОсновныеДанные.СтрокаПодключения,,Сообщение,1,,,Перечисления.УровниИнцидентов.Предупреждение);
    
КонецПроцедуры

Процедура ОшибкаИмяХостаАгентаНеСоответсвуетПолученному(Данные)
    
    ОсновныеДанные = ОсновныеДанныеПакета(Данные);
    Сообщение = "Агент  " + ОсновныеДанные.ИдентификаторАгента + " запущен на другом хосте '" + ОсновныеДанные.Хост + "'.
    |Для корректной работы установите агенту новый хост запуска.";
    
    // Тип инцидента "АгентКИП"
    ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("АгентКИП");
    ТипИнцидентаАгентКИП = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, "АгентКИП", Перечисления.УровниИнцидентов.Предупреждение);
    
    // Инцидент "Ошибка привязки агента"
    ХешИнцидента = Справочники.Инциденты.ХешИнцидента("Ошибка привязки агента" + Данные["idAgent"]);
    Инцидент = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, "Ошибка привязки агента", Ложь);
    
    НавигационнаяСсылкаИсточника = Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(ОсновныеДанные.АгентКИП), "Агент КИП: " + ОсновныеДанные.АгентКИП);
    
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидентаАгентКИП, Инцидент, ОсновныеДанные.СтрокаПодключения,,Сообщение,1,,,,,НавигационнаяСсылкаИсточника);
    
КонецПроцедуры

Процедура ПриОбработкеДанныхДоступность(Данные, ПараметрыАгента)
    
    Если ПараметрыАгента.ПроверятьДоступность Тогда
        РегистрыСведений.ДоступностьОборудования.ИзменитьДоступность(ТекущаяДата(), ПараметрыАгента.Оборудование, 1, ПараметрыАгента.ПериодКонтроля, ПараметрыАгента.МинимальныйПроцентДоступности);
    КонецЕсли;
    
КонецПроцедуры

Процедура ПриОбработкеДанныхДампы(Данные, ПараметрыАгента)
    
    DUMPS = Данные["ServicesData"]["DUMPS"];
    Если DUMPS = Неопределено Тогда
        DUMPS = Новый Соответствие;
        Данные["ServicesData"].Вставить("DUMPS", DUMPS);
    КонецЕсли;
    
    РабочийСервер1С = Справочники.ОбъектыКонтроля.НайтиРабочийСервер1сОборудования(ПараметрыАгента.Оборудование);
    Если РабочийСервер1С <> Неопределено Тогда
        
        КонтрольнаяПроцедура = Справочники.ОбъектыКонтроля.ПолучитьКонтрольУстойчивости(РабочийСервер1С);
        Настройки = Справочники.КонтрольныеПроцедуры.ПолучитьНастройкиСборДампов(КонтрольнаяПроцедура);
        
        Если Настройки <> Неопределено Тогда
            DUMPS.Вставить("DUMPS_STORAGE", Настройки.КаталогЭкспортаДампов);
        КонецЕсли;
        
        АгентКИПвЦКК.ОбработатьИнформациюОДампах(РабочийСервер1С, DUMPS, ПараметрыАгента);
        РегистрыСведений.СостоянияКонтрольныхПроцедур.УстановитьСостояние(КонтрольнаяПроцедура, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноПроблемНет);
        Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, "Проблем нет", "");
        //СборДамповСервер.ЗакрытьИнцидентНеНайденРабочийСервер(ПараметрыАгента.Ссылка);
        
    Иначе
        
        АгентКИПвЦКК.ОбработатьИнформациюОДампах(ПараметрыАгента.Оборудование, DUMPS, ПараметрыАгента);
        //Если ПараметрыАгента.МониторингКластеров Тогда
        //    
        //    Сообщение = "Не найден рабочий сервер 1С для оборудования " + ПараметрыАгента.Оборудование + ", на котором установлен агент.
        //    |Необходим рабочий сервер 1С с реквизитом компьютер = " + ПараметрыАгента.Оборудование + ".";
        //    СборДамповСервер.ОткрытьИнцидентНеНайденРабочийСервер(ПараметрыАгента.Ссылка, Сообщение);
        //                
        //Иначе
        //    
        //    СборДамповСервер.ЗакрытьИнцидентНеНайденРабочийСервер(ПараметрыАгента.Ссылка, "Мониторинг кластера отключен.");
        //    
        //КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ПриОбработкеДанныхИнформацияОСистеме(Данные, ПараметрыАгента)
    
    Если Данные["ServicesData"]["COMPUTER_INFO"]["systemInfoFull"] <> Неопределено Тогда
        
        ОборудованиеОбъект = ПараметрыАгента.Оборудование.ПолучитьОбъект();
        ОборудованиеОбъект.ДатаОбновленияИнформацииОСистеме = ТекущаяУниверсальнаяДата();
        ОборудованиеОбъект.Записать();
        
        Параметры = Новый Массив;
        Параметры.Добавить(ПараметрыАгента.Оборудование);
        Параметры.Добавить(Данные["ServicesData"]["COMPUTER_INFO"]["systemInfoFull"]);
        
        ОтборФоновогоЗадания = Новый Структура("Ключ, Состояние", ПараметрыАгента.Оборудование, СостояниеФоновогоЗадания.Активно);
        ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновогоЗадания);
        Если ФЗ.Количество() = 0 Тогда
            ФоновыеЗадания.Выполнить("АгентКИПвЦКК.ЗагрузитьИнформациюОСистеме", Параметры, ПараметрыАгента.Оборудование, "Загрузка информации о системе для " + ПараметрыАгента.Оборудование);
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ПриОбработкеДанныхГлавныйСервис(Данные, ПараметрыАгента)
    
    ServicesData = Данные["ServicesData"];
    Если ServicesData <> Неопределено Тогда
        
        MAIN_SERVICE = Данные["ServicesData"]["MAIN_SERVICE"];
        
        Если MAIN_SERVICE <> Неопределено Тогда
            
            commands = MAIN_SERVICE["commands"];
            Если commands <> Неопределено Тогда
                Для Каждого Команда Из commands Цикл
                    
                    ДанныеДляЗаписи = Новый Соответствие;
                    ДанныеДляЗаписи.Вставить("GuidCommand", Команда.Ключ);
                    Для Каждого ТекЗначение Из Команда.Значение Цикл
                        ДанныеДляЗаписи.Вставить(ТекЗначение.Ключ, ТекЗначение.Значение);
                    КонецЦикла;
                    
                    ЗаписьJSON = Новый ЗаписьJSON();
                    ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
                    ЗаписатьJSON(ЗаписьJSON, ДанныеДляЗаписи);
                    ДанныеJSON = ЗаписьJSON.Закрыть();
                    РегистрыСведений.КомандыАгентаКИП.УстановитьСтатусРезультатКоманды(Новый УникальныйИдентификатор(Команда.Ключ), Перечисления.СтатусыКомандАгентаКИП.Выполнена, ДанныеJSON);
                    
                КонецЦикла;
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ПриОбработкеДанныхКонтрольДоступностиИнформационныхБаз(ПараметрыАгента, Данные)
    
    Если ПараметрыАгента.КонтрольДоступностиИнформационныхБаз Тогда
        
        ДанныеКонтрольДоступности = Данные["ServicesData"][ВРег(Перечисления.ТипыКомандАгентаКИП.RemoteControl)];
        Если ДанныеКонтрольДоступности <> Неопределено Тогда
            
            ПРОБЛЕМ_НЕТ = "Проблем нет";
            ПРОБЛЕМЫ_ЕСТЬ = "Проблемы есть";
            
            Для Каждого ТекЭлемент Из ДанныеКонтрольДоступности["checkingInfoBase"] Цикл
                
                ИнформационнаяБаза = Справочники.ОбъектыКонтроля.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекЭлемент.Ключ));
                
                РезультатыПодключения = ТекЭлемент.Значение;
                МаксимальнаяДатаПроверкиUTC = Дата(1,1,1);
                Для Каждого РезультатПодключения Из РезультатыПодключения Цикл
                    
                    Период = XMLЗначение(Тип("Дата"), РезультатПодключения["timeUTC"]);
                    Если МаксимальнаяДатаПроверкиUTC < Период Тогда
                        МаксимальнаяДатаПроверкиUTC = Период;
                    КонецЕсли;
                                        
                    Результат = РезультатПодключения["result"];
                    Описание = РезультатПодключения["description"];
                    
                    ПараметрыДоступности = Новый Структура("Период, Источник, Доступность, ДополнительнаяИнформация");
                    ПараметрыДоступности.Период = Период;
                    ПараметрыДоступности.Источник = ПараметрыАгента.Ссылка;
                    ПараметрыДоступности.Доступность = ?(Результат, 1, 0);
                    ПараметрыДоступности.ДополнительнаяИнформация = Описание;
                    
                    ДопПараметры = Новый Структура;
                    ДопПараметры.Вставить("Период", Период);
                    ДопПараметры.Вставить("ОбъектКонтроля", ИнформационнаяБаза);
                    Общий.ЗаписатьВЖурналКонтроля(ПараметрыАгента.Ссылка, ?(Результат, ПРОБЛЕМ_НЕТ, ПРОБЛЕМЫ_ЕСТЬ), Описание, ДопПараметры);
                    
                    КонтрольПодключенийСервер.ЗаписатьДанныеОДоступности(ИнформационнаяБаза, ПараметрыДоступности);
                    
                КонецЦикла;
                
                Если РезультатыПодключения.Количество() > 0 Тогда
                    
                    ПараметрыАнализаДоступности = Новый Структура;
                    ПараметрыАнализаДоступности.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
                    ПараметрыАнализаДоступности.Вставить("ОбъектКонтроля", ИнформационнаяБаза);
                    ПараметрыАнализаДоступности.Вставить("КонтрольнаяПроцедура", ПараметрыАгента.Ссылка);
                    ПараметрыАнализаДоступности.Вставить("ПериодКонтроля", ПараметрыАгента.ПериодКонтроляИнформационнойБазы);
                    ПараметрыАнализаДоступности.Вставить("МинимальныйПроцентДоступности", ПараметрыАгента.МинимальныйПроцентДоступностиИнформационнойБазы);
                    ПараметрыАнализаДоступности.Вставить("ТекущийПроцентДоступности", -1);
                    ПараметрыАнализаДоступности.Вставить("ТекущаяДата", МаксимальнаяДатаПроверкиUTC);
                    КонтрольПодключенийСервер.ПровестиАнализДоступности(ПараметрыАнализаДоступности);
                    
                    АгентКИПвЦКК.ИзменитьИнцидентКонтрольДоступностиИнформационнойБазы(ПараметрыАнализаДоступности);
                    
                    ПараметрыТекущегоСостояния = Новый Структура;
                    ПараметрыТекущегоСостояния.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
                    ПараметрыТекущегоСостояния.Вставить("Источник", ПараметрыАгента.Ссылка);
                    ПараметрыТекущегоСостояния.Вставить("ТекущийПроцентДоступности", ПараметрыАнализаДоступности.ТекущийПроцентДоступности);
                    РегистрыСведений.КонтрольПодключенийТекущееСостояние.ЗаписатьТекущееСостояние(ПараметрыТекущегоСостояния, Результат);
                    
                КонецЕсли;
                
            КонецЦикла;
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

#Область ПриОбработкеДанныхМониторПроизводительности

Процедура ПриОбработкеДанныхМониторПроизводительности(ПараметрыАгента, Данные)
    
    ServicesData = Данные["ServicesData"];
    Если ServicesData <> Неопределено Тогда
        
        PERFORMANCE_MONITOR = ServicesData["PERFORMANCE_MONITOR"];
        Если PERFORMANCE_MONITOR <> Неопределено Тогда
            
            counters = PERFORMANCE_MONITOR["counters"]; 
            Если counters <> Неопределено Тогда
                ПриОбработкеДанныхМониторПроизводительностиCounters(counters, ПараметрыАгента);
            КонецЕсли;
            
            countersBuffer = PERFORMANCE_MONITOR["countersBuffer"];
            Если countersBuffer <> Неопределено Тогда
                ПриОбработкеДанныхМониторПроизводительностиCountersBuffer(countersBuffer, ПараметрыАгента);
            КонецЕсли;
            
            countersCur = PERFORMANCE_MONITOR["countersCur"]; 
            Если countersCur <> Неопределено Тогда
                ПриОбработкеДанныхМониторПроизводительностиCountersCur(countersCur, ПараметрыАгента);
            КонецЕсли;
            
            incidents = PERFORMANCE_MONITOR["incidents"];
            Если incidents <> Неопределено Тогда
                ПриОбработкеДанныхМониторПроизводительностиIncidents(incidents, ПараметрыАгента);
            КонецЕсли;
                        
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ПриОбработкеДанныхМониторПроизводительностиCounters(counters, ПараметрыАгента)
    
    ДанныеСчетчиков = Новый Массив;
    
    ПлощадкаЭксплуатацииНаименование = ПараметрыАгента.Оборудование.ПлощадкаЭксплуатации.Наименование;
    
    Для Каждого ТекСчетчик Из counters Цикл
        
        ДанныеСчетчика = Новый Соответствие;
        
        ПолноеИмяСчетчика = Новый Массив;
        ПолноеИмяСчетчика.Добавить("Производительность оборудования");
        ПолноеИмяСчетчика.Добавить(ПлощадкаЭксплуатацииНаименование);
        ПолноеИмяСчетчика.Добавить(ПараметрыАгента.Хост);
        ПолноеИмяСчетчика.Добавить(ТекСчетчик.Ключ);
        
        ДанныеСчетчика.Вставить("name", ПолноеИмяСчетчика);
        
        Значение = ТекСчетчик.Значение;
        ДанныеСчетчика.Вставить("min", Значение["min"]);
        ДанныеСчетчика.Вставить("max", Значение["max"]);
        ДанныеСчетчика.Вставить("avg", Значение["avg"]);
        ДанныеСчетчика.Вставить("counter", Значение["count"]);
        
        ДанныеСчетчиков.Добавить(ДанныеСчетчика);
        
    КонецЦикла;
    
    ЗаписьJSON = Новый ЗаписьJSON();
    ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
    ЗаписатьJSON(ЗаписьJSON, ДанныеСчетчиков);
    
    РегистрыСведений.СтатистикаБуфер.ДобавитьДанные(ЗаписьJSON.Закрыть());
    
КонецПроцедуры

Процедура ПриОбработкеДанныхМониторПроизводительностиCountersBuffer(countersBuffer, ПараметрыАгента)
    
    ЧасовойПоясИБ = ПолучитьЧасовойПоясИнформационнойБазы();
    НаборЗаписей = РегистрыСведений.СтатистикаБуферДата.СоздатьНаборЗаписей();
    ПлощадкаЭксплуатацииНаименование = ПараметрыАгента.Оборудование.ПлощадкаЭксплуатации.Наименование;
    
    Для Каждого ТекЭлемент Из countersBuffer Цикл
        
        НовЗапись = НаборЗаписей.Добавить();
        
        // Дата от агента КИП всегда должна быть в UTC, поэтому преобразуем ее к серверному времени
        НовЗапись.ДатаЗаписи = МестноеВремя(XMLЗначение(Тип("Дата"), ТекЭлемент.Ключ), ЧасовойПоясИБ);
        НовЗапись.ГУИД = Новый УникальныйИдентификатор;
        
        ДанныеСчетчиков = Новый Массив;
        Для Каждого ТекСчетчик Из ТекЭлемент.Значение Цикл
            
            ДанныеСчетчика = Новый Соответствие;
            
            ПолноеИмяСчетчика = Новый Массив;
            ПолноеИмяСчетчика.Добавить("Производительность оборудования");
            ПолноеИмяСчетчика.Добавить(ПлощадкаЭксплуатацииНаименование);
            ПолноеИмяСчетчика.Добавить(ПараметрыАгента.Хост);
            ПолноеИмяСчетчика.Добавить(ТекСчетчик.Ключ);
            
            ДанныеСчетчика.Вставить("name", ПолноеИмяСчетчика);
            
            Значение = ТекСчетчик.Значение;
            ДанныеСчетчика.Вставить("min", Число(Значение["min"]));
            ДанныеСчетчика.Вставить("max", Число(Значение["max"]));
            ДанныеСчетчика.Вставить("avg", Число(Значение["avg"]));
            ДанныеСчетчика.Вставить("counter", Число(Значение["count"]));
            
            ДанныеСчетчиков.Добавить(ДанныеСчетчика);
            
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON();
        ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
        ЗаписатьJSON(ЗаписьJSON, ДанныеСчетчиков);
        
        НовЗапись.Данные = ЗаписьJSON.Закрыть();
        
    КонецЦикла;
    
    НаборЗаписей.Записать(Ложь);
    НаборЗаписей.Очистить();
    
КонецПроцедуры

Процедура ПриОбработкеДанныхМониторПроизводительностиCountersCur(countersCur, ПараметрыАгента)
    
    ДатаЗамера = ТекущаяДата();
    
    ДанныеСчетчиков = Новый ТаблицаЗначений;
    ДанныеСчетчиков.Колонки.Добавить("СчетчикПроизводительности", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
    ДанныеСчетчиков.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,5)));
    
    Для Каждого ТекСчетчик Из countersCur Цикл
        НовСтрока = ДанныеСчетчиков.Добавить();
        НовСтрока.СчетчикПроизводительности = ТекСчетчик.Ключ;
        НовСтрока.Значение = ТекСчетчик.Значение;
    КонецЦикла;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ДанныеСчетчиков.СчетчикПроизводительности,
    |   ДанныеСчетчиков.Значение
    |ПОМЕСТИТЬ
    |   ДанныеСчетчиков
    |ИЗ
    |   &ДанныеСчетчиков КАК ДанныеСчетчиков
    |ИНДЕКСИРОВАТЬ ПО
    |   СчетчикПроизводительности
    |;
    |ВЫБРАТЬ
    |   &Сервер КАК Сервер,
    |   СпрСчетчикиПроизводительности.Ссылка КАК СчетчикПроизводительности,
    |   Значение КАК Значение,
    |   &ДатаЗамера
    |ИЗ
    |   ДанныеСчетчиков КАК ДанныеСчетчиков
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.СчетчикиПроизводительности КАК СпрСчетчикиПроизводительности
    |ПО
    |   СпрСчетчикиПроизводительности.Наименование = ДанныеСчетчиков.СчетчикПроизводительности
    |";
    
    Запрос.УстановитьПараметр("ДанныеСчетчиков", ДанныеСчетчиков);
    Запрос.УстановитьПараметр("Сервер", ПараметрыАгента.Оборудование);
    Запрос.УстановитьПараметр("ДатаЗамера", ДатаЗамера);
    
    Результат = Запрос.Выполнить();
    
    НаборЗаписей = РегистрыСведений.ТекущиеЗначенияПроизводительности.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Сервер.Установить(ПараметрыАгента.Оборудование);
    НаборЗаписей.Загрузить(Результат.Выгрузить());
    
    НаборЗаписей.Записать(Истина);
    
КонецПроцедуры

Процедура ПриОбработкеДанныхМониторПроизводительностиIncidents(incidents, ПараметрыАгента)
    
    АгентКИПвЦКК.ЗагрузитьИнцидентыМониторингПроизводительности(ПараметрыАгента.Ссылка, incidents);
    
КонецПроцедуры

#КонецОбласти

#Область ПриОбработкеДанныхКластер1С

Процедура ПриОбработкеДанныхКластер1С(ПараметрыАгента, Данные)
    
    ServicesData = Данные["ServicesData"];
    Если ServicesData <> Неопределено Тогда
        
        CLUSTER_1C = Данные["ServicesData"][Врег(Перечисления.ТипыКомандАгентаКИП.Cluster1C)];
        
        dumps_storage = Неопределено;
        DUMPS = Данные["ServicesData"][Врег(Перечисления.ТипыКомандАгентаКИП.Dumps)];
        Если DUMPS <> Неопределено Тогда
            dumps_storage = DUMPS["DUMPS_STORAGE"];
        КонецЕсли;
                
        Если CLUSTER_1C <> Неопределено Тогда
            
            ПараметрыРабочихПроцессовКластера = Новый Соответствие;
            
            portRAS = CLUSTER_1C["portRAS"];
            clusters = CLUSTER_1C["clusters"];
            monitoring = CLUSTER_1C["monitoring"];
            Если monitoring <> Неопределено Тогда
                Если ПараметрыАгента.МониторингКластеров <> monitoring Тогда
                    ПараметрыАгента.МониторингКластеров = monitoring;
                    Справочники.АгентыКИПДополнительныеРеквизиты.ЗаписатьРеквизит(ПараметрыАгента.Ссылка, "МониторингКластеров", monitoring); 
                КонецЕсли;
            КонецЕсли;
                        
            Если clusters <> Неопределено Тогда
                ПриОбработкеДанныхКластер1С_Clusters(ПараметрыАгента, ПараметрыРабочихПроцессовКластера, clusters, portRAS, dumps_storage);
            КонецЕсли;
            
            crashClusters = CLUSTER_1C["crashClusters"];
            Если crashClusters <> Неопределено Тогда
                ПриОбработкеДанныхКластер1С_crashClusters(ПараметрыАгента, crashClusters);
            КонецЕсли;
            
            deleteClusters = CLUSTER_1C["deleteClusters"];
            Если deleteClusters <> Неопределено Тогда
                ПриОбработкеДанныхКластер1С_deleteClusters(deleteClusters);
            КонецЕсли;
            
            checkStructure = CLUSTER_1C["checkStructure"];
            Если checkStructure <> Неопределено Тогда
                ПриОбработкеДанныхКластер1С_checkStructure(ПараметрыАгента, checkStructure);
            КонецЕсли;
                                    
            commands = CLUSTER_1C["commands"];
            Если commands <> Неопределено Тогда
                ПриОбработкеДанныхКластер1С_commands(commands);
            КонецЕсли;
            
            Если ЗначениеЗаполнено(ПараметрыРабочихПроцессовКластера) Тогда
                АгентКИПвЦКК.ЗаписатьПараметрыРабочихПроцессовКластера(ПараметрыРабочихПроцессовКластера);
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ПриОбработкеДанныхКластер1С_Clusters(ПараметрыАгента, ПараметрыРабочихПроцессовКластера, clusters, portRAS, dumps_storage)
    
    НачалоМинуты = НачалоМинуты(ТекущаяДата());
    НачалоМинутыUTC = НачалоМинуты(ТекущаяУниверсальнаяДата());
    
    НаборЗаписейСчетчики = РегистрыСведений.СтатистикаБуфер.СоздатьНаборЗаписей();
    НаборЗаписейЛицензии = РегистрыСведений.ПараметрыКластераБуфер.СоздатьНаборЗаписей();
    
    Для Каждого ТекКластер Из clusters Цикл
        
        Ключ = ТекКластер.Ключ;
        Значение = ТекКластер.Значение;
        
        Кластер1С = АгентКИПвЦКК.ОбработатьПараметрыКластера(Ключ, Значение, ПараметрыАгента.Ссылка, portRAS);
        Значение.Вставить("Ссылка", Кластер1С);
        
        Если Кластер1С.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда    
            Инциденты = Значение["incidents"];
            Если Инциденты <> Неопределено Тогда
                АгентКИПвЦКК.ЗагрузитьИнцидентыКластера(Кластер1С, Инциденты);
            КонецЕсли;
            
            workingServers = Значение["workingServers"];
            Если workingServers <> Неопределено Тогда
                
                ПараметрыРабочихСерверов = АгентКИПвЦКК.РабочийСервер1С(Значение["Ссылка"], workingServers, dumps_storage);
                Если ЗначениеЗаполнено(ПараметрыРабочихСерверов) Тогда
                    ПараметрыРабочихПроцессовКластера.Вставить(ТекКластер.Ключ, ПараметрыРабочихСерверов);
                КонецЕсли;
                
            КонецЕсли;
            
            deleteWorkingServers = Значение["deleteWorkingServers"];
            Если deleteWorkingServers <> Неопределено Тогда
                
                Для Каждого УникальныйИдентификаторРабСервер Из deleteWorkingServers Цикл
                    
                    РабочийСервер = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуРабочийСервер(УникальныйИдентификаторРабСервер);
                    Если РабочийСервер <> Справочники.ОбъектыКонтроля.ПустаяСсылка() Тогда
                        Кластер_1С.ОткрытьИнцидентРабочийСерверУдалениеОбъекта(РабочийСервер);
                    КонецЕсли;
                    
                КонецЦикла;
                
            КонецЕсли;
            
            infoBases = Значение["infoBases"];
            Если infoBases <> Неопределено Тогда
                АгентКИПвЦКК.ИнформационнаяБаза(Значение["Ссылка"], infoBases);
            КонецЕсли;
            
            deleteInfoBases = Значение["deleteInfoBases"];
            Если deleteInfoBases <> Неопределено Тогда
                
                Для Каждого УникальныйИдентификаторИнфоБаза Из deleteInfoBases Цикл
                    
                    ИнформационнаяБаза = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуИнформационнаяБаза(УникальныйИдентификаторИнфоБаза);
                    Если ИнформационнаяБаза <> Справочники.ОбъектыКонтроля.ПустаяСсылка() Тогда
                        Кластер_1С.ОткрытьИнцидентИнформационнаяБазаУдалениеОбъекта(ИнформационнаяБаза);
                    КонецЕсли;
                    
                КонецЦикла;
                
            КонецЕсли;
            
            checkStructure = Значение["checkStructure"];
            Если checkStructure <> Неопределено Тогда
                
                ИнформационныеБазыПроверки = Новый Соответствие;
                Для Каждого УникальныйИдентификаторИнформационнойБазы Из checkStructure["infoBases"] Цикл
                    ИнформационнаяБаза = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуИнформационнаяБаза(УникальныйИдентификаторИнформационнойБазы);
                    Если ИнформационнаяБаза <> Справочники.ОбъектыКонтроля.ПустаяСсылка() Тогда
                        ИнформационныеБазыПроверки.Вставить(ИнформационнаяБаза, Истина);
                    КонецЕсли;
                КонецЦикла;
                
                ИнформационныеБазы = Справочники.ОбъектыКонтроля.ИнформационныеБазыКластера(Кластер1С);
                Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
                    Если ИнформационныеБазыПроверки[ИнформационнаяБаза] = Неопределено Тогда
                        Кластер_1С.ОткрытьИнцидентИнформационнаяБазаУдалениеОбъекта(ИнформационнаяБаза);
                    КонецЕсли;
                КонецЦикла;
                
                РабочиеСерверыПроверки = Новый Соответствие;
                Для Каждого УникальныйИдентификаторРабочегоСервера Из checkStructure["workingServers"] Цикл
                    РабочийСервер = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуРабочийСервер(УникальныйИдентификаторРабочегоСервера);
                    Если РабочийСервер <> Справочники.ОбъектыКонтроля.ПустаяСсылка() Тогда
                        РабочиеСерверыПроверки.Вставить(РабочийСервер, Истина);
                    КонецЕсли;
                КонецЦикла;
                
                РабочиеСерверы = Справочники.ОбъектыКонтроля.РабочиеСерверыКластера(Кластер1С);
                Для Каждого РабочийСервер Из РабочиеСерверы Цикл
                    Если РабочиеСерверыПроверки[РабочийСервер] = Неопределено Тогда
                        Кластер_1С.ОткрытьИнцидентРабочийСерверУдалениеОбъекта(РабочийСервер);
                    КонецЕсли;
                КонецЦикла;
                
            КонецЕсли;
            
            counters = Значение["counters"]; 
            Если counters <> Неопределено Тогда
                
                НовЗаписьСчетчики = НаборЗаписейСчетчики.Добавить();
                НовЗаписьСчетчики.ДатаЗаписи = НачалоМинуты;
                НовЗаписьСчетчики.ГУИД = Новый УникальныйИдентификатор;
                
                ЗаписьJSON = Новый ЗаписьJSON();
                ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
                ЗаписатьJSON(ЗаписьJSON, counters);
                НовЗаписьСчетчики.Данные = ЗаписьJSON.Закрыть();
                
            КонецЕсли;
            
            licenses = Значение["licenses"];
            Если licenses <> Неопределено Тогда
                
                НовЗаписьЛицензия = НаборЗаписейЛицензии.Добавить();
                НовЗаписьЛицензия.Тип = "ПЛИЦ";
                НовЗаписьЛицензия.ДатаЗаписиМинутаUTC = НачалоМинутыUTC;
                НовЗаписьЛицензия.УникальныйИдентификаторЗаписи = Новый УникальныйИдентификатор;
                
                ЗаписьJSON = Новый ЗаписьJSON();
                ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
                ЗаписатьJSON(ЗаписьJSON, licenses);
                НовЗаписьЛицензия.Данные = ЗаписьJSON.Закрыть();
                
            КонецЕсли;
            
            licensesServ = Значение["licensesServ"];
            Если licensesServ <> Неопределено Тогда
                
                НовЗаписьЛицензия = НаборЗаписейЛицензии.Добавить();
                НовЗаписьЛицензия.Тип = "ПЛИЦ";
                НовЗаписьЛицензия.ДатаЗаписиМинутаUTC = НачалоМинутыUTC;
                НовЗаписьЛицензия.УникальныйИдентификаторЗаписи = Новый УникальныйИдентификатор;
                
                ЗаписьJSON = Новый ЗаписьJSON();
                ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
                ЗаписатьJSON(ЗаписьJSON, licensesServ);
                НовЗаписьЛицензия.Данные = ЗаписьJSON.Закрыть();
                
            КонецЕсли;
            
        Иначе
            
            Справочники.АгентыКИПДополнительныеРеквизиты.ЗаписатьРеквизит(ПараметрыАгента.Ссылка, "МониторингКластеров", Ложь);
            ПараметрыАгента.МониторингКластеров = Ложь;
            
        КонецЕсли;
        
    КонецЦикла;
    
    Если НаборЗаписейЛицензии.Количество() > 0 Тогда
        НаборЗаписейЛицензии.Записать(Ложь);
    КонецЕсли;
    
    Если НаборЗаписейСчетчики.Количество() > 0 Тогда
        НаборЗаписейСчетчики.Записать(Ложь);
    КонецЕсли;
    
КонецПроцедуры

Процедура ПриОбработкеДанныхКластер1С_crashClusters(ПараметрыАгента, crashClusters)
    
    Для Каждого уидКластера Из crashClusters Цикл
        Кластер1С = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуКластер(уидКластера);
        Если ЗначениеЗаполнено(Кластер1С) Тогда
            Справочники.ПараметрыПодключенияКластер1С.ИзменитьАктивноеПодключениеАгентКИП(Кластер1С.Подключение, ПараметрыАгента.Ссылка);
        КонецЕсли;                    
    КонецЦикла;
    
КонецПроцедуры

Процедура ПриОбработкеДанныхКластер1С_commands(commands)
    
    Для Каждого Команда Из commands Цикл
        
        Если ТипЗнч(Команда.Значение) = Тип("Строка") Тогда
            Если Команда.Значение = "OK" Тогда
                Результат = "{""GuidCommand"": """ + Команда.Ключ + """,""result"": ""ОК""}";
                РегистрыСведений.КомандыАгентаКИП.УстановитьСтатусРезультатКоманды(Новый УникальныйИдентификатор(Команда.Ключ), Перечисления.СтатусыКомандАгентаКИП.Выполнена, Результат);
            Иначе
                Результат = "{""GuidCommand"": """ + Команда.Ключ + """,""result"": """ + Команда.Значение + """}";
                РегистрыСведений.КомандыАгентаКИП.УстановитьСтатусРезультатКоманды(Новый УникальныйИдентификатор(Команда.Ключ), Перечисления.СтатусыКомандАгентаКИП.ВыполненаСОшибкой, Результат);
            КонецЕсли;
        Иначе
            
            ДанныеДляЗаписи = Новый Соответствие;
            ДанныеДляЗаписи.Вставить("GuidCommand", Команда.Ключ);
            Для Каждого ТекЗначение Из Команда.Значение Цикл
                ДанныеДляЗаписи.Вставить(ТекЗначение.Ключ, ТекЗначение.Значение);
            КонецЦикла;
            
            ЗаписьJSON = Новый ЗаписьJSON();
            ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
            ЗаписатьJSON(ЗаписьJSON, ДанныеДляЗаписи);
            ДанныеJSON = ЗаписьJSON.Закрыть();
            РегистрыСведений.КомандыАгентаКИП.УстановитьСтатусРезультатКоманды(Новый УникальныйИдентификатор(Команда.Ключ), Перечисления.СтатусыКомандАгентаКИП.Выполнена, ДанныеJSON);
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ПриОбработкеДанныхКластер1С_deleteClusters(deleteClusters)    
    
    Для Каждого УникальныйИдентификаторКластераСтрока Из deleteClusters Цикл
        
        Кластер1С = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуКластер(УникальныйИдентификаторКластераСтрока);
        Если Кластер1С <> Справочники.ОбъектыКонтроля.ПустаяСсылка() Тогда
            Кластер_1С.ОткрытьИнцидентКластерУдалениеОбъекта(Кластер1С);
        КонецЕсли;
                
    КонецЦикла;
    
КонецПроцедуры

Процедура ПриОбработкеДанныхКластер1С_checkStructure(ПараметрыАгента, checkStructure)
    
    Кластеры = Новый Соответствие;
    
    Для Каждого УникальныйИдентификаторКластера Из checkStructure Цикл
        
        Кластер = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуКластер(УникальныйИдентификаторКластера);
        Если Кластер <> Справочники.ОбъектыКонтроля.ПустаяСсылка() Тогда
            Кластеры.Вставить(Кластер, Истина);
        КонецЕсли;
        
    КонецЦикла;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   ПараметрыАгентКИП.Ссылка
    |ПОМЕСТИТЬ
    |   ПодключенияАгента
    |ИЗ
    |   Справочник.ПараметрыПодключенияКластер1С.АгентКИППараметры КАК ПараметрыАгентКИП
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ПараметрыПодключенияКластер1С КАК Параметры
    |ПО
    |   Параметры.Ссылка = ПараметрыАгентКИП.Ссылка
    |   И Параметры.ТипПодключения = &ТипПодключенияАгентКИП
    |ГДЕ
    |   ПараметрыАгентКИП.АгентКИП = &АгентКИП
    |ИНДЕКСИРОВАТЬ ПО
    |   ПараметрыАгентКИП.Ссылка
    |;
    |ВЫБРАТЬ
    |   Кластеры.Ссылка КАК Кластер
    |ИЗ
    |   Справочник.ОбъектыКонтроля КАК Кластеры
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   ПодключенияАгента КАК ПодключенияАгента
    |ПО
    |   Кластеры.Подключение = ПодключенияАгента.Ссылка
    |ГДЕ
    |   Кластеры.Владелец = &КластерСерверов1С
    |";
    
    Запрос.УстановитьПараметр("АгентКИП", ПараметрыАгента.Ссылка);
    Запрос.УстановитьПараметр("ТипПодключенияАгентКИП", Перечисления.ТипПодключенияКластер1С.АгентКИП);
    Запрос.УстановитьПараметр("КластерСерверов1С", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        Если Кластеры[Выборка.Кластер] = Неопределено Тогда
            Кластер_1С.ОткрытьИнцидентКластерУдалениеОбъекта(Выборка.Кластер);
        КонецЕсли;
        
    КонецЦикла;
        
КонецПроцедуры

#КонецОбласти

#Область ПриОбработкеДанныхЛицензии1С

Процедура ПриОбработкеДанныхЛицензии1С(ПараметрыАгента, Данные)
    
    ServicesData = Данные["ServicesData"];
    Если ServicesData <> Неопределено Тогда
        
        RING = Данные["ServicesData"][Врег(Перечисления.ТипыКомандАгентаКИП.Ring)];
        
        Если RING <> Неопределено Тогда
            
            Если RING["installed"] <> Неопределено И RING["installed"] Тогда
                
                ОборудованиеОбъект = ПараметрыАгента.Оборудование.ПолучитьОбъект();
                
                Если НЕ ЗначениеЗаполнено(ОборудованиеОбъект.ВерсияRing) И НЕ ЗначениеЗаполнено(ОборудованиеОбъект.ДатаUTCОбновленияЛицензий1С) Тогда
                    ОборудованиеОбъект.СобиратьДанныеЛицензий1С = RING["installed"];
                    ПараметрыАгента.СобиратьДанныеЛицензий1С = RING["installed"];
                КонецЕсли;
                
                ОборудованиеОбъект.ВерсияRing = RING["ringVersion"];
                ОборудованиеОбъект.ДатаUTCОбновленияЛицензий1С = Дата(RING["dateUTC"]);
                ОборудованиеОбъект.Записать();
                
                РегистрыСведений.ОборудованиеЛицензии1С.ЗагрузитьЛицензии(ПараметрыАгента.Оборудование, RING["license"]);
                
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

Процедура ПередОтправкойОтветаАгентуДампы(ТелоОтвета, Данные, ПараметрыАгента)
    
    ТелоОтвета.Вставить("DUMPS_COLLECT", ПараметрыАгента.РегистрироватьДампы);
    
    DUMPS = Данные["ServicesData"]["DUMPS"];
    Если DUMPS <> Неопределено Тогда
        
        DUMPS_ANSWER = Новый Соответствие;
        
        Для Каждого ТекущаяСекция Из DUMPS Цикл
            
            Если ТекущаяСекция.Ключ = "dumps" И ТекущаяСекция.Значение.Количество() > 0 Тогда
                DUMPS_ANSWER.Вставить(ТекущаяСекция.Ключ, ТекущаяСекция.Значение);
            ИначеЕсли ТекущаяСекция.Ключ = "processedDumps" И ТекущаяСекция.Значение.Количество() > 0 Тогда
                DUMPS_ANSWER.Вставить(ТекущаяСекция.Ключ, ТекущаяСекция.Значение);
            ИначеЕсли ТекущаяСекция.Ключ = "incidents" Тогда
                
                ИнцидентыЗакрытые = Новый Массив;
                Для Каждого Инцидент Из ТекущаяСекция.Значение Цикл
                    Если Инцидент["state"] = "CLOSE" Тогда
                        ИнцидентыЗакрытые.Добавить(Инцидент);
                    КонецЕсли;
                КонецЦикла;
                
                DUMPS_ANSWER.Вставить(ТекущаяСекция.Ключ, ИнцидентыЗакрытые);
                
            Иначе
                DUMPS_ANSWER.Вставить(ТекущаяСекция.Ключ, ТекущаяСекция.Значение);
            КонецЕсли;
                        
        КонецЦикла;
        
        Если ПараметрыАгента.Версия = "1.0.13.1" И DUMPS_ANSWER["dumps"] = Неопределено Тогда
            DUMPS_ANSWER.Вставить("dumps", Новый Структура("e", Новый Структура("e", "e")));
        КонецЕсли;
                        
    КонецЕсли;
    
    ТелоОтвета["ServicesData"].Вставить("DUMPS", DUMPS_ANSWER);
    
КонецПроцедуры

Процедура ПередОтправкойОтветаАгентуИнформацияОСистеме(ТелоОтвета, Данные, ПараметрыАгента)
    
    Если ПараметрыАгента.ДатаОбновленияИнформацииОСистеме + Константы.ПериодОбновленияИнформацииОСистеме.Получить() <= ТекущаяУниверсальнаяДата() Тогда
        ТелоОтвета["ServicesData"].Вставить("GET_SYSTEM_INFO", Истина);
    Иначе
        ТелоОтвета["ServicesData"].Вставить("GET_SYSTEM_INFO", Ложь);
    КонецЕсли;
    
КонецПроцедуры

Процедура ПередОтправкойОтветаАгентуКонтрольДоступностиИнформационныхБаз(ТелоОтвета, Данные, ПараметрыАгента)
    
    REMOTE_CONTROL = ТелоОтвета["ServicesData"][ВРег(Перечисления.ТипыКомандАгентаКИП.RemoteControl)];
    Если REMOTE_CONTROL = Неопределено Тогда
        REMOTE_CONTROL = Новый Соответствие;
        ТелоОтвета["ServicesData"].Вставить(ВРег(Перечисления.ТипыКомандАгентаКИП.RemoteControl), REMOTE_CONTROL);
    КонецЕсли;
    
    Если ПараметрыАгента.КонтрольДоступностиИнформационныхБаз Тогда
        REMOTE_CONTROL.Вставить("Enable", Истина);
    Иначе
        REMOTE_CONTROL.Вставить("Enable", Ложь);
    КонецЕсли;
    
КонецПроцедуры

Процедура ПередОтправкойОтветаАгентуМониторПроизводительности(ТелоОтвета, Данные, ПараметрыАгента)
    
    ServicesData = ТелоОтвета["ServicesData"];
    
    Если ServicesData = Неопределено Тогда
        ServicesData = Новый Соответствие;
        ServicesData.Вставить("PERFORMANCE_MONITOR", Новый Соответствие);
    КонецЕсли;
        
    ServicesData_PERFORMANCE_MONITOR = ServicesData["PERFORMANCE_MONITOR"];
    Если ServicesData_PERFORMANCE_MONITOR = Неопределено Тогда
        ServicesData_PERFORMANCE_MONITOR = Новый Соответствие;
        ServicesData.Вставить("PERFORMANCE_MONITOR", ServicesData_PERFORMANCE_MONITOR);
    КонецЕсли;
        
    КомандаОтправки = ServicesData_PERFORMANCE_MONITOR["command"];
    Если КомандаОтправки = Неопределено Тогда
        КомандаОтправки = Новый Соответствие;
        ServicesData_PERFORMANCE_MONITOR.Вставить("command", КомандаОтправки);
    КонецЕсли;
                    
    Если ПараметрыАгента.ОперативныйРежим Тогда
        КомандаОтправки.Вставить("everySecondMode", Истина);
    КонецЕсли;
    
    PERFORMANCE_MONITOR = Данные["ServicesData"]["PERFORMANCE_MONITOR"];
        
    Если PERFORMANCE_MONITOR <> Неопределено Тогда 
        
        incidents = PERFORMANCE_MONITOR["incidents"];
        
        Если incidents <> Неопределено Тогда
            
            ИнцидентыЗакрытые = Новый Массив;
            Для Каждого Инцидент Из incidents Цикл
                Если Инцидент["state"] = "CLOSE" Тогда
                    ИнцидентыЗакрытые.Добавить(Инцидент);
                КонецЕсли;
            КонецЦикла;
            
            Если ИнцидентыЗакрытые.Количество() > 0 Тогда
                КомандаОтправки.Вставить("incidents", ИнцидентыЗакрытые);
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
    КомандаОтправки.Вставить("enable", ?(ПараметрыАгента.СобиратьДанныеПроизводительности = 2, Истина, Ложь));
        
КонецПроцедуры

#Область ПередОтправкойОтветаАгентуКластер1С

Процедура ПередОтправкойОтветаАгентуКластер1С(ТелоОтвета, Данные, ПараметрыАгента)
    
    ServicesData = Данные["ServicesData"];
    ServicesDataNew = ТелоОтвета["ServicesData"];
    
    Если ServicesData <> Неопределено Тогда
        
        CLUSTER_1C = ServicesData[Врег(Перечисления.ТипыКомандАгентаКИП.Cluster1C)];
        
        Если CLUSTER_1C <> Неопределено Тогда
            
            CLUSTER_1C.Вставить("monitoring", ПараметрыАгента.МониторингКластеров);
            ПараметрыОтветаКластеров = ПередОтправкойОтветаАгентуКластер1С_Clusters(ТелоОтвета, Данные, ПараметрыАгента, CLUSTER_1C);
            
        КонецЕсли;
        
    КонецЕсли;
    
    command = ОбработатьКомандыКластеру(ServicesDataNew); 
    
    ПараметрыОтвета = Новый Соответствие;
    
    ПараметрыОтвета.Вставить("monitoring", ПараметрыАгента.МониторингКластеров);
    
    Если ЗначениеЗаполнено(ПараметрыОтветаКластеров) Тогда
        ПараметрыОтвета.Вставить("clusters", ПараметрыОтветаКластеров);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(command) Тогда
        ПараметрыОтвета.Вставить("command", command);
    КонецЕсли;
    
    ServicesDataNew.Вставить(Врег(Перечисления.ТипыКомандАгентаКИП.Cluster1C), ПараметрыОтвета);
    
    ТелоОтвета.Вставить("ServicesData", ServicesDataNew);
    
КонецПроцедуры

Функция ПередОтправкойОтветаАгентуКластер1С_Clusters(ТелоОтвета, Данные, ПараметрыАгента, CLUSTER_1C)
    
    clusters = CLUSTER_1C["clusters"];
    ПараметрыОтветаКластеров = Новый Соответствие;
    
    Если clusters <> Неопределено Тогда
        
        Для Каждого ТекКластер Из clusters Цикл
            
            Значение = ТекКластер.Значение;
            
            ПараметрыКластера = Новый Соответствие;
            
            Кластер1С = Значение["Ссылка"];
            НастройкиКластера = ОбщийСерверПовтИсп.НастройкиКластер1С(Кластер1С, Кластер1С.ВерсияДанных, Кластер1С.Подключение.ВерсияДанных);
            
            КонтрольПотребленияПамяти = ОбщийСерверПовтИсп.КонтрольПотребленияПамяти(Значение["Ссылка"], Значение["Ссылка"].ВерсияДанных);
            НастройкиКонтрольПотребленияПамяти = ОбщийСерверПовтИсп.НастройкиКонтрольПотребленияПамяти(КонтрольПотребленияПамяти, КонтрольПотребленияПамяти.ВерсияДанных);
            
            ПараметрыАутентификации = АгентКИПвЦКК.ПараметрыАутентификацииКластер(Значение, НастройкиКластера);
            ПараметрыКонтроля = АгентКИПвЦКК.ПараметрыКонтроляКластер(Значение, НастройкиКластера);
            ИнцидентыЗакрытые = АгентКИПвЦКК.ИнцидентыЗакрытыеКластер(Значение);
            
            ПараметрыИнформационныхБаз = АгентКИПвЦКК.ИнформационнаяБазаОтвет(Значение);
            ПараметрыРабочихСерверов = АгентКИПвЦКК.РабочийСервер1СОтвет(Значение);
            
            ПараметрыОтветаКластер = Новый Соответствие;
            Если НастройкиКластера.АктивноеПодключение = ПараметрыАгента["Ссылка"] Тогда
                ПараметрыОтветаКластер.Вставить("monitoring", НастройкиКластера.Мониторинг);
            Иначе
                ПараметрыОтветаКластер.Вставить("monitoring", Ложь);
            КонецЕсли;
            ПараметрыОтветаКластер.Вставить("monitoringSession", НастройкиКонтрольПотребленияПамяти.Мониторинг);
            ПараметрыОтветаКластер.Вставить("monitoringMaxMemorySizeMb", НастройкиКонтрольПотребленияПамяти.ПороговаяПамятьМБ);  
            
            Если ЗначениеЗаполнено(ПараметрыИнформационныхБаз) Тогда
                ПараметрыОтветаКластер.Вставить("infoBases", ПараметрыИнформационныхБаз);
            КонецЕсли;
            
            Если ЗначениеЗаполнено(ПараметрыАутентификации) Тогда
                ПараметрыОтветаКластер.Вставить("prm", ПараметрыАутентификации);  
            КонецЕсли;
            
            Если ЗначениеЗаполнено(ИнцидентыЗакрытые) Тогда
                ПараметрыОтветаКластер.Вставить("incidents", ИнцидентыЗакрытые); 
            КонецЕсли;
            
            Если ЗначениеЗаполнено(ПараметрыКонтроля) Тогда
                ПараметрыОтветаКластер.Вставить("сontrolParametrs", ПараметрыКонтроля);
            КонецЕсли;
            
            Если ЗначениеЗаполнено(ПараметрыРабочихСерверов) Тогда
                ПараметрыОтветаКластер.Вставить("workingServers", ПараметрыРабочихСерверов);
            КонецЕсли;
            
            ПараметрыОтветаКластеров.Вставить(ТекКластер.Ключ, ПараметрыОтветаКластер);
            
        КонецЦикла;
        
    КонецЕсли;
    
    Возврат ПараметрыОтветаКластеров;
    
КонецФункции

Функция ОбработатьКомандыКластеру(ServicesDataNew)
    
    command = Неопределено;
    prm = Неопределено;
    CLUSTER_1C_NEW = ServicesDataNew[Врег(Перечисления.ТипыКомандАгентаКИП.Cluster1C)];
    Если CLUSTER_1C_NEW <> Неопределено Тогда
        
        command = CLUSTER_1C_NEW["command"];
        Если command <> Неопределено Тогда
            
            cmd = command["cmd"];
            Если cmd = "checkAuth" Тогда
                ОбработатьКомандыКластеруCheckAuth(command);
            КонецЕсли;
            
            prm = command["prm"];
            Если prm <> Неопределено Тогда
                ОбработатьКомандыКластеруPrm(command, prm);
            КонецЕсли;
            
            infoBaseCommand = command["infoBaseCommand"];
            Если infoBaseCommand <> Неопределено Тогда
               ОбработатьКомандыКластеруInfoBaseCommand(infoBaseCommand);
            КонецЕсли;
                        
        КонецЕсли;
  
    КонецЕсли;
    
    Возврат command;
    
КонецФункции

Процедура ОбработатьКомандыКластеруCheckAuth(command)
    
    cmdPrm = command["cmdPrm"];
    
    УстановитьПривилегированныйРежим(Истина);
    НастройкиКластера = ХранилищеОбщихНастроек.Загрузить(command["cluster"], "checkAuth",, "АгентКИП");
    ХранилищеОбщихНастроек.Удалить(command["cluster"], "checkAuth", "АгентКИП");
    УстановитьПривилегированныйРежим(Ложь);
    
    Если НастройкиКластера <> Неопределено Тогда
        
        cmdPrm.Вставить("prm1", НастройкиКластера.prm1);
        cmdPrm.Вставить("prm2", НастройкиКластера.prm2);
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ОбработатьКомандыКластеруPrm(command, prm)
    
    Кластер = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуКластер(command["cluster"]);
    Настройки = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Кластер);
    prm["prm1"] = Настройки.АдминистраторКластера;
    prm["prm2"] = Настройки.ПарольАдминистратораКластера;
    
КонецПроцедуры

Процедура ОбработатьКомандыКластеруInfoBaseCommand(infoBaseCommand)
    
    cmd = infoBaseCommand["cmd"];
    
    Если cmd = "checkAuth" Тогда
        
        cmdPrm = infoBaseCommand["cmdPrm"];
        
        УстановитьПривилегированныйРежим(Истина);
        НастройкиИнформационнойБазы = ХранилищеОбщихНастроек.Загрузить(infoBaseCommand["infoBase"], "checkAuth",, "АгентКИП");
        ХранилищеОбщихНастроек.Удалить(infoBaseCommand["infoBase"], "checkAuth", "АгентКИП");
        УстановитьПривилегированныйРежим(Ложь);
        
        Если НастройкиИнформационнойБазы <> Неопределено Тогда
            
            cmdPrm.Вставить("prm1", НастройкиИнформационнойБазы.prm1);
            cmdPrm.Вставить("prm2", НастройкиИнформационнойБазы.prm2);
            
        КонецЕсли;
        
    ИначеЕсли cmd = "getPropertyInfoBase" Тогда
        
        cmdPrm = infoBaseCommand["cmdPrm"];
        Если cmdPrm <> Неопределено Тогда
            
            УстановитьПривилегированныйРежим(Истина);
            НастройкиИнформационнойБазы = ХранилищеОбщихНастроек.Загрузить(infoBaseCommand["infoBase"], "getPropertyInfoBase",, "АгентКИП");
            ХранилищеОбщихНастроек.Удалить(infoBaseCommand["infoBase"], "getPropertyInfoBase", "АгентКИП");
            УстановитьПривилегированныйРежим(Ложь);
            
            Если НастройкиИнформационнойБазы <> Неопределено Тогда
                
                cmdPrm.Вставить("prm1", НастройкиИнформационнойБазы.prm1);
                cmdPrm.Вставить("prm2", НастройкиИнформационнойБазы.prm2);
                
            КонецЕсли;
            
        КонецЕсли;
                
    КонецЕсли;
    
    
КонецПроцедуры

#КонецОбласти

Процедура ПередОтправкойОтветаАгентуЛицензии1С(ТелоОтвета, Данные, ПараметрыАгента)
    
    ServicesDataДанные = Данные["ServicesData"];
    Если ServicesDataДанные <> Неопределено Тогда
        RING_Данные = Данные["ServicesData"][Врег(Перечисления.ТипыКомандАгентаКИП.Ring)] <> Неопределено;
    КонецЕсли;                    
    
    Если RING_Данные Тогда 
        
        ServicesData = ТелоОтвета["ServicesData"];
        
        Ключ = Врег(Перечисления.ТипыКомандАгентаКИП.Ring); 
        
        Если ServicesData = Неопределено Тогда
            ServicesData = Новый Соответствие;
            ServicesData.Вставить(Ключ, Новый Соответствие);
        КонецЕсли;
        
        ServicesData_RING = ServicesData[Ключ];
        Если ServicesData_RING = Неопределено Тогда
            ServicesData_RING = Новый Соответствие;
            ServicesData.Вставить(Ключ, ServicesData_RING);
        КонецЕсли;
        
        КомандаОтправки = ServicesData_RING["command"];
        Если КомандаОтправки = Неопределено Тогда
            КомандаОтправки = Новый Соответствие;
            ServicesData_RING.Вставить("command", КомандаОтправки);
        КонецЕсли;
        
        КомандаОтправки.Вставить("enable", ПараметрыАгента.СобиратьДанныеЛицензий1С);
        
    КонецЕсли;
    
КонецПроцедуры


Процедура ПередОтправкойОтветаАгентуГлавныйСервис(ТелоОтвета, Данные, ПараметрыАгента)
    
    MAIN_SERVICE = ТелоОтвета["ServicesData"]["MAIN_SERVICE"];
    Если MAIN_SERVICE = Неопределено Тогда
        MAIN_SERVICE = Новый Соответствие;
    КонецЕсли;
    
    Если ПараметрыАгента.ОперативныйРежим Тогда
        MAIN_SERVICE.Вставить("SLEEP_SEND", 1);
    Иначе
        Если ПараметрыАгента.ПериодОтправкиДанных <> 10 Тогда
            MAIN_SERVICE.Вставить("SLEEP_SEND", ПараметрыАгента.ПериодОтправкиДанных);
        КонецЕсли;
    КонецЕсли;
    
    КомандаОтправкиJSON = РегистрыСведений.КомандыАгентаКИП.ПолучитьКомандуОтправки(ПараметрыАгента.Ссылка, Перечисления.ТипыКомандАгентаКИП.MainService, Перечисления.СтатусыКомандАгентаКИП.Отправлена);
    КомандаОтправки = Неопределено;
        
    Если КомандаОтправкиJSON <> Неопределено Тогда
        
        ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(КомандаОтправкиJSON);
		КомандаОтправки = ПрочитатьJSON(ЧтениеJSON, Истина);
        
    КонецЕсли;
    
    Если ЗначениеЗаполнено(КомандаОтправки) Тогда
        MAIN_SERVICE.Вставить("command", КомандаОтправки);
    КонецЕсли;
    
    Если MAIN_SERVICE.Количество() > 0 Тогда
        ТелоОтвета["ServicesData"].Вставить("MAIN_SERVICE", MAIN_SERVICE);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти
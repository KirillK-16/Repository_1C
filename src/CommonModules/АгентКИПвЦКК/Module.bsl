
#Область ПрограммныйИнтерфейс

Функция ВнутреннийКонтрольДоступностиОборудования() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
    
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Оборудование.Ссылка,
	|	Оборудование.Наименование,
	|	Оборудование.Хост,
    |   Оборудование.Таймаут,
    |   Оборудование.ПериодКонтроля,
    |   Оборудование.МинимальныйПроцентДоступности
	|ИЗ
	|	Справочник.Оборудование КАК Оборудование
	|ГДЕ
	|	Оборудование.ИспользоватьВнешнегоАгента = ЛОЖЬ
	|	И Оборудование.ПроверятьДоступность = ИСТИНА
    |   И НЕ Оборудование.ПометкаУдаления
	|";
	
	Результат = Запрос.Выполнить();
    
    Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Параметры = Новый Массив;
			Параметры.Добавить(Выборка.Ссылка);
			Параметры.Добавить(Выборка.Хост);
            Параметры.Добавить(Выборка.Таймаут * 1000);
            Параметры.Добавить(Выборка.ПериодКонтроля);
            Параметры.Добавить(Выборка.МинимальныйПроцентДоступности);
			
			Ключ = "ВнутреннийКонтрольДоступности_" + Выборка.Ссылка;
			Наименование = "Внутренний контроль доступности оборудования " + Выборка.Наименование;
            
            Отбор = Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно);
		    ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		    Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
			    ФоновыеЗадания.Выполнить("АгентКИПвЦКК.ВнутреннийКонтрольДоступностиЕдиницыОборудования", Параметры, Ключ, Наименование);
            КонецЕсли;
       	КонецЦикла;
    КонецЕсли;

КонецФункции

Функция ВнутреннийКонтрольДоступностиЕдиницыОборудования(РабочийСерверСсылка, Хост, Таймаут, ПериодКонтроля, МинимальныйПроцентДоступности) Экспорт
	
	ДатаПроверки = ТекущаяДата();
	
	Результат = КипВнешнийКомпонент.Пинг(Хост, Таймаут);
	Результат = ?(Результат, 1, 0);
	
	РегистрыСведений.ДоступностьОборудования.ИзменитьДоступность(ДатаПроверки, РабочийСерверСсылка, Результат, ПериодКонтроля, МинимальныйПроцентДоступности);
    
КонецФункции

Процедура ЗагрузитьИнформациюОСистеме(Оборудование, ИнформацияОСистеме) Экспорт
    
    ЗагрузитьИнформациюРеестра(Оборудование, ИнформацияОСистеме);
    ЗагрузитьПеременныеСреды(Оборудование, ИнформацияОСистеме);
    ЗагрузитьИнформацияОПамяти(Оборудование, ИнформацияОСистеме);
    ЗагрузитьИнформацияОбОперационнойСистеме(Оборудование, ИнформацияОСистеме);
    ЗагрузитьОбновления(Оборудование, ИнформацияОСистеме);
    ЗагрузитьИнформациюОЛогическихДисках(Оборудование, ИнформацияОСистеме);
    ЗагрузитьИнформациюОПроцессорах(Оборудование, ИнформацияОСистеме);
    ЗагрузитьИнформациюОСетевыхАдаптерах(Оборудование, ИнформацияОСистеме);
    ЗагрузитьПрочее(Оборудование, ИнформацияОСистеме);
    
КонецПроцедуры

Функция КомандаНастройкиКонтроляКластер(НастройкиКонтроля, НастройкиКластера) Экспорт
    
    ПараметрыКонтроля = ПараметрыКонтроля(НастройкиКонтроля, НастройкиКластера);
    ПараметрыКонтроля = РегистрыСведений.ПараметрыКластеров.КонвертироватьПараметры(ПараметрыКонтроля, Перечисления.ТипыПараметровКластер1С.ЦКК, Перечисления.ТипыПараметровКластер1С.АгентКИП);
    
    Возврат ПараметрыКонтроля;
    
КонецФункции

Функция КомандаНастройкиКонтроляРабочийСервер(НастройкиКонтроля, НастройкиРабочегоСервера) Экспорт
    
    ПараметрыКонтроля = ПараметрыКонтроля(НастройкиКонтроля, НастройкиРабочегоСервера);
    ПараметрыКонтроля = РегистрыСведений.ПараметрыРабочихСерверов.КонвертироватьПараметры(ПараметрыКонтроля, Перечисления.ТипыПараметровКластер1С.ЦКК, Перечисления.ТипыПараметровКластер1С.АгентКИП);
    
    Возврат ПараметрыКонтроля;
    
КонецФункции

Функция КомандаНастройкиКонтроляИнфоБаза(НастройкиКонтроля, НастройкиИнфоБаза) Экспорт
    
    ПараметрыКонтроля = ПараметрыКонтроля(НастройкиКонтроля, НастройкиИнфоБаза);
    ПараметрыКонтроля = РегистрыСведений.ПараметрыИнформационныхБаз.КонвертироватьПараметры(ПараметрыКонтроля, Перечисления.ТипыПараметровКластер1С.ЦКК, Перечисления.ТипыПараметровКластер1С.АгентКИП);
    
    Возврат ПараметрыКонтроля;
    
КонецФункции

Функция ВыполнитьКоманду(АгентКИП, ТипКоманды, Команда) Экспорт
    
    УникальныйИдентификаторЗаписи = РегистрыСведений.КомандыАгентаКИП.ДобавитьКоманду(АгентКИП, ТипКоманды, Команда);
        
    Таймаут = ТекущаяУниверсальнаяДата() + 30;
    Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
    
    Выполнять = Истина;
    Пока Выполнять Цикл
        
        Результат = РегистрыСведений.КомандыАгентаКИП.РезультатВыполнения(УникальныйИдентификаторЗаписи);
        Если Результат <> Неопределено ИЛИ ТекущаяУниверсальнаяДата() >= Таймаут Тогда
            Выполнять = Ложь;
        КонецЕсли;
        
        КипВнешнийКомпонент.Пауза(200, Инструменты);
                
    КонецЦикла;
    
    Возврат Результат;
    
КонецФункции

Процедура ОбработатьИнформациюОДампах(РабочийСервер1С, ИнформацияОДампах, ПараметрыАгента) Экспорт
    
    Если ИнформацияОДампах <> Неопределено Тогда
        
        Дампы = ИнформацияОДампах["dumps"];
        ДампыОбработанные = Новый Соответствие;
        ДампыОбработкаЗавершенаОтправить = Новый Соответствие;
        Если Дампы <> Неопределено И Дампы.Количество() > 0 Тогда
            Для Каждого ТекДамп Из Дампы Цикл
                ДанныеДампа = ТекДамп.Значение;
                
                Если ЗначениеЗаполнено(ДанныеДампа["export_catalog"]) Тогда
                    КаталогЭкспорта = ДанныеДампа["export_catalog"];
                Иначе
                    КаталогЭкспорта = ИнформацияОДампах["DUMPS_STORAGE"];
                КонецЕсли;
                
                ИмяДампа = ДанныеДампа["dump_name"];
                ПолноеИмяДампа = ДанныеДампа["full_name"];
                РазмерФайла = ДанныеДампа["file_size"];
                ДатаСоздания = XMLЗначение(Тип("Дата"), ДанныеДампа["creation_date"]);
                
                ПараметрыДампа = ЗарегистрироватьДамп(РабочийСервер1С, КаталогЭкспорта, ИмяДампа, ПолноеИмяДампа, РазмерФайла, ДатаСоздания);
                
                ДампыОбработанные.Вставить(ТекДамп.Ключ, ПараметрыДампа);
            КонецЦикла;
            
            
        КонецЕсли;
        
        ДампыОбработкаЗавершена = ИнформацияОДампах["processedDumps"];
        ДампыОбработкаЗавершенаОтправить = Новый Соответствие;
        Если ДампыОбработкаЗавершена <> Неопределено И ДампыОбработкаЗавершена.Количество() > 0 Тогда
            Для Каждого ТекДамп Из ДампыОбработкаЗавершена Цикл
                ДанныеДампОбработан = Новый Соответствие;
                ДанныеДампОбработан.Вставить("guid", ТекДамп.Значение["id"]); 
                ДанныеДампОбработан.Вставить("result", ТекДамп.Значение["result"]); 
                ДанныеДампОбработан.Вставить("error_description", ТекДамп.Значение["error_description"]); 
                Результат = ЗарегистрироватьЗавершениеОбработкиДампа(ДанныеДампОбработан);
                
                ДанныеДампОбработан.Вставить("full_name", ТекДамп.Значение["full_name"]);
                ДанныеДампОбработан.Вставить("result_1C", Результат);
                
                ДампыОбработкаЗавершенаОтправить.Вставить(ТекДамп.Значение["id"], ДанныеДампОбработан); 
            КонецЦикла;
        КонецЕсли;
        
        ИнформацияОДампах.Вставить("dumps", ДампыОбработанные);
        ИнформацияОДампах.Вставить("processedDumps", ДампыОбработкаЗавершенаОтправить);
        
        incidents = ИнформацияОДампах["incidents"];
        Если incidents <> Неопределено Тогда
            ЗагрузитьИнцидентыСбораДампов(РабочийСервер1С, ПараметрыАгента, incidents);
        КонецЕсли;
                
    КонецЕсли;
    
КонецПроцедуры

Процедура ИзменитьИнцидентКонтрольДоступностиИнформационнойБазы(ПараметрыАнализаДоступности) Экспорт
    
    Если ПараметрыАнализаДоступности.ТекущийПроцентДоступности <> -1 Тогда
        Если ПараметрыАнализаДоступности.ТекущийПроцентДоступности < ПараметрыАнализаДоступности.МинимальныйПроцентДоступности Тогда
            ОткрытьИнцидентКонтрольДоступностиИнформационнойБазы(ПараметрыАнализаДоступности, "Информационная база не доступна!");
        Иначе
            ЗакрытьИнцидентКонтрольДоступностиИнформационнойБазы(ПараметрыАнализаДоступности);
        КонецЕсли;
    КонецЕсли;
    
КонецПроцедуры

Функция ОбработатьПараметрыКластера(УникальныйИдентификаторОбъекта, Значение, АгентКИП, ПортRas) Экспорт
    
    Кластер1С = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуКластер(УникальныйИдентификаторОбъекта);
    
    ПараметрыКластера = Значение["params"];
    Если ПараметрыКластера <> Неопределено Тогда
        ПараметрыКластера.Вставить("portRAS", ПортRas);
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Кластер1С) Тогда
        
        Кластер1С = НайтиКластерПоАгентуСПустымИдентификатором(АгентКИП, ПараметрыКластера);
        
        Если НЕ ЗначениеЗаполнено(Кластер1С) Тогда
            Кластер1С = НайтиКластерRASСПустымИдентификатором(АгентКИП, ПараметрыКластера);
        КонецЕсли;
                
        Если ЗначениеЗаполнено(Кластер1С) Тогда
            
            Если Кластер1С.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
                
                КластерОбъект = Кластер1С.ПолучитьОбъект();
                КластерОбъект.УникальныйИдентификаторОбъекта = УникальныйИдентификаторОбъекта;
                КластерОбъект.Записать();
                
                ПараметрыКластераЦКК = РегистрыСведений.ПараметрыКластеров.КонвертироватьПараметры(ПараметрыКластера, Перечисления.ТипыПараметровКластер1С.АгентКИП, Перечисления.ТипыПараметровКластер1С.ЦКК);
                НастройкиКластера = Новый Структура;
                Для Каждого КлючЗначение Из ПараметрыКластераЦКК Цикл
                    НастройкиКластера.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
                КонецЦикла;
                РегистрыСведений.ПараметрыКластеров.ЗаписатьНастройки(Кластер1С, НастройкиКластера);
                
            КонецЕсли;
            
            
        Иначе        
            
            СоздатьКластер1С(ПараметрыКластера, АгентКИП);
            Кластер1С = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуКластер(УникальныйИдентификаторОбъекта);
            
        КонецЕсли;
        
    Иначе
        Если Кластер1С.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП И ПараметрыКластера <> Неопределено Тогда
            ИзменитьКластер1С(Кластер1С, ПараметрыКластера, АгентКИП);
        КонецЕсли;
    КонецЕсли;
    
    Возврат Кластер1С;
    
КонецФункции

Процедура ЗагрузитьИнцидентыКластера(Кластер1С, Инциденты) Экспорт
    
    Для Каждого ТекИнцидент Из Инциденты Цикл
        
        Если ТекИнцидент["type"] = "AUTHENTIFICATION" Тогда
            Если ТекИнцидент["state"] = "OPEN" Тогда
                Кластер_1С.ОткрытьИнцидентКластераАутентификация(Кластер1С, ТекИнцидент);
            ИначеЕсли ТекИнцидент["state"] = "CLOSE" Тогда
                Кластер_1С.ЗакрытьИнцидентКластераАутентификация(Кластер1С, ТекИнцидент);
            КонецЕсли;
        ИначеЕсли ТекИнцидент["type"] = "CONTROL_PARAMETRS" Тогда
            Если ТекИнцидент["state"] = "OPEN" Тогда
                Кластер_1С.ОткрытьИнцидентКластераКонтрольПараметров(Кластер1С, ТекИнцидент);
            ИначеЕсли ТекИнцидент["state"] = "CLOSE" Тогда
                Кластер_1С.ЗакрытьИнцидентКластераКонтрольПараметров(Кластер1С, ТекИнцидент);
            КонецЕсли;
        КонецЕсли;
                
    КонецЦикла;
    
КонецПроцедуры

Процедура ЗагрузитьИнцидентыМониторингПроизводительности(АгентКИП, Инциденты) Экспорт
    
    Для Каждого ТекИнцидент Из Инциденты Цикл
        
        Если ТекИнцидент["type"] = "ACCESS_DENIED_PERFMON" Тогда
            Если ТекИнцидент["state"] = "OPEN" Тогда
                ОткрытьИнцидентМониторингПроизводительности(АгентКИП, ТекИнцидент);
            ИначеЕсли ТекИнцидент["state"] = "CLOSE" Тогда
                ЗакрытьИнцидентМониторингПроизводительности(АгентКИП, ТекИнцидент);
            КонецЕсли;
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Функция РабочийСервер1С(Кластер1С, РабочиеСерверы, dumps_storage) Экспорт
    
    ПараметрыРабочихСерверов = Новый Соответствие;
    ПараметрыРабочихПроцессов = Новый Соответствие;
    
    ПараметрыЕдиницыМасштабирования = Новый Соответствие;
    ПараметрыЕдиницыМасштабирования.Вставить("equipmentLocationRef", Кластер1С.ПлощадкаЭксплуатации);
    
    Для Каждого РабочийСервер Из РабочиеСерверы Цикл
        
        РабочийСервер1С = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуРабочийСервер(РабочийСервер.Ключ);
        
        Если НЕ ЗначениеЗаполнено(РабочийСервер1С) Тогда
            
            РабочиеСервераКластера = Справочники.ОбъектыКонтроля.РабочиеСерверыКластера(Кластер1С);
            
            Для Каждого РабочийСерверКластера Из РабочиеСервераКластера Цикл
                
                НастройкиРабочегоСервера = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(РабочийСерверКластера);
                ВсеАдреса = Справочники.Оборудование.ВсеАдреса(НастройкиРабочегоСервера.Оборудование);
                
                Если ВсеАдреса[ВРЕГ(РабочийСервер.Значение["params"]["hostName"])] <> Неопределено Тогда
                    
                    РабочийСерверОбъект = РабочийСерверКластера.ПолучитьОбъект();
                    РабочийСерверОбъект.УникальныйИдентификаторОбъекта = РабочийСервер.Ключ;
                    РабочийСерверОбъект.Записать();
                    
                    Настройки = РегистрыСведений.ПараметрыРабочихСерверов.КонвертироватьПараметры(РабочийСервер.Значение["params"], Перечисления.ТипыПараметровКластер1С.АгентКИП, Перечисления.ТипыПараметровКластер1С.ЦКК);
                    НастройкиСтруктура = Новый Структура;
                    Для Каждого КлючЗначение Из Настройки Цикл
                        НастройкиСтруктура.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
                    КонецЦикла;
                    НастройкиСтруктура.Удалить("Оборудование"); 
                    РегистрыСведений.ПараметрыРабочихСерверов.ЗаписатьНастройки(РабочийСерверКластера, НастройкиСтруктура);
                    
                    РабочийСервер1С = РабочийСерверКластера;
                    
                    Прервать;
                    
                КонецЕсли;
                
            КонецЦикла;
            
            Если НЕ ЗначениеЗаполнено(РабочийСервер1С) Тогда
                ЗаполнитьРабочийСервер(ПараметрыЕдиницыМасштабирования, Кластер1С, РабочийСервер.Значение["params"], dumps_storage);
                РабочийСервер1С = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуРабочийСервер(РабочийСервер.Ключ);
            КонецЕсли;
            
        КонецЕсли;
        РабочийСервер.Значение.Вставить("Ссылка", РабочийСервер1С);
        
        Инциденты = РабочийСервер.Значение["incidents"];
        Если Инциденты <> Неопределено Тогда
            ЗагрузитьИнцидентыРабочегоСервера(РабочийСервер1С, Инциденты);
        КонецЕсли;
        
        
        ПараметрыРабочихПроцессовСервера = РабочийСервер.Значение["WorkingProcess"];
        Если ПараметрыРабочихПроцессовСервера <> Неопределено Тогда
            ПараметрыРабочихПроцессов.Вставить(РабочийСервер.Ключ, ПараметрыРабочихПроцессовСервера);
        КонецЕсли;
                        
    КонецЦикла;
    
    ПараметрыРабочихСерверов.Вставить("ПараметрыРабочихПроцессов", ПараметрыРабочихПроцессов);
    
    ЕдиницаМасштабирования.ЗагрузитьЕдиницуМасштабирования(ПараметрыЕдиницыМасштабирования);
    
    Возврат ПараметрыРабочихСерверов;
        
КонецФункции

Функция ИнформационнаяБаза(Кластер1С, ИнформационныеБазы) Экспорт
    
    ПараметрыЕдиницыМасштабирования = Новый Соответствие;
    ПараметрыЕдиницыМасштабирования.Вставить("equipmentLocationRef", Кластер1С.ПлощадкаЭксплуатации);
    
    Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
        
        Значение = ИнформационнаяБаза.Значение; 
        ИнформационнаяБаза1С = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуИнформационнаяБаза(ИнформационнаяБаза.Ключ);
        params = Значение["params"];
        
        Если ЗначениеЗаполнено(ИнформационнаяБаза1С) Тогда
            Значение.Вставить("Ссылка", ИнформационнаяБаза1С);
            Если params <> Неопределено Тогда
                Настройки = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(ИнформационнаяБаза1С);
                Если НЕ Настройки.РасширенныеНастройки Тогда
                    ИзменитьИнформационнуюБазу(ИнформационнаяБаза1С, params);
                КонецЕсли;
            КонецЕсли;
        Иначе
            
            ИнформационнаяБаза1С = НайтиИнформационнуюБазуСПустымИдентификатором(Кластер1С, params);
            
            Если ЗначениеЗаполнено(ИнформационнаяБаза1С) Тогда
                
                ИнформационнаяБаза1СОбъект = ИнформационнаяБаза1С.ПолучитьОбъект();
                ИнформационнаяБаза1СОбъект.УникальныйИдентификаторОбъекта = ИнформационнаяБаза.Ключ;
                ИнформационнаяБаза1СОбъект.Записать();
                
                Настройки = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(ИнформационнаяБаза1С);
                Если НЕ Настройки.РасширенныеНастройки Тогда
                    ИзменитьИнформационнуюБазу(ИнформационнаяБаза1С, params);
                КонецЕсли;
                
            Иначе
                ЗаполнитьИнформационнуюБазу(ПараметрыЕдиницыМасштабирования, Кластер1С, params);    
            КонецЕсли;
            
        КонецЕсли;
        
        Сессии = Значение["sessions"];
        Если ЗначениеЗаполнено(Сессии) Тогда
                        
            ЗаписьJSON = Новый ЗаписьJSON();
            ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
            ЗаписатьJSON(ЗаписьJSON, Сессии);
            РегистрыСведений.ПараметрыКластераБуфер.ЗаписатьДанные("ПСНС", ЗаписьJSON.Закрыть(), Кластер1С.УникальныйИдентификаторОбъекта);            
            
        КонецЕсли;
        
        СессииПоТипамПриложения = Значение["sessionsTypeApplication"];
        Если ЗначениеЗаполнено(СессииПоТипамПриложения) Тогда
                        
            ЗаписьJSON = Новый ЗаписьJSON();
            ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
            ЗаписатьJSON(ЗаписьJSON, СессииПоТипамПриложения);
            РегистрыСведений.ПараметрыКластераБуфер.ЗаписатьДанные("ПСНС_ПРИЛ", ЗаписьJSON.Закрыть(), Кластер1С.УникальныйИдентификаторОбъекта);            
            
        КонецЕсли;
                
        Инциденты = Значение["incidents"];
        Если Инциденты <> Неопределено Тогда
            ЗагрузитьИнцидентыИнформационнойБазы(Значение["Ссылка"], Инциденты);
        КонецЕсли;
        
    КонецЦикла;
    
    ЕдиницаМасштабирования.ЗагрузитьЕдиницуМасштабирования(ПараметрыЕдиницыМасштабирования);
        
КонецФункции

Функция НайтиИнформационнуюБазуСПустымИдентификатором(Кластер1С, ПараметрыИБ)
    
    ИнформационнаяБаза1С = Справочники.ОбъектыКонтроля.ПустаяСсылка();
    
    ИнформационныеБазыКластера = Справочники.ОбъектыКонтроля.ИнформационныеБазыКластера(Кластер1С);
    
    Для Каждого ИнформационнаяБаза Из ИнформационныеБазыКластера Цикл
        
        Если НЕ ЗначениеЗаполнено(ИнформационнаяБаза.УникальныйИдентификаторОбъекта) Тогда
            Настройки = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(ИнформационнаяБаза);
            Если ВРЕГ(Настройки.ИмяБазыВКластере) = ВРЕГ(ПараметрыИБ["name"]) Тогда
                ИнформационнаяБаза1С = ИнформационнаяБаза;
                Прервать;
            КонецЕсли;
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат ИнформационнаяБаза1С;
    
КонецФункции

Процедура ЗаписатьПараметрыРабочихПроцессовКластера(ПараметрыРабочихПроцессовКластера) Экспорт
    
    ЗаписьJSON = Новый ЗаписьJSON();
    ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
    ЗаписатьJSON(ЗаписьJSON, ПараметрыРабочихПроцессовКластера);
    РегистрыСведений.ПараметрыКластераБуфер.ЗаписатьДанные("ПРП", ЗаписьJSON.Закрыть());
    
КонецПроцедуры

Функция ПараметрыАутентификацииКластер(Значение, НастройкиКластера) Экспорт
    
    ПараметрыАутентификации = Новый Соответствие;
    
    Если Значение["isAuthentificate"] <> Неопределено И НЕ Значение["isAuthentificate"] И Значение["Ссылка"] <> Неопределено Тогда
        
        ПараметрыАутентификации.Вставить("prm1", НастройкиКластера.АдминистраторКластера);
        ПараметрыАутентификации.Вставить("prm2", НастройкиКластера.ПарольАдминистратораКластера);
        
    КонецЕсли;
    
    Возврат ПараметрыАутентификации;
    
КонецФункции

Функция ПараметрыКонтроляКластер(Значение, НастройкиКластера) Экспорт
    
    ПараметрыКонтроля = Новый Соответствие;
    
    Если Значение["isObtainedControlParametrs"] <> Неопределено И НЕ Значение["isObtainedControlParametrs"]  И Значение["Ссылка"] <> Неопределено Тогда
        
        НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(Значение["Ссылка"]);
        
        ПараметрыКонтроля = КомандаНастройкиКонтроляКластер(НастройкиКонтроля, НастройкиКластера);
        
    КонецЕсли;
    
    Возврат ПараметрыКонтроля;
    
КонецФункции

Функция ИнцидентыЗакрытыеКластер(Значение) Экспорт
    
    ИнцидентыЗакрытые = Новый Массив;
    
    Если Значение["incidents"] <> Неопределено Тогда
        
        Для Каждого ТекИнцидент Из Значение["incidents"] Цикл
            Если ТекИнцидент["state"] = "CLOSE" Тогда
                ИнцидентЗакрытый = Новый Соответствие;
                ИнцидентЗакрытый.Вставить("type", ТекИнцидент["type"]);
                ИнцидентЗакрытый.Вставить("state", ТекИнцидент["state"]);
                ИнцидентыЗакрытые.Добавить(ИнцидентЗакрытый);
            КонецЕсли;
        КонецЦикла;
        
    КонецЕсли;
    
    Возврат ИнцидентыЗакрытые;
    
КонецФункции

Функция ИнформационнаяБазаОтвет(Значение) Экспорт
    
    ПараметрыИнформационныхБаз = Новый Соответствие;
        
    infoBases = Значение["infoBases"];
    Если infoBases <> Неопределено Тогда
        
        Для Каждого ИнформационнаяБаза Из infoBases Цикл
            
            Параметры = Новый Соответствие;
            
            ЗначениеИнфоБаза = ИнформационнаяБаза.Значение;
            ИнфоБазаСсылка = ЗначениеИнфоБаза["Ссылка"];            
            
            ПараметрыАутентификации = Новый Соответствие;
            Если ЗначениеИнфоБаза["isAuthentificate"] <> Неопределено И НЕ ЗначениеИнфоБаза["isAuthentificate"] И ИнфоБазаСсылка <> Неопределено Тогда
                НастройкиИнформационнойБазы = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(ИнфоБазаСсылка);
                ПараметрыАутентификации.Вставить("prm1", НастройкиИнформационнойБазы.Пользователь);
                ПараметрыАутентификации.Вставить("prm2", НастройкиИнформационнойБазы.Пароль);
            КонецЕсли;
                        
            Если ЗначениеЗаполнено(ПараметрыАутентификации) Тогда
                Параметры.Вставить("prm", ПараметрыАутентификации); 
            КонецЕсли;
            
            Если ЗначениеИнфоБаза["isObtainedControlParametrs"] <> Неопределено И НЕ ЗначениеИнфоБаза["isObtainedControlParametrs"] И ЗначениеЗаполнено(ИнфоБазаСсылка) Тогда
                
                НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(ИнфоБазаСсылка);
                НастройкиИнфоБаза = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(ИнфоБазаСсылка);
                ПараметрыКонтроля = КомандаНастройкиКонтроляИнфоБаза(НастройкиКонтроля, НастройкиИнфоБаза);
                
                Если ЗначениеЗаполнено(ПараметрыКонтроля) Тогда
                    Параметры.Вставить("сontrolParametrs", ПараметрыКонтроля);
                КонецЕсли;
                                
            КонецЕсли;
            
            ИнцидентыЗакрытые = Новый Массив;
            Если ЗначениеИнфоБаза["incidents"] <> Неопределено Тогда
                
                Для Каждого ТекИнцидент Из ЗначениеИнфоБаза["incidents"] Цикл
                    Если ТекИнцидент["state"] = "CLOSE" Тогда
                        ИнцидентЗакрытый = Новый Соответствие;
                        ИнцидентЗакрытый.Вставить("type", ТекИнцидент["type"]);
                        ИнцидентЗакрытый.Вставить("state", ТекИнцидент["state"]);
                        ИнцидентыЗакрытые.Добавить(ИнцидентЗакрытый);
                    КонецЕсли;                                        
                КонецЦикла;
                
            КонецЕсли;
            
            Если ЗначениеЗаполнено(ИнцидентыЗакрытые) Тогда
                Параметры.Вставить("incidents", ИнцидентыЗакрытые); 
            КонецЕсли;
            
            Если ЗначениеЗаполнено(Параметры) Тогда
              ПараметрыИнформационныхБаз.Вставить(ИнформационнаяБаза.Ключ, Параметры);
            КонецЕсли;
            
        КонецЦикла;
        
        
    КонецЕсли;
    
    Возврат ПараметрыИнформационныхБаз;
    
КонецФункции

Функция РабочийСервер1СОтвет(Значение) Экспорт
    
    ПараметрыРабочихСерверов = Новый Соответствие;
        
    Если Значение["workingServers"] <> Неопределено Тогда
        
        Для Каждого РабочийСервер Из Значение["workingServers"] Цикл
            
            Параметры = Новый Соответствие;
            
            РабочийСерверЗначение = РабочийСервер.Значение;
            РабочийСерверСсылка = РабочийСерверЗначение["Ссылка"];
            
            Если РабочийСерверЗначение["isObtainedControlParametrs"] <> Неопределено И НЕ РабочийСерверЗначение["isObtainedControlParametrs"] И ЗначениеЗаполнено(РабочийСерверСсылка) Тогда
                
                НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(РабочийСерверСсылка);
                НастройкиРабочегоСервера = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(РабочийСерверСсылка);
                ПараметрыКонтроля = КомандаНастройкиКонтроляРабочийСервер(НастройкиКонтроля, НастройкиРабочегоСервера);
                
                Если ЗначениеЗаполнено(ПараметрыКонтроля) Тогда
                    Параметры.Вставить("сontrolParametrs", ПараметрыКонтроля);
                КонецЕсли;
                                
            КонецЕсли;
            
            ИнцидентыЗакрытые = Новый Массив;
            incidents = РабочийСерверЗначение["incidents"];
            Если ЗначениеЗаполнено(incidents) Тогда
                               
                Для Каждого ТекИнцидент Из incidents Цикл
                    Если ТекИнцидент["state"] = "CLOSE" Тогда
                        ИнцидентЗакрытый = Новый Соответствие;
                        ИнцидентЗакрытый.Вставить("type", ТекИнцидент["type"]);
                        ИнцидентЗакрытый.Вставить("state", ТекИнцидент["state"]);
                        ИнцидентыЗакрытые.Добавить(ИнцидентЗакрытый);
                    КонецЕсли;                                        
                КонецЦикла;
                
            КонецЕсли;
            
            Если ЗначениеЗаполнено(ИнцидентыЗакрытые) Тогда
                Параметры.Вставить("incidents", ИнцидентыЗакрытые);
            КонецЕсли;
                                    
            Если ЗначениеЗаполнено(Параметры) Тогда
                ПараметрыРабочихСерверов.Вставить(РабочийСервер.Ключ, Параметры);
            КонецЕсли;
                        
        КонецЦикла;
        
    КонецЕсли;
    
    Возврат ПараметрыРабочихСерверов;
        
КонецФункции

Функция НавигационнаяСсылкаАгентКИП(АгентКИП) Экспорт
    Возврат Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(АгентКИП), "Агент КИП: " + АгентКИП.Наименование);
КонецФункции

#Область АдминистрированиеКластера

Функция ПолучитьКластеры(АдминистрированиеСервера) Экспорт
    
    Команда = Новый Соответствие;
    Команда.Вставить("cluster",  "00000000-0000-0000-0000-000000000000");
    Команда.Вставить("cmd", "getClusters");
    
    Кластеры = ВыполнитьКоманду(АдминистрированиеСервера["АгентКИП"], Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
    
    КластерыРезультат = Новый Массив;
    
    Если Кластеры <> Неопределено Тогда
        
        Для Каждого Кластер Из Кластеры Цикл
            КластерыРезультат.Добавить(Кластер.Значение["params"]);
        КонецЦикла;
        
    Иначе
        ВызватьИсключение("Не удалось получить ответ от агента КИП");
    КонецЕсли;
    
    Возврат КластерыРезультат;
        
КонецФункции

Функция АдминистрированиеКластер(АдминистрированиеСервера, УникальныйИдентификаторОбъекта) Экспорт
    
    АдминистрированиеКластер = Новый Соответствие;
    АдминистрированиеКластер.Вставить("УникальныйИдентификаторОбъекта", УникальныйИдентификаторОбъекта);
    АдминистрированиеКластер.Вставить("АгентКИП", АдминистрированиеСервера["АгентКИП"]);
    
    Возврат АдминистрированиеКластер;
    
КонецФункции

Функция АдминистрированиеИнформационнаяБаза(АдминистрированиеКластер, УникальныйИдентификаторОбъекта, Кратко) Экспорт
    
    АдминистрированиеИнформационнаяБаза = Новый Соответствие;
    АдминистрированиеИнформационнаяБаза.Вставить("УникальныйИдентификаторКластера", АдминистрированиеКластер["УникальныйИдентификаторОбъекта"]);
    АдминистрированиеИнформационнаяБаза.Вставить("АгентКИП", АдминистрированиеКластер["АгентКИП"]);
    АдминистрированиеИнформационнаяБаза.Вставить("УникальныйИдентификаторОбъекта", УникальныйИдентификаторОбъекта);
    
    Возврат АдминистрированиеИнформационнаяБаза;
    
КонецФункции

Функция АдминистрированиеРабочийСервер(АдминистрированиеКластер, УникальныйИдентификаторОбъекта) Экспорт
    
    АдминистрированиеРабочийСервер = Новый Соответствие;
    АдминистрированиеРабочийСервер.Вставить("УникальныйИдентификаторКластера", АдминистрированиеКластер["УникальныйИдентификаторОбъекта"]);
    АдминистрированиеРабочийСервер.Вставить("АгентКИП", АдминистрированиеКластер["АгентКИП"]);
    АдминистрированиеРабочийСервер.Вставить("УникальныйИдентификаторОбъекта", УникальныйИдентификаторОбъекта);
    
    Возврат АдминистрированиеРабочийСервер;    
    
КонецФункции

Функция СтруктураКластера(АдминистрированиеКластер) Экспорт
    
    Команда = Новый Соответствие;
    Команда.Вставить("cluster", АдминистрированиеКластер["УникальныйИдентификаторОбъекта"]);
    Команда.Вставить("cmd", "getClusterStructure");
    
    Результат = ВыполнитьКоманду(АдминистрированиеКластер["АгентКИП"], Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
    
    Если Результат <> Неопределено Тогда
        СтруктураКластера = Новый Соответствие;
        СтруктураКластера.Вставить("infoBases", Результат["data"]["infoBases"]);
        СтруктураКластера.Вставить("workingServers", Результат["data"]["workingServers"]);
    Иначе
        ВызватьИсключение("Не удалось получить ответ от агента КИП");
    КонецЕсли;
    
    Возврат СтруктураКластера;
    
КонецФункции

Функция ИнформационныеБазы(АдминистрированиеКластер) Экспорт
    
    Команда = Новый Соответствие;
    Команда.Вставить("cluster", АдминистрированиеКластер["УникальныйИдентификаторОбъекта"]);
    Команда.Вставить("cmd", "getInfoBases");
    
    Результат = ВыполнитьКоманду(АдминистрированиеКластер["АгентКИП"], Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
    
КонецФункции

Функция АутентификацияКластера(АдминистрированиеКластер, Пользователь, Пароль) Экспорт
    
    ДанныеАутентификации = Новый Структура("prm1, prm2", Пользователь, Пароль);
    ХранилищеОбщихНастроек.Сохранить(АдминистрированиеКластер["УникальныйИдентификаторОбъекта"], "checkAuth", ДанныеАутентификации,,"АгентКИП");
    
    Команда = Новый Соответствие;
    Команда.Вставить("cluster", АдминистрированиеКластер["УникальныйИдентификаторОбъекта"]);
    Команда.Вставить("cmd", "checkAuth");
    ПараметрыКоманды = Новый Структура("prm1, prm2", "*****", "*****");
    Команда.Вставить("cmdPrm", ПараметрыКоманды);    
    Результат = ВыполнитьКоманду(АдминистрированиеКластер["АгентКИП"], Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
    
    Если Результат <> Неопределено Тогда
        РезультатПроверки = Результат["checkAuth"];
        Если НЕ РезультатПроверки Тогда
            ВызватьИсключение ("Имя пользователя или пароль не верны.");
        КонецЕсли;
    Иначе
        ВызватьИсключение("Не удалось получить ответ от агента КИП.");
    КонецЕсли;
        
КонецФункции

Функция АутентификацияИнформационнаяБаза(АдминистрированиеИнформационнаяБаза, Пользователь, Пароль) Экспорт
    
    ДанныеАутентификации = Новый Структура("prm1, prm2", Пользователь, Пароль);
    ХранилищеОбщихНастроек.Сохранить(АдминистрированиеИнформационнаяБаза["УникальныйИдентификаторОбъекта"], "checkAuth", ДанныеАутентификации,,"АгентКИП");
    
    Команда = Новый Соответствие;
    Команда.Вставить("cluster", АдминистрированиеИнформационнаяБаза["УникальныйИдентификаторКластера"]);
    
    ИнформационнаяБазаКоманда = Новый Соответствие;
    ИнформационнаяБазаКоманда.Вставить("infoBase", АдминистрированиеИнформационнаяБаза["УникальныйИдентификаторОбъекта"]);
    ИнформационнаяБазаКоманда.Вставить("cmd", "checkAuth");
    ПараметрыКоманды = Новый Структура("prm1, prm2", "*****", "*****");
    ИнформационнаяБазаКоманда.Вставить("cmdPrm", ПараметрыКоманды);
    Команда.Вставить("infoBaseCommand", ИнформационнаяБазаКоманда);
    
    Результат = ВыполнитьКоманду(АдминистрированиеИнформационнаяБаза["АгентКИП"], Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
    
    Если Результат <> Неопределено Тогда
        РезультатПроверки = Результат["checkAuth"];
        Если РезультатПроверки <> Истина Тогда
            ВызватьИсключение Результат["description"];
        КонецЕсли;
    Иначе
        ВызватьИсключение("Не удалось получить ответ от агента КИП.");
    КонецЕсли;
    
КонецФункции

Функция СвойстваКластера(АдминистрированиеКластер) Экспорт
    
    Команда = Новый Соответствие;
    Команда.Вставить("cluster", АдминистрированиеКластер["УникальныйИдентификаторОбъекта"]);
    Команда.Вставить("cmd", "getPropertyCluster");
    
    Результат = ВыполнитьКоманду(АдминистрированиеКластер["АгентКИП"], Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
        
    Если Результат <> Неопределено Тогда
        СвойстваКластера = Результат["propertyCluster"];
    Иначе
        ВызватьИсключение("Не удалось получить ответ от агента КИП");
    КонецЕсли;
    
    Возврат СвойстваКластера;
        
КонецФункции

Функция СвойстваИнформационнаяБаза(АдминистрированиеИнформационнаяБаза, Проверка = Ложь) Экспорт
    
    Команда = Новый Соответствие;
    Команда.Вставить("cluster", АдминистрированиеИнформационнаяБаза["УникальныйИдентификаторКластера"]);
    
    ИнформационнаяБазаКоманда = Новый Соответствие;
    ИнформационнаяБазаКоманда.Вставить("infoBase", АдминистрированиеИнформационнаяБаза["УникальныйИдентификаторОбъекта"]);
    ИнформационнаяБазаКоманда.Вставить("cmd", "getPropertyInfoBase"); 
    Если Проверка Тогда
        ДанныеАутентификации = Новый Структура("prm1, prm2", АдминистрированиеИнформационнаяБаза["Пользователь"], АдминистрированиеИнформационнаяБаза["Пароль"]);
        ХранилищеОбщихНастроек.Сохранить(АдминистрированиеИнформационнаяБаза["УникальныйИдентификаторОбъекта"], "getPropertyInfoBase", ДанныеАутентификации,,"АгентКИП");
        ИнформационнаяБазаКоманда.Вставить("cmdPrm", Новый Структура("prm1, prm2", "*****", "*****"));
    КонецЕсли;
    Команда.Вставить("infoBaseCommand", ИнформационнаяБазаКоманда);
    
    Результат = ВыполнитьКоманду(АдминистрированиеИнформационнаяБаза["АгентКИП"], Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
    
    Если Результат <> Неопределено Тогда
        Если Результат["getPropertyInfoBase"] Тогда
            СвойстваИнформационнойБазы = Результат["propertyInfoBase"];
        Иначе
            ВызватьИсключение Результат["description"];
        КонецЕсли;
    Иначе
        ВызватьИсключение("Не удалось получить ответ от агента КИП.");
    КонецЕсли;
    
    Возврат СвойстваИнформационнойБазы;
    
КонецФункции

Функция СвойстваРабочегоСервера(АдминистрированиеРабочийСервер) Экспорт
    
    Команда = Новый Соответствие;
    Команда.Вставить("cluster", АдминистрированиеРабочийСервер["УникальныйИдентификаторКластера"]);
        
    РабочийСерверКоманда = Новый Соответствие;
    РабочийСерверКоманда.Вставить("workingServer", АдминистрированиеРабочийСервер["УникальныйИдентификаторОбъекта"]);
    РабочийСерверКоманда.Вставить("cmd", "getPropertyWorkingServer"); 
    Команда.Вставить("workingServerCommand", РабочийСерверКоманда);
    
    Результат = ВыполнитьКоманду(АдминистрированиеРабочийСервер["АгентКИП"], Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
    
    Если Результат <> Неопределено Тогда
        СвойстваРабочегоСервера = Результат["propertyWorkingServer"];
    Иначе
        ВызватьИсключение("Не удалось получить ответ от агента КИП.");
    КонецЕсли;
    
    Возврат СвойстваРабочегоСервера;
        
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыКонтроля(НастройкиКонтроля, Настройки)
    
    ПараметрыКонтроля = Новый Соответствие;
    
    Если ЗначениеЗаполнено(НастройкиКонтроля) Тогда
        
        Для Каждого НастройкаКонтроля Из НастройкиКонтроля Цикл
            ЗначениеКонтроля = Новый Соответствие;
            ЗначениеКонтроля.Вставить("isControl", НастройкаКонтроля.Значение);
            ЗначениеКонтроля.Вставить("value", Настройки[НастройкаКонтроля.Ключ]);
            ПараметрыКонтроля.Вставить(НастройкаКонтроля.Ключ, ЗначениеКонтроля);
        КонецЦикла;
        
    Иначе
        
        ЗначениеКонтроля = Новый Соответствие;
        ЗначениеКонтроля.Вставить("isControl", Ложь);
        ЗначениеКонтроля.Вставить("value", 0);
        ПараметрыКонтроля.Вставить("empty", ЗначениеКонтроля);
        
    КонецЕсли;
    
    Возврат ПараметрыКонтроля;
    
КонецФункции

Процедура ЗагрузитьИнформациюРеестра(Оборудование, ИнформацияОСистеме)
    
    Если ИнформацияОСистеме["registry"] <> Неопределено Тогда
        
        ТекДата = ТекущаяУниверсальнаяДата();
        
        НаборЗаписей = РегистрыСведений.ОборудованиеИнформацияОРеестре.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Оборудование.Установить(Оборудование);
        
        Для Каждого ТекЗапись Из ИнформацияОСистеме["registry"]  Цикл
            
            ХешКлюча = SHA256(ТекЗапись.Ключ);
            
            НовЗапись = НаборЗаписей.Добавить();
            НовЗапись.Оборудование = Оборудование;
            НовЗапись.ХешКлюча = ХешКлюча;
            НовЗапись.КлючРеестра = ТекЗапись.Ключ;
            НовЗапись.ТипЗначение = ТекЗапись.Значение["Type"];
            НовЗапись.Значение = ТекЗапись.Значение["Value"];
            НовЗапись.ДатаЗаписи = ТекДата;
            
        КонецЦикла;
        
        НаборЗаписей.Записать(Истина);
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗагрузитьПеременныеСреды(Оборудование, ИнформацияОСистеме)
    
    Если ИнформацияОСистеме["environment"] <> Неопределено Тогда
        
        ТекДата = ТекущаяУниверсальнаяДата();
        
        НаборЗаписей = РегистрыСведений.ОборудованиеПеременныеСреды.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Оборудование.Установить(Оборудование);
        
        Для Каждого ТекЗапись Из ИнформацияОСистеме["environment"] Цикл
            
            НовЗапись = НаборЗаписей.Добавить();
            НовЗапись.Оборудование = Оборудование;
            НовЗапись.УникальныйИдентификаторЗаписи = Новый УникальныйИдентификатор;
            НовЗапись.Переменная = ТекЗапись.Ключ;
            НовЗапись.Значение = ТекЗапись.Значение;
            НовЗапись.ДатаЗаписи = ТекДата;
            
        КонецЦикла;
        
        НаборЗаписей.Записать(Истина);
                
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗагрузитьИнформацияОПамяти(Оборудование, ИнформацияОСистеме)
    
    Если ИнформацияОСистеме["memory"] <> Неопределено Тогда
        
        ТекДата = ТекущаяУниверсальнаяДата();
        
        НаборЗаписей = РегистрыСведений.ОборудованиеИнформацияОПамяти.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Оборудование.Установить(Оборудование);
        
        НовЗапись = НаборЗаписей.Добавить();
        НовЗапись.Оборудование = Оборудование;
        НовЗапись.ВсегоПамяти = ИнформацияОСистеме["memory"]["TotalVisibleMemorySize"];
        НовЗапись.ПамятиСвободно = ИнформацияОСистеме["memory"]["FreePhysicalMemory"];
        НовЗапись.ДатаЗаписи = ТекДата;
            
        НаборЗаписей.Записать(Истина);
                
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗагрузитьИнформацияОбОперационнойСистеме(Оборудование, ИнформацияОСистеме)
    
    Если ИнформацияОСистеме["os"] <> Неопределено Тогда
        
        НачатьТранзакцию();
        
        БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.Оборудование");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Оборудование);
        
        Попытка
            
            БлокировкаДанных.Заблокировать();
            
            ОборудованиеОбъект = Оборудование.ПолучитьОбъект();
            ОборудованиеОбъект.ОперационнаяСистема = ИнформацияОСистеме["os"]["Caption"];
            ОборудованиеОбъект.ОперационнаяСистемаВерсия = ИнформацияОСистеме["os"]["Version"];
            ОборудованиеОбъект.Архитектура = ИнформацияОСистеме["os"]["OSArchitecture"];
            
            ОборудованиеОбъект.Записать();
            
            ЗафиксироватьТранзакцию();
            
        Исключение
            
            ОтменитьТранзакцию();
            ВызватьИсключение;
            
        КонецПопытки;
                
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗагрузитьОбновления(Оборудование, ИнформацияОСистеме)
    
    Если ИнформацияОСистеме["hotfix"] <> Неопределено Тогда
        
        ТекДата = ТекущаяУниверсальнаяДата();
        
        НаборЗаписей = РегистрыСведений.ОборудованиеОбновление.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Оборудование.Установить(Оборудование);
        
        Для Каждого ТекЗапись Из ИнформацияОСистеме["hotfix"] Цикл
            
            НовЗапись = НаборЗаписей.Добавить();
            НовЗапись.Оборудование = Оборудование;
            НовЗапись.Обновление = ТекЗапись.Ключ;
            НовЗапись.Описание = ТекЗапись.Значение;
            НовЗапись.ДатаЗаписи = ТекДата;
            
        КонецЦикла;
        
        НаборЗаписей.Записать(Истина);
                
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗагрузитьИнформациюОЛогическихДисках(Оборудование, ИнформацияОСистеме)
    
    Если ИнформацияОСистеме["disk"] <> Неопределено Тогда
        
        ТекДата = ТекущаяУниверсальнаяДата();
        
        НаборЗаписей = РегистрыСведений.ОборудованиеЛогическиеДиски.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Оборудование.Установить(Оборудование);
        
        Для Каждого ТекЗапись Из ИнформацияОСистеме["disk"] Цикл
            
            НовЗапись = НаборЗаписей.Добавить();
            НовЗапись.Оборудование = Оборудование;
            НовЗапись.ЛогическийДиск = ТекЗапись.Ключ;
            НовЗапись.Объем = ТекЗапись.Значение["Capacity"];
            НовЗапись.Свободно = ТекЗапись.Значение["FreeSpace"];
            НовЗапись.ДатаЗаписи = ТекДата;
            
        КонецЦикла;
        
        НаборЗаписей.Записать(Истина);
                
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗагрузитьИнформациюОПроцессорах(Оборудование, ИнформацияОСистеме)
    
    Если ИнформацияОСистеме["cpu"] <> Неопределено Тогда
        
        ТекДата = ТекущаяУниверсальнаяДата();
        
        НаборЗаписей = РегистрыСведений.ОборудованиеПроцессоры.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Оборудование.Установить(Оборудование);
        
        Для Каждого ТекЗапись Из ИнформацияОСистеме["cpu"] Цикл
            
            НовЗапись = НаборЗаписей.Добавить();
            НовЗапись.Оборудование = Оборудование;
            НовЗапись.Процессор = ТекЗапись.Ключ;
            НовЗапись.КоличествоЯдер = ТекЗапись.Значение["NumberOfCores"];
            НовЗапись.Частота = ТекЗапись.Значение["MaxClockSpeed"];
            НовЗапись.ДатаЗаписи = ТекДата;
            
        КонецЦикла;
        
        НаборЗаписей.Записать(Истина);
                
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗагрузитьИнформациюОСетевыхАдаптерах(Оборудование, ИнформацияОСистеме)
    
    Если ИнформацияОСистеме["networkAdapter"] <> Неопределено Тогда
        
        ТекДата = ТекущаяУниверсальнаяДата();
        
        НаборЗаписей = РегистрыСведений.ОборудованиеСетевыеАдаптеры.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Оборудование.Установить(Оборудование);
        
        Для Каждого ТекЗапись Из ИнформацияОСистеме["networkAdapter"] Цикл
            
            НовЗапись = НаборЗаписей.Добавить();
            НовЗапись.Оборудование = Оборудование;
            НовЗапись.СетевойАдаптер = ТекЗапись.Ключ;
            
            Если ТекЗапись.Значение["NetEnabled"] = "TRUE" Тогда
                НовЗапись.Подключено = "Да";
                НовЗапись.Скорость = ТекЗапись.Значение["Speed"];
            ИначеЕсли  ТекЗапись.Значение["NetEnabled"] = "FALSE" Тогда
                НовЗапись.Подключено = "Нет";
                НовЗапись.Скорость = 0;
            Иначе
                НовЗапись.Подключено = "Нет данных";
                НовЗапись.Скорость = 0;
            КонецЕсли;
            
            НовЗапись.Наименование = ТекЗапись.Значение["Name"];
            НовЗапись.MACAddress = ТекЗапись.Значение["MACAddress"];
            НовЗапись.IPAddress = ТекЗапись.Значение["IPAddress"];
            НовЗапись.ИмяКомпьютера = ТекЗапись.Значение["NameNsLookUp"];
            НовЗапись.ИмяКомпьютераПолное = ТекЗапись.Значение["FullNameNsLookUp"];
            НовЗапись.ДатаЗаписи = ТекДата;
            
        КонецЦикла;
        
        НаборЗаписей.Записать(Истина);
                
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗагрузитьПрочее(Оборудование, ИнформацияОСистеме)
    
    Если ИнформацияОСистеме["other"] <> Неопределено Тогда
        
        ТекДата = ТекущаяУниверсальнаяДата();
        
        НаборЗаписей = РегистрыСведений.ОборудованиеПрочее.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Оборудование.Установить(Оборудование);
        
        Для Каждого ТекЗапись Из ИнформацияОСистеме["other"] Цикл
            
            НовЗапись = НаборЗаписей.Добавить();
            НовЗапись.Оборудование = Оборудование;
            НовЗапись.Параметр = ТекЗапись.Ключ;
            НовЗапись.ЗначениеПараметра = ТекЗапись.Значение;
            НовЗапись.ДатаЗаписи = ТекДата;
                       
        КонецЦикла;
        
        НаборЗаписей.Записать(Истина);
                
    КонецЕсли;
    
КонецПроцедуры

Функция SHA256(Данные)
    
    ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(Данные);
    
	Возврат СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
    
КонецФункции

Функция ЗарегистрироватьДамп(РабочийСервер1С, КаталогЭкспорта, ИмяДампа, ПолноеИмяДампа, РазмерФайла, ДатаСоздания)
	
	Замер = ВнутренниеЗамеры.НачатьЗамер("AgentETP зарегестрировать дамп");
    
    // Найти контрольную процедуру
    Если ТипЗнч(РабочийСервер1С) = Тип("СправочникСсылка.ОбъектыКонтроля") Тогда
        
        ВидКП = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль устойчивости системы");
        КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(РабочийСервер1С, ВидКП);
        Если Не ЗначениеЗаполнено(КонтрольнаяПроцедура) Тогда
            
            Комментарий = "Для объекта контроля " + РабочийСервер1С + " не найдена контрольная процедура ""Контроль устойчивости системы"".";
            ЗаписьЖурналаРегистрации("The control procedure in QMC is not found.", УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
            
            ПараметрыДампа = Новый Соответствие;
            ПараметрыДампа.Вставить("error", "The control procedure in QMC is not found. Check the event log in QMC.");
            
            Возврат ПараметрыДампа;
            
        КонецЕсли;
        
    КонецЕсли;
	
	
	ЧастныеНастройкиСловарь = РегистрыСведений.НастройкиСборДампов.Получить(Новый Структура("КонтрольнаяПроцедура", КонтрольнаяПроцедура));
    УстановитьПривилегированныйРежим(Истина);
    ДанныеХранилища = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(КонтрольнаяПроцедура);
    УстановитьПривилегированныйРежим(Ложь);
    
    Если ДанныеХранилища <> Неопределено Тогда
        ЧастныеНастройкиСловарь.Вставить("КаталогЭкспортаДампов", ДанныеХранилища.КаталогЭкспортаДампов); 
    Иначе
        ЧастныеНастройкиСловарь.Вставить("КаталогЭкспортаДампов", ""); 
    КонецЕсли;
        
	КаталогЭкспортаЦКК = ЧастныеНастройкиСловарь.КаталогЭкспортаДампов;
	Если НЕ ПустаяСтрока(КаталогЭкспортаЦКК) Тогда
		КаталогЭкспорта = КаталогЭкспортаЦКК;
	КонецЕсли;
	
	// Проанализировать дамп
	СтруктураИмениФайла = СборДамповСервер.РазобратьИмяФайлаДампаПоИмени(ИмяДампа);
	РезультатыАнализа = СборДамповСервер.ВыполнитьАнализДампа(СтруктураИмениФайла, КаталогЭкспорта);
	
	РегистрируемыйДамп = Новый Структура();
	РегистрируемыйДамп.Вставить("Период", ТекущаяДата());
	РегистрируемыйДамп.Вставить("ВариантДампа", РезультатыАнализа.ВариантДампа);
	РегистрируемыйДамп.Вставить("ОбъектКонтроля", РабочийСервер1С);
	РегистрируемыйДамп.Вставить("ИмяФайлаДампа", ИмяДампа);
	РегистрируемыйДамп.Вставить("НомерДампа", 1);
	РегистрируемыйДамп.Вставить("КаталогЭкспорта", КаталогЭкспорта);
	РегистрируемыйДамп.Вставить("РасположениеТЖ", "");
	РегистрируемыйДамп.Вставить("ИмяБезРасширения", СтруктураИмениФайла.ИмяФайлаБезРасширения);
	РегистрируемыйДамп.Вставить("ПолноеИмя", ПолноеИмяДампа);
	РегистрируемыйДамп.Вставить("КаталогВременныхФайлов", "");
	РегистрируемыйДамп.Вставить("РазмерФайла", РазмерФайла);
	Если РезультатыАнализа.ВидДампа = Перечисления.РезультатыАнализаДампов.ДубльНеисправленногоДампа
		Или ПустаяСтрока(КаталогЭкспорта) Тогда
		РегистрируемыйДамп.Вставить("СостояниеОбработкиДампа", Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампаДляУдаленияАгентом);
	Иначе
		РегистрируемыйДамп.Вставить("СостояниеОбработкиДампа", Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампаАгентом);
	КонецЕсли;
	Если ПустаяСтрока(КаталогЭкспорта) Тогда
		РегистрируемыйДамп.Вставить("ОписаниеОшибки", "Не заполнено значение каталога экспорта");
	КонецЕсли;
	ИдентификаторДампа = СборДамповСервер.ЗарегистрироватьФайлДампа(РегистрируемыйДамп);
	
	ПараметрыДампа = Новый Соответствие;
	ПараметрыДампа.Вставить("guid", Строка(ИдентификаторДампа));
	Если РезультатыАнализа.ВидДампа = Перечисления.РезультатыАнализаДампов.ДубльНеисправленногоДампа Тогда
		ПараметрыДампа.Вставить("action", "delete");
	Иначе
		ПараметрыДампа.Вставить("action", "move");
		ПараметрыДампа.Вставить("path", КаталогЭкспорта);
	КонецЕсли;
    
    ВнутренниеЗамеры.ЗавершитьЗамер(Замер);
    
	Возврат ПараметрыДампа;
	
КонецФункции

Функция ЗарегистрироватьЗавершениеОбработкиДампа(Данные)
	
	Попытка
		ИдентификаторДампа = Новый УникальныйИдентификатор(Данные["guid"]);
		РезультатОбработкиДампа = Данные["result"];
		ОписаниеОшибки = Данные["error_description"];
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Дампы.Период,
	               |	Дампы.ОбъектКонтроля,
	               |	Дампы.ВариантДампа,
	               |	Дампы.ИмяФайлаДампа,
	               |	Дампы.НомерДампа
	               |ИЗ
	               |	РегистрСведений.Дампы КАК Дампы
	               |ГДЕ
	               |	Дампы.ИдентификаторДампа = &ИдентификаторДампа";
	Запрос.УстановитьПараметр("ИдентификаторДампа", ИдентификаторДампа);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.Дампы.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		Если НРег(РезультатОбработкиДампа) = "success" Тогда
			Если МенеджерЗаписи.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампаДляУдаленияАгентом Тогда
				МенеджерЗаписи.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ДампУдаленБезОбработки;
			Иначе
				МенеджерЗаписи.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ДампОбработанУспешно;
			КонецЕсли;
			МенеджерЗаписи.ДатаЗавершенияОбработки = ТекущаяДата();
		Иначе
			Если МенеджерЗаписи.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампаДляУдаленияАгентом Тогда
				МенеджерЗаписи.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаУдаленияДампа;
			Иначе
				МенеджерЗаписи.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаЭкспорта;
			КонецЕсли;
			МенеджерЗаписи.ОписаниеОшибки = ОписаниеОшибки;
		КонецЕсли;
		МенеджерЗаписи.Записать(Истина);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОткрытьИнцидентМониторингПроизводительности(АгентКИП, Инцидент)
    
    НавигационнаяСсылка = НавигационнаяСсылкаАгентКИП(АгентКИП);
    
    ТипИнцидента = Справочники.ТипыИнцидентов.ТипИнцидента(Инцидент["type"], Перечисления.УровниИнцидентов.Ошибка);
    ИнцидентСсылка =  Справочники.Инциденты.Инцидент(АгентКИП, Инцидент);
    ДатаОткрытия = Справочники.Инциденты.ДатаИнцидента(Инцидент);
    
    Сообщение = Инцидент["descr"];
    
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,,Сообщение,1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка,ДатаОткрытия);
    
КонецПроцедуры

Процедура ЗакрытьИнцидентМониторингПроизводительности(АгентКИП, Инцидент)
    
    НавигационнаяСсылка = НавигационнаяСсылкаАгентКИП(АгентКИП);
    
    ТипИнцидента = Справочники.ТипыИнцидентов.ТипИнцидента(Инцидент["type"], Перечисления.УровниИнцидентов.Ошибка);
    ИнцидентСсылка =  Справочники.Инциденты.Инцидент(АгентКИП, Инцидент);
    ДатаЗакрытия = Справочники.Инциденты.ДатаИнцидента(Инцидент);
    
    Сообщение = Инцидент["descr"];
    
    ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, ИнцидентСсылка, Истина, Сообщение, ДатаЗакрытия);
    
КонецПроцедуры

Процедура ОткрытьИнцидентКонтрольДоступностиИнформационнойБазы(ПараметрыАнализаДоступности, Сообщение)
    
    ПараметрыИнцидента = КонтрольПодключенийСервер.ПолучитьПараметрыИнцидента(ПараметрыАнализаДоступности.ИнформационнаяБаза, "ИнфоБазаАгентКИП", Перечисления.УровниИнцидентов.Ошибка);
    ПараметрыИнцидента.Вставить("ОбъектЦКК", ПараметрыАнализаДоступности.ИнформационнаяБаза);
    ПараметрыИнцидента.Вставить("СтрокаПодключения", Строка(ПараметрыАнализаДоступности.ИнформационнаяБаза) + " от " + ПараметрыАнализаДоступности.КонтрольнаяПроцедура);
    
    // Тип инцидента
    НаименованиеТипаИнцидента = ПараметрыИнцидента.НаименованиеТипаИнцидента;
    Если ТипЗнч(НаименованиеТипаИнцидента) = Тип("СправочникСсылка.ТипыИнцидентов") Тогда
        ТипИнцидента = НаименованиеТипаИнцидента; 
    Иначе
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
        ТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Ошибка);
    КонецЕсли;
    
    // Инцидент "Счетчик"
    Если ТипЗнч(ПараметрыИнцидента.КодИнцидента) = Тип("СправочникСсылка.Инциденты") Тогда
        Инцидент = ПараметрыИнцидента.КодИнцидента;
    Иначе    
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента(ПараметрыИнцидента.КодИнцидента);
        Инцидент = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, ПараметрыИнцидента.КодИнцидента, Ложь);
    КонецЕсли;
        
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, Инцидент, ПараметрыАнализаДоступности.КонтрольнаяПроцедура, ПараметрыАнализаДоступности.ИнформационнаяБаза, Сообщение, 1,,,);
    
КонецПроцедуры

Процедура ЗакрытьИнцидентКонтрольДоступностиИнформационнойБазы(ПараметрыАнализаДоступности)
    
    ПараметрыИнцидента = КонтрольПодключенийСервер.ПолучитьПараметрыИнцидента(ПараметрыАнализаДоступности.ИнформационнаяБаза, "ИнфоБазаАгентКИП", Перечисления.УровниИнцидентов.Ошибка);
    ИнцидентыСервер.ЗакрытьИнцидент(ПараметрыИнцидента.НаименованиеТипаИнцидента, ПараметрыИнцидента.КодИнцидента, Истина);
        
КонецПроцедуры

Процедура ИзменитьКластер1С(Кластер1С, ПараметрыКластера, АгентКИП)
    
    ЕстьАгент = Ложь;
    
    Для Каждого ТекПараметры Из Кластер1С.Подключение.АгентКИППараметры Цикл
        Если ТекПараметры.АгентКИП = АгентКИП Тогда
            ЕстьАгент = Истина;
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    Если НЕ ЕстьАгент Тогда
        ПодключениеОбъект = Кластер1С.Подключение.ПолучитьОбъект();
        НовСтрока = ПодключениеОбъект.АгентКИППараметры.Добавить();
        НовСтрока.АгентКИП = АгентКИП;
        НовСтрока.Активный = Ложь;
        НовСтрока.ПортRAS = ПараметрыКластера["portRAS"];
        ПодключениеОбъект.ДополнительныеСвойства.Вставить("СформированитьНаименование", Истина);
        ПодключениеОбъект.Записать();        
    КонецЕсли;
    
КонецПроцедуры

Процедура СоздатьКластер1С(ПараметрыКластера, АгентКИП)
    
    ПараметрыКластера.Вставить("typeConnection", Перечисления.ТипПодключенияКластер1С.АгентКИП);
    ПараметрыКластера.Вставить("agentUUID", АгентКИП.УникальныйИдентификаторАгента);
    ПараметрыКластера.Вставить("monitoring", Истина);
    
    ПараметрыЕдиницыМасштабирования = Новый Соответствие;
    ПараметрыЕдиницыМасштабирования.Вставить("equipmentLocationRef", Константы.ПлощадкаЭксплуатацииПоУмолчанию.Получить());
    
    Кластеры1С = Новый Массив;
    
    ПараметрыСоздания = РегистрыСведений.ПараметрыКластеров.КонвертироватьПараметры(ПараметрыКластера, Перечисления.ТипыПараметровКластер1С.АгентКИП, Перечисления.ТипыПараметровКластер1С.Нода);
    ПараметрыСоздания.Вставить("portRAS", ПараметрыКластера["portRAS"]);
    
    КонтрольПотребленияПамятиНастройкиПоУмолчанию = РегистрыСведений.НастройкиКонтрольПамяти.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти());
    
    КонтрольПотребленияПамяти = Новый Соответствие;
    КонтрольПотребленияПамяти.Вставить("description", "Мониторинг кластера " + ПараметрыСоздания["host"] + ":" + Формат(ПараметрыСоздания["portRmngr"],"ЧН=0; ЧГ=0"));
    КонтрольПотребленияПамяти.Вставить("memoryThreshold", ПараметрыСоздания["maxMemorySize"]/1024);
    КонтрольПотребленияПамяти.Вставить("monitoring", 2);
    Если ЗначениеЗаполнено(КонтрольПотребленияПамятиНастройкиПоУмолчанию.СрокХраненияДанных) Тогда
        КонтрольПотребленияПамяти.Вставить("storeDataHour", КонтрольПотребленияПамятиНастройкиПоУмолчанию.СрокХраненияДанных);
    Иначе
        КонтрольПотребленияПамяти.Вставить("storeDataHour", 2);
    КонецЕсли;
    КонтрольПотребленияПамяти.Вставить("automaticallyDelete", КонтрольПотребленияПамятиНастройкиПоУмолчанию.АвтоматическиУдалятьЗаписиСеансов);
    КонтрольПотребленияПамяти.Вставить("start", Истина);
    
    ПараметрыСоздания.Вставить("memoryMonitoring", КонтрольПотребленияПамяти); 
       
    Кластеры1С.Добавить(ПараметрыСоздания);
    
    ПараметрыЕдиницыМасштабирования.Вставить("cluster1C", Кластеры1С);
    
    ЕдиницаМасштабирования.ЗагрузитьЕдиницуМасштабирования(ПараметрыЕдиницыМасштабирования);
    
КонецПроцедуры

Процедура ЗаполнитьРабочийСервер(Нода, Кластер1С, Параметры, dumps_storage)
    
    СписокОборудования = Нода["equipment"];
    Если СписокОборудования = Неопределено Тогда
        СписокОборудования = Новый Массив;
        Нода.Вставить("equipment", СписокОборудования);
    КонецЕсли;
        
    РабочиеСервера = Нода["workingServer1C"];
    Если РабочиеСервера = Неопределено Тогда
        РабочиеСервера = Новый Массив;
        Нода.Вставить("workingServer1C", РабочиеСервера);
    КонецЕсли;
    
    Оборудование = Новый Соответствие;
    Оборудование.Вставить("description", Параметры["hostName"]);
    Оборудование.Вставить("host", Параметры["hostName"]);
    Оборудование.Вставить("type", "refresh");
    Роли = Новый Массив;
    Роли.Добавить("Рабочий сервер 1С");
    Оборудование.Вставить("role", Роли);
    СписокОборудования.Добавить(Оборудование);
    
    Параметры.Вставить("cluster1C", Кластер1С);
    РабочийСервер = РегистрыСведений.ПараметрыРабочихСерверов.КонвертироватьПараметры(Параметры, Перечисления.ТипыПараметровКластер1С.АгентКИП, Перечисления.ТипыПараметровКластер1С.Нода);
    
    КонтрольУстойчивостиНаименование = "Контроль устойчивости для " + РабочийСервер["equipment"];
    Если РабочийСервер["mainServer"] Тогда
        КонтрольУстойчивостиНаименование = КонтрольУстойчивостиНаименование + " (Центральный)";
    КонецЕсли;
        
    КонтрольУстойчивости = Новый Соответствие;
    КонтрольУстойчивости.Вставить("description", КонтрольУстойчивостиНаименование);
    КонтрольУстойчивости.Вставить("folderTjNetwork", "");
    КонтрольУстойчивости.Вставить("folderTjLocal", "");
    КонтрольУстойчивости.Вставить("durationFileTj", "");
    КонтрольУстойчивости.Вставить("folderDumpNetwork", "");
    КонтрольУстойчивости.Вставить("folderDumpLocal", "");
    КонтрольУстойчивости.Вставить("folderTemp", "");
    КонтрольУстойчивости.Вставить("levelDetailDump", "");
    КонтрольУстойчивости.Вставить("autoSettingsTj", "");
    КонтрольУстойчивости.Вставить("agentEnable", Истина);
    КонтрольУстойчивости.Вставить("folderExportDumps", dumps_storage);
    
    Расписание = Новый Соответствие;
    Расписание.Вставить("repeatDays", 1);
    Расписание.Вставить("repeatSeconds", 60);
    КонтрольУстойчивости.Вставить("schedule", Расписание);
        
    КонтрольУстойчивости.Вставить("start", Истина);
    
    РабочийСервер.Вставить("controlCollectionDumps", КонтрольУстойчивости);
    
    РабочиеСервера.Добавить(РабочийСервер);        
    
КонецПроцедуры

Процедура ЗагрузитьИнцидентыРабочегоСервера(РабочийСервер1С, Инциденты)
    
    Для Каждого ТекИнцидент Из Инциденты Цикл
        
        Если ТекИнцидент["type"] = "CONTROL_PARAMETRS" Тогда
            Если ТекИнцидент["state"] = "OPEN" Тогда
                Кластер_1С.ОткрытьИнцидентРабочийСерверКонтрольПараметров(РабочийСервер1С, ТекИнцидент, Истина);
            ИначеЕсли ТекИнцидент["state"] = "CLOSE" Тогда
                Кластер_1С.ЗакрытьИнцидентРабочийСерверКонтрольПараметров(РабочийСервер1С, ТекИнцидент);
            КонецЕсли;
        КонецЕсли;
                
    КонецЦикла;
    
КонецПроцедуры

Процедура ЗагрузитьИнцидентыСбораДампов(РабочийСервер1С, ПараметрыАгента, Инциденты)
    
    Для Каждого ТекИнцидент Из Инциденты Цикл
        
        Если ТекИнцидент["type"] = "ERROR_DUMP_CATALOG_SOURCE" Тогда
            
            Если ТекИнцидент["state"] = "OPEN" Тогда
                СборДамповСервер.ОткрытьИнцидентКаталогИсточникДампов(ПараметрыАгента.Ссылка, ТекИнцидент);
            ИначеЕсли ТекИнцидент["state"] = "CLOSE" Тогда
                СборДамповСервер.ЗакрытьИнцидентКаталогИсточникДампов(ПараметрыАгента.Ссылка, ТекИнцидент);
            КонецЕсли;
            
        ИначеЕсли ТекИнцидент["type"] = "ERROR_DUMP_CATALOG_STORAGE" Тогда
            
            Если ТипЗнч(РабочийСервер1С) = Тип("СправочникСсылка.ОбъектыКонтроля") Тогда
                Если ТекИнцидент["state"] = "OPEN" Тогда
                    СборДамповСервер.ОткрытьИнцидентКаталогАрхива(РабочийСервер1С, ТекИнцидент);
                ИначеЕсли ТекИнцидент["state"] = "CLOSE" Тогда
                    СборДамповСервер.ЗакрытьИнцидентКаталогАрхива(РабочийСервер1С, ТекИнцидент);
                КонецЕсли;
            КонецЕсли;
            
        ИначеЕсли ТекИнцидент["type"] = "ACCESS_DENIED_CATALOG_STORAGE" Тогда
            
            Если ТекИнцидент["state"] = "OPEN" Тогда
                СборДамповСервер.ОткрытьИнцидентЗаписьВКаталог(ПараметрыАгента.Ссылка, ТекИнцидент);
            ИначеЕсли ТекИнцидент["state"] = "CLOSE" Тогда
                СборДамповСервер.ЗакрытьИнцидентЗаписьВКаталог(ПараметрыАгента.Ссылка, ТекИнцидент);
            КонецЕсли;
            
        ИначеЕсли ТекИнцидент["type"] = "ERROR_DUMP_CATALOG_SAME" Тогда
            
            Если ТипЗнч(РабочийСервер1С) = Тип("СправочникСсылка.ОбъектыКонтроля") Тогда
                Если ТекИнцидент["state"] = "OPEN" Тогда
                    СборДамповСервер.ОткрытьИнцидентОдинИТотЖеКаталог(РабочийСервер1С, ТекИнцидент);
                ИначеЕсли ТекИнцидент["state"] = "CLOSE" Тогда
                    СборДамповСервер.ЗакрытьИнцидентОдинИТотЖеКаталог(РабочийСервер1С, ТекИнцидент);
                КонецЕсли;
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ИзменитьИнформационнуюБазу(ИнформационнаяБаза, Параметры)
    
    ПараметрыЦКК = РегистрыСведений.ПараметрыИнформационныхБаз.КонвертироватьПараметры(Параметры, Перечисления.ТипыПараметровКластер1С.АгентКИП, Перечисления.ТипыПараметровКластер1С.ЦКК);
    Справочники.ОбъектыКонтроля.ИзменитьИнформационнуюБазу(ИнформационнаяБаза, ПараметрыЦКК);
    
КонецПроцедуры

Процедура ЗаполнитьИнформационнуюБазу(Нода, Кластер1С, Параметры)
    
    ИнформационныеБазы = Нода["infoBases"];
    Если ИнформационныеБазы = Неопределено Тогда
        ИнформационныеБазы = Новый Массив;
        Нода.Вставить("infoBases", ИнформационныеБазы);
    КонецЕсли;
    
    Параметры.Вставить("cluster1C", Кластер1С);
    ИнформационнаяБаза = РегистрыСведений.ПараметрыИнформационныхБаз.КонвертироватьПараметры(Параметры, Перечисления.ТипыПараметровКластер1С.АгентКИП, Перечисления.ТипыПараметровКластер1С.Нода);
    ИнформационныеБазы.Добавить(ИнформационнаяБаза);
    
КонецПроцедуры

Процедура ЗагрузитьИнцидентыИнформационнойБазы(ИнформационнаяБаза, Инциденты)
    
    Для Каждого ТекИнцидент Из Инциденты Цикл
        
        Если ТекИнцидент["type"] = "AUTHENTIFICATION" Тогда
            Если ТекИнцидент["state"] = "OPEN" Тогда
                Кластер_1С.ОткрытьИнцидентИнформационнаяБазаАутентификация(ИнформационнаяБаза, ТекИнцидент);
            ИначеЕсли ТекИнцидент["state"] = "CLOSE" Тогда
                Кластер_1С.ЗакрытьИнцидентИнформационнаяБазаАутентификация(ИнформационнаяБаза, ТекИнцидент);
            КонецЕсли;
        ИначеЕсли ТекИнцидент["type"] = "CONTROL_PARAMETRS" Тогда
            Если ТекИнцидент["state"] = "OPEN" Тогда
                Кластер_1С.ОткрытьИнцидентИнформационнаяКонтрольПараметров(ИнформационнаяБаза, ТекИнцидент, Истина);
            ИначеЕсли ТекИнцидент["state"] = "CLOSE" Тогда
                Кластер_1С.ЗакрытьИнцидентИнформационнаяКонтрольПараметров(ИнформационнаяБаза, ТекИнцидент);
            КонецЕсли;
        КонецЕсли;
                
    КонецЦикла;
    
КонецПроцедуры

Функция НайтиКластерПоАгентуСПустымИдентификатором(АгентКИП, ПараметрыКластера)
    
    Кластер1С = Справочники.ОбъектыКонтроля.ПустаяСсылка();
    
    ПараметрыПоиска = Новый Структура("ТипПодключения, УникальныйИдентификаторАгента, ПортСервераАдминистрирования",
        Перечисления.ТипПодключенияКластер1С.АгентКИП,
        АгентКИП.УникальныйИдентификаторАгента,
        ПараметрыКластера["portRAS"]);
    Подключение = Справочники.ПараметрыПодключенияКластер1С.НайтиПодключение(ПараметрыПоиска);
    
    Если ЗначениеЗаполнено(Подключение) Тогда
        
        Кластер1С = КластерПоПодключению(Подключение);
                
    КонецЕсли;
    
    Возврат Кластер1С;
    
КонецФункции

Функция НайтиКластерRASСПустымИдентификатором(АгентКИП, ПараметрыКластера)
    
    Кластер1С = Справочники.ОбъектыКонтроля.ПустаяСсылка();
    
    Оборудование = Справочники.Оборудование.НайтиПоАгенту(АгентКИП);
    ВсеАдреса = Справочники.Оборудование.ВсеАдреса(Оборудование);
    
    Подключение = Неопределено;
    
    Для Каждого КлючЗначение Из ВсеАдреса Цикл
        
        ПараметрыПоиска = Новый Структура("ТипПодключения, АдресСервераАдминистрирования, ПортСервераАдминистрирования",
            Перечисления.ТипПодключенияКластер1С.RAS,
            КлючЗначение.Ключ,
            ПараметрыКластера["portRAS"]);
            
        Подключение = Справочники.ПараметрыПодключенияКластер1С.НайтиПодключение(ПараметрыПоиска);
        
        Если ЗначениеЗаполнено(Подключение) Тогда
            Прервать;
        КонецЕсли;
                
    КонецЦикла;
    
    Если ЗначениеЗаполнено(Подключение) Тогда
        
        Кластер1С = КластерПоПодключению(Подключение);
                
    КонецЕсли;
    
    Возврат Кластер1С;
        
КонецФункции

Функция КластерПоПодключению(Подключение)
    
    Кластер1С = Справочники.ОбъектыКонтроля.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.ОбъектыКонтроля
    |ГДЕ
    |   Владелец = &Кластер1С
    |   И Подключение = &Подключение
    |   И УникальныйИдентификаторОбъекта = &ПустаяСтрока
    |";
    
    Запрос.УстановитьПараметр("Кластер1С", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
    Запрос.УстановитьПараметр("Подключение", Подключение);
    Запрос.УстановитьПараметр("ПустаяСтрока", "");
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Если Выборка.Количество() = 1 Тогда
        Выборка.Следующий();
        Кластер1С = Выборка.Ссылка;
    КонецЕсли;
    
    Возврат Кластер1С;
    
КонецФункции


#КонецОбласти

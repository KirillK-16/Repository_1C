Функция РазобратьТехжурналы() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
    
    ТекДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТехнологическиеЖурналы.Ссылка КАК СсылкаТЖ,
	|	ТехнологическиеЖурналы.Наименование КАК НаименованиеТЖ,
	|	ТехнологическиеЖурналы.КаталогЛогов КАК КаталогЛоговТЖ,
	|	ТЧ_ВнешниеЦКК.ВнешнийЦКК КАК ВнешнийЦКК,
	|	ISNULL(ТЧ_ВнешниеЦКК.ПередаватьДанные, ЛОЖЬ) КАК ПередаватьДанные
	|ИЗ
	|	Справочник.ТехнологическиеЖурналы КАК ТехнологическиеЖурналы
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ТехнологическиеЖурналы.ВнешниеЦКК КАК ТЧ_ВнешниеЦКК
	|ПО
	|	ТЧ_ВнешниеЦКК.Ссылка = ТехнологическиеЖурналы.Ссылка
	|ГДЕ
	|	ТехнологическиеЖурналы.ПометкаУдаления = Ложь
	|";
	
	Результат = Запрос.Выполнить();
		
	ТекущаяСсылкаТЖ = Неопределено;
	СоответствиеТЖ = Новый Соответствие;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТекущаяСсылкаТЖ <> Выборка.СсылкаТЖ Тогда
			ПараметрыТЖ = Новый Соответствие;
			ПараметрыТЖ.Вставить("ТекДата", ТекДата);
			ПараметрыТЖ.Вставить("НаименованиеТЖ", Выборка.НаименованиеТЖ);
			ПараметрыТЖ.Вставить("КаталогЛоговТЖ", Выборка.КаталогЛоговТЖ);
			ПараметрыТЖ.Вставить("ВнешниеЦКК", Новый Массив);
			
			СоответствиеТЖ.Вставить(Выборка.СсылкаТЖ, ПараметрыТЖ);
		КонецЕсли;
		
		Если Выборка.ПередаватьДанные Тогда
			СоответствиеТЖ[Выборка.СсылкаТЖ]["ВнешниеЦКК"].Добавить(Выборка.ВнешнийЦКК);
		КонецЕсли;
				
		ТекущаяСсылкаТЖ = Выборка.СсылкаТЖ;
	КонецЦикла;
	
	Для Каждого ТекущийТЖ Из СоответствиеТЖ Цикл
		РазобратьФайлыТехжурнала(ТекущийТЖ);
	КонецЦикла;
КонецФункции

Функция РазобратьФайлыТехжурнала(ТЖ) Экспорт
	
	ТекДата = ТЖ.Значение["ТекДата"];
	НаименованиеТЖ = ТЖ.Значение["НаименованиеТЖ"];
	КаталогЛоговТЖ = ТЖ.Значение["КаталогЛоговТЖ"];
	ВнешниеЦКК = ТЖ.Значение["ВнешниеЦКК"];
	
	МаскиФайлов = СформироватьМаскиФайлов(ТекДата);
	
	Результат = Новый Соответствие;
	Для Каждого МаскаФайлов Из МаскиФайлов Цикл
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Файлы = НайтиФайлы(КаталогЛоговТЖ, МаскаФайлов["МаскаФайл"], Истина);
		Окончание = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//Сообщить("Поиск файлов: " + (Окончание - Начало));
		
		ЧтениеТекста = Новый ЧтениеТекста;
		
		Для Каждого Файл Из Файлы Цикл
			АнализФайлаТехжурнала(Файл.ПолноеИмя, ЧтениеТекста, МаскаФайлов["МаскаДата"], Результат);
		КонецЦикла;
	КонецЦикла;
	
	ЗаписатьРезультатВСтатистикаБуферДата(НаименованиеТЖ, Результат, ВнешниеЦКК);
	
	Константы.ДатаЗапускаСбораСтатистикиТехжурналов.Установить(ТекДата);
КонецФункции

Функция УдалитьКаталогДанныхТехнологическогоЖурнала(КаталогПуть) Экспорт
	ДатаЗавершения = ТекущаяДата() + 90;
	Пока ТекущаяДата() < ДатаЗавершения Цикл
		Попытка
			УдалитьФайлы(КаталогПуть);
			Прервать;
		Исключение
		КонецПопытки;
		КипВнешнийКомпонент.Пауза(5000);
	КонецЦикла;
КонецФункции

Процедура ЗаписатьРезультатВСтатистикаБуферДата(НаименованиеТЖ, Результат, ВнешниеЦКК)
	ПорядковыйНомерСтатистикаБуферДата = Справочники.ПорядковыеНомераДанных.ПолучитьПорядковыйНомер(Справочники.ПорядковыеНомераДанных.СтатистикаБуферДата.Ссылка);
	ПорядковыйНомерСтатистикаБуферДатаЦКК = Справочники.ПорядковыеНомераДанных.ПолучитьПорядковыйНомер(Справочники.ПорядковыеНомераДанных.СтатистикаБуферДатаВнешниеЦКК.Ссылка);
	
	НаборЗаписей = РегистрыСведений.СтатистикаБуферДата.СоздатьНаборЗаписей();
	НаборЗаписейВнешниеЦКК = РегистрыСведений.СтатистикаБуферДатаВнешниеЦКК.СоздатьНаборЗаписей();
	
	Для Каждого РезультатДата Из Результат Цикл
		Данные = "";
		Попытка
			ДатаСобытий = Дата("20"+ Лев(РезультатДата.Ключ,2) + Сред(РезультатДата.Ключ,3,2) + Сред(РезультатДата.Ключ,5,2) + Сред(РезультатДата.Ключ,7,2) + Прав(РезультатДата.Ключ,2));
			Для Каждого Событие Из РезультатДата.Значение Цикл
				Данные = Данные +
				"Технологические журналы." + НаименованиеТЖ + "." +
				Событие.Ключ + "." +
				Событие.Значение["СуммарнаяДлительность"]/1000000 + "." +
				Событие.Значение["ЧислоСобытий"] + ";";
			КонецЦикла;
			
			НовЗапись = НаборЗаписей.Добавить();
			НовЗапись.ПорядковыйНомерПакета = ПорядковыйНомерСтатистикаБуферДата;
			НовЗапись.ДатаЗаписи = ДатаСобытий;
			НовЗапись.ГУИД = Новый УникальныйИдентификатор();
			НовЗапись.Данные = Данные;
			//НовЗапись.Источник = "localQMC";
			
			Для Каждого ТекВнешнийЦКК Из ВнешниеЦКК Цикл
				НовЗаписьВнешнийЦКК = НаборЗаписейВнешниеЦКК.Добавить();
				НовЗаписьВнешнийЦКК.ВнешнийЦКК = ТекВнешнийЦКК;
				НовЗаписьВнешнийЦКК.ПорядковыйНомерПакета = ПорядковыйНомерСтатистикаБуферДатаЦКК;
				НовЗаписьВнешнийЦКК.ДатаЗаписи = ДатаСобытий;
				НовЗаписьВнешнийЦКК.ГУИД = Новый УникальныйИдентификатор();
				НовЗаписьВнешнийЦКК.Данные = Данные;
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Если ПараметрыСеанса.ВерсияПлатформы > 8000300000000000 Тогда
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	НаборЗаписей.Записать(Ложь);
	
	Если ПараметрыСеанса.ВерсияПлатформы > 8000300000000000 Тогда
		НаборЗаписейВнешниеЦКК.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	НаборЗаписейВнешниеЦКК.Записать(Ложь);
КонецПроцедуры

Функция СформироватьМаскиФайлов(ТекДата)
	КрайняяДатаЗапуска = Константы.ДатаЗапускаСбораСтатистикиТехжурналов.Получить();
	Если КрайняяДатаЗапуска = Дата(1,1,1) Тогда
		КрайняяДатаЗапуска = ТекДата;
	КонецЕсли;
	
	МассивМасок = Новый Массив;
	Пока КрайняяДатаЗапуска <= ТекДата Цикл
		Маски = Новый Соответствие;
		Маски.Вставить("МаскаДата", Формат(КрайняяДатаЗапуска,"ДФ=ггММддЧЧ"));
		Маски.Вставить("МаскаФайл", Маски["МаскаДата"] + ".log");
		
		МассивМасок.Добавить(Маски);		
		КрайняяДатаЗапуска = КрайняяДатаЗапуска + 3600;
	КонецЦикла;
	
	Возврат МассивМасок;
КонецФункции

Функция УстановитьПозициюЧтения(ЧтениеТекста, ПозицияЧтения, Знач РазмерПакета)
	ТекПозиция = 0;
	Если ПозицияЧтения <= РазмерПакета Тогда
		ЧтениеТекста.Прочитать(ПозицияЧтения);
		ТекПозиция = ПозицияЧтения;
	Иначе
		Пока ТекПозиция < ПозицияЧтения Цикл
			Если ТекПозиция + РазмерПакета <= ПозицияЧтения Тогда
				ЧтениеТекста.Прочитать(РазмерПакета);
				ТекПозиция = ТекПозиция + РазмерПакета;
			Иначе
				ЧтениеТекста.Прочитать(ПозицияЧтения - ТекПозиция);
				ТекПозиция = ПозицияЧтения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекПозиция;
КонецФункции

Функция АнализФайлаТехжурнала(ИмяФайла, ЧтениеТекста, МаскаДата, Результат, РазмерФайла = Неопределено) Экспорт
	//Читаем файл блоками по мегабайту
	РАЗМЕР_ПАКЕТА = 1048576;
	
	Файл = Новый Файл(ИмяФайла);
	
	ПозицияЧтения = РегистрыСведений.СтатистикаФайлыТехжурналов.ПолучитьПозициюЧтения(ИмяФайла);
	
	ЧтениеТекста.Открыть(ИмяФайла, КодировкаТекста.UTF8,,"☺",Ложь);
	
	ТекущаяПозиция = 0;
	Если ПозицияЧтения > 0 Тогда
		ТекущаяПозиция = УстановитьПозициюЧтения(ЧтениеТекста, ПозицияЧтения, РАЗМЕР_ПАКЕТА);
	КонецЕсли;
	
	ПозицияКавычки = Новый Структура("Позиция, Кавычка, Открыта", 0, "", Ложь);
	Буфер = "";
	ДанныеОстаток = "";
	ЕстьДанные = Ложь;
	ДанныеДлина = 0;
	Пока Буфер <> Неопределено Цикл
		Буфер = ЧтениеТекста.Прочитать(РАЗМЕР_ПАКЕТА);
		ДанныеДлина = ДанныеДлина + СтрДлина(Буфер);
		
		Если Буфер <> Неопределено Тогда
			ПозицияКавычки.Позиция = 0;
			ПозицияКавычки.Открыта = Ложь;
			ДанныеОстаток = РазобратьБуферТехжурнала(ДанныеОстаток + Буфер, МаскаДата, ПозицияКавычки, Результат, ИмяФайла);
			ЕстьДанные = Истина;
		КонецЕсли;
	КонецЦикла;
		
	ЧтениеТекста.Закрыть();
	Если ЕстьДанные Тогда
		РегистрыСведений.СтатистикаФайлыТехжурналов.УстановитьПозициюЧтения(ИмяФайла, ТекущаяПозиция + ДанныеДлина - СтрДлина(ДанныеОстаток));
	КонецЕсли;
КонецФункции

Процедура СформироватьПозициюКавычки(ПозицияКавычки, Буфер)
	ПозицияОдинарнойКавычки = СтрНайти(Буфер, "'");
	РезультатОдинарнойКавычки = ?(ПозицияОдинарнойКавычки > 0, "1", "0");
		
	ПозицияДвойнойКавычки = СтрНайти(Буфер, """");
	РезультатДвойнойКавычки = ?(ПозицияДвойнойКавычки > 0, "1", "0");
	
	РезультатПоиска = РезультатОдинарнойКавычки + РезультатДвойнойКавычки;
	Если РезультатПоиска = "00" Тогда
		ПозицияКавычки.Позиция = 0;
		ПозицияКавычки.Кавычка = "";
	ИначеЕсли РезультатПоиска = "01" Тогда
		ПозицияКавычки.Позиция = ПозицияДвойнойКавычки;
		ПозицияКавычки.Кавычка = """";
	ИначеЕсли РезультатПоиска = "10" Тогда
		ПозицияКавычки.Позиция = ПозицияОдинарнойКавычки;
		ПозицияКавычки.Кавычка = "'";
	ИначеЕсли РезультатПоиска = "11" Тогда
		Если ПозицияОдинарнойКавычки < ПозицияДвойнойКавычки Тогда
			ПозицияКавычки.Позиция = ПозицияОдинарнойКавычки;
			ПозицияКавычки.Кавычка = "'";
		Иначе
			ПозицияКавычки.Позиция = ПозицияДвойнойКавычки;
			ПозицияКавычки.Кавычка = """";
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Функция РазобратьБуферТехжурнала(Буфер, МаскаДата, ПозицияКавычки, Результат, ИмяФайла) Экспорт
	БуферДлина = СтрДлина(Буфер);
		
	Если НЕ ПозицияКавычки.Открыта Тогда
		СформироватьПозициюКавычки(ПозицияКавычки, Буфер);
	Иначе
		ПозицияКавычки.Позиция = СтрНайти(Буфер, ПозицияКавычки.Кавычка);
	КонецЕсли;
	
	Если ПозицияКавычки.Позиция = 0 Тогда
		КрайнийСимвол = Прав(Буфер, 1);
		Если (КрайнийСимвол = Символы.ВК) ИЛИ (КрайнийСимвол = Символы.ПС) Тогда
			ВернутьДанныеОстаток = Ложь;
		Иначе
			ВернутьДанныеОстаток = Истина;
		КонецЕсли;
			
		ДанныеОстаток = РазобратьБуфер(Буфер, МаскаДата, Результат, ВернутьДанныеОстаток, ИмяФайла);
	Иначе
		БуферТемп = Новый ЗаписьXML;
		БуферТемп.УстановитьСтроку();
		Пока ПозицияКавычки.Позиция <> 0 Цикл
			БуферТемп.ЗаписатьБезОбработки(ПреобразоватьБуферКавычки(Буфер, БуферДлина, МаскаДата, ПозицияКавычки));
			СформироватьПозициюКавычки(ПозицияКавычки, Буфер);
		КонецЦикла;
		
		Буфер = БуферТемп.Закрыть() + Буфер;
		Если ПозицияКавычки.Открыта Тогда
			ВернутьДанныеОстаток = Истина;
		Иначе
			КрайнийСимвол = Прав(Буфер, 1);
			Если (КрайнийСимвол = Символы.ВК) ИЛИ (КрайнийСимвол = Символы.ПС) Тогда
				ВернутьДанныеОстаток = Ложь;
			Иначе
				ВернутьДанныеОстаток = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеОстаток = РазобратьБуфер(Буфер, МаскаДата, Результат, ВернутьДанныеОстаток, ИмяФайла);
	КонецЕсли;
	
	Возврат ДанныеОстаток;
КонецФункции

Функция РазобратьБуфер(Буфер, МаскаДата, Результат, ВернутьДанныеОстаток, ИмяФайла)
	ЧислоСтрок = СтрЧислоСтрок(Буфер);
	Если ВернутьДанныеОстаток Тогда
		ЧислоСтрокОбработки = ЧислоСтрок - 1;
	Иначе
		ЧислоСтрокОбработки = ЧислоСтрок;
	КонецЕсли;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.ДобавитьСтроку(Буфер);
	
	ТекДанные = Новый ТекстовыйДокумент;
	Для ТекСтрока = 1 По ЧислоСтрокОбработки Цикл
		ТекДанные.ДобавитьСтроку(ТД.ПолучитьСтроку(ТекСтрока));
		
		РезультатСобытие = РазобратьСобытиеТехжурнала(ТекДанные, МаскаДата, Буфер, ИмяФайла);
		
		РезультатДата = Результат[РезультатСобытие["Дата"]];
		Если РезультатДата = Неопределено Тогда
			РезультатДата = Новый Соответствие;
			Результат.Вставить(РезультатСобытие["Дата"], РезультатДата);
		КонецЕсли;
		
		РезультатСобытиеНаДату = РезультатДата[РезультатСобытие["Событие"]];
		Если РезультатСобытиеНаДату = Неопределено Тогда
			РезультатСобытиеНаДату = Новый Соответствие;
			РезультатСобытиеНаДату.Вставить("ЧислоСобытий", 1);
			РезультатСобытиеНаДату.Вставить("СуммарнаяДлительность", РезультатСобытие["Длительность"]);
			РезультатДата.Вставить(РезультатСобытие["Событие"], РезультатСобытиеНаДату);
		Иначе
			РезультатСобытиеНаДату["ЧислоСобытий"] = РезультатСобытиеНаДату["ЧислоСобытий"] + 1;
			РезультатСобытиеНаДату["СуммарнаяДлительность"] = РезультатСобытиеНаДату["СуммарнаяДлительность"] + РезультатСобытие["Длительность"];
		КонецЕсли;
	КонецЦикла;
	
	Если ВернутьДанныеОстаток Тогда
		ТекДанные = ТД.ПолучитьСтроку(ЧислоСтрок);
		Возврат ТекДанные;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПреобразоватьБуферКавычки(Буфер, БуферДлина, МаскаДата, ПозицияКавычки)
	БуферЛево = "";
	
	//Левая часть буфера до  открывающей кавычки, плюс сама кавычка, в случае если ПозицияКавычки.Открыта = Ложь
	//т.е. мы нашли открывающую кавычку, но еще ее не открыли - не прочитали подстроку между кавычками
	Если НЕ ПозицияКавычки.Открыта Тогда
		БуферЛево = Лев(Буфер, ПозицияКавычки.Позиция);
		БуферДлина = БуферДлина - ПозицияКавычки.Позиция;
		Буфер = Прав(Буфер, БуферДлина);
		
		//открываем позицию кавычки
		ПозицияКавычки.Открыта = Истина;
	КонецЕсли;
		
	Позиция = СтрНайти(Буфер, ПозицияКавычки.Кавычка);
	
	//Если в буфере есть закрывающая кавычка, то обрабатываем строку между кавычками
	Если Позиция <> 0 Тогда
		БуферКавычки = Лев(Буфер, Позиция);
		БуферКавычки = СтрЗаменить(БуферКавычки, Символы.ПС, "▲");
		БуферКавычки = СтрЗаменить(БуферКавычки, Символы.ВК, "▼");
		
		//прочитали подстроку между кавычками - закрываем кавычку
		ПозицияКавычки.Открыта = Ложь;
		
		БуферЛево = БуферЛево + БуферКавычки;
		
		БуферДлина = БуферДлина - Позиция;
		Буфер = Прав(Буфер, БуферДлина);
	//Иначе закрывающая кавычка будет в буфере только при следующем чтение блока текста		
	Иначе
		БуферКавычки = СтрЗаменить(Буфер, Символы.ПС, "▲");
		БуферКавычки = СтрЗаменить(БуферКавычки, Символы.ВК, "▼");
		
		БуферЛево = БуферЛево + БуферКавычки;
		
		Буфер = "";
		БуферДлина = 0;
	КонецЕсли;
		
	Возврат БуферЛево;
КонецФункции

Функция РазобратьСобытиеТехжурнала(Событие, МаскаДата, Буфер, ИмяФайла)
	Результат = Новый Соответствие;
	
	Событие.ЗаменитьСтроку(1, СтрЗаменить(Событие.ПолучитьТекст(), ",", Символы.ПС));
		
	ДатаДлительность = СтрЗаменить(Событие.ПолучитьСтроку(1), "-", Символы.ПС);
	
	ДатаСтрока = МаскаДата + Лев(СтрПолучитьСтроку(ДатаДлительность, 1), 2);
	Попытка
		ДатаСобытий = Дата("20"+ Лев(ДатаСтрока,2) + Сред(ДатаСтрока,3,2) + Сред(ДатаСтрока,5,2) + Сред(ДатаСтрока,7,2) + Прав(ДатаСтрока,2));
	Исключение
		ЗаписьЖурналаРегистрации("РазобратьСобытиеТехжурнала", УровеньЖурналаРегистрации.Предупреждение,,"Файл='" + ИмяФайла + "';Событие='" + Событие.ПолучитьТекст() + "'");
	КонецПопытки;
	
	
	Если СтрЧислоСтрок(ДатаДлительность) = 2 Тогда
		Попытка
			Длительность = Число(СтрПолучитьСтроку(ДатаДлительность, 2));
		Исключение
			ЗаписьЖурналаРегистрации("РазобратьСобытиеТехжурнала", УровеньЖурналаРегистрации.Предупреждение,,"Файл='" + ИмяФайла + "';Событие='" + Событие.ПолучитьТекст() + "'");
			Длительность = 0;
		КонецПопытки;
	Иначе
		Длительность = 0;
	КонецЕсли;
	
	ЗначениеСобытия = Событие.ПолучитьСтроку(2);
	
	КолвоСтрок = Событие.КоличествоСтрок();
	Если СтрНайти(Событие.ПолучитьТекст(), "RetExcp") > 0 Тогда
		а = 1;
	КонецЕсли;
	
	Для ТекИндекс = 4 По КолвоСтрок Цикл
		ТекДанные = Событие.ПолучитьСтроку(ТекИндекс);
		ТекДанные = СтрЗаменить(ТекДанные, "=", Символы.ПС);
		Если СтрЧислоСтрок(ТекДанные) = 2 Тогда
			Результат.Вставить(СтрПолучитьСтроку(ТекДанные, 1), СтрПолучитьСтроку(ТекДанные, 2));
		КонецЕсли;
	КонецЦикла;
	
	Если Результат["RetExcp"] <> Неопределено Тогда
		ЗначениеСобытия = ЗначениеСобытия + " (RetExcp)";
	КонецЕсли;
	

	Событие.Очистить();
	
	Результат.Вставить("Дата", ДатаСтрока);
	Результат.Вставить("Событие", ЗначениеСобытия);
	Результат.Вставить("Длительность", Длительность);
	
	Возврат Результат;
КонецФункции




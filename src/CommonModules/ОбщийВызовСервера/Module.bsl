
#Область ПрограммныйИнтерфейс

Функция ПередНачаломРаботыСистемы(ЭтоМобильныйКлиент) Экспорт
	Возврат Общий.ПередНачаломРаботыСистемы(ЭтоМобильныйКлиент);
КонецФункции

Функция ТипПлатформыСервераСтрокой() Экспорт
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	
	Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция СохраненнаяВерсия() Экспорт
	Возврат Общий.СохраненнаяВерсия();
КонецФункции

Функция ВерсияЦКК() Экспорт
	Возврат Общий.ВерсияЦКК();
КонецФункции

Функция ИдетОбновление() Экспорт 
	Возврат Общий.ИдетОбновление();
КонецФункции

Функция СоздатьНачальногоПользователя() Экспорт
	Возврат Общий.СоздатьНачальногоПользователя();
КонецФункции

Функция НастройкаПараметровОповещенияВыполнена() Экспорт
	Возврат Общий.НастройкаПараметровОповещенияВыполнена();
КонецФункции

Функция ФормаПослеОбновления() Экспорт
    Возврат Константы.ПоказатьФормуПослеОбновления.Получить();
КонецФункции

#КонецОбласти

#Область ОбработчикиОжиданийФорм

Функция ШагМониторингНаСервере(Пользователь, УникальныйИдентификаторФоновогоЗадания) Экспорт
    
    ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторФоновогоЗадания);
    
    Если ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
        
        КлючОбъекта = "МониторИнцидентов";
        КлючНастроек = "МониторИнцидентов";
        
        Попытка
            
            НачатьТранзакцию();
            
            БлокировкаДанных = Новый БлокировкаДанных;
            ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОбъектыБлокировок");
            ЭлементБлокировки.УстановитьЗначение("Объект", КлючОбъекта+КлючНастроек+Пользователь);
            БлокировкаДанных.Заблокировать();
            
            ДанныеХранилища = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек,,Пользователь);
            Если ДанныеХранилища = Неопределено Тогда
                ДанныеХранилища = Новый Соответствие;
                ДанныеХранилища.Вставить("ВыполнятьДо", ТекущаяУниверсальнаяДата());
                ДанныеХранилища.Вставить("Данные", Неопределено);
            КонецЕсли;
            
            ДанныеХранилища.Вставить("ВыполнятьДо", ТекущаяУниверсальнаяДата() + 60);
            ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, ДанныеХранилища,,Пользователь);
            
            ЗафиксироватьТранзакцию();
            
        Исключение
            
            ОтменитьТранзакцию();
            ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
            
        КонецПопытки;
        
        РезультатВыполнения = Новый Соответствие;
        РезультатВыполнения.Вставить("Данные", ДанныеХранилища["Данные"]);
        
    Иначе
        
        РезультатВыполнения = Новый Соответствие;
        РезультатВыполнения.Вставить("Ошибка", Истина);
        РезультатВыполнения.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ФЗ.ИнформацияОбОшибке));
        
        ЗаписьЖурналаРегистрации("МониторингИнцидентов", УровеньЖурналаРегистрации.Ошибка,,,РезультатВыполнения["ОписаниеОшибки"]);
        
    КонецЕсли;

    Возврат РезультатВыполнения;
    
КонецФункции

Функция ПроверитьСчетчикиПроизводительностиОбработчикОжиданияНаСервере(Оборудование) Экспорт
    
    Результат = Новый Структура;
    Результат.Вставить("Счетчики", РегистрыСведений.ТекущиеЗначенияПроизводительности.ПолучитьЗначения(Оборудование));
    Результат.Вставить("ОперативныеНастройки", РегистрыСведений.ОборудованиеОперативныеНастройки.ПрочитатьНастройки(Оборудование));
    
    Возврат Результат;
    
КонецФункции

Функция ПроверкаВыполненияКомандыАгентаПолучитьЛицензии1С(Оборудование, УникальныйИдентификаторКоманды) Экспорт
    
    РезультатВыполнения = РегистрыСведений.КомандыАгентаКИП.РезультатВыполнения(УникальныйИдентификаторКоманды);
    
    Если РезультатВыполнения <> Неопределено Тогда
        
        Если РезультатВыполнения["installed"] <> Неопределено И РезультатВыполнения["installed"] Тогда
            РегистрыСведений.ОборудованиеЛицензии1С.ЗагрузитьЛицензии(Оборудование, РезультатВыполнения["license"]);
        КонецЕсли;
        
    КонецЕсли;
    
    Возврат РезультатВыполнения;
    
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция - Администрирование сервера
//
// Параметры:
//  Адрес - Строка - имя или ip адрес компьютера, где запущен сервер администрирования RAS.
//  Порт  - Чсло - порт на котором запущен сервер администрирования RAS.
// 
// Возвращаемое значение:
//   - АдминистрированиеСервера
//
Функция АдминистрированиеСервера(Адрес, Порт) Экспорт
    
    Попытка
        АдминистрированиеСервера = Новый АдминистрированиеСервера(Адрес, Порт);
    Исключение
        ОписаниеОшибки =  ОписаниеОшибкиАдминистрированиеКластера(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации("АдминистрированиеКластераRAS", УровеньЖурналаРегистрации.Ошибка,, "АдминистрированиеСервера", ОписаниеОшибки);
        ВызватьИсключение ОписаниеОшибки;
    КонецПопытки;
    
    Возврат АдминистрированиеСервера;
    
КонецФункции

// Функция - АдминистрированиеКластер
//
// Параметры:
//  АдминистрированиеСервера  - АдминистрированиеСервера - Администрирование сервера.
//  ИдентификаторКластера     - УникальныйИдентификатор - Уникальный идентификатор кластера. 
//  Конвертировать            - Булево - Конвертировать полученный результат в структуру.
// 
// Возвращаемое значение:
//   - АдминистрированиеКластер, Структура 
//
Функция АдминистрированиеКластер(АдминистрированиеСервера, ИдентификаторКластера, Конвертировать = Ложь) Экспорт
    
    Попытка
        
        Кластер = Неопределено;
        
        Кластеры = ПолучитьКластеры(АдминистрированиеСервера);
        Для Каждого ТекКластер Из Кластеры Цикл
            Если ТекКластер.ИдентификаторКластера = ИдентификаторКластера Тогда
                Кластер = ТекКластер;
                Прервать;
            КонецЕсли;
        КонецЦикла;
        
        Если Кластер <> Неопределено И Конвертировать Тогда
            Кластер = КонвертироватьКластер(Кластер);
        КонецЕсли;
        
        Возврат Кластер;
                
    Исключение
        ОписаниеОшибки =  ОписаниеОшибкиАдминистрированиеКластера(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации("АдминистрированиеКластераRAS", УровеньЖурналаРегистрации.Ошибка,, "АдминистрированиеКластер", ОписаниеОшибки);
        ВызватьИсключение ОписаниеОшибки;
    КонецПопытки;
        
КонецФункции

Функция АдминистрированиеИнформационнаяБаза(АдминистрированиеКластер, ИдентификаторИнформационнойБазы, Кратко) Экспорт
    
    Попытка
        
        АдминистрированиеИнформационнаяБаза = Неопределено;
        
        АдминистрированиеИнформационныеБазы = АдминистрированиеКластер.ПолучитьИнформационныеБазы();
        Для Каждого ТекАдминистрированиеИнформационнаяБаза Из АдминистрированиеИнформационныеБазы Цикл
            
            Если ТекАдминистрированиеИнформационнаяБаза.ИдентификаторИнформационнойБазы = ИдентификаторИнформационнойБазы Тогда
                АдминистрированиеИнформационнаяБаза = ТекАдминистрированиеИнформационнаяБаза;
                Прервать;
            КонецЕсли;
            
        КонецЦикла;
        
        Если НЕ Кратко И АдминистрированиеИнформационнаяБаза <> Неопределено И НЕ ЗначениеЗаполнено(АдминистрированиеИнформационнаяБаза.ИмяБазыДанных) Тогда
            ВызватьИсключение "Администратор информационной базы не аутентифицирован
            | или информационная база отсутствует в СУБД.";
        КонецЕсли;
        
        Возврат АдминистрированиеИнформационнаяБаза; 
                
    Исключение
        ОписаниеОшибки =  ОписаниеОшибкиАдминистрированиеКластера(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации("АдминистрированиеКластераRAS", УровеньЖурналаРегистрации.Ошибка,, "АдминистрированиеИнформационнаяБаза", ОписаниеОшибки);
        ВызватьИсключение ОписаниеОшибки;
    КонецПопытки;
    
КонецФункции

Функция АдминистрированиеРабочийСервер(АдминистрированиеКластер, ИдентификаторРабочегоСервера) Экспорт
    
    Попытка
        
        АдминистрированиеРабочийСервер = Неопределено;
        АдминистрированиеРабочиеСервера = АдминистрированиеКластер.ПолучитьРабочиеСерверы();
        Для Каждого ТекАдминистрированиеРабочийСервер Из АдминистрированиеРабочиеСервера Цикл
            
            Если ТекАдминистрированиеРабочийСервер.ИдентификаторРабочегоСервера = Новый УникальныйИдентификатор(ИдентификаторРабочегоСервера) Тогда
                АдминистрированиеРабочийСервер = ТекАдминистрированиеРабочийСервер;
                Прервать;
            КонецЕсли;
        КонецЦикла;
        
        Возврат АдминистрированиеРабочийСервер;
                
    Исключение
        ОписаниеОшибки =  ОписаниеОшибкиАдминистрированиеКластера(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации("АдминистрированиеКластераRAS", УровеньЖурналаРегистрации.Ошибка,, "АдминистрированиеРабочийСервер", ОписаниеОшибки);
        ВызватьИсключение ОписаниеОшибки;
    КонецПопытки;
    
КонецФункции

Функция Аутентификация(АдминистрированиеСервера, Пользователь, Пароль) Экспорт
    
    Попытка
        АдминистрированиеСервера.ВыполнитьАутентификацию(Пользователь, Пароль);
    Исключение
        ОписаниеОшибки =  ОписаниеОшибкиАдминистрированиеКластера(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации("АдминистрированиеКластераRAS", УровеньЖурналаРегистрации.Ошибка,, "Аутентификация", ОписаниеОшибки);
        ВызватьИсключение ОписаниеОшибки;
    КонецПопытки;
    
КонецФункции

Функция АутентификацияКластера(АдминистрированиеКластер, Пользователь, Пароль) Экспорт
    
    Попытка
        АдминистрированиеКластер.ВыполнитьАутентификацию(Пользователь, Пароль);
    Исключение
        ОписаниеОшибки =  ОписаниеОшибкиАдминистрированиеКластера(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации("АдминистрированиеКластераRAS", УровеньЖурналаРегистрации.Ошибка,, "АутентификацияКластера", ОписаниеОшибки);
        ВызватьИсключение ОписаниеОшибки;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьКластеры(АдминистрированиеСервера, Конвертировать = Ложь) Экспорт
    
    Попытка
        
        Кластеры = АдминистрированиеСервера.ПолучитьКластеры();
        
        Если Конвертировать Тогда
            КластерыРезультат = Новый Массив;
            Для Каждого ТекКластер Из Кластеры Цикл
                КластерыРезультат.Добавить(КонвертироватьКластер(ТекКластер));
            КонецЦикла;
        Иначе
            КластерыРезультат = Кластеры;
        КонецЕсли;
        
    Исключение
        ОписаниеОшибки =  ОписаниеОшибкиАдминистрированиеКластера(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации("АдминистрированиеКластераRAS", УровеньЖурналаРегистрации.Ошибка,, "ПолучитьКластеры", ОписаниеОшибки);
        ВызватьИсключение ОписаниеОшибки;
    КонецПопытки;
    
    Возврат КластерыРезультат;
    
КонецФункции

Функция КонвертироватьКластер(Кластер) Экспорт
    
    СвойстваКластера = КлючиСвойствКластер();
    ЗаполнитьЗначенияСвойств(СвойстваКластера, Кластер);
    
    Возврат СвойстваКластера;
    
КонецФункции

Функция КонвертироватьИнформационнаяБаза(ИнформационнаяБаза) Экспорт
    
    СвойстваИнформационнойБазы = КлючиСвойствИнформационнаяБаза();
    ЗаполнитьЗначенияСвойств(СвойстваИнформационнойБазы, ИнформационнаяБаза);
    
    Возврат СвойстваИнформационнойБазы;
    
КонецФункции

Функция СтруктураКластера(Кластер, АдресХранилища) Экспорт
    
    ИнформационныеБазы = Справочники.ОбъектыКонтроля.Свойство(Кластер, "Базы");
    РабочиеСервера1С = Справочники.ОбъектыКонтроля.Свойство(Кластер, "Оборудование");
    
    Результат = Новый Структура("ИнформационныеБазы, РабочиеСервера1С", ИнформационныеБазы, РабочиеСервера1С);
    
    Если АдресХранилища <> Неопределено Тогда
        ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
    Иначе
        Возврат Результат;
    КонецЕсли;
        
КонецФункции

Функция РабочиеСерверы(АдминистрированиеКластер) Экспорт
    
    РабочиеСерверы = АдминистрированиеКластер.ПолучитьРабочиеСерверы();
    
    Возврат РабочиеСерверы;
    
КонецФункции

Функция ИнформационныеБазы(АдминистрированиеКластер) Экспорт
    
    ИнформационныеБазы = АдминистрированиеКластер.ПолучитьИнформационныеБазы();
    
    Возврат ИнформационныеБазы;
    
КонецФункции

Функция РабочиеПроцессы(АдминистрированиеКластер) Экспорт
    
    РабочиеПроцессы = АдминистрированиеКластер.ПолучитьРабочиеПроцессы();
    
    Возврат РабочиеПроцессы;
    
КонецФункции

Функция Сеансы(АдминистрированиеИнформационнаяБаза) Экспорт
    
    Сеансы = АдминистрированиеИнформационнаяБаза.ПолучитьСеансы();
    
    Возврат Сеансы;
    
КонецФункции

Функция КлючиСвойствКластер() Экспорт
    
    Возврат Новый Структура("
    |ВремяПринудительногоЗавершения,
    |ИдентификаторКластера,
    |Имя,
    |ИмяКомпьютера,
    |МаксимальныйПериодПревышенияПамяти,
    |ОграничениеПоПамятиПроцесса,
    |ПериодПерезапускаПроцесса,
    |Порт,
    |РежимБалансировкиНагрузки,
    |УровеньБезопасностиСоединений,
    |УровеньОтказоустойчивости,
    |ЗавершатьПроблемныеПроцессы,
    |ОграничениеПоКоличествуОшибокПроцесса");
    
КонецФункции

Функция КлючиСвойствИнформационнаяБаза() Экспорт
    
    Возврат Новый Структура("
    |БлокировкаРегламентныхЗаданий,
    |ВключенаБлокировкаНачалаСеансов,
    |ВремяНачалаБлокировки,
    |ВремяОкончанияБлокировки,
    |ИдентификаторИнформационнойБазы,
    |Имя,
    |ИмяБазыДанных,
    |КодРазрешенияНачалаСеансов,
    |Локализация,
    |ОбязательноеИспользованиеВнешнегоУправленияСеансами,
    |Описание,
    |ПараметрБлокировки,
    |ПарольПользователяБазыДанных,
    |ПользовательБазыДанных,
    |ПрофильБезопасности,
    |ПрофильБезопасностиБезопасногоРежима,
    |РазрешитьВыдачуЛицензий,
    |СУБД,
    |СерверБазДанных,
    |СмещениеДат,
    |СоздатьБазуДанных,
    |СообщениеБлокировки,
    |СтрокаПараметровВнешнегоУправленияСеансами,
    |УровеньБезопасностиСоединений");
    
КонецФункции

Функция КлючиСвойствРабочийСервер() Экспорт
    
    Возврат Новый Структура("
    |БезопасныйРасходПамятиЗаОдинВызов,
    |БезопасныйРасходПамятиРабочихПроцессов,
    |Имя,
    |КоличествоИнформационныхБазНаПроцесс,
    |КоличествоСоединенийНаПроцесс,
    |ИмяКомпьютера,
    |ОграничениеОбъемаПамятиРабочихПроцессов,
    |Порт,
    |ПортГлавногоМенеджера,
    |СоздаватьМенеджерПодКаждыйСервис,
    |ЦентральныйСервер,
    |ИдентификаторРабочегоСервера,
    |ДиапазоныПортов");
    
КонецФункции

Функция КлючиСвойствРабочийПроцесс() Экспорт
    
    Возврат Новый Структура(" 
    |Активен,
    |Включен,
    |ВремяЗапуска,
    |ВремяПревышенияПоПамяти,
    |ДоступнаяПроизводительность,
    |ИдентификаторПроцесса,
    |ИмяКомпьютера,
    |Лицензии,
    |ОтносительнаяПроизводительность,
    |Порт,
    |СостояниеРабочегоПроцесса,
    |СреднееКоличествоПотоков,
    |СредняяДлительностьВызова,
    |СредняяДлительностьВызововСУБД,
    |СредняяДлительностьВызововСервисов,
    |СредняяДлительностьОбработкиВызоваРабочимПроцессом,
    |ПотреблениеПамяти,
    |ИдентификаторРабочегоПроцесса");
    
КонецФункции

Функция КлючиСвойствСеанс() Экспорт
    
    Возврат Новый Структура("
    |ВремяЗавершенияСпящегоСеанса,
    |ВремяЗасыпанияПассивногоСеанса,
    |ВремяНачала,
    |ВремяПоследнейАктивности,
    |ДлительностьВызововВсего,
    |ДлительностьВызововЗа5Мин,
    |ДлительностьВызововСУБДВсего,
    |ДлительностьВызововСУБДЗа5Мин,
    |ДлительностьВызововСУБДТекущее,
    |ДлительностьВызововСервисаТекущее,
    |ДлительностьВызововСервисовВсего,
    |ДлительностьВызововСервисовЗа5Мин,
    |ДлительностьВызововТекущее,
    |ИдентификаторИнформационнойБазы,
    |ИдентификаторПроцесса,
    |ИдентификаторСеанса,
    |ИдентификаторСоединения,
    |ИмяПользователя,
    |ИмяПриложения,
    |ИмяТекущегоСервиса,
    |КоличествоВызововВсего,
    |КоличествоВызововЗа5Мин,
    |ИмяКомпьютера,
    |Лицензии,
    |КодЯзыка,
    |НомерСеанса,
    |НомерСеансаБлокирующегоСУБД,
    |НомерСеансаВыполнившегоУправляемуюБлокировку,
    |ОбъемДанныхЗаписанныхНаДискВсего,
    |ОбъемДанныхЗаписанныхНаДискЗа5Мин,
    |ОбъемДанныхЗаписанныхНаДискТекущее,
    |ОбъемДанныхПереданныхИПолученныхКлиентом,
    |ОбъемДанныхПереданныхИПолученныхКлиентомЗа5Мин,
    |ОбъемДанныхПереданныхПолученныхСУБДВсего,
    |ОбъемДанныхПереданныхПолученныхСУБДЗа5Мин,
    |ОбъемДанныхСчитанныхСДискаВсего,
    |ОбъемДанныхСчитанныхСДискаЗа5Минут,
    |ОбъемДанныхСчитанныхСДискаТекущее,
    |ПотреблениеПамятиВсего,
    |ПотреблениеПамятиЗа5Мин,
    |ПотреблениеПамятиТекущее,
    |ПроцессорноеВремяВсего,
    |ПроцессорноеВремяЗа5Мин,
    |ПроцессорноеВремяТекущее,
    |РазделениеДанных,
    |СоединениеСУБД,
    |СпящийСеанс");
    
КонецФункции

Функция КлючиСвойствСоединение() Экспорт
    
    Возврат Новый Структура("
    |ВремяУстановкиСоединения,
    |ИдентификаторИнформационнойБазы,
    |ИдентификаторПроцесса,
    |ИдентификаторСоединения,
    |ИмяКомпьютера,
    |ИмяПриложения,
    |НомерСеанса,
    |НомерСеансаВыполнившегоУправляемуюБлокировку,
    |НомерСоединения");
    
КонецФункции

Функция ЛицензииКонвертировать(Лицензии) Экспорт
    
    ЛицензииНовые = Новый Соответствие;
    ЛицензииНовые.Вставить("Имя", "");
    
    ЛицензииМассив = Новый Массив;
    КраткиеПредставления = Новый Массив;
    
    Для Каждого Лицензия Из Лицензии Цикл
        
        ЛицензияНовая = Новый Структура("АдресСервера, ИдентификаторПроцесса, КраткоеПредставление, МаксимальноеКоличествоПользователей,
        |МаксимальноеКоличествоПользователейПрограммнойЛицензии, ПодробноеПредставление, ПолученаСервером, ПортСервера, ПрограммнаяЛицензия,
        |СерияКлюча, СетевойКлюч, Файл",);
        
        ЗаполнитьЗначенияСвойств(ЛицензияНовая, Лицензия);
       
        КраткиеПредставления.Добавить(ЛицензияНовая.КраткоеПредставление);
        ЛицензииМассив.Добавить(ЛицензияНовая);
        
    КонецЦикла;
    
    Если КраткиеПредставления.Количество() > 0 Тогда
        ЛицензииНовые.Вставить("Имя", СтрСоединить(КраткиеПредставления, "; "));
    КонецЕсли;
    ЛицензииНовые.Вставить("Лицензии", ЛицензииМассив);
    
    Возврат ЛицензииНовые;
        
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеОшибкиАдминистрированиеКластера(ИнформацияОбОшибке)
    
    ОписаниеОшибки = Новый Массив;
    ЗаполнитьОписаниеОшибки(ОписаниеОшибки, ИнформацияОбОшибке);
    
    Если ОписаниеОшибки.Количество() > 1 Тогда
        ОписаниеОшибки.Удалить(0);
    КонецЕсли;
    
    Возврат СтрСоединить(ОписаниеОшибки, " ");
    
КонецФункции

Процедура ЗаполнитьОписаниеОшибки(ОписаниеОшибкиМассив, ОписаниеОшибки)
    
    Описание = ОписаниеОшибки.Описание;
    Если НЕ СтрЗаканчиваетсяНа(Описание, ".") Тогда
        Описание = Описание + ".";
    КонецЕсли;
    
    ОписаниеОшибкиМассив.Добавить(Описание);
    
    Если ОписаниеОшибки.Причина <> Неопределено Тогда
        ЗаполнитьОписаниеОшибки(ОписаниеОшибкиМассив, ОписаниеОшибки.Причина);
    КонецЕсли;
        
КонецПроцедуры


#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

Процедура АвтозаполнениеСтруктурыКластеров() Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка,
    |   Наименование,
    |   ПлощадкаЭксплуатации
    |ИЗ
    |   Справочник.ОбъектыКонтроля
    |ГДЕ
    |   Владелец = &ВидОбъектаКонтроля
    |   И АвтоматическоеОбновление = ИСТИНА
    |";
    
    Запрос.УстановитьПараметр("ВидОбъектаКонтроля", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
    
    Результат = Запрос.Выполнить();
    
    Если НЕ Результат.Пустой() Тогда
        НастройкиПоУмолчанию = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.РабочийСервер);
        НастройкиПоУмолчаниюКонтрольУстойчивости = РегистрыСведений.НастройкиСборДампов.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы());
    КонецЕсли;
        
    Выборка = Результат.Выбрать();
    
    
    Пока Выборка.Следующий() Цикл
        
        ПараметрыКоманды = Новый Соответствие;
        ПараметрыКоманды.Вставить("equipmentLocation", Выборка.ПлощадкаЭксплуатации.Наименование);
        ПараметрыКоманды.Вставить("equipmentLocationRef", Выборка.ПлощадкаЭксплуатации);
        
        Результат = СтруктураКластера(Выборка.Ссылка, Неопределено);
        
        РабочиеСерверы1С = Новый Массив;
        ОборудованиеРабочихСерверов = Новый Массив;
        
        Для Каждого РабочийСерверКластера1С Из Результат.РабочиеСервера1С Цикл
            
            ЕдиницаОборудования = Новый Соответствие;
            ЕдиницаОборудования.Вставить("ref", РабочийСерверКластера1С.ОборудованиеСсылка);
            ЕдиницаОборудования.Вставить("description", ?(ЗначениеЗаполнено(РабочийСерверКластера1С.Оборудование), РабочийСерверКластера1С.Оборудование, РабочийСерверКластера1С.Хост));
            ЕдиницаОборудования.Вставить("host", РабочийСерверКластера1С.Хост);
            Если НЕ ЗначениеЗаполнено(РабочийСерверКластера1С.ОборудованиеСсылка) Тогда
                
                ЕдиницаОборудования.Вставить("languageOS", "Английский");
                
                Роли = Новый Массив;
                Роли.Добавить("Рабочий сервер 1С");
                ЕдиницаОборудования.Вставить("role", Роли);
                
            КонецЕсли;
            
            ОборудованиеРабочихСерверов.Добавить(ЕдиницаОборудования);
            
            ПараметрыРабочегоСервера1С = Новый Соответствие;
            ПараметрыРабочегоСервера1С.Вставить("ref", РабочийСерверКластера1С.Ссылка);
            ПараметрыРабочегоСервера1С.Вставить("description", РабочийСерверКластера1С.Наименование);
            ПараметрыРабочегоСервера1С.Вставить("equipmentRef", РабочийСерверКластера1С.ОборудованиеСсылка);
            ПараметрыРабочегоСервера1С.Вставить("equipment", РабочийСерверКластера1С.Хост);
            ПараметрыРабочегоСервера1С.Вставить("equipmentDescr", РабочийСерверКластера1С.Оборудование);
            ПараметрыРабочегоСервера1С.Вставить("cluster1CRef", Выборка.Ссылка);
            ПараметрыРабочегоСервера1С.Вставить("cluster1C", Выборка.Наименование);
            ПараметрыРабочегоСервера1С.Вставить("portRange", РабочийСерверКластера1С.ДиапазонПортов);
            
            Если НЕ ЗначениеЗаполнено(РабочийСерверКластера1С.Ссылка) Тогда
                
                ПараметрыРабочегоСервера1С.Вставить("settingsDirectory", НастройкиПоУмолчанию.КаталогНастроекТЖ);
                ПараметрыРабочегоСервера1С.Вставить("settingsDirectoryNetwork", НастройкиПоУмолчанию.КаталогНастроекТЖСетевой);
                ПараметрыРабочегоСервера1С.Вставить("dataDirectory", НастройкиПоУмолчанию.КаталогОбменаДанными);
                ПараметрыРабочегоСервера1С.Вставить("dataDirectoryNetwork", НастройкиПоУмолчанию.КаталогОбменаДаннымиСетевой);
                ПараметрыРабочегоСервера1С.Вставить("tempDirectory", НастройкиПоУмолчанию.КаталогВременный);
                
                КонтрольУстойчивости = Новый Соответствие;
                КонтрольУстойчивости.Вставить("description", "Контроль устойчивости для " + РабочийСерверКластера1С.Наименование);
                КонтрольУстойчивости.Вставить("folderTjNetwork", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогТЖСетевой);
                КонтрольУстойчивости.Вставить("folderTjLocal", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогТЖЛокальный);
                КонтрольУстойчивости.Вставить("durationFileTj", НастройкиПоУмолчаниюКонтрольУстойчивости.ДлительностьХраненияФайловТЖ);
                КонтрольУстойчивости.Вставить("folderDumpNetwork", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВыгрузкиДамповСетевой);
                КонтрольУстойчивости.Вставить("folderDumpLocal", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВыгрузкиДампов);
                КонтрольУстойчивости.Вставить("folderTemp", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВременныхФайлов);
                КонтрольУстойчивости.Вставить("levelDetailDump", НастройкиПоУмолчаниюКонтрольУстойчивости.УровеньДетализацииДампов);
                КонтрольУстойчивости.Вставить("autoSettingsTj", НастройкиПоУмолчаниюКонтрольУстойчивости.АвтоматическаяНастройка);
                КонтрольУстойчивости.Вставить("agentEnable", НастройкиПоУмолчаниюКонтрольУстойчивости.ИспользоватьАгента);
                КонтрольУстойчивости.Вставить("folderExportDumps", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогЭкспортаДампов);
                
                Если НастройкиПоУмолчаниюКонтрольУстойчивости.Расписание <> Неопределено Тогда
                    Расписание = Новый Соответствие;
                    Расписание.Вставить("repeatDays", НастройкиПоУмолчаниюКонтрольУстойчивости.Расписание.ПериодПовтораДней);
                    Расписание.Вставить("repeatSeconds", НастройкиПоУмолчаниюКонтрольУстойчивости.Расписание.ПериодПовтораВТечениеДня);
                    КонтрольУстойчивости.Вставить("schedule", Расписание);
                КонецЕсли;
                
                КонтрольУстойчивости.Вставить("start", Ложь);
                
                ПараметрыРабочегоСервера1С.Вставить("controlCollectionDumps", КонтрольУстойчивости);
                
            КонецЕсли;
            
            РабочиеСерверы1С.Добавить(ПараметрыРабочегоСервера1С);
            
        КонецЦикла;
        
    КонецЦикла;
            
КонецПроцедуры

Процедура СтруктураКластераЗаписать(ПараметрыЗаписи) Экспорт
    
    ПараметрыНоды = Новый Соответствие;
    ПараметрыНоды.Вставить("equipmentLocation", ПараметрыЗаписи.ПараметрыИБ["equipmentLocation"]);
    ПараметрыНоды.Вставить("equipmentLocationRef", ПараметрыЗаписи.ПараметрыИБ["equipmentLocationRef"]);
    ПараметрыНоды.Вставить("infoBases", ПараметрыЗаписи.ПараметрыИБ["infoBases"]);
    ПараметрыНоды.Вставить("equipment", ПараметрыЗаписи.ПараметрыСерверов["equipment"]);
    ПараметрыНоды.Вставить("workingServer1C", ПараметрыЗаписи.ПараметрыСерверов["workingServer1C"]);
    
    ХранилищеОбщихНастроекПараметры = Новый Структура("КлючОбъекта, КлючНастроек, Пользователь", ПараметрыЗаписи.КлючОбъекта, ПараметрыЗаписи.КлючНастроек, ПараметрыЗаписи.Пользователь);
    ЕдиницаМасштабирования.ЗагрузитьЕдиницуМасштабирования(ПараметрыНоды, ХранилищеОбщихНастроекПараметры);
        
КонецПроцедуры
    
// Возвращает описания сеансов информационной базы.
//
// Параметры:
//  ИдентификаторКластера - Строка, внутренний идентификатор кластера серверов,
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ИдентификаторИнформационнойБазы - Строка, внутренний идентификатор информационной базы,
//  ПараметрыАдминистрированияИнформационнойБазы - Структура, описывающая параметры подключения к информационной базе,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияИнформационнойБазыКластера().
//  Фильтр - Описание условия фильтрации сеансов, описания которых требуется получить.
//    Варианты:
//      1. Массив структур, описывающих условия фильтрации сеансов. Поля структур, входящих в массив:
//        Свойство - Строка, имя свойства, по которому осуществляется фильтрация. Допустимые значения - см.
//          Возвращаемое значение функции АдминистрированиеКластераКлиентСервер.СвойстваСеанса(),
//        ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений сеансов с указанным
//          в условии фильтра. Допустимые значения:
//            ВидСравнения.Равно,
//            ВидСравнения.НеРавно,
//            ВидСравнения.Больше (только для числовых значений),
//            ВидСравнения.БольшеИлиРавно (только для числовых значений),
//            ВидСравнения.Меньше (только для числовых значений),
//            ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//            ВидСравнения.ВСписке,
//            ВидСравнения.НеВСписке,
//            ВидСравнения.Интервал (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//        Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//          сравнивается значение соответствующего свойства сеанса. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//          в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//          будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//          ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//          передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//          соответствующее сравнение,
//    2. Структура (упрощенный вариант), ключ - Имя свойства сеанса (см. выше), значение - значение, с которым
//    выполняется сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на
//    равенство,
//  ИспользоватьСловарь - Булево, если Истина - возвращаемый результат будет заполнен с использован словаря, иначе - без
//    использования.
//
// Возвращаемое значение: Массив(Структура), Массив(Соответствие) - массив структур, описывающих свойства сеансов
// (описание структур - см. АдминистрированиеКластераКлиентСервер.СвойстваСеанса()) или массив соответствий,
// описывающих свойства сеансов в нотации утилиты rac (при ИспользоватьСловарь = Ложь).
//
Функция ПолучитьСеансы(Знач ИдентификаторКластера, Знач ПараметрыАдминистрированияКластера, Знач ИдентификаторИнформационнойБазы, Фильтр = Неопределено, Знач ИспользоватьСловарь = Истина) Экспорт
	
	Шаблон = "%rac session --cluster=%cluster% --cluster-user=%?cluster-user% --cluster-pwd=%?cluster-pwd% list --infobase=%?infobase%";	
	
	Параметры = Новый Соответствие();
	
	Параметры.Вставить("cluster", ИдентификаторКластера);
	ЗаполнитьПараметрыАутентификацииВКластере(ПараметрыАдминистрированияКластера, Параметры);
	
	Параметры.Вставить("infobase", ИдентификаторИнформационнойБазы);
	
	Если ИспользоватьСловарь Тогда
		СловарьСвойствСеансов = СловарьСвойствСеансов();
	Иначе
		СловарьСвойствСеансов = Неопределено;
		Фильтр = ФильтрВНотациюRac(Фильтр, СловарьСвойствСеансов());
	КонецЕсли;
	
	ПотокВывода = ВыполнитьКоманду(Шаблон, ПараметрыАдминистрированияКластера, Параметры);
	Результат = ПарсерВывода(ПотокВывода, СловарьСвойствСеансов, Фильтр);
	
	Возврат Результат;
	
КонецФункции

// Возвращает описания информационных баз.
//
// Параметры:
//  ИдентификаторКластера - Строка, внутренний идентификатор кластера серверов,
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  Фильтр - Структура, параметры фильтрации информационных баз.
//
// Возвращаемое значение: Массив(Структура).
//
Функция ПолучитьИнформационныеБазы(Знач ИдентификаторКластера, Знач ПараметрыАдминистрированияКластера, Фильтр = Неопределено) Экспорт 
	
	Шаблон = "%rac infobase summary --cluster=%cluster% --cluster-user=%?cluster-user% --cluster-pwd=%?cluster-pwd% list";
	
	Параметры = Новый Соответствие();
	
	Параметры.Вставить("cluster", ИдентификаторКластера);
	ЗаполнитьПараметрыАутентификацииВКластере(ПараметрыАдминистрированияКластера, Параметры);
	
	ПотокВывода = ВыполнитьКоманду(Шаблон, ПараметрыАдминистрированияКластера, Параметры);
	Результат = ПарсерВывода(ПотокВывода, Неопределено, Фильтр);
    
	Возврат Результат;
	
КонецФункции

Функция ПараметрыИнформационнойБазы(Знач ИдентификаторКластера, Знач ИдентификаторИнформационнойБазы, Знач ПараметрыАдминистрированияКластера) Экспорт
    
    Шаблон = "%rac infobase --cluster=%cluster% --cluster-user=%?cluster-user% --cluster-pwd=%?cluster-pwd% info --infobase=%infobase% --infobase-user=%?infobase-user% --infobase-pwd=%?infobase-pwd%";
    
    Параметры = Новый Соответствие();
	
	Параметры.Вставить("cluster", ИдентификаторКластера);
    Параметры.Вставить("infobase", ИдентификаторИнформационнойБазы);
    Параметры.Вставить("infobase-user", ПараметрыАдминистрированияКластера.Пользователь);    
    Параметры.Вставить("infobase-pwd", ПараметрыАдминистрированияКластера.Пароль);
	ЗаполнитьПараметрыАутентификацииВКластере(ПараметрыАдминистрированияКластера, Параметры);
	
	ПотокВывода = ВыполнитьКоманду(Шаблон, ПараметрыАдминистрированияКластера, Параметры);
	Результат = ПарсерВывода(ПотокВывода, Неопределено);
    
    Возврат Результат[0];
    
КонецФункции


// Возвращает описания рабочих процессов.
//
// Параметры:
//  ИдентификаторКластера - Строка, внутренний идентификатор кластера серверов,
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  Фильтр - Структура, параметры фильтрации рабочих процессов.
//
// Возвращаемое значение: Массив(Структура).
//
Функция ПолучитьРабочиеПроцессы(Знач ИдентификаторКластера, Знач ПараметрыАдминистрированияКластера, Знач РабочиеСерверы, Фильтр = Неопределено) Экспорт
	
	Шаблон = "%rac process --cluster=%cluster% --cluster-user=%?cluster-user% --cluster-pwd=%?cluster-pwd% list --server=%server%";
	
	Параметры = Новый Соответствие();
	
	Параметры.Вставить("cluster", ИдентификаторКластера);
	ЗаполнитьПараметрыАутентификацииВКластере(ПараметрыАдминистрированияКластера, Параметры);
	
	Результат = Новый Массив();
	Для Каждого РабочийСервер Из РабочиеСерверы Цикл
		Параметры.Вставить("server", РабочийСервер.Получить("server"));
		ПотокВывода = ВыполнитьКоманду(Шаблон, ПараметрыАдминистрированияКластера, Параметры);
		РабочиеПроцессыСервера = ПарсерВывода(ПотокВывода, Неопределено, Фильтр);
		Для Каждого РабочийПроцесс Из РабочиеПроцессыСервера Цикл
			Результат.Добавить(РабочийПроцесс);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРабочиеПроцессыВсе(Знач ИдентификаторКластера, Знач ПараметрыАдминистрированияКластера) Экспорт
    
    Шаблон = "%rac process --cluster=%cluster% --cluster-user=%?cluster-user% --cluster-pwd=%?cluster-pwd% list";
    
    Параметры = Новый Соответствие();
	Параметры.Вставить("cluster", ИдентификаторКластера);
	ЗаполнитьПараметрыАутентификацииВКластере(ПараметрыАдминистрированияКластера, Параметры);
    
    ПотокВывода = ВыполнитьКоманду(Шаблон, ПараметрыАдминистрированияКластера, Параметры);
    Результат = ПарсерВывода(ПотокВывода, Неопределено, Неопределено);
    
    
КонецФункции

// Возвращает внутренний идентификатор кластера серверов.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера().
//
// Возвращаемое значение - Строка, внутренний идентификатор кластера серверов.
//
Функция ПолучитьКластер(Знач ПараметрыАдминистрированияКластера) Экспорт
	
	Кластеры = ПолучитьКластеры(ПараметрыАдминистрированияКластера);
	
	Если Кластеры.Количество() = 1 Тогда
		Возврат Кластеры[0].Получить("cluster");
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не обнаружен кластер серверов с портом %1'"), ПараметрыАдминистрированияКластера.ПортКластера);
	КонецЕсли;
	
КонецФункции

Функция ПараметрыКластера(Знач ИдентификаторКластера, Знач ПараметрыАдминистрированияКластера) Экспорт
    
    Шаблон = "%rac cluster info --cluster=%cluster%";
    ЗначенияПараметров = Новый Структура("cluster", ИдентификаторКластера);
    ПотокВывода = ВыполнитьКоманду(Шаблон, ПараметрыАдминистрированияКластера,ЗначенияПараметров);
	Результат = ПарсерВывода(ПотокВывода);
    
	Возврат Результат[0];
    
КонецФункции

// Возвращает описания рабочих серверов.
//
// Параметры:
//  ИдентификаторКластера - Строка, внутренний идентификатор кластера серверов,
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  Фильтр - Структура, параметры фильтрации рабочих серверов.
//
// Возвращаемое значение: Массив(Структура).
//
Функция ПолучитьРабочиеСерверы(Знач ИдентификаторКластера, Знач ПараметрыАдминистрированияКластера, Фильтр = Неопределено) Экспорт
	
	Шаблон = "%rac server --cluster=%cluster% --cluster-user=%?cluster-user% --cluster-pwd=%?cluster-pwd% list";
	
	Параметры = Новый Соответствие;
	
	Параметры.Вставить("cluster", ИдентификаторКластера);
	ЗаполнитьПараметрыАутентификацииВКластере(ПараметрыАдминистрированияКластера, Параметры);
	
	ПотокВывода = ВыполнитьКоманду(Шаблон, ПараметрыАдминистрированияКластера, Параметры);
	Результат = ПарсерВывода(ПотокВывода, Неопределено, Фильтр);
    
	Возврат Результат;
	
КонецФункции

Функция ПараметрыРабочегоСервера(Знач ИдентификаторКластера, Знач ИдентификаторСервера, Знач ПараметрыАдминистрированияКластера) Экспорт
    
    Шаблон = "%rac server --cluster=%cluster% --cluster-user=%?cluster-user% --cluster-pwd=%?cluster-pwd% info --server=%server%";
    
    Параметры = Новый Соответствие;
	
	Параметры.Вставить("cluster", ИдентификаторКластера);
    Параметры.Вставить("server", ИдентификаторСервера);
	ЗаполнитьПараметрыАутентификацииВКластере(ПараметрыАдминистрированияКластера, Параметры);
    
    ПотокВывода = ВыполнитьКоманду(Шаблон, ПараметрыАдминистрированияКластера, Параметры);
	Результат = ПарсерВывода(ПотокВывода, Неопределено);
    
	Возврат Результат;
    
КонецФункции

// Возвращает описания кластеров серверов.
//
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  Фильтр - Структура, параметры фильтрации кластеров серверов.
//
// Возвращаемое значение: Массив(Структура).
//
//Функция ПолучитьКластеры(Знач ПараметрыАдминистрированияКластера, Знач Фильтр = Неопределено) Экспорт
//	
//	Шаблон = "%rac cluster list";
//	ПотокВывода = ВыполнитьКоманду(Шаблон, ПараметрыАдминистрированияКластера);
//	Результат = ПарсерВывода(ПотокВывода);
//    
//	Возврат Результат;
//	
//КонецФункции

// Добавляет в параметры запуска rac'a параметры аутентификации администратора кластера.
//
// Параметры:
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  Параметры - Соответствие, формируемое соответствие параметров запуска rac'a.
//
Процедура ЗаполнитьПараметрыАутентификацииВКластере(Знач ПараметрыАдминистрированияКластера, Параметры)
	
	Параметры.Вставить("cluster-user", ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера);
	Параметры.Вставить("cluster-pwd", ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
	
КонецПроцедуры

// Преобразует перенаправленный поток вывода консольного клиента сервера
// администрирования к массиву соответствий (элементы массива - объекты,
// ключи соответствия - имена свойств, значения соответствия - значения свойств).
//
// Параметры:
//  ПотокВывода - Строка, перенаправленный поток вывода,
//  Словарь - Структура, выступающая в качестве словаря сопоставления имен свойств объектов.
//    В нотации утилиты rac и в нотации API,
//  Фильтр - Структура, условия фильтрации объектов (только для потоков вывода команд, возвращающих
//    коллекции объектов).
//
// Возвращаемое значение:
//  Массив(Соответствие)
//
Функция ПарсерВывода(Знач ПотокВывода, Знач Словарь = Неопределено, Знач Фильтр = Неопределено)
	
	СвойстваЭкранируемыеКавычками = Новый Соответствие;
	СвойстваЭкранируемыеКавычками.Вставить("denied-message", Истина);
	СвойстваЭкранируемыеКавычками.Вставить("permission-code", Истина);
	СвойстваЭкранируемыеКавычками.Вставить("denied-parameter", Истина);
	СвойстваЭкранируемыеКавычками.Вставить("name", Истина);
	
	СвойстваБулево = Новый Соответствие;
	СвойстваБулево.Вставить("on", Истина);
	СвойстваБулево.Вставить("yes", Истина);
	СвойстваБулево.Вставить("off", Ложь);
	СвойстваБулево.Вставить("no", Ложь);
	
	Результат = Новый Массив();
	ЭлементРезультата = Новый Соответствие();
	
	ПотокВыводаМассив = СтрРазделить(ПотокВывода, Символы.ПС, Истина);
	Для Каждого ЭлементПотока Из ПотокВыводаМассив Цикл
		КлючЗначение = СтрРазделить(ЭлементПотока, ":", Ложь);
		
		КолвоЭлементов = КлючЗначение.Количество();
		
		Если КолвоЭлементов > 1 Тогда
			ИмяСвойства = СокрЛП(КлючЗначение[0]);
			
			Если КолвоЭлементов > 2 Тогда
				КлючЗначение.Удалить(0);
				ЗначениеСвойства = СокрЛП(СтрСоединить(КлючЗначение,":"));
			Иначе
				ЗначениеСвойства = СокрЛП(КлючЗначение[1])
			КонецЕсли;
			
						
			Если СвойстваЭкранируемыеКавычками[ИмяСвойства] <> Неопределено Тогда
				Если СтрНачинаетсяС(ЗначениеСвойства, """") И СтрЗаканчиваетсяНа(ЗначениеСвойства, """") Тогда
					ЗначениеСвойства = Лев(ЗначениеСвойства, СтрДлина(ЗначениеСвойства) - 1);
					ЗначениеСвойства = Прав(ЗначениеСвойства, СтрДлина(ЗначениеСвойства) - 1);
				КонецЕсли;
			Иначе
				Если ПустаяСтрока(ЗначениеСвойства) Тогда
					ЗначениеСвойства = Неопределено;
				Иначе
					Попытка
						ЗначениеСвойства = Число(ЗначениеСвойства);
					Исключение
						// Запланированное поведение
						// Это быстрее, чем СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЭлементВывода)
						// Анализируем не числовое значение
						ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства, """""", """");
						
						Если СвойстваБулево[ЗначениеСвойства] <> Неопределено Тогда
							ЗначениеСвойства = СвойстваБулево[ЗначениеСвойства];
						Иначе
							Если СтрЧислоВхождений(ЗначениеСвойства, "T") = 1 Тогда
								Попытка
									ЗначениеСвойства = XMLЗначение(Тип("Дата"), ЗначениеСвойства);
								Исключение
									// Обработка исключения не требуется. Ожидаемое исключение - ошибка
									// преобразования к типу Дата.
								КонецПопытки;	
							КонецЕсли;
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
						
			ЭлементРезультата.Вставить(ИмяСвойства, ЗначениеСвойства);
		Иначе
			Если ЭлементРезультата.Количество() > 0 Тогда
				
				ПарсерЭлементаВывода(ЭлементРезультата, Результат, Словарь, Фильтр);
				
				ЭлементРезультата = Новый Соответствие();
				
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементРезультата.Количество() > 0 Тогда
		ПарсерЭлементаВывода(ЭлементРезультата, Результат, Словарь, Фильтр);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запускает консольный клиент сервера администрирования для выполнения команды.
//
// Параметры:
//  Шаблон - строка, шаблон командной строки (уникален для каждой команды).
//  ПараметрыАдминистрированияКластера - Структура, описывающая параметры подключения к кластеру серверов,
//    описание - см. АдминистрированиеКластераКлиентСервер.ПараметрыАдминистрированияКластера(),
//  ЗначенияПараметров - структура, содержащая значения параметров, которые должны
//    быть подставлены в шаблон.
//
// Возвращаемое значение:
//  Строка, результат перенаправления стандартного потока вывода при запуске утилиты rac.
//
Функция ВыполнитьКоманду(Знач Шаблон, Знач ПараметрыАдминистрированияКластера, Знач ЗначенияПараметров = Неопределено)
	
	#Если Сервер Тогда
		
		Если БезопасныйРежим() Тогда
			ВызватьИсключение НСтр("ru = 'Администрирование кластера невозможно в безопасном режиме!'");
		КонецЕсли;
				
	#КонецЕсли
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	
	// Подставим в командную строку путь до утилиты rac и адрес сервера ras.
	Клиент = ПолучитьКлиентСервераАдминистрирования(ПараметрыАдминистрированияКластера);
	ФайлКлиента = Новый Файл(Клиент);
	Если Не ФайлКлиента.Существует() Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно выполнить операцию администрирования кластера серверов по причине: файл %1 не найден!
                  |
                  |Для администрирования кластера через сервер администрирования (ras) требуется установить на данном
                  |компьютере клиент сервера администрирования (rac).
                  |Для его установки:
                  |- Для компьютеров с ОС Windows требуется перестановить платформу, установив компонент ""Администрирование сервера 1С:Предприятия"";
                  |- Для компьютеров с ОС Linux требуется установить пакет 1c-enterprise83-server*.'"),
			ФайлКлиента.ПолноеИмя);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыАдминистрированияКластера.АдресСервераАдминистрирования) Тогда
		Сервер = СокрЛП(ПараметрыАдминистрированияКластера.АдресСервераАдминистрирования);
		Если ЗначениеЗаполнено(ПараметрыАдминистрированияКластера.ПортСервераАдминистрирования) Тогда
			Сервер = Сервер + ":" + ПривестиЗначение(ПараметрыАдминистрированияКластера.ПортСервераАдминистрирования);
		Иначе
			Сервер = Сервер + ":1545";
		КонецЕсли;
	Иначе
		Сервер = "";
	КонецЕсли;
	
	КоманднаяСтрока = """" + Клиент + """ " + СтрЗаменить(Шаблон, "%rac", Сервер);
    	
	// Подставим в командную строку значения параметров.
	Если ЗначениеЗаполнено(ЗначенияПараметров) Тогда
		Для Каждого Параметр Из ЗначенияПараметров Цикл
			// Заполним значение параметра.
			КоманднаяСтрока = СтрЗаменить(КоманднаяСтрока, "%" + Параметр.Ключ + "%", ПривестиЗначение(Параметр.Значение, Параметр.Ключ));
			Если ЗначениеЗаполнено(Параметр.Значение) Тогда
				// Это мог быть необязательный параметр.
				КоманднаяСтрока = СтрЗаменить(КоманднаяСтрока, "%?" + Параметр.Ключ + "%", ПривестиЗначение(Параметр.Значение, Параметр.Ключ));
			Иначе
				// Если необязательный параметр не установлен - вообще вырежем его из командной строки.
				КоманднаяСтрока = СтрЗаменить(КоманднаяСтрока, "--" + Параметр.Ключ + "=%?" + Параметр.Ключ + "%", "");
			КонецЕсли;
		КонецЦикла;
    КонецЕсли;
    КоманднаяСтрокаЗамер = КоманднаяСтрока;
    КоманднаяСтрокаМассив = СтрРазделить(КоманднаяСтрокаЗамер, """", Ложь);
    
    Если КоманднаяСтрокаМассив.Количество() > 1 Тогда
        КоманднаяСтрокаМассив.Удалить(0);
    КонецЕсли;
    КоманднаяСтрокаЗамер = СтрСоединить(КоманднаяСтрокаМассив, " ");
    
    КоманднаяСтрокаМассив = СтрРазделить(КоманднаяСтрокаЗамер, " ", Ложь);
        
    КоманднаяСтрокаМассивНовый = Новый Массив;
    Для Каждого ТекЭлемент Из КоманднаяСтрокаМассив Цикл
        
        Если СтрНачинаетсяС(ТекЭлемент, "--cluster-user") Тогда
            КоманднаяСтрокаМассивНовый.Добавить("--cluster-user=*");
        ИначеЕсли СтрНачинаетсяС(ТекЭлемент, "--cluster-pwd") Тогда
            КоманднаяСтрокаМассивНовый.Добавить("--cluster-pwd=*");
        Иначе    
            КоманднаяСтрокаМассивНовый.Добавить(ТекЭлемент);
        КонецЕсли;
        
    КонецЦикла;
    
    КоманднаяСтрокаЗамер = СтрСоединить(КоманднаяСтрокаМассивНовый, " ");
    	
	// Перенаправление stdout и stderr.
	ФайлПотокаВывода = ПолучитьИмяВременногоФайла("out");
	ФайлПотокаОшибок = ПолучитьИмяВременногоФайла("err");
	
	КоманднаяСтрокаWSH = КоманднаяСтрока;
	КоманднаяСтрока = КоманднаяСтрока + " > """ + ФайлПотокаВывода + """ 2>""" + ФайлПотокаОшибок + """";
	
	ДанныеWSH = "";
	
	Если (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
		
		// Для Windows выполняем запуск через cmd.exe (для перенаправления stdout и stderr).
        // Также принудительно устанавливаем кодовую страницу в 866 для корректного получения русских символов.
		КоманднаяСтрока = "cmd /c " +  """chcp 866&" + КоманднаяСтрока + """";
		
		#Если Сервер Тогда
			
			Оболочка = Новый COMОбъект("Wscript.Shell");
            Замер = ВнутренниеЗамеры.НачатьЗамер("RAC");
			РезультатExec = Оболочка.Exec(КоманднаяСтрока);
			ProcessID = РезультатExec.ProcessID; 
						
			Ожидать = Истина;
			МаксимальноеОжидание = Константы.МаксимальноеВремяОжиданияВыполненияRacWindows.Получить();
			ДатаКрайнегоОжидания = ТекущаяУниверсальнаяДата() + МаксимальноеОжидание;
			Пока Ожидать Цикл
				Если РезультатExec.Status = 1 ИЛИ ТекущаяУниверсальнаяДата() > ДатаКрайнегоОжидания Тогда
					Ожидать = Ложь;
				Иначе
					КипВнешнийКомпонент.Пауза(100);
				КонецЕсли;
			КонецЦикла;
						
            Если РезультатExec.Status = 0 Тогда
                
                ВнутренниеЗамеры.УстановитьИмяКлючевойОперации(Замер, "RAC таймаут");
                ДопПараметры = Новый Соответствие;
                ДопПараметры.Вставить("Параметры команды", КоманднаяСтрокаЗамер);
                ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
                
				//rac.exe завис, необходимо завершить процесс
				КомандаTaskKill = "taskkill /F /T /PID " + Формат(ProcessID, "ЧГ=0");
				РезультатExec = Оболочка.Exec(КомандаTaskKill);
				
				StdOut = РезультатExec.StdOut.ReadAll();
				StdErr = РезультатExec.StdErr.ReadAll();
				
				Если РезультатExec.ExitCode = -1 Тогда
					ДанныеWSH  = StdErr;
				Иначе
					ДанныеWSH = StdOut;
				КонецЕсли;
				
				Ошибка = "Не удалось выполнить команду rac за " + МаксимальноеОжидание + " секунд.
				|Выполнено принудительное завершение: " + КомандаTaskKill + "
				|Результат: ";
				
				ДанныеWSH = ПерекодироватьСтроку(ДанныеWSH, "windows-1251", "cp866");
				ДанныеWSH = Ошибка + ДанныеWSH;
				
				ВызватьИсключение ДанныеWSH;
            Иначе
                
                ДопПараметры = Новый Соответствие;
                ДопПараметры.Вставить("Параметры команды", КоманднаяСтрокаЗамер);
                ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
                
			КонецЕсли;
			Результат = Неопределено;
			Оболочка = Неопределено;
		#Иначе
			
			// Для Windows-клиента используем Wscript.Shell, чтобы избежать появления окон с cmd.
			
			Оболочка = Новый COMОбъект("Wscript.Shell");
			Оболочка.Run(КоманднаяСтрока, 0, Истина);
			
		#КонецЕсли
		
	Иначе
		
		// Для ОС Linux просто запускаем команду.
        
        Замер = ВнутренниеЗамеры.НачатьЗамер("RAC");
		ЗапуститьПриложение(КоманднаяСтрока, КаталогИсполняемыхФайловПлатформы(), Истина);
        ДопПараметры = Новый Соответствие;
        ДопПараметры.Вставить("Параметры команды", КоманднаяСтрокаЗамер);
        ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
		
	КонецЕсли;
	
	ЧтениеПотокаОшибок = Новый ЧтениеТекста(ФайлПотокаОшибок, ПолучитьКодировкуСтандартныхПотоков());
	ПотокОшибок = ЧтениеПотокаОшибок.Прочитать();
	ЧтениеПотокаОшибок.Закрыть();
	
	Если ЗначениеЗаполнено(ПотокОшибок) Тогда
		
		УдалитьВременныеФайл(ФайлПотокаОшибок, ФайлПотокаВывода);
		ВызватьИсключение ПотокОшибок;
		
	Иначе
		ЧтениеПотокаВывода = Новый ЧтениеТекста(ФайлПотокаВывода, ПолучитьКодировкуСтандартныхПотоков()); 
		ПотокВывода = ЧтениеПотокаВывода.Прочитать();
		Если ПотокВывода = Неопределено Тогда
			ПотокВывода = "";
		КонецЕсли;
		ЧтениеПотокаВывода.Закрыть();
		
		УдалитьВременныеФайл(ФайлПотокаОшибок, ФайлПотокаВывода);
		Возврат ПотокВывода;
		
	КонецЕсли;
	
КонецФункции

#Если Сервер Тогда
	
Функция ПерекодироватьСтроку(Знач Данные, КодировкаДанных, КодировкаНовая)
	
	ФайлВременный = ПолучитьИмяВременногоФайла("tmp");
	ФайлЗапись = Новый ЗаписьТекста(ФайлВременный, КодировкаДанных);
	ФайлЗапись.Записать(Данные);
	ФайлЗапись.Закрыть();
				
	ФайлЧтение = Новый ЧтениеТекста(ФайлВременный, КодировкаНовая);
	Данные = ФайлЧтение.Прочитать();
	ФайлЧтение.Закрыть();		
	
	УдалитьФайлы(ФайлВременный);
	
	Возврат Данные;
КонецФункции
	
#КонецЕсли


// Возвращает каталог исполняемых файлов платформы.
//
// Возвращаемое значение:
//  Строка, каталог исполняемых файлов платформы.
//
Функция КаталогИсполняемыхФайловПлатформы() Экспорт
	
	Результат = КаталогПрограммы();
	СимволРазделителя = ПолучитьРазделительПути();
	
	Если Не СтроковыеФункцииКлиентСервер.СтрокаЗаканчиваетсяНа(Результат, СимволРазделителя) Тогда
		Результат = Результат + СимволРазделителя;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает кодировку стандартных поток вывода и ошибок, используемую в текущей ОС.
//
// Возвращаемое значение:
//  КодировкаТекста, кодировка стандартных потоков вывода и ошибок.
//
Функция ПолучитьКодировкуСтандартныхПотоков() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация();
	Если (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86) Или (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
		//Кодировка = КодировкаТекста.OEM;
		Кодировка = "cp866"; // консоль выводить данные в текстовик в 866 кодировке
	Иначе
		Кодировка = КодировкаТекста.Системная;
	КонецЕсли;
	
	Возврат Кодировка;
	
КонецФункции

// Преобразует элемент перенаправленного потока вывода консольного клиента сервера администрирования
//  к соответствию. Ключи соответствия - имена свойств, значения соответствия - значения свойств.
//
// Параметры:
//  ЭлементРезультата - Строка - элемент потока вывода,
//  Результата - Массив - массив, в который должен быть добавлен распарсенный объект,
//  Словарь - Структура - структура, выступающая в качестве словаря сопоставления имен свойств объектов.
//    В нотации утилиты rac и в нотации API,
//  Фильтр - Структура - условия фильтрации объектов (только для потоков вывода команд, возвращающих
//    коллекции объектов).
//
Процедура ПарсерЭлементаВывода(ЭлементРезультата, Результат, СловарьПарсера, Фильтр)
	
	Если СловарьПарсера <> Неопределено Тогда
		Объект = РазобратьЭлементВывода(ЭлементРезультата, СловарьПарсера);
	Иначе
		Объект = ЭлементРезультата;
	КонецЕсли;
	
	Если Фильтр <> Неопределено И Не ПроверитьУсловияФильтра(Объект, Фильтр) Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Добавить(Объект);
	
КонецПроцедуры

// Возвращает путь к консольному клиенту сервера администрирования.
//
// Возвращаемое значение:
//  Строка, путь к консольному клиенту сервера администрирования.
//
Функция ПолучитьКлиентСервераАдминистрирования(ПараметрыАдминистрированияКластера) Экспорт
	
	КаталогЗапуска = ПараметрыАдминистрированияКластера.КаталогRAC;
	КаталогЗапуска = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогЗапуска);
	Клиент = КаталогЗапуска + "rac";
	
	СисИнфо = Новый СистемнаяИнформация();
	Если (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86) Или (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
		Клиент = Клиент + ".exe";
	КонецЕсли;
	
	Возврат Клиент;
	
КонецФункции

// Разбирает элемент перенаправленного потока вывода консольного клиента сервера администрирования.
//
// Параметры:
//  ЭлементВывода - Строка, элемент перенаправленного потока вывода клиента сервера администрирования,
//  Словарь - Структура, выступающая в качестве словаря сопоставления имен свойств объектов.
//    В нотации утилиты rac и в нотации API.
//
// Возвращаемое значение: Структура, ключи - имена свойств в нотации API, значения - значения свойств
//  из перенаправленного потока вывода.
//
Функция РазобратьЭлементВывода(Знач ЭлементВывода, Знач Словарь)
	
	Результат = Новый Структура();
	
	Для Каждого ФрагментСловаря Из Словарь Цикл
		
		Результат.Вставить(ФрагментСловаря.Ключ, ЭлементВывода[ФрагментСловаря.Значение]);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует значение встроенного языка к нотации консольного клиента сервера
//  администрирования.
//
// Параметры:
//  Значение - произвольный, значение, которое необходимо преобразовать.
//
// Возвращаемое значение:
//  Строка, значение, приведенное к нотации консольного клиента сервера администрирования.
//
Функция ПривестиЗначение(Знач Значение, Знач ИмяПараметра = "")
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат XMLСтрока(Значение);
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Если ПустаяСтрока(ИмяПараметра) Тогда
			ФорматнаяСтрока = "БЛ=off; БИ=on";
		Иначе
			ФорматнаяСтрока = СловарьФорматированияБулевыхСвойств()[ИмяПараметра];
		КонецЕсли;
		
		Возврат Формат(Значение, ФорматнаяСтрока);
		
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=,; ЧН=0; ЧГ=0; ЧО=1");
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Если СтрНайти(Значение, """") > 0 Или СтрНайти(Значение, " ") > 0 Или СтрНайти(Значение, "-") > 0 Или СтрНайти(Значение, "!") > 0 Тогда
			Возврат """" + СтрЗаменить(Значение, """", """""") + """";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка(Значение);
	
КонецФункции

// Проверяет значения свойств объекта на соответствие условиям, указанным в фильтре.
//
// Параметры:
//  ПроверяемыйОбъект - Структура:
//    Ключ - Имя свойства,значение которого сравнивается с фильтром,
//    Значение - Значение свойства, которое сравнивается с фильтром,
//  Фильтр - Описание условия фильтрации объектов.
//    Варианты:
//      1. Массив структур, описывающих условия фильтра. Поля структур, входящих в массив:
//        Свойство - Строка, имя свойства, по которому осуществляется фильтрация,
//        ВидСравнения - значение системного перечисления ВидСравнения, вид сравнения значений с указанным
//          в условии фильтра. Допустимые значения:
//            ВидСравнения.Равно,
//            ВидСравнения.НеРавно,
//            ВидСравнения.Больше (только для числовых значений),
//            ВидСравнения.БольшеИлиРавно (только для числовых значений),
//            ВидСравнения.Меньше (только для числовых значений),
//            ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//            ВидСравнения.ВСписке,
//            ВидСравнения.НеВСписке,
//            ВидСравнения.Интервал (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//            ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//        Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//          сравнивается значение соответствующего свойства. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//          в качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//          будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//          ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//          передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//          соответствующее сравнение,
//    2. Структура (упрощенный вариант), ключ - Имя свойства (см. выше), значение - значение, с которым выполняется
//      сравнение. При использовании данного варианта описания фильтра сравнение всегда выполняется на равенство.
//
// Возвращаемое значение: Булево, Истина если значения свойств объекта удовлетворяют условиям, указанным в фильтре,
//  Ложь - если не удовлетворяют.
//
Функция ПроверитьУсловияФильтра(Знач ПроверяемыйОбъект, Знач Фильтр = Неопределено) Экспорт
	
	Если Фильтр = Неопределено Или Фильтр.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыполненоУсловий = 0;
	
	Для Каждого Условие Из Фильтр Цикл
		
		Если ТипЗнч(Условие) = Тип("Структура") Тогда
			
			Поле = Условие.Свойство;
			ТребуемоеЗначение = Условие.Значение;
			ВидСравненияЗначений = Условие.ВидСравнения;
			
		ИначеЕсли ТипЗнч(Условие) = Тип("КлючИЗначение") Тогда
			
			Поле = Условие.Ключ;
			ТребуемоеЗначение = Условие.Значение;
			ВидСравненияЗначений = ВидСравнения.Равно;
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Некорректно задан фильтр!'");
			
		КонецЕсли;
		
		ПроверяемоеЗначение = ПроверяемыйОбъект[Поле];
		УсловиеВыполнено = ПроверитьУсловиеФильтра(ПроверяемоеЗначение, ВидСравненияЗначений, ТребуемоеЗначение);
		
		Если УсловиеВыполнено Тогда
			ВыполненоУсловий = ВыполненоУсловий + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыполненоУсловий = Фильтр.Количество();
	
КонецФункции

// Проверяет значения на соответствие условиям, указанным в фильтре.
//
// Параметры:
//  ПроверяемоеЗначение - Число, Строка, Дата, Булево - значение, которое сравнивается с условием,
//  ВидСравненияЗначений - значение системного перечисления ВидСравнения, вид сравнения значений с указанным
//    в условии фильтра. Допустимые значения:
//      ВидСравнения.Равно,
//      ВидСравнения.НеРавно,
//      ВидСравнения.Больше (только для числовых значений),
//      ВидСравнения.БольшеИлиРавно (только для числовых значений),
//      ВидСравнения.Меньше (только для числовых значений),
//      ВидСравнения.МеньшеИлиРавно (только для числовых значений),
//      ВидСравнения.ВСписке,
//      ВидСравнения.НеВСписке,
//      ВидСравнения.Интервал (только для числовых значений),
//      ВидСравнения.ИнтервалВключаяГраницы (только для числовых значений),
//      ВидСравнения.ИнтервалВключаяНачало (только для числовых значений),
//      ВидСравнения.ИнтервалВключаяОкончание (только для числовых значений),
//  Значение - Число, Строка, Дата, Булево, СписокЗначений, Массив, Структура - значение, с которым
//    сравнивается проверяемое значение. При ВидСравнения.ВСписке и ВидСравнения.НеВСписке
//    качестве значения должны передаваться СписокЗначений или Массив, содержащие набор значений, с которыми
//    будет выполняться сравнение. При ВидСравнения.Интервал, ВидСравнения.ИнтервалВключаяГраницы,
//    ВидСравнения.ИнтервалВключаяНачало и ВидСравнения.ИнтервалВключаяОкончание в качестве значения должны
//    передаваться структуры с полями С и По, значения которых образуют интервал, с которым будет выполняться
//    соответствующее сравнение.
//
// Возвращаемое значение: Булево, Истина если значение удовлетворяет условиям, Ложь - если не удовлетворяет.
//
Функция ПроверитьУсловиеФильтра(Знач ПроверяемоеЗначение, Знач ВидСравненияЗначений, Знач Значение)
	
	Если ВидСравненияЗначений = ВидСравнения.Равно Тогда
		
		Возврат ПроверяемоеЗначение = Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.НеРавно Тогда
		
		Возврат ПроверяемоеЗначение <> Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.Больше Тогда
		
		Возврат ПроверяемоеЗначение > Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.БольшеИлиРавно Тогда
		
		Возврат ПроверяемоеЗначение >= Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.Меньше Тогда
		
		Возврат ПроверяемоеЗначение < Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.МеньшеИлиРавно Тогда
		
		Возврат ПроверяемоеЗначение <= Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.ВСписке Тогда
		
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			
			Возврат Значение.НайтиПоЗначению(ПроверяемоеЗначение) <> Неопределено;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Возврат Значение.Найти(ПроверяемоеЗначение) <> Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.НеВСписке Тогда
		
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			
			Возврат Значение.НайтиПоЗначению(ПроверяемоеЗначение) = Неопределено;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Возврат Значение.Найти(ПроверяемоеЗначение) = Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.Интервал Тогда
		
		Возврат ПроверяемоеЗначение > Значение.С И ПроверяемоеЗначение < Значение.По;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.ИнтервалВключаяГраницы Тогда
		
		Возврат ПроверяемоеЗначение >= Значение.С И ПроверяемоеЗначение <= Значение.По;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.ИнтервалВключаяНачало Тогда
		
		Возврат ПроверяемоеЗначение >= Значение.С И ПроверяемоеЗначение < Значение.По;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
		Возврат ПроверяемоеЗначение > Значение.С И ПроверяемоеЗначение <= Значение.По;
		
	КонецЕсли;
	
КонецФункции

// Возвращает правила форматирования булевых свойств в соответствии с нотацией
//  утилиты rac.
//
// Возвращаемое значение: ФиксированноеСоответствие:
//  Ключ - Строка, имя свойства,
//  Значение - Строка, форматная строка для значений свойства.
//
Функция СловарьФорматированияБулевыхСвойств()
	
	ФорматOnOff = "БЛ=off; БИ=on";
	ФорматYesNo = "БЛ=no; БИ=yes";
	
	Результат = Новый Соответствие();
	
	// Свойства блокировки сеансов и заданий.
	СловарьФорматированияБулевыхСвойств = СловарьСвойствБлокировкиСеансовИРегламентныхЗаданий();
	Результат.Вставить(СловарьФорматированияБулевыхСвойств.БлокировкаСеансов, ФорматOnOff);
	Результат.Вставить(СловарьФорматированияБулевыхСвойств.БлокировкаРегламентныхЗаданий, ФорматOnOff);
	
	// Свойства профиля безопасности.
	СловарьФорматированияБулевыхСвойств = СловарьСвойствПрофиляБезопасности(Ложь);
	Результат.Вставить(СловарьФорматированияБулевыхСвойств.ПрофильБезопасногоРежима, ФорматYesNo);
	Результат.Вставить(СловарьФорматированияБулевыхСвойств.ПолныйДоступКПривилегированномуРежиму, ФорматYesNo);
	
	// Свойства виртуального каталога.
	СловарьФорматированияБулевыхСвойств = СловарьСвойствВиртуальногоКаталога();
	Результат.Вставить(СловарьФорматированияБулевыхСвойств.ЧтениеДанных, ФорматYesNo);
	Результат.Вставить(СловарьФорматированияБулевыхСвойств.ЗаписьДанных, ФорматYesNo);
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств информационной базы, описывающих состояние
//  блокировки сеансов и регламентных заданий, для структур, используемых в API и
//  описаний объектов в выводе rac'a.
//
// Возвращаемое значение: ФиксированнаяСтруктура:
//  Ключ - Строка, имя свойства в API (см.
//         АдминистрированиеКластераКлиентСервер.СвойстваБлокировкиСеансовИРегламентныхЗаданий()),
//  Значение - Строка, имя свойства объекта.
//
Функция СловарьСвойствБлокировкиСеансовИРегламентныхЗаданий()
	
	Результат = Новый Структура();
	
	Результат.Вставить("БлокировкаСеансов", "sessions-deny");
	Результат.Вставить("ДатаС", "denied-from");
	Результат.Вставить("ДатаПо", "denied-to");
	Результат.Вставить("Сообщение", "denied-message");
	Результат.Вставить("КодРазрешения", "permission-code");
	Результат.Вставить("ПараметрБлокировки", "denied-parameter");
	Результат.Вставить("БлокировкаРегламентныхЗаданий", "scheduled-jobs-deny");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств профиля безопасности для структур, используемых в API и
//  описаний объектов в выводе rac'a.
//
// Возвращаемое значение: ФиксированнаяСтруктура:
//  Ключ - Строка, имя свойства в API (см. АдминистрированиеКластераКлиентСервер.СвойстваПрофиляБезопасности()),
//  Значение - Строка, имя свойства объекта.
//
Функция СловарьСвойствПрофиляБезопасности(Знач ВключаяСвойстваИспользованияСписковКонтроляДоступа = Истина)
	
	Результат = Новый Структура();
	
	Результат.Вставить("Имя", "name");
	Результат.Вставить("Описание", "descr");
	Результат.Вставить("ПрофильБезопасногоРежима", "config");
	Результат.Вставить("ПолныйДоступКПривилегированномуРежиму", "priv");
	
	Если ВключаяСвойстваИспользованияСписковКонтроляДоступа Тогда
		
		СловарьСвойствИспользованияСписковКонтроляДоступа = СловарьСвойствИспользованияСписокКонтроляДоступа();
		
		Для Каждого ФрагментСловаря Из СловарьСвойствИспользованияСписковКонтроляДоступа Цикл
			Результат.Вставить(ФрагментСловаря.Ключ, ФрагментСловаря.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств виртуального каталога для структур, используемых в API и
//  описаний объектов в выводе rac'a.
//
// Возвращаемое значение: ФиксированнаяСтруктура:
//  Ключ - Строка, имя свойства в API (см. АдминистрированиеКластераКлиентСервер.СвойстваВиртуальногоКаталога()),
//  Значение - Строка, имя свойства объекта.
//
Функция СловарьСвойствВиртуальногоКаталога()
	
	Результат = Новый Структура();
	
	Результат.Вставить("ЛогическийURL", "alias");
	Результат.Вставить("ФизическийURL", "physicalPath");
	
	Результат.Вставить("Описание", "descr");
	
	Результат.Вставить("ЧтениеДанных", "allowedRead");
	Результат.Вставить("ЗаписьДанных", "allowedWrite");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств профиля безопасности для структур, используемых в API и
//  описаний объектов в выводе rac'a.
//
// Возвращаемое значение: ФиксированнаяСтруктура:
//  Ключ - Строка, имя свойства в API (см. АдминистрированиеКластераКлиентСервер.СвойстваПрофиляБезопасности()),
//  Значение - Строка, имя свойства объекта.
//
Функция СловарьСвойствИспользованияСписокКонтроляДоступа()
	
	Результат = Новый Структура();
	
	Результат.Вставить("ПолныйДоступКФайловойСистеме", "directory");
	Результат.Вставить("ПолныйДоступКCOMОбъектам", "com");
	Результат.Вставить("ПолныйДоступКВнешнимКомпонентам", "addin");
	Результат.Вставить("ПолныйДоступКВнешнимМодулям", "module");
	Результат.Вставить("ПолныйДоступКПриложениямОперационнойСистемы", "app");
	Результат.Вставить("ПолныйДоступКИнтернетРесурсам", "inet");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Возвращает соответствие имен свойств сеансов информационной базы для структур, используемых в API и
//  описаний объектов в выводе rac'a.
//
// Возвращаемое значение: ФиксированнаяСтруктура:
//  Ключ - Строка, имя свойства в API (см. АдминистрированиеКластераКлиентСервер.СвойстваСеанса()),
//  Значение - Строка, имя свойства объекта.
//
Функция СловарьСвойствСеансов()
	
	Результат = Новый Структура();
    
    Результат.Вставить("Номер", "session-id");
    Результат.Вставить("МоментСозданияСеанса", "started-at");
    Результат.Вставить("МоментПоследнейАктивностиСеанса", "last-active-at");
    Результат.Вставить("ИмяКлиентскогоКомпьютера", "host");
    Результат.Вставить("ИмяПользователя", "user-name");
    Результат.Вставить("ИдентификаторКлиентскогоПриложения", "app-id");
    Результат.Вставить("ИдентификаторЯзыка", "locale");
    Результат.Вставить("СоединениеСУБД", "db-proc-info");
    Результат.Вставить("ВремяСоединенияСУБД", "db-proc-took");
    Результат.Вставить("БлокировкаСУБД", "blocked-by-dbms");
    Результат.Вставить("Блокировка", "blocked-by-ls");
    Результат.Вставить("ДлительностьТекущегоВызоваСУБД", "duration-current-dbms");
    Результат.Вставить("ДлительностьВызововСУБДЗа5Минут", "duration-last-5min-dbms");
    Результат.Вставить("ДлительностьВызововСУБД", "duration-all-dbms");
    Результат.Вставить("ПереданоСУБДЗа5Минут", "dbms-bytes-last-5min");
    Результат.Вставить("ПереданоСУБД", "dbms-bytes-all");
    Результат.Вставить("ДлительностьТекущегоСерверногоВызова", "duration-current");
    Результат.Вставить("ДлительностьСерверныхВызововЗа5Минут", "duration-last-5min");
    Результат.Вставить("ДлительностьСерверныхВызовов", "duration-all");
    Результат.Вставить("СерверныхВызововЗа5Минут", "calls-last-5min");
    Результат.Вставить("СерверныхВызовов", "calls-all");
    Результат.Вставить("ПереданоЗа5Минут", "bytes-last-5min");	
    Результат.Вставить("Передано", "bytes-all");
    Результат.Вставить("ПамятьТекущая", "memory-current");
    Результат.Вставить("Память5Мин", "memory-last-5min");
    Результат.Вставить("ПамятьВсего", "memory-total");
    Результат.Вставить("ЧтениеТекущее", "read-current");
    Результат.Вставить("Чтение5Мин", "read-last-5min");
    Результат.Вставить("ЧтениеВсего", "read-total");
    Результат.Вставить("ЗаписьТекущая", "write-current");
    Результат.Вставить("Запись5Мин", "write-last-5min");
    Результат.Вставить("ЗаписьВсего", "write-total");
    Результат.Вставить("Спящий", "hibernate");
    Результат.Вставить("ЗаснутьЧерез", "passive-session-hibernate-time");
    Результат.Вставить("ЗавершитьЧерез", "hibernate-session-terminate-time");
		
	Результат.Вставить("МоментЗахватаСоединенияСУБД", "db-proc-took-at");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Преобразует фильтр в нотацию утилиты rac.
//
// Параметры:
//  Фильтр - Структура, Массив(Структура), фильтр в нотации API,
//  Словарь - Структура, описание соответствия имен свойств в нотации API и в нотации утилиты rac.
//
// Возвращаемое значение: Структура, Массив(Структура) - фильтр в нотации утилиты rac.
//
Функция ФильтрВНотациюRac(Знач Фильтр, Знач Словарь)
	
	Если Фильтр = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Словарь = Неопределено Тогда
		Возврат Фильтр;
	КонецЕсли;
	
	Результат = Новый Массив();
	
	Для Каждого Условие Из Фильтр Цикл
		
		Если ТипЗнч(Условие) = Тип("КлючИЗначение") Тогда
			
			Результат.Добавить(Новый Структура("Свойство, ВидСравнения, Значение", Словарь[Условие.Ключ], ВидСравнения.Равно, Условие.Значение));
			
		ИначеЕсли ТипЗнч(Условие) = Тип("Структура") Тогда
			
			Результат.Добавить(Новый Структура("Свойство, ВидСравнения, Значение", Словарь[Условие.Свойство], Условие.ВидСравнения, Условие.Значение));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПодменитьКаталогЗапускаПлатформы(КаталогЗапуска, ВерсияПлатформы)
	
	Поз_ЛеваяЧасть = СтрНайти(КаталогЗапуска, "\1cv8\8.");
	ЛеваяЧасть = Лев(КаталогЗапуска, Поз_ЛеваяЧасть + 5) + Строка(ВерсияПлатформы) + "\bin\";		
	КаталогЗапуска = ЛеваяЧасть;
	
КонецПроцедуры

Функция СформироватьКаталогЗапускаRAS(ПараметрыАдминистрированияКластера) Экспорт
	КаталогЗапуска = КаталогИсполняемыхФайловПлатформы();
	ПодменитьКаталогЗапускаПлатформы(КаталогЗапуска, ПараметрыАдминистрированияКластера.ВерсияПлатформы);
	
	Возврат КаталогЗапуска;
КонецФункции

Процедура УдалитьВременныеФайл(ФайлПотокаОшибок, ФайлПотокаВывода)
	ФайлПО = Новый Файл(ФайлПотокаОшибок);
	Если ФайлПО.Существует() Тогда
		Попытка
			УдалитьФайлы(ФайлПотокаОшибок);
		Исключение
			// Ожидаемое поведение
		КонецПопытки;
	КонецЕсли;
	
	ФайлПВ = Новый Файл(ФайлПотокаВывода);
	Если ФайлПВ.Существует() Тогда
		Попытка
			УдалитьФайлы(ФайлПотокаВывода);
		Исключение
			// Ожидаемое исключение
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти




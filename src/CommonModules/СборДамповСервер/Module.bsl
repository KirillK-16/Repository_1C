
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьАнализ(КонтрольнаяПроцедура) Экспорт
    
    НастройкиРабочегоСервера = РегистрыСведений.ПараметрыРабочихСерверов.Получить(Новый Структура("ОбъектКонтроля", КонтрольнаяПроцедура.ОбъектКонтроля));
    ИмяКомпьютера = НастройкиРабочегоСервера.Оборудование.Наименование;
	Кластер = НастройкиРабочегоСервера.Кластер;
    
    Настройки = РегистрыСведений.НастройкиСборДампов.Получить(Новый Структура("КонтрольнаяПроцедура", КонтрольнаяПроцедура));
    УстановитьПривилегированныйРежим(Истина);
    ДанныеХранилища = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(КонтрольнаяПроцедура);
    УстановитьПривилегированныйРежим(Ложь);
    
    Если ДанныеХранилища <> Неопределено Тогда
        Настройки.Вставить("КаталогЭкспорта", ДанныеХранилища.КаталогЭкспортаДампов); 
    Иначе
        Настройки.Вставить("КаталогЭкспорта", ""); 
    КонецЕсли;
    
    Если Настройки.ИспользоватьАгента Тогда
        НетПроблем = Истина;
	    Возврат;
    КонецЕсли;
    
    Если Настройки.АвтоматическаяНастройка Тогда
        
        Если ЗначениеЗаполнено(НастройкиРабочегоСервера.КаталогНастроекТЖ) И ЗначениеЗаполнено(НастройкиРабочегоСервера.КаталогНастроекТЖ)  Тогда
            Настройки.Вставить("КаталогНастроекТЖ", НастройкиРабочегоСервера.КаталогНастроекТЖ);
            НастроитьГенерациюДампов(КонтрольнаяПроцедура, Настройки);
        Иначе
            Сообщение = "У рабочего сервера 1С """ + КонтрольнаяПроцедура.ОбъектКонтроля + """ не заполнен
            |каталог расположения настроек технологического журнала logcfg.xml!";
		    НетПроблем = Ложь;
            
            Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноЕстьПроблемы, Сообщение);
                
		    Возврат;            
            
        КонецЕсли;
        
    КонецЕсли;
    	
	НетПроблем = Истина;
	ТекущаяДата = ТекущаяДата();
	
	КаталогПроверка = Новый Файл(Настройки.КаталогВыгрузкиДамповСетевой);
	Если КаталогПроверка.Существует() Тогда
		ФайлыДампов = НайтиФайлыДампов(Настройки);
	Иначе
		Сообщение = "Не найден каталог сбора дампов """ + Настройки.КаталогВыгрузкиДамповСетевой + """!";
		НетПроблем = Ложь;
		Возврат;
	КонецЕсли;
	
	//// Варианты дампа на самом деле относятся ни к контретному серверу, а к информационной системе в целом.
	//// Не имеет значения на каком сервере образовался вариант дампа.
	//// Исключительная табличная блокировка накладывается для предотвращения
	//// параллельного чтения. Первый процесс, который не обнаружил нужный
	//// вариант дампа создаст его.		
	//
	//БлокировкаДанных = Новый БлокировкаДанных;
	//ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.ВариантыДампов");
	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//БлокировкаДанных.Заблокировать();
	ЧислоДампов = 0;
	
	ИдентификаторыДампов = Новый Массив;
	РегистрируемыеДампы = Новый Массив;
    
    Для Каждого ТекущийФайлДампа Из ФайлыДампов Цикл
        
        СтруктураИмениФайла = СборДамповСервер.РазобратьИмяФайлаДампа(ТекущийФайлДампа);
        ИдентификаторыДампов.Добавить(СтруктураИмениФайла.PID);
        
        ДампыСОшибкой = СборДамповСервер.ВыборкаДамповЗавершениеОшибкой(ТекущийФайлДампа.Имя, КонтрольнаяПроцедура.ОбъектКонтроля);
        Если ДампыСОшибкой.Следующий() Тогда
            Сообщение = Строка(ДампыСОшибкой.СостояниеОбработкиДампа) + ": " + ДампыСОшибкой.ОписаниеОшибки;
        КонецЕсли;
        
        Если ПроверкаПовторяющихсяДампов(КонтрольнаяПроцедура, ТекущийФайлДампа, ТекущаяДата) Тогда
            Продолжить;
        КонецЕсли;
        
        ТекстУведомленияОДампе = НСтр("ru = 'На сервере %1 обнаружен дамп. Тип процесса: %2'");
        ТекстУведомленияОДампе = СтрЗаменить(ТекстУведомленияОДампе, "%1", Строка(КонтрольнаяПроцедура.ОбъектКонтроля));
        ТекстУведомленияОДампе = СтрЗаменить(ТекстУведомленияОДампе, "%2", Строка(СтруктураИмениФайла.Процесс));
        Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, Перечисления.ЗаголовкиЖурналаКонтроля.Предупреждение, ТекстУведомленияОДампе);
        
        НетПроблем = Ложь;
        
        РезультатыАнализа = СборДамповСервер.ВыполнитьАнализДампа(СтруктураИмениФайла, Настройки.КаталогЭкспорта);
        Если РезультатыАнализа.ВидДампа = Перечисления.РезультатыАнализаДампов.НовыйВариантДампа Тогда
            СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампа;
            ОписаниеПоручения = Справочники.ТипыЗадачСборДампов.СборДамповНовыйДампРассмотреть.ДополнительныйТекстПредупреждения;
            
            ИмяДампа = СтрЗаменить(ТекущийФайлДампа.Имя, ".mdmp", "");
            ИмяДампа = СтрЗаменить(ИмяДампа, "_", Символы.ПС);
            
            ИмяПроцесса = СтрПолучитьСтроку(ИмяДампа, 1);
            Платформа = СтрПолучитьСтроку(ИмяДампа, 2);
            Смещение = СтрПолучитьСтроку(ИмяДампа, 3);
            ДатаДампа = СтрПолучитьСтроку(ИмяДампа, 4);
            Процесс = СтрПолучитьСтроку(ИмяДампа, 5);
            
            ОписаниеПоручения = БизнесПроцессСервер.УстановитьДатуВШаблоне(ОписаниеПоручения, "Дата=", ТекущаяДата());
            ОписаниеПоручения = СтрЗаменить(ОписаниеПоручения, "[ИмяПроцесса]", ИмяПроцесса);
            ОписаниеПоручения = СтрЗаменить(ОписаниеПоручения, "[Платформа]", Платформа);
            ОписаниеПоручения = СтрЗаменить(ОписаниеПоручения, "[Смещение]", Смещение);
            ОписаниеПоручения = БизнесПроцессСервер.УстановитьДатуВШаблоне(ОписаниеПоручения, "ДатаДампа=", Дата(ДатаДампа));
            ОписаниеПоручения = СтрЗаменить(ОписаниеПоручения, "[Процесс]", Процесс);
        ИначеЕсли РезультатыАнализа.ВидДампа = Перечисления.РезультатыАнализаДампов.ДубльИсправленногоДампа Тогда
            СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампа;
            ОписаниеПоручения = НСтр("ru = 'Рассмотреть дамп %1'");
            ОписаниеПоручения = СтрЗаменить(ОписаниеПоручения, "%1", ТекущийФайлДампа.Имя);
        Иначе
            СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампаДляУдаления;
        КонецЕсли;
        
        ПИДстрока = Формат(СтруктураИмениФайла.PID, "ЧГ=0");
        РасположениеТЖ = ОбщийКлиентСервер.СкорректироватьПуть(Настройки.КаталогТЖСетевой) + "\" + СтруктураИмениФайла.ИмяПроцесса + "_" + ПИДстрока;
        Если НайтиФайлы(РасположениеТЖ).Количество() = 0 Тогда
            ИмяСтраницыСправки = "СборДамповНеНайденТЖ";
            Сообщение = НСтр("ru = 'Не найден технологический журнал процесса %ТипПроцесса (pid %PID).'");
            Сообщение = СтрЗаменить(Сообщение, "%ТипПроцесса", СтруктураИмениФайла.ИмяПроцесса);
            Сообщение = СтрЗаменить(Сообщение, "%PID", ПИДстрока);
            РасположениеТЖ = "";
        КонецЕсли;
        
        ЧислоДампов = ЧислоДампов + 1;
        РегистрируемыйДамп = Новый Структура();
        РегистрируемыйДамп.Вставить("Период", ТекущаяДата);
        РегистрируемыйДамп.Вставить("ВариантДампа", РезультатыАнализа.ВариантДампа);
        РегистрируемыйДамп.Вставить("ОбъектКонтроля", КонтрольнаяПроцедура.ОбъектКонтроля);
        РегистрируемыйДамп.Вставить("ИмяФайлаДампа", ТекущийФайлДампа.Имя);
        РегистрируемыйДамп.Вставить("НомерДампа", ЧислоДампов);
        РегистрируемыйДамп.Вставить("КаталогЭкспорта", Настройки.КаталогЭкспорта);
        РегистрируемыйДамп.Вставить("РасположениеТЖ", РасположениеТЖ);
        РегистрируемыйДамп.Вставить("ИмяБезРасширения", ТекущийФайлДампа.ИмяБезРасширения);
        РегистрируемыйДамп.Вставить("ПолноеИмя", ТекущийФайлДампа.ПолноеИмя);
        РегистрируемыйДамп.Вставить("КаталогВременныхФайлов", Настройки.КаталогВременныхФайлов);
        РегистрируемыйДамп.Вставить("СостояниеОбработкиДампа", СостояниеОбработкиДампа);
        РегистрируемыйДамп.Вставить("РазмерФайла", 0);
        РегистрируемыеДампы.Добавить(РегистрируемыйДамп);
    КонецЦикла;
	
	ЗапросЗамеченныхПроцессов = Новый Запрос;
	ЗапросЗамеченныхПроцессов.Текст = "ВЫБРАТЬ
	|	МониторингПроцессов.Процесс,
	|	МАКСИМУМ(МониторингПроцессов.Время) КАК ДатаПадения
	|ИЗ
	|	РегистрСведений.МониторингПроцессов КАК МониторингПроцессов
	|ГДЕ
	|	МониторингПроцессов.Сервер = &Сервер
	|	И МониторингПроцессов.Время >= &Время
	|	И МониторингПроцессов.Кластер = &Кластер
	|
	|СГРУППИРОВАТЬ ПО
	|	МониторингПроцессов.Процесс
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПадения";
	ЗапросЗамеченныхПроцессов.УстановитьПараметр("Сервер", ИмяКомпьютера);
	ЗапросЗамеченныхПроцессов.УстановитьПараметр("Время", РегистрыСведений.ВременнойГоризонтПросмотраДампов.Получить(
		Новый Структура("КонтрольнаяПроцедура", КонтрольнаяПроцедура)
	)["Дата"]);
	ЗапросЗамеченныхПроцессов.УстановитьПараметр("Кластер", Кластер);
	ВыборкаЗамеченныхПроцессов = ЗапросЗамеченныхПроцессов.Выполнить().Выбрать();
	
	ЗавершившиесяПроцессы = Новый Соответствие;
	МаксВремяПадения = Неопределено;
	Пока ВыборкаЗамеченныхПроцессов.Следующий() Цикл
		ДатаПадения = ВыборкаЗамеченныхПроцессов.ДатаПадения;
		PID = ВыборкаЗамеченныхПроцессов.Процесс;
		Если МаксВремяПадения = Неопределено Тогда
			МаксВремяПадения = ДатаПадения;
		Иначе
			МаксВремяПадения = Макс(ДатаПадения, МаксВремяПадения);
		КонецЕсли;
		СписокПроцессов = ЗавершившиесяПроцессы.Получить(ДатаПадения);
		Если СписокПроцессов = Неопределено Тогда
			СписокПроцессов = Новый Массив;
			ЗавершившиесяПроцессы.Вставить(ДатаПадения, СписокПроцессов);
		КонецЕсли;
        
        Попытка
			СписокПроцессов.Добавить(PID);
		Исключение
			// не записался pid
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("Контроль устойчивости", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.СборДамповСервер,,Комментарий);
        КонецПопытки;
        
	КонецЦикла;
	
	Если МаксВремяПадения <> Неопределено Тогда
		// самые молодые процессы могли не завершиться, поэтому дампы по ним будем искать
		// когда контрольная процедура сработает в следующий раз
		ЗавершившиесяПроцессы.Удалить(МаксВремяПадения);
		
		// Запоминаем новый временной горизонт
		ЗаписьОНовомГоризонте = РегистрыСведений.ВременнойГоризонтПросмотраДампов.СоздатьМенеджерЗаписи();
		ЗаписьОНовомГоризонте.Дата = МаксВремяПадения;
		ЗаписьОНовомГоризонте.КонтрольнаяПроцедура = КонтрольнаяПроцедура;
		ЗаписьОНовомГоризонте.Записать();
	КонецЕсли;
	
	// Так как мы не можем быть уверены, что последние записи в 
	// регистре сведений МониторингПроцессов соответствуют завершенным процессам
	// мы на текущей итерации их не рассматриваем.
	// Поэтому нужно поднять историю по дампам за прошлый раз.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(Период) КАК ПериодМаксимум
	|ПОМЕСТИТЬ
	|	ВТ_Максимум
	|ИЗ
	|	РегистрСведений.Дампы КАК РегСвДампы
	|ГДЕ
	|	РегСвДампы.ОбъектКонтроля = &ОбъектКонтроля
	|;
	|ВЫБРАТЬ
	|	РегСвДампы.ИмяФайлаДампа КАК ИмяФайлаДампа, 
	|	РегСвДампы.ИмяБезРасширения КАК ИмяБезРасширения 
	|ИЗ
	|	ВТ_Максимум КАК ВТ_Максимум
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.Дампы КАК РегСвДампы
	|ПО
	|	РегСвДампы.Период = ВТ_Максимум.ПериодМаксимум
	|	И РегСвДампы.ОбъектКонтроля = &ОбъектКонтроля
	|";
	Запрос.УстановитьПараметр("ОбъектКонтроля", КонтрольнаяПроцедура.ОбъектКонтроля);
	Результат = Запрос.Выполнить();
	ЗаписьОДампе = Результат.Выбрать();
	
	Пока ЗаписьОДампе.Следующий() Цикл
		Попытка 
			СтруктураИмениФайла = СборДамповСервер.РазобратьИмяФайлаДампаПоИмени(
				ЗаписьОДампе.ИмяФайлаДампа, 
				ЗаписьОДампе.ИмяБезРасширения
			);
			ИдентификаторыДампов.Добавить(СтруктураИмениФайла.PID);
		Исключение
			// попалась запись о ТЖ без дампа
		КонецПопытки;
	КонецЦикла;
	
	// просматриваем список всех завершившихся процессов и
	// ищем соответствующий дамп, если дамп не обнаружен, тогда
	// производим оповещение
	Для Каждого ДатаСписокПроцессов Из ЗавершившиесяПроцессы Цикл
		ДатаПадения = ДатаСписокПроцессов.Ключ;
		СписокПроцессов = ДатаСписокПроцессов.Значение;
		Для Каждого PID Из СписокПроцессов Цикл
			Если ИдентификаторыДампов.Найти(PID) = Неопределено Тогда
				
				// Не каждое завершение процесса кластера является аварийным. Если технологический журнал процесса rphost заканчивается событием PROC вида
				// 27:00.0732-0,PROC,2,process=rphost,Err=0,Txt=1C:Enterprise 8.2 (x86-64) (8.2.18.102) Working Process (debug) terminated.
				// или журнал rmngr 
				// 27:00.1662-0,PROC,1,process=rmngr,Err=0,Txt=1C:Enterprise 8.2 (x86-64) (8.2.18.102) Cluster Manager (debug) finished.
				// или журнал ragent
				// 27:03.5080-0,PROC,1,process=ragent,Err=0,Txt=1C:Enterprise 8.2 (x86-64) (8.2.18.102) Server Agent (debug) finished.
				//где в поле Err указан 0, то проблемы никакой нет. Если же такое событие в тех журнале завершившегося процесса отсутствует, 
				// то это свидетельствует о возможном аварийном завершении процесса.
				// 
				ПИДстрока = Формат(PID, "ЧГ=0");
				РасположениеТЖ = ОбщийКлиентСервер.СкорректироватьПуть(Настройки.КаталогТЖСетевой) + "\" + "rphost_" + ПИДстрока;
				ФайлыСЛогами = НайтиФайлы(РасположениеТЖ, "*.log");
				// читаем последний из файлов и ищем в его конце запись о завершении без ошибок
				ПоследнийФайлСЛогами = Неопределено;
				Для Каждого ФайлСЛогами Из ФайлыСЛогами Цикл
					Если ПоследнийФайлСЛогами = Неопределено ИЛИ ФайлСЛогами.Имя > ПоследнийФайлСЛогами.Имя Тогда
						ПоследнийФайлСЛогами = ФайлСЛогами;
					КонецЕсли;
				КонецЦикла;
				
				// Смотрим в конец файла
				Если ПоследнийФайлСЛогами = Неопределено Тогда
					// оповестить ответственного, что в папке с логами
					// процесса пусто
					
					ИмяСтраницыСправки = "СборДамповФайлыЛоговНеНайдены";
					Сообщение = Справочники.ТипыЗадачСборДампов.КаталогЛоговЗавершившегосяПроцессаПуст;
					Сообщение = БизнесПроцессСервер.УстановитьДатуВШаблоне(Сообщение, "Дата=", ТекущаяДата);
					Сообщение = СтрЗаменить(Сообщение, "[Процесс]", ПИДстрока);
					
					Продолжить;
                    
				КонецЕсли;
				
				Логи = Новый ЧтениеТекста(ПоследнийФайлСЛогами.ПолноеИмя);
				ПоследняяСтрока = Неопределено;
				Пока Истина Цикл
					ТекущаяСтрока = Логи.ПрочитатьСтроку();
					Если ТекущаяСтрока = Неопределено Тогда
						Прервать;
					КонецЕсли;
					ПоследняяСтрока = ТекущаяСтрока;
				КонецЦикла;
				
				Если ПоследняяСтрока = Неопределено Тогда
					// оповестить ответственного, что в файл с 
					// логами пустой
					ИмяСтраницыСправки = "СборДамповФайлыЛоговПустой";
					Сообщение = НСтр("ru = 'Файл с логами процесса rphost (pid %PID) пуст.'");
					Сообщение = СтрЗаменить(Сообщение, "%PID", ПИДстрока);
					
					Продолжить;
                    
				КонецЕсли;
				
				Если СтрЧислоВхождений(ПоследняяСтрока, "PROC") > 0 
					И СтрЧислоВхождений(ПоследняяСтрока, "Err=0") > 0
					И (СтрЧислоВхождений(ПоследняяСтрока, "finished") > 0 ИЛИ СтрЧислоВхождений(ПоследняяСтрока, "terminated") > 0)
				Тогда
					// процесс завершился успешно и никакой ошибки тут нет.
					Продолжить;
				КонецЕсли;
				
				// процесс завершился без дампа
				ИмяСтраницыСправки = "СборДамповНетДампа";
				НаименованиеПроцесса = "%ТипПроцесса (pid %PID)";
				НаименованиеПроцесса = СтрЗаменить(НаименованиеПроцесса, "%ТипПроцесса", "rphost");
				НаименованиеПроцесса = СтрЗаменить(НаименованиеПроцесса, "%PID", ПИДстрока);
				
				Сообщение = НСтр("ru = 'Рабочий процесс %НаименованиеПроцесса аварийно завершился без образования дампа. Технологический журнал сохранен в каталог %КаталогЭкспорта.'");
				Сообщение = СтрЗаменить(Сообщение, "%НаименованиеПроцесса", НаименованиеПроцесса);
				Сообщение = СтрЗаменить(Сообщение, "%КаталогЭкспорта", Настройки.КаталогЭкспорта);
				
    			РегистрируемыйДамп = Новый Структура();
				РегистрируемыйДамп.Вставить("Период", ТекущаяДата);
				РегистрируемыйДамп.Вставить("ВариантДампа", Справочники.ВариантыДампов.ДляЗавершенияБезОбразованияДампа);
				РегистрируемыйДамп.Вставить("ОбъектКонтроля", КонтрольнаяПроцедура.ОбъектКонтроля);
				РегистрируемыйДамп.Вставить("ИмяФайлаДампа", СборДамповСервер.ДампНеНайденВСтроку());
				РегистрируемыйДамп.Вставить("НомерДампа", ЧислоДампов);
				РегистрируемыйДамп.Вставить("КаталогЭкспорта", Настройки.КаталогЭкспорта);
				РегистрируемыйДамп.Вставить("РасположениеТЖ", РасположениеТЖ);
				РегистрируемыйДамп.Вставить("ИмяБезРасширения", СтрЗаменить("Технологический журнал процесса %НаименованиеПроцесса", "%НаименованиеПроцесса", НаименованиеПроцесса));
				РегистрируемыйДамп.Вставить("ПолноеИмя", "");
				РегистрируемыйДамп.Вставить("КаталогВременныхФайлов", "");
				РегистрируемыйДамп.Вставить("СостояниеОбработкиДампа", Перечисления.СостоянияОбработкиДампа.ДампНеНайден);
				РегистрируемыйДамп.Вставить("РазмерФайла", 0);
			
				РегистрируемыеДампы.Добавить(РегистрируемыйДамп);
				ЧислоДампов = ЧислоДампов + 1;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого РегистрируемыйДамп Из РегистрируемыеДампы Цикл
		СборДамповСервер.ЗарегистрироватьФайлДампа(РегистрируемыйДамп);
	КонецЦикла;
	
	НетПроблемWindowsErrorReporting = ЗарегистрироватьДампыWindowsErrorReporting(КонтрольнаяПроцедура, Настройки, ТекущаяДата);
	
	Если НетПроблем Тогда
		НетПроблем = НетПроблемWindowsErrorReporting;
    КонецЕсли;
    
    Если НетПроблем Тогда
        Общий.ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, Перечисления.СостоянияКонтрольныхПроцедур.ВыполненаУспешноПроблемНет);
    КонецЕсли;
        
КонецПроцедуры

Процедура НастроитьГенерациюДампов(КонтрольнаяПроцедура, Настройки)
	
	Если НЕ (ЗначениеЗаполнено(Настройки.КаталогТЖСетевой) И ЗначениеЗаполнено(Настройки.КаталогТЖЛокальный) И ЗначениеЗаполнено(Настройки.КаталогНастроекТЖ)) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СборДампов", Новый Массив);
	Параметры.СборДампов.Добавить("УровеньДетализацииДампов");
	Параметры.СборДампов.Добавить("КаталогВыгрузкиДампов");
	
	ТехнологическийЖурнал.ОбновитьФайлНастроекТехнологическогоЖурнала(КонтрольнаяПроцедура.ОбъектКонтроля, Новый Структура("КодыКонтрольныхПроцедур",Параметры));
		
КонецПроцедуры

Функция НайтиФайлыДампов(Настройки)
	 
	ФайлыДампов = НайтиФайлы(Настройки.КаталогВыгрузкиДамповСетевой, "*.mdmp", Ложь);
	Возврат ФайлыДампов;
	
КонецФункции

Функция ПроверкаПовторяющихсяДампов(КонтрольнаяПроцедура, ТекущийФайлДампа, ТекущаяДата)
	Результат = Ложь;
	
	ПовторяющиесяДампы = СборДамповСервер.ВыборкаДампов(ТекущийФайлДампа.Имя, КонтрольнаяПроцедура.ОбъектКонтроля);
	
	Если ПовторяющиесяДампы.Следующий() Тогда
		ДатаПервогоОбнаружения = ПовторяющиесяДампы.Период;
		ВремяОжиданияУдаления = Константы.КритическийСрокХраненияДампаМин.Получить();
		Если ТекущаяДата - ДатаПервогоОбнаружения > ВремяОжиданияУдаления * 60 Тогда
			// Это значит, что ранее при разборе дампов
			// что-то пошло не так и программа не смогла удалить файл:
			// либо ошибка возникла при удалении, либо вообще на подступах
			// к строчке кода удаления файла.
			
			// Предлагается, дамп не трогать, а ответственного за сбор дампов
			// проинформировать, что появились "странные" дампы, 
			// которые разобрались
			
			ИмяСтраницыСправки = "СборДамповНайденФайлБывшийВОбработке";
			Сообщение = НСтр("ru = 'Дамп %1 не удаляется уже больше %2 минут'");
			Сообщение = СтрЗаменить(Сообщение, "%1", ТекущийФайлДампа.Имя);
			Сообщение = СтрЗаменить(Сообщение, "%2", ВремяОжиданияУдаления);
			
            //БизнесПроцессСервер.ЗарегистрироватьПроблему(ЧислоСообщений, 
            //ЭтотОбъект.Ссылка,
            //Справочники.ТипыИсполнителей.ОтветственныйЗаКонтрольныеПроцедуры,
            //Справочники.ТипыЗадачСборДампов.НеУдаляетсяДамп,
            //"Восстановить работоспособность контрольной процедуры",
            //Сообщение,
            //Сообщение,
            //Новый Структура("ИмяФайла", ТекущийФайлДампа.Имя),
            //, 
            //,
            //ИмяСтраницыСправки
            //);
		КонецЕсли;
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗарегистрироватьДампыWindowsErrorReporting(КонтрольнаяПроцедура, Настройки, ТекущаяДата)
	НетПроблемWindowsErrorReporting = Истина;
	
	ФайлыДампов = НайтиФайлы(Настройки.КаталогВыгрузкиДамповСетевой, "*.dmp", Ложь);
	
	РегистрируемыеДампы = Новый Массив;
	
	Для Каждого ТекущийФайлДампа Из ФайлыДампов Цикл
		СтруктураИмениФайла = Новый Структура("Процесс, ИмяПроцесса, ВерсияПлатформы, Смещение, ДатаВремя, PID, ИмяДампа, ПолноеИмя, ИмяФайлаБезРасширения");
		СтруктураИмениФайла = ЗаполнитьСтруктуруWindowsErrorReporting(ТекущийФайлДампа, СтруктураИмениФайла);
		
		Если ПроверкаПовторяющихсяДампов(КонтрольнаяПроцедура, ТекущийФайлДампа, ТекущаяДата) Тогда
			Продолжить;
		КонецЕсли;
				
		ВариантДампа = СборДамповСервер.НайтиВариантДампа(СтруктураИмениФайла);
		Если ВариантДампа = Неопределено Тогда
			СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампа;
			ИмяZIPДампаПриЭкспорте = СборДамповСервер.ИмяZIPДампаПриЭкспорте(Настройки.КаталогЭкспорта, ТекущийФайлДампа.ИмяБезРасширения, ТекущийФайлДампа.Расширение);
			ВариантДампа = СборДамповСервер.СоздатьВариантДампа(СтруктураИмениФайла, ИмяZIPДампаПриЭкспорте, Истина);
		КонецЕсли;
		
		ОписаниеПоручения = Справочники.ТипыЗадачСборДампов.СборДамповНовыйДампРассмотреть.ДополнительныйТекстПредупреждения;
		
		ИмяДампа = СтрЗаменить(ТекущийФайлДампа.Имя, ".dmp", "");
				
		ИмяПроцесса = СтруктураИмениФайла.ИмяПроцесса;
		Платформа = СтруктураИмениФайла.ВерсияПлатформы;
		Смещение =СтруктураИмениФайла.Смещение;
		ДатаДампа = СтруктураИмениФайла.ДатаВремя;
		Процесс = СтруктураИмениФайла.Процесс;
		
		ОписаниеПоручения = БизнесПроцессСервер.УстановитьДатуВШаблоне(ОписаниеПоручения, "Дата=", ТекущаяДата());
		ОписаниеПоручения = СтрЗаменить(ОписаниеПоручения, "[ИмяПроцесса]", ИмяПроцесса);
		ОписаниеПоручения = СтрЗаменить(ОписаниеПоручения, "[Платформа]", Платформа);
		ОписаниеПоручения = СтрЗаменить(ОписаниеПоручения, "[Смещение]", Смещение);
		ОписаниеПоручения = БизнесПроцессСервер.УстановитьДатуВШаблоне(ОписаниеПоручения, "ДатаДампа=", Дата(ДатаДампа));
		ОписаниеПоручения = СтрЗаменить(ОписаниеПоручения, "[Процесс]", Процесс);
		
        //ЗарегистрироватьЗадачуПоДампу(
        //	Справочники.ТипыИсполнителейСборДампов.ОтветственныйЗаРассмотрениеДампа,
        //	Справочники.ТипыЗадачСборДампов.СборДамповНовыйДампРассмотреть, 
        //	ОписаниеПоручения,
        //	ВариантДампа,
        //	,
        //	ТекущаяДата);
			
		РегистрируемыйДамп = Новый Структура();
		РегистрируемыйДамп.Вставить("Период", ТекущаяДата);
		РегистрируемыйДамп.Вставить("ВариантДампа", ВариантДампа);
		РегистрируемыйДамп.Вставить("ОбъектКонтроля", КонтрольнаяПроцедура.ОбъектКонтроля);
		РегистрируемыйДамп.Вставить("ИмяФайлаДампа", ТекущийФайлДампа.Имя);
		РегистрируемыйДамп.Вставить("НомерДампа", 1);
		РегистрируемыйДамп.Вставить("КаталогЭкспорта", Настройки.КаталогЭкспорта);
		РегистрируемыйДамп.Вставить("РасположениеТЖ", "");
		РегистрируемыйДамп.Вставить("ИмяБезРасширения", ТекущийФайлДампа.ИмяБезРасширения);
		РегистрируемыйДамп.Вставить("ПолноеИмя", ТекущийФайлДампа.ПолноеИмя);
		РегистрируемыйДамп.Вставить("КаталогВременныхФайлов", Настройки.КаталогВременныхФайлов);
		РегистрируемыйДамп.Вставить("СостояниеОбработкиДампа", Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампа);
		РегистрируемыйДамп.Вставить("РазмерФайла", 0);
		РегистрируемыеДампы.Добавить(РегистрируемыйДамп);
	КонецЦикла;
	
	Для Каждого РегистрируемыйДамп Из РегистрируемыеДампы Цикл
		СборДамповСервер.ЗарегистрироватьФайлДампа(РегистрируемыйДамп);
		НетПроблемWindowsErrorReporting = Ложь;
	КонецЦикла;
	
	Возврат НетПроблемWindowsErrorReporting;
КонецФункции

Функция ЗаполнитьСтруктуруWindowsErrorReporting(Файл, СтруктураИмениФайла)
	Если СтрНайти(Файл.ИмяБезРасширения, "rmngr.exe") > 0 Тогда
		ИмяБезРасширенияМассив = СтрРазделить(Файл.ИмяБезРасширения, ".", Ложь);
		ИмяПроцесса = "rmngr_wer";
		
		СтруктураИмениФайла.Процесс = СборДамповКонстантыСервер.ТипУпавшегоПроцесса(ИмяПроцесса);
		СтруктураИмениФайла.ИмяПроцесса = ИмяПроцесса;
		СтруктураИмениФайла.ВерсияПлатформы = ВерсияПлатформыСервер.ВерсияПлатформы("0.0.0.0");
		СтруктураИмениФайла.Смещение = "00000000";
		СтруктураИмениФайла.ДатаВремя = Файл.ПолучитьВремяИзменения();
		СтруктураИмениФайла.PID = Число(ИмяБезРасширенияМассив[2]);
		СтруктураИмениФайла.ИмяДампа = ВРег(СтруктураИмениФайла.ИмяПроцесса + "_" + СтруктураИмениФайла.ВерсияПлатформы + "_" + СтруктураИмениФайла.Смещение);
		СтруктураИмениФайла.ПолноеИмя = Файл.ПолноеИмя;
		СтруктураИмениФайла.ИмяФайлаБезРасширения = Файл.ИмяБезРасширения;
	ИначеЕсли СтрНайти(Файл.ИмяБезРасширения, "rphost.exe") > 0 Тогда
		ИмяБезРасширенияМассив = СтрРазделить(Файл.ИмяБезРасширения, ".", Ложь);
		ИмяПроцесса = "rphost_wer";
		
		СтруктураИмениФайла.Процесс = СборДамповКонстантыСервер.ТипУпавшегоПроцесса(ИмяПроцесса);
		СтруктураИмениФайла.ИмяПроцесса = ИмяПроцесса;
		СтруктураИмениФайла.ВерсияПлатформы = ВерсияПлатформыСервер.ВерсияПлатформы("0.0.0.0");
		СтруктураИмениФайла.Смещение = "00000000";
		СтруктураИмениФайла.ДатаВремя = Файл.ПолучитьВремяИзменения();
		СтруктураИмениФайла.PID = Число(ИмяБезРасширенияМассив[2]);
		СтруктураИмениФайла.ИмяДампа = ВРег(СтруктураИмениФайла.ИмяПроцесса + "_" + СтруктураИмениФайла.ВерсияПлатформы + "_" + СтруктураИмениФайла.Смещение);
		СтруктураИмениФайла.ПолноеИмя = Файл.ПолноеИмя;
		СтруктураИмениФайла.ИмяФайлаБезРасширения = Файл.ИмяБезРасширения;
	Иначе
		СтруктураИмениФайла.Процесс = Перечисления.Процессы.WindowsErrorReporting;
		СтруктураИмениФайла.ИмяПроцесса = Файл.ИмяБезРасширения;
		СтруктураИмениФайла.ВерсияПлатформы = ВерсияПлатформыСервер.ВерсияПлатформы("0.0.0.0");
		СтруктураИмениФайла.Смещение = "00000000";
		СтруктураИмениФайла.ДатаВремя = Файл.ПолучитьВремяИзменения();
		СтруктураИмениФайла.PID = 0;
		СтруктураИмениФайла.ИмяДампа = ВРег(СтруктураИмениФайла.ИмяПроцесса + "_" + СтруктураИмениФайла.ВерсияПлатформы + "_" + СтруктураИмениФайла.Смещение);
		СтруктураИмениФайла.ПолноеИмя = Файл.ПолноеИмя;
		СтруктураИмениФайла.ИмяФайлаБезРасширения = Файл.ИмяБезРасширения;
	КонецЕсли;
	
	Возврат СтруктураИмениФайла;
КонецФункции

Процедура ПриОбновлении(ТекущаяВерсия, СохраненнаяВерсия) Экспорт
	
	Если СохраненнаяВерсия <= "2.0.8.11" И ТекущаяВерсия > "2.0.8.11" Тогда
		// Устарело
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыполненииЗадачи(ЗадачаСсылка) Экспорт
	
	//Если ЗадачаСсылка.ТипЗадачи = Справочники.ТипыЗадачСборДампов.СборДамповНовыйДампРассмотреть 
	//	ИЛИ ЗадачаСсылка.ТипЗадачи = Справочники.ТипыЗадачСборДампов.СборДамповИсправленныйДампПересмотреть
	//Тогда
	//	ВариантДампа = ЗадачаСсылка.ПараметрыЗадачи[0].Значение.ПолучитьОбъект();
	//	ВариантДампа.Состояние = Перечисления.СостоянияВариантаДампа.Исправлен;
	//	ВариантДампа.Записать();
	//КонецЕсли;
	
КонецПроцедуры

// Включить генерацию дампов при аварийном завершении.
// Параметры - Тип Структура с полями Сетевой, Локальный, Конфигурация, УровеньДетализацииДампов
//
Функция НастроитьТЖ(Параметры) Экспорт
	
	Данные = ТехнологическийЖурнал.КонфигурацияГенерацииДампов(Параметры.КаталогВыгрузкиДампов, Параметры);

	Если Параметры.КонтрольнаяПроцедура.Выполнять Тогда
		НужнаЗамена = ТехнологическийЖурнал.НужнаЗаменаТЖ(Данные, Параметры.Конфигурация, Параметры.ЛокальныйУникальный, Параметры.АвтоматическаяНастройка);
	Иначе
		НужнаЗамена = Истина;
	КонецЕсли;
	
	Если НужнаЗамена Тогда 
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("СборДамповСервер", УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		
		locations = Новый Соответствие;
		locations.Вставить("dump", Параметры.КаталогВыгрузкиДампов);
		Если Параметры.Свойство("ПеремещенияЛогов") Тогда
			locations.Вставить("log", Параметры["ЛокальныйУникальный"]);
		Иначе
			locations.Вставить("log", Параметры["Локальный"]);
		КонецЕсли;
		
		ТехнологическийЖурнал.ОтключитьТехнологическийЖурнал(Параметры.Конфигурация, locations, Параметры);
		
		Если Параметры.Свойство("ОтключениеТЖ") Тогда
			Если Параметры["ОтключениеТЖ"] Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		НастройкиТЖ = Новый Массив;
		НастройкиТЖ.Добавить(Параметры);
		
		Если Параметры.АвтоматическаяНастройка И Параметры.КонтрольнаяПроцедура.Выполнять Тогда
			Описатель = ТехнологическийЖурнал.ВключитьТехнологическийЖурнал(Данные, НастройкиТЖ);
		Иначе
			Описатель = Неопределено;
		КонецЕсли;
				
		Возврат Описатель;
	КонецЕсли;

КонецФункции 

// Отключить генерацию дампов при аварийном завершении.
//
Процедура ОтключитьГенерациюДампов() Экспорт
КонецПроцедуры

// Выполняет анализ дампа по имени на предмет необходимости архивирования,
// и, при необходимости, регистрирует новый вариант
// Параметры:
//  ИмяФайлаДампа - Строка - имя файла дампа
//
// Возвращаемое значение:
//  Структура: РезультатАнализа - Перечисление.РезультатыАнализаДампов
//             ВариантДампа - СправочникСсылка.ВариантыДампов
//
Функция ВыполнитьАнализДампа(ОписаниеФайла, КаталогЭкспорта) Экспорт
	
	ВариантДампа = СборДамповСервер.НайтиВариантДампа(ОписаниеФайла);
	ИмяZIPДампаПриЭкспорте = "";
	
	Если ВариантДампа = Неопределено Тогда
		ИмяZIPДампаПриЭкспорте = СборДамповСервер.ИмяZIPДампаПриЭкспорте(КаталогЭкспорта, ОписаниеФайла.ИмяФайлаБезРасширения, ОписаниеФайла.Расширение);
		ВариантДампа = СборДамповСервер.СоздатьВариантДампа(ОписаниеФайла, ИмяZIPДампаПриЭкспорте, Ложь);
		РезультатАнализа = Перечисления.РезультатыАнализаДампов.НовыйВариантДампа;
		
	ИначеЕсли ВариантДампа.СохранятьВсеДампы
		ИЛИ ВариантДампа.Состояние = Перечисления.СостоянияВариантаДампа.Исправлен
		ИЛИ ВариантДампа.КоличествоДополнительноСохраняемыхДампов > 0
		Тогда
		
		ИмяZIPДампаПриЭкспорте = СборДамповСервер.ИмяZIPДампаПриЭкспорте(КаталогЭкспорта, ОписаниеФайла.ИмяФайлаБезРасширения, ОписаниеФайла.Расширение);
		ВариантДампаОбъект = ВариантДампа.ПолучитьОбъект();
		ВариантДампаОбъект.Состояние = Перечисления.СостоянияВариантаДампа.НеИсправлен;
		РезультатАнализа = Перечисления.РезультатыАнализаДампов.ДубльИсправленногоДампа;
		
		СтрокаДампов = ВариантДампаОбъект.СохраненныеДампы.Добавить();
		СтрокаДампов.ИмяФайла = ИмяZIPДампаПриЭкспорте;
		СтрокаДампов.ДатаОбнаружения = ТекущаяДата();
		
		Если ВариантДампаОбъект.КоличествоДополнительноСохраняемыхДампов > 0 Тогда
			ВариантДампаОбъект.КоличествоДополнительноСохраняемыхДампов = ВариантДампа.КоличествоДополнительноСохраняемыхДампов - 1;
		КонецЕсли;
		
		Попытка
			ВариантДампаОбъект.Записать();
		Исключение
			Комментарий = ПодробноеПредставлениеОшибки(ОписаниеОшибки());
			ЗаписьЖурналаРегистрации("Регистрация дампа", УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
			
			ВызватьИсключение Комментарий;
		КонецПопытки;
		
	Иначе
		РезультатАнализа = Перечисления.РезультатыАнализаДампов.ДубльНеисправленногоДампа;
		
	КонецЕсли;
	
	ЗначВозврата = Новый Структура;
	ЗначВозврата.Вставить("ВидДампа", РезультатАнализа);
	ЗначВозврата.Вставить("ВариантДампа", ВариантДампа);
	ЗначВозврата.Вставить("ПутьЭкспорта", ИмяZIPДампаПриЭкспорте);
	
	Возврат ЗначВозврата;
	
КонецФункции

// Выполняет поиск варианта дампа
// Параметры:
//  ОписаниеФайла - Структура, см. СборДамповКонстантыСервер.СтруктураИмениФайлаДампа
//
// Возвращаемое значение:
//  СправочникСсылка.ВариантыДампов
//
Функция НайтиВариантДампа(ОписаниеФайла) Экспорт
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Хеш", КипВнешнийКомпонент.ПолучитьХеш(Инструменты, ОписаниеФайла.ИмяДампа));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипыДампов.Ссылка КАК Ссылка,
	|	ТипыДампов.Процесс КАК Процесс,
	|	ТипыДампов.ВерсияПлатформы КАК ВерсияПлатформы,
	|	ТипыДампов.Смещение КАК Смещение
	|ИЗ
	|	Справочник.ВариантыДампов КАК ТипыДампов
	|ГДЕ
	|	ТипыДампов.ПометкаУдаления = ЛОЖЬ
	|	И ТипыДампов.Хеш = &Хеш";
	
	ВариантДампа = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Процесс = ОписаниеФайла.Процесс
				И Выборка.ВерсияПлатформы = ОписаниеФайла.ВерсияПлатформы
				И Выборка.Смещение = ОписаниеФайла.Смещение Тогда
			ВариантДампа = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВариантДампа;	
КонецФункции

// Создает вариант дампа по описанию файла
// Параметры:
//  ОписаниеФайла - Структура, см. СборДамповКонстантыСервер.СтруктураИмениФайлаДампа
//
// Возвращаемое значение:
//  СправочникСсылка.ВариантыДампов, созданный вариант дампа
//
Функция СоздатьВариантДампа(ОписаниеФайла, ИмяФайлаДампа = "", СохранятьВсеДампы = Ложь) Экспорт
	
	Если Не СохранятьВсеДампы И ОписаниеФайла.Смещение = "00000000" Тогда
        
        СохранятьВсеДампы = Истина;
        
    Иначе
        
        КоличествоДополнительноСохраняемыхДампов = Константы.КоличествоДамповНовогоВарианта.Получить() - 1;
               
	КонецЕсли;
	
	НачатьТранзакцию();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОбъектыБлокировок");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Объект", ОписаниеФайла.ИмяДампа);
	БлокировкаДанных.Заблокировать();
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	ДампОбъект = Справочники.ВариантыДампов.СоздатьЭлемент();
	ДампОбъект.Наименование = ОписаниеФайла.ИмяДампа;
	ДампОбъект.Процесс = ОписаниеФайла.Процесс;
	ДампОбъект.ВерсияПлатформы = ОписаниеФайла.ВерсияПлатформы;
	ДампОбъект.Смещение = ОписаниеФайла.Смещение;
	ДампОбъект.Состояние = Перечисления.СостоянияВариантаДампа.НеИсправлен;
	ДампОбъект.Хеш = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, ОписаниеФайла.ИмяДампа);
	ДампОбъект.СохранятьВсеДампы = СохранятьВсеДампы;
    ДампОбъект.КоличествоДополнительноСохраняемыхДампов = КоличествоДополнительноСохраняемыхДампов;
	
	СтрокаДампов = ДампОбъект.СохраненныеДампы.Добавить();
	СтрокаДампов.ИмяФайла = ИмяФайлаДампа;
	СтрокаДампов.ДатаОбнаружения = ТекущаяДата();
	
	ДампОбъект.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Возврат ДампОбъект.Ссылка;
	
КонецФункции

// Фиксирует факт наличия дампа 
// Параметры:
//  ИмяФайла, Период, ВариантДампа, ОбъектКонтроля, КаталогЭкспорта = "", ПолноеИмя = "", ИмяБезРасширения = "", РасположениеТЖ = "", ЧислоДампов = 0, РазмерФайла = 0) Экспорт
//
// Возвращаемое значение:
//  УникальныйИдентификатор - идентификатор дампа (для обмена с агентом ЦКК)
//
Функция ЗарегистрироватьФайлДампа(Параметры) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.Дампы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Параметры.Период;
	МенеджерЗаписи.ОбъектКонтроля = Параметры.ОбъектКонтроля;
	МенеджерЗаписи.ИмяФайлаДампа = Параметры.ИмяФайлаДампа;
	МенеджерЗаписи.ВариантДампа = Параметры.ВариантДампа;
	
	МенеджерЗаписи.ПолноеИмя = Параметры.ПолноеИмя;
	МенеджерЗаписи.ИмяБезРасширения = Параметры.ИмяБезРасширения;
	МенеджерЗаписи.КаталогЭкспорта = Параметры.КаталогЭкспорта;
	МенеджерЗаписи.РасположениеТЖ = Параметры.РасположениеТЖ;
	МенеджерЗаписи.КаталогВременныхФайлов = Параметры.КаталогВременныхФайлов;
	МенеджерЗаписи.РазмерФайла = Параметры.РазмерФайла;
	
	МенеджерЗаписи.НомерДампа = Параметры.НомерДампа;
	МенеджерЗаписи.СостояниеОбработкиДампа = Параметры.СостояниеОбработкиДампа;
	ИдентификаторДампа = Новый УникальныйИдентификатор;
	МенеджерЗаписи.ИдентификаторДампа = ИдентификаторДампа;
	Если Параметры.Свойство("ОписаниеОшибки") Тогда
		МенеджерЗаписи.ОписаниеОшибки = Параметры.ОписаниеОшибки;
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
	Возврат ИдентификаторДампа;
	
КонецФункции

//Процедура архивирования дампов, выполняется в фоне, всегда архивируется ОДИН ДАМП
Процедура АрхивироватьДампы() Экспорт
	ЕстьДампыДляАрхивирования = Истина;
	
	ДампыДляАрхивирования = ПолучитьДампыДляАрхивирования(); 
	
	Если ДампыДляАрхивирования.Количество() = 0 Тогда
		ЕстьДампыДляАрхивирования = Ложь;
	КонецЕсли;
		
	Пока ЕстьДампыДляАрхивирования Цикл
		Для Каждого ТекДамп Из ДампыДляАрхивирования Цикл
			ФайлДампа = Новый Файл(ТекДамп.ПолноеИмя);
			
			//Проверка наличия Файла
			Если НЕ ФайлДампа.Существует() Тогда
				ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ДампНеНайден;
				ТекДамп.ДатаЗавершенияОбработки = ТекущаяДата();
				РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
						
				Продолжить;
			КонецЕсли;
			
			//Проверка завершения формирования дампа - Начало
			Если НЕ ПустаяСтрока(ФайлДампа.ПолноеИмя) И КипВнешнийКомпонент.ФайлЗаблокирован(ФайлДампа.ПолноеИмя) Тогда
				Продолжить;
			КонецЕсли;
			
			РазмерФайлаДампа = ФайлДампа.Размер();
			Если РазмерФайлаДампа = 0 ИЛИ РазмерФайлаДампа <> ТекДамп.РазмерФайла Тогда
				Если РазмерФайлаДампа > 0 Тогда
					ТекДамп.РазмерФайла = РазмерФайлаДампа;
					РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
				Иначе
					Если ТекДамп.Период + 60 < ТекущаяДата() Тогда
						ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаСозданияДампа;
						ТекДамп.ДатаЗавершенияОбработки = ТекущаяДата();
						РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			//Проверка завершения формирования дампа - Завершение
			
			Если НЕ ЗначениеЗаполнено(ТекДамп.КаталогВременныхФайлов) Тогда
				ТекДамп.КаталогВременныхФайлов = КаталогВременныхФайлов();
			КонецЕсли;
			
			Если Прав(ТекДамп.КаталогВременныхФайлов, 1) <> "\" Тогда
				ТекДамп.КаталогВременныхФайлов = ТекДамп.КаталогВременныхФайлов + "\";
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(ТекДамп.КаталогЭкспорта) Тогда
				ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаЭкспорта;
				ТекДамп.ОписаниеОшибки = "Не заполнено значение каталога экспорта";
				РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
				Продолжить;
			КонецЕсли;
			
			//Переименовываем дампы WER
			ВидПроцесса = ТекДамп.ВариантДампа.Процесс;
			Если ВидПроцесса = Перечисления.Процессы.РабочийПроцессWER
				Или ВидПроцесса = Перечисления.Процессы.МенеджерWER
				Или ВидПроцесса = Перечисления.Процессы.АгентWER Тогда
				
				Если СтрЧислоВхождений(ФайлДампа.Имя, "wer_") = 0 Тогда
					НовоеИмя = ФайлДампа.Путь + "wer_" + ФайлДампа.Имя;
					РегистрыСведений.Дампы.ПереименоватьДамп(ТекДамп, НовоеИмя);
				КонецЕсли;
				
			КонецЕсли;
			
			//Архивируем файлы во временном каталоге - Начало
			ТекДамп.Обрабатывается = Истина;
			ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.Архивируется;
			ТекДамп.ДатаНачалаАрхивирования = ТекущаяДата();
			РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
			
			//Формируем имя архива
			ИмяФайлаАрхива = ТекДамп.КаталогВременныхФайлов + ФайлДампа.ИмяБезРасширения + ".zip";
			
			//готовим файлы дампов для архивирования, отдельный массив, т.к. файлы дампов будем удалять после архивирования
			ИменаДамповДляЗапаковки = Новый Массив;
			
			//готовим файлы логов для архивирования, отдельный массив, т.к. файлы логов будет удалять платформа
			ИменаЛоговДляЗапаковки = Новый Массив;
			
			ДампСуществует = НЕ ПустаяСтрока(ФайлДампа.ПолноеИмя) И ТекДамп.ВариантДампа <> Справочники.ВариантыДампов.ДляЗавершенияБезОбразованияДампа;
			
			//добавляем для архивирования сам файл дампа
			Если ДампСуществует Тогда
				ИменаДамповДляЗапаковки.Добавить(Новый Структура("ПолноеИмя, ИмяФайла", ФайлДампа.ПолноеИмя, ФайлДампа.Имя));
			КонецЕсли;
			
			//добавляем для архивирования файлы технологического журнала
			Если НЕ ЗначениеЗаполнено(ТекДамп.РасположениеТЖ) Тогда
				Логи = НайтиФайлы(ТекДамп.РасположениеТЖ, "*.log");
				Для Каждого Лог Из Логи Цикл
					ИменаЛоговДляЗапаковки.Добавить(Новый Структура("ПолноеИмя, ИмяФайла", Лог.ПолноеИмя, Лог.Имя));
				КонецЦикла;
			КонецЕсли;
			
			АрхивДампа = Новый ЗаписьZipФайла(ИмяФайлаАрхива);
			
			Для Каждого ТекФайл Из ИменаДамповДляЗапаковки Цикл
				АрхивДампа.Добавить(ТекФайл.ПолноеИмя);
			КонецЦикла;
			
			Для Каждого ТекФайл Из ИменаЛоговДляЗапаковки Цикл
				АрхивДампа.Добавить(ТекФайл.ПолноеИмя);
			КонецЦикла;
						
			Попытка
				ФайлАрхива = Новый Файл(ИмяФайлаАрхива);
				КаталогАрхива = Новый Файл(ФайлАрхива.Путь);
				Если КаталогАрхива.Существует() Тогда
					АрхивДампа.Записать();
					
					АрхивДампаЧтение = Новый ЧтениеZipФайла();
					АрхивДампаЧтение.Открыть(ИмяФайлаАрхива);
					АрхивДампаЧтение.Закрыть();
					
					ТекДамп.ДатаЗавершенияАрхивирования = ТекущаяДата();
					ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗавершеноАрхивирование;
					ТекДамп.ИмяФайлаВременногоАрхива = ИмяФайлаАрхива;
					РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
				Иначе
					ТекДамп.Обрабатывается = Ложь;
					ТекДамп.КоличествоПовторов = ТекДамп.КоличествоПовторов + 1;
					ТекДамп.ОписаниеОшибки = "Не найден каталог архивирования """ + КаталогАрхива.ПолноеИмя + """.";
					Если ТекДамп.КоличествоПовторов < 5 Тогда
						ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаПопыткиАрхивирования;
						ТекДамп.ИмяФайлаВременногоАрхива = ИмяФайлаАрхива;
						ТекДамп.ДатаСледующегоПовтора = ТекущаяДата() + 600;
					Иначе
						ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаАрхивирования;
						ТекДамп.ДатаЗавершенияОбработки = ТекущаяДата();
						ТекДамп.ИмяФайлаВременногоАрхива = ИмяФайлаАрхива;
					КонецЕсли;
					РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
				
					Продолжить;
				КонецЕсли;
			Исключение
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + "
				|Проверьте наличие свободного места на """ + ФайлАрхива.Путь + """
				|или права доступа!";
				
				ТекДамп.Обрабатывается = Ложь;
				ТекДамп.КоличествоПовторов = ТекДамп.КоличествоПовторов + 1;
				ТекДамп.ОписаниеОшибки = ОписаниеОшибки;
				Если ТекДамп.КоличествоПовторов < 5 Тогда
					ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаПопыткиАрхивирования;
					ТекДамп.ИмяФайлаВременногоАрхива = ИмяФайлаАрхива;
					ТекДамп.ДатаСледующегоПовтора = ТекущаяДата() + 600;
				Иначе
					ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаАрхивирования;
					ТекДамп.ДатаЗавершенияОбработки = ТекущаяДата();
					ТекДамп.ИмяФайлаВременногоАрхива = ИмяФайлаАрхива;
				КонецЕсли;
				РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
				
				Продолжить;
			КонецПопытки;
			//Архивируем файлы во временном каталоге - Завершение
			
			//Удаляем файлы дампов - Начало
			ОписаниеОшибки = "";
			Для Каждого ТекФайл Из ИменаДамповДляЗапаковки Цикл
				Попытка
					УдалитьФайлы(ТекФайл.ПолноеИмя);
				Исключение
					ОписаниеОшибки = ОписаниеОшибки + "Ошибка удаления дампа """ + ТекФайл.ПолноеИмя + """. ";
				КонецПопытки;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОписаниеОшибки = Лев(ОписаниеОшибки, СтрДлина(ОписаниеОшибки) - 1);
				
				ТекДамп.Обрабатывается = Ложь;
				ТекДамп.ОписаниеОшибки = ОписаниеОшибки;
				ТекДамп.ДатаЗавершенияОбработки = ТекущаяДата();
				ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаУдаленияДампа;
				
				РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
				Продолжить;
			Иначе
				ТекДамп.Обрабатывается = Ложь;
				ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗавершеноАрхивированиеДампУдален;
				РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
			КонецЕсли;
			//Удаляем файлы дампов - Завершение
		КонецЦикла;
		
		КипВнешнийКомпонент.Пауза(1000);
		ДампыДляАрхивирования = ПолучитьДампыДляАрхивирования();
		Если ДампыДляАрхивирования.Количество() = 0 Тогда
			ЕстьДампыДляАрхивирования = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Процедура копирования архивированного дампа, выполняется в фоне, всегда копируется ОДИН ДАМП
Процедура КопироватьАрхивированныеДампы() Экспорт
	ЕстьАрхивыДляКопирования = Истина;
	
	АрхивыДляКопирования = ПолучитьДампыДляЭкспорта();
	Если АрхивыДляКопирования.Количество() = 0 Тогда
		ЕстьАрхивыДляКопирования = Ложь;
	КонецЕсли;
		
	Пока ЕстьАрхивыДляКопирования Цикл
		Для Каждого ТекАрхив Из АрхивыДляКопирования Цикл
			ФайлАрхива = Новый Файл(ТекАрхив.ИмяФайлаВременногоАрхива);
			Если ФайлАрхива.Существует() Тогда
				//Копируем архив дампа в каталог экспорта - Начало
				ТекАрхив.Обрабатывается = Истина;
				Если ТекАрхив.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗавершеноАрхивированиеДампУдален Тогда
					ТекАрхив.ДатаСледующегоПовтора = Дата(1, 1, 1);
					ТекАрхив.КоличествоПовторов = 0;
				КонецЕсли;
				ТекАрхив.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.КопируетсяАрхив;
				ТекАрхив.ДатаНачалаЭкспорта = ТекущаяДата();
				РегистрыСведений.Дампы.ИзменитьЗапись(ТекАрхив);
				
				КаталогЭкспорта = ТекАрхив.КаталогЭкспорта;
				Если ЗначениеЗаполнено(КаталогЭкспорта) Тогда
					Если СтрНайти(НРег(КаталогЭкспорта), "ftp") > 0 Тогда
						Разделитель = "/";
					Иначе
						Разделитель = "\";
					КонецЕсли;
					Если Прав(КаталогЭкспорта, 1) <> Разделитель Тогда
						КаталогЭкспорта = КаталогЭкспорта + Разделитель;
					КонецЕсли;
					
					Попытка
						КопироватьФайл(ФайлАрхива.ПолноеИмя, КаталогЭкспорта + ФайлАрхива.Имя);
					Исключение
						ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						Данные = Строка(ФайлАрхива.ПолноеИмя) + " - " + Строка(КаталогЭкспорта + ФайлАрхива.Имя);
						ЗаписьЖурналаРегистрации("Копирование архива дампа", УровеньЖурналаРегистрации.Ошибка,,Данные, ОписаниеОшибки);
						
						ТекАрхив.Обрабатывается = Ложь;
						ТекАрхив.КоличествоПовторов = ТекАрхив.КоличествоПовторов + 1;
						ТекАрхив.ОписаниеОшибки = ОписаниеОшибки;
						Если ТекАрхив.КоличествоПовторов < 5 Тогда
							ТекАрхив.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаПопыткиЭкспорта;
							ТекАрхив.ДатаСледующегоПовтора = ТекущаяДата() + 600;
						Иначе
							ТекАрхив.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаЭкспорта;
							ТекАрхив.ДатаЗавершенияОбработки = ТекущаяДата();
						КонецЕсли;
						РегистрыСведений.Дампы.ИзменитьЗапись(ТекАрхив);
						Продолжить;
					КонецПопытки;
				Иначе
					ТекАрхив.Обрабатывается = Ложь;
					ТекАрхив.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаЭкспорта;
					ТекАрхив.ДатаЗавершенияОбработки = ТекущаяДата();
					ТекАрхив.ОписаниеОшибки = "Не указан каталог экспорта.";
					РегистрыСведений.Дампы.ИзменитьЗапись(ТекАрхив);
					
					Продолжить;
				КонецЕсли;
				//Копируем архив дампа в каталог экспорта - Завершение
				
				//Проверяем размер нового архива со старым
				Если СтрНайти(НРег(КаталогЭкспорта), "ftp") > 0 Тогда
					ЭтоФТП = Истина;
				Иначе
					ЭтоФТП = Ложь;
				КонецЕсли;
				Если НЕ ЭтоФТП Тогда
					ФайлАрхиваНовый = Новый Файл(КаталогЭкспорта + ФайлАрхива.Имя);
				Иначе
					СтруктураАдреса = ОбщийКлиентСервер.СтруктураURI(КаталогЭкспорта);
					Если СтруктураАдреса.Порт = Неопределено Тогда
						СтруктураАдреса.Порт = 21;
					КонецЕсли;
					фтпСоединение = Новый FTPСоединение(СтруктураАдреса.ИмяСервера,СтруктураАдреса.Порт,СтруктураАдреса.Логин,СтруктураАдреса.Пароль,,Истина);
					МассивFTPФайл = фтпСоединение.НайтиФайлы(СтруктураАдреса.ПутьНаСервере, ФайлАрхива.Имя);
					Если МассивFTPФайл.Количество() = 1 Тогда
						ФайлАрхиваНовый = МассивFTPФайл[0];
					Иначе
						ТекАрхив.Обрабатывается = Ложь;
						ТекАрхив.ОписаниеОшибки = "После копирования архива не нашел копию архива.";
						Если ТекАрхив.КоличествоПовторов < 5 Тогда
							ТекАрхив.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаПопыткиЭкспорта;
							ТекАрхив.ДатаСледующегоПовтора = ТекущаяДата() + 600;
						Иначе
							ТекАрхив.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаЭкспорта;
							ТекАрхив.ДатаЗавершенияОбработки = ТекущаяДата();
						КонецЕсли;
						
						РегистрыСведений.Дампы.ИзменитьЗапись(ТекАрхив);
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ФайлАрхиваНовый.Размер() <> ФайлАрхива.Размер() Тогда
					ТекАрхив.Обрабатывается = Ложь;
					ТекАрхив.ОписаниеОшибки = "После копирования архива размеры файлов не совпадают.";
					Если ТекАрхив.КоличествоПовторов < 5 Тогда
						ТекАрхив.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаПопыткиЭкспорта;
						ТекАрхив.ДатаСледующегоПовтора = ТекущаяДата() + 600;
					Иначе
						ТекАрхив.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаЭкспорта;
						ТекАрхив.ДатаЗавершенияОбработки = ТекущаяДата();
					КонецЕсли;
					
					РегистрыСведений.Дампы.ИзменитьЗапись(ТекАрхив);
					
					Продолжить;
				КонецЕсли;
				
				//Удаляем файл временного архива - Начало
				Попытка
					УдалитьФайлы(ФайлАрхива.ПолноеИмя);
					ТекАрхив.Обрабатывается = Ложь;
					ТекАрхив.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ДампОбработанУспешно;
					ТекАрхив.ДатаЗавершенияОбработки = ТекущаяДата();
					ТекАрхив.ДатаЗавершенияЭкспорта = ТекАрхив.ДатаЗавершенияОбработки;
					РегистрыСведений.Дампы.ИзменитьЗапись(ТекАрхив);
				Исключение
					ОписаниеОшибки = "Ошибка удаления архива дампа """ + ФайлАрхива + """. ";
					ТекАрхив.Обрабатывается = Ложь;
					ТекАрхив.ДатаЗавершенияОбработки = ТекущаяДата();
					ТекАрхив.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаЭкспорта;
					ТекАрхив.ОписаниеОшибки = ОписаниеОшибки;
					РегистрыСведений.Дампы.ИзменитьЗапись(ТекАрхив);
				КонецПопытки;
				//Удаляем файл временного архива - Завершение				
			Иначе
				ТекАрхив.Обрабатывается = Ложь;
				ТекАрхив.ДатаЗавершенияОбработки = ТекущаяДата();
				ТекАрхив.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаЭкспорта;
				ТекАрхив.ОписаниеОшибки = "Не найден архив дампа """ + ТекАрхив.ИмяФайлаВременногоАрхива + """.";
				РегистрыСведений.Дампы.ИзменитьЗапись(ТекАрхив);
				
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		КипВнешнийКомпонент.Пауза(1000);
		АрхивыДляКопирования = ПолучитьДампыДляЭкспорта();
		Если АрхивыДляКопирования.Количество() = 0 Тогда
			ЕстьАрхивыДляКопирования = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьДублиДампов() Экспорт
	ЕстьДублиДляУдаления = Истина;
	
	ФайлыОшибкаСоздания = РегистрыСведений.Дампы.ВыбратьПоСостояниюОбработки(Перечисления.СостоянияОбработкиДампа.ОшибкаСозданияДампа);
	Для Каждого ТекДампОшибка Из ФайлыОшибкаСоздания Цикл
		Если НЕ ЗначениеЗаполнено(ТекДампОшибка.ДатаЗавершенияОбработки) Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлДампаОшибка = Новый Файл(ТекДампОшибка.ПолноеИмя);
		
		//Проверка наличия Файла
		Если НЕ ФайлДампаОшибка.Существует() Тогда
			ТекДампОшибка.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ДампНеНайден;
			ТекДампОшибка.ДатаЗавершенияОбработки = ТекущаяДата();
			РегистрыСведений.Дампы.ИзменитьЗапись(ТекДампОшибка);
			
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ФайлДампаОшибка.ПолноеИмя) И КипВнешнийКомпонент.ФайлЗаблокирован(ФайлДампаОшибка.ПолноеИмя) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеОшибки = "";
		Попытка
			УдалитьФайлы(ФайлДампаОшибка.ПолноеИмя);
		Исключение
			ОписаниеОшибки = "Ошибка удаления дампа """ + ФайлДампаОшибка.ПолноеИмя + """. ";
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ТекДампОшибка.ОписаниеОшибки = ОписаниеОшибки;	
			ТекДампОшибка.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаУдаленияДампа;
			
			РегистрыСведений.Дампы.ИзменитьЗапись(ТекДампОшибка);
			Продолжить;
		Иначе
			ТекДампОшибка.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаСозданияДампУдален;
			ТекДампОшибка.ДатаЗавершенияОбработки = ТекущаяДата();
			РегистрыСведений.Дампы.ИзменитьЗапись(ТекДампОшибка);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	СостоянияОбработки = Новый Массив;
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампаДляУдаления);
	ДублиДляУдаления = РегистрыСведений.Дампы.ВыбратьПоСостояниямОбработки(СостоянияОбработки);
	Если ДублиДляУдаления.Количество() = 0 Тогда
		ЕстьДублиДляУдаления = Ложь;
	КонецЕсли;
		
	Пока ЕстьДублиДляУдаления Цикл
		Для Каждого ТекДамп Из ДублиДляУдаления Цикл
			ФайлДампа = Новый Файл(ТекДамп.ПолноеИмя);
			
			Если ФайлДампа.Существует() Тогда
				Если НЕ ПустаяСтрока(ФайлДампа.ПолноеИмя) И КипВнешнийКомпонент.ФайлЗаблокирован(ФайлДампа.ПолноеИмя) Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ДампНеНайден;
				ТекДамп.ДатаЗавершенияОбработки = ТекущаяДата();
				РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
				Продолжить;
			КонецЕсли;
			
			РазмерФайлаДампа = ФайлДампа.Размер();
			Если РазмерФайлаДампа = 0 ИЛИ РазмерФайлаДампа <> ТекДамп.РазмерФайла Тогда
				Если РазмерФайлаДампа > 0 Тогда
					ТекДамп.РазмерФайла = РазмерФайлаДампа;
					РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
				Иначе
					Если ТекДамп.Период + 60 < ТекущаяДата() Тогда
						//Удаляем файлы дампов - Начало
						ОписаниеОшибки = "";
						Попытка
							УдалитьФайлы(ФайлДампа.ПолноеИмя);
						Исключение
							ОписаниеОшибки = "Ошибка удаления дампа """ + ФайлДампа.ПолноеИмя + """. ";
						КонецПопытки;
						
						Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
							ТекДамп.ОписаниеОшибки = ОписаниеОшибки;	
							ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаУдаленияДампа;
							
							РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
							Продолжить;
						Иначе
							ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаСозданияДампУдален;
							ТекДамп.ДатаЗавершенияОбработки = ТекущаяДата();
							РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
						КонецЕсли;
						//Удаляем файлы дампов - Завершение
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			//Удаляем файлы дампов - Начало
			ОписаниеОшибки = "";
			Попытка
				УдалитьФайлы(ФайлДампа.ПолноеИмя);
			Исключение
				ОписаниеОшибки = "Ошибка удаления дампа """ + ФайлДампа.ПолноеИмя + """. ";
			КонецПопытки;
				
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ТекДамп.ОписаниеОшибки = ОписаниеОшибки;	
				ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаУдаленияДампа;
				
				РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
				Продолжить;
			Иначе
				ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ДампУдаленБезОбработки;
				ТекДамп.ДатаЗавершенияОбработки = ТекущаяДата();
				РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
			КонецЕсли;
			//Удаляем файлы дампов - Завершение
		КонецЦикла;
		
		КипВнешнийКомпонент.Пауза(1000);
		ДублиДляУдаления = РегистрыСведений.Дампы.ВыбратьПоСостояниюОбработки(Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампаДляУдаления);
		Если ДублиДляУдаления.Количество() = 0 Тогда
			ЕстьДублиДляУдаления = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура регламентных заданий. Удаляет дампы и, если нужно, то сохраняет в отдельную папку
Процедура УдалениеДампов() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
	Сообщение = "Обработка дампов. Старт";
	Отладка.Информация(Сообщение);
	
	ПроверитьЗавершениеАрхивирования("47b88f79-3214-4870-aa0e-a6e3d395ed90");
	ПроверитьЗавершениеКопированияАрхива("b385ca72-0403-41bc-9c90-3a45073c0daa");
	
	ВыполнитьПроцедуруВФоне("47b88f79-3214-4870-aa0e-a6e3d395ed90", "СборДамповСервер.АрхивироватьДампы", "Архивирование дампов");
	ВыполнитьПроцедуруВФоне("b385ca72-0403-41bc-9c90-3a45073c0daa", "СборДамповСервер.КопироватьАрхивированныеДампы", "Копирование архивированных дампов");
	ВыполнитьПроцедуруВФоне("1bbf94e1-feb7-408e-986f-8e8b2a1b973c", "СборДамповСервер.УдалитьДублиДампов", "Удаление дублей дампов");
    
КонецПроцедуры

Функция ДампНеНайденВСтроку() Экспорт
	Возврат "<Дамп не найден>";
КонецФункции

Функция ИмяZIPДампаПриЭкспорте(КаталогЭкспорта, ИмяФайлаБезРасширения, Расширение) Экспорт
	
	Если Расширение = "core" Тогда
		ТипАрхива = ".core.zip";
	Иначе
		ТипАрхива = ".zip";
	КонецЕсли;
	
	Если Прав(КаталогЭкспорта, 1) = "\" Тогда
		ПолноеИмяФайла =
			КаталогЭкспорта +
			ИмяФайлаБезРасширения + ТипАрхива;
	Иначе
		ПолноеИмяФайла =
			КаталогЭкспорта + 
			ОбщийКлиентСервер.РазделительКаталоговОпределитьПоКаталогу(КаталогЭкспорта) + 
			ИмяФайлаБезРасширения + ТипАрхива;
	КонецЕсли;
		
	Возврат ПолноеИмяФайла;
	
КонецФункции

// Разбирает имя файла дампа на составляющие
//
// Параметры:
//  Файл - Файл
//
// Возвращаемое значение:
//  Структура - см. см. СборДамповКонстантыСервер.СтруктураИмениФайлаДампа
//
Функция РазобратьИмяФайлаДампа(Файл) Экспорт
	
	СтруктураИмениФайла = СборДамповКонстантыСервер.СтруктураИмениФайлаДампа();
	СтруктураИмениФайла.ПолноеИмя = Файл.ПолноеИмя;
	Расширение = Прав(Файл.Расширение, СтрДлина(Файл.Расширение)-1);
	ЗаполнитьСтруктуруИмениФайлаДампа(СтруктураИмениФайла, Файл.ИмяБезРасширения, Расширение);
	
	Возврат СтруктураИмениФайла;
	
КонецФункции

// Разбирает имя файла дампа на составляющие
//
// Параметры:
//  Файл - Файл
//
// Возвращаемое значение:
//  Структура - см. см. СборДамповКонстантыСервер.СтруктураИмениФайлаДампа
//
Функция РазобратьИмяФайлаДампаПоИмени(ПолноеИмя, ИмяБезРасширения = "", Расширение = "") Экспорт
	
	СтруктураИмениФайла = СборДамповКонстантыСервер.СтруктураИмениФайлаДампа();
	СтруктураИмениФайла.ПолноеИмя = ПолноеИмя;
	Если ПустаяСтрока(ИмяБезРасширения) Тогда
		// попытаемся отбросить расширение
		ЧислоТочек = СтрЧислоВхождений(ПолноеИмя, ".");
		Расширение = ПолноеИмя;
		Для НомерВхождения = 0 По ЧислоТочек - 1 Цикл
			НомерТочки = СтрНайти(Расширение, ".");
			
			Расширение = Прав(Расширение, СтрДлина(Расширение) - НомерТочки);
		КонецЦикла;
		ИмяБезРасширения = Лев(ПолноеИмя, СтрДлина(ПолноеИмя) - 1 - СтрДлина(Расширение));
		
	ИначеЕсли ПустаяСтрока(Расширение) Тогда
		ЧислоСимволовВРасширении = СтрДлина(ПолноеИмя) - СтрДлина(ИмяБезРасширения) - 1;
		Расширение = Прав(ПолноеИмя, ЧислоСимволовВРасширении);
		
	КонецЕсли;
	
	ЗаполнитьСтруктуруИмениФайлаДампа(СтруктураИмениФайла, ИмяБезРасширения, Расширение);
	
	Возврат СтруктураИмениФайла;
	
КонецФункции

// Проверяет обрабатывался данный файл дампа
//
// Параметры:
//  ИмяФайлаДампа - Строка, имя файла проверяемого дампа
//
// Возвращаемое значение:
//  Булево - 
//  	Истина, дамп уже был в обработке
//  	Ложь, дамп необходимо обработать
//
Функция ДампБылВОбработке(ИмяФайлаДампа, ОбъектКонтроля) Экспорт
	Дампы = ВыборкаДампов(ИмяФайлаДампа, ОбъектКонтроля);
	Возврат Дампы.Следующий() И НЕ Дампы.ВОчередиНаКопирование;
КонецФункции
	
Функция ВыборкаДампов(ИмяФайлаДампа, ОбъектКонтроля) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяФайлаДампа", ИмяФайлаДампа);
	Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектКонтроля);
	
	СостоянияОбработки = Новый Массив;
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампа);
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампаДляУдаления);
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ОшибкаСозданияДампа);
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ОшибкаСозданияДампУдален);
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.Архивируется);
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ЗавершеноАрхивирование);
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ОшибкаАрхивирования);
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ОшибкаПопыткиАрхивирования);
	Запрос.УстановитьПараметр("СостоянияОбработки", СостоянияОбработки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Дампы.Период,
	|	Дампы.ВариантДампа,
	|	Дампы.ОбъектКонтроля,
	|	Дампы.ИмяФайлаДампа,
	|	Дампы.НомерДампа,
	|	Дампы.Обрабатывается,
	|	Дампы.ВОчередиНаУдаление,
	|	Дампы.КаталогЭкспорта,
	|	Дампы.ИмяБезРасширения,
	|	Дампы.ПолноеИмя,
	|	Дампы.КаталогВременныхФайлов
	|ИЗ
	|	РегистрСведений.Дампы КАК Дампы
	|ГДЕ
	|	Дампы.ИмяФайлаДампа = &ИмяФайлаДампа
	|	И Дампы.ОбъектКонтроля = &ОбъектКонтроля
	|	И Дампы.СостояниеОбработкиДампа В (&СостоянияОбработки)
	|";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаДамповЗавершениеОшибкой(ИмяФайлаДампа, ОбъектКонтроля) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяФайлаДампа", ИмяФайлаДампа);
	Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектКонтроля);
	Запрос.УстановитьПараметр("ОшибкаЭкспорта", Перечисления.СостоянияОбработкиДампа.ОшибкаЭкспорта);
	Запрос.УстановитьПараметр("ОшибкаУдаленияДампа", Перечисления.СостоянияОбработкиДампа.ОшибкаУдаленияДампа);
	Запрос.УстановитьПараметр("ОшибкаАрхивирования", Перечисления.СостоянияОбработкиДампа.ОшибкаАрхивирования);
	Запрос.УстановитьПараметр("ОшибкаСозданияДампа", Перечисления.СостоянияОбработкиДампа.ОшибкаСозданияДампа);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Дампы.Период,
	|	Дампы.ВариантДампа,
	|	Дампы.ОбъектКонтроля,
	|	Дампы.ИмяФайлаДампа,
	|	Дампы.НомерДампа,
	|	Дампы.Обрабатывается,
	|	Дампы.ВОчередиНаУдаление,
	|	Дампы.КаталогЭкспорта,
	|	Дампы.ИмяБезРасширения,
	|	Дампы.ПолноеИмя,
	|	Дампы.КаталогВременныхФайлов,
	|	Дампы.СостояниеОбработкиДампа,
	|	Дампы.ОписаниеОшибки
	|ИЗ
	|	РегистрСведений.Дампы КАК Дампы
	|ГДЕ
	|	Дампы.ИмяФайлаДампа = &ИмяФайлаДампа
	|	И Дампы.ОбъектКонтроля = &ОбъектКонтроля
	|	И (	Дампы.СостояниеОбработкиДампа = &ОшибкаЭкспорта
	|		ИЛИ Дампы.СостояниеОбработкиДампа = &ОшибкаУдаленияДампа
	|		ИЛИ Дампы.СостояниеОбработкиДампа = &ОшибкаАрхивирования
	|		ИЛИ Дампы.СостояниеОбработкиДампа = &ОшибкаСозданияДампа
	|	)
	|";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВыборкаДамповДляОбработки(Количество) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Дампы.Период,
	|	Дампы.ВариантДампа,
	|	Дампы.ОбъектКонтроля,
	|	Дампы.ИмяФайлаДампа,
	|	Дампы.НомерДампа,
	|	Дампы.ПолноеИмя,
	|   Дампы.ИмяБезРасширения,
	|	Дампы.Обрабатывается,
	|	Дампы.ВОчередиНаУдаление,
	|	Дампы.КаталогЭкспорта,
	|	Дампы.РасположениеТЖ,
	|	Дампы.КаталогВременныхФайлов
	|ИЗ
	|	РегистрСведений.Дампы КАК Дампы
	|ГДЕ
	|	Дампы.ВОчередиНаУдаление = Истина И Дампы.Обрабатывается = Ложь";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Выполняет выборка всех вариантов дампов, найденных в на данном сервере
// Параметры:
//  Сервер - Справочник.ОбъектыКонтроля
//
// Возвращаемое значение:
// 	 ВыборкаИзРезультатаЗапроса 
//
Функция ВсеНеИсправленныеДампыСервера(Сервер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыДампов.Состояние КАК Состояние,
	|	ВариантыДампов.Ссылка КАК Ссылка
	|ИЗ
	|Справочник.ВариантыДампов КАК ВариантыДампов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Дампы КАК Дампы
	|ПО ВариантыДампов.Ссылка = Дампы.ВариантДампа
	|ГДЕ
	|	Дампы.ОбъектКонтроля = &ОбъектКонтроля И Состояние = &НеИсправлен";
	Запрос.УстановитьПараметр("ОбъектКонтроля", Сервер);
	Запрос.УстановитьПараметр("НеИсправлен", Перечисления.СостоянияВариантаДампа.НеИсправлен);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

Процедура ОткрытьИнцидентКаталогИсточникДампов(АгентКИП, Инцидент) Экспорт
    ОткрытьИнцидент(АгентКИП, Инцидент);
КонецПроцедуры

Процедура ОткрытьИнцидентКаталогАрхива(РабочийСервер, Инцидент) Экспорт
    
    КонтрольУстойчивости = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(РабочийСервер, Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы());
    НавигационнаяСсылка = НавигационнаяСсылкаКонтрольУстойчивости(КонтрольУстойчивости);
    
    ТипИнцидента = Справочники.ТипыИнцидентов.ТипИнцидента(Инцидент["type"], Перечисления.УровниИнцидентов.Ошибка);
    ИнцидентСсылка =  Справочники.Инциденты.Инцидент(КонтрольУстойчивости, Инцидент);
    ДатаОткрытия = Справочники.Инциденты.ДатаИнцидента(Инцидент);
    
    Сообщение = Инцидент["descr"] + Символы.ПС + "Проверьте доступность каталога для агента КИП или" + Символы.ПС +
    "перейдите по ссылке в поле ""Источник"" и установите верный каталог экспорта дампов.";
    
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,,Сообщение,1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка,ДатаОткрытия);
    
КонецПроцедуры

Процедура ОткрытьИнцидентОдинИТотЖеКаталог(РабочийСервер, Инцидент) Экспорт
    
    КонтрольУстойчивости = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(РабочийСервер, Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы());
    НавигационнаяСсылка = НавигационнаяСсылкаКонтрольУстойчивости(КонтрольУстойчивости);
    
    ТипИнцидента = Справочники.ТипыИнцидентов.ТипИнцидента(Инцидент["type"], Перечисления.УровниИнцидентов.Ошибка);
    ИнцидентСсылка =  Справочники.Инциденты.Инцидент(КонтрольУстойчивости, Инцидент);
    ДатаОткрытия = Справочники.Инциденты.ДатаИнцидента(Инцидент);
    
    Сообщение = Инцидент["descr"] + Символы.ПС + 
    "Перейдите по ссылке в поле ""Источник"" и установите верный каталог экспорта дампов.";
    
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,,Сообщение,1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка,ДатаОткрытия);
    
КонецПроцедуры

Процедура ОткрытьИнцидентЗаписьВКаталог(АгентКИП, Инцидент) Экспорт
    
    Инцидент["descr"] = Инцидент["descr"] + Символы.ПС + "Настройте права записи в данный каталог пользователю, под которым запущен агент КИП.";
    ОткрытьИнцидент(АгентКИП, Инцидент);
    
КонецПроцедуры

Процедура ЗакрытьИнцидентКаталогИсточникДампов(АгентКИП, Инцидент) Экспорт
    ЗакрытьИнцидент(АгентКИП, Инцидент);
КонецПроцедуры

Процедура ЗакрытьИнцидентЗаписьВКаталог(АгентКИП, Инцидент) Экспорт
    ЗакрытьИнцидент(АгентКИП, Инцидент);
КонецПроцедуры

Процедура ЗакрытьИнцидентКаталогАрхива(РабочийСервер, Инцидент) Экспорт
    
    КонтрольУстойчивости = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(РабочийСервер, Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы());
    НавигационнаяСсылка = НавигационнаяСсылкаКонтрольУстойчивости(КонтрольУстойчивости);
    
    ТипИнцидента = Справочники.ТипыИнцидентов.ТипИнцидента(Инцидент["type"], Перечисления.УровниИнцидентов.Ошибка);
    ИнцидентСсылка =  Справочники.Инциденты.Инцидент(КонтрольУстойчивости, Инцидент);
    ДатаЗакрытия = Справочники.Инциденты.ДатаИнцидента(Инцидент);
    
    Сообщение = Инцидент["descr"];
    
    ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, ИнцидентСсылка, Истина, Сообщение, ДатаЗакрытия);
    
КонецПроцедуры

Процедура ЗакрытьИнцидентОдинИТотЖеКаталог(РабочийСервер, Инцидент) Экспорт
    
    КонтрольУстойчивости = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(РабочийСервер, Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы());
    НавигационнаяСсылка = НавигационнаяСсылкаКонтрольУстойчивости(КонтрольУстойчивости);
    
    ТипИнцидента = Справочники.ТипыИнцидентов.ТипИнцидента(Инцидент["type"], Перечисления.УровниИнцидентов.Ошибка);
    ИнцидентСсылка =  Справочники.Инциденты.Инцидент(КонтрольУстойчивости, Инцидент);
    ДатаЗакрытия = Справочники.Инциденты.ДатаИнцидента(Инцидент);
    
    Сообщение = Инцидент["descr"];
    
    ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, ИнцидентСсылка, Истина, Сообщение, ДатаЗакрытия);
    
КонецПроцедуры

Процедура ОткрытьИнцидентНеНайденРабочийСервер(АгентКИП, Сообщение) Экспорт
    
    Инцидент = Новый Соответствие;
    Инцидент.Вставить("descr", Сообщение);
    Инцидент.Вставить("type", "НеНайденРабочийСервер");
    Инцидент.Вставить("date", Формат(ТекущаяУниверсальнаяДата(), "ДФ='yyyyMMddHHmmss'"));
    
    ОткрытьИнцидент(АгентКИП, Инцидент);
    
КонецПроцедуры

Процедура ЗакрытьИнцидентНеНайденРабочийСервер(АгентКИП, Сообщение = Неопределено) Экспорт
    
    Инцидент = Новый Соответствие;
    Если Сообщение <> Неопределено Тогда
        Инцидент.Вставить("descr", Сообщение);
    КонецЕсли;
    Инцидент.Вставить("type", "НеНайденРабочийСервер");
    Инцидент.Вставить("date", Формат(ТекущаяУниверсальнаяДата(), "ДФ='yyyyMMddHHmmss'"));
    
    ЗакрытьИнцидент(АгентКИП, Инцидент);
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьПроцедуруВФоне(Ключ, Метод, Наименование)
	Отбор = Новый Структура("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФЗ.Количество() = 0 Тогда
		ФоновыеЗадания.Выполнить(Метод,,Ключ, Наименование);
	Иначе
		Если ФЗ[0].Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			ФоновыеЗадания.Выполнить(Метод,,Ключ, Наименование);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗавершениеАрхивирования(Ключ)
	Отбор = Новый Структура("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФЗ.Количество() = 0 Тогда
		СостоянияОбработки = Новый Массив;
		СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.Архивируется);
		ДампыАрхивируется = РегистрыСведений.Дампы.ВыбратьПоСостояниямОбработки(СостоянияОбработки);
		
		Для Каждого ТекДамп Из ДампыАрхивируется Цикл
			ТекДамп.Обрабатывается = Ложь;
			ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампа;
			РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
		КонецЦикла;
	
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗавершениеКопированияАрхива(Ключ)
	Отбор = Новый Структура("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФЗ.Количество() = 0 Тогда
		СостоянияОбработки = Новый Массив;
		СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.КопируетсяАрхив);
		ДампыАрхивируется = РегистрыСведений.Дампы.ВыбратьПоСостояниямОбработки(СостоянияОбработки);
		
		Для Каждого ТекДамп Из ДампыАрхивируется Цикл
			ТекДамп.Обрабатывается = Ложь;
			ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗавершеноАрхивированиеДампУдален;
			РегистрыСведений.Дампы.ИзменитьЗапись(ТекДамп);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру описывающую файл дампа
//
// Параметры:
//  Структура - Структура, которую надо заполнить
//  ИмяФайл - Строка, имя файла баз расширения
//
Процедура ЗаполнитьСтруктуруИмениФайлаДампа(Структура, Знач ИмяФайла, Знач Расширение)
	
	//Имя файла
	Структура.ИмяФайлаБезРасширения = ИмяФайла;
	
	//Расширение
	Структура.Расширение = Расширение;
    
    ИмяФайлаМассив = СтрРазделить(ИмяФайла, "_");
    
        Если ИмяФайлаМассив.Количество() = 5 Тогда
        
            Если НРЕГ(ИмяФайлаМассив[0]) = "outage" Тогда
                
                Структура.ИмяДампа = Строка(Перечисления.Процессы.OutageWER);
                Структура.Процесс = СборДамповКонстантыСервер.ТипУпавшегоПроцесса(ИмяФайлаМассив[0]);
                Структура.ВерсияПлатформы = ВерсияПлатформыСервер.ВерсияПлатформы("0.0.0.0");
                Структура.ДатаВремя = Дата(ИмяФайлаМассив[2] + ИмяФайлаМассив[3]);
                Структура.PID = Число(ИмяФайлаМассив[4]);
                
            Иначе
                // Имя процесса
                Поз = СтрНайти(ИмяФайла, "_");
                ИмяПроцесса = Лев(ИмяФайла, Поз - 1);
                Структура.Процесс = СборДамповКонстантыСервер.ТипУпавшегоПроцесса(ИмяПроцесса);
                ИмяФайла = Сред(ИмяФайла, Поз + 1);
                
                Структура.ИмяПроцесса = ИмяПроцесса;
                
                // Версия платформы
                Поз = СтрНайти(ИмяФайла, "_");
                Структура.ВерсияПлатформы = ВерсияПлатформыСервер.ВерсияПлатформы( Лев(ИмяФайла, Поз - 1) );
                ИмяФайла = Сред(ИмяФайла, Поз + 1);
                
                // Смещение
                Поз = СтрНайти(ИмяФайла, "_");
                Структура.Смещение = Лев(ИмяФайла, Поз - 1);
                ИмяФайла = Сред(ИмяФайла, Поз + 1);
                
                // Дата время
                Поз = СтрНайти(ИмяФайла, "_");
                Структура.ДатаВремя = Дата( Лев(ИмяФайла, Поз - 1) );
                ИмяФайла = Сред(ИмяФайла, Поз + 1);
                
                // PID
                Структура.PID = Число( ИмяФайла );
                
                // Имя дампа
                Структура.ИмяДампа = ВРег(ИмяПроцесса + "_" + Структура.ВерсияПлатформы + "_" + Структура.Смещение);
                
            КонецЕсли;
        
    Иначе
        
        Структура.ИмяДампа = Строка(Перечисления.Процессы.WindowsErrorReporting);
        Структура.Процесс = Перечисления.Процессы.WindowsErrorReporting;
        Структура.ВерсияПлатформы = ВерсияПлатформыСервер.ВерсияПлатформы("0.0.0.0");
        Структура.Смещение = "00000000";        
        
    КонецЕсли;

КонецПроцедуры

Функция ПолучитьДампыДляАрхивирования()
	СостоянияОбработки = Новый Массив;
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампа);
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ОшибкаПопыткиАрхивирования);
	//СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ОшибкаСозданияДампа);
	
	ДампыДляАрхивированияБуфер = РегистрыСведений.Дампы.ВыбратьПоСостояниямОбработки(СостоянияОбработки);
	
	ДампыДляАрхивирования = Новый Массив;
	Для Каждого ТекДамп Из ДампыДляАрхивированияБуфер Цикл
		Если ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗарегистрированоСозданиеДампа Тогда
			ДампыДляАрхивирования.Добавить(ТекДамп);
		ИначеЕсли ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаПопыткиАрхивирования Тогда
			Если ТекДамп.ДатаСледующегоПовтора < ТекущаяДата() И ТекДамп.КоличествоПовторов < 5 Тогда
				ДампыДляАрхивирования.Добавить(ТекДамп);
			КонецЕсли;
		ИначеЕсли ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаСозданияДампа Тогда
			ДампыДляАрхивирования.Добавить(ТекДамп);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДампыДляАрхивирования;
КонецФункции

Функция ПолучитьДампыДляЭкспорта()
	СостоянияОбработки = Новый Массив;
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ЗавершеноАрхивированиеДампУдален);
	СостоянияОбработки.Добавить(Перечисления.СостоянияОбработкиДампа.ОшибкаПопыткиЭкспорта);
	
	ДампыДляАрхивированияБуфер = РегистрыСведений.Дампы.ВыбратьПоСостояниямОбработки(СостоянияОбработки);
	
	ДампыДляАрхивирования = Новый Массив;
	Для Каждого ТекДамп Из ДампыДляАрхивированияБуфер Цикл
		Если ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ЗавершеноАрхивированиеДампУдален Тогда
			ДампыДляАрхивирования.Добавить(ТекДамп);
		ИначеЕсли ТекДамп.СостояниеОбработкиДампа = Перечисления.СостоянияОбработкиДампа.ОшибкаПопыткиЭкспорта Тогда
			Если ТекДамп.ДатаСледующегоПовтора < ТекущаяДата() И ТекДамп.КоличествоПовторов < 5 Тогда
				ДампыДляАрхивирования.Добавить(ТекДамп);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДампыДляАрхивирования;
КонецФункции

Функция НавигационнаяСсылкаКонтрольУстойчивости(КонтрольУстойчивости)
    Возврат Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(КонтрольУстойчивости), КонтрольУстойчивости.Наименование);
КонецФункции

Процедура ОткрытьИнцидент(АгентКИП, Инцидент)
    
    НавигационнаяСсылка = АгентКИПвЦКК.НавигационнаяСсылкаАгентКИП(АгентКИП);
    
    ТипИнцидента = Справочники.ТипыИнцидентов.ТипИнцидента(Инцидент["type"], Перечисления.УровниИнцидентов.Ошибка);
    ИнцидентСсылка =  Справочники.Инциденты.Инцидент(АгентКИП, Инцидент);
    ДатаОткрытия = Справочники.Инциденты.ДатаИнцидента(Инцидент);
    
    Сообщение = Инцидент["descr"];
    
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,,Сообщение,1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка,ДатаОткрытия);
    
КонецПроцедуры

Процедура ЗакрытьИнцидент(АгентКИП, Инцидент)
    
    НавигационнаяСсылка = АгентКИПвЦКК.НавигационнаяСсылкаАгентКИП(АгентКИП);
    
    ТипИнцидента = Справочники.ТипыИнцидентов.ТипИнцидента(Инцидент["type"], Перечисления.УровниИнцидентов.Ошибка);
    ИнцидентСсылка =  Справочники.Инциденты.Инцидент(АгентКИП, Инцидент);
    ДатаЗакрытия = Справочники.Инциденты.ДатаИнцидента(Инцидент);
    
    Сообщение = Инцидент["descr"];
    
    ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, ИнцидентСсылка, Истина, Сообщение, ДатаЗакрытия);
    
КонецПроцедуры

#КонецОбласти




// Отправить SMS с указанным текстом на все перечисленные номера телефонов.
//
// Сообщение при необходимости будет разбито на несколько SMS, отправленных
// абоненту и оплаченных по отдельности. Размер одного SMS – 160 символов в
// латинице или 70 символов в кириллице. При разбивке сообщения на несколько
// SMS в каждую часть добавляется заголовок для объединения частей в одно
// сообщение на телефоне получателя, и максимальная длина становится 67 для
// кириллицы и 153 для латинских букв.
//
// Параметры:
//  НомераПолучателей - Массив - массив строк номеров получателей в формате +XХХХХХХХХХХ.
//  Текст             - Строка - текст сообщения, максимальная длина 800 символов.
//  ИмяОтправителя    - Строка - имя отправителя, которое будет отображаться вместо номера у получателей.
//  Логин             - Строка - имя пользователя сервиса smsc.ru.
//  Пароль            - Строка - пароль пользователя сервиса smsc.ru.
//
// Возвращаемое значение:
//  Структура - подробное описание в СоздатьОписаниеРезультаОтправки().
//
Функция ОтправитьSMS(НомераПолучателей, Текст, ИмяОтправителя, Логин, Пароль) Экспорт
	
	РезультатОтправки = СоздатьОписаниеРезультаОтправки();
	
	Если ПараметрыОтправкиКорректны(НомераПолучателей, Текст) Тогда
		ПараметрыЗапроса = ПолучитьПараметрыОтправки(
			НомераПолучателей,
			Лев(Текст, 800),
			ИмяОтправителя,
			Логин,
			Пароль);
		
		Попытка
			Соединение = СоздатьСоединение(СерверSMSЦентра());
			Ответ = ВыполнитьЗапрос(Соединение, ПолучитьКомандуОтправки(), ПараметрыЗапроса);
		Исключение
			Возврат ЗарегистрироватьОшибкуПодключения(ИнформацияОбОшибке(), РезультатОтправки);
		КонецПопытки;
		
		Идентификатор = ПолучитьИдентификаторОтправки(Ответ, РезультатОтправки);
		Если Не ПустаяСтрока(Идентификатор) Тогда
			ЗаполнитьПараметрыОтправки(Идентификатор, НомераПолучателей, РезультатОтправки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Получить текстовое представление статуса доставки сообщения.
//
// Параметры:
//  ИдентификаторСообщения - Строка - идентификатор, присвоенный при отправке сообщения.
//  Логин                  - Строка - имя пользователя сервиса smsc.ru.
//  Пароль                 - Строка - пароль пользователя сервиса smsc.ru.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыДоставкиSMS - статус доставки, если его удалось получить.
//  Неопределено                          - если во время получения статуса возникла ошибка.
//
Функция СтатусДоставки(ИдентификаторСообщения, Логин, Пароль) Экспорт
	
	ПараметрыЗапроса = ПолучитьПараметрыПолученияСостояния(
		ИдентификаторСообщения.ИдентификаторСообщения,
		НормализоватьНомер(ИдентификаторСообщения.НомерПолучателя),
		Логин,
		Пароль);
	
	Попытка
		Соединение = СоздатьСоединение(СерверSMSЦентра());
		Ответ = ВыполнитьЗапрос(Соединение, ПолучитьКомандуПолученияСостояния(), ПараметрыЗапроса);
	Исключение
		ЗарегистрироватьОшибку(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ПолучитьСтатусДоставки(
		ИдентификаторСообщения.ИдентификаторСообщения,
		ИдентификаторСообщения.НомерПолучателя,
		Ответ);
	
КонецФункции

// Выполнить запрос к серверу отправки SMS с указанными параметрами.
//
// Параметры:
//  Соединение - HTTPСоединение - соединение с сервером отправки сообщений.
//  Команда    - Строка - текст команды (см. ПолучитьКомандуОтправки(),
//                        ПолучитьКомандуПолученияСостояния()).
//  Параметры  - Строка - параметры команды (см. ПолучитьПараметрыОтправки(),
//                        ПолучитьПараметрыПолученияСостояния()).
//
// Возвращаемое значение:
//  HTTPОтвет - результат выполнения HTTP запроса.
//
Функция ВыполнитьЗапрос(Соединение, Команда, Параметры)
	ДлинаЗапроса = СтрДлина(Параметры);
	Если ДлинаЗапроса < 2000 Тогда
		Запрос = Новый HTTPЗапрос(Команда + "?" + Параметры);
		Возврат Соединение.Получить(Запрос);
	Иначе
		Запрос = Новый HTTPЗапрос(Команда);
		Запрос.УстановитьТелоИзСтроки(Параметры, КодировкаПоУмолчанию());
		Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		Запрос.Заголовки.Вставить("Content-Length", Формат(ДлинаЗапроса, "ЧГ=0"));
		Возврат Соединение.ОтправитьДляОбработки(Запрос);
	КонецЕсли;
	
КонецФункции

// Заполнить параметры отправки конкретного SMS сообщения для указанных номеров телефонов.
//
// Идентификатор сообщения заполняется, как комбинация идентификатора отправленного
// сообщения и номера телефона, на которое оно отправлено.
//
// Параметры:
//  Идентификатор     - Строка - идентификатор отправленного SMS сообщения.
//  НомераПолучателей - Массив - массив строк номеров получателей в формате +XХХХХХХХХХХ.
//  РезультатОтправки - Структура, подробное описание в СоздатьОписаниеРезультаОтправки().
//
Процедура ЗаполнитьПараметрыОтправки(Идентификатор, НомераПолучателей, РезультатОтправки)
	
	Для Каждого НомерПолучателя Из НомераПолучателей Цикл
		ПараметрыОтправки = СоздатьОписаниеПараметраОтправки();
		ПараметрыОтправки.НомерПолучателя = НомерПолучателя;
		ИдентификаторСообщения = СоздатьОписаниеПараметраОтправки();
		ИдентификаторСообщения.НомерПолучателя = НомерПолучателя;
		ИдентификаторСообщения.ИдентификаторСообщения = Идентификатор;
		ПараметрыОтправки.ИдентификаторСообщения = ИдентификаторСообщения;
		РезультатОтправки.ПараметрыОтправки.Добавить(ПараметрыОтправки);
	КонецЦикла;
	
КонецПроцедуры

// Зарегистрировать ошибку при отправке SMS сообщений.
//
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке или строка описания ошибки.
//  РезультатОтправки  - подробное описание в СоздатьОписаниеРезультаОтправки().
//
// Возвращаемое значение:
//  РезультатОтправки - подробное описание в СоздатьОписаниеРезультаОтправки().
//
Функция ЗарегистрироватьОшибку(ИнформацияОбОшибке, РезультатОтправки = Неопределено)
	
	ОписаниеОшибки = Форматирование.ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке);
	ЗаписьЖурналаРегистрации(ИмяСобытияОтправкиSMS(),
		УровеньЖурналаРегистрации.Ошибка,,,
		ОписаниеОшибки);
	
	Если РезультатОтправки <> Неопределено Тогда
		РезультатОтправки.ОписаниеОшибки = ОписаниеОшибки;
		Возврат РезультатОтправки;
	КонецЕсли;
	
КонецФункции

// Зарегистрировать ошибку подключения к серверу отправки SMS сообщений.
//
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке из исключения при установке соединения.
//  РезультатОтправки  - подробное описание в СоздатьОписаниеРезультаОтправки().
//
// Возвращаемое значение:
//  РезультатОтправки - подробное описание в СоздатьОписаниеРезультаОтправки().
//
Функция ЗарегистрироватьОшибкуПодключения(ИнформацияОбОшибке, РезультатОтправки)
	
	ЗарегистрироватьОшибку(ИнформацияОбОшибке, РезультатОтправки);
	РезультатОтправки.ОшибкаПодключения = Истина;
	Возврат РезультатОтправки;
	
КонецФункции

// Получить имя события журнала регистрации для отправки SMS.
//
// Возвращаемое значение:
//  Строка - наименование события.
//
Функция ИмяСобытияОтправкиSMS()
	
	Возврат НСтр("ru = 'Отправка SMS'");
	
КонецФункции

// Кодировать строку для использования в URL.
//
// Параметры:
//  Значение - Строка - кодируемая строка.
//
// Возвращаемое значение:
//  Строка - Строка в формате для использования в URL.
//
Функция КодироватьURL(Значение)

	Возврат КодироватьСтроку(Значение, СпособКодированияСтроки.КодировкаURL, КодировкаПоУмолчанию());
	
КонецФункции

// Получить кодировку сообщений по умолчанию.
//
// Возвращаемое значение:
//  Строка - кодировка сообщений по умолчанию (Windows 1251).
Функция КодировкаПоУмолчанию()
	
	Возврат "windows-1251";
	
КонецФункции

// Получить строку номеров получателей подготовленную к отправке сообщения.
//
// Параметры:
//  НомераПолучателей - Массив - массив строк номеров получателей в формате +XХХХХХХХХХХ.
//
// Возвращаемое значение:
//  Строка - разделенные запятой номера получателей без знака "+" для возможности
//           их автоматического приведения к международному формату на сервере.
//
Функция НомераПолучателейВСтроку(НомераПолучателей)
	
	СписокНомеров = "";
	
	Для Каждого НомерПолучателя Из НомераПолучателей Цикл
		Если СтрДлина(СписокНомеров) > 0 Тогда
			СписокНомеров = СписокНомеров + ",";
		КонецЕсли;
		СписокНомеров = СписокНомеров + НормализоватьНомер(НомерПолучателя);
	КонецЦикла;
	
	Возврат СписокНомеров;
	
КонецФункции

// Привести номер телефона к формату необходимому для отправки SMS сообщения.
//
// Параметры:
//  НомерПолучателя - Строка - номер получателя.
//
// Возвращаемое значение:
//  Строка - номер получателя готовый к отправке сообщения.
//
Функция НормализоватьНомер(НомерПолучателя)
	
	Возврат СтрЗаменить(НомерПолучателя, "+", "");
	
КонецФункции

// Получить описание ошибки по шаблону.
//
// Параметры:
//  Шаблон      - Строка - шаблон текста ошибки с параметрами {КодОшибки} и {ТекстОшибки}.
//  КодОшибки   - Строка - код ошибки.
//  ТекстОшибки - Строка - подробное описание ошибки.
//
// Возвращаемое значение:
//  Строка - Описание ошибки.
//
Функция ОписаниеОшибкиПоШаблону(Шаблон, КодОшибки, ТекстОшибки)
	
	ОписаниеОшибки = СтрЗаменить(Шаблон, "{КодОшибки}", КодОшибки);
	ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "{ТекстОшибки}", ТекстОшибки);
	Возврат ОписаниеОшибки;
	
КонецФункции

// Получить описание ошибки разбора ответа от сервера отправки SMS сообщений.
//
// Параметры:
//  Ответ - Строка - ответ сервера отправки SMS сообщений.
//
// Возвращаемое значение:
//  Строка - Описание ошибки.
//
Функция ОписаниеОшибкиФорматаОтвета(ТипЗапроса, ТекстОтвета)
	
	Ответ = Символы.ПС + Лев(ТекстОтвета, 1024);
	Возврат НСтр("ru = 'Ошибка формата ответа сервера (" + ТипЗапроса + "):'") + Ответ;
	
КонецФункции

// Проверить правильность заполнения параметров отправки SMS сообщения.
//
// Параметры:
//  НомераПолучателей - Массив - массив строк номеров получателей в формате +XХХХХХХХХХХ.
//  Текст             - Строка - текст сообщения, максимальная длина 800 символов.
//
// Возвращаемое значение:
//  Булево - Истина - параметры корректны, иначе Ложь.
//
Функция ПараметрыОтправкиКорректны(НомераПолучателей, Текст)
	
	Если НомераПолучателей.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытияОтправкиSMS(),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru = 'Попытка отправки SMS на пустой список номеров. Сообщение не отправлено.'"));
		Возврат Ложь;
	ИначеЕсли СтрДлина(Текст) = 0 Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытияОтправкиSMS(),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru = 'Попытка отправки SMS без текста сообщения. Сообщение не отправлено.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Получить соответствие кодов ошибок статусов их текстам.
//
// Возвращаемое значение:
//  Соответствие:
//   Ключ     - Строка - код ошибки статуса.
//   Значение - Строка - описание ошибки.
//
Функция ПолучитьВсеОшибкиСтатусов()
	
	КодыОшибокСтатусов = Новый Соответствие;
	КодыОшибокСтатусов.Вставить("0", НСтр("ru = 'Нет ошибки'"));
	КодыОшибокСтатусов.Вставить("1", НСтр("ru = 'Абонент не существует'"));
	КодыОшибокСтатусов.Вставить("6", НСтр("ru = 'Абонент не в сети'"));
	КодыОшибокСтатусов.Вставить("11", НСтр("ru = 'Нет услуги SMS'"));
	КодыОшибокСтатусов.Вставить("13", НСтр("ru = 'Абонент заблокирован'"));
	КодыОшибокСтатусов.Вставить("21", НСтр("ru = 'Нет поддержки SMS'"));
	КодыОшибокСтатусов.Вставить("245", НСтр("ru = 'Статус не получен'"));
	КодыОшибокСтатусов.Вставить("246", НСтр("ru = 'Ограничение по времени'"));
	КодыОшибокСтатусов.Вставить("247", НСтр("ru = 'Превышен лимит сообщений'"));
	КодыОшибокСтатусов.Вставить("248", НСтр("ru = 'Нет маршрута'"));
	КодыОшибокСтатусов.Вставить("249", НСтр("ru = 'Неверный формат номера'"));
	КодыОшибокСтатусов.Вставить("250", НСтр("ru = 'Номер запрещен настройками'"));
	КодыОшибокСтатусов.Вставить("251", НСтр("ru = 'Превышен лимит на один номер'"));
	КодыОшибокСтатусов.Вставить("252", НСтр("ru = 'Номер запрещен'"));
	КодыОшибокСтатусов.Вставить("253", НСтр("ru = 'Запрещено спам-фильтром'"));
	КодыОшибокСтатусов.Вставить("254", НСтр("ru = 'Запрещенный sender id'"));
	КодыОшибокСтатусов.Вставить("255", НСтр("ru = 'Отклонено оператором'"));
	Возврат КодыОшибокСтатусов;
	
КонецФункции

// Получить соответствие кодов статусов отправленных сообщений перечислению СтатусыДоставкиSMS.
//
// Возвращаемое значение:
//  Соответствие:
//   Ключ     - Строка, код статуса.
//   Значение - ПеречислениеСсылка.СтатусыДоставкиSMS - статус доставки.
//
Функция ПолучитьВсеСтатусы()
	
	КодыСтатусов = Новый Соответствие;
	// Ожидает отправки
	КодыСтатусов.Вставить("-1", Перечисления.СтатусыДоставкиSMS.Отправляется);
	// Передано оператору
	КодыСтатусов.Вставить("0", Перечисления.СтатусыДоставкиSMS.Отправлено);
	// Доставлено
	КодыСтатусов.Вставить("1", Перечисления.СтатусыДоставкиSMS.Доставлено);
	// Просрочено
	КодыСтатусов.Вставить("3", Перечисления.СтатусыДоставкиSMS.НеДоставлено);
	// Невозможно доставить
	КодыСтатусов.Вставить("20", Перечисления.СтатусыДоставкиSMS.НеДоставлено);
	// Неверный номер
	КодыСтатусов.Вставить("22", Перечисления.СтатусыДоставкиSMS.НеОтправлено);
	// Запрещено
	КодыСтатусов.Вставить("23", Перечисления.СтатусыДоставкиSMS.НеОтправлено);
	// Недостаточно средств
	КодыСтатусов.Вставить("24", Перечисления.СтатусыДоставкиSMS.НеОтправлено);
	// Недоступный номер
	КодыСтатусов.Вставить("25", Перечисления.СтатусыДоставкиSMS.НеОтправлено);
	Возврат КодыСтатусов;
	
КонецФункции

// Заполнить результат отправки сообщения и вернуть его идентификатор.
//
// Параметры:
//  ОтветСервера      - HTTPОтвет - результат выполнения ОтправитьДляОбработки().
//  РезультатОтправки - подробное описание в СоздатьОписаниеРезультаОтправки().
//
// Возвращаемое значение:
//  Строка - идентификатор отправленного SMS сообщения.
//
Функция ПолучитьИдентификаторОтправки(ОтветСервера, РезультатОтправки)
	
	Ответ = ПолучитьСтруктурированныйОтвет(ОтветСервера);
	
	Если Ответ.Свойство("error") И Ответ.Свойство("error_code") Тогда
		ОписаниеОшибки = ОписаниеОшибкиПоШаблону(
			НСтр("ru = 'Ошибка отправки SMS сообщения №{КодОшибки}: ""{ТекстОшибки}"".'"),
			Ответ.error_code,
			Ответ.error);
		ЗарегистрироватьОшибку(ОписаниеОшибки, РезультатОтправки);
	ИначеЕсли Не Ответ.Свойство("id") Тогда
		ОписаниеОшибки = ОписаниеОшибкиФорматаОтвета(
			НСтр("ru = 'отправка сообщения'"),
			ОтветСервера.ПолучитьТелоКакСтроку());
		ЗарегистрироватьОшибку(ОписаниеОшибки, РезультатОтправки);
	КонецЕсли;
	
	Если Ответ.Свойство("id") Тогда
		Возврат Ответ.id;
	КонецЕсли;
	
КонецФункции

// Получить команду отправки SMS в виде строки для smsc.ru.
//
// Возвращаемое значение:
//  Строка - команда отправки SMS.
//
Функция ПолучитьКомандуОтправки()
	
	Возврат "/sys/send.php";
	
КонецФункции

// Получить команду получения состояния отправки SMS в виде строки для smsc.ru.
//
// Возвращаемое значение:
//  Строка - команда получения состояния отправки SMS.
//
Функция ПолучитьКомандуПолученияСостояния()
	
	Возврат "/sys/status.php";
	
КонецФункции

// Получить описание ошибки статуса отправленного сообщения по коду ошибки.
//
// Параметры:
//  ВсеСтатусы - Соответствие - все статусы сформированные функцией ПолучитьВсеОшибкиСтатусов().
//  КодСтатуса - Строка - код статуса, возвращенный сервером отправки сообщений.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыДоставкиSMS - соответствующий статус.
//
Функция ПолучитьОписаниеОшибкиСтатуса(ВсеОшибкиСтатусов, КодОшибки)
	
	ОписаниеОшибки = ВсеОшибкиСтатусов.Получить(КодОшибки);
	Если ОписаниеОшибки <> Неопределено Тогда
		Возврат ОписаниеОшибки;
	Иначе
		Возврат ОписаниеОшибки = НСтр("ru = 'Неизвестная ошибка.'");
	КонецЕсли;
	
КонецФункции

// Получить параметры команды отправки SMS в виде строки для smsc.ru.
//
// Формат команды: "fmt=2&err=1&phones={Телефоны}&msg={Сообщение}&login={Логин}&psw={Пароль}".
// Опциональный параметр: "&sender={Отправитель}".
//
// Параметры:
//  НомераПолучателей - Массив - массив строк номеров получателей в формате +XХХХХХХХХХХ.
//  Текст             - Строка - текст сообщения, максимальная длина 800 символов.
//  ИмяОтправителя    - Строка - имя отправителя, которое будет отображаться вместо номера у получателей.
//  Логин             - Строка - имя пользователя сервиса smsc.ru.
//  Пароль            - Строка - пароль пользователя сервиса smsc.ru.
//
// Возвращаемое значение:
//  Строка - параметры команды отправки SMS.
//
Функция ПолучитьПараметрыОтправки(НомераПолучателей, Текст, ИмяОтправителя, Логин, Пароль)
	
	Возврат
		  "fmt=2"
		+ "&phones=" + КодироватьURL(НомераПолучателейВСтроку(НомераПолучателей))
		+ "&mes=" + КодироватьURL(Текст)
		+ "&login=" + КодироватьURL(Логин)
		+ "&psw=" + КодироватьURL(Пароль)
		+ ?(Не ПустаяСтрока(ИмяОтправителя), "&sender=" + КодироватьURL(ИмяОтправителя), "");
	
КонецФункции

// Получить параметры команды получения состояния отправки SMS в виде строки для smsc.ru.
//
// Формат команды: "fmt=2&id={Идентификатор}&phone={Телефон}&login={Логин}&psw={Пароль}".
//
// Параметры:
//  Идентификатор     - Строка - идентификатор отправленного SMS сообщения.
//  НомерПолучателя   - Массив - строка номера на который отправлено сообщение в формате +XХХХХХХХХХХ.
//  Логин             - Строка - имя пользователя сервиса smsc.ru.
//  Пароль            - Строка - пароль пользователя сервиса smsc.ru.
//
// Возвращаемое значение:
//  Строка - параметры команды получения состояния отправки SMS.
//
Функция ПолучитьПараметрыПолученияСостояния(Идентификатор, НомерПолучателя, Логин, Пароль)
	
	Возврат
		  "fmt=2"
		+ "&id=" + Идентификатор
		+ "&phone=" + КодироватьURL(НомерПолучателя)
		+ "&login=" + КодироватьURL(Логин)
		+ "&psw=" + КодироватьURL(Пароль);
	
КонецФункции

// Получить статус отправленного сообщения по коду статуса.
//
// Параметры:
//  ВсеСтатусы - Соответствие - все статусы сформированные функцией ПолучитьВсеСтатусы().
//  КодСтатуса - Строка - код статуса, возвращенный сервером отправки сообщений.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыДоставкиSMS - соответствующий статус.
//
Функция ПолучитьСтатус(ВсеСтатусы, КодСтатуса)
	
	Статус = ВсеСтатусы.Получить(КодСтатуса);
	Если Статус <> Неопределено Тогда
		Возврат Статус;
	Иначе
		Возврат Перечисления.СтатусыДоставкиSMS.Новое;
	КонецЕсли;
	
КонецФункции

// Получить статус доставки из ответа сервера на запрос статуса по номеру и идентификатору.
//
// Параметры:
//  Идентификатор     - Строка - идентификатор отправленного SMS сообщения.
//  НомераПолучателей - Массив - массив строк номеров получателей в формате +XХХХХХХХХХХ.
//  ОтветСервера      - HTTPОтвет - результат выполнения ОтправитьДляОбработки().
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыДоставкиSMS - соответствующий статус.
//  Неопределено                          - определить статус не удалось.
//
Функция ПолучитьСтатусДоставки(Идентификатор, НомерПолучателя, ОтветСервера)
	
	Ответ = ПолучитьСтруктурированныйОтвет(ОтветСервера);
	Шаблон = НСтр("ru = 'Ошибка получения статуса доставки SMS сообщения №{КодОшибки}: ""{ТекстОшибки}"".'");
	
	Если Ответ.Свойство("error") И Ответ.Свойство("error_code") Тогда
		ОписаниеОшибки = ОписаниеОшибкиПоШаблону(Шаблон, Ответ.error_code, Ответ.error);
		ЗарегистрироватьОшибку(ОписаниеОшибки);
	ИначеЕсли Ответ.Свойство("err") Тогда
		ТекстОшибки = ПолучитьОписаниеОшибкиСтатуса(ПолучитьВсеОшибкиСтатусов(), Ответ.err);
		ОписаниеОшибки = ОписаниеОшибкиПоШаблону(Шаблон, Ответ.err, ТекстОшибки);
		ЗарегистрироватьОшибку(ОписаниеОшибки);
	ИначеЕсли Не Ответ.Свойство("status") Тогда
		ОписаниеОшибки = ОписаниеОшибкиФорматаОтвета(
			НСтр("ru = 'получение статуса'"),
			ОтветСервера.ПолучитьТелоКакСтроку());
		ЗарегистрироватьОшибку(ОписаниеОшибки);
	КонецЕсли;
	
	Если Ответ.Свойство("status") Тогда
		Возврат ПолучитьСтатус(ПолучитьВсеСтатусы(), Ответ.status);
	КонецЕсли;
	
КонецФункции

// Получить структурированный ответ на запрос к серверу отправки SMS сообщений.
//
// Параметры:
//  ОтветСервера - HTTPОтвет - результат выполнения ОтправитьДляОбработки().
//
// Возвращаемое значение:
//  Структура - преобразованный в структуру ОбъектXDTO.
//
Функция ПолучитьСтруктурированныйОтвет(ОтветСервера)
	
	Ответ = Новый Структура;
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ОтветСервера.ПолучитьТелоКакСтроку());
	
	Попытка
		ЧтениеОтвета.ПерейтиКСодержимому();
		ОтветXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета);
		Для Каждого СвойствоОтвета Из ОтветXDTO.Свойства() Цикл
			Ответ.Вставить(СвойствоОтвета.Имя, ОтветXDTO[СвойствоОтвета.Имя]);
		КонецЦикла;
	Исключение
		ЗарегистрироватьОшибку(ИнформацияОбОшибке());
	КонецПопытки;
	
	ЧтениеОтвета.Закрыть();
	Возврат Ответ;
	
КонецФункции

// Получить имя сервера сервиса SMS Центра (smsc.ru).
//
// Возвращаемое значение:
//  Строка - имя сервера.
//
Функция СерверSMSЦентра()
	
	Возврат "smsc.ru";
	
КонецФункции

// Создать соединение с сервером отправки SMS.
//
// Параметры:
//  Сервер - Строка, имя сервера отправки SMS.
//
// Возвращаемое значение:
//  HTTPСоединение - соединение с сервером.
//
Функция СоздатьСоединение(Сервер)
	Если Константы.ИспользоватьЗащищенноеСоединениеСSMSПровайдером.Получить() Тогда
		ЗащищенноеСоединение = Справочники.НастройкиЗащищенногоСоединения.СоздатьЗащищенноеСоединение(
			Константы.НастройкиЗащищенногоСоединенияСSMSПровайдером.Получить());
	КонецЕсли;
	
	//Пока без прокси
	//Прокси = ПолучениеФайловИзИнтернета.ПолучитьНастройкуПроксиСервера();
	Возврат Новый HTTPСоединение(Сервер,,,,, 20, ЗащищенноеСоединение);
	
КонецФункции

// Создать структуру параметров отправки SMS сообщения.
//
// Возвращаемое значение:
//  Структура:
//   НомерПолучателя        - Строка - номер получателя в формате +XХХХХХХХХХХ.
//   ИдентификаторСообщения - Строка - идентификатор отправленного сообщения,
//                            используется для получения статуса доставки сообщения.
//
Функция СоздатьОписаниеПараметраОтправки()
	
	Возврат Новый Структура("НомерПолучателя, ИдентификаторСообщения");
	
КонецФункции

// Создать структуру результата SMS сообщения.
//
// Возвращаемое значение:
//  Структура:
//   ОшибкаПодключения - Булево - признак наличия ошибки отправки сообщения (Истина - есть ошибка).
//   ОписаниеОшибки    - Строка - пользовательское представление ошибки, пустая строка- ошибки нет.
//   ПараметрыОтправки - Массив структур типа, описанного в СоздатьОписаниеПараметраОтправки().
//
Функция СоздатьОписаниеРезультаОтправки()
	
	Описание = Новый Структура ("ОшибкаПодключения, ОписаниеОшибки, ПараметрыОтправки");
	Описание.ОшибкаПодключения = Ложь;
	Описание.ОписаниеОшибки = "";
	Описание.ПараметрыОтправки = Новый Массив;
	Возврат Описание;
	
КонецФункции

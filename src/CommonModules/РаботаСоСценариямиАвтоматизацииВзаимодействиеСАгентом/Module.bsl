#Область ОбработкаПодготовкаДанныхДляАгента
// Возможные значения state:
// --active
// --finished
// --recoverable error
// --script error
// --fatal error
// --interrupted
// --rolled back 
Процедура КомандаАвтоматизации(Данные, ПараметрыАгента) Экспорт
    ДанныеСервисаЗапускаСкриптов = Данные["ServicesData"]["RUN_PYTHON_SCRIPT"];
	Если ДанныеСервисаЗапускаСкриптов <> Неопределено Тогда
		automationCommands = ДанныеСервисаЗапускаСкриптов["automationCommands"];
		Если automationCommands <> Неопределено Тогда
            Для Каждого ТекКоманда Из automationCommands Цикл
				Если ТекКоманда.Значение["state"] <> Неопределено Тогда
					Если НРег(ТекКоманда.Значение["state"]) <> "active" Тогда // выполнение окончено
						
						ЗаписьJSON = Новый ЗаписьJSON();
					    ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
					    ЗаписатьJSON(ЗаписьJSON, ТекКоманда.Значение["message"]);
					    Результат = ЗаписьJSON.Закрыть();
						Если НРег(ТекКоманда.Значение["state"]) = "finished" ИЛИ НРег(ТекКоманда.Значение["state"]) = "ok" Тогда
							СтатусВыполненияКоманды = Перечисления.СтатусыКомандАгентаКИП.Выполнена;
						ИначеЕсли ТекКоманда.Значение["state"] = Неопределено ИЛИ  НРег(ТекКоманда.Значение["state"]) = "interrupted" Тогда
							СтатусВыполненияКоманды = Перечисления.СтатусыКомандАгентаКИП.Отменена;
						Иначе
							СтатусВыполненияКоманды = Перечисления.СтатусыКомандАгентаКИП.ВыполненаСОшибкой;
						КонецЕсли;
						
						НачатьТранзакцию();
						Попытка
							РегистрыСведений.КомандыАгентаКИП.УстановитьСтатусРезультатКоманды(Новый УникальныйИдентификатор(ТекКоманда.Ключ), СтатусВыполненияКоманды, Результат);
							НЗ = РегистрыСведений.КомандыАгентаКИП.СоздатьНаборЗаписей();
							НЗ.Отбор.УникальныйИдентификаторЗаписи.Установить(Новый УникальныйИдентификатор(ТекКоманда.Ключ));
							НЗ.Прочитать();
							
							Если НЗ.Количество() > 0 Тогда
								Команда = НЗ[0].Команда;
								
								ЧтениеJSON = Новый ЧтениеJSON();
								ЧтениеJSON.УстановитьСтроку(Команда);
								
								ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
								
								Если ПараметрыОтвета["mode"] = "selftuning" Тогда
									ПеревестиКомандуОбновленияВФинальноеСостояние(ПараметрыАгента.Ссылка, Справочники.КонтурыАдминистрирования.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыОтвета["stepGuid"])), СтатусВыполненияКоманды, ТекКоманда.Значение["message"]);
								Иначе	
									СтруктураПараметровШага = ПрисвоитьШагуСтатусВыполнения(Новый УникальныйИдентификатор(ТекКоманда.Ключ), ТекКоманда.Значение["state"], СформироватьДополнительныеСведения(ТекКоманда.Значение));

									Если СтруктураПараметровШага <> Неопределено Тогда
										Если СтатусВыполненияКоманды <> Перечисления.СтатусыКомандАгентаКИП.Выполнена Тогда
											ПривестиНеСтартованныеШагиКАктуальномуСостоянию(СтруктураПараметровШага);
										КонецЕсли;
										УстановитьСостояниеЗавершенияСценария(СтруктураПараметровШага);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;	
							ЗафиксироватьТранзакцию();
						Исключение
							ОтменитьТранзакцию();
							
							ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка),
							       УровеньЖурналаРегистрации.Ошибка,,,
							       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						    ВызватьИсключение;
						КонецПопытки;	
					Иначе
						НЗ = РегистрыСведений.КомандыАгентаКИП.СоздатьНаборЗаписей();
						НЗ.Отбор.УникальныйИдентификаторЗаписи.Установить(Новый УникальныйИдентификатор(ТекКоманда.Ключ));
						НЗ.Прочитать();
						
						Если НЗ.Количество() > 0 Тогда
							Команда = НЗ[0].Команда;
							ЧтениеJSON = Новый ЧтениеJSON();
							ЧтениеJSON.УстановитьСтроку(Команда);
							
							ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
							
							Если ПараметрыОтвета["mode"] = "start" Тогда
								Команда = Новый УникальныйИдентификатор(ТекКоманда.Ключ);
								// проверить статус прерывания сценария
								Шаг = ПолучитьШагИзКомандыАгента(Команда);
								
								// Смотрим в состояние экземпляра.
								// Если Агент принес результат команды, а экземпляр уже в состоянии Прерван,
								// значит он был прерван из интерфейса, и нужно отправить команду на прерывание сценария Агенту
								Если Шаг.Владелец.Состояние = Перечисления.СостоянияСценария.Прерван Тогда
									РегистрыСведений.КомандыАгентаКИП.УстановитьСтатусРезультатКоманды(Команда, Перечисления.СтатусыКомандАгентаКИП.Отменена, НСтр("ru='Выполнение прервано из 1С'"));
									// создать команду на прерывание
									СоздатьКомандуПрерыванияВыполнения(ПараметрыАгента.Ссылка, Шаг.УникальныйИдентификатор(), Команда);
								Иначе
									НЗСостоянияШагов = РегистрыСведений.СтруктураШаговСценария.СоздатьНаборЗаписей();
									НЗСостоянияШагов.Отбор.ИдентификаторШага.Установить(Шаг);
									НЗСостоянияШагов.Прочитать();
									
									Для каждого Запись Из НЗСостоянияШагов Цикл
										Запись.ДополнительнаяИнформация = СформироватьДополнительныеСведения(ТекКоманда.Значение);
									КонецЦикла;
									
									НЗСостоянияШагов.Записать();
								КонецЕсли;
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			НайтиПотерянныеКомандыАвтоматизации(ПараметрыАгента.Ссылка);
		КонецЕсли;
	Иначе
		// пришел Агент, который не знает ничего о выполнении сценариев автоматизации
		// возможно Агента прибили в процессе выполнения сценария и в регистре остались отправленные команды
		// найдем такие и признаем такие сценарии ПРЕРВАННЫМИ (состояние системы неизвестно...)
		
		НайтиПотерянныеКомандыАвтоматизации(ПараметрыАгента.Ссылка);
	КонецЕсли;	
КонецПроцедуры	

Процедура КомандаАвтоматизацииОтвет(ПараметрыАгента) Экспорт
	
	// проверяем необходимость и возможность обновления
	Если ОбработатьЗаданиеНаОбновлениеСкриптов(ПараметрыАгента) <> Истина Тогда
		// Запуск заданий планировщика
		ЗапуститьЗаданияПланировщикаПоРасписанию(ПараметрыАгента, Истина);
		
		// Проталкиваем сценарий для данного Агента	
		ВыполнениеСценариевАвтоматизацииДляАгента(ПараметрыАгента);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСценариями

// Агент находит тот сценарий, который он сейчас должен выполнять
// Сценарии выполняем По правилам:
// 1. Монопольно | немонопольно.
// 1.1. Агент не выполняет активных сценариев: стартуем монопольный в порядке даты планового запуска
// 1.2. Агент выполняет сценарий:
//		-- этот сценарий монопольный: продолжает выполнять только его, если для этого Агента еще есть активные шаги
//      -- этот сценарий немонопольный: что делать? с одной стороны - можно выполнять, 
//      с другой - большое количество таких сценариев поставят монопольные в "вечную очередь"
// 2. С учетом монопольности упорядочиваем По плановой дате старта. Если дата старта не заполнена, предполагаем, что
// это значит "запустить немедленно"
Процедура ВыполнениеСценариевАвтоматизацииДляАгента(ПараметрыАгента) Экспорт
	// Выберем все стартованные (уже выполняется) и запланированные (нужно начать выполнение) Сценарии.
	// Если первым шагом в очереди значится шаг для этого агента, то перейдем к этапу старта 
	ЗапросСценариев = Новый Запрос("ВЫБРАТЬ
	                               |	ЭкземплярыСценариевАвтоматизации.Ссылка КАК Ссылка,
	                               |	ВЫБОР
	                               |		КОГДА ЭкземплярыСценариевАвтоматизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.ТестСтартован)
	                               |			ТОГДА ИСТИНА
	                               |		ИНАЧЕ ЛОЖЬ
	                               |	КОНЕЦ КАК ТестовыйПрогон,
	                               |	ЭкземплярыСценариевАвтоматизации.РежимВыполнения КАК РежимВыполнения,
	                               |	ЭкземплярыСценариевАвтоматизации.Состояние КАК Состояние
	                               |ИЗ
	                               |	Справочник.ЭкземплярыСценариевАвтоматизации КАК ЭкземплярыСценариевАвтоматизации
	                               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
	                               |		ПО ЭкземплярыСценариевАвтоматизации.Ссылка = СтруктураШаговСценария.Сценарий
	                               |			И (СтруктураШаговСценария.ТипШага = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовСхемыСценария.Шаг))
	                               |			И (ЭкземплярыСценариевАвтоматизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.Стартован)
	                               |				ИЛИ ЭкземплярыСценариевАвтоматизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.ТестСтартован)
	                               |				ИЛИ ЭкземплярыСценариевАвтоматизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.ВПроцессеОтката)
	                               |				ИЛИ ЭкземплярыСценариевАвтоматизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.Запланирован)
	                               |					И (ЭкземплярыСценариевАвтоматизации.ПлановаяДатаОкончания > &ТекущаяДата
	                               |						ИЛИ ЭкземплярыСценариевАвтоматизации.ПлановаяДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	                               |					И (ЭкземплярыСценариевАвтоматизации.ПлановаяДатаЗапуска <= &ТекущаяДата
	                               |						ИЛИ ЭкземплярыСценариевАвтоматизации.ПлановаяДатаЗапуска = ДАТАВРЕМЯ(1, 1, 1)))
	                               |			И (СтруктураШаговСценария.Оборудование = &РеальноеЗначение)
	                               |			И (СтруктураШаговСценария.Использовать)
	                               |
	                               |УПОРЯДОЧИТЬ ПО
	                               |	ЭкземплярыСценариевАвтоматизации.ПлановаяДатаЗапуска,
	                               |	СтруктураШаговСценария.НомерШага
	                               |ИТОГИ ПО
	                               |	РежимВыполнения");
	ЗапросСценариев.УстановитьПараметр("РеальноеЗначение", ПараметрыАгента.Ссылка);
	ЗапросСценариев.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
	ВыборкаШага = ЗапросСценариев.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Если найден "активный" сценарий, в рамках которого участвует данный Агент, то переходим к определению следующего выполняемого шага.
	// Если он для этого агента, то создадим команду
	// -- Если есть монопольный сценарий, то ждем окончания всех уже запущенных, новых не стартуем. Когда запущенных не останется, стартуем монопольный
	// -- Если есть немонопольный можно запустить, если нет монопольных
	// -- Фоновые запускаются независимо от остальных, не учитываются монопольными и немонопольными, не влияют друг на друга
	
	
	// нужно найти и выполнить все немонопольные в статусе "Стартован" или "ВПроцессеОтката", если таких нет продолжаем монопольный или стартуем новый
	// тестовый прогон не влияет на выполнение, но если в очереди боевой монопольный сценарий, то не выполняем
	АктивныОткаты = Ложь;
	АктивныПрямыеПрогоны = Ложь;
	АктивныйМонопольный = Ложь;
	ЕстьНемонопольныеВОчереди = ВыборкаШага.НайтиСледующий(Перечисления.РежимВыполненияСценария.Немонопольное, "РежимВыполнения");
	
	////////////////////////////////////////////////////////////////////////////////
	// ИТЕРАЦИЯ I. Выполняем уже стартованные или откатываемые немонопольные. Пачкой.
	
	Если ЕстьНемонопольныеВОчереди Тогда
		ВыборкаПоСостояниям = ВыборкаШага.Выбрать();
		
		Пока ВыборкаПоСостояниям.НайтиСледующий(Перечисления.СостоянияСценария.ВПроцессеОтката, "Состояние") Цикл
			ВыполнитьЗапросСценариевИЗапустить(ПараметрыАгента, ВыборкаПоСостояниям.Ссылка, ВыборкаПоСостояниям.ТестовыйПрогон, Истина);
			
			АктивныОткаты = Истина;
		КонецЦикла;	
		
		ВыборкаПоСостояниям.Сбросить();
		Пока ВыборкаПоСостояниям.НайтиСледующий(Перечисления.СостоянияСценария.Стартован, "Состояние") Цикл
			ВыполнитьЗапросСценариевИЗапустить(ПараметрыАгента, ВыборкаПоСостояниям.Ссылка, ВыборкаПоСостояниям.ТестовыйПрогон, Ложь);

			АктивныПрямыеПрогоны = Истина;
		КонецЦикла;	
	КонецЕсли;
	
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ИТЕРАЦИЯ II. Если есть монопольный и он может выполняться монопольно (нет выполняемых немонопольных), то выполняем 
	
	ВыборкаШага.Сбросить();
	ЕстьМонопольныйВОчереди = ВыборкаШага.НайтиСледующий(Перечисления.РежимВыполненияСценария.Монопольное, "РежимВыполнения");
	
	Если ЕстьМонопольныйВОчереди Тогда
		Если Не АктивныОткаты И Не АктивныПрямыеПрогоны Тогда
			ВыборкаПоСостояниямМонопольных = ВыборкаШага.Выбрать();
			
			Если ВыборкаПоСостояниямМонопольных.НайтиСледующий(Перечисления.СостоянияСценария.ВПроцессеОтката, "Состояние") Тогда
				ВыполнитьЗапросСценариевИЗапустить(ПараметрыАгента, ВыборкаПоСостояниямМонопольных.Ссылка, ВыборкаПоСостояниямМонопольных.ТестовыйПрогон, Истина);
				
				АктивныйМонопольный = Истина;
			ИначеЕсли  ВыборкаПоСостояниямМонопольных.НайтиСледующий(Перечисления.СостоянияСценария.Стартован, "Состояние")
				Или ВыборкаПоСостояниямМонопольных.НайтиСледующий(Перечисления.СостоянияСценария.Запланирован, "Состояние") Тогда
					ВыполнитьЗапросСценариевИЗапустить(ПараметрыАгента, ВыборкаПоСостояниямМонопольных.Ссылка, ВыборкаПоСостояниямМонопольных.ТестовыйПрогон, Ложь);
				
					АктивныйМонопольный = Истина;
				КонецЕсли;
				
				/////////////////////////////////////////////////////////////////////////////////////
				// ИТЕРАЦИЯ III. Активных монопольных нет. Можно запустить все тестовые
				
				Если Не АктивныйМонопольный Тогда
					// Монопольные 
					ВыборкаПоСостояниямМонопольных.Сбросить();
					Пока ВыборкаПоСостояниямМонопольных.НайтиСледующий(Перечисления.СостоянияСценария.ТестСтартован, "Состояние") Цикл
						ВыполнитьЗапросСценариевИЗапустить(ПараметрыАгента, ВыборкаПоСостояниямМонопольных.Ссылка, ВыборкаПоСостояниямМонопольных.ТестовыйПрогон, Ложь);
					КонецЦикла;
				КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ИТЕРАЦИЯ IV. Активных монопольных нет. Можно запустить все тестовые и начать выполнение новых немонопольных
	
	Если ЕстьНемонопольныеВОчереди И Не АктивныйМонопольный Тогда 		
		ВыборкаПоСостояниям.Сбросить();
		
		// Немонопольные
		Пока ВыборкаПоСостояниям.НайтиСледующий(Перечисления.СостоянияСценария.Запланирован, "Состояние") Цикл
			ВыполнитьЗапросСценариевИЗапустить(ПараметрыАгента, ВыборкаПоСостояниям.Ссылка, ВыборкаПоСостояниям.ТестовыйПрогон, Ложь);
		КонецЦикла;
		
		ВыборкаПоСостояниям.Сбросить();
		Пока ВыборкаПоСостояниям.НайтиСледующий(Перечисления.СостоянияСценария.ТестСтартован, "Состояние") Цикл
			ВыполнитьЗапросСценариевИЗапустить(ПараметрыАгента, ВыборкаПоСостояниям.Ссылка, ВыборкаПоСостояниям.ТестовыйПрогон, Ложь);
		КонецЦикла;
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////
	// ИТЕРАЦИЯ V. Запуск фоновых сценариев
	ВыборкаШага.Сбросить();
	ВыборкаШага.НайтиСледующий(Перечисления.РежимВыполненияСценария.Фоновое, "РежимВыполнения");
	
	ВыборкаПоСостояниямФоновых = ВыборкаШага.Выбрать();
		
	Пока ВыборкаПоСостояниямФоновых.НайтиСледующий(Перечисления.СостоянияСценария.ВПроцессеОтката, "Состояние") Цикл
		ВыполнитьЗапросСценариевИЗапустить(ПараметрыАгента,  ВыборкаПоСостояниямФоновых.Ссылка, ВыборкаПоСостояниямФоновых.ТестовыйПрогон, Истина);	
	КонецЦикла;	
	
	ВыборкаПоСостояниямФоновых.Сбросить();
	Пока ВыборкаПоСостояниямФоновых.НайтиСледующий(Перечисления.СостоянияСценария.Стартован, "Состояние") Цикл
		ВыполнитьЗапросСценариевИЗапустить(ПараметрыАгента,  ВыборкаПоСостояниямФоновых.Ссылка, ВыборкаПоСостояниямФоновых.ТестовыйПрогон, Ложь);	
	КонецЦикла;	
	
	ВыборкаПоСостояниямФоновых.Сбросить();
	Пока ВыборкаПоСостояниямФоновых.НайтиСледующий(Перечисления.СостоянияСценария.Запланирован, "Состояние") Цикл
		ВыполнитьЗапросСценариевИЗапустить(ПараметрыАгента,  ВыборкаПоСостояниямФоновых.Ссылка, ВыборкаПоСостояниямФоновых.ТестовыйПрогон, Ложь);	
	КонецЦикла;	
	
	ВыборкаПоСостояниямФоновых.Сбросить();
	Пока ВыборкаПоСостояниямФоновых.НайтиСледующий(Перечисления.СостоянияСценария.ТестСтартован, "Состояние") Цикл
		ВыполнитьЗапросСценариевИЗапустить(ПараметрыАгента,  ВыборкаПоСостояниямФоновых.Ссылка, ВыборкаПоСостояниямФоновых.ТестовыйПрогон, Ложь);	
	КонецЦикла;	

КонецПроцедуры

Процедура ВыполнитьЗапросСценариевИЗапустить(ПараметрыАгента, ЭкземплярСценария, ЭтоТестовыйПрогон, ДляОтката)
	Запрос = Новый Запрос;
	Если ДляОтката Тогда
		Запрос.Текст = ПолучитьЗапросШаговВПроцессеОтката();
		Запрос.УстановитьПараметр("ТекущийЭкземпляр", ЭкземплярСценария);
		
		МассивНезапущенных = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьСостоянияНезапущенныхШагов();
		
		Запрос.УстановитьПараметр("Незапущенные", МассивНезапущенных);
		
	Иначе
		Запрос.Текст = ПолучитьЗапросШаговНеВПроцессеОтката();
		Запрос.УстановитьПараметр("ТекущийЭкземпляр", ЭкземплярСценария);
		Запрос.УстановитьПараметр("ЭтоТестовыйПрогон", ЭтоТестовыйПрогон);
	КонецЕсли;	

	
	ВыборкаСценариев = Запрос.Выполнить().Выгрузить();
					
	ИнициированоВыполнение = ВыполнениеСценарияДляАгента(ВыборкаСценариев, ПараметрыАгента, ЭтоТестовыйПрогон);
	Если ИнициированоВыполнение Тогда
		ПеревестиЭкземплярСценарияВСостояние(ЭкземплярСценария, ЭтоТестовыйПрогон);
	КонецЕсли;	
КонецПроцедуры	

Функция ПолучитьЗапросШаговВПроцессеОтката()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДанныеШагов.ИдентификаторШага КАК ИдентификаторШага,
	               |	ДанныеШагов.Команда КАК Команда,
	               |	ДанныеШагов.СостояниеШага КАК СостояниеШага,
	               |	ДанныеШагов.НомерШага КАК НомерШага,
	               |	ДанныеШагов.ТипШага КАК ТипШага,
	               |	ДанныеШагов.ВремяНачала КАК ВремяНачала,
	               |	ДанныеШагов.Сценарий КАК Сценарий,
	               |	ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка) КАК ШагРодитель,
	               |	ЗНАЧЕНИЕ(Перечисление.СостоянияШаговСценария.ПустаяСсылка) КАК СостояниеШагаРодителя,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовСхемыСценария.Старт) КАК ТипШагаРодителя,
	               |	ДанныеШагов.Оборудование КАК Оборудование
	               |ИЗ
	               |	РегистрСведений.СтруктураШаговСценария КАК ДанныеШагов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
	               |		ПО (ДанныеШагов.Сценарий = &ТекущийЭкземпляр)
	               |			И ДанныеШагов.Сценарий = СтруктураШаговСценария.Сценарий
	               |			И ДанныеШагов.ОткатываемыйШаг = СтруктураШаговСценария.ИдентификаторШага
	               |			И (НЕ СтруктураШаговСценария.СостояниеШага В (&Незапущенные))
	               |			И (ДанныеШагов.Использовать)
	               |			И (СтруктураШаговСценария.Использовать)
	               |ГДЕ
	               |	(ДанныеШагов.СостояниеШага = ЗНАЧЕНИЕ(Перечисление.СостоянияШаговСценария.НеВыполнялся)
	               |			ИЛИ ДанныеШагов.СостояниеШага = ЗНАЧЕНИЕ(Перечисление.СостоянияШаговСценария.Выполняется))
	               |	И ДанныеШагов.ОткатываемыйШаг <> ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДанныеШагов.НомерШага УБЫВ";
	
	Возврат ТекстЗапроса;
КонецФункции	

Функция ПолучитьЗапросШаговНеВПроцессеОтката()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага,
	               |	СтруктураШаговСценария.Команда КАК Команда,
	               |	СтруктураШаговСценария.СостояниеШага КАК СостояниеШага,
	               |	СтруктураШаговСценария.СостояниеШагаПриТесте КАК СостояниеШагаПриТесте,
	               |	СтруктураШаговСценария.НомерШага КАК НомерШага,
	               |	СтруктураШаговСценария.ТипШага КАК ТипШага,
	               |	СтруктураШаговСценария.ВремяНачала КАК ВремяНачала,
	               |	СтруктураШаговСценария.Сценарий КАК Сценарий,
	               |	ШагиАвтоматизации.Родитель КАК ШагРодитель,
	               |	СтруктураШаговСценария.Оборудование КАК Оборудование
	               |ПОМЕСТИТЬ ДанныеШаговАвтоматизации
	               |ИЗ
	               |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШагиАвтоматизации КАК ШагиАвтоматизации
	               |		ПО СтруктураШаговСценария.ИдентификаторШага = ШагиАвтоматизации.Ссылка
	               |			И (СтруктураШаговСценария.Сценарий = &ТекущийЭкземпляр)
	               |ГДЕ
	               |	((СтруктураШаговСценария.СостояниеШага = ЗНАЧЕНИЕ(Перечисление.СостоянияШаговСценария.НеВыполнялся)
	               |				ИЛИ СтруктураШаговСценария.СостояниеШага = ЗНАЧЕНИЕ(Перечисление.СостоянияШаговСценария.Выполняется))
	               |				И &ЭтоТестовыйПрогон = ЛОЖЬ
	               |			ИЛИ (СтруктураШаговСценария.СостояниеШагаПриТесте = ЗНАЧЕНИЕ(Перечисление.СостоянияШаговСценария.НеВыполнялся)
	               |				ИЛИ СтруктураШаговСценария.СостояниеШагаПриТесте = ЗНАЧЕНИЕ(Перечисление.СостоянияШаговСценария.Выполняется))
	               |				И &ЭтоТестовыйПрогон = ИСТИНА)
	               |	И СтруктураШаговСценария.Использовать
	               |	И СтруктураШаговСценария.ОткатываемыйШаг = ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ШагРодитель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеШагов.ИдентификаторШага КАК ИдентификаторШага,
	               |	ДанныеШагов.Команда КАК Команда,
	               |	ВЫБОР
	               |		КОГДА &ЭтоТестовыйПрогон = ЛОЖЬ
	               |			ТОГДА ДанныеШагов.СостояниеШага
	               |		ИНАЧЕ ДанныеШагов.СостояниеШагаПриТесте
	               |	КОНЕЦ КАК СостояниеШага,
	               |	ДанныеШагов.НомерШага КАК НомерШага,
	               |	ДанныеШагов.ТипШага КАК ТипШага,
	               |	ДанныеШагов.ВремяНачала КАК ВремяНачала,
	               |	ДанныеШагов.Сценарий КАК Сценарий,
	               |	ДанныеШагов.ШагРодитель КАК ШагРодитель,
	               |	ВЫБОР
	               |		КОГДА &ЭтоТестовыйПрогон = ЛОЖЬ
	               |			ТОГДА ДанныеШаговРодителя.СостояниеШага
	               |		ИНАЧЕ ДанныеШаговРодителя.СостояниеШагаПриТесте
	               |	КОНЕЦ КАК СостояниеШагаРодителя,
	               |	ДанныеШаговРодителя.ТипШага КАК ТипШагаРодителя,
	               |	ДанныеШагов.Оборудование КАК Оборудование
	               |ИЗ
	               |	ДанныеШаговАвтоматизации КАК ДанныеШагов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураШаговСценария КАК ДанныеШаговРодителя
	               |		ПО ДанныеШагов.ШагРодитель = ДанныеШаговРодителя.ИдентификаторШага
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДанныеШагов.НомерШага
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДанныеШаговАвтоматизации";

	Возврат ТекстЗапроса;
КонецФункции	

Процедура ПеревестиЭкземплярСценарияВСостояние(Экземпляр, ЭтоТестовыйПрогон) 
	ЦелевоеСостояние = ?(ЭтоТестовыйПрогон, Перечисления.СостоянияСценария.ТестСтартован, Перечисления.СостоянияСценария.Стартован);
	Если Экземпляр.Состояние <> Перечисления.СостоянияСценария.ВПроцессеОтката И Экземпляр.Состояние <> ЦелевоеСостояние Тогда
		ОбъектЭкземпляра = Экземпляр.ПолучитьОбъект();
		ОбъектЭкземпляра.Состояние = ЦелевоеСостояние;
		
		Если Не ЭтоТестовыйПрогон Тогда
			ОбъектЭкземпляра.ФактическаяДатаЗапуска = ТекущаяДатаСеанса();
		КонецЕсли;	
		
		НачатьТранзакцию();
		
		Попытка
			ОбъектЭкземпляра.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(НСтр("ru='Запись экземпляра сценария'", Метаданные.ОсновнойЯзык.КодЯзыка),
			       УровеньЖурналаРегистрации.Ошибка,,,
			       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		    ВызватьИсключение;
		КонецПопытки;	
	КонецЕсли;	
КонецПроцедуры	
	
Функция ВыполнениеСценарияДляАгента(Сценарий, ПараметрыАгента, ЭтоТестовыйПрогон)
	ИнициированоВыполнение = Ложь;
	
	// определим, параллельный это этап или последовательный
	// --если выполняем шаг, не подчиненный родителю, то это последовательное выполнение, иначе это ветка

	Агент = ПараметрыАгента.Ссылка;
	ШагДляВыполнения = Неопределено;
	
	Если ЭтоТестовыйПрогон Тогда
		РеквизитСостояние = "СостояниеШагаПриТесте";
		РеквизитДатаСтарта = "ДатаСтартаТеста";
		РеквизитДатаЗавершения = "ДатаЗавершенияТеста";
	Иначе
		РеквизитСостояние = "СостояниеШага";
		РеквизитДатаСтарта = "ДатаСтарта";
		РеквизитДатаЗавершения = "ДатаЗавершения";
	КонецЕсли;	

	ГруппировочныеШагиДляИзменения = Новый ТаблицаЗначений;
	ГруппировочныеШагиДляИзменения.Колонки.Добавить("ИдентификаторШага");
	ГруппировочныеШагиДляИзменения.Колонки.Добавить("Тип");
	ГруппировочныеШагиДляИзменения.Колонки.Добавить("ЦелевоеСостояние");
	ГруппировочныеШагиДляИзменения.Колонки.Добавить("Изменять");
	
	// Переход сценария на Новый шаг - операция целостная, выполняем в Транзакции
	НачатьТранзакцию();
	
	Попытка
		Для каждого СтрокаШага Из Сценарий Цикл
			Если СтрокаШага.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Старт Тогда
				Если ЭтоТестовыйПрогон ИЛИ ВремяНаступило(СтрокаШага.ВремяНачала) Тогда // для групповых проверяем время, если еще не пришло, прерываем
					СтрокаШага.СостояниеШагаРодителя = Перечисления.СостоянияШаговСценария.Выполнен;
					
					НоваяСтрока = ГруппировочныеШагиДляИзменения.Добавить();
					НоваяСтрока.ИдентификаторШага = СтрокаШага.ИдентификаторШага;
					НоваяСтрока.ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.Выполнен;
					НоваяСтрока.Тип = Перечисления.ТипыЭлементовСхемыСценария.Старт;
					НоваяСтрока.Изменять = Истина;
				Иначе
					Прервать;
				КонецЕсли;	
			ИначеЕсли СтрокаШага.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Разделение Тогда
				Если ГруппировочныеШагиДляИзменения.НайтиСтроки(Новый Структура("Тип, ЦелевоеСостояние", Перечисления.ТипыЭлементовСхемыСценария.Ветка, Перечисления.СостоянияШаговСценария.Выполняется)).Количество() = 0
					И ШагДляВыполнения = Неопределено
					И (ЭтоТестовыйПрогон ИЛИ ВремяНаступило(СтрокаШага.ВремяНачала)) Тогда
					// получим ветки
					СтрокиВетвей = Сценарий.НайтиСтроки(Новый Структура("ШагРодитель", СтрокаШага.ИдентификаторШага));
					
					НоваяСтрока = ГруппировочныеШагиДляИзменения.Добавить();
					НоваяСтрока.ИдентификаторШага = СтрокаШага.ИдентификаторШага;
					НоваяСтрока.Тип = Перечисления.ТипыЭлементовСхемыСценария.Разделение;
					НоваяСтрока.Изменять = Истина;

					Если СтрокиВетвей.Количество() > 0 Тогда
						НоваяСтрока.ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.Выполняется;
					Иначе // если веток нет, то это отвалившееся разделение, которое нужно просто завершить
						НоваяСтрока.ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.Выполнен;
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;	
			ИначеЕсли СтрокаШага.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Ветка Тогда
				
				СтрокиШагов = Сценарий.НайтиСтроки(Новый Структура("ШагРодитель", СтрокаШага.ИдентификаторШага));
				Если СтрокиШагов.Количество() > 0 Тогда 
					Если ГруппировочныеШагиДляИзменения.Найти(СтрокаШага.ШагРодитель) <> Неопределено
						И (ЭтоТестовыйПрогон ИЛИ ВремяНаступило(СтрокаШага.ВремяНачала)) Тогда
						НоваяСтрока = ГруппировочныеШагиДляИзменения.Добавить();
						НоваяСтрока.ИдентификаторШага = СтрокаШага.ИдентификаторШага;
						НоваяСтрока.ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.Выполняется;
						НоваяСтрока.Тип = Перечисления.ТипыЭлементовСхемыСценария.Ветка;
						НоваяСтрока.Изменять = Истина;
					Иначе
						Прервать;
					КонецЕсли;	
				Иначе // если шагов нет, то это отвалившееся разделение, которое нужно просто завершить
					НоваяСтрока = ГруппировочныеШагиДляИзменения.Добавить();
					НоваяСтрока.ИдентификаторШага = СтрокаШага.ИдентификаторШага;
					НоваяСтрока.ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.Выполнен;
					НоваяСтрока.Тип = Перечисления.ТипыЭлементовСхемыСценария.Ветка;
					НоваяСтрока.Изменять = Истина;
				КонецЕсли;
		       
			ИначеЕсли СтрокаШага.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Шаг Тогда
				// начинаем выполнять По одному	
				Если (((СтрокаШага.ТипШагаРодителя = Перечисления.ТипыЭлементовСхемыСценария.Старт Или СтрокаШага.ТипШагаРодителя = Перечисления.ТипыЭлементовСхемыСценария.ВспомогательныеШаги) 
						И ГруппировочныеШагиДляИзменения.НайтиСтроки(Новый Структура("Тип, ЦелевоеСостояние", Перечисления.ТипыЭлементовСхемыСценария.Ветка, Перечисления.СостоянияШаговСценария.Выполняется)).Количество() = 0) // обычный последовательный проход и нет активного ||
					Или (ГруппировочныеШагиДляИзменения.Найти(СтрокаШага.ШагРодитель) <> Неопределено)) Тогда // это один Из шагов ветви текущего параллельного шага и это первый активный параллельный шаг 
					Если  СтрокаШага.Оборудование = Агент Тогда 
						Если СтрокаШага.СостояниеШага = Перечисления.СостоянияШаговСценария.НеВыполнялся 
							И (ЭтоТестовыйПрогон Или ВремяНаступило(СтрокаШага.ВремяНачала)) Тогда
							// Создать команду Агента для шага
							ИнициированоВыполнение = СоздатьКомандуАгентаДляШага(СтрокаШага.ИдентификаторШага, ПараметрыАгента.ИмяОС, ЭтоТестовыйПрогон);
							
							Если ИнициированоВыполнение Тогда
								// поменяем в регистре
								НЗ = РегистрыСведений.СтруктураШаговСценария.СоздатьНаборЗаписей();
								НЗ.Отбор.ИдентификаторШага.Установить(СтрокаШага.ИдентификаторШага);
								
								НЗ.Прочитать();
								Для Каждого Запись Из НЗ Цикл
									Запись[РеквизитСостояние] = Перечисления.СостоянияШаговСценария.Выполняется;
									Запись[РеквизитДатаСтарта] = ТекущаяДатаСеанса();
								КонецЦикла;	
								
								НЗ.Записать();
							КонецЕсли;	
						
						КонецЕсли;
						
						ШагДляВыполнения = СтрокаШага.ИдентификаторШага;
					Иначе
						СтрокаВетви = ГруппировочныеШагиДляИзменения.Найти(СтрокаШага.ШагРодитель);
						Если СтрокаВетви <> Неопределено И СтрокаВетви.Тип <> Перечисления.ТипыЭлементовСхемыСценария.Старт Тогда // это шаг параллельной ветки от другого агента
							Если СтрокаВетви.ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.Выполняется 
								И СтрокаВетви.Изменять = Истина Тогда // менять статус ветки не нужно, это сделает Агент этого шага
								СтрокаВетви.Изменять = Ложь; 
							КонецЕсли;
						Иначе // Это последовательный шаг, выполняемый другим агентом. Дальше обходить нет смысла
							ШагДляВыполнения = СтрокаШага.ИдентификаторШага;
						КонецЕсли;	
					КонецЕсли;		
				КонецЕсли;	
			КонецЕсли;
			
			Если ШагДляВыполнения <> Неопределено Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	
		Для каждого СтрокаТаблицы Из ГруппировочныеШагиДляИзменения Цикл
			Если СтрокаТаблицы.Изменять Тогда
				Если ИнициированоВыполнение Или СтрокаТаблицы.ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.Выполнен Тогда
					
					НЗ = РегистрыСведений.СтруктураШаговСценария.СоздатьНаборЗаписей();
					НЗ.Отбор.ИдентификаторШага.Установить(СтрокаТаблицы.ИдентификаторШага);
					
					НЗ.Прочитать();
					Для Каждого Запись Из НЗ Цикл
						Если Запись[РеквизитСостояние] <> СтрокаТаблицы.ЦелевоеСостояние Тогда
							Запись[РеквизитСостояние] = СтрокаТаблицы.ЦелевоеСостояние;
							Если СтрокаТаблицы.ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.Выполняется 
								И Не ЗначениеЗаполнено(Запись[РеквизитДатаСтарта]) Тогда
								Запись[РеквизитДатаСтарта] = ТекущаяДатаСеанса();
							ИначеЕсли СтрокаТаблицы.ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.Выполнен Тогда
								Запись[РеквизитДатаЗавершения] = ТекущаяДатаСеанса();
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;	
					
					Если НЗ.Модифицированность() Тогда
						НЗ.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();					
		ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка),
						       УровеньЖурналаРегистрации.Ошибка,,,
						       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ИнициированоВыполнение = Ложь;
	КонецПопытки;	
	
	Возврат ИнициированоВыполнение;
КонецФункции

Функция ВремяНаступило(ВремяНачала)
	ТекДата = ТекущаяДатаСеанса();
	
	Возврат (ВремяНачала = '00010101' ИЛИ (Час(ТекДата)>Час(ВремяНачала) ИЛИ Час(ТекДата)=Час(ВремяНачала) И Минута(ТекДата)>=Минута(ВремяНачала)));
КонецФункции	

Функция СформироватьДополнительныеСведения(СтруктураОтветаОтАгента)
	
	ТекстСообщения = СтруктураОтветаОтАгента["message"];
	ПолучитьТекстСообщения(?(ТекстСообщения = Неопределено, "", ТекстСообщения), СтруктураОтветаОтАгента["subprocesses"], "message");
	
	ДопИнформация = СтруктураОтветаОтАгента["state_information"];
	ПолучитьТекстСообщения(?(ДопИнформация = Неопределено, "", ДопИнформация), СтруктураОтветаОтАгента["subprocesses"], "state_information");
	
	ДопСведения = "" + Формат(РаботаСоСценариямиАвтоматизацииСервер.ПолучитьТекущуюДатуСеанса(), "ДФ=HH:mm:ss") + "; state=" + СтруктураОтветаОтАгента["state"] + ?(ДопИнформация <> "", "; Msg=" + ДопИнформация, "") + ?(НРег(СтруктураОтветаОтАгента["state"]) <> "active" И НРег(СтруктураОтветаОтАгента["state"]) <> "finished", "; ErrMsg=" + ТекстСообщения,"");
	                                                                                                                                                                                                                                            
	Возврат ДопСведения;
КонецФункции

Процедура ПолучитьТекстСообщения(ТекстСообщения, Подпроцессы, Атрибут)
	Для Каждого Элемент Из Подпроцессы Цикл
		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения),"","; ") + Элемент[Атрибут];
		ПолучитьТекстСообщения(ТекстСообщения, Элемент["subprocesses"], Атрибут);
	КонецЦикла;	
КонецПроцедуры	

// Возможные значения state:
// --active
// --finished
// --recoverable error
// --script error
// --fatal error
// --interrupted
// --rolled back 
Функция  ПрисвоитьШагуСтатусВыполнения(УИД_КомандыАгента, Статус, ДопСведения = "<нет информации от Агента>") Экспорт
	Результат = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
	
		НаборЗаписей = РегистрыСведений.КомандыАгентаКИП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УникальныйИдентификаторЗаписи.Установить(УИД_КомандыАгента);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ТекстИсключения = "Не найдена запись с идентификатором " + УИД_КомандыАгента;
			ВызватьИсключение НСтр("ru='" + ТекстИсключения + "'");
			
		ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
			
			ТекЗапись = НаборЗаписей[0];
			
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(ТекЗапись.Команда);
			
			ПараметрыКоманды = ПрочитатьJSON(ЧтениеJSON, Истина);
			
			Шаг = Справочники.ШагиАвтоматизации.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыКоманды["stepGuid"]));
			
			Если Не Шаг.Пустая() Тогда
				ЭтоТестовыйПрогон = Ложь;
				ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.ФатальнаяОшибка;
				
				Если ПараметрыКоманды["mode"]= "start" Тогда
					ЭтоТестовыйПрогон = (ПараметрыКоманды["parameters"]["scriptParameters"]["test-mode"] = Истина);
					
					Если НРег(Статус) = "ok" ИЛИ НРег(Статус)="finished" Тогда
						ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.Выполнен;
					ИначеЕсли НРег(Статус) = "rolledback" Тогда
						ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.ВыполненОткат;
					ИначеЕсли НРег(Статус) = "recoverableerror" Тогда
						ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.Ошибка;	
					ИначеЕсли НРег(Статус) = "interrupted" Тогда
						ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.ВыполнениеПрервано;	
					Иначе
						ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.ФатальнаяОшибка; // если скрипт прерван на половине пути или произошла ошибка в скрипте, то состояние системы неизвестно... считаем, что все плохо
					КонецЕсли;
					
					// Добавлена проверка для вспомогательной ветки и тестового прогона
					// Здесь любой неуспех, кроме прерывания, считается условным
					Если ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.ФатальнаяОшибка
						Или ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.Ошибка
						Или ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.ВыполненОткат Тогда
						Если ЭтоТестовыйПрогон Тогда
							ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.ОшибкаБезПрерыванияВыполнения;
						Иначе	
							Запрос = Новый Запрос("ВЫБРАТЬ
							                      |	ШагиАвтоматизации.Ссылка КАК Ссылка,
							                      |	ШагиАвтоматизации.ТипШага КАК ТипШага
							                      |ИЗ
							                      |	Справочник.ШагиАвтоматизации КАК ШагиАвтоматизации
							                      |ГДЕ
							                      |	ШагиАвтоматизации.Ссылка = &Шаг
							                      |ИТОГИ ПО
							                      |	Ссылка ТОЛЬКО ИЕРАРХИЯ");
							Запрос.УстановитьПараметр("Шаг", Шаг);
							ВыборкаПервогоУровня = Запрос.Выполнить().Выгрузить();
							Если ВыборкаПервогоУровня.Количество() > 1 
								И ВыборкаПервогоУровня[1].ТипШага = Перечисления.ТипыЭлементовСхемыСценария.ВспомогательныеШаги Тогда
								ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.ОшибкаБезПрерыванияВыполнения;
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;	
				ИначеЕсли ПараметрыКоманды["mode"]= "interrupt" Тогда
					НаборЗаписейОтката = РегистрыСведений.КомандыАгентаКИП.СоздатьНаборЗаписей();
					ОткатываемыйШаг = ПараметрыКоманды["parameters"]["interruptedCommand"];
					
					НаборЗаписейОтката.Отбор.УникальныйИдентификаторЗаписи.Установить(Новый УникальныйИдентификатор(ОткатываемыйШаг));
					НаборЗаписейОтката.Прочитать();
					Если НаборЗаписейОтката.Количество() > 0 Тогда
						ТекЗаписьОтката = НаборЗаписейОтката[0];
						ЧтениеJSON = Новый ЧтениеJSON();
						ЧтениеJSON.УстановитьСтроку(ТекЗаписьОтката.Команда);
						
						ПараметрыКомандыОтката = ПрочитатьJSON(ЧтениеJSON, Истина);
					
						ЭтоТестовыйПрогон = (ПараметрыКомандыОтката["parameters"]["scriptParameters"]["test-mode"] = Истина);
					КонецЕсли;	
					
					Если НРег(Статус) = "ok" ИЛИ НРег(Статус)="finished" Тогда
						ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.ВыполнениеПрервано;
					Иначе
						ЦелевоеСостояние = Перечисления.СостоянияШаговСценария.ФатальнаяОшибка;
					КонецЕсли;
				КонецЕсли;	
				
				НЗ = РегистрыСведений.СтруктураШаговСценария.СоздатьНаборЗаписей();
				НЗ.Отбор.ИдентификаторШага.Установить(Шаг);
				НЗ.Прочитать();
				
				Если ЭтоТестовыйПрогон Тогда
					РеквизитСостояние = "СостояниеШагаПриТесте";
					РеквизитДатаОкончания = "ДатаЗавершенияТеста";
				Иначе
					РеквизитСостояние = "СостояниеШага";
					РеквизитДатаОкончания = "ДатаЗавершения";
				КонецЕсли;	
				
				Если НЗ.Количество()<>0 И НЗ[0][РеквизитСостояние] = Перечисления.СостоянияШаговСценария.Выполняется Тогда
					НЗ[0][РеквизитСостояние] = ЦелевоеСостояние;
					НЗ[0][РеквизитДатаОкончания] = ТекущаяДатаСеанса();
					
					Если ПараметрыКоманды["mode"]= "interrupt" Тогда
						НЗ[0].ДополнительнаяИнформация = "<interrupted> " + НЗ[0].ДополнительнаяИнформация;
					Иначе
						НЗ[0].ДополнительнаяИнформация = ДопСведения;
					КонецЕсли;	
					НЗ.Записать();
					
					// это откат и делаем изменение исходного шага в состояние Откачено
					Если ЗначениеЗаполнено(НЗ[0].ОткатываемыйШаг) И НЗ[0][РеквизитСостояние] = Перечисления.СостоянияШаговСценария.Выполнен Тогда
						НЗ_исходного = РегистрыСведений.СтруктураШаговСценария.СоздатьНаборЗаписей();
						НЗ_исходного.Отбор.ИдентификаторШага.Установить(НЗ[0].ОткатываемыйШаг);
						НЗ_исходного.Прочитать();
						Если НЗ_исходного.Количество() <> 0 Тогда
							НЗ_исходного[0][РеквизитСостояние] = Перечисления.СостоянияШаговСценария.ВыполненОткат;
							НЗ_исходного[0].ДополнительнаяИнформация = "<rolled back> " + НЗ_исходного[0].ДополнительнаяИнформация;
							
							НЗ_исходного.Записать();
						КонецЕсли;	
					КонецЕсли;
					
					Результат = Новый Структура("Шаг, ЭтоТестовыйПрогон, Состояние", Шаг, ЭтоТестовыйПрогон, НЗ[0][РеквизитСостояние]);	
				КонецЕсли;
			Иначе
				ТекстИсключения = "Не найден шаг сценария для команды автоматизации с идентификатором " + УИД_КомандыАгента;
				ВызватьИсключение НСтр("ru='" + ТекстИсключения + "'");
			КонецЕсли;
		Иначе
			ТекстИсключения = "Найдено несколько записей с идентификатором " + УИД_КомандыАгента;
			ВызватьИсключение НСтр("ru='" + ТекстИсключения + "'");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;		
	КонецПопытки;	

	Возврат Результат;
КонецФункции

Процедура ПрисвоитьРодительскимШагамСтатусВыполнения(ШагРодитель, ЭтоТестовыйПрогон)
	Если Не ШагРодитель.Пустая() Тогда
		НачатьТранзакцию();
	
		Попытка
		
			Если ЭтоТестовыйПрогон Тогда
				РеквизитСостояние = "СостояниеШагаПриТесте";
			Иначе
				РеквизитСостояние = "СостояниеШага";
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ШагиАвтоматизации.Ссылка КАК Ссылка
			                      |ПОМЕСТИТЬ ВсеДетиРодителя
			                      |ИЗ
			                      |	Справочник.ШагиАвтоматизации КАК ШагиАвтоматизации
			                      |ГДЕ
			                      |	ШагиАвтоматизации.Родитель = &Родитель;
								  |//////////////////////////////////////////////////////////////////
			                      |ВЫБРАТЬ
			                      |	СтруктураШаговСценария." + РеквизитСостояние + " КАК СостояниеШага,
			                      |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага
			                      |ИЗ
			                      |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
								  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДетиРодителя КАК ВсеДетиРодителя
			                      |		ПО СтруктураШаговСценария.ИдентификаторШага = ВсеДетиРодителя.Ссылка
			                      |ГДЕ
			                      |	СтруктураШаговСценария.Использовать
			                      | И СтруктураШаговСценария.ОткатываемыйШаг = ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка);
								  |//////////////////////////////////////////////////////////////////
								  |УНИЧТОЖИТЬ ВсеДетиРодителя");
			Запрос.УстановитьПараметр("Родитель", ШагРодитель);
			
			ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
			
			Выполненные = ТаблицаСостояний.НайтиСтроки(Новый Структура("СостояниеШага", Перечисления.СостоянияШаговСценария.Выполнен));
			
			НЗ = РегистрыСведений.СтруктураШаговСценария.СоздатьНаборЗаписей();
			НЗ.Отбор.ИдентификаторШага.Установить(ШагРодитель);
			НЗ.Прочитать();
			
			Если Выполненные.Количество() = ТаблицаСостояний.Количество() Тогда
				Для Каждого Запись Из НЗ Цикл
					Если Запись[РеквизитСостояние] <> Перечисления.СостоянияШаговСценария.Выполнен Тогда
						Запись[РеквизитСостояние] = Перечисления.СостоянияШаговСценария.Выполнен;
						Если НЕ ЭтоТестовыйПрогон Тогда
							Запись.ДатаЗавершения = ТекущаяДатаСеанса();
						Иначе
							Запись.ДатаЗавершенияТеста = ТекущаяДатаСеанса();
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;	
			Иначе
				// пока неясно как обрабатывать разлом при выполнении параллельного сценария
				// ...
			КонецЕсли;
			
			Если НЗ.Модифицированность() Тогда
				НЗ.Записать();
			КонецЕсли;
			
			ПрисвоитьРодительскимШагамСтатусВыполнения(ШагРодитель.Родитель, ЭтоТестовыйПрогон);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;		
		КонецПопытки;	
	КонецЕсли;
КонецПроцедуры	

Функция  ПолучитьШагИзКомандыАгента(УИД_КомандыАгента) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КомандыАгентаКИП.Команда КАК Команда
	                      |ИЗ
	                      |	РегистрСведений.КомандыАгентаКИП КАК КомандыАгентаКИП
	                      |ГДЕ
	                      |	КомандыАгентаКИП.УникальныйИдентификаторЗаписи = &УникальныйИдентификаторЗаписи");
	Запрос.УстановитьПараметр("УникальныйИдентификаторЗаписи", УИД_КомандыАгента);
	
	ВыборкаКоманд = Запрос.Выполнить().Выгрузить();
	
    
    Если ВыборкаКоманд.Количество() = 0 Тогда
        
        ВызватьИсключение НСтр("ru='Не найдена запись с идентификатором " + УИД_КомандыАгента + "'");
        
    ИначеЕсли ВыборкаКоманд.Количество() = 1 Тогда
        
        ТекЗапись = ВыборкаКоманд[0];
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ТекЗапись.Команда);
		
		ПараметрыКоманды = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		Шаг = Справочники.ШагиАвтоматизации.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыКоманды["stepGuid"]));

		ЭтоТестовыйПрогон = (ПараметрыКоманды["parameters"]["scriptParameters"]["test-mode"] = Истина);
		Если Не Шаг.Пустая() Тогда
			Возврат Шаг;
		Иначе
			ТекстИсключения = "Не найден шаг сценария для команды автоматизации с идентификатором " + УИД_КомандыАгента;
			ВызватьИсключение НСтр("ru='" + ТекстИсключения + "'");
		КонецЕсли;	
    Иначе
        ТекстИсключения = "Найдено несколько записей с идентификатором " + УИД_КомандыАгента;
        ВызватьИсключение НСтр("ru='" + ТекстИсключения + "'");
        
    КонецЕсли;

КонецФункции	

// структура вида: Шаг, ЭтоТестовыйПрогон, Состояние
Процедура ПривестиНеСтартованныеШагиКАктуальномуСостоянию(СтруктураПараметровВыполненногоШага) Экспорт
	Если СтруктураПараметровВыполненногоШага.Состояние = Перечисления.СостоянияШаговСценария.ВыполненОткат
		ИЛИ СтруктураПараметровВыполненногоШага.Состояние = Перечисления.СостоянияШаговСценария.Ошибка
		ИЛИ СтруктураПараметровВыполненногоШага.Состояние = Перечисления.СостоянияШаговСценария.ФатальнаяОшибка 
		ИЛИ СтруктураПараметровВыполненногоШага.Состояние = Перечисления.СостоянияШаговСценария.ВыполнениеПрервано Тогда
		
		НачатьТранзакцию();
		Попытка
		
			Сценарий = СтруктураПараметровВыполненногоШага.Шаг.Владелец;
			ЭтоОткат = ЗначениеЗаполнено(СтруктураПараметровВыполненногоШага.Шаг.ОткатываемыйШаг) И Сценарий.Состояние = Перечисления.СостоянияСценария.ВПроцессеОтката;
			
			Если СтруктураПараметровВыполненногоШага.ЭтоТестовыйПрогон Тогда
				РеквизитСостояние = "СостояниеШагаПриТесте";
			Иначе
				РеквизитСостояние = "СостояниеШага";
			КонецЕсли;	

			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага
			                      |ИЗ
			                      |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
								  |ГДЕ
			                      |	СтруктураШаговСценария.Сценарий = &Сценарий
								  | И СтруктураШаговСценария." + РеквизитСостояние + " = ЗНАЧЕНИЕ(Перечисление.СостоянияШаговСценария.НеВыполнялся)
			                      |	И СтруктураШаговСценария.Использовать
								  |	И (СтруктураШаговСценария.ОткатываемыйШаг <> ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка) И &ЭтоОткат
								  |		ИЛИ СтруктураШаговСценария.ОткатываемыйШаг = ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка) И НЕ &ЭтоОткат)");
			Запрос.УстановитьПараметр("Сценарий", Сценарий);
			Запрос.УстановитьПараметр("ЭтоОткат", ЭтоОткат);
			Запрос.УстановитьПараметр("ЭтоТестовыйПрогон",  СтруктураПараметровВыполненногоШага.ЭтоТестовыйПрогон);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Для каждого Строка Из Результат Цикл
				
				НЗ = РегистрыСведений.СтруктураШаговСценария.СоздатьНаборЗаписей();
				НЗ.Отбор.ИдентификаторШага.Установить(Строка.ИдентификаторШага);
				НЗ.Прочитать();
				
				
				Для каждого Запись Из НЗ Цикл
					Если СтруктураПараметровВыполненногоШага.Состояние = Перечисления.СостоянияШаговСценария.ВыполненОткат И Не ЭтоОткат Тогда
						Запись[РеквизитСостояние] = Перечисления.СостоянияШаговСценария.НеВыполнялсяВследствиеОтката;
					Иначе
						Запись[РеквизитСостояние] = Перечисления.СостоянияШаговСценария.НеВыполнялсяВследствиеОшибки;
					КонецЕсли;
				КонецЦикла;	 
				Если НЗ.Модифицированность() Тогда
					НЗ.Записать();
				КонецЕсли;
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;		
		КонецПопытки;	
	КонецЕсли;	
КонецПроцедуры	

// структура вида: Шаг, ЭтоТестовыйПрогон, Состояние
//в рамках данной процедуры производится перевод других шагов сценария и самого сценария в корректное (соответствующее результату текущего шага) состояние
Процедура УстановитьСостояниеЗавершенияСценария(СтруктураПараметровВыполненногоШага) Экспорт
    НачатьТранзакцию();
	
	Попытка
		Сценарий = СтруктураПараметровВыполненногоШага.Шаг.Владелец;
		СценарийОбъект = Сценарий.ПолучитьОбъект();
		
		// это точно не сценарий отката
		Если Сценарий.Состояние <> Перечисления.СостоянияСценария.ВПроцессеОтката 
			И НЕ ЗначениеЗаполнено(СтруктураПараметровВыполненногоШага.Шаг.ОткатываемыйШаг) Тогда 
			
			Если Сценарий.Состояние = Перечисления.СостоянияСценария.Стартован 
				ИЛИ Сценарий.Состояние = Перечисления.СостоянияСценария.ТестСтартован Тогда 
					Если СтруктураПараметровВыполненногоШага.ЭтоТестовыйПрогон Тогда
						РеквизитСостояние = "СостояниеШагаПриТесте";
					Иначе
						РеквизитСостояние = "СостояниеШага";
					КонецЕсли;	             
					Запрос = Новый Запрос("ВЫБРАТЬ
										  |	СтруктураШаговСценария." + РеквизитСостояние + " КАК СостояниеШага,
										  | СтруктураШаговСценария.ИдентификаторШага,
					                      |	ВЫБОР
					                      |		КОГДА СтруктураШаговСценарияОткат.ИдентификаторШага ЕСТЬ NULL
					                      |			ТОГДА ЛОЖЬ
					                      |		ИНАЧЕ ИСТИНА
					                      |	КОНЕЦ КАК ЕстьОткат,
					                      |	СтруктураШаговСценария.ТипШага КАК ТипШага
					                      |ИЗ
					                      |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
					                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценарияОткат
					                      |		ПО СтруктураШаговСценария.ИдентификаторШага = СтруктураШаговСценарияОткат.ОткатываемыйШаг
										  |			И СтруктураШаговСценарияОткат.Использовать
					                      |			И (НЕ СтруктураШаговСценария.СостояниеШага В (&Незапущенные))
					                      |ГДЕ
					                      |	СтруктураШаговСценария.Сценарий = &Сценарий
					                      |	И СтруктураШаговСценария.Использовать
					                      |	И СтруктураШаговСценария.ОткатываемыйШаг = ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)");
					Запрос.УстановитьПараметр("Сценарий", Сценарий);
					МассивНезапущенных = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьСостоянияНезапущенныхШагов();
					
					Запрос.УстановитьПараметр("Незапущенные", МассивНезапущенных);
					
					ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
					
					ВыполненныеШаги = ТаблицаСостояний.НайтиСтроки(Новый Структура("СостояниеШага, ТипШага", Перечисления.СостоянияШаговСценария.Выполнен, Перечисления.ТипыЭлементовСхемыСценария.Шаг));
					ОшибкиБезПрерывания = ТаблицаСостояний.НайтиСтроки(Новый Структура("СостояниеШага, ТипШага", Перечисления.СостоянияШаговСценария.ОшибкаБезПрерыванияВыполнения, Перечисления.ТипыЭлементовСхемыСценария.Шаг));
					ВсеШаги = ТаблицаСостояний.НайтиСтроки(Новый Структура("ТипШага", Перечисления.ТипыЭлементовСхемыСценария.Шаг));
					Если (ВыполненныеШаги.Количество() + ОшибкиБезПрерывания.Количество()) = ВсеШаги.Количество() Тогда
						// завершим потерянные ветки
						ПотерянныеВетки = ТаблицаСостояний.НайтиСтроки(Новый Структура("СостояниеШага", Перечисления.СостоянияШаговСценария.Выполняется));
						Для каждого Ветка Из ПотерянныеВетки Цикл
							НЗ = РегистрыСведений.СтруктураШаговСценария.СоздатьНаборЗаписей();
							НЗ.Отбор.ИдентификаторШага.Установить(Ветка.ИдентификаторШага);
							НЗ.Прочитать();
							
							Для каждого Запись Из НЗ Цикл
								Запись[РеквизитСостояние] = Перечисления.СостоянияШаговСценария.Выполнен;
							КонецЦикла;	 
							Если НЗ.Модифицированность() Тогда
								НЗ.Записать();
							КонецЕсли;
						КонецЦикла;
			
						Если НЕ СтруктураПараметровВыполненногоШага.ЭтоТестовыйПрогон Тогда
							Если ОшибкиБезПрерывания.Количество() = 0 Тогда
								СценарийОбъект.Состояние = Перечисления.СостоянияСценария.ЗавершенУспешно;
							Иначе
								СценарийОбъект.Состояние = Перечисления.СостоянияСценария.ЗавершенУсловноУспешно;
							КонецЕсли;	
							СценарийОбъект.ФактическаяДатаОкончания = ТекущаяДатаСеанса();
						Иначе
							Если ОшибкиБезПрерывания.Количество() = 0 Тогда
								СценарийОбъект.Состояние = Перечисления.СостоянияСценария.ТестЗавершенУспешно;
							Иначе
								СценарийОбъект.Состояние = Перечисления.СостоянияСценария.ТестЗавершенНеуспешно;
							КонецЕсли;	
							СценарийОбъект.ДатаОкончанияТеста = ТекущаяДатаСеанса();
						КонецЕсли;	
					Иначе
						Откаты = ТаблицаСостояний.Найти(Перечисления.СостоянияШаговСценария.ВыполненОткат);
						Ошибки = ТаблицаСостояний.Найти(Перечисления.СостоянияШаговСценария.Ошибка);
						ФатальныеОшибки = ТаблицаСостояний.Найти(Перечисления.СостоянияШаговСценария.ФатальнаяОшибка);
						Разломы = ТаблицаСостояний.Найти(Перечисления.СостоянияШаговСценария.ВыполнениеПрервано);
						// если не поломалось, то просто продолжается выполнение ветки
						Если Откаты <> Неопределено 
							ИЛИ Ошибки <> Неопределено
							ИЛИ ФатальныеОшибки <> Неопределено
							ИЛИ Разломы <> Неопределено Тогда
								Если НЕ СтруктураПараметровВыполненногоШага.ЭтоТестовыйПрогон Тогда
									// В случае фатального завершения или прерывания нужно пытаться откатить с помощью команд отката
									МаркерОтката = ТаблицаСостояний.Найти(Истина, "ЕстьОткат");
									НуженОткат = (МаркерОтката <> Неопределено);
									
									Если НуженОткат Тогда
										СценарийОбъект.Состояние = Перечисления.СостоянияСценария.ВПроцессеОтката;
									Иначе	
										Если ФатальныеОшибки <> Неопределено Тогда //в процессе отката любая ошибка фатальна
											СценарийОбъект.Состояние = Перечисления.СостоянияСценария.ЗавершенФатально;
										ИначеЕсли Разломы <> Неопределено Тогда
											СценарийОбъект.Состояние = Перечисления.СостоянияСценария.Прерван;
										Иначе	
											СценарийОбъект.Состояние = Перечисления.СостоянияСценария.ЗавершенНеУспешно;
										КонецЕсли;	
										СценарийОбъект.ФактическаяДатаОкончания = ТекущаяДатаСеанса();
									КонецЕсли;	
								Иначе
									СценарийОбъект.Состояние = Перечисления.СостоянияСценария.ТестЗавершенНеУспешно;
									СценарийОбъект.ДатаОкончанияТеста = ТекущаяДатаСеанса();	
								КонецЕсли;
						КонецЕсли;		
					КонецЕсли;
				КонецЕсли;	
		ИначеЕсли Сценарий.Состояние = Перечисления.СостоянияСценария.ВПроцессеОтката 
			И ЗначениеЗаполнено(СтруктураПараметровВыполненногоШага.Шаг.ОткатываемыйШаг) Тогда // а это точно сценарий отката
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага
			                      |ИЗ
			                      |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
								  |ГДЕ
			                      |	СтруктураШаговСценария.Сценарий = &Сценарий
								  | И СтруктураШаговСценария.СостояниеШага = ЗНАЧЕНИЕ(Перечисление.СостоянияШаговСценария.НеВыполнялся)
			                      |	И СтруктураШаговСценария.Использовать
								  |	И СтруктураШаговСценария.ОткатываемыйШаг <> ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)");
			Запрос.УстановитьПараметр("Сценарий", Сценарий);
			
			ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
			// шаг отката успешен, если он последний, то устанавливаем сценарию состояние "Выполнен откат"
			Если СтруктураПараметровВыполненногоШага.Состояние = Перечисления.СостоянияШаговСценария.Выполнен Тогда
				Если ТаблицаСостояний.Количество() = 0 Тогда
					СценарийОбъект.Состояние = Перечисления.СостоянияСценария.ЗавершенНеуспешно;
					СценарийОбъект.ФактическаяДатаОкончания = ТекущаяДатаСеанса();	
				КонецЕсли;	
			Иначе // шаг отката не успешен, установим оставшимся шагам отката состояние "Не выполнялся вследствие ошибки", сценарию - "Завершен фатально"
				СценарийОбъект.Состояние = Перечисления.СостоянияСценария.ЗавершенФатально;
				СценарийОбъект.ФактическаяДатаОкончания = ТекущаяДатаСеанса();	
			КонецЕсли;	
		Иначе // это то, на что алгоритм не рассчитывал (сценарий в неверном статусе/шаг неверно выбран/у шага неверный статус). Вызываем исключение
			ВызватьИсключение НСтр("ru='В процессе обработки результата выполнения шага произошла непредвиденная ситуация'");
		КонецЕсли;	
				
		Если СценарийОбъект.Модифицированность() Тогда
			СценарийОбъект.Записать();
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;		
	КонецПопытки;	

КонецПроцедуры	

Функция СоздатьКомандуАгентаДляШага(ИдентификаторШага, ИмяОС, ЭтоТестовыйПрогон)
	// значения параметров не перечитываются при начале выполнения
	// это нормально, пока не используются функции динамического расчета
	
	ИнициированоВыполнениеКоманды = Ложь;
	
	КонтурАвтоматизации = ИдентификаторШага.Владелец.КонтурАвтоматизации; 
	Если СтрНайти(ВРег(ИмяОС), "WINDOWS") > 0 Тогда
		КаталогСкриптовАвтоматизации = КонтурАвтоматизации.РабочийКаталогДляАвтоматизацииWIN;
		КаталогКонфигурационныхФайловАвтоматизации = КонтурАвтоматизации.КаталогКонфигурацийДляАвтоматизацииWIN;
		КорневойСкрипт = КонтурАвтоматизации.КорневойСкриптАвтоматизацииWIN;
		СловарьКоманд = КонтурАвтоматизации.СловарьКомандАвтоматизацииWIN;
	Иначе
		КаталогСкриптовАвтоматизации = КонтурАвтоматизации.РабочийКаталогДляАвтоматизацииLIN;
		КаталогКонфигурационныхФайловАвтоматизации = КонтурАвтоматизации.КаталогКонфигурацийДляАвтоматизацииLIN;
		КорневойСкрипт = КонтурАвтоматизации.КорневойСкриптАвтоматизацииLIN;
		СловарьКоманд = КонтурАвтоматизации.СловарьКомандАвтоматизацииLIN;
	КонецЕсли;
	
	Если РаботаСоСценариямиАвтоматизацииСервер.ПроверитьЗаполнениеПараметровКонтура(КонтурАвтоматизации, ИмяОС) Тогда
		// Получим полное формализованное описание команды
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СтруктураШаговСценария.Команда КАК Команда,
		                      |	ПараметрыШаговАвтоматизации.Параметр КАК Параметр,
		                      |	ПараметрыШаговАвтоматизации.Значение КАК Значение,
		                      |	СтруктураШаговСценария.Оборудование КАК Оборудование
		                      |ПОМЕСТИТЬ НеформализованныеПараметры
		                      |ИЗ
		                      |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыШаговАвтоматизации КАК ПараметрыШаговАвтоматизации
		                      |		ПО СтруктураШаговСценария.ИдентификаторШага = ПараметрыШаговАвтоматизации.ИдентификаторШага
		                      |ГДЕ
		                      |	СтруктураШаговСценария.ИдентификаторШага = &ИдентификаторШага
		                      |	И СтруктураШаговСценария.Использовать
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	НеформализованныеПараметры.Команда КАК Команда,
		                      |	НеформализованныеПараметры.Параметр КАК Параметр,
		                      |	КомандыАвтоматизацииПараметрыОбязательные.ПредставлениеПараметраВАгенте КАК ПредставлениеПараметраВАгенте,
		                      |	ИСТИНА КАК Обязательный
		                      |ПОМЕСТИТЬ ПараметрыКоманды
		                      |ИЗ
		                      |	НеформализованныеПараметры КАК НеформализованныеПараметры
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомандыАвтоматизации.ПараметрыОбязательные КАК КомандыАвтоматизацииПараметрыОбязательные
		                      |		ПО НеформализованныеПараметры.Команда = КомандыАвтоматизацииПараметрыОбязательные.Ссылка
		                      |			И НеформализованныеПараметры.Параметр = КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	НеформализованныеПараметры.Команда,
		                      |	НеформализованныеПараметры.Параметр,
		                      |	КомандыАвтоматизацииПараметрыДополнительные.ПредставлениеПараметраВАгенте,
		                      |	ЛОЖЬ
		                      |ИЗ
		                      |	НеформализованныеПараметры КАК НеформализованныеПараметры
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомандыАвтоматизации.ПараметрыДополнительные КАК КомандыАвтоматизацииПараметрыДополнительные
		                      |		ПО НеформализованныеПараметры.Команда = КомандыАвтоматизацииПараметрыДополнительные.Ссылка
		                      |			И НеформализованныеПараметры.Параметр = КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ЕСТЬNULL(ИнтерфейсАвтоматизацииСрезПоследних.КомандаДляАгента, """") КАК КомандаДляАгента,
		                      |	ЕСТЬNULL(ПараметрыКоманды.ПредставлениеПараметраВАгенте, """") КАК ПредставлениеПараметраВАгенте,
		                      |	НеформализованныеПараметры.Значение КАК Значение,
		                      |	НеформализованныеПараметры.Оборудование КАК Оборудование,
		                      |	ЕСТЬNULL(ПараметрыКоманды.Обязательный, НЕОПРЕДЕЛЕНО) КАК Обязательный,
		                      |	ВЫБОР
		                      |		КОГДА ЕСТЬNULL(ИнтерфейсАвтоматизацииСрезПоследних.ВерсияПоставки, ""0.0.0.0"") = """"
		                      |			ТОГДА ""0.0.0.0""
		                      |		ИНАЧЕ ЕСТЬNULL(ИнтерфейсАвтоматизацииСрезПоследних.ВерсияПоставки, ""0.0.0.0"")
		                      |	КОНЕЦ КАК ВерсияПоставки
		                      |ИЗ
		                      |	НеформализованныеПараметры КАК НеформализованныеПараметры
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрограммныйИнтерфейсАвтоматизации.СрезПоследних КАК ИнтерфейсАвтоматизацииСрезПоследних
		                      |		ПО НеформализованныеПараметры.Команда = ИнтерфейсАвтоматизацииСрезПоследних.Команда
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыКоманды КАК ПараметрыКоманды
		                      |		ПО НеформализованныеПараметры.Параметр = ПараметрыКоманды.Параметр
		                      |ИТОГИ ПО
		                      |	КомандаДляАгента");
		Запрос.УстановитьПараметр("ИдентификаторШага", ИдентификаторШага);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////
		ЭтоПервыйШаг = Ложь;

		ЗапросОпределенияПервогоШага = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                                            |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага,
		                                            |	СтруктураШаговСценария.ТипШага КАК ТипШага
		                                            |ИЗ
		                                            |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
		                                            |ГДЕ
		                                            |	(СтруктураШаговСценария.ТипШага = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовСхемыСценария.Шаг)
		                                            |			ИЛИ СтруктураШаговСценария.ТипШага = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовСхемыСценария.Разделение))
		                                            |	И СтруктураШаговСценария.Использовать
		                                            |	И СтруктураШаговСценария.Сценарий = &Сценарий
		                                            |
		                                            |УПОРЯДОЧИТЬ ПО
		                                            |	СтруктураШаговСценария.НомерШага");
		ЗапросОпределенияПервогоШага.УстановитьПараметр("Сценарий", ИдентификаторШага.Владелец);
		
		ВыборкаПервых = ЗапросОпределенияПервогоШага.Выполнить().Выбрать();
		Если ВыборкаПервых.Следующий() Тогда
			Если ВыборкаПервых.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Шаг Тогда
				Если ВыборкаПервых.ИдентификаторШага = ИдентификаторШага Тогда
					ЭтоПервыйШаг = Истина;
				КонецЕсли;	
			Иначе
				ВыборкаВетвей = Справочники.ШагиАвтоматизации.Выбрать(ВыборкаПервых.ИдентификаторШага);
				Пока ВыборкаВетвей.Следующий() Цикл
					ЗапросПервыхДляВетвей = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
					                                     |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага,
					                                     |	СтруктураШаговСценария.ТипШага КАК ТипШага
					                                     |ИЗ
					                                     |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
					                                     |ГДЕ
					                                     |	СтруктураШаговСценария.ИдентификаторШага.Родитель = &Ветка
					                                     |	И СтруктураШаговСценария.Использовать
					                                     |
					                                     |УПОРЯДОЧИТЬ ПО
					                                     |	СтруктураШаговСценария.НомерШага");
					ЗапросПервыхДляВетвей.УстановитьПараметр("Ветка", ВыборкаВетвей.Ссылка);
					ВыборкаПервыхДляВетвей = ЗапросПервыхДляВетвей.Выполнить().Выбрать();
					Если ВыборкаПервыхДляВетвей.Следующий() 
						И ВыборкаПервыхДляВетвей.ИдентификаторШага = ИдентификаторШага Тогда
						ЭтоПервыйШаг = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;		
	
		// ТУ ДУ: работа с версиями агента
		КомандаАвтоматизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОборудованиеАгентКИП = Неопределено;

		ПараметрыВыполненияКоманды = Новый Соответствие;
		ПараметрыВыполненияКоманды.Вставить("test-mode", ЭтоТестовыйПрогон);
		ПараметрыВыполненияКоманды.Вставить("restrict-initial-tests", Не ЭтоПервыйШаг);
		
		// отладочные параметры
		ОтладочныеПараметры = РегистрыСведений.ПараметрыОтладкиСкриптов.СоздатьНаборЗаписей();
		ОтладочныеПараметры.Прочитать();
		
		Для каждого Запись Из ОтладочныеПараметры Цикл
			ПараметрыВыполненияКоманды.Вставить(Строка(Запись.КлючОтладки), Запись.Включен);
		КонецЦикла;	
		
		Если КомандаАвтоматизации.Следующий() И КомандаАвтоматизации.КомандаДляАгента <> "" Тогда
			Параметры = КомандаАвтоматизации.Выбрать();
			
			Если Параметры.Количество() > 0 Тогда
				Пока Параметры.Следующий() Цикл
					ВерсияПоставки = Параметры.ВерсияПоставки;
					
					Если Параметры.ПредставлениеПараметраВАгенте <> "" Тогда
						ПараметрыВыполненияКоманды.Вставить(Параметры.ПредставлениеПараметраВАгенте, Параметры.Значение);
					КонецЕсли;	
					Если ОборудованиеАгентКИП = Неопределено Тогда
						ОборудованиеАгентКИП = Параметры.Оборудование;
					КонецЕсли;
				КонецЦикла;	
				
				ПараметрыЗапуска = Новый Структура;	
				ПараметрыЗапуска.Вставить("mainScript", КорневойСкрипт);
				ПараметрыЗапуска.Вставить("script", КорневойСкрипт);
				ПараметрыЗапуска.Вставить("workDirectory", КаталогСкриптовАвтоматизации);
				ПараметрыЗапуска.Вставить("scenarioDirectory", КаталогКонфигурационныхФайловАвтоматизации);
				ПараметрыЗапуска.Вставить("automationCommand", КомандаАвтоматизации.КомандаДляАгента);
				ПараметрыЗапуска.Вставить("dictionary", СловарьКоманд);
				ПараметрыЗапуска.Вставить("scriptParameters",  ПараметрыВыполненияКоманды);
				ПараметрыЗапуска.Вставить("requiredVersion",  ВерсияПоставки);

				
				ПараметрыКомандыАвтоматизации = Новый Структура;
				ПараметрыКомандыАвтоматизации.Вставить("Enable", Истина);
				ПараметрыКомандыАвтоматизации.Вставить("stepGuid", Строка(ИдентификаторШага.УникальныйИдентификатор()));
				ПараметрыКомандыАвтоматизации.Вставить("mode", "start");
				ПараметрыКомандыАвтоматизации.Вставить("parameters", ПараметрыЗапуска);
				
				РегистрыСведений.КомандыАгентаКИП.ДобавитьКоманду(ОборудованиеАгентКИП, Перечисления.ТипыКомандАгентаКИП.AutomationCommand, ПараметрыКомандыАвтоматизации); 
				
				ИнициированоВыполнениеКоманды = Истина;
			КонецЕсли;
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, "Не найдена необходимая команда или ее представление для выполнения Агентом");
		КонецЕсли;	
	Иначе
		ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Предупреждение,,, "Не заполнены необходимые параметры запуска сценариев");
	КонецЕсли;	
	
	Возврат ИнициированоВыполнениеКоманды;
КонецФункции
	
Процедура ПеревестиКомандуОбновленияВФинальноеСостояние(Агент, КонтурАдминистрирования, СтатусКомандыАгента, СообщениеАгента) Экспорт
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЗадачиОбновленияСценариевАдминистрирования.Агент КАК Агент,
		                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования КАК КонтурАдминистрирования,
		                      |	ЗадачиОбновленияСценариевАдминистрирования.Период КАК Период
		                      |ИЗ
		                      |	РегистрСведений.ЗадачиОбновленияСценариевАдминистрирования КАК ЗадачиОбновленияСценариевАдминистрирования
		                      |ГДЕ
		                      |	ЗадачиОбновленияСценариевАдминистрирования.Агент = &Агент
		                      |	И ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования = &КонтурАдминистрирования
		                      |	И ЗадачиОбновленияСценариевАдминистрирования.СтатусКоманды = &СтатусКоманды");
		Запрос.УстановитьПараметр("Агент", Агент);
		Запрос.УстановитьПараметр("КонтурАдминистрирования", КонтурАдминистрирования);
		Запрос.УстановитьПараметр("СтатусКоманды", Перечисления.СтатусыКоманд.Выполняется);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НЗ = РегистрыСведений.ЗадачиОбновленияСценариевАдминистрирования.СоздатьНаборЗаписей();
			НЗ.Отбор.Период.Установить(Выборка.Период);
			НЗ.Отбор.Агент.Установить(Выборка.Агент);
			НЗ.Отбор.КонтурАдминистрирования.Установить(Выборка.КонтурАдминистрирования);
			НЗ.Прочитать();
			
			Если НЗ.Количество() = 1 Тогда
				Запись = НЗ[0];
				Если СтатусКомандыАгента = Перечисления.СтатусыКомандАгентаКИП.Выполнена Тогда
					Запись.СтатусКоманды = Перечисления.СтатусыКоманд.Выполнена;
				ИначеЕсли СтатусКомандыАгента = Перечисления.СтатусыКомандАгентаКИП.Отменена Тогда
					Запись.СтатусКоманды = Перечисления.СтатусыКоманд.Отменена;
				Иначе
					Запись.СтатусКоманды = Перечисления.СтатусыКоманд.ВыполненаСОшибкой;
				КонецЕсли;
				
				Запись.ДатаВыполнения = ТекущаяДатаСеанса();
				
				Запись.ДополнительнаяИнформация = СообщениеАгента;
				
				НЗ.Записать();

			КонецЕсли;	
			
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;		
	КонецПопытки;	
КонецПроцедуры	

Процедура НайтиПотерянныеКомандыАвтоматизации(Агент) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КомандыАгентаКИП.АгентКИП КАК АгентКИП,
	                      |	КомандыАгентаКИП.ТипКоманды КАК ТипКоманды,
	                      |	КомандыАгентаКИП.УникальныйИдентификаторЗаписи КАК УникальныйИдентификаторЗаписи,
	                      |	КомандыАгентаКИП.СтатусКоманды КАК СтатусКоманды,
	                      |	КомандыАгентаКИП.Команда КАК Команда
	                      |ИЗ
	                      |	РегистрСведений.КомандыАгентаКИП КАК КомандыАгентаКИП
	                      |ГДЕ
	                      |	КомандыАгентаКИП.АгентКИП = &Агент
	                      |	И КомандыАгентаКИП.ТипКоманды = &ТипКоманды
	                      |	И КомандыАгентаКИП.СтатусКоманды = &СтатусКоманды");
	Запрос.УстановитьПараметр("Агент", Агент);
	Запрос.УстановитьПараметр("ТипКоманды", Перечисления.ТипыКомандАгентаКИП.AutomationCommand);
	Запрос.УстановитьПараметр("СтатусКоманды", Перечисления.СтатусыКомандАгентаКИП.Отправлена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Команда = Выборка.Команда;
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Команда);
		
		ПараметрыОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		Если ПараметрыОтвета["mode"] <> "selftuning" Тогда
			РегистрыСведений.КомандыАгентаКИП.УстановитьСтатусРезультатКоманды(Выборка.УникальныйИдентификаторЗаписи, Перечисления.СтатусыКомандАгентаКИП.Отменена, "");
			СтруктураПараметровШага = ПрисвоитьШагуСтатусВыполнения(Выборка.УникальныйИдентификаторЗаписи, "interrupted");
			Если СтруктураПараметровШага <> Неопределено Тогда
				ПривестиНеСтартованныеШагиКАктуальномуСостоянию(СтруктураПараметровШага);
				УстановитьСостояниеЗавершенияСценария(СтруктураПараметровШага);
			КонецЕсли;
		Иначе
			// перезапускаем потерянную команду самообновления
			РегистрыСведений.КомандыАгентаКИП.УстановитьСтатусРезультатКоманды(Выборка.УникальныйИдентификаторЗаписи, Перечисления.СтатусыКомандАгентаКИП.Отменена, "interrupted");
			ПеревестиКомандуОбновленияВФинальноеСостояние(Агент, Справочники.КонтурыАдминистрирования.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыОтвета["stepGuid"])), Перечисления.СтатусыКомандАгентаКИП.Отменена, "interrupted");
		КонецЕсли;	
		
	КонецЦикла;	
КонецПроцедуры	

Процедура ИнициализироватьСкрытыеДанные(ПараметрыОтвета) Экспорт
	Если ПараметрыОтвета <> Неопределено 
		И ПараметрыОтвета["ServicesData"] <> Неопределено
		И ПараметрыОтвета["ServicesData"]["RUN_PYTHON_SCRIPT"] <> Неопределено 
		И ПараметрыОтвета["ServicesData"]["RUN_PYTHON_SCRIPT"]["command"] <> Неопределено 
		И ПараметрыОтвета["ServicesData"]["RUN_PYTHON_SCRIPT"]["command"]["parameters"] <> Неопределено Тогда
		Если ПараметрыОтвета["ServicesData"]["RUN_PYTHON_SCRIPT"]["command"]["parameters"]["scriptParameters" ]<> Неопределено Тогда
			Для каждого КлючИЗначение Из ПараметрыОтвета["ServicesData"]["RUN_PYTHON_SCRIPT"]["command"]["parameters"]["scriptParameters"] Цикл
				Если КлючИЗначение.Значение = "*****" Тогда
					ШагСценария = Справочники.ШагиАвтоматизации.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыОтвета["ServicesData"]["RUN_PYTHON_SCRIPT"]["command"]["stepGuid"]));
					Запрос = Новый Запрос("ВЫБРАТЬ
					                      |	ПараметрыШаговАвтоматизации.ИдентификаторШага КАК ИдентификаторШага,
					                      |	ПараметрыШаговАвтоматизации.Команда КАК Команда,
					                      |	ПараметрыШаговАвтоматизации.Параметр КАК Параметр,
					                      |	ПараметрыШаговАвтоматизации.Значение КАК Значение,
					                      |	ПараметрыШаговАвтоматизации.ШаблонЗаполнения КАК ШаблонЗаполнения
					                      |ПОМЕСТИТЬ ПараметрыШага
					                      |ИЗ
					                      |	РегистрСведений.ПараметрыШаговАвтоматизации КАК ПараметрыШаговАвтоматизации
					                      |ГДЕ
					                      |	ПараметрыШаговАвтоматизации.ИдентификаторШага = &ИдентификаторШага
					                      |;
					                      |
					                      |////////////////////////////////////////////////////////////////////////////////
					                      |ВЫБРАТЬ
					                      |	ПараметрыШага.ШаблонЗаполнения КАК ИмяШаблона
					                      |ИЗ
					                      |	ПараметрыШага КАК ПараметрыШага
					                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомандыАвтоматизации.ПараметрыОбязательные КАК КомандыАвтоматизацииПараметрыОбязательные
					                      |		ПО ПараметрыШага.Команда = КомандыАвтоматизацииПараметрыОбязательные.Ссылка
					                      |			И ПараметрыШага.Параметр = КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра
					                      |			И (КомандыАвтоматизацииПараметрыОбязательные.ПредставлениеПараметраВАгенте = &Параметр)
					                      |ГДЕ
					                      |	ПараметрыШага.ШаблонЗаполнения <> """"
					                      |
					                      |ОБЪЕДИНИТЬ ВСЕ
					                      |
					                      |ВЫБРАТЬ
					                      |	ПараметрыШага.ШаблонЗаполнения
					                      |ИЗ
					                      |	ПараметрыШага КАК ПараметрыШага
					                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомандыАвтоматизации.ПараметрыДополнительные КАК КомандыАвтоматизацииПараметрыДополнительные
					                      |		ПО ПараметрыШага.Команда = КомандыАвтоматизацииПараметрыДополнительные.Ссылка
					                      |			И ПараметрыШага.Параметр = КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра
					                      |			И (КомандыАвтоматизацииПараметрыДополнительные.ПредставлениеПараметраВАгенте = &Параметр)
					                      |ГДЕ
					                      |	ПараметрыШага.ШаблонЗаполнения <> """"
					                      |;
					                      |
					                      |////////////////////////////////////////////////////////////////////////////////
					                      |УНИЧТОЖИТЬ ПараметрыШага");
					
					Запрос.УстановитьПараметр("ИдентификаторШага", ШагСценария);
					Запрос.УстановитьПараметр("Параметр", КлючИЗначение.Ключ);
					
					ВыборкаШаблона = Запрос.Выполнить().Выбрать();
					Если ВыборкаШаблона.Следующий() Тогда
						МЗ = РегистрыСведений.ШаблоныЗаполненияПараметровСценариев.СоздатьМенеджерЗаписи();
						МЗ.ЭкземплярСценария = ШагСценария.Владелец;
						МЗ.ИмяШаблона = ВыборкаШаблона.ИмяШаблона;
						МЗ.Прочитать();
						
						Если МЗ.Выбран() Тогда
							УстановитьПривилегированныйРежим(Истина);
							Объект = МЗ.Объект.Получить();
							Если ТипЗнч(Объект) = Тип("СправочникСсылка.ХранилищеКонфиденциальнойИнформации") Тогда
								ПараметрыОтвета["ServicesData"]["RUN_PYTHON_SCRIPT"]["command"]["parameters"]["scriptParameters"][КлючИЗначение.Ключ] = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(Строка(Объект.УникальныйИдентификатор()));
							КонецЕсли;
							УстановитьПривилегированныйРежим(Ложь);
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

#КонецОбласти

#Область РаботаПланировщика
Процедура ЗапуститьЗаданияПланировщикаПоРасписанию(ПараметрыАгента, ПроверятьРасписание) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаданияПланировщикаЕдиницыАвтоматизации.Ссылка КАК ЗаданиеПланировщика,
	                      |	ЗаданияПланировщикаЕдиницыАвтоматизации.Ссылка.ДействиеПланировщика КАК ДействиеПланировщика,
	                      |	ЗаданияПланировщикаЕдиницыАвтоматизации.Ссылка.Триггер КАК Триггер,
	                      |	ЕСТЬNULL(ЖурналВыполненияЗаданийПланировщикаСрезПоследних.Период, &ПустаяДата) КАК Период,
	                      |	ЗаданияПланировщикаЕдиницыАвтоматизации.Ссылка.КонтурАдминистрирования КАК КонтурАдминистрирования
	                      |ИЗ
	                      |	Справочник.ЗаданияПланировщика.ЕдиницыАвтоматизации КАК ЗаданияПланировщикаЕдиницыАвтоматизации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналВыполненияЗаданийПланировщика.СрезПоследних(, Агент = &Агент) КАК ЖурналВыполненияЗаданийПланировщикаСрезПоследних
	                      |		ПО ЗаданияПланировщикаЕдиницыАвтоматизации.Агент = ЖурналВыполненияЗаданийПланировщикаСрезПоследних.Агент
	                      |			И ЗаданияПланировщикаЕдиницыАвтоматизации.Ссылка = ЖурналВыполненияЗаданийПланировщикаСрезПоследних.ЗаданиеПланировщика
	                      |ГДЕ
	                      |	(ЖурналВыполненияЗаданийПланировщикаСрезПоследних.СостояниеЗадания <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданийПланировщика.Работает)
	                      |			ИЛИ ЖурналВыполненияЗаданийПланировщикаСрезПоследних.СостояниеЗадания ЕСТЬ NULL)
	                      |	И ЗаданияПланировщикаЕдиницыАвтоматизации.Запущено
	                      |	И ЗаданияПланировщикаЕдиницыАвтоматизации.Агент = &Агент");
	Запрос.УстановитьПараметр("Агент", ПараметрыАгента.Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущееВремяСеанса = НачалоМинуты(РаботаСоСценариямиАвтоматизацииСервер.ПолучитьТекущуюДатуСеанса());
	Пока Выборка.Следующий() Цикл
		Расписание = Выборка.Триггер.Получить();
		Если Не ПроверятьРасписание  Тогда
			СоздатьЭкземплярЗаданияПоРасписанию(Выборка.ЗаданиеПланировщика, Выборка.ДействиеПланировщика, ПараметрыАгента.Ссылка, Выборка.КонтурАдминистрирования, ТекущееВремяСеанса);
		ИначеЕсли Расписание <> Неопределено И Расписание.ТребуетсяВыполнение(ТекущееВремяСеанса, Выборка.Период) Тогда
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(Выборка.ЗаданиеПланировщика);
			ПараметрыЗадания.Добавить(Выборка.ДействиеПланировщика);
			ПараметрыЗадания.Добавить(ПараметрыАгента.Ссылка);
			ПараметрыЗадания.Добавить(Выборка.КонтурАдминистрирования);
			ПараметрыЗадания.Добавить(ТекущееВремяСеанса);
			
			// Если прошлый экземпляр задания еще выполняется, то стартовать новый не нужно 
			УИД_задания = Новый УникальныйИдентификатор();
			
			ФоновыеЗадания.Выполнить("РаботаСоСценариямиАвтоматизацииВзаимодействиеСАгентом.СоздатьЭкземплярЗаданияПоРасписанию", ПараметрыЗадания, "ЗаданиеПланировщика_"+ПараметрыАгента.Ссылка.Хост+"_"+УИД_задания, НСтр("ru='Запуск заданий планировщика для Агента'"));
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Процедура СоздатьЭкземплярЗаданияПоРасписанию(ЗаданиеПланировщика, ДействиеПланировщика, Агент, Контур, ТекущееВремяСеанса) Экспорт 
	Попытка
		// Отразим запись о запущенном задании в Журнал
		// Записываем в состояние Ошибка, переопределяем после успешного создания экземпляра
		НаборЗаписейЖурнала = РегистрыСведений.ЖурналВыполненияЗаданийПланировщика.СоздатьНаборЗаписей();
		НаборЗаписейЖурнала.Отбор.Агент.Установить(Агент);
		НаборЗаписейЖурнала.Отбор.ЗаданиеПланировщика.Установить(ЗаданиеПланировщика);
		НаборЗаписейЖурнала.Отбор.Период.Установить(ТекущееВремяСеанса);
		
		Запись = НаборЗаписейЖурнала.Добавить();
		Запись.Период = ТекущееВремяСеанса;
		Запись.Агент = Агент;
		Запись.ЗаданиеПланировщика = ЗаданиеПланировщика;
		Запись.КонтурАдминистрирования = Контур;
		Запись.СостояниеЗадания = Перечисления.СостоянияЗаданийПланировщика.Ошибка;
		
		НаборЗаписейЖурнала.Записать();
		УспешнаяЗаписьЖурнала = Истина;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Планировщик'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		УспешнаяЗаписьЖурнала = Ложь;
	КонецПопытки;
	
	
	Если УспешнаяЗаписьЖурнала Тогда	
		НачатьТранзакцию();
		
		Попытка
			Сценарий = ДействиеПланировщика.Действие;
			
			Экземпляр = Справочники.ЭкземплярыСценариевАвтоматизации.СоздатьЭлемент();
			Экземпляр.Владелец = Сценарий;
			Экземпляр.КонтурАвтоматизации = Контур;
			
			// задания планировщика всегда фоновые (не влияют на плановые сценарии в режиме монопольно/немонопольно) и на одной машине
			Экземпляр.РежимВыполнения = Перечисления.РежимВыполненияСценария.Фоновое;
			
			Экземпляр.Наименование = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьНаименованиеЭкземпляраСценария(Экземпляр);

			// загрузим шаблоны Агентов
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	СценарииАвтоматизацииШагиАвтоматизации.ШаблонЕдиницыОборудования КАК Шаблон,
			                      |	&Агент КАК РеальноеЗначение
			                      |ИЗ
			                      |	Справочник.СценарииАвтоматизации.ШагиАвтоматизации КАК СценарииАвтоматизацииШагиАвтоматизации
			                      |ГДЕ
			                      |	СценарииАвтоматизацииШагиАвтоматизации.Ссылка = &Сценарий
			                      |	И СценарииАвтоматизацииШагиАвтоматизации.ТипШага = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовСхемыСценария.Шаг)
			                      |	И СценарииАвтоматизацииШагиАвтоматизации.ШаблонЕдиницыОборудования <> """"
			                      |
			                      |СГРУППИРОВАТЬ ПО
			                      |	СценарииАвтоматизацииШагиАвтоматизации.ШаблонЕдиницыОборудования");
			
			Запрос.УстановитьПараметр("Сценарий", Сценарий);
			Запрос.УстановитьПараметр("Агент", Агент);
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Строка Из РезультатЗапроса Цикл
				НоваяСтрока = Экземпляр.СопоставлениеШаблоновОборудования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
			
			Экземпляр.Записать(); 	
			
			// создадим шаги
			ТаблицаШагов = РаботаСоСценариямиАвтоматизацииСервер.СоздатьЭлементыШаговАвтоматизации(Экземпляр.Ссылка, Сценарий);
			
			
			// заполним параметры, они прописываются в ДействииПланировщика и для всех запусков такого ЗаданияПланировщика одинаковы
			ПараметрыШаговДействия = ДействиеПланировщика.ПараметрыШагов;
			
			Для каждого Строка Из ТаблицаШагов Цикл
				Если Строка.ТипШага = Перечисления.ТипыЭлементовСхемыСценария.Шаг Тогда
					НЗ = РегистрыСведений.ПараметрыШаговАвтоматизации.СоздатьНаборЗаписей();
					НЗ.Отбор.ИдентификаторШага.Установить(Строка.ИдентификаторШага);
					
					Параметры = ПараметрыШаговДействия.НайтиСтроки(новый Структура("УникальныйИдентификаторШага", Строка.УникальныйИдентификаторШага));
					Для Каждого Параметр Из Параметры Цикл
						Запись = НЗ.Добавить();
						Запись.ИдентификаторШага = Строка.ИдентификаторШага;
						Запись.Команда = Строка.Команда;
						Запись.Параметр = Параметр.Параметр;
						Запись.Значение = Параметр.Значение;
					КонецЦикла;	
					
					НЗ.Записать();
				КонецЕсли;	
			КонецЦикла;
			
			// отразим запись о запущенном задании в Журнал
			НаборЗаписейЖурнала = РегистрыСведений.ЖурналВыполненияЗаданийПланировщика.СоздатьНаборЗаписей();
			НаборЗаписейЖурнала.Отбор.Агент.Установить(Агент);
			НаборЗаписейЖурнала.Отбор.ЗаданиеПланировщика.Установить(ЗаданиеПланировщика);
			НаборЗаписейЖурнала.Отбор.Период.Установить(ТекущееВремяСеанса);
			
			Запись = НаборЗаписейЖурнала.Добавить();
			Запись.Период = ТекущееВремяСеанса;
			Запись.Агент = Агент;
			Запись.ЗаданиеПланировщика = ЗаданиеПланировщика;
			Запись.КонтурАдминистрирования = Контур;
			Запись.СостояниеЗадания = Перечисления.СостоянияЗаданийПланировщика.Работает;
			Запись.ИсполняющийЭкземплярСценария = Экземпляр.Ссылка;
			
			НаборЗаписейЖурнала.Записать();
			
			// старт экземпляра
			Экземпляр.Состояние = Перечисления.СостоянияСценария.Стартован;
			Экземпляр.ФактическаяДатаЗапуска = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьТекущуюДатуСеанса();
			Экземпляр.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru='Планировщик'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры	
#КонецОбласти

#Область ВыполнениеКомандПрерыванияИОбслуживания
Процедура СоздатьКомандуПрерыванияВыполнения(ОборудованиеАгент, ИдентификаторШага, ПрерываемаяКоманда) Экспорт
	ПараметрыВыполненияКоманды = Новый Соответствие;

	ПараметрыЗапуска = Новый Структура;	
	ПараметрыЗапуска.Вставить("interruptedCommand", Строка(ПрерываемаяКоманда));

	
	ПараметрыКомандыАвтоматизации = Новый Структура;
	ПараметрыКомандыАвтоматизации.Вставить("Enable", Истина);
	ПараметрыКомандыАвтоматизации.Вставить("stepGuid", Строка(ИдентификаторШага));
	ПараметрыКомандыАвтоматизации.Вставить("mode", "interrupt");
	ПараметрыКомандыАвтоматизации.Вставить("parameters", ПараметрыЗапуска);
	
	РегистрыСведений.КомандыАгентаКИП.ДобавитьКоманду(ОборудованиеАгент, Перечисления.ТипыКомандАгентаКИП.AutomationCommand, ПараметрыКомандыАвтоматизации); 
	
КонецПроцедуры	

Функция ОбработатьЗаданиеНаОбновлениеСкриптов(ПараметрыАгента) Экспорт
	// Чтобы инициировать обновление должны выполняться условия:
	// -- должна быть сформирована задача в регистре сведений "ЗадачиОбновленияСценариевАдминистрирования"
	// -- если не "ТолькоПроверка" не должно быть запущенных Сценариев для этого агента
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.КаталогУстановкиWIN КАК КаталогУстановкиWIN,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.РабочийКаталогДляАвтоматизацииWIN КАК РабочийКаталогДляАвтоматизацииWIN,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.КаталогКонфигурацийДляАвтоматизацииWIN КАК КаталогКонфигурацийДляАвтоматизацииWIN,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.КорневойСкриптАвтоматизацииWIN КАК КорневойСкриптАвтоматизацииWIN,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.СловарьКомандАвтоматизацииWIN КАК СловарьКомандАвтоматизацииWIN,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.КаталогУстановкиLIN КАК КаталогУстановкиLIN,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.РабочийКаталогДляАвтоматизацииLIN КАК РабочийКаталогДляАвтоматизацииLIN,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.КаталогКонфигурацийДляАвтоматизацииLIN КАК КаталогКонфигурацийДляАвтоматизацииLIN,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.КорневойСкриптАвтоматизацииLIN КАК КорневойСкриптАвтоматизацииLIN,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.СловарьКомандАвтоматизацииLIN КАК СловарьКомандАвтоматизацииLIN,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.ТолькоПроверка КАК ТолькоПроверка,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.ДистрибутивWin КАК ДистрибутивWin,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.ДистрибутивLin КАК ДистрибутивLin,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.СтатусКоманды КАК СтатусКоманды,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования КАК КонтурАдминистрирования,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.ДистрибутивPythonWin КАК ДистрибутивPythonWin,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.ДистрибутивPythonLin КАК ДистрибутивPythonLin,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.Период КАК Период,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.УстановкаПоУмолчаниюWin КАК УстановкаПоУмолчаниюWin,
	                      |	ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.УстановкаПоУмолчаниюLinux КАК УстановкаПоУмолчаниюLinux
	                      |ИЗ
	                      |	РегистрСведений.ЗадачиОбновленияСценариевАдминистрирования КАК ЗадачиОбновленияСценариевАдминистрирования
	                      |ГДЕ
	                      |	ЗадачиОбновленияСценариевАдминистрирования.Агент = &Агент
	                      |	И (ЗадачиОбновленияСценариевАдминистрирования.СтатусКоманды = ЗНАЧЕНИЕ(Перечисление.СтатусыКоманд.Сформирована)
	                      |			ИЛИ ЗадачиОбновленияСценариевАдминистрирования.СтатусКоманды = ЗНАЧЕНИЕ(Перечисление.СтатусыКоманд.Выполняется))
	                      |	И НЕ ЗадачиОбновленияСценариевАдминистрирования.КонтурАдминистрирования.УстановкаПоУмолчаниюWin ЕСТЬ NULL");
	Запрос.УстановитьПараметр("Агент", ПараметрыАгента.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		ЗаданияНаОбновление = Результат.Выгрузить();
		Если ЗаданияНаОбновление.Количество() > 0 И ЗаданияНаОбновление.Найти(Перечисления.СтатусыКоманд.Выполняется, "СтатусКоманды") = Неопределено Тогда // иначе есть незавершенная задача
			// Ищем активные сценарии. Если не находим инициируем обновление
			Если Не РаботаСоСценариямиАвтоматизацииСервер.ЕстьАктивныеЭкземплярыСценариевДляАгента(ПараметрыАгента.Ссылка) Тогда
				// Можно обновлять
				ПараметрыЗадачиОбновления = ЗаданияНаОбновление[0];
				Если СтрНайти(ВРег(ПараметрыАгента.ИмяОС), "WINDOWS") > 0 Тогда
					КаталогСкриптовАвтоматизации = ПараметрыЗадачиОбновления.РабочийКаталогДляАвтоматизацииWIN;
					КаталогКонфигурационныхФайловАвтоматизации = ПараметрыЗадачиОбновления.КаталогКонфигурацийДляАвтоматизацииWIN;
					КорневойСкрипт = ПараметрыЗадачиОбновления.КорневойСкриптАвтоматизацииWIN;
					СловарьКоманд = ПараметрыЗадачиОбновления.СловарьКомандАвтоматизацииWIN;
					КаталогУстановки = ?(ПараметрыЗадачиОбновления.УстановкаПоУмолчаниюWin, Неопределено, ПараметрыЗадачиОбновления.КаталогУстановкиWIN);
					КаталогДистрибутива = ПараметрыЗадачиОбновления.ДистрибутивWin;
					КаталогPython = ПараметрыЗадачиОбновления.ДистрибутивPythonWin;
				Иначе
					КаталогСкриптовАвтоматизации = ПараметрыЗадачиОбновления.РабочийКаталогДляАвтоматизацииLIN;
					КаталогКонфигурационныхФайловАвтоматизации = ПараметрыЗадачиОбновления.КаталогКонфигурацийДляАвтоматизацииLIN;
					КорневойСкрипт = ПараметрыЗадачиОбновления.КорневойСкриптАвтоматизацииLIN;
					СловарьКоманд = ПараметрыЗадачиОбновления.СловарьКомандАвтоматизацииLIN;
					КаталогУстановки = ?(ПараметрыЗадачиОбновления.УстановкаПоУмолчаниюLinux, Неопределено, ПараметрыЗадачиОбновления.КаталогУстановкиLIN);
					КаталогДистрибутива = ПараметрыЗадачиОбновления.ДистрибутивLin;
					КаталогPython = ПараметрыЗадачиОбновления.ДистрибутивPythonLin;
				КонецЕсли;
				
				Если РаботаСоСценариямиАвтоматизацииСервер.ПроверитьЗаполнениеПараметровКонтура(ЗаданияНаОбновление[0].КонтурАдминистрирования, ПараметрыАгента.ИмяОС) Тогда
					
						ПараметрыЗапуска = Новый Структура;	
						ПараметрыЗапуска.Вставить("distrSource", КаталогДистрибутива);
						ПараметрыЗапуска.Вставить("pythonDistrSource", КаталогPython);
						ПараметрыЗапуска.Вставить("setupFolder", КаталогУстановки);
						ПараметрыЗапуска.Вставить("workDirectory", КаталогСкриптовАвтоматизации);
						ПараметрыЗапуска.Вставить("scenarioDirectory", КаталогКонфигурационныхФайловАвтоматизации);
						ПараметрыЗапуска.Вставить("mainScript", КорневойСкрипт);
						ПараметрыЗапуска.Вставить("dictionary", СловарьКоманд);
						ПараметрыЗапуска.Вставить("testMode", ПараметрыЗадачиОбновления.ТолькоПроверка);
						
						
						ПараметрыКомандыАвтоматизации = Новый Структура;
						ПараметрыКомандыАвтоматизации.Вставить("Enable", Истина);
						ПараметрыКомандыАвтоматизации.Вставить("mode", "selftuning");
						ПараметрыКомандыАвтоматизации.Вставить("stepGuid",  Строка(ПараметрыЗадачиОбновления.КонтурАдминистрирования.УникальныйИдентификатор()));
						ПараметрыКомандыАвтоматизации.Вставить("parameters", ПараметрыЗапуска);
						
						НачатьТранзакцию();
						Попытка
							РегистрыСведений.КомандыАгентаКИП.ДобавитьКоманду(ПараметрыАгента.Ссылка, Перечисления.ТипыКомандАгентаКИП.AutomationCommand, ПараметрыКомандыАвтоматизации); 
							
							НЗ = РегистрыСведений.ЗадачиОбновленияСценариевАдминистрирования.СоздатьНаборЗаписей();
							НЗ.Отбор.Период.Установить(ПараметрыЗадачиОбновления.Период);
							НЗ.Отбор.Агент.Установить(ПараметрыАгента.Ссылка);
							НЗ.Отбор.КонтурАдминистрирования.Установить(ПараметрыЗадачиОбновления.КонтурАдминистрирования);
							НЗ.Прочитать();
							
							Для каждого Запись Из Нз Цикл
								Запись.СтатусКоманды = Перечисления.СтатусыКоманд.Выполняется;
							КонецЦикла;	
							
							НЗ.Записать();
							
							ЗафиксироватьТранзакцию();
						Исключение
							ОтменитьТранзакцию();
							
							ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							ВызватьИсключение;		
						КонецПопытки;
					Возврат Истина;
				Иначе		
					ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Предупреждение,,, "Не заполнены необходимые параметры запуска сценариев для Контура :" + ЗаданияНаОбновление[0].КонтурАдминистрирования);
				КонецЕсли;
			Иначе
				ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Предупреждение,,, "Не запущен процесс обновления скриптов, т.к. есть активные экземпляры сценариев для Агента :" + ПараметрыАгента.Ссылка);
				Возврат Ложь;
			КонецЕсли; 		
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("ru='Выполнение сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Предупреждение,,, "Выполняется задача обновления скриптов для Агента :" + ПараметрыАгента.Ссылка);
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;
КонецФункции	
#КонецОбласти

#Область ДляАсинхронногоВыполнения
// заготовка для асинхронной обработки результатов команды
Процедура ЗапуститьОбработкуРезультатаКоманды(Агент, УИД_КомандыАгента, Параметры) Экспорт
	Ключ = "ВыполнениеСценарияАвтоматизации_" + Параметры.Сценарий;
	Наименование = "Выполнение сценария автоматизации " + Параметры.Наименование;
    
    Отбор = Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно);
    ФоновыеЗаданияМассив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
    Если ФоновыеЗаданияМассив.Количество() = 0 Тогда
	    НовоеФоновое = ФоновыеЗадания.Выполнить("РаботаСоСценариямиАвтоматизацииВзаимодействиеСАгентом.ВыполнитьСценарийАвтоматизацииАсинхронно", Параметры, Ключ, Наименование);
		
		НЗ = РегистрыСведений.АсинхронноеВыполнениеСценариев.СоздатьНаборЗаписей();
		НЗ.Отбор.Агент.Установить(Агент);
		НЗ.Отбор.ТипКоманды.Установить(Перечисления.ТипыКомандАгентаКИП.AutomationCommand);
		НЗ.Отбор.УникальныйИдентификаторКоманды.Установить(УИД_КомандыАгента);
		
		НЗ.Прочитать();
		Если НЗ.Количество() > 0 Тогда
			НЗ[0].ФоновоеЗадание = НовоеФоновое.УникальныйИдентификатор;
		Иначе
			Запись = НЗ.Добавить();
			Запись.Агент = Агент;
			Запись.ТипКоманды = Перечисления.ТипыКомандАгентаКИП.AutomationCommand;
			Запись.УникальныйИдентификаторКоманды = УИД_КомандыАгента;
			Запись.ФоновоеЗадание = НовоеФоновое.УникальныйИдентификатор;
		КонецЕсли;
		НЗ.Записать();
    КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьСценарийАвтоматизацииАсинхронно() Экспорт
	
КонецПроцедуры

#КонецОбласти
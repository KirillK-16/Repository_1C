
#Область ПрограммныйИнтерфейс

// Определяет тип инцидента.
//
// Параметры:
//  ТипИнцидента     - Строка - наименование типа инцидента.
//  УровеньИнцидента - ПеречислениеСсылка.УровниИнцидентов - уровень инцидента.
//  Подсистема       - Строка - подсистема (необязательный).
// 
// Возвращаемое значение:
//  СправочникСсылка.ТипыИнцидентов - ссылка на тип инцидента. 
//
Функция ОпределитьТипИнцидента(Знач ТипИнцидента, Знач УровеньИнцидента, Знач Подсистема = "") Экспорт
    
	Попытка
        
        Параметры = Новый Структура("УровеньИнцидента, Подсистема", УровеньИнцидента, Подсистема);
        ТипИнцидентаСсылка = Справочники.ТипыИнцидентов.СоздатьЭлементПоНаименованию(ТипИнцидента, Параметры);
        
        ТипИнцидентаОбъект = ТипИнцидентаСсылка.ПолучитьОбъект(); 
		ТипИнцидентаОбъект.Наименование = ТипИнцидента;
		ТипИнцидентаОбъект.Подсистема = Подсистема;
		ТипИнцидентаОбъект.УровеньИнцидента = УровеньИнцидента;
        
        ТипИнцидентаОбъект.Записать();
				
		Возврат ТипИнцидентаОбъект.Ссылка;
	
	Исключение
		
		ОбъектОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("ИнцидентыСервер.ОпределитьТипИнцидента", 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ОбъектОшибки)
		);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецФункции

// Открывает инцидент.
//
// Параметры:
//  ТипИнцидента       - Строка, СправочникСсылка.ТипИнциденты - тип инцидента, если строка, то в случае отсутствия создается новый.
//  КодИнцидента       - Строка, СправочникСсылка.Инциденты    - код инцидента, если строка, то вслучае отсутствия создается новый.
//  Инфобаза           - Строка                                - часть строки(макс. 300) подключения панели инцидентов, формируется как "Кластер\Инфобаза".
//  Кластер            - Строка                                - часть строки(макс. 50) подключения панели инцидентов, формируется как "Кластер\Инфобаза".
//  Сообщение          - Строка                                - сообщение инцидента.
//  ЧислоСрабатываний  - Число                                 - количество срабатываний инцидента.
//  ЭтоНовый           - Булево                                - признак нового инцидента, значение по умолчанию ЛОЖЬ.
//  НеОповещать        - Булево                                - признак отключения оповещения, значение по умолчанию ЛОЖЬ.
//  УровеньИнцидента   - Перечисление.УровниИнцидентов         - уровень инцидента при открытии, по умолчанию Неопределено, при неопределено
//                                                               значение берется их типа инцидента.
//  ИсточникИнцидента  - Строка                                - строковое представление источника, по умолчанию пустая строка.
//  НавигационнаяСсылкаИсточника - НавигационнаяСсылка         - навигационная ссылка источника.
//  ДатаОткрытия       - Дата                                  - Дата открытия инцидента, если она отличается от текущей.
//
Процедура ОткрытьИнцидент(Знач ТипИнцидента, Знач КодИнцидента, Знач Инфобаза, Знач Кластер, Знач Сообщение, Знач ЧислоСрабатываний, Знач ЭтоНовый = Ложь, Знач НеОповещать = Ложь, УровеньИнцидента = Неопределено, ИсточникИнцидента = "", НавигационнаяСсылкаИсточника = Неопределено, ДатаОткрытия = Неопределено) Экспорт
    
    ТипСтрока = Тип("Строка");
    
    Если НавигационнаяСсылкаИсточника = Неопределено Тогда
        НавигационнаяСсылкаИсточника = Новый Структура("НавигационнаяСсылка, Представление", "", "");
    КонецЕсли;
        
	Если ТипЗнч(ТипИнцидента) = ТипСтрока Тогда
        ПараметрыИнцидента = Неопределено;
        Если УровеньИнцидента <> Неопределено Тогда
            ПараметрыИнцидента = Новый Структура("УровеньИнцидента", УровеньИнцидента);
        КонецЕсли;
        ТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоНаименованию(ТипИнцидента, ПараметрыИнцидента);
    КонецЕсли;
    
    Если ТипЗнч(КодИнцидента) = ТипСтрока Тогда
        Инцидент = Справочники.Инциденты.СоздатьЭлементПоНаименованию(КодИнцидента);
    Иначе
        Инцидент = КодИнцидента;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Инцидент) Тогда
        ВызватьИсключение "Не найден инцидент по коду " + КодИнцидента;
    КонецЕсли;
    
    Если ДатаОткрытия = Неопределено Тогда
        ТекДата = ТекущаяДатаСеанса();
    Иначе
        ТекДата = ДатаОткрытия;
    КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
        
        Если УровеньИнцидента = Неопределено Тогда
			УровеньИнцидента = ТипИнцидента.УровеньИнцидента;
		КонецЕсли;
		
		ЗаблокироватьИнцидент(КодИнцидента);
        
        Запись = РегистрыСведений.Инциденты.СоздатьМенеджерЗаписи();
        Запись.ТипИнцидента = ТипИнцидента;
        Запись.Инцидент = Инцидент;
        Запись.Прочитать();
        
        ЭтоНовый = Истина;
        Если Запись.Выбран() Тогда
            ЭтоНовый = (Запись.Статус = Перечисления.СтатусыИнцидентов.Закрыто ИЛИ Запись.Статус = Перечисления.СтатусыИнцидентов.Неактуальный);
        КонецЕсли;
        
        Если ЭтоНовый Тогда
            Запись.Ответственный = ТипИнцидента.Ответственный;
            Запись.ДатаОткрытияПовторная = ТекДата;
            Запись.ЧислоСрабатыванийПовторное = 0;
        КонецЕсли;
        
        Запись.ТипИнцидента = ТипИнцидента;
        Запись.Инцидент = Инцидент;
        Запись.Статус = Перечисления.СтатусыИнцидентов.НовыйИнцидент;
        Запись.ПоследнееСрабатывание = ТекДата;
        Запись.ДатаЗакрытия = Дата(1,1,1);
        Запись.ЧислоСрабатываний = Запись.ЧислоСрабатываний + МАКС(1, ЧислоСрабатываний);
        Запись.ЧислоСрабатыванийПовторное = Запись.ЧислоСрабатыванийПовторное + МАКС(1, ЧислоСрабатываний);
        Запись.ИнформационнаяБаза = ИнфоБаза;
        Запись.Кластер = Кластер;
        Запись.ПодробноеСообщение = Сообщение;
        Запись.УровеньИнцидента = УровеньИнцидента;
        Запись.ИсточникИнцидента = ИсточникИнцидента;
        Запись.НавигационнаяСсылкаИсточника = НавигационнаяСсылкаИсточника.НавигационнаяСсылка;
        Запись.ПредставлениеНавигационнойСсылкиИсточника = НавигационнаяСсылкаИсточника.Представление;
                
        Запись.Записать(Истина);
        ДобавитьИсториюИнцидента(Запись, ТекДата);
        Если ЭтоНовый Тогда
            РегистрыСведений.ИнцидентыАктивные.Добавить(ТипИнцидента, Инцидент);
        КонецЕсли;
        
        ЗафиксироватьТранзакцию();

	Исключение
        
        ОтменитьТранзакцию();
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ИнцидентыСервер.ОткрытьИнцидент",УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		ВызватьИсключение;

	КонецПопытки;
	
КонецПроцедуры

// Закрывает инцидент.
//
// Параметры:
//  ТипИнцидента - Строка, СправочникСсылка.ТипИнциденты - Тип инцидента, если строка, то в случае отсутствия создается новый.
//  Инцидент     - Строка, СправочникСсылка.Инциденты    - Код инцидента, если строка, то вслучае отсутствия создается новый.
//  Извне        - Булево                                - Признак автоматического закрытия инцидента.
//  Сообщение    - Строка                                - Сообщение при закрытии инцидента.
//  ДатаЗакрытия - Дата                                  - Дата закрытия инцидента, если она отличается от текущей.
//
Процедура ЗакрытьИнцидент(Знач ТипИнцидента, Знач Инцидент, Знач Извне, Сообщение = Неопределено, ДатаЗакрытия = Неопределено) Экспорт
    
    Если ДатаЗакрытия = Неопределено Тогда
        ТекДата = ТекущаяДатаСеанса();
    Иначе
        ТекДата = ДатаЗакрытия;
    КонецЕсли;
    
    Если ТипЗнч(ТипИнцидента) = Тип("Строка") Тогда
        ТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоНаименованию(ТипИнцидента);
    КонецЕсли;
    
    Если ТипЗнч(Инцидент) = Тип("Строка") Тогда
        Инцидент = Справочники.Инциденты.НайтиСсылкуПоНаименованию(Инцидент);
    КонецЕсли;
        
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Инцидент
	|ИЗ
	|	РегистрСведений.Инциденты
	|ГДЕ
	|	Инцидент = &Инцидент
    |   И ТипИнцидента = &ТипИнцидента
    |   И НЕ Статус В (&СтатусыЗакрыто)
    |";
    
	Запрос.УстановитьПараметр("Инцидент", Инцидент);
    Запрос.УстановитьПараметр("ТипИнцидента", ТипИнцидента);
    
    СтатусыЗакрыто = Новый Массив;
    Если Извне Тогда
        СтатусыЗакрыто.Добавить(Перечисления.СтатусыИнцидентов.Неактуальный);
        СтатусыЗакрыто.Добавить(Перечисления.СтатусыИнцидентов.Закрыто);
    Иначе
        СтатусыЗакрыто.Добавить(Перечисления.СтатусыИнцидентов.Закрыто);
    КонецЕсли;
    Запрос.УстановитьПараметр("СтатусыЗакрыто", СтатусыЗакрыто);
	
	Результат = Запрос.Выполнить();
    Если НЕ Результат.Пустой() Тогда
        
        НачатьТранзакцию();
        Попытка
            
            ЗаблокироватьИнцидент(Инцидент);
            Запись = РегистрыСведений.Инциденты.СоздатьМенеджерЗаписи();
            Запись.Инцидент = Инцидент;
            Запись.ТипИнцидента = ТипИнцидента;
            Запись.Прочитать();
            
            Если Запись.Выбран() Тогда
                
                Запись.Инцидент = Инцидент;
                Запись.ТипИнцидента = ТипИнцидента;
                Запись.ДатаЗакрытия = ТекДата;
                
                Если НЕ Извне И НЕ ЗначениеЗаполнено(Запись.ДатаРеакции) Тогда
                    Запись.ДатаРеакции =  Запись.ДатаЗакрытия;
                КонецЕсли;
                
                Если Извне Тогда
                    Запись.Статус = Перечисления.СтатусыИнцидентов.Неактуальный;
                Иначе
                     Запись.Статус = Перечисления.СтатусыИнцидентов.Закрыто;
                     Запись.Ответственный = ПараметрыСеанса.ТекущийПользователь;
                КонецЕсли;
                 
                Если ЗначениеЗаполнено(Сообщение) Тогда
                    Запись.ПодробноеСообщение = Сообщение;
                КонецЕсли;
                
                Запись.Записать(Истина);
                
                ДобавитьИсториюИнцидента(Запись, ТекДата);
                РегистрыСведений.ИнцидентыАктивные.Удалить(ТипИнцидента, Инцидент);
                
            КонецЕсли;
            
            ЗафиксироватьТранзакцию();
            
        Исключение
            
            ОтменитьТранзакцию();
            
            Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
            ЗаписьЖурналаРегистрации("ИнцидентыСервер.ЗакрытьИнцидент",УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
            ВызватьИсключение;
            
        КонецПопытки;
        
    КонецЕсли;
	
КонецПроцедуры

Процедура УказатьНовыйСтатусДляИнцидента(Знач Инцидент, Знач ТипИнцидента, НовыйСтатус, НовыйОтветственный = неопределено, ДатаЗакрытия = неопределено, Часов) Экспорт
    
    Если НовыйСтатус = Перечисления.СтатусыИнцидентов.Неактуальный Тогда
        ЗакрытьИнцидент(ТипИнцидента, Инцидент, Истина);
    ИначеЕсли НовыйСтатус = Перечисления.СтатусыИнцидентов.Закрыто Тогда
        ЗакрытьИнцидент(ТипИнцидента, Инцидент, Ложь);
    Иначе
        
        ТекДата = ТекущаяДатаСеанса();
        
        Результат = Ложь;
        
        Если ТипЗнч(Инцидент) = Тип("Строка") Тогда
            Инцидент = Справочники.Инциденты.НайтиПоНаименованию(Инцидент);
        КонецЕсли;
        
        Запись = РегистрыСведений.Инциденты.СоздатьМенеджерЗаписи();
        Запись.Инцидент = Инцидент;
        Запись.ТипИнцидента = ТипИнцидента;
        Запись.Прочитать();
        Запись.Инцидент = Инцидент;
        Запись.ТипИнцидента = ТипИнцидента;
        
        Если Запись.Выбран() Тогда
            Если Запись.Статус = Перечисления.СтатусыИнцидентов.Закрыто И НовыйСтатус = Перечисления.СтатусыИнцидентов.ВзятоВРаботу Тогда
                Сообщить(НСтр("ru = 'Нельзя передать в работу закрытый инцидент'"));
                Возврат;
            КонецЕсли;
            
            Если Запись.Статус = Перечисления.СтатусыИнцидентов.Закрыто И НовыйСтатус = Перечисления.СтатусыИнцидентов.НовыйИнцидент Тогда
                РегистрыСведений.ИнцидентыАктивные.Добавить(ТипИнцидента, Инцидент);
            КонецЕсли;
                        
            Если ((Запись.Статус <> Перечисления.СтатусыИнцидентов.ВзятоВРаботу И НовыйСтатус = Перечисления.СтатусыИнцидентов.ВзятоВРаботу) 
                ИЛИ 
                (НовыйСтатус = Перечисления.СтатусыИнцидентов.ВзятоВРаботу И Запись.Ответственный <> НовыйОтветственный)) Тогда
                Запись.ДатаРеакции = ТекДата; 
            КонецЕсли;
            
            Если НЕ ЗначениеЗаполнено(Запись.ТипИнцидента.Ответственный) Тогда
                Результат = Истина;
            КонецЕсли;
            
            Запись.Ответственный = ?(НовыйОтветственный = неопределено, ПараметрыСеанса.ТекущийПользователь, НовыйОтветственный);
            Если НовыйСтатус = Перечисления.СтатусыИнцидентов.Закрыто И ЗначениеЗаполнено(ДатаЗакрытия) Тогда
                Запись.ДатаЗакрытия = ДатаЗакрытия;
            КонецЕсли;
            Запись.Статус = НовыйСтатус;
            Если НовыйСтатус = Перечисления.СтатусыИнцидентов.Проигнорировано Тогда
                Запись.ПроигнорироватьДо = КонецЧаса(ТекущаяДата() + (3600 * Часов));
            КонецЕсли;
            Запись.Записать(Истина);
            ДобавитьИсториюИнцидента(Запись, ТекДата);
            
        КонецЕсли;
        
    КонецЕсли;
	
КонецПроцедуры

Функция АктивностьСтатуса(Знач СтатусИнцидента) Экспорт
	
	Если 
		СтатусИнцидента = Перечисления.СтатусыИнцидентов.НовыйИнцидент ИЛИ 
		СтатусИнцидента = Перечисления.СтатусыИнцидентов.ВзятоВРаботу 
	Тогда
		Возврат ИСТИНА;
	ИначеЕсли 
		СтатусИнцидента = Перечисления.СтатусыИнцидентов.Проигнорировано ИЛИ 
		СтатусИнцидента = Перечисления.СтатусыИнцидентов.Закрыто ИЛИ
		СтатусИнцидента = Перечисления.СтатусыИнцидентов.Неактуальный
	Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	ВызватьИсключение "Неверный параметр 1 функции ИнцидентыСервер.АктивностьСтатуса";
	
КонецФункции

Функция МассивСтатусов(Знач ТолькоАктивные) Экспорт
	
	МассивСтатусов = новый Массив();
	Для Каждого Статус из Перечисления.СтатусыИнцидентов Цикл
		Если НЕ ТолькоАктивные ИЛИ ИнцидентыСервер.АктивностьСтатуса(Статус) Тогда
			МассивСтатусов.Добавить(Статус);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСтатусов;
	
КонецФункции

Функция НормативМинутНаРаботуСИнцидентом() Экспорт
	
	Результат = Константы.НормативВремениРаботыСИнцидентом.Получить();
	Если Результат = 0 Тогда
		Результат = 60;
		Константы.НормативВремениРаботыСИнцидентом.Установить(60);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ИнтервалМеждуОповещениями(УровеньИнцидента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПериодПовторногоОповещения
	|ИЗ
	|	РегистрСведений.УровниИнцидентовПовторноеОповещение
	|ГДЕ
	|	УровеньИнцидента = &УровеньИнцидента
	|";
	Запрос.УстановитьПараметр("УровеньИнцидента", УровеньИнцидента);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ПериодПовторногоОповещения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Открывает и закрывает инциденты, устанавливает сообщение "Автоматическое создание при регистрации источника".
// Необходимо для возможности создания оповещения по инциденту до его первого срабатывания.
//
// Параметры:
//  ТипИнцидента     - Строка                        - наименование типа инцидента, в случае отсутствия создается новый.
//  Инциденты        - Масссив                       - массив структур. Поля структур, входящих в массив:
//                                                        КодИнцидента - Строка - код инцидента, в случае отсутствия создается новый.
//                                                        СтрокаПодключения - Строка - строка подключения для отображения в панели инцидентов.
//  УровеньИнцидента - Перечисление.УровниИнцидентов - уровень инцидента.
//
Функция СоздатьИнцидентыИсточника(ТипИнцидента, Инцидент) Экспорт
    
    МенеджерЗаписи = РегистрыСведений.Инциденты.СоздатьМенеджерЗаписи();
    МенеджерЗаписи.Инцидент = Инцидент;
    МенеджерЗаписи.ТипИнцидента = ТипИнцидента;
    
    МенеджерЗаписи.Прочитать();
    
    Если НЕ МенеджерЗаписи.Выбран() Тогда
        Сообщение = "Создан при регистрации источника инцидента. Необходимо для создания оповещения до первого срабатывания.";
        ОткрытьИнцидент(ТипИнцидента, Инцидент,,,Сообщение,1);
        ЗакрытьИнцидент(ТипИнцидента, Инцидент, Ложь);
    КонецЕсли;
    
КонецФункции

// Проверяет наличие инцидента.
//
// Параметры:
//  ТипИнцидента       - СправочникСсылка.ТипИнциденты - тип инцидента.
//  КодИнцидента       - СправочникСсылка.Инциденты    - код инцидента. 
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьИнцидент(ТипИнцидента, КодИнцидента) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |   Инцидент,
    |   ТипИнцидента
    |ИЗ
    |   РегистрСведений.Инциденты
    |ГДЕ
    |   Инцидент = &Инцидент
    |   И ТипИнцидента = &ТипИнцидента
    |";
    
    Запрос.УстановитьПараметр("Инцидент", КодИнцидента);
    Запрос.УстановитьПараметр("ТипИнцидента", ТипИнцидента);
    
    Результат = Запрос.Выполнить();
    
    Возврат НЕ Результат.Пустой();
    
КонецФункции

Процедура ОбработатьЗначенияОперативногоОбнаружения(Обнаружение, ЗначенияОбнаружения) Экспорт
    
    Замер = ВнутренниеЗамеры.НачатьЗамер("ОбработатьЗначенияОперативногоОбнаружения");
    
    НавигационнаяСсылкаИсточника = Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(Обнаружение), "Обнаружение: " + Обнаружение);
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ТипИнцидента,
    |   ХешИнцидента,
    |   ТипОбнаружения,
    |   УровеньИнцидента,
    |   СтрокаПодключения,
    |   ПодробноеСообщение,
    |   НетДанных,
    |   ИсточникИнцидента
    |ПОМЕСТИТЬ
    |   ЗначенияОбнаружения
    |ИЗ
    |   &ЗначенияОбнаружения КАК ЗначенияОбнаружения
    |ИНДЕКСИРОВАТЬ ПО
    |   ТипИнцидента,
    |   ХешИнцидента
    |;
    |ВЫБРАТЬ
    |   ЗначенияОбнаружения.ТипИнцидента КАК ТипИнцидента,
    |   Инциденты.Ссылка КАК КодИнцидента,
    |   СостоянияИнцидентов.Статус КАК Статус,
    |   ЗначенияОбнаружения.ТипОбнаружения КАК ТипОбнаружения,
    |   ЗначенияОбнаружения.УровеньИнцидента КАК УровеньИнцидента,
    |   ЗначенияОбнаружения.СтрокаПодключения КАК СтрокаПодключения,
    |   ЗначенияОбнаружения.ПодробноеСообщение КАК ПодробноеСообщение,
    |   ЗначенияОбнаружения.ИсточникИнцидента КАК ИсточникИнцидента,
    |   (
    |       (СостоянияИнцидентов.Статус IS NULL)
    |       ИЛИ (ЗначенияОбнаружения.ТипОбнаружения = &Открытие)
    |       ИЛИ (ЗначенияОбнаружения.ТипОбнаружения = &ТекущееЗначение И СостоянияИнцидентов.Статус = &НовыйИнцидент)
    |       ИЛИ (ЗначенияОбнаружения.ТипОбнаружения = &ТекущееЗначение И СостоянияИнцидентов.Статус = &Проигнорировано)
    |       ИЛИ (ЗначенияОбнаружения.ТипОбнаружения = &Закрытие)
    |   ) КАК Изменить
    |ИЗ
    |   ЗначенияОбнаружения КАК ЗначенияОбнаружения
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.Инциденты КАК Инциденты
    |ПО
    |   Инциденты.ХешИнцидента = ЗначенияОбнаружения.ХешИнцидента
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.Инциденты КАК СостоянияИнцидентов
    |ПО
    |   СостоянияИнцидентов.Инцидент = Инциденты.Ссылка
    |   И СостоянияИнцидентов.ТипИнцидента = ЗначенияОбнаружения.ТипИнцидента
    |ГДЕ
    |   НЕ ЗначенияОбнаружения.НетДанных
    |   И (
    |       (СостоянияИнцидентов.Статус IS NULL)
    |       ИЛИ (ЗначенияОбнаружения.ТипОбнаружения = &Открытие)
    |       ИЛИ (ЗначенияОбнаружения.ТипОбнаружения = &ТекущееЗначение И СостоянияИнцидентов.Статус = &НовыйИнцидент)
    |       ИЛИ (ЗначенияОбнаружения.ТипОбнаружения = &ТекущееЗначение И СостоянияИнцидентов.Статус = &Проигнорировано)
    |       ИЛИ (ЗначенияОбнаружения.ТипОбнаружения = &Закрытие)
    |   )   
    |";
    
    Запрос.УстановитьПараметр("ЗначенияОбнаружения", ЗначенияОбнаружения);
    Запрос.УстановитьПараметр("Открытие", Перечисления.ТипыОбнаруженияИнцидентов.Открытие);
    Запрос.УстановитьПараметр("ТекущееЗначение", Перечисления.ТипыОбнаруженияИнцидентов.ТекущееЗначение);
    Запрос.УстановитьПараметр("Закрытие", Перечисления.ТипыОбнаруженияИнцидентов.Закрытие);
    Запрос.УстановитьПараметр("НовыйИнцидент", Перечисления.СтатусыИнцидентов.НовыйИнцидент);
    Запрос.УстановитьПараметр("Проигнорировано", Перечисления.СтатусыИнцидентов.Проигнорировано);
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        Если (Выборка.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.Открытие ИЛИ Выборка.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.ТекущееЗначение) Тогда
            ИнцидентыСервер.ОткрытьИнцидент(Выборка.ТипИнцидента, Выборка.КодИнцидента, Выборка.СтрокаПодключения,,Выборка.ПодробноеСообщение,1,,,Выборка.УровеньИнцидента,Выборка.ИсточникИнцидента, НавигационнаяСсылкаИсточника);
        ИначеЕсли Выборка.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.Закрытие Тогда
            ИнцидентыСервер.ЗакрытьИнцидент(Выборка.ТипИнцидента, Выборка.КодИнцидента, Истина, Выборка.ПодробноеСообщение);
        КонецЕсли;
    КонецЦикла;
    
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("Объект ЦКК", Обнаружение.Наименование);
    ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
        
КонецПроцедуры

Функция ФорматЗначения(Знач Значение, ФорматнаяСтрока) Экспорт
    
    Значение = ?(Значение = Null, 0, Значение);
            
    Если ЗначениеЗаполнено(ФорматнаяСтрока) Тогда
        ФорматнаяСтрокаМассив = Новый Массив;
        
        Буфер = СтрРазделить(ФорматнаяСтрока, "[", Истина);
        Если ЗначениеЗаполнено(Буфер[0]) Тогда
            ФорматнаяСтрокаМассив.Добавить(Буфер[0]);
        КонецЕсли;
                
        Буфер = СтрРазделить(Буфер[1], "]", Истина);
        ФорматнаяСтрокаМассив.Добавить(Формат(Значение, Буфер[0]));
        Если ЗначениеЗаполнено(Буфер[1]) Тогда
            ФорматнаяСтрокаМассив.Добавить(Буфер[1]);
        КонецЕсли;
        
        Возврат СтрСоединить(ФорматнаяСтрокаМассив, "");
        
    Иначе
        Возврат Строка(Значение);
    КонецЕсли;
        
КонецФункции

#КонецОбласти

#Область Оповещения

Функция СписокПотенциальныхОповещений(ТипИнцидентаСсылка) Экспорт
	
    //Запрос = Новый Запрос("
    //|ВЫБРАТЬ
    //|	СпрОповещения.Ссылка
    //|ИЗ
    //|	Справочник.Оповещения КАК СпрОповещения
    //|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    //|	Справочник.ОчередьЗаданий КАК СпрОчередьЗаданий
    //|ПО
    //|	СпрОчередьЗаданий.Ссылка = СпрОповещения.ИсполняющееЗадание
    //|	И СпрОчередьЗаданий.Использование = ИСТИНА
    //|ГДЕ
    //|	СпрОповещения.ОтноситсяКТипуИнцидента = &ТипИнцидента
    //|	И СпрОповещения.ПометкаУдаления = ЛОЖЬ
    //|");
    //Запрос.УстановитьПараметр("ТипИнцидента", ТипИнцидентаСсылка);
    //
    //Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    
    Возврат Новый Массив;
    
КонецФункции

Функция СписокПотенциальныхОповещенийТаблицаЗначений(ТипИнцидентаСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СпрОповещения.Ссылка,
	|	СпрОчередьЗаданий.Использование
	|ИЗ
	|	Справочник.Оповещения КАК СпрОповещения
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.ОчередьЗаданий КАК СпрОчередьЗаданий
	|ПО
	|	СпрОчередьЗаданий.Ссылка = СпрОповещения.ИсполняющееЗадание
	|ГДЕ
	|	СпрОповещения.ОтноситсяКТипуИнцидента = &ТипИнцидента
	|	И СпрОповещения.ПометкаУдаления = ЛОЖЬ
	|");
	Запрос.УстановитьПараметр("ТипИнцидента", ТипИнцидентаСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПровестиОповещение(Запись, Закрытие = Ложь, ИнтервалОЗакрытии = -1) Экспорт
    
    ПотенциальныеОповещения = СписокПотенциальныхОповещений(Запись.ТипИнцидента);
	
	Если НЕ Закрытие Тогда
		Для Каждого ТекСсылка из ПотенциальныеОповещения Цикл
            Если Справочники.Оповещения.ВыполненыУсловияДляИнцидента(ТекСсылка, Запись) Тогда
                
                НачатьТранзакцию();
                
                Блокировка = Новый БлокировкаДанных;
                ЭлементБлокировки = Блокировка.Добавить("Справочник.Оповещения");
                ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекСсылка);
                ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
                Блокировка.Заблокировать();
                
				// Проверяем формирование оповещения о закрытии,
				// только после этого можно отправлять новые оповещения об открытии
				ОповещениеЗакрыто = РегистрыСведений.ТекущееСостояниеПовторногоОповещения.ОповещениеЗакрыто(ТекСсылка);
				
				ОповещениеСформировано = Ложь;
				Если ОповещениеЗакрыто Тогда
					ЗначенияПоказателей = ?(ТекСсылка.ВключитьПоказателиВТекстОповещения, Запись.ПодробноеСообщение, "");
					Справочники.Оповещения.ОповеститьПользователей(Запись, ТекСсылка, ЗначенияПоказателей);
					РегистрыСведений.ТекущееСостояниеПовторногоОповещения.СоздатьОповещение(ТекСсылка);
					ОповещениеСформировано = Истина;
					
					Если Общий.СсылкаСуществует(ТекСсылка.ИсполняющееЗадание) Тогда
						ОчередьЗаданий.ИзменитьЗадание(ТекСсылка.ИсполняющееЗадание, Новый Структура("ЗапланированныйМоментЗапуска", ТекущаяДата()));
					КонецЕсли;	
				КонецЕсли;
				
				// Записываем текущее состояние инцидента в разрезе данного оповещения
				РегистрыСведений.ТекущееСостояниеОповещения.ЗаписатьИнцидент(ТекСсылка, Запись.Инцидент, Запись.Статус, Запись.УровеньИнцидента, ОповещениеСформировано);
                
                ЗафиксироватьТранзакцию();
                
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ПерепланироватьПовторноеОповещение(Запись) Экспорт
	ПотенциальныеОповещения = СписокПотенциальныхОповещений(Запись.ТипИнцидента);
	
	Для Каждого ТекСсылка из ПотенциальныеОповещения Цикл
		Если Общий.СсылкаСуществует(ТекСсылка.ИсполняющееЗадание) Тогда
			ИнтервалМеждуОповещениями = ИнтервалМеждуОповещениями(Запись.УровеньИнцидента);
			ЗапланированныйМоментЗапуска = Запись.ДатаОткрытияПовторная + (ЦЕЛ((ТекущаяДата() - Запись.ДатаОткрытияПовторная)/ИнтервалМеждуОповещениями) + 1) * ИнтервалМеждуОповещениями;
			ОчередьЗаданий.ИзменитьЗадание(ТекСсылка.ИсполняющееЗадание, Новый Структура("ЗапланированныйМоментЗапуска", ЗапланированныйМоментЗапуска));
		КонецЕсли;
	КонецЦикла;	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедуры

Процедура ДобавитьИсториюИнцидента(ЗаписьИнцидента, ТекДата)
	
	Запись = РегистрыСведений.ИнцидентыИстория.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, ЗаписьИнцидента);
    Запись.Период = ТекДата;
    
	Запись.Записать(Истина);
	
КонецПроцедуры

Функция ИмяХостаКластера(ОбъектКонтроля)
	Запись = РегистрыСведений.ПараметрыКластеров.СоздатьМенеджерЗаписи();
	Запись.ОбъектКонтроля = ОбъектКонтроля;
	Запись.Прочитать();
	Возврат Запись.АдресКластера;
КонецФункции

Процедура ПрочитатьПараметрыИБ(ОбъектКонтроляСсылка, СловарьИБ, СловарьКластеры) Экспорт
	Запись = РегистрыСведений.ПараметрыИнформационныхБаз.СоздатьМенеджерЗаписи();
	Запись.ОбъектКонтроля = ОбъектКонтроляСсылка;
	Запись.Прочитать();
	Если НЕ Запись.Выбран() Тогда Возврат; КонецЕсли;
	СловарьИБ[Запись.ИмяБазыВКластере] = 1;
	СловарьКластеры[ИмяХостаКластера(Запись.Кластер)] = 1;
КонецПроцедуры

Процедура ЗаблокироватьИнцидент(Знач Инцидент) 
    
    Блокировка = Новый БлокировкаДанных;
    ЭлементБлокировки = Блокировка.Добавить("Справочник.Инциденты");
        
    Если ТипЗнч(Инцидент) = Тип("Строка") Тогда
        ЭлементБлокировки.УстановитьЗначение("Наименование", Инцидент);
    ИначеЕсли ТипЗнч(Инцидент) = Тип("СправочникСсылка.Инциденты") Тогда
        ЭлементБлокировки.УстановитьЗначение("Ссылка", Инцидент);
    КонецЕсли;
    
    ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
    Блокировка.Заблокировать();
        
КонецПроцедуры

#КонецОбласти

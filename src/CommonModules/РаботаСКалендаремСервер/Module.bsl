#Область ПрограммныйИнтерфейс

Процедура СкорректироватьРасписаниеНаСервере(ТекущийРедактируемыйЭлемент, КорневойУзелПоследовательности, Параметры,  КорректироватьВремяСобытий) Экспорт
	НачатьТранзакцию();
	
	Попытка
		// скорректируем расписание в корневом элементе
		ИзменитьПланЗапускаСценарияНаСервере(КорневойУзелПоследовательности);
		// сформируем элементы согласно расписанию
		СгенерироватьЭлементыЗамещенияПоРасписанию(КорневойУзелПоследовательности.Расписание, КорневойУзелПоследовательности.Значение, КорневойУзелПоследовательности.Начало);
		
		// отредактируем дату-время событий, если менялось
		Если КорректироватьВремяСобытий Тогда
			СкорректироватьВремяСобытий(ТекущийРедактируемыйЭлемент, Параметры.ПрименитьИзменениеК, Параметры.Начало, Параметры.Окончание, ТекущийРедактируемыйЭлемент = КорневойУзелПоследовательности.Значение);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru='Расписание сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
КонецПроцедуры

Функция ПолучитьДанныеЭлементаВКалендареНаСервере(Экземпляр) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария КАК Значение,
	                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель КАК ЭкземплярРодитель,
	                      |	ПланЗапускаСценариевАвтоматизации.Начало КАК Начало,
	                      |	ПланЗапускаСценариевАвтоматизации.Окончание КАК Окончание,
	                      |	ПланЗапускаСценариевАвтоматизации.ДатаЗамещения КАК ДатаЗамещения,
	                      |	ПланЗапускаСценариевАвтоматизации.ВыполняетсяПоРасписанию КАК ВыполняетсяПоРасписанию,
	                      |	ПланЗапускаСценариевАвтоматизации.Удаленный КАК Удаленный,
	                      |	ПланЗапускаСценариевАвтоматизации.Расписание КАК Расписание
	                      |ПОМЕСТИТЬ ПланЗапускаСценариевАвтоматизации
	                      |ИЗ
	                      |	РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
	                      |ГДЕ
	                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария = &ЭкземплярСценария
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПланЗапускаСценариевАвтоматизации.Значение КАК Значение,
	                      |	ПланЗапускаСценариевАвтоматизации.Начало КАК Начало,
	                      |	ПланЗапускаСценариевАвтоматизации.Окончание КАК Окончание,
	                      |	ПланЗапускаСценариевАвтоматизации.ДатаЗамещения КАК ДатаЗамещения,
	                      |	ПланЗапускаСценариевАвтоматизации.ВыполняетсяПоРасписанию КАК ВыполняетсяПоРасписанию,
	                      |	ПланЗапускаСценариевАвтоматизации.Удаленный КАК Удаленный,
	                      |	ПланЗапускаСценариевАвтоматизации.Расписание КАК Расписание,
	                      |	ПланЗапускаСценариевАвтоматизацииРодитель.ЭкземплярСценария КАК ЗначениеРодитель,
	                      |	ПланЗапускаСценариевАвтоматизацииРодитель.Начало КАК НачалоРодитель,
	                      |	ПланЗапускаСценариевАвтоматизацииРодитель.Окончание КАК ОкончаниеРодитель,
	                      |	ПланЗапускаСценариевАвтоматизацииРодитель.ДатаЗамещения КАК ДатаЗамещенияРодитель,
	                      |	ПланЗапускаСценариевАвтоматизацииРодитель.ВыполняетсяПоРасписанию КАК ВыполняетсяПоРасписаниюРодитель,
	                      |	ПланЗапускаСценариевАвтоматизацииРодитель.Удаленный КАК УдаленныйРодитель,
	                      |	ПланЗапускаСценариевАвтоматизацииРодитель.Расписание КАК РасписаниеРодитель,
	                      |	ВЫБОР
	                      |		КОГДА ПланЗапускаСценариевАвтоматизацииРодитель.ЭкземплярСценария ЕСТЬ NULL
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК ЭтоКорневойЭлемент
	                      |ИЗ
	                      |	ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизацииРодитель
	                      |		ПО ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель = ПланЗапускаСценариевАвтоматизацииРодитель.ЭкземплярСценария
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ПланЗапускаСценариевАвтоматизации");
	Запрос.УстановитьПараметр("ЭкземплярСценария", Экземпляр);
	
	ВыгрузкаДанныхКалендаря = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыгрузкаДанныхКалендаря;
КонецФункции	

Процедура ОтменитьИспользованиеРасписания(КорневойУзелПоследовательности) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария КАК ЭкземплярСценария
	                      |ИЗ
	                      |	РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
	                      |ГДЕ
	                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария = &Экземпляр
	                      |	ИЛИ ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель = &Экземпляр");
	Запрос.УстановитьПараметр("Экземпляр", КорневойУзелПоследовательности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		Пока Выборка.Следующий() Цикл
			НЗ = РегистрыСведений.ПланЗапускаСценариевАвтоматизации.СоздатьНаборЗаписей();
			НЗ.Отбор.ЭкземплярСценария.Установить(Выборка.ЭкземплярСценария);
			НЗ.Прочитать();
			Для каждого Запись Из НЗ Цикл
				Запись.ВыполняетсяПоРасписанию = Ложь;
				Запись.ДатаЗамещения = '00010101';
				Запись.ЭкземплярРодитель = Справочники.ЭкземплярыСценариевАвтоматизации.ПустаяСсылка();
				Запись.Расписание = Новый ХранилищеЗначения(Неопределено);
			КонецЦикла;	
			НЗ.Записать();
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru='Расписание сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
КонецПроцедуры	

Процедура ИзменитьПланЗапускаСценарияНаСервере(ЭлементКалендаря) Экспорт
	//скорректируем расписание
	НЗ = РегистрыСведений.ПланЗапускаСценариевАвтоматизации.СоздатьНаборЗаписей();
	НЗ.Отбор.ЭкземплярСценария.Установить(ЭлементКалендаря.Значение);
	НЗ.Прочитать();
	Если НЗ.Количество() = 0 Тогда
		Запись = НЗ.Добавить();
	Иначе
		Запись = НЗ[0];
	КонецЕсли;	
	Запись.ЭкземплярСценария = ЭлементКалендаря.Значение;
	Запись.Начало = ЭлементКалендаря.Начало;
	Запись.Окончание = ЭлементКалендаря.Окончание;
	Запись.ДатаЗамещения = ЭлементКалендаря.ДатаЗамещения;
	Запись.Удаленный = ЭлементКалендаря.Удаленный;
	Если ЭлементКалендаря.Расписание <> Неопределено Тогда
		Запись.ВыполняетсяПоРасписанию = Истина;
		Запись.Расписание = Новый ХранилищеЗначения(ЭлементКалендаря.Расписание);
	Иначе
		Запись.ВыполняетсяПоРасписанию = Ложь;
	КонецЕсли;	
	НЗ.Записать();
КонецПроцедуры

Функция ПолучитьРасписаниеНаСервере(Экземпляр) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария КАК ЭкземплярСценария,
	                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель КАК ЭкземплярРодитель,
	                      |	ПланЗапускаСценариевАвтоматизации.Начало КАК Начало,
	                      |	ПланЗапускаСценариевАвтоматизации.Окончание КАК Окончание,
	                      |	ПланЗапускаСценариевАвтоматизации.ДатаЗамещения КАК ДатаЗамещения,
	                      |	ПланЗапускаСценариевАвтоматизации.ВыполняетсяПоРасписанию КАК ВыполняетсяПоРасписанию,
	                      |	ПланЗапускаСценариевАвтоматизации.Удаленный КАК Удаленный,
	                      |	ПланЗапускаСценариевАвтоматизации.Расписание КАК Расписание
	                      |ПОМЕСТИТЬ ПланЗапускаСценариевАвтоматизации
	                      |ИЗ
	                      |	РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
	                      |ГДЕ
	                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария = &ЭкземплярСценария
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
						  |ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА ПланЗапускаСценариевАвтоматизации.ВыполняетсяПоРасписанию
	                      |			ТОГДА ПланЗапускаСценариевАвтоматизации.Расписание
	                      |		ИНАЧЕ ЕСТЬNULL(ПланЗапускаСценариевАвтоматизацииРодитель.Расписание, НЕОПРЕДЕЛЕНО)
	                      |	КОНЕЦ КАК Расписание
	                      |ИЗ
	                      |	ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизацииРодитель
	                      |		ПО ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель = ПланЗапускаСценариевАвтоматизацииРодитель.ЭкземплярСценария
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ПланЗапускаСценариевАвтоматизации");
	
	Запрос.УстановитьПараметр("ЭкземплярСценария", Экземпляр);
	
	ВыборкаРасписания = Запрос.Выполнить().Выбрать();
	Если ВыборкаРасписания.Следующий() Тогда
		Если ВыборкаРасписания.Расписание <> Неопределено Тогда
			Расписание = ВыборкаРасписания.Расписание.Получить();
		Иначе
			Расписание = Неопределено;
		КонецЕсли;	
	Иначе
		Расписание = Неопределено;
	КонецЕсли;
	
	Возврат Расписание;
КонецФункции

Процедура УдалитьЭлементыСценариев(ТекущийРедактируемыйЭлемент, ПрименятьК) Экспорт 
	ВыгрузкаДанныхКалендаря = РаботаСКалендаремСервер.ПолучитьДанныеЭлементаВКалендареНаСервере(ТекущийРедактируемыйЭлемент);

	Если ВыгрузкаДанныхКалендаря.Количество() > 0 Тогда
		Если ВыгрузкаДанныхКалендаря[0].ЭтоКорневойЭлемент Тогда
			ПрименятьК = 1;
			КорневойУзелПоследовательности = ТекущийРедактируемыйЭлемент;
			ДатаЗамещения = ВыгрузкаДанныхКалендаря[0].ДатаЗамещения;
		Иначе
			КорневойУзелПоследовательности = ВыгрузкаДанныхКалендаря[0].ЗначениеРодитель;
			ДатаЗамещения = ВыгрузкаДанныхКалендаря[0].ДатаЗамещенияРодитель;
		КонецЕсли;	
	
		// 0 - только эта задача
		// 1 - вся серия
		// 2 - все после этой	
		МассивУдаляемых = Новый Массив;
		Если ПрименятьК = 0 Тогда
			Значение = ТекущийРедактируемыйЭлемент;
			Если Значение.Состояние = Перечисления.СостоянияСценария.Запланирован ИЛИ Значение.Состояние = Перечисления.СостоянияСценария.НеЗапланирован Тогда
				МассивУдаляемых.Добавить(Значение);
			КонецЕсли;	
		ИначеЕсли ПрименятьК = 1 Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария КАК ЭкземплярСценария
			                      |ИЗ
			                      |	РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
			                      |ГДЕ
			                      |	(ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария = &ЭкземплярСценария
			                      |			ИЛИ ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель = &ЭкземплярСценария)
			                      |	И (ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.Запланирован)
			                      |			ИЛИ ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.НеЗапланирован))");
			Запрос.УстановитьПараметр("ЭкземплярСценария", КорневойУзелПоследовательности);
			
			Результат = Запрос.Выполнить().Выгрузить();
			МассивУдаляемых = Результат.ВыгрузитьКолонку("ЭкземплярСценария");	
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария КАК ЭкземплярСценария
			                      |ИЗ
			                      |	РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
			                      |ГДЕ
			                      |	(ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария = &ЭкземплярСценария
			                      |			ИЛИ ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель = &ЭкземплярСценария)
			                      |	И (ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.Запланирован)
			                      |			ИЛИ ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.НеЗапланирован))
			                      |	И ПланЗапускаСценариевАвтоматизации.Окончание > &ТекущаяДата
			                      |	И ПланЗапускаСценариевАвтоматизации.ДатаЗамещения >= &ДатаЗамещения");
			Запрос.УстановитьПараметр("ЭкземплярСценария", КорневойУзелПоследовательности);
			Запрос.УстановитьПараметр("ДатаЗамещения", ДатаЗамещения);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			Результат = Запрос.Выполнить().Выгрузить();
			МассивУдаляемых = Результат.ВыгрузитьКолонку("ЭкземплярСценария");	
		КонецЕсли;
		
		// удалим лишние
		Для каждого Элемент Из МассивУдаляемых Цикл
			Если Элемент <> КорневойУзелПоследовательности Тогда
				НЗ = РегистрыСведений.ПланЗапускаСценариевАвтоматизации.СоздатьНаборЗаписей();
				НЗ.Отбор.ЭкземплярСценария.Установить(Элемент);
				НЗ.Прочитать();
				Для каждого Запись Из НЗ Цикл
					Запись.Удаленный = Истина;
				КонецЦикла;	
				НЗ.Записать();
			КонецЕсли;	
			
			Об = Элемент.ПолучитьОбъект();
			Об.УстановитьПометкуУдаления(Истина);
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ВыполнитьОбработкуИзмененияРасписанияНаСервере(ТекущийРедактируемыйЭлемент, Параметры) Экспорт  
	ВыгрузкаДанныхКалендаря = РаботаСКалендаремСервер.ПолучитьДанныеЭлементаВКалендареНаСервере(ТекущийРедактируемыйЭлемент.Значение);

	Если ВыгрузкаДанныхКалендаря.Количество() > 0 Тогда
		КорневойУзелПоследовательности = Новый Структура;
		КорневойУзелПоследовательности.Вставить("Значение");
		КорневойУзелПоследовательности.Вставить("Начало");
        КорневойУзелПоследовательности.Вставить("Окончание");
        КорневойУзелПоследовательности.Вставить("ДатаЗамещения");
        КорневойУзелПоследовательности.Вставить("ВыполняетсяПоРасписанию");
        КорневойУзелПоследовательности.Вставить("Удаленный");
        КорневойУзелПоследовательности.Вставить("Расписание");

					  
		Если ВыгрузкаДанныхКалендаря[0].ЭтоКорневойЭлемент Тогда
			ЗаполнитьЗначенияСвойств(КорневойУзелПоследовательности, ВыгрузкаДанныхКалендаря[0]);
		Иначе
			КорневойУзелПоследовательности.Значение = ВыгрузкаДанныхКалендаря[0].ЗначениеРодитель;
			КорневойУзелПоследовательности.Начало = ВыгрузкаДанныхКалендаря[0].НачалоРодитель;
            КорневойУзелПоследовательности.Окончание = ВыгрузкаДанныхКалендаря[0].ОкончаниеРодитель;
            КорневойУзелПоследовательности.ДатаЗамещения = ВыгрузкаДанныхКалендаря[0].ДатаЗамещенияРодитель;
            КорневойУзелПоследовательности.ВыполняетсяПоРасписанию = ВыгрузкаДанныхКалендаря[0].ВыполняетсяПоРасписаниюРодитель;
            КорневойУзелПоследовательности.Удаленный = ВыгрузкаДанныхКалендаря[0].УдаленныйРодитель;
            КорневойУзелПоследовательности.Расписание = ВыгрузкаДанныхКалендаря[0].РасписаниеРодитель;
		КонецЕсли;
		// .............................................
		// Отредактируем дату-время
		Если ТекущийРедактируемыйЭлемент.Начало <> Параметры.Начало 
			ИЛИ ТекущийРедактируемыйЭлемент.Окончание <> Параметры.Окончание
			ИЛИ Параметры.ПрименитьИзменениеК > 0 Тогда
			КорректироватьВремяСобытий = Истина;
		Иначе
			КорректироватьВремяСобытий = Ложь;
		КонецЕсли;

		Если Параметры.РасписаниеЗадано Тогда
			Расписание = Новый РасписаниеЭлементаПланировщика;
			
			// задаем расписание
			Расписание.ДатаКонца = Параметры.ДатаКонца;
			Расписание.ДниНедели = Параметры.ДниНедели;
			Расписание.ПериодНедель = Параметры.ПериодНедель;
			Расписание.ПериодПовтораДней = Параметры.ПериодПовтораДней;
			Расписание.КоличествоПовторов = Параметры.КоличествоПовторов;
			
			КорневойУзелПоследовательности.Расписание = Расписание;
			
			СтруктураКорневогоУзла = Новый Структура;
			СтруктураКорневогоУзла.Вставить("Расписание", Расписание);
			СтруктураКорневогоУзла.Вставить("Значение", КорневойУзелПоследовательности.Значение);
			СтруктураКорневогоУзла.Вставить("Начало", КорневойУзелПоследовательности.Начало);
			СтруктураКорневогоУзла.Вставить("Окончание", КорневойУзелПоследовательности.Окончание);
			СтруктураКорневогоУзла.Вставить("ДатаЗамещения", КорневойУзелПоследовательности.ДатаЗамещения);
			СтруктураКорневогоУзла.Вставить("Удаленный", КорневойУзелПоследовательности.Удаленный);
			
			СкорректироватьРасписаниеНаСервере(ТекущийРедактируемыйЭлемент.Значение, СтруктураКорневогоУзла, Параметры,  КорректироватьВремяСобытий);
			// .............................................
		Иначе
			ОтменитьИспользованиеРасписания(КорневойУзелПоследовательности.Значение);
			// отредактируем дату-время событий, если менялось
			Если КорректироватьВремяСобытий Тогда
				СкорректироватьВремяСобытий(ТекущийРедактируемыйЭлемент.Значение, 0, Параметры.Начало, Параметры.Окончание, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

Процедура ВыполнитьПростуюОбработкуИзменения(СтруктураРедактируемогоУзла) Экспорт
	ВыгрузкаДанныхКалендаря = РаботаСКалендаремСервер.ПолучитьДанныеЭлементаВКалендареНаСервере(СтруктураРедактируемогоУзла.Значение);
	Если ВыгрузкаДанныхКалендаря.Количество() > 0 Тогда
		СкорректироватьВремяСобытий(СтруктураРедактируемогоУзла.Значение, 0, СтруктураРедактируемогоУзла.Начало, СтруктураРедактируемогоУзла.Окончание, ВыгрузкаДанныхКалендаря[0].ЭтоКорневойЭлемент);
	КонецЕсли;	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СкорректироватьВремяСобытий(ТекущийРедактируемыйЭлемент, ПрименятьК, Начало, Окончание, ЭтоКорневойЭлемент)
	МассивИзменяемых = Новый Массив;
	
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СостоянияСценария.НеЗапланирован);
	МассивСостояний.Добавить(Перечисления.СостоянияСценария.Запланирован);
	МассивСостояний.Добавить(Перечисления.СостоянияСценария.ТестЗавершенНеуспешно);
	МассивСостояний.Добавить(Перечисления.СостоянияСценария.ТестЗавершенУспешно);
	МассивСостояний.Добавить(Перечисления.СостоянияСценария.ТестСтартован);
	
	Если ПрименятьК = 0 Тогда
		Если МассивСостояний.Найти(ТекущийРедактируемыйЭлемент.Состояние) <> Неопределено Тогда 
			МассивИзменяемых.Добавить(ТекущийРедактируемыйЭлемент);
		КонецЕсли;	
	ИначеЕсли ПрименятьК = 1 Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Т1.ДатаЗамещения КАК ДатаЗамещения,
		                      |	Т1.ЭкземплярРодитель КАК ЭкземплярРодитель,
		                      |	Т1.ЭкземплярСценария КАК ЭкземплярСценария
		                      |ПОМЕСТИТЬ СтартоваяТочка
		                      |ИЗ
		                      |	РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК Т1
		                      |ГДЕ
		                      |	Т1.ЭкземплярСценария = &ТекущийРедактируемыйЭлемент
		                      |
		                      |ИНДЕКСИРОВАТЬ ПО
		                      |	ЭкземплярСценария,
		                      |	ЭкземплярРодитель,
		                      |	ДатаЗамещения
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария КАК ЭкземплярСценария,
		                      |	ПланЗапускаСценариевАвтоматизации.Начало КАК Начало,
		                      |	ПланЗапускаСценариевАвтоматизации.Окончание КАК Окончание
		                      |ИЗ
		                      |	РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтартоваяТочка КАК СтартоваяТочка
		                      |		ПО ((ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель = СтартоваяТочка.ЭкземплярРодитель
		                      |					ИЛИ ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель = СтартоваяТочка.ЭкземплярСценария)
		                      |					И ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель <> ЗНАЧЕНИЕ(Справочник.ЭкземплярыСценариевАвтоматизации.ПустаяСсылка)
		                      |					И ПланЗапускаСценариевАвтоматизации.ДатаЗамещения >= СтартоваяТочка.ДатаЗамещения
		                      |				ИЛИ ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария = СтартоваяТочка.ЭкземплярСценария)
		                      |ГДЕ
		                      |	НЕ ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария.ПометкаУдаления
		                      |	И ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария.Состояние В(&МассивСостояний)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |УНИЧТОЖИТЬ СтартоваяТочка");
		

		
		Запрос.УстановитьПараметр("МассивСостояний", МассивСостояний);
		Запрос.УстановитьПараметр("ТекущийРедактируемыйЭлемент", ТекущийРедактируемыйЭлемент);
		МассивИзменяемых = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭкземплярСценария");
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Т1.ДатаЗамещения КАК ДатаЗамещения,
		                      |	Т1.ЭкземплярРодитель КАК ЭкземплярРодитель,
		                      |	Т1.ЭкземплярСценария КАК ЭкземплярСценария
		                      |ПОМЕСТИТЬ СтартоваяТочка
		                      |ИЗ
		                      |	РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК Т1
		                      |ГДЕ
		                      |	Т1.ЭкземплярСценария = &ТекущийРедактируемыйЭлемент
		                      |
		                      |ИНДЕКСИРОВАТЬ ПО
		                      |	ЭкземплярСценария,
		                      |	ЭкземплярРодитель
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария КАК ЭкземплярСценария,
		                      |	ПланЗапускаСценариевАвтоматизации.Начало КАК Начало,
		                      |	ПланЗапускаСценариевАвтоматизации.Окончание КАК Окончание
		                      |ИЗ
		                      |	РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтартоваяТочка КАК СтартоваяТочка
		                      |		ПО (ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель = СтартоваяТочка.ЭкземплярРодитель
		                      |				ИЛИ ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария = СтартоваяТочка.ЭкземплярСценария)
		                      |			И (ПланЗапускаСценариевАвтоматизации.Начало >= &ТекущаяДата)
		                      |			И (ПланЗапускаСценариевАвтоматизации.Окончание >= &ТекущаяДата)
		                      |ГДЕ
		                      |	НЕ ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария.ПометкаУдаления
		                      |	И ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария.Состояние В(&МассивСостояний)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |УНИЧТОЖИТЬ СтартоваяТочка");
		Запрос.УстановитьПараметр("ТекущийРедактируемыйЭлемент", ТекущийРедактируемыйЭлемент);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("МассивСостояний", МассивСостояний);
		МассивИзменяемых = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭкземплярСценария");
	КонецЕсли;	
	
	НачатьТранзакцию();
	
	Попытка	
		Для Каждого Элемент Из МассивИзменяемых Цикл
			НЗ = РегистрыСведений.ПланЗапускаСценариевАвтоматизации.СоздатьНаборЗаписей();
			НЗ.Отбор.ЭкземплярСценария.Установить(Элемент);
			НЗ.Прочитать();
			Если НЗ.Количество() = 1 Тогда
				Запись = НЗ[0];
				
				Если Запись.ВыполняетсяПоРасписанию Или ЗначениеЗаполнено(Запись.ЭкземплярРодитель) Тогда
					СтруктураДат = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьДатуНачалаОкончанияСкорректированногоРасписания(Запись.Начало, Начало, Окончание);
				Иначе
					СтруктураДат = Новый Структура("ДатаНачала, ДатаОкончания", Начало, Окончание);
				КонецЕсли;	
				
				Запись.Начало		= СтруктураДат.ДатаНачала;
				Запись.Окончание	= СтруктураДат.ДатаОкончания;
				
				ОбъектСценария = Элемент.ПолучитьОбъект();
				ОбъектСценария.ПлановаяДатаЗапуска		= СтруктураДат.ДатаНачала;
				ОбъектСценария.ПлановаяДатаОкончания	= СтруктураДат.ДатаОкончания;
				
				НЗ.Записать();
				ОбъектСценария.Записать();

			
				// Теперь скорректируем ДатыЗамещения зависимых элементов
				Если ЭтоКорневойЭлемент Тогда
					Запрос = Новый Запрос("ВЫБРАТЬ
					                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария КАК ЭкземплярСценария
					                      |ИЗ
					                      |	РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
					                      |ГДЕ
					                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель = &ЭкземплярРодитель
					                      |	И (ЧАС(ПланЗапускаСценариевАвтоматизации.ДатаЗамещения) <> ЧАС(&ДатаЗамещения)
										  |		ИЛИ МИНУТА(ПланЗапускаСценариевАвтоматизации.ДатаЗамещения) <> МИНУТА(&ДатаЗамещения)
										  |		ИЛИ СЕКУНДА(ПланЗапускаСценариевАвтоматизации.ДатаЗамещения) <> СЕКУНДА(&ДатаЗамещения))");
					Запрос.УстановитьПараметр("ЭкземплярРодитель", Элемент);
					Запрос.УстановитьПараметр("ДатаЗамещения", СтруктураДат.ДатаНачала);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						НЗ = РегистрыСведений.ПланЗапускаСценариевАвтоматизации.СоздатьНаборЗаписей();
						НЗ.Отбор.ЭкземплярСценария.Установить(Выборка.ЭкземплярСценария);
						НЗ.Прочитать();
						
						Для Каждого Запись Из НЗ Цикл
							Запись.ДатаЗамещения = НачалоДня(Запись.ДатаЗамещения) + Час(СтруктураДат.ДатаНачала)*3600 + Минута(СтруктураДат.ДатаНачала)*60 + Секунда(СтруктураДат.ДатаНачала);
						КонецЦикла;	
						
						НЗ.Записать();
					КонецЦикла;	
				КонецЕсли;
			Иначе
				ВызватьИсключение НСтр("ru='Что-то пошло не так'");
			КонецЕсли;	
		КонецЦикла;			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru='Расписание сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры	

Процедура СгенерироватьЭлементыЗамещенияПоРасписанию(Расписание, Экземпляр, ДатаНачала)
	ТаблицаЗадачПоРасписанию = ПолучитьДатыВыполненияЗадачПоРасписанию(Расписание, ДатаНачала);

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Календарь.Дата КАК Дата,
	                      |	Календарь.НомерМесяца КАК НомерМесяца,
	                      |	Календарь.НомерДняВНеделе КАК НомерДняВНеделе,
	                      |	Календарь.НомерДняВПериоде КАК НомерДняВПериоде,
	                      |	Календарь.НомерНеделиВПериоде КАК НомерНеделиВПериоде
	                      |ПОМЕСТИТЬ ТаблицаЗадачПоРасписанию
	                      |ИЗ
	                      |	&ТаблицаЗадачПоРасписанию КАК Календарь
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Дата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария КАК ЭкземплярСценария,
	                      |	ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель КАК ЭкземплярРодитель,
	                      |	ПланЗапускаСценариевАвтоматизации.Начало КАК Начало,
	                      |	ПланЗапускаСценариевАвтоматизации.Окончание КАК Окончание,
	                      |	ПланЗапускаСценариевАвтоматизации.ДатаЗамещения КАК ДатаЗамещения,
	                      |	ПланЗапускаСценариевАвтоматизации.ВыполняетсяПоРасписанию КАК ВыполняетсяПоРасписанию,
	                      |	ПланЗапускаСценариевАвтоматизации.Расписание КАК Расписание,
	                      |	ТаблицаЗадачПоРасписанию.Дата КАК Дата,
	                      |	ТаблицаЗадачПоРасписанию.НомерМесяца КАК НомерМесяца,
	                      |	ТаблицаЗадачПоРасписанию.НомерДняВНеделе КАК НомерДняВНеделе,
	                      |	ТаблицаЗадачПоРасписанию.НомерДняВПериоде КАК НомерДняВПериоде,
	                      |	ТаблицаЗадачПоРасписанию.НомерНеделиВПериоде КАК НомерНеделиВПериоде
	                      |ИЗ
	                      |	РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
	                      |		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаЗадачПоРасписанию КАК ТаблицаЗадачПоРасписанию
	                      |		ПО (НАЧАЛОПЕРИОДА(ПланЗапускаСценариевАвтоматизации.Начало, ДЕНЬ) = ТаблицаЗадачПоРасписанию.Дата
	                      |					И ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария = &ЭкземплярСценария
	                      |				ИЛИ НАЧАЛОПЕРИОДА(ПланЗапускаСценариевАвтоматизации.ДатаЗамещения, ДЕНЬ) = ТаблицаЗадачПоРасписанию.Дата
	                      |					И ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель = &ЭкземплярСценария)
	                      |ГДЕ
	                      |	(ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария = &ЭкземплярСценария
	                      |			ИЛИ ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель = &ЭкземплярСценария
	                      |			ИЛИ ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария ЕСТЬ NULL)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ТаблицаЗадачПоРасписанию");
	Запрос.УстановитьПараметр("ЭкземплярСценария", Экземпляр);
	Запрос.УстановитьПараметр("ТаблицаЗадачПоРасписанию", ТаблицаЗадачПоРасписанию);
	
	МассивСоздания = Новый Массив;
	МассивУдаления = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Дата = Null Тогда // нет в актуальном расписании
			МассивУдаления.Добавить(Выборка.ЭкземплярСценария);
		ИначеЕсли Выборка.ЭкземплярСценария = Null Тогда
			МассивСоздания.Добавить(Выборка.Дата);
		КонецЕсли;
	КонецЦикла;
	
	// удалим лишние
	Для каждого Элемент Из МассивУдаления Цикл
		НЗ = РегистрыСведений.ПланЗапускаСценариевАвтоматизации.СоздатьНаборЗаписей();
		НЗ.Отбор.ЭкземплярСценария.Установить(Элемент);
		
		НЗ.Прочитать();
		Для каждого Запись Из НЗ Цикл
			Запись.Удаленный = Истина;
		КонецЦикла;	
		
		НЗ.Записать();
		
		Об = Элемент.ПолучитьОбъект();
		Об.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
	// создадим новые
	НЗ = РегистрыСведений.ПланЗапускаСценариевАвтоматизации.СоздатьНаборЗаписей();
	НЗ.Отбор.ЭкземплярСценария.Установить(Экземпляр);
	НЗ.Прочитать();
	Если НЗ.Количество() = 1 Тогда
		Эталон = НЗ[0];
		Для Каждого Элемент Из МассивСоздания Цикл
			СтруктураДат = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьДатуНачалаОкончанияСкорректированногоРасписания(Элемент, Эталон.Начало, Эталон.Окончание);			
			Элемент = РаботаСоСценариямиАвтоматизацииСервер.СоздатьНовыйЭкземплярСценарияПоЭталону(Эталон.ЭкземплярСценария, Эталон.ЭкземплярСценария.КонтурАвтоматизации, СтруктураДат.ДатаНачала, СтруктураДат.ДатаОкончания, Перечисления.СостоянияСценария.Запланирован);
			
			НЗ_создаваемый = РегистрыСведений.ПланЗапускаСценариевАвтоматизации.СоздатьНаборЗаписей();
			НЗ_создаваемый.Отбор.ЭкземплярСценария.Установить(Элемент);
			НоваяЗапись = НЗ_создаваемый.Добавить();
			НоваяЗапись.ЭкземплярСценария = Элемент;
			НоваяЗапись.ЭкземплярРодитель = Экземпляр;
			НоваяЗапись.Начало = СтруктураДат.ДатаНачала;
			НоваяЗапись.Окончание = СтруктураДат.ДатаОкончания;
			НоваяЗапись.ДатаЗамещения = СтруктураДат.ДатаНачала;
			
			НЗ_создаваемый.Записать();
		КонецЦикла;	
	Иначе
		ВызватьИсключение НСтр("ru='Что-то пошло не так'");
	КонецЕсли;	
КонецПроцедуры	

Функция ПолучитьДатыВыполненияЗадачПоРасписанию(Расписание, ДатаНачалаСерии)

	Результат = Неопределено;
	
	КалендарьСинтетический = ПолучитьКалендарьНаБудущее(366, ДатаНачалаСерии, Расписание.ПериодПовтораДней, Расписание.ПериодНедель);
	
	ДниНедели = Расписание.ДниНедели;
	Если ДниНедели.Количество() = 0 Тогда
		ДниНедели = Новый Массив;
		Для День = 1 По 7 Цикл
			ДниНедели.Добавить(День);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Календарь", КалендарьСинтетический);
	Запрос.УстановитьПараметр("ДатаНачала",			ДатаНачалаСерии);
	Запрос.УстановитьПараметр("ДатаКонца",			?(ЗначениеЗаполнено(Расписание.ДатаКонца), Расписание.ДатаКонца, НачалоДня(ДатаНачалаСерии) + 366*60*60*24));
	Запрос.УстановитьПараметр("ДниНедели",			ДниНедели);
	Запрос.УстановитьПараметр("ПериодПовтораДней",	?(Расписание.ПериодПовтораДней = 0,1,Расписание.ПериодПовтораДней));
	Запрос.УстановитьПараметр("ПериодНедель",		?(Расписание.ПериодНедель = 0,1,Расписание.ПериодНедель));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Календарь.Дата КАК Дата,
	|	Календарь.НомерМесяца КАК НомерМесяца,
	|	Календарь.НомерДняВНеделе КАК НомерДняВНеделе,
	|	Календарь.НомерДняВПериоде КАК НомерДняВПериоде,
	|	Календарь.НомерНеделиВПериоде КАК НомерНеделиВПериоде
	|ПОМЕСТИТЬ Календарь
	|ИЗ
	|	&Календарь КАК Календарь
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	НомерМесяца,
	|	НомерДняВНеделе,
	|	НомерДняВПериоде,
	|	НомерНеделиВПериоде	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ ?(Расписание.КоличествоПовторов = 0, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Расписание.КоличествоПовторов) + "
	|	Календарь.Дата КАК Дата,
	|	Календарь.НомерМесяца КАК НомерМесяца,
	|	Календарь.НомерДняВНеделе КАК НомерДняВНеделе,
	|	Календарь.НомерДняВПериоде КАК НомерДняВПериоде,
	|	Календарь.НомерНеделиВПериоде КАК НомерНеделиВПериоде
	|ИЗ
	|	Календарь КАК Календарь
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Календарь.Дата >= &ДатаНачала
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ДатаКонца = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Календарь.Дата < &ДатаКонца
	|		КОНЕЦ
	|	И Календарь.НомерДняВНеделе В(&ДниНедели)
	|	И Календарь.НомерДняВПериоде = &ПериодПовтораДней
	|	И Календарь.НомерНеделиВПериоде = &ПериодНедель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Календарь";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКалендарьНаБудущее(КоличествоДнейКалендаря, ДатаНачалаСерии, Знач ПериодДней = 1, Знач ПериодНедель = 1) 
	
	Если ПериодНедель = 0 Тогда 
		ПериодНедель = 1;
	КонецЕсли;
	
	Если ПериодДней = 0 Тогда
		ПериодДней = 1;
	КонецЕсли;
	
	КалендарьСинтетический = Новый ТаблицаЗначений;
	КалендарьСинтетический.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты()));
	КалендарьСинтетический.Колонки.Добавить("НомерМесяца", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
	КалендарьСинтетический.Колонки.Добавить("НомерДняВНеделе", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));	
	КалендарьСинтетический.Колонки.Добавить("НомерДняВПериоде", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0,ДопустимыйЗнак.Неотрицательный)));	
	КалендарьСинтетический.Колонки.Добавить("НомерНеделиВПериоде", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0,ДопустимыйЗнак.Неотрицательный)));
	
	Дата = НачалоДня(ДатаНачалаСерии);
	ДатаНачалаСерии = НачалоДня(ДатаНачалаСерии);
	НомерДняВПериоде = 0;
	НомерНеделиВПериоде = 0;
	
	Если ДатаНачалаСерии <= Дата Тогда
		КоличествоДней = (Дата - ДатаНачалаСерии)/60/60/24;
		НомерДняВПериоде = КоличествоДней - Цел(КоличествоДней/ПериодДней)*ПериодДней;
		
		КоличествоНедель = Цел(КоличествоДней / 7);
		НомерНеделиВПериоде = КоличествоНедель - Цел(КоличествоНедель/ПериодНедель)*ПериодНедель;
	КонецЕсли;
	
	Если НомерДняВПериоде = 0 Тогда 
		НомерДняВПериоде = ПериодДней;
	КонецЕсли;
	
	Если НомерНеделиВПериоде = 0 Тогда 
		НомерНеделиВПериоде = ПериодНедель;
	КонецЕсли;
	
	Для Счетчик = 0 По КоличествоДнейКалендаря - 1 Цикл
		
		Дата = НачалоДня(ДатаНачалаСерии) + Счетчик * 60*60*24;
		НоваяСтрока = КалендарьСинтетический.Добавить();
		НоваяСтрока.Дата = Дата;
		НоваяСтрока.НомерМесяца = Месяц(Дата);
		НоваяСтрока.НомерДняВНеделе = ДеньНедели(Дата);
		
		Если ДатаНачалаСерии <= Дата Тогда
			НоваяСтрока.НомерДняВПериоде = НомерДняВПериоде;
			НоваяСтрока.НомерНеделиВПериоде = НомерНеделиВПериоде;
			
			НомерДняВПериоде = ?(НомерДняВПериоде+1 > ПериодДней, 1, НомерДняВПериоде+1);
			
			Если НоваяСтрока.НомерДняВНеделе = 1 Тогда
				НомерНеделиВПериоде = ?(НомерНеделиВПериоде+1 > ПериодНедель, 1, НомерНеделиВПериоде+1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КалендарьСинтетический;
	
КонецФункции

#КонецОбласти



#Область ПрограммныйИнтерфейс

#Область АдминистрированиеСервера

Функция АдминистрированиеСервера(Подключение) Экспорт
    
    Если Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        АдминистрированиеСервера = АдминистрированиеСервераRAS(Подключение);
    ИначеЕсли Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        АдминистрированиеСервера = АдминистрированиеСервераАгентКИП(Подключение);
    КонецЕсли;
    
    Возврат АдминистрированиеСервера; 
    
КонецФункции

Функция УникальныйИдентификаторКластера(ТипПодключения, АдминистрированиеСервера, ПортКластера) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Возврат УникальныйИдентификаторКластераRAS(АдминистрированиеСервера, ПортКластера);
    КонецЕсли;
    
КонецФункции

Функция АдминистрированиеКластер(ТипПодключения, АдминистрированиеСервера, УникальныйИдентификаторОбъекта) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        АдминистрированиеКластер = АдминистрированиеКластерRAS(АдминистрированиеСервера, УникальныйИдентификаторОбъекта);
    ИначеЕсли ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        АдминистрированиеКластер = АдминистрированиеКластерАгентКИП(АдминистрированиеСервера, УникальныйИдентификаторОбъекта); 
    КонецЕсли;
    
    Возврат АдминистрированиеКластер;
    
КонецФункции

Функция АдминистрированиеИнформационнаяБазаКратко(ТипПодключения, АдминистрированиеКластер, УникальныйИдентификаторОбъекта) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Возврат АдминистрированиеИнформационнаяБазаRAS(АдминистрированиеКластер, УникальныйИдентификаторОбъекта, Истина);
    ИначеЕсли ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        Возврат АдминистрированиеИнформационнаяБазаАгентКИП(АдминистрированиеКластер, УникальныйИдентификаторОбъекта, Истина);
    КонецЕсли;
    
КонецФункции

Функция УникальныйИдентификаторИнформационнойБазы(ТипПодключения, АдминистрированиеКластер, ИмяВКластере) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Возврат УникальныйИдентификаторИнформационнойБазыRAS(АдминистрированиеКластер, ИмяВКластере);
    КонецЕсли;
    
КонецФункции

Функция УникальныйИдентификаторРабочегоСервера(ТипПодключения, АдминистрированиеКластер, Хост) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Возврат УникальныйИдентификаторРабочегоСервераRAS(АдминистрированиеКластер, Хост);
    КонецЕсли;
    
КонецФункции

Функция АдминистрированиеИнформационнаяБаза(ТипПодключения, АдминистрированиеКластер, УникальныйИдентификаторОбъекта) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        АдминистрированиеИнформационнаяБазаRAS(АдминистрированиеКластер, УникальныйИдентификаторОбъекта, Ложь);
    КонецЕсли;
    
КонецФункции

Функция АдминистрированиеРабочийСервер(ТипПодключения, АдминистрированиеКластер, УникальныйИдентификаторОбъекта) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Возврат АдминистрированиеРабочийСерверRAS(АдминистрированиеКластер, УникальныйИдентификаторОбъекта);
    ИначеЕсли ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        Возврат АдминистрированиеРабочийСерверАгентКИП(АдминистрированиеКластер, УникальныйИдентификаторОбъекта);                    
    КонецЕсли;
    
КонецФункции

Процедура АутентификацияКластера(ТипПодключения, АдминистрированиеКластер, Пользователь, Пароль, Проверка = Ложь) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        АутентификацияКластераRAS(АдминистрированиеКластер, Пользователь, Пароль);
    ИначеЕсли ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        
        Если Проверка Тогда
            АутентификацияКластераАгентКИП(АдминистрированиеКластер, Пользователь, Пароль);
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

Процедура АутентификацияИнформационнаяБаза(ТипПодключения, АдминистрированиеИнформационнаяБаза, Пользователь, Пароль, Проверка = Ложь) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        АутентификацияИнформационнаяБазаRAS(АдминистрированиеИнформационнаяБаза, Пользователь, Пароль);
    ИначеЕсли ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        
        АдминистрированиеИнформационнаяБаза.Вставить("Пользователь", Пользователь);
        АдминистрированиеИнформационнаяБаза.Вставить("Пароль", Пароль);
        Если Проверка Тогда
            АутентификацияИнформационнаяБазаАгентКИП(АдминистрированиеИнформационнаяБаза, Пользователь, Пароль);
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

// Функция - Информационные базы
//
// Параметры:
//  ТипПодключения           - Перечисления.ТипПодключенияКластер1С - тип подключения к серверу администрирования.
//  АдминистрированиеКластер - АдминистрированиеКластер - объект, прошедший аутентификацию.
//  Конвертировать           - Булево - признак конвертации полученных данных в структуру.
// 
// Возвращаемое значение:
//   - Массив информационных баз кластера.
//
Функция ИнформационныеБазы(ТипПодключения, АдминистрированиеКластер, Конвертировать = Ложь) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        ИнформационныеБазы = ИнформационныеБазыRAS(АдминистрированиеКластер, Конвертировать);
    Иначе
        ВызватьИсключение "Данный тип подкючения '" + ТипПодключения + "' не поддерживается!";
    КонецЕсли;
        
    Возврат ИнформационныеБазы;
    
КонецФункции

Функция РабочиеСерверы(ТипПодключения, АдминистрированиеКластер, Конвертировать = Ложь) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        РабочиеСерверы = РабочиеСерверыRAS(АдминистрированиеКластер, Конвертировать);
    Иначе
        ВызватьИсключение "Данный тип подкючения '" + ТипПодключения + "' не поддерживается!";
    КонецЕсли;
    
    Возврат РабочиеСерверы;
    
КонецФункции

Функция РабочиеПроцессы(ТипПодключения, АдминистрированиеКластер, Конвертировать = Ложь) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        РабочиеПроцессы = РабочиеПроцессыRAS(АдминистрированиеКластер, Конвертировать);
    Иначе
        ВызватьИсключение "Данный тип подкючения '" + ТипПодключения + "' не поддерживается!";
    КонецЕсли;
    
    Возврат РабочиеПроцессы;
        
КонецФункции

// Функция - Сеансы
//
// Параметры:
//  ТипПодключения                         - Перечисления.ТипПодключенияКластер1С - тип подключения к серверу администрирования.
//  АдминистрированиеИнформационнаяБаза    - АдминистрированиеИнформационнаяБаза  - объект, прошедший аутентификацию
//  Конвертировать                         - Булево - признак конвертации полученных данных в структуру.
// 
// Возвращаемое значение:
//   - Массив сеансов информационной базы.
//
Функция Сеансы(ТипПодключения, АдминистрированиеИнформационнаяБаза, Конвертировать = Ложь) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Сеансы = СеансыRAS(АдминистрированиеИнформационнаяБаза, Конвертировать);
    Иначе
        ВызватьИсключение "Данный тип подкючения '" + ТипПодключения + "' не поддерживается!";
    КонецЕсли;
    
    Возврат Сеансы;
    
КонецФункции

Функция Соединения(ТипПодключения, АдминистрированиеКластер, Конвертировать = Ложь) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Соединения = СоединенияRAS(АдминистрированиеКластер, Конвертировать);
    Иначе
        ВызватьИсключение "Данный тип подкючения '" + ТипПодключения + "' не поддерживается!";
    КонецЕсли;
    
    Возврат Соединения;
    
КонецФункции

Функция СвойстваКластер(ТипПодключения, АдминистрированиеКластер, Конвертировать = Ложь) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Возврат СвойстваКластерRAS(АдминистрированиеКластер, Конвертировать);
    ИначеЕсли ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        Возврат СвойстваКластераАгентКИП(АдминистрированиеКластер, Конвертировать);
    КонецЕсли;
    
КонецФункции

Функция СвойстваИнформационнаяБаза(ТипПодключения, АдминистрированиеИнформационнаяБаза, Конвертировать = Ложь, Проверка = Ложь) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Возврат СвойстваИнформационнаяБазаRAS(АдминистрированиеИнформационнаяБаза, Конвертировать);
    ИначеЕсли ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        Возврат СвойстваИнформационнаяБазаАгентКИП(АдминистрированиеИнформационнаяБаза, Конвертировать, Проверка);
    КонецЕсли;
    
КонецФункции

Функция СвойстваРабочийСервер(ТипПодключения, АдминистрированиеРабочийСервер, Конвертировать = Ложь) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Возврат СвойстваРабочийСерверRAS(АдминистрированиеРабочийСервер, Конвертировать);
    ИначеЕсли ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        Возврат СвойстваРабочийСерверАгентКИП(АдминистрированиеРабочийСервер, Конвертировать);
    КонецЕсли;
    
КонецФункции

// Процедура - Структура кластера
//
// Параметры:
//  Кластер        - Справочник.ОбъектыКонтроля - Кластер для получения структуры.
//  Конвертировать - Булево - Признак конвертации возвращаемого значения в структуру.
//  АдресХранилища - Строка - Адрес во временном хранилище для сохранения результата.
//
Функция СтруктураКластера(Кластер, Конвертировать = Ложь, АдресХранилища = Неопределено) Экспорт
    
    Если Кластер.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        СтруктураКластера = СтруктураКластераRAS(Кластер, Конвертировать);
    ИначеЕсли Кластер.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        СтруктураКластера = СтруктураКластераАгентКИП(Кластер, Конвертировать);
    КонецЕсли;
    
    Если АдресХранилища <> Неопределено Тогда
        ПоместитьВоВременноеХранилище(СтруктураКластера, АдресХранилища);
    Иначе
        Возврат СтруктураКластера;
    КонецЕсли;
    
КонецФункции

// ==========
Функция ПроверитьПодключение(Подключение) Экспорт
           
    Если Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Результат = ПроверитьПодключениеRAS(Подключение);
    ИначеЕсли Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        Результат = ПроверитьПодключениеАгентКИП(Подключение);
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

Функция ПроверитьПодключениеАутентификация(Подключение, Администратор = "", Пароль = "") Экспорт
    
    Если Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Возврат ПроверитьПодключениеАутентификацияRAS(Подключение, Администратор, Пароль);
    ИначеЕсли Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        Возврат ПроверитьПодключениеАутентификацияАгентКИП(Подключение, Администратор, Пароль);
    КонецЕсли;
        
КонецФункции

Функция Кластеры(ТипПодключения, АдминистрированиеСервера, Конвертировать = Ложь) Экспорт
    
    Если ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Возврат КластерыRAS(АдминистрированиеСервера, Конвертировать);
    ИначеЕсли ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        Возврат КластерыАгентКИП(АдминистрированиеСервера, Конвертировать);
    КонецЕсли;
    
КонецФункции

// Функция - Параметры рабочего сервера
//
// Параметры:
//  Подключение                       - СправочникСсылка.ПараметрыПодключенияКластер1С - Подключение.
//  Кластер                           - СправочникСсылка.ОбъектыКонтроля - Кластер, которому принадлежит рабочий сервер.
//  УникальныйИдентификаторОбъекта    - Строка - Универсальный идентификатор рабочего сервера.
//  Компьютер                         - Строка - Имя компьютера.
// 
// Возвращаемое значение:
//   - 
//
Функция ПараметрыРабочегоСервера(Кластер, УникальныйИдентификаторОбъекта, Компьютер = Неопределено) Экспорт
    
    Соединители = Справочники.ПараметрыПодключенияКластер1С.ПараметрыПодключения(Кластер.Подключение);
    
    Если Кластер.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Возврат ПараметрыРабочегоСервераRAS(Соединители, Кластер, УникальныйИдентификаторОбъекта, Компьютер);
    КонецЕсли;
    
КонецФункции

// Функция - Параметры информационной базы
//
// Параметры:
//  Кластер                        - СправочникСсылка.ОбъектыКонтроля - Кластер, на котором расположена информационная база.
//  УникальныйИдентификаторОбъекта - Строка - Универсальный идентификатор информационной базы.
//  Пользователь                   - Строка - Пользователь информационной базы с административными правами. 
//  Пароль                         - Строка - Пароль пользователя.
//  ИмяВКластере                   - Строка - Имя информационной базы в кластере.
// 
// Возвращаемое значение:
//   - Соответствие 
//
Функция ПараметрыИнформационнойБазы(Кластер, УникальныйИдентификаторОбъекта, Пользователь, Пароль) Экспорт
    
    Если Кластер.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        Возврат ПараметрыИнформационнойБазыRAS(Кластер, УникальныйИдентификаторОбъекта, Пользователь, Пароль); 
    КонецЕсли;
    
КонецФункции

#КонецОбласти

#Область Инциденты

// Процедура - Открыть инцидент кластера аутентификация
//
// Параметры:
//  Кластер1С - СправочникСсылка.ОбъектыКонтроля - Кластер, по которому открывается инцидент.
//  Инцидент  - Соответствие - Описание инцидента с ключами:
//                                 date, значение - Строка - дата открытия, строка формата 'yyyyMMddHHmmss'.
//                                 descr, значение - Строка - сообщение инцидента.
//
Процедура ОткрытьИнцидентКластераАутентификация(Кластер1С, Инцидент) Экспорт
    
    НавигационнаяСсылка = НавигационнаяСсылкаКластер(Кластер1С);
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("КластерАутентификация", Перечисления.УровниИнцидентов.Ошибка);
    ИнцидентСсылка = ИнцидентОбъектКонтроля(Кластер1С, Инцидент);
    ДатаОткрытия = ДатаОткрытия(Инцидент);
        
    Сообщение = Инцидент["descr"] + " Пройдите по ссылке ""Источник"". В закладке ""Подключение"" установите правильные параметры аутентификации.";
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,, Сообщение, 1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка, ДатаОткрытия);
    
КонецПроцедуры

// Процедура - Закрыть инцидент кластера аутентификация
//
// Параметры:
//  Кластер1С - СправочникСсылка.ОбъектыКонтроля - Кластер, по которому закрывается инцидент.
//  Инцидент  - Соответствие - Описание инцидента с ключами:
//                                 date, значение - Строка - дата открытия, строка формата 'yyyyMMddHHmmss'.
//                                 descr, значение - Строка - сообщение инцидента.
//
Процедура ЗакрытьИнцидентКластераАутентификация(Кластер1С, Инцидент) Экспорт
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("КластерАутентификация", Перечисления.УровниИнцидентов.Ошибка);
    ИнцидентСсылка = ИнцидентОбъектКонтроля(Кластер1С, Инцидент);
    ДатаЗакрытия = ДатаЗакрытия(Инцидент);
        
    ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, ИнцидентСсылка, Истина,,ДатаЗакрытия);
    
КонецПроцедуры

Процедура ОткрытьИнцидентКластераКонтрольПараметров(Кластер1С, Инцидент, Конвертировать = Истина) Экспорт
    
    НавигационнаяСсылка = НавигационнаяСсылкаКластер(Кластер1С);
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("КластерКонтрольПараметров", Перечисления.УровниИнцидентов.Предупреждение);
    ИнцидентСсылка = ИнцидентОбъектКонтроля(Кластер1С, Инцидент);
    ДатаОткрытия = ДатаОткрытия(Инцидент);
    
    Сообщение = Новый Массив;
    Сообщение.Добавить("Параметры не соответсвуют эталонным.");
    
    ДанныеСообщения = СообщениеИзJSON(Инцидент["descr"]);
    Если Конвертировать Тогда
        ДанныеСообщения = РегистрыСведений.ПараметрыКластеров.КонвертироватьПараметры(ДанныеСообщения, Перечисления.ТипыПараметровКластер1С.АгентКИП, Перечисления.ТипыПараметровКластер1С.ЦКК);
    КонецЕсли;
    
    Для Каждого ТекДанные Из ДанныеСообщения Цикл
        
        Если ТекДанные.Ключ = "РежимРаспределенияНагрузки" Тогда
            
            ЗначенияПредставление = Новый Соответствие;
            ЗначенияПредставление.Вставить("referenceValue", ?(ТекДанные.Значение["referenceValue"] = 0 ,"'Приоритет по производительности'", "'Приоритет по памяти'"));
            ЗначенияПредставление.Вставить("value", ?(ТекДанные.Значение["value"] = 0 ,"'Приоритет по производительности'", "'Приоритет по памяти'"));
            
        Иначе
            
            ЗначенияПредставление = ТекДанные.Значение;
            
        КонецЕсли;
        
        Ресурс = Метаданные.РегистрыСведений.ПараметрыКластеров.Ресурсы[ТекДанные.Ключ];
        Сообщение.Добавить(Ресурс.Синоним + СтрШаблон(" = %1, эталон = %2.", ЗначенияПредставление["value"], ЗначенияПредставление["referenceValue"]));
        
    КонецЦикла;
    
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,, СтрСоединить(Сообщение, Символы.ПС), 1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка, ДатаОткрытия);
    
КонецПроцедуры

Процедура ЗакрытьИнцидентКластераКонтрольПараметров(Кластер1С, Инцидент) Экспорт
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("КластерКонтрольПараметров", Перечисления.УровниИнцидентов.Предупреждение);
    ИнцидентСсылка = ИнцидентОбъектКонтроля(Кластер1С, Инцидент);
    ДатаЗакрытия = ДатаЗакрытия(Инцидент);
        
    ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, ИнцидентСсылка, Истина,,ДатаЗакрытия);
    
КонецПроцедуры

Процедура ОткрытьИнцидентРабочийСерверКонтрольПараметров(РабочийСервер1С, Инцидент, Конвертировать = Ложь) Экспорт
    
    НавигационнаяСсылка = НавигационнаяСсылкаРабочийСервер(РабочийСервер1С);
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("РабочийСерверКонтрольПараметров", Перечисления.УровниИнцидентов.Предупреждение);
    ИнцидентСсылка =  ИнцидентОбъектКонтроля(РабочийСервер1С, Инцидент);
    ДатаОткрытия = ДатаОткрытия(Инцидент);
    
    Сообщение = Новый Массив;
    Сообщение.Добавить("Параметры не соответсвуют эталонным.");
    
    ДанныеСообщения = СообщениеИзJSON(Инцидент["descr"]);
    Если Конвертировать Тогда
        ДанныеСообщения = РегистрыСведений.ПараметрыРабочихСерверов.КонвертироватьПараметры(ДанныеСообщения, Перечисления.ТипыПараметровКластер1С.АгентКИП, Перечисления.ТипыПараметровКластер1С.ЦКК);
    КонецЕсли;
    
    Для Каждого ТекДанные Из ДанныеСообщения Цикл
        Ресурс = Метаданные.РегистрыСведений.ПараметрыРабочихСерверов.Ресурсы[ТекДанные.Ключ];
        Сообщение.Добавить(Ресурс.Синоним + СтрШаблон(" = %1, эталон = %2.", ТекДанные.Значение["value"], ТекДанные.Значение["referenceValue"]));
    КонецЦикла;
    
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,, СтрСоединить(Сообщение, Символы.ПС), 1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка, ДатаОткрытия);
    
КонецПроцедуры

Процедура ЗакрытьИнцидентРабочийСерверКонтрольПараметров(РабочийСервер1С, Инцидент) Экспорт
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("РабочийСерверКонтрольПараметров", Перечисления.УровниИнцидентов.Предупреждение);
    ИнцидентСсылка =  ИнцидентОбъектКонтроля(РабочийСервер1С, Инцидент);
    ДатаЗакрытия = ДатаЗакрытия(Инцидент);
        
    ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, ИнцидентСсылка, Истина,,ДатаЗакрытия);
    
КонецПроцедуры

// Процедура - Открыть инцидент информационной базы аутентификация
//
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ОбъектыКонтроля - Информационная база, по которой открывается инцидент.
//  Инцидент  - Соответствие - Описание инцидента с ключами:
//                                 date, значение - Строка - дата открытия, строка формата 'yyyyMMddHHmmss'.
//                                 descr, значение - Строка - сообщение инцидента.
//
Процедура ОткрытьИнцидентИнформационнаяБазаАутентификация(ИнформационнаяБаза, Инцидент) Экспорт
    
    Если ЗначениеЗаполнено(ИнформационнаяБаза) Тогда
        
        НавигационнаяСсылка = НавигационнаяСсылкаИнформационнаяБаза(ИнформационнаяБаза);
        
        ТипИнцидента = ТипИнцидентаОбъектКонтроля("ИнформационнаяБазаАутентификация", Перечисления.УровниИнцидентов.Ошибка);
        ИнцидентСсылка = ИнцидентОбъектКонтроля(ИнформационнаяБаза, Инцидент);
        ДатаОткрытия = ДатаОткрытия(Инцидент);  
        
        Сообщение = Инцидент["descr"] + " Пройдите по ссылке ""Источник"". Установите правильные параметры аутентификации для информационной базы.";
        ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,, Сообщение, 1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка, ДатаОткрытия);
        
    КонецЕсли;
    
КонецПроцедуры

// Процедура - Открыть инцидент информационной базы аутентификация
//
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ОбъектыКонтроля - Информационная база, по которой закрывается инцидент.
//  Инцидент  - Соответствие - Описание инцидента с ключами:
//                                 date, значение - Строка - дата открытия, строка формата 'yyyyMMddHHmmss'.
//                                 descr, значение - Строка - сообщение инцидента.
//
Процедура ЗакрытьИнцидентИнформационнаяБазаАутентификация(ИнформационнаяБаза, Инцидент) Экспорт
    
    НавигационнаяСсылка = НавигационнаяСсылкаИнформационнаяБаза(ИнформационнаяБаза);
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("ИнформационнаяБазаАутентификация", Перечисления.УровниИнцидентов.Ошибка);
    ИнцидентСсылка = ИнцидентОбъектКонтроля(ИнформационнаяБаза, Инцидент);
    ДатаЗакрытия = ДатаЗакрытия(Инцидент);    
    
    ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, ИнцидентСсылка,Истина,,ДатаЗакрытия);
    
КонецПроцедуры

Процедура ОткрытьИнцидентИнформационнаяКонтрольПараметров(ИнформационнаяБаза, Инцидент, Конвертировать = Ложь) Экспорт
    
    НавигационнаяСсылка = НавигационнаяСсылкаИнформационнаяБаза(ИнформационнаяБаза);
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("ИнформационнаяБазаКонтрольПараметров", Перечисления.УровниИнцидентов.Предупреждение);
    ИнцидентСсылка = ИнцидентОбъектКонтроля(ИнформационнаяБаза, Инцидент);
    ДатаОткрытия = ДатаОткрытия(Инцидент);
    
    Сообщение = Новый Массив;
    Сообщение.Добавить("Параметры не соответсвуют эталонным.");
    
    ДанныеСообщения = СообщениеИзJSON(Инцидент["descr"]);
    Если Конвертировать Тогда
        ДанныеСообщения = РегистрыСведений.ПараметрыИнформационныхБаз.КонвертироватьПараметры(ДанныеСообщения, Перечисления.ТипыПараметровКластер1С.АгентКИП, Перечисления.ТипыПараметровКластер1С.ЦКК);
    КонецЕсли;
        
    Для Каждого ТекДанные Из ДанныеСообщения Цикл
        Ресурс = Метаданные.РегистрыСведений.ПараметрыИнформационныхБаз.Ресурсы[ТекДанные.Ключ];
        Сообщение.Добавить(Ресурс.Синоним + СтрШаблон(" = %1, эталон = %2.", ТекДанные.Значение["value"], ТекДанные.Значение["referenceValue"]));
    КонецЦикла;
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,, СтрСоединить(Сообщение, Символы.ПС), 1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка, ДатаОткрытия);
    
КонецПроцедуры

Процедура ЗакрытьИнцидентИнформационнаяКонтрольПараметров(ИнформационнаяБаза, Инцидент) Экспорт
    
    НавигационнаяСсылка = НавигационнаяСсылкаИнформационнаяБаза(ИнформационнаяБаза);
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("ИнформационнаяБазаКонтрольПараметров", Перечисления.УровниИнцидентов.Предупреждение);
    ИнцидентСсылка = ИнцидентОбъектКонтроля(ИнформационнаяБаза, Инцидент);
    ДатаЗакрытия = ДатаЗакрытия(Инцидент);    
    
    ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, ИнцидентСсылка,Истина,,ДатаЗакрытия);
    
КонецПроцедуры

Процедура ОткрытьИнцидентКластерУдалениеОбъекта(Кластер1С) Экспорт
    
    НавигационнаяСсылка = НавигационнаяСсылкаКластер(Кластер1С);
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("КластерУдаление", Перечисления.УровниИнцидентов.Предупреждение);
    
    Если НЕ Кластер1С.Потерянный Тогда
        
        Кластер1С_Объект = Кластер1С.ПолучитьОбъект();
        Кластер1С_Объект.Наименование = "(Не использовать) " + Кластер1С_Объект.Наименование;
        Кластер1С_Объект.Потерянный = Истина;
        УстановитьПривилегированныйРежим(Истина);
        Кластер1С_Объект.Записать();
        УстановитьПривилегированныйРежим(Ложь);
        
        Инцидент = Новый Соответствие;
        Инцидент.Вставить("date", Формат(ТекущаяУниверсальнаяДата(), "ДФ='yyyyMMddHHmmss'"));
        Инцидент.Вставить("descr", "Обнаружено удаление объекта." + Символы.ПС
        + "Кластер переименован в """ + Кластер1С_Объект.Наименование + """.");
        Инцидент.Вставить("type", "deleteCluster");
        
        ИнцидентСсылка = ИнцидентОбъектКонтроля(Кластер1С, Инцидент);
        ДатаОткрытия = ДатаОткрытия(Инцидент);
        
        Сообщение = Инцидент["descr"];
        ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,, Сообщение, 1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка, ДатаОткрытия);
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ОткрытьИнцидентИнформационнаяБазаУдалениеОбъекта(ИнформационнаяБаза) Экспорт
    
    НавигационнаяСсылка = НавигационнаяСсылкаКластер(ИнформационнаяБаза);
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("ИнформационнаяБазаУдаление", Перечисления.УровниИнцидентов.Предупреждение);
    
    Если НЕ ИнформационнаяБаза.Потерянный Тогда
        
        ИнформационнаяБаза_Объект = ИнформационнаяБаза.ПолучитьОбъект();
        ИнформационнаяБаза_Объект.Наименование = "(Не использовать) " + ИнформационнаяБаза_Объект.Наименование;
        ИнформационнаяБаза_Объект.Потерянный = Истина;
        УстановитьПривилегированныйРежим(Истина);
        ИнформационнаяБаза_Объект.Записать();
        УстановитьПривилегированныйРежим(Ложь);
        
        
        Инцидент = Новый Соответствие;
        Инцидент.Вставить("date", Формат(ТекущаяУниверсальнаяДата(), "ДФ='yyyyMMddHHmmss'"));
        Инцидент.Вставить("descr", "Обнаружено удаление объекта." + Символы.ПС
        + "Информационная база переименована в """ + ИнформационнаяБаза_Объект.Наименование + """.");
        Инцидент.Вставить("type", "deleteInfoBase");
        
        ИнцидентСсылка = ИнцидентОбъектКонтроля(ИнформационнаяБаза, Инцидент);
        ДатаОткрытия = ДатаОткрытия(Инцидент);
        
        Сообщение = Инцидент["descr"];
        ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,, Сообщение, 1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка, ДатаОткрытия);
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ОткрытьИнцидентРабочийСерверУдалениеОбъекта(РабочийСервер) Экспорт
    
    НавигационнаяСсылка = НавигационнаяСсылкаКластер(РабочийСервер);
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("РабочийСерверУдаление", Перечисления.УровниИнцидентов.Предупреждение);
    
    Если НЕ РабочийСервер.Потерянный Тогда
        
        РабочийСервер_Объект = РабочийСервер.ПолучитьОбъект();
        РабочийСервер_Объект.Наименование = "(Не использовать) " + РабочийСервер_Объект.Наименование;
        РабочийСервер_Объект.Потерянный = Истина;
        УстановитьПривилегированныйРежим(Истина);
        РабочийСервер_Объект.Записать();
        УстановитьПривилегированныйРежим(Ложь);
        
        Инцидент = Новый Соответствие;
        Инцидент.Вставить("date", Формат(ТекущаяУниверсальнаяДата(), "ДФ='yyyyMMddHHmmss'"));
        Инцидент.Вставить("descr", "Обнаружено удаление объекта." + Символы.ПС
        + "Рабочий сервер переименован в """ + РабочийСервер_Объект.Наименование + """.");
        Инцидент.Вставить("type", "deleteWorkingServer");
        
        ИнцидентСсылка = ИнцидентОбъектКонтроля(РабочийСервер, Инцидент);
        ДатаОткрытия = ДатаОткрытия(Инцидент);
        
        Сообщение = Инцидент["descr"];
        ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,, Сообщение, 1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка, ДатаОткрытия);
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ОткрытьИнцидентАдминистрированиеСервера(Кластер1С, Сообщение) Экспорт
    
    НавигационнаяСсылка = НавигационнаяСсылкаКластер(Кластер1С);
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("АдминистрированиеСервера", Перечисления.УровниИнцидентов.Ошибка);
    
    Инцидент = Новый Соответствие;
    Инцидент.Вставить("date", Формат(ТекущаяУниверсальнаяДата(), "ДФ='yyyyMMddHHmmss'"));
    Инцидент.Вставить("descr", Сообщение);
    Инцидент.Вставить("type", "error");
    
    ИнцидентСсылка = ИнцидентОбъектКонтроля(Кластер1С, Инцидент);
    ДатаОткрытия = ДатаОткрытия(Инцидент);
    
    ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, ИнцидентСсылка,,, Сообщение, 1,,,ТипИнцидента.УровеньИнцидента,,НавигационнаяСсылка, ДатаОткрытия);
    
КонецПроцедуры

Процедура ЗакрытьИнцидентАдминистрированиеСервера(Кластер1С) Экспорт
    
    НавигационнаяСсылка = НавигационнаяСсылкаКластер(Кластер1С);
    
    ТипИнцидента = ТипИнцидентаОбъектКонтроля("АдминистрированиеСервера", Перечисления.УровниИнцидентов.Ошибка);
    
    Инцидент = Новый Соответствие;
    Инцидент.Вставить("date", Формат(ТекущаяУниверсальнаяДата(), "ДФ='yyyyMMddHHmmss'"));
    Инцидент.Вставить("type", "error");
    
    ИнцидентСсылка = ИнцидентОбъектКонтроля(Кластер1С, Инцидент);
    ДатаЗакрытия = ДатаЗакрытия(Инцидент);
    
    ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, ИнцидентСсылка,Истина,,ДатаЗакрытия);
    
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АдминистрированиеСервера

Функция АдминистрированиеСервераRAS(Подключение)
    
    АктивноеПодключение = Справочники.ПараметрыПодключенияКластер1С.АктивноеПодключение(Подключение);
    
    Попытка
        АдминистрированиеСервера = АдминистрированиеКластераRAS.АдминистрированиеСервера(АктивноеПодключение.Сервер, АктивноеПодключение.Порт);
    Исключение
        ВызватьИсключение ИнформацияОбОшибке().Описание;
    КонецПопытки;
        
    Возврат АдминистрированиеСервера; 
        
КонецФункции

Функция АдминистрированиеСервераАгентКИП(Подключение)
    
    АгентКИП = Справочники.ПараметрыПодключенияКластер1С.АктивноеПодключение(Подключение);
    АдминистрированиеСервера = Новый Соответствие;
    АдминистрированиеСервера.Вставить("АгентКИП", АгентКИП);
    
    Возврат АдминистрированиеСервера;
    
КонецФункции

Функция УникальныйИдентификаторКластераRAS(АдминистрированиеСервера, ПортКластера)
    
    УникальныйИдентификаторОбъекта = "";
    
    Кластеры = КластерыRAS(АдминистрированиеСервера, Ложь);
    
    Для Каждого Кластер Из Кластеры Цикл
        
        Если Кластер.Порт = ПортКластера Тогда
            УникальныйИдентификаторОбъекта = Строка(Кластер.ИдентификаторКластера);
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат УникальныйИдентификаторОбъекта;
        
КонецФункции

Функция УникальныйИдентификаторИнформационнойБазыRAS(АдминистрированиеКластер, ИмяВКластере)
    
    УникальныйИдентификаторОбъекта = "";
    
    ИнформационныеБазы = ИнформационныеБазыRAS(АдминистрированиеКластер);
    
    Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
        
        Если ИнформационнаяБаза.Имя = ИмяВКластере Тогда
            УникальныйИдентификаторОбъекта = Строка(ИнформационнаяБаза.ИдентификаторИнформационнойБазы);
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат УникальныйИдентификаторОбъекта;
        
КонецФункции

Функция УникальныйИдентификаторРабочегоСервераRAS(АдминистрированиеКластер, Хост)
    
    УникальныйИдентификаторОбъекта = "";
    
    РабочиеСервера = РабочиеСерверыRAS(АдминистрированиеКластер, Ложь);
    
    Для Каждого РабочийСервер Из РабочиеСервера Цикл
        
        Если РабочийСервер.ИмяКомпьютера = Хост Тогда
            УникальныйИдентификаторОбъекта = Строка(РабочийСервер.ИдентификаторРабочегоСервера);
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат УникальныйИдентификаторОбъекта;
        
КонецФункции

// Функция - АдминистрированиеКластерRAS
//
// Параметры:
//  АдминистрированиеСервера       - АдминистрированиеСервера - Параметры административного подключения к кластеру. 
//  УникальныйИдентификаторОбъекта - Строка - Уникальный идентификатор кластера
// 
// Возвращаемое значение:
//   - АдминистрированиеКластер 
//
Функция АдминистрированиеКластерRAS(АдминистрированиеСервера, УникальныйИдентификаторОбъекта)
    
    АдминистрированиеКластер = АдминистрированиеКластераRAS.АдминистрированиеКластер(АдминистрированиеСервера, Новый УникальныйИдентификатор(УникальныйИдентификаторОбъекта));                
        
    Возврат АдминистрированиеКластер;
       
КонецФункции

Функция АдминистрированиеКластерАгентКИП(АдминистрированиеСервера, УникальныйИдентификаторОбъекта)
    
    АдминистрированиеКластер = АгентКИПвЦКК.АдминистрированиеКластер(АдминистрированиеСервера, УникальныйИдентификаторОбъекта);
    
    Возврат АдминистрированиеКластер; 
    
КонецФункции

Функция АдминистрированиеИнформационнаяБазаRAS(АдминистрированиеКластер, УникальныйИдентификаторОбъекта, Кратко)
    
    АдминистрированиеИнформационнаяБаза = АдминистрированиеКластераRAS.АдминистрированиеИнформационнаяБаза(АдминистрированиеКластер, Новый УникальныйИдентификатор(УникальныйИдентификаторОбъекта), Кратко);
    Возврат АдминистрированиеИнформационнаяБаза;
    
КонецФункции

Функция АдминистрированиеИнформационнаяБазаАгентКИП(АдминистрированиеКластер, УникальныйИдентификаторОбъекта, Кратко)
    
    АдминистрированиеИнформационнаяБаза = АгентКИПвЦКК.АдминистрированиеИнформационнаяБаза(АдминистрированиеКластер, УникальныйИдентификаторОбъекта, Кратко);
    
    Возврат АдминистрированиеИнформационнаяБаза;
    
КонецФункции

Функция АдминистрированиеРабочийСерверRAS(АдминистрированиеКластер, УникальныйИдентификаторОбъекта)
    
    АдминистрированиеРабочийСервер = АдминистрированиеКластераRAS.АдминистрированиеРабочийСервер(АдминистрированиеКластер, УникальныйИдентификаторОбъекта);
    Возврат АдминистрированиеРабочийСервер;
    
КонецФункции

Функция АдминистрированиеРабочийСерверАгентКИП(АдминистрированиеКластер, УникальныйИдентификаторОбъекта)
    
    АдминистрированиеРабочийСервер = АгентКИПвЦКК.АдминистрированиеРабочийСервер(АдминистрированиеКластер, УникальныйИдентификаторОбъекта);
    Возврат АдминистрированиеРабочийСервер;    
    
КонецФункции

Процедура АутентификацияКластераRAS(АдминистрированиеКластер, Пользователь, Пароль)
    АдминистрированиеКластераRAS.АутентификацияКластера(АдминистрированиеКластер, Пользователь, Пароль);
КонецПроцедуры

Процедура АутентификацияКластераАгентКИП(АдминистрированиеКластер, Пользователь, Пароль)
    АгентКИПвЦКК.АутентификацияКластера(АдминистрированиеКластер, Пользователь, Пароль);
КонецПроцедуры

Процедура АутентификацияИнформационнаяБазаАгентКИП(АдминистрированиеИнформационнаяБаза, Пользователь, Пароль)
    АгентКИПвЦКК.АутентификацияИнформационнаяБаза(АдминистрированиеИнформационнаяБаза, Пользователь, Пароль);
КонецПроцедуры

Процедура АутентификацияИнформационнаяБазаRAS(АдминистрированиеИнформационнаяБаза, Пользователь, Пароль)
    
    АдминистрированиеИнформационнаяБаза.ВыполнитьАутентификацию(Пользователь, Пароль);
                
КонецПроцедуры

Функция СтруктураКластераRAS(Кластер, Конвертировать)
    
    НастройкиКластера = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Кластер);
    
    АдминистрированиеСервера = АдминистрированиеСервераRAS(Кластер.Подключение);
    АдминистрированиеКластер = АдминистрированиеКластерRAS(АдминистрированиеСервера, Кластер.УникальныйИдентификаторОбъекта);
    АутентификацияКластераRAS(АдминистрированиеКластер, НастройкиКластера.АдминистраторКластера, НастройкиКластера.ПарольАдминистратораКластера);
    
    ИнформационныеБазы = ИнформационныеБазыRAS(АдминистрированиеКластер, Конвертировать);
    РабочиеСерверы = РабочиеСерверыRAS(АдминистрированиеКластер, Конвертировать);
    
    СтруктураКластера = Новый Структура("ИнформационныеБазы, РабочиеСервера1С", ИнформационныеБазы, РабочиеСерверы);
    
    Возврат СтруктураКластера;
        
КонецФункции

Функция СтруктураКластераАгентКИП(Кластер, Конвертировать)
    
    АдминистрированиеСервера = АдминистрированиеСервераАгентКИП(Кластер.Подключение);
    АдминистрированиеКластер = АдминистрированиеКластерАгентКИП(АдминистрированиеСервера, Кластер.УникальныйИдентификаторОбъекта);
    
    СтруктураКластера = АгентКИПвЦКК.СтруктураКластера(АдминистрированиеКластер);
    
    Если Конвертировать Тогда
        
        ТипыПараметров = Перечисления.ТипыПараметровКластер1С;
        
        СтруктураКластераНовая = Новый Структура;
        
        ИнформационныеБазыНовые = Новый Массив;
        ИнформационныеБазы = СтруктураКластера["infoBases"];
        Для Каждого ТекИнформационнаяБаза Из ИнформационныеБазы Цикл
            ИнформационнаяБазаНовая = РегистрыСведений.ПараметрыИнформационныхБаз.КонвертироватьПараметры(ТекИнформационнаяБаза, ТипыПараметров.АгентКИП, ТипыПараметров.ЦКК);
            ИнформационныеБазыНовые.Добавить(ИнформационнаяБазаНовая);
        КонецЦикла;
        СтруктураКластераНовая.Вставить("ИнформационныеБазы", ИнформационныеБазыНовые);
        
        РабочиеСервераНовые = Новый Массив;
        РабочиеСервера = СтруктураКластера["workingServers"];
        Для Каждого ТекРабочийСервер Из РабочиеСервера Цикл
            РабочийСерверНовый = РегистрыСведений.ПараметрыРабочихСерверов.КонвертироватьПараметры(ТекРабочийСервер, ТипыПараметров.АгентКИП, ТипыПараметров.ЦКК);
            РабочиеСервераНовые.Добавить(РабочийСерверНовый);
        КонецЦикла;
        СтруктураКластераНовая.Вставить("РабочиеСервера1С", РабочиеСервераНовые);
        
        СтруктураКластера = СтруктураКластераНовая;
                
    КонецЕсли;
    
    
    Возврат СтруктураКластера;
    
КонецФункции

// ====================

Функция ПроверитьПодключениеRAS(Подключение)
    
    АдминистрированиеСервера = АдминистрированиеСервера(Подключение);
    Возврат "Успешно";
        
КонецФункции

Функция ПроверитьПодключениеАгентКИП(Подключение)
    
    АгентКИП = Справочники.ПараметрыПодключенияКластер1С.АктивноеПодключение(Подключение);
    
    Команда = Новый Соответствие;
    Команда.Вставить("cmd", "checkMainService");
    
    Результат = АгентКИПвЦКК.ВыполнитьКоманду(АгентКИП, Перечисления.ТипыКомандАгентаКИП.MainService, Команда);
    
    Если Результат <> Неопределено Тогда
        РезультатПроверки = Результат["result"];
        Если РезультатПроверки = "OK" Тогда
            Результат = "Успешно. Агент КИП version " + Результат["data"]["version"] + ", pid " + Формат(Результат["data"]["pid"], "ЧН=0; ЧГ=0") + ".";
        Иначе
            ВызватьИсключение(Результат["data"]);            
        КонецЕсли;
    Иначе
        ВызватьИсключение("Не удалось получить ответ от агента КИП.");
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

Функция ПроверитьПодключениеАутентификацияRAS(Подключение, Пользователь = "", Пароль = "")
    
    Результаты = Новый Массив;
    
    Соединители = Справочники.ПараметрыПодключенияКластер1С.ПараметрыПодключения(Подключение);
       
    Для Каждого Соединитель Из Соединители Цикл
        
        Попытка
            АдминистрированиеСервера = АдминистрированиеКластераRAS.АдминистрированиеСервера(Соединитель.АдресСервераАдминистрирования, Соединитель.ПортСервераАдминистрирования);
            Кластеры = АдминистрированиеКластераRAS.ПолучитьКластеры(АдминистрированиеСервера);
            Для Каждого ТекКластер Из Кластеры Цикл
                Попытка
                    АдминистрированиеКластераRAS.АутентификацияКластера(ТекКластер, Пользователь, Пароль);
                    Результат = Новый Структура("Соединитель, Успешно, Кластер, Описание", Соединитель, Истина, АдминистрированиеКластераRAS.КонвертироватьКластер(ТекКластер));
                Исключение
                    Результат = Новый Структура("Соединитель, Успешно, Кластер, Описание", Соединитель, Ложь, АдминистрированиеКластераRAS.КонвертироватьКластер(ТекКластер), ИнформацияОбОшибке().Описание);
                КонецПопытки;
                Результаты.Добавить(Результат);
            КонецЦикла;
        Исключение
            Результат = Новый Структура("Соединитель, Успешно, Кластер, Описание", Соединитель, Ложь, Неопределено, ИнформацияОбОшибке().Описание);
            Результаты.Добавить(Результат);
        КонецПопытки;
        
    КонецЦикла;
    
    Возврат Результаты;
  
КонецФункции

Функция ПроверитьПодключениеАутентификацияАгентКИП(Подключение, Пользователь = "", Пароль = "")
КонецФункции

Функция ПараметрыРабочегоСервераRAS(Соединители, Кластер, УникальныйИдентификаторОбъекта, Компьютер)
    
    НастройкиКластера = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Кластер);
    
    Если ЗначениеЗаполнено(Кластер.УникальныйИдентификаторОбъекта) Тогда
        УникальныйИдентификаторКластера = Кластер.УникальныйИдентификаторОбъекта;
    Иначе
        Для Каждого Соединитель Из Соединители Цикл
            Результат = АдминистрированиеКластерRAS(Соединитель, Неопределено);
            Если Результат.Успешно Тогда
                УникальныйИдентификаторКластера = Результат.Кластер["cluster"];
                Прервать;
            КонецЕсли;
        КонецЦикла;
        
    КонецЕсли;
    
    Для Каждого Соединитель Из Соединители Цикл
        
        Соединитель.Вставить("ИмяАдминистратораКластера", НастройкиКластера.АдминистраторКластера); 
        Соединитель.Вставить("ПарольАдминистратораКластера", НастройкиКластера.ПарольАдминистратораКластера);
        
        Успешно = Ложь;
        
        Попытка
            Если ЗначениеЗаполнено(УникальныйИдентификаторОбъекта) Тогда
                ПараметрыРабочегоСервера = АдминистрированиеКластераRAS.ПараметрыРабочегоСервера(УникальныйИдентификаторКластера, УникальныйИдентификаторОбъекта, Соединитель);                
                ПараметрыРабочегоСервера = ПараметрыРабочегоСервера[0];
            Иначе
                
                РабочиеСерверы = АдминистрированиеКластераRAS.ПолучитьРабочиеСерверы(УникальныйИдентификаторКластера, Соединитель);
                Для Каждого РабочийСервер Из РабочиеСерверы Цикл
                    Если ВРЕГ(РабочийСервер["agent-host"]) = ВРЕГ(Компьютер) Тогда
                        ПараметрыРабочегоСервера = РабочийСервер;
                        Прервать;
                    КонецЕсли;
                КонецЦикла;
                
            КонецЕсли;
            
            Успешно = Истина;
            
        Исключение
            Успешно = Ложь;
            //TODO Проброс ошибки соединителя
        КонецПопытки;
        
        Если Успешно Тогда
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    ПараметрыРабочегоСервера = РегистрыСведений.ПараметрыРабочихСерверов.КонвертироватьПараметры(ПараметрыРабочегоСервера, "RAS", "ЦКК");
    
    Возврат ПараметрыРабочегоСервера;
            
КонецФункции

Функция ПараметрыИнформационнойБазыRAS(Кластер, УникальныйИдентификаторОбъекта, Пользователь, Пароль)
    
    //НастройкиКластера = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Кластер);
    //
    //АдминистрированиеСервера = АдминистрированиеСервераRAS(Кластер.Подключение);
    //АдминистрированиеКластер = АдминистрированиеКластерRAS(АдминистрированиеСервера, Кластер.УникальныйИдентификаторОбъекта);
    //АутентификацияКластераRAS(АдминистрированиеКластер, НастройкиКластера.АдминистраторКластера, НастройкиКластера.ПарольАдминистратораКластера);
    //АдминистрированиеИнформационнаяБаза = АдминистрированиеИнформационнаяБазаRAS(АдминистрированиеКластер, УникальныйИдентификаторОбъекта); 
    
    //
    //Если ЗначениеЗаполнено(Кластер.УникальныйИдентификаторОбъекта) Тогда
    //    УникальныйИдентификаторКластера = Кластер.УникальныйИдентификаторОбъекта;
    //Иначе
    //    Для Каждого Соединитель Из Соединители Цикл
    //        Результат = КластерRAS(Соединитель, Неопределено);
    //        Если Результат.Успешно Тогда
    //            УникальныйИдентификаторКластера = Результат.Кластер["cluster"];
    //            Прервать;
    //        КонецЕсли;
    //    КонецЦикла;
    //    
    //КонецЕсли;
    //
    //Для Каждого Соединитель Из Соединители Цикл
    //    
    //    Соединитель.Вставить("ИмяАдминистратораКластера", НастройкиКластера.АдминистраторКластера);
    //    Соединитель.Вставить("ПарольАдминистратораКластера", НастройкиКластера.ПарольАдминистратораКластера);
    //    Соединитель.Вставить("Пользователь", Пользователь);
    //    Соединитель.Вставить("Пароль", Пароль);
    //    
    //    Успешно = Ложь;
    //    
    //    Попытка
    //        
    //        Если ЗначениеЗаполнено(УникальныйИдентификаторОбъекта) Тогда
    //            УникальныйИдентификаторИБ = УникальныйИдентификаторОбъекта;  
    //        Иначе
    //            
    //            ИнформационныеБазы = ИнформационныеБазыRAS(УникальныйИдентификаторКластера, Соединитель);
    //            Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
    //                Если ВРЕГ(ИнформационнаяБаза["ИмяБазыВКластере"]) = ВРЕГ(ИмяВКластере) Тогда
    //                    УникальныйИдентификаторИБ = ИнформационнаяБаза["УникальныйИдентификаторОбъекта"];
    //                    Прервать;
    //                КонецЕсли;
    //            КонецЦикла;
    //            
    //        КонецЕсли;
    //        
    //        ПараметрыИБ = АдминистрированиеКластераRAS.ПараметрыИнформационнойБазы(УникальныйИдентификаторКластера, УникальныйИдентификаторИБ, Соединитель);
    //        ПараметрыИБ = РегистрыСведений.ПараметрыИнформационныхБаз.КонвертироватьПараметры(ПараметрыИБ, "RAS", "ЦКК");
    //        
    //        Успешно = Истина;
    //        
    //    Исключение
    //        Успешно = Ложь;
    //    КонецПопытки;
    //    
    //    Если Успешно Тогда
    //        Прервать;
    //    КонецЕсли;
    //    
    //КонецЦикла;
    //
    //Возврат ПараметрыИБ;
        
    
КонецФункции

Функция КластерыRAS(АдминистрированиеСервера, Конвертировать)
    
    Кластеры = АдминистрированиеКластераRAS.ПолучитьКластеры(АдминистрированиеСервера, Конвертировать);
    
    Если Конвертировать Тогда
        
        КластерыНовые = Новый Массив;
        
        Для Каждого Кластер Из Кластеры Цикл
            КластерыНовые.Добавить(РегистрыСведений.ПараметрыКластеров.КонвертироватьПараметры(Кластер, Перечисления.ТипыПараметровКластер1С.RAS, Перечисления.ТипыПараметровКластер1С.ЦКК));
        КонецЦикла;
        
        Кластеры = КластерыНовые;
                
    КонецЕсли;
            
    Возврат Кластеры;
    
КонецФункции

Функция КластерыАгентКИП(АдминистрированиеСервера, Конвертировать)
    
    Кластеры = АгентКИПвЦКК.ПолучитьКластеры(АдминистрированиеСервера);
    
    Если Конвертировать Тогда
        
        КластерыНовые = Новый Массив;
        
        Для Каждого Кластер Из Кластеры Цикл
            КластерыНовые.Добавить(РегистрыСведений.ПараметрыКластеров.КонвертироватьПараметры(Кластер, Перечисления.ТипыПараметровКластер1С.АгентКИП, Перечисления.ТипыПараметровКластер1С.ЦКК));
        КонецЦикла;
        
        Кластеры = КластерыНовые;
        
    КонецЕсли;
        
    Возврат Кластеры;
    
КонецФункции

Функция РабочиеСерверыRAS(АдминистрированиеКластер, Конвертировать)
    
    РабочиеСерверы = АдминистрированиеКластераRAS.РабочиеСерверы(АдминистрированиеКластер);
    
    Если Конвертировать Тогда
        
        РабочиеСерверыНовые = Новый Массив;
        Для Каждого ТекРабочийСервер Из РабочиеСерверы Цикл
            РабочиеСерверыНовые.Добавить(СвойстваРабочийСерверRAS(ТекРабочийСервер, Конвертировать));
        КонецЦикла;
        
        РабочиеСерверы = РабочиеСерверыНовые;
        
    КонецЕсли;
            
    Возврат РабочиеСерверы;
    
КонецФункции

Функция РабочиеПроцессыRAS(АдминистрированиеКластер, Конвертировать)
    
    РабочиеПроцессы = АдминистрированиеКластераRAS.РабочиеПроцессы(АдминистрированиеКластер);
    
    Если Конвертировать Тогда
        
        РабочиеПроцессыНовые = Новый Массив;
        Для Каждого ТекРабочийПроцесс Из РабочиеПроцессы Цикл
            РабочиеПроцессыНовые.Добавить(СвойстваРабочийПроцессRAS(ТекРабочийПроцесс, Конвертировать));
        КонецЦикла;
        
        РабочиеПроцессы = РабочиеПроцессыНовые;
        
    КонецЕсли;
    
    Возврат РабочиеПроцессы; 
    
КонецФункции

Функция СеансыRAS(АдминистрированиеИнформационнаяБаза, Конвертировать)
    
    Сеансы = АдминистрированиеКластераRAS.Сеансы(АдминистрированиеИнформационнаяБаза);
    
    Если Конвертировать Тогда
        
        СеансыНовые = Новый Массив;
        Для Каждого ТекСеанс Из Сеансы Цикл
            СеансыНовые.Добавить(СвойстваСеансаRAS(ТекСеанс, Конвертировать));            
        КонецЦикла;
        
        Сеансы = СеансыНовые;
        
    КонецЕсли;
    
    Возврат Сеансы;
    
КонецФункции

Функция СоединенияRAS(АдминистрированиеКластер, Конвертировать)
    
    Соединения = АдминистрированиеКластер.ПолучитьСоединения();
    
    Если Конвертировать Тогда
        
        СоединенияНовые = Новый Массив;
        Для Каждого ТекСоединение Из Соединения Цикл
            СоединенияНовые.Добавить(СвойстваСоединенияRAS(ТекСоединение, Конвертировать));
        КонецЦикла;
        
        Соединения = СоединенияНовые;
                
    КонецЕсли;
    
    Возврат Соединения;
    
КонецФункции

Функция СвойстваКластерRAS(АдминистрированиеКластер, Конвертировать)
    
    Если Конвертировать Тогда
        ТипыПараметров = Перечисления.ТипыПараметровКластер1С;
        КластерСвойства = АдминистрированиеКластераRAS.КлючиСвойствКластер();
        ЗаполнитьЗначенияСвойств(КластерСвойства, АдминистрированиеКластер);
        Кластер = РегистрыСведений.ПараметрыКластеров.КонвертироватьПараметры(КластерСвойства, ТипыПараметров.RAS, ТипыПараметров.ЦКК);
        Возврат Кластер;
    Иначе
        Возврат АдминистрированиеКластер;
    КонецЕсли;
    
КонецФункции

Функция СвойстваКластераАгентКИП(АдминистрированиеКластер, Конвертировать)
    
    СвойстваКластера = АгентКИПвЦКК.СвойстваКластера(АдминистрированиеКластер);
    
    Если Конвертировать Тогда
        ТипыПараметров = Перечисления.ТипыПараметровКластер1С;
        СвойстваКластера = РегистрыСведений.ПараметрыКластеров.КонвертироватьПараметры(СвойстваКластера, ТипыПараметров.АгентКИП, ТипыПараметров.ЦКК); 
    КонецЕсли;
        
    Возврат СвойстваКластера;
    
КонецФункции

Функция СвойстваИнформационнаяБазаRAS(АдминистрированиеИнформационнаяБаза, Конвертировать)
    
    Если Конвертировать Тогда
        ТипыПараметров = Перечисления.ТипыПараметровКластер1С;
        ИнформационнаяБазаСвойства = АдминистрированиеКластераRAS.КлючиСвойствИнформационнаяБаза();
        ЗаполнитьЗначенияСвойств(ИнформационнаяБазаСвойства, АдминистрированиеИнформационнаяБаза);
        ИнформационнаяБаза = РегистрыСведений.ПараметрыИнформационныхБаз.КонвертироватьПараметры(ИнформационнаяБазаСвойства, ТипыПараметров.RAS, ТипыПараметров.ЦКК);
        Возврат ИнформационнаяБаза;
    Иначе
        Возврат АдминистрированиеИнформационнаяБаза;
    КонецЕсли;
    
КонецФункции

Функция СвойстваИнформационнаяБазаАгентКИП(АдминистрированиеИнформационнаяБаза, Конвертировать, Проверка)
    
    СвойстваИнформационнаяБаза = АгентКИПвЦКК.СвойстваИнформационнаяБаза(АдминистрированиеИнформационнаяБаза, Проверка);
    
    Если Конвертировать Тогда
        ТипыПараметров = Перечисления.ТипыПараметровКластер1С;
        СвойстваИнформационнаяБаза = РегистрыСведений.ПараметрыИнформационныхБаз.КонвертироватьПараметры(СвойстваИнформационнаяБаза, ТипыПараметров.АгентКИП, ТипыПараметров.ЦКК);
    КонецЕсли;
    
    Возврат СвойстваИнформационнаяБаза;
    
КонецФункции

Функция СвойстваРабочийСерверRAS(АдминистрированиеРабочийСервер, Конвертировать)
    
    Если Конвертировать Тогда
        ТипыПараметров = Перечисления.ТипыПараметровКластер1С;
        РабочийСерверСвойства = АдминистрированиеКластераRAS.КлючиСвойствРабочийСервер();
        ЗаполнитьЗначенияСвойств(РабочийСерверСвойства, АдминистрированиеРабочийСервер);
        РабочийСерверСвойства.ДиапазоныПортов = ДиапазоныПортовВСтроку(АдминистрированиеРабочийСервер.ДиапазоныПортов); 
        РабочийСервер = РегистрыСведений.ПараметрыРабочихСерверов.КонвертироватьПараметры(РабочийСерверСвойства, ТипыПараметров.RAS, ТипыПараметров.ЦКК);
        Возврат РабочийСервер;
    Иначе
        Возврат АдминистрированиеРабочийСервер;
    КонецЕсли;
    
КонецФункции

Функция ДиапазоныПортовВСтроку(ДиапазоныПортов)
    
    ДиапазоныПортовМассив = Новый Массив;
    
    Для Каждого ДиапазонПортов Из ДиапазоныПортов Цикл
        ДиапазоныПортовМассив.Добавить(Формат(ДиапазонПортов.НижняяГраница, "ЧН=0; ЧГ=0") + ":" + Формат(ДиапазонПортов.ВерхняяГраница, "ЧН=0; ЧГ=0"));
    КонецЦикла;
    
    Возврат СтрСоединить(ДиапазоныПортовМассив, ",");
        
КонецФункции

Функция СвойстваРабочийСерверАгентКИП(АдминистрированиеРабочийСервер, Конвертировать)
    
    СвойстваРабочийСервер = АгентКИПвЦКК.СвойстваРабочегоСервера(АдминистрированиеРабочийСервер);
    
    Если Конвертировать Тогда
        ТипыПараметров = Перечисления.ТипыПараметровКластер1С;
        СвойстваРабочийСервер = РегистрыСведений.ПараметрыРабочихСерверов.КонвертироватьПараметры(СвойстваРабочийСервер, ТипыПараметров.АгентКИП, ТипыПараметров.ЦКК);
    КонецЕсли;
    
    Возврат СвойстваРабочийСервер;
        
КонецФункции

Функция СвойстваРабочийПроцессRAS(АдминистрированиеРабочийПроцесс, Конвертировать)
    
    Если Конвертировать Тогда
        ТипыПараметров = Перечисления.ТипыПараметровКластер1С;
        РабочийПроцессСвойства = АдминистрированиеКластераRAS.КлючиСвойствРабочийПроцесс();
        ЗаполнитьЗначенияСвойств(РабочийПроцессСвойства, АдминистрированиеРабочийПроцесс);
        РабочийПроцесс = РегистрыСведений.МониторингПроцессов.КонвертироватьПараметры(РабочийПроцессСвойства, ТипыПараметров.RAS, ТипыПараметров.ЦКК); 
        Возврат РабочийПроцесс;
    Иначе
        Возврат АдминистрированиеРабочийПроцесс;
    КонецЕсли;
    
КонецФункции

Функция СвойстваСеансаRAS(АдминистрированиеСеанс, Конвертировать)
    
    Если Конвертировать Тогда
        ТипыПараметров = Перечисления.ТипыПараметровКластер1С;
        СеансСвойства = АдминистрированиеКластераRAS.КлючиСвойствСеанс();
        ЗаполнитьЗначенияСвойств(СеансСвойства, АдминистрированиеСеанс);
        Сеанс = РегистрыСведений.МониторингСеансов.КонвертироватьПараметры(СеансСвойства, ТипыПараметров.RAS, ТипыПараметров.ЦКК);
        Возврат Сеанс;
    Иначе
        Возврат АдминистрированиеСеанс;
    КонецЕсли;
    
КонецФункции

Функция СвойстваСоединенияRAS(АдминистрированиеСоединение, Конвертировать)
    
    Если Конвертировать Тогда
        ТипыПараметров = Перечисления.ТипыПараметровКластер1С;
        СоединениеСвойства = АдминистрированиеКластераRAS.КлючиСвойствСоединение();
        ЗаполнитьЗначенияСвойств(СоединениеСвойства, АдминистрированиеСоединение);
        Возврат СоединениеСвойства;
    Иначе
        Возврат АдминистрированиеСоединение;
    КонецЕсли;
    
КонецФункции

Функция ИнформационныеБазыRAS(АдминистрированиеКластер, Конвертировать = Ложь)
    
    ИнформационныеБазы = АдминистрированиеКластераRAS.ИнформационныеБазы(АдминистрированиеКластер);
    
    Если Конвертировать Тогда
        
        ТипыПараметров = Перечисления.ТипыПараметровКластер1С;
        
        ИнформационныеБазыНовые = Новый Массив;
        Для Каждого ТекИнформационнаяБаза Из ИнформационныеБазы Цикл
            ИнформационныеБазыНовые.Добавить(СвойстваИнформационнаяБазаRAS(ТекИнформационнаяБаза, Конвертировать));
        КонецЦикла;
        
        ИнформационныеБазы = ИнформационныеБазыНовые;
        
    КонецЕсли;
                
    Возврат ИнформационныеБазы;
    
КонецФункции

Процедура ОбработкаПараметрыКластераБуфер() Экспорт
    
    КлючПараметрыРабочихПроцессов = Новый УникальныйИдентификатор("72634ec5-c493-42fd-919a-b9742bc17067");
    НаименованиеПараметрыРабочихПроцессов = "Обработка параметров рабочих процессов.";
    ОтборПараметрыРабочихПроцессов = Новый Структура("Ключ, Состояние", КлючПараметрыРабочихПроцессов, СостояниеФоновогоЗадания.Активно);
    ФЗ_ОтборПараметрыРабочихПроцессов = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборПараметрыРабочихПроцессов);
    Если ФЗ_ОтборПараметрыРабочихПроцессов.Количество() = 0 Тогда
        ПараметрыЗапуска = Новый Массив;
        ПараметрыЗапуска.Добавить("ПРП");
    	ФоновыеЗадания.Выполнить("Кластер_1С.ОбработкаПараметрыКластераБуферОбщая", ПараметрыЗапуска, КлючПараметрыРабочихПроцессов, НаименованиеПараметрыРабочихПроцессов);
    КонецЕсли;
    
    КлючПараметрыМониторингПроцессов = Новый УникальныйИдентификатор("d405d866-d720-4eda-8418-6193c02955e8");
    НаименованиеМониторингСеансов = "Обработка параметров сеансов.";
    ОтборПараметрыСеансов = Новый Структура("Ключ, Состояние", КлючПараметрыМониторингПроцессов, СостояниеФоновогоЗадания.Активно);
    ФЗ_ОтборПараметрыСеансов = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборПараметрыСеансов);
    Если ФЗ_ОтборПараметрыСеансов.Количество() = 0 Тогда
        ПараметрыЗапуска = Новый Массив;
        ПараметрыЗапуска.Добавить("ПСНС");
    	ФоновыеЗадания.Выполнить("Кластер_1С.ОбработкаПараметрыКластераБуферОбщая", ПараметрыЗапуска, КлючПараметрыМониторингПроцессов, НаименованиеМониторингСеансов);
    КонецЕсли;
    
    КлючЧислоСеансов = Новый УникальныйИдентификатор("55c5f661-c308-443b-afc5-e5a64a248690");
    НаименованиеЧислоСеансов = "Обработка сеансов по типу приложения.";
    ОтборЧислоСеансов = Новый Структура("Ключ, Состояние", КлючЧислоСеансов, СостояниеФоновогоЗадания.Активно);
    ФЗ_ОтборЧислоСеансов = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЧислоСеансов);
    Если ФЗ_ОтборЧислоСеансов.Количество() = 0 Тогда
        ПараметрыЗапуска = Новый Массив;
        ПараметрыЗапуска.Добавить("ПСНС_ПРИЛ");
        ФоновыеЗадания.Выполнить("Кластер_1С.ОбработкаПараметрыКластераБуферОбщая", ПараметрыЗапуска, КлючЧислоСеансов, НаименованиеЧислоСеансов);
    КонецЕсли;
        
    КлючАктивностьАгентов = Новый УникальныйИдентификатор("74c21f70-b761-4cc9-b2ff-842f73870889");
    НаименованиеАктивностьАгентов = "Анализ возможности подключений к кластеру 1С.";
    ОтборАктивностьАгентов = Новый Структура("Ключ, Состояние", КлючАктивностьАгентов, СостояниеФоновогоЗадания.Активно);
    ФЗ_ОтборАктивностьАгентов = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборАктивностьАгентов);
    Если ФЗ_ОтборАктивностьАгентов.Количество() = 0 Тогда
    	ФоновыеЗадания.Выполнить("Кластер_1С.АнализВозможностиПодключенийККластеру1С",,КлючАктивностьАгентов, НаименованиеАктивностьАгентов);
    КонецЕсли;
    
КонецПроцедуры

Процедура АнализВозможностиПодключенийККластеру1С() Экспорт
    
    Запрос = Новый Запрос;
    
    Выполнять = Истина;
    Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
    
    Пока Выполнять Цикл
        
        Запрос.Текст = "
        |ВЫБРАТЬ
        |   АктивныеАгенты.Ссылка КАК Подключение,
        |   АктивныеАгенты.АгентКИП КАК АгентКИП
        |ИЗ
        |   РегистрСведений.ПараметрыКластеров КАК ПараметрыКластеров
        |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
        |   Справочник.ОбъектыКонтроля КАК Кластеры
        |ПО
        |   Кластеры.Ссылка = ПараметрыКластеров.ОбъектКонтроля
        |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
        |   Справочник.ПараметрыПодключенияКластер1С.АгентКИППараметры КАК АктивныеАгенты
        |ПО
        |   АктивныеАгенты.Ссылка = Кластеры.Подключение
        |   И АктивныеАгенты.Активный
        |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
        |   РегистрСведений.АктивностьАгентовКИП КАК АктивностьАгентов
        |ПО
        |   АктивностьАгентов.АгентКИП = АктивныеАгенты.АгентКИП
        |   И АктивностьАгентов.ДатаКрайнейАктивности < &ВремяПроверки
        |ГДЕ
        |   ПараметрыКластеров.Мониторинг
        |";
        
        Запрос.УстановитьПараметр("ВремяПроверки", ТекущаяУниверсальнаяДата() - 30);
        
        Результат = Запрос.Выполнить();
        
        Если НЕ Результат.Пустой() Тогда
            
            Выборка = Результат.Выбрать();
            Пока Выборка.Следующий() Цикл
                Справочники.ПараметрыПодключенияКластер1С.ИзменитьАктивноеПодключениеАгентКИП(Выборка.Подключение, Выборка.АгентКИП);
            КонецЦикла;
            
        КонецЕсли;
        
        КипВнешнийКомпонент.Пауза(10000, Инструменты); 
        
    КонецЦикла;
        
КонецПроцедуры

Процедура ОбработкаПараметрыКластераБуферОбщая(Тип) Экспорт
    
    КластерыКеш = Новый Соответствие;
    РабочиеСерверыКеш = Новый Соответствие;
    ИнформационныеБазыКеш = Новый Соответствие;
    Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
    
    НаборЗаписейПараметрыКластераБуфер = РегистрыСведений.ПараметрыКластераБуфер.СоздатьНаборЗаписей();
    НаборЗаписейПараметрыКластераБуфер.Отбор.Тип.Установить(Тип);
    
    НаборыЗаписей = СоздатьНаборыЗаписей(Тип);
    НаборыЗаписей.Вставить("ПараметрыКластераБуфер", НаборЗаписейПараметрыКластераБуфер);
    
    ЗапросМинута = Новый Запрос;
    ЗапросМинута.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |   ДатаЗаписиМинутаUTC
    |ИЗ
    |   РегистрСведений.ПараметрыКластераБуфер
    |ГДЕ
    |   Тип = &Тип
    |   И ДатаЗаписиМинутаUTC < &ДатаЗаписиМинутаUTC
    |УПОРЯДОЧИТЬ ПО
    |   ДатаЗаписиМинутаUTC ВОЗР
    |";
    ЗапросМинута.УстановитьПараметр("Тип", Тип);
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   УникальныйИдентификаторЗаписи,
    |   Данные,
    |   УникальныйИдентификаторКластера
    |ИЗ
    |   РегистрСведений.ПараметрыКластераБуфер
    |ГДЕ
    |   Тип = &Тип
    |   И ДатаЗаписиМинутаUTC = &ДатаЗаписиМинутаUTC
    |";
    Запрос.УстановитьПараметр("Тип", Тип);
    
    Выполнять = Истина;
    Пока Выполнять Цикл
        
        КластерыКеш.Очистить();
        РабочиеСерверыКеш.Очистить();
        
        МинутаОбработки = НачалоМинуты(ТекущаяУниверсальнаяДата());
        ЗапросМинута.УстановитьПараметр("ДатаЗаписиМинутаUTC", МинутаОбработки);
        Результат = ЗапросМинута.Выполнить();
        
        Если НЕ Результат.Пустой() Тогда
            
            ВыборкаМинута = Результат.Выбрать();
            ВыборкаМинута.Следующий();
            ДатаЗаписиМинутаUTC = ВыборкаМинута.ДатаЗаписиМинутаUTC; 
            
            Запрос.УстановитьПараметр("ДатаЗаписиМинутаUTC", ДатаЗаписиМинутаUTC);
            НаборЗаписейПараметрыКластераБуфер.Отбор.ДатаЗаписиМинутаUTC.Установить(ДатаЗаписиМинутаUTC);
            Результат = Запрос.Выполнить();
            
            Если Тип = "ПРП" Тогда
                ОбработатьПараметрыРабочихПроцессов(КластерыКеш, РабочиеСерверыКеш, НаборыЗаписей, Результат);
            ИначеЕсли Тип = "ПСНС" Тогда
                ОбработкаМониторингСеансовБуфер(КластерыКеш, РабочиеСерверыКеш, ИнформационныеБазыКеш, НаборыЗаписей, Результат, ДатаЗаписиМинутаUTC);
            ИначеЕсли Тип = "ПСНС_ПРИЛ" Тогда
                ОбработатьЧислоСеансов(КластерыКеш, ИнформационныеБазыКеш, НаборыЗаписей, Результат);
            КонецЕсли;
            
        Иначе
            Пока НачалоМинуты(ТекущаяУниверсальнаяДата()) <= МинутаОбработки Цикл
                КипВнешнийКомпонент.Пауза(200, Инструменты);
            КонецЦикла;
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ОбработатьЧислоСеансов(КластерыКеш, ИнформационныеБазыКеш, НаборыЗаписей, Результат)
    
    НаборЗаписейЧислоСеансов = НаборыЗаписей["ЧислоСеансов"];
    НаборЗаписейПараметрыКластераБуфер = НаборыЗаписей["ПараметрыКластераБуфер"];
    
    ВидыПриложений = Перечисления.ВидыПриложений.ПустаяСсылка().Метаданные().ЗначенияПеречисления;
    ВидыПриложенийПоиск = Новый Соответствие;
    Для Каждого ВидПриложения Из ВидыПриложений Цикл
        ВидыПриложенийПоиск.Вставить(Прав(ВидПриложения.Имя, СтрДлина(ВидПриложения.Имя) - 1), Перечисления.ВидыПриложений[ВидПриложения.Имя]); 
    КонецЦикла;
        
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        ЧтениеJSON = Новый ЧтениеJSON();
        ЧтениеJSON.УстановитьСтроку(Выборка.Данные);
        Данные = ПрочитатьJSON(ЧтениеJSON, Истина);
        
        Кластер = КластерИзКеша(Выборка.УникальныйИдентификаторКластера, КластерыКеш);
        ИнформационнаяБаза = ИнформационнаяБазаИзКеша(Данные["infoBaseId"], ИнформационныеБазыКеш);
        ПериодЗаписи = МестноеВремя(Дата(Данные["time"]));
        
        СеансыПоТипам = Данные["data"];
        Для Каждого КлючЗначение Из СеансыПоТипам Цикл
            
            НоваяЗапись = НаборЗаписейЧислоСеансов.Добавить();
            НоваяЗапись.Период = ПериодЗаписи;
            НоваяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
            НоваяЗапись.Кластер = Кластер;
            НоваяЗапись.ВидПриложения = ВидыПриложенийПоиск[КлючЗначение.Ключ];
            НоваяЗапись.Количество = КлючЗначение.Значение;
            
        КонецЦикла;
        
    КонецЦикла;
    
    НачатьТранзакцию();
    Попытка
        
        НаборЗаписейЧислоСеансов.Записать(Ложь);
        НаборЗаписейЧислоСеансов.Очистить();
        
        ЗафиксироватьТранзакцию();
        
    Исключение
        
        ОтменитьТранзакцию();
        ЗаписьЖурналаРегистрации("ОбработкаЧислаСеансов",УровеньЖурналаРегистрации.Ошибка,Метаданные.РегистрыСведений.ЧислоСеансов,НаборЗаписейЧислоСеансов,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        
    КонецПопытки;
    
    НачатьТранзакцию();
    Попытка
        
        НаборЗаписейПараметрыКластераБуфер.Отбор.Тип.Установить("ПСНС_ПРИЛ");
        НаборЗаписейПараметрыКластераБуфер.Записать(Истина);
        
        ЗафиксироватьТранзакцию();
        
    Исключение
        
        ОтменитьТранзакцию();
        ВызватьИсключение;
        
    КонецПопытки;
    
    
КонецПроцедуры

Процедура ОбработатьПараметрыРабочихПроцессов(КластерыКеш, РабочиеСерверыКеш, НаборыЗаписей, Результат)
    
    НаборЗаписейМониторингПроцессов = НаборыЗаписей["МониторингПроцессов"];
    НаборЗаписейМониторингПроцессовСрезПоследних = НаборыЗаписей["МониторингПроцессовСрезПоследних"];
    НаборЗаписейПараметрыКластераБуфер = НаборыЗаписей["ПараметрыКластераБуфер"];
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        ЧтениеJSON = Новый ЧтениеJSON();
        ЧтениеJSON.УстановитьСтроку(Выборка.Данные);
        ПараметрыРабочихПроцессов = ПрочитатьJSON(ЧтениеJSON, Истина);
        
        Для Каждого КластерПараметрыРабочихПроцессов Из ПараметрыРабочихПроцессов Цикл
            
            Кластер1С = КластерИзКеша(КластерПараметрыРабочихПроцессов.Ключ, КластерыКеш);
                        
            Для Каждого РабочийСерверПараметрыРабочихПроцессов Из КластерПараметрыРабочихПроцессов.Значение["ПараметрыРабочихПроцессов"] Цикл
                
                РабочийСервер1С = РабочийСерверИзКеша(РабочийСерверПараметрыРабочихПроцессов.Ключ, РабочиеСерверыКеш);
                
                Если НЕ ЗначениеЗаполнено(РабочийСервер1С) Тогда
                    //В буфере есть записи по рабочему серверу, который уже удален в ЦКК.
                    //Поэтому данные записи пропускаем.
                    Продолжить;
                КонецЕсли;
                                                
                Для Каждого РабочийПроцесс Из РабочийСерверПараметрыРабочихПроцессов.Значение Цикл
                    
                    params = РабочийПроцесс["params"];
                    
                    Если  params["pid"] <> 0 Тогда
                        
                        ДатаЗаписи = МестноеВремя(params["time"]);
                        НовСтрокаМониторингПроцессов = НаборЗаписейМониторингПроцессов.Добавить();
                        НовСтрокаМониторингПроцессов.Кластер = Кластер1С;
                        НовСтрокаМониторингПроцессов.Сервер = РабочийСервер1С;
                        НовСтрокаМониторингПроцессов.Время = ДатаЗаписи;
                        НовСтрокаМониторингПроцессов.Процесс = params["pid"];
                        НовСтрокаМониторингПроцессов.Память = params["memorySize"];
                        НовСтрокаМониторингПроцессов.ПроцессСтрокой = params["name"]; 
                        НовСтрокаМониторингПроцессов.Лицензии = params["license"]; 
                        НовСтрокаМониторингПроцессов.УникальныйИдентификаторПроцесса = Новый УникальныйИдентификатор(params["uuid"]); 
                        
                        НовСтрокаМониторингПроцессовСрезПоследних = НаборЗаписейМониторингПроцессовСрезПоследних.Добавить();
                        НовСтрокаМониторингПроцессовСрезПоследних.Кластер = Кластер1С;
                        НовСтрокаМониторингПроцессовСрезПоследних.Сервер = РабочийСервер1С;
                        НовСтрокаМониторингПроцессовСрезПоследних.Процесс = params["pid"];
                        НовСтрокаМониторингПроцессовСрезПоследних.Память = params["memorySize"];
                        НовСтрокаМониторингПроцессовСрезПоследних.ДатаЗаписи = ДатаЗаписи;
                        
                    КонецЕсли;
                    
                КонецЦикла;
                
                НаборЗаписейМониторингПроцессовСрезПоследних.Отбор.Кластер.Установить(Кластер1С);
                НаборЗаписейМониторингПроцессовСрезПоследних.Отбор.Сервер.Установить(РабочийСервер1С);
                НаборЗаписейМониторингПроцессовСрезПоследних.Записать(Истина);
                НаборЗаписейМониторингПроцессовСрезПоследних.Очистить();
                
            КонецЦикла;
            
        КонецЦикла;
        
    КонецЦикла;
    
    НачатьТранзакцию();
    Попытка
        
        НаборЗаписейМониторингПроцессов.Записать(Ложь);
        ЗафиксироватьТранзакцию();
        
    Исключение
        
        ОтменитьТранзакцию();
        ЗаписьЖурналаРегистрации("ОбработатьПараметрыРабочихПроцессов", УровеньЖурналаРегистрации.Ошибка,Метаданные.РегистрыСведений.МониторингПроцессов,НаборЗаписейМониторингПроцессов,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        
    КонецПопытки;
    
    НачатьТранзакцию();
    Попытка
        
        НаборЗаписейПараметрыКластераБуфер.Записать(Истина);
        ЗафиксироватьТранзакцию();
        
    Исключение
        
        ОтменитьТранзакцию();
        ВызватьИсключение;
        
    КонецПопытки;
        
    НаборЗаписейМониторингПроцессов.Очистить();
    
КонецПроцедуры

Процедура ОбработкаМониторингСеансовБуфер(КластерыКеш, РабочиеСерверыКеш, ИнформационныеБазыКеш, НаборыЗаписей, Результат, МинутаОбработки)
    
    ДанныеКластеров = Новый Соответствие;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        Кластер = КластерИзКеша(Выборка["УникальныйИдентификаторКластера"], КластерыКеш);
        ДанныеКластера = ДанныеКластеров[Кластер];
        Если ДанныеКластера = Неопределено Тогда
            ДанныеКластера = Новый Соответствие;
            ДанныеКластера.Вставить("УникальныйИдентификаторКластера", Выборка["УникальныйИдентификаторКластера"]);
            ДанныеКластера.Вставить("Кластер", Кластер);
            ДанныеКластера.Вставить("АдресХранилища", ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор()));
            ДанныеКластера.Вставить("РабочиеСерверыКеш", РабочиеСерверыКеш);
            ДанныеКластера.Вставить("ИнформационныеБазыКеш", ИнформационныеБазыКеш);
            ДанныеКластера.Вставить("МинутаОбработки", МинутаОбработки);
            ДанныеКластера.Вставить("Данные", Новый Массив);
            ДанныеКластеров.Вставить(Кластер, ДанныеКластера);
        КонецЕсли;
        ДанныеКластера["Данные"].Добавить(Выборка.Данные);
    КонецЦикла;
    
    Для Каждого ДанныеКластера Из ДанныеКластеров Цикл
        Наименование = "Загрузка параметров сеансов для " + ДанныеКластера.Значение["Кластер"] + "(" + ДанныеКластера.Значение["УникальныйИдентификаторКластера"] + ")."; 
        Параметры = Новый Массив;
        Параметры.Добавить(ДанныеКластера.Значение);
        ФоновоеЗадание = ФоновыеЗадания.Выполнить("Кластер_1С.ОбработкаМониторингСеансовБуферКластера", Параметры, ДанныеКластера.Значение["УникальныйИдентификаторКластера"], Наименование); 
        ДанныеКластера.Значение.Вставить("ИдентификаторФоновогоЗадания", ФоновоеЗадание.УникальныйИдентификатор);
    КонецЦикла;
    
    Выполнять = Истина;
    Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
    
    Пока Выполнять Цикл
        
        Завершенные = Новый Массив;
        
        Для Каждого ДанныеКластера Из ДанныеКластеров Цикл
            
            ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ДанныеКластера.Значение["ИдентификаторФоновогоЗадания"]);
            
            Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
                
                Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
                    
                    Кеш = ПолучитьИзВременногоХранилища(ДанныеКластера.Значение["АдресХранилища"]);
                    
                    Для Каждого КлючЗначение Из Кеш.ИнформационныеБазыКеш Цикл
                        Если ИнформационныеБазыКеш[КлючЗначение.Ключ] = Неопределено Тогда
                            ИнформационныеБазыКеш.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
                        КонецЕсли;
                    КонецЦикла;
                    
                    Для Каждого КлючЗначение Из Кеш.РабочиеСерверыКеш Цикл
                        Если РабочиеСерверыКеш[КлючЗначение.Ключ] = Неопределено Тогда
                            РабочиеСерверыКеш.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
                        КонецЕсли;
                    КонецЦикла;
                    
                КонецЕсли;
                
                Завершенные.Добавить(ДанныеКластера.Ключ);
                
            КонецЕсли;
            
        КонецЦикла;
        
        Для Каждого Ключ Из Завершенные Цикл
            ДанныеКластеров.Удалить(Ключ);
        КонецЦикла;
        
        Выполнять = ДанныеКластеров.Количество() > 0;
        
        Если Выполнять Тогда
            КипВнешнийКомпонент.Пауза(200, Инструменты);
        КонецЕсли;
                                
    КонецЦикла;
    
КонецПроцедуры

Процедура ОбработкаМониторингСеансовБуферКластера(ДанныеКластера) Экспорт
    
    Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
    
    НаборЗаписей = РегистрыСведений.МониторингСеансов.СоздатьНаборЗаписей();
    
    Кластер = ДанныеКластера["Кластер"];
    ИнформационныеБазыКеш = ДанныеКластера["ИнформационныеБазыКеш"];
    РабочиеСерверыКеш = ДанныеКластера["РабочиеСерверыКеш"];
    
    Для Каждого Запись Из ДанныеКластера["Данные"] Цикл
        
        ЧтениеJSON = Новый ЧтениеJSON();
        ЧтениеJSON.УстановитьСтроку(Запись);
        ПараметрыСеансов = ПрочитатьJSON(ЧтениеJSON, Ложь);
        
        Для Каждого ТекПараметрыСеанса Из ПараметрыСеансов Цикл
            
            Если ТекПараметрыСеанса.ВГраница() = 49 Тогда
                НовСтрока = НаборЗаписей.Добавить();
                НовСтрока.Время = МестноеВремя(ТекПараметрыСеанса[0]);
                НовСтрока.ИдентификаторСеанса = Новый УникальныйИдентификатор(ТекПараметрыСеанса[1]);
                НовСтрока.Приложение = ТекПараметрыСеанса[2];
                НовСтрока.ЗаблокированоСУБД = ТекПараметрыСеанса[3];
                НовСтрока.ЗаблокированоУпр = ТекПараметрыСеанса[4];
                НовСтрока.ОбъемДанныхВсего = ТекПараметрыСеанса[5];
                НовСтрока.ОбъемДанных5Мин = ТекПараметрыСеанса[6];
                НовСтрока.КоличествоВызововВсего = ТекПараметрыСеанса[7];
                НовСтрока.КоличествоВызовов5Мин = ТекПараметрыСеанса[8];
                НовСтрока.ИдентификаторСоединения = Новый УникальныйИдентификатор(ТекПараметрыСеанса[9]);
                НовСтрока.ДанныхСУБДВсего = ТекПараметрыСеанса[10];
                НовСтрока.ДанныхСУБД5Мин = ТекПараметрыСеанса[11];
                НовСтрока.СоединениеССУБД = ТекПараметрыСеанса[12];
                НовСтрока.ВремяВызововВсего = ТекПараметрыСеанса[13];
                НовСтрока.ВремяВызововСУБДВсего = ТекПараметрыСеанса[14];
                НовСтрока.ВремяВызоваТекущее = ТекПараметрыСеанса[15];
                НовСтрока.ВремяВызововСУБДТекущее = ТекПараметрыСеанса[16];
                НовСтрока.ВремяВызовов5Мин = ТекПараметрыСеанса[17];
                НовСтрока.ВремяВызововСУБД5Мин = ТекПараметрыСеанса[18];
                НовСтрока.Компьютер = ТекПараметрыСеанса[19];
                НовСтрока.ИдентификаторИнформационнойБазы = Новый УникальныйИдентификатор(ТекПараметрыСеанса[20]);
                НовСтрока.ДатаПоследнейАктивности = ТекПараметрыСеанса[21];
                НовСтрока.Лицензия = ТекПараметрыСеанса[22];
                НовСтрока.Язык = ТекПараметрыСеанса[23];
                НовСтрока.ИдентификаторПроцесса = Новый УникальныйИдентификатор(ТекПараметрыСеанса[24]);
                НовСтрока.Сеанс = ТекПараметрыСеанса[25];
                НовСтрока.ДатаНачалаСеанса = ТекПараметрыСеанса[26];
                НовСтрока.Пользователь = ТекПараметрыСеанса[27];
                НовСтрока.Спящий = ТекПараметрыСеанса[28];
                НовСтрока.ЗаснутьЧерез = ТекПараметрыСеанса[29];
                НовСтрока.ЗавершитьЧерез = ТекПараметрыСеанса[30];
                НовСтрока.ПамятьТекущая = ТекПараметрыСеанса[31];
                НовСтрока.Память5Мин = ТекПараметрыСеанса[32];
                НовСтрока.ПамятьВсего = ТекПараметрыСеанса[33];
                НовСтрока.ЧтениеТекущее = ТекПараметрыСеанса[34];
                НовСтрока.Чтение5Мин = ТекПараметрыСеанса[35];
                НовСтрока.ЧтениеВсего = ТекПараметрыСеанса[36];
                НовСтрока.ЗаписьТекущая = ТекПараметрыСеанса[37];
                НовСтрока.Запись5Мин = ТекПараметрыСеанса[38];
                НовСтрока.ЗаписьВсего = ТекПараметрыСеанса[39];
                НовСтрока.ДлительностьВызововСервисаТекущее = ТекПараметрыСеанса[40];
                НовСтрока.ДлительностьВызововСервисовЗа5Мин = ТекПараметрыСеанса[41];
                НовСтрока.ДлительностьВызововСервисовВсего = ТекПараметрыСеанса[42];
                НовСтрока.ИмяТекущегоСервиса = ТекПараметрыСеанса[43];
                НовСтрока.ПроцессорноеВремяТекущее = ТекПараметрыСеанса[44];
                НовСтрока.ПроцессорноеВремяЗа5Мин = ТекПараметрыСеанса[45];
                НовСтрока.ПроцессорноеВремяВсего = ТекПараметрыСеанса[46];
                НовСтрока.Сервер = РабочийСерверИзКеша(ТекПараметрыСеанса[47], РабочиеСерверыКеш); 
                НовСтрока.Процесс = ТекПараметрыСеанса[48];
                НовСтрока.НомерСоединения = ТекПараметрыСеанса[49];
                
                НовСтрока.Кластер = Кластер;
                НовСтрока.База = ИнформационнаяБазаИзКеша(ТекПараметрыСеанса[20], ИнформационныеБазыКеш);
                
            Иначе
                
                ДанныеДляЖурнала = СтрСоединить(ТекПараметрыСеанса, Символы.ПС);
                Комментарий = "Параметров в массиве " + ТекПараметрыСеанса.Количество() + ". Ожидается 50."; 
                ЗаписьЖурналаРегистрации("Ошибка разбора параметров сеанса", УровеньЖурналаРегистрации.Ошибка,,ДанныеДляЖурнала, Комментарий);
                
            КонецЕсли;
            
        КонецЦикла;
    
    КонецЦикла;
    
    НачатьТранзакцию();
    Попытка
                                                                                         
        НаборЗаписей.Записать(Ложь);
        ЗафиксироватьТранзакцию();
        
    Исключение
        
        ОтменитьТранзакцию();
        ЗаписьЖурналаРегистрации("Ошибка записи параметров сеанса", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.МониторингСеансов, НаборЗаписей, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
                
    КонецПопытки;
    
    НачатьТранзакцию();
    Попытка
        
        НаборЗаписейПараметрыКластераБуфер = РегистрыСведений.ПараметрыКластераБуфер.СоздатьНаборЗаписей();
        НаборЗаписейПараметрыКластераБуфер.Отбор.Тип.Установить("ПСНС");
        НаборЗаписейПараметрыКластераБуфер.Отбор.ДатаЗаписиМинутаUTC.Установить(ДанныеКластера["МинутаОбработки"]);
        НаборЗаписейПараметрыКластераБуфер.Отбор.УникальныйИдентификаторКластера.Установить(ДанныеКластера["УникальныйИдентификаторКластера"]);
        НаборЗаписейПараметрыКластераБуфер.Записать(Истина);
        
        ЗафиксироватьТранзакцию();
        
    Исключение
        
        ОтменитьТранзакцию();
        ВызватьИсключение;
                
    КонецПопытки;
        
    Кеш = Новый Структура("ИнформационныеБазыКеш, РабочиеСерверыКеш", ИнформационныеБазыКеш, РабочиеСерверыКеш);
    ПоместитьВоВременноеХранилище(Кеш, ДанныеКластера["АдресХранилища"]);
    
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("Объект ЦКК", ДанныеКластера["УникальныйИдентификаторКластера"]);
    Общий.ЗаписатьВнутреннийЗамерПроизводительности("ОбработкаМониторингСеансовБуфер", Начало, 10, Ложь, ДопПараметры);
        
КонецПроцедуры

Функция КластерИзКеша(Ключ, Кеш)
    
    Кластер1С = Кеш[Ключ];
    Если Кластер1С = Неопределено Тогда
        Кластер1С = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуКластер(Ключ);
        Кеш.Вставить(Ключ, Кластер1С);
    КонецЕсли;
    
    Возврат Кластер1С;
            
КонецФункции

Функция РабочийСерверИзКеша(Ключ, Кеш)
    
    РабочийСервер1С = Кеш[Ключ];
    Если РабочийСервер1С = Неопределено Тогда
        РабочийСервер1С = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуРабочийСервер(Ключ);
        Кеш.Вставить(Ключ, РабочийСервер1С);
    КонецЕсли;
    
    Возврат РабочийСервер1С;
    
КонецФункции

Функция ИнформационнаяБазаИзКеша(Ключ, Кеш)
    
    ИнформационнаяБаза = Кеш[Ключ];
    Если ИнформационнаяБаза = Неопределено Тогда
        ИнформационнаяБаза = Справочники.ОбъектыКонтроля.НайтиПоУникальномуИдентификаторуИнформационнаяБаза(Ключ);
        Кеш.Вставить(Ключ, ИнформационнаяБаза);
    КонецЕсли;
    
    Возврат ИнформационнаяБаза;
    
КонецФункции

Функция СоздатьНаборыЗаписей(Тип)
    
    НаборыЗаписей = Новый Соответствие;
    
    Если Тип = "ПРП" Тогда
        НаборыЗаписей.Вставить("МониторингПроцессов", РегистрыСведений.МониторингПроцессов.СоздатьНаборЗаписей()); 
        НаборыЗаписей.Вставить("МониторингПроцессовСрезПоследних", РегистрыСведений.МониторингПроцессовСрезПоследних.СоздатьНаборЗаписей());
    ИначеЕсли Тип = "ПСНС" Тогда
        НаборыЗаписей.Вставить("МониторингСеансов", РегистрыСведений.МониторингСеансов.СоздатьНаборЗаписей());
    ИначеЕсли Тип = "ПСНС_ПРИЛ" Тогда
        НаборыЗаписей.Вставить("ЧислоСеансов", РегистрыСведений.ЧислоСеансов.СоздатьНаборЗаписей());
    КонецЕсли;
    
    Возврат НаборыЗаписей;
    
КонецФункции

#КонецОбласти

#Область Инциденты

Функция ТипИнцидентаОбъектКонтроля(ПредставлениеОбъектаКонтроля, УровеньИнцидента)
    
    ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(ПредставлениеОбъектаКонтроля);
    Возврат Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, ПредставлениеОбъектаКонтроля, УровеньИнцидента);
    
КонецФункции

Функция ИнцидентОбъектКонтроля(ОбъектКонтроля, Инцидент)
    
    ХешИнцидентаСсылка = Справочники.Инциденты.ХешИнцидента(Строка(ОбъектКонтроля.УникальныйИдентификатор()) + Инцидент["type"]);
    Возврат Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидентаСсылка, ОбъектКонтроля.Наименование, Ложь);
    
КонецФункции

Функция НавигационнаяСсылкаКластер(Кластер1С)
    Возврат Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(Кластер1С), "Кластер 1С: " + Кластер1С);
КонецФункции

Функция НавигационнаяСсылкаРабочийСервер(РабочийСервер1С)
    Возврат Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(РабочийСервер1С), "Рабочий сервер 1С: " + РабочийСервер1С);
КонецФункции

Функция НавигационнаяСсылкаИнформационнаяБаза(ИнформационнаяБаза1С)
    Возврат Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(ИнформационнаяБаза1С), "ИнфоБаза: " + ИнформационнаяБаза1С);
КонецФункции

Функция ДатаОткрытия(Инцидент)
    
    ДатаОткрытия = Дата(Инцидент["date"]);
    Возврат МестноеВремя(ДатаОткрытия);
    
КонецФункции

Функция ДатаЗакрытия(Инцидент)
    
    ДатаЗакрытия = Дата(Инцидент["date"]);
    Возврат МестноеВремя(ДатаЗакрытия);
    
КонецФункции

Функция СообщениеИзJSON(Сообщение)
    
    ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Сообщение);
	Возврат ПрочитатьJSON(ЧтениеJSON, Истина);
    
КонецФункции

#КонецОбласти

#КонецОбласти
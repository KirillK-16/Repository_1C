
#Область ПрограммныйИнтерфейс

Функция УникальныйКаталогДляКонтрольнойПроцедуры(КонтрольнаяПроцедура, Каталог) Экспорт
	
	Разделитель = ОбщийКлиентСервер.РазделительКаталоговОпределитьПоКаталогу(Каталог);
	
	Если Разделитель = Прав(Каталог, 1) Тогда
		Разделитель = "";
	КонецЕсли;
	
	Возврат Каталог + Разделитель + Строка(КонтрольнаяПроцедура.УникальныйИдентификатор());
	
КонецФункции

// Определяет был ли объект сохранен хотя бы раз
//
// Параметры:
//  Объект - любой сохраняемый объект
//
// Возвращаемое значение:
//  Булево 
//
Функция ЭтоНовыйОбъект(Объект) Экспорт
	Возврат Объект.Ссылка.Пустая();
КонецФункции

// Возвращает форматированный общего макета 
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстHTMLМакета(ИмяМакета) Экспорт
	Макет = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты[ИмяМакета]);
	ТекстМакета = Макет.ПолучитьТекст();
	Стиль = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.СтильWebСтраниц).ПолучитьТекст();
	ТекстМакета = СтрЗаменить(ТекстМакета, "</head>", "<STYLE>" + Стиль + "</STYLE></head>");
	Возврат ТекстМакета;
КонецФункции

// Изменяет текст запроса и устанавливает соответствующие параметры запроса
// Параметры:
//  Запрос - тип Запрос
//  Фильтр - структура
//  Синоним - псевдоним таблицы 
//
// Возвращаемое значение:
//  Строка - измененный текст запроса
//
Функция ТекстУсловияЗапроса(Запрос, Фильтр, Синоним) Экспорт
	ЗапросТекст = "";
	
	Если Фильтр.Количество() <> 0 Тогда
		ЗапросТекст = ЗапросТекст + " ГДЕ ";
	Иначе
		Возврат "";
	КонецЕсли;
	
	СсылкаНаСиноним = " " + Синоним + ".";
	ЭтоПервоеУсловие = Истина;
	Для Каждого Параметр Из Фильтр Цикл
		ИмяПараметра = Параметр.Ключ;
		ЗначениеПараметра = Параметр.Значение;
		ЗапросТекст = ЗапросТекст + ?(ЭтоПервоеУсловие, "", " И ") + СсылкаНаСиноним + ИмяПараметра;
		Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
		
		Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") И ЗначениеПараметра.Количество() > 0 Тогда
			ЗапросТекст = ЗапросТекст + " В ( &" + ИмяПараметра + " ) ";
		Иначе
			ЗапросТекст = ЗапросТекст + " = &" + ИмяПараметра + " "; 
		КонецЕсли;
		ЭтоПервоеУсловие = Ложь;
	КонецЦикла;
	Возврат ЗапросТекст;
КонецФункции

// Определяет число элементов в таблице
// Параметры:
//  Откуда - Строка
//  Фильтр - структура
// 
// Возвращаемое значение:
//  Число
//
Функция ЧислоЭлементовВыборка(Откуда, Фильтр) Экспорт	 
	Запрос = Новый Запрос;
	ЗапросТекст = "
	|ВЫБРАТЬ 
	|Количество(*) Как Всего
	|ИЗ %1 КАК Объект";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%1", Откуда);
	Запрос.Текст = ЗапросТекст + ТекстУсловияЗапроса(Запрос, Фильтр, "Объект");	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();								
	Возврат Выборка.Всего;		
КонецФункции

// Процедура выполняет запись в журнал контроля 
//
// Параметры:
//  НомерСообщения - Число - порядковый номер сообщения, полученного от бизнес-процесса 
//  для записи в журнале контроля
//  БизнесПроцессСсылка,
//  Состояние - Перечисления.ЗаголовкиЖурналаКонтроля - текущее состояние бизнес-процесса
//  Описание - Строка - Более подробная информация о состоянии бизнес-процесса
//
Процедура ЗаписатьВЖурналКонтроля(КонтрольнаяПроцедура, Состояние, Описание = "", ДопПараметры = Неопределено) Экспорт

    Если ДопПараметры = Неопределено Тогда
        Период = ТекущаяДата();
        ОбъектКонтроля = КонтрольнаяПроцедура.ОбъектКонтроля;
    Иначе
        Период = ДопПараметры.Период;
        ОбъектКонтроля = ДопПараметры.ОбъектКонтроля;
    КонецЕсли;
    
    НаборЗаписей = РегистрыСведений.ЖурналКонтроля.СоздатьНаборЗаписей();
        
    НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.КонтрольнаяПроцедура = КонтрольнаяПроцедура;
    НовЗапись.ОбъектКонтроля = ОбъектКонтроля;
    НовЗапись.ДатаЗаписи = Период;
    НовЗапись.УникальныйИдентификаторЗаписи = Новый УникальныйИдентификатор();
	НовЗапись.Результат = Состояние;
	НовЗапись.Описание = Описание;
		
	НаборЗаписей.Записать(Ложь);

КонецПроцедуры

Функция ВыборкаКластеров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбъектыКонтроля.Ссылка
	|ИЗ
	|	Справочник.ОбъектыКонтроля КАК ОбъектыКонтроля
	|ГДЕ
	|	ОбъектыКонтроля.Владелец.Ссылка = &КластерСерверов1С
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыКонтроля.Наименование";
	
	Запрос.УстановитьПараметр("КластерСерверов1С", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВыборкаРабочихСерверов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбъектыКонтроля.Ссылка
	|ИЗ
	|	Справочник.ОбъектыКонтроля КАК ОбъектыКонтроля
	|ГДЕ
	|	ОбъектыКонтроля.Владелец.Ссылка = &РабочийСервер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыКонтроля.Наименование";
	
	Запрос.УстановитьПараметр("РабочийСервер", Справочники.ВидыОбъектовКонтроля.РабочийСервер);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВыборкаИнформационныхБаз(ДополнительныеУсловия = "", ДополнительныеПараметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	ЗапросТекст = "
	|ВЫБРАТЬ
	|	ОбъектыКонтроля.Ссылка
	|ИЗ
	|	Справочник.ОбъектыКонтроля КАК ОбъектыКонтроля
	|ГДЕ
	|	ОбъектыКонтроля.Владелец.Ссылка = &ИнформационнаяБаза %ДополнительныеУсловия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыКонтроля.Наименование";
	
	ЗаменыВТекстеЗапроса = Новый Соответствие;
	Если НЕ ПустаяСтрока(ДополнительныеУсловия) Тогда
		ЗаменыВТекстеЗапроса.Вставить("%ДополнительныеУсловия", " И " + ДополнительныеУсловия);
		ДополнительныеПараметрыЗапроса = ДополнительныеПараметры;
	Иначе
		ЗаменыВТекстеЗапроса.Вставить("%ДополнительныеУсловия", "");
		ДополнительныеПараметрыЗапроса = Неопределено;
	КонецЕсли;
	ИзменитьЗапрос(Запрос, ЗапросТекст, ЗаменыВТекстеЗапроса, ДополнительныеПараметрыЗапроса);
	
	Запрос.УстановитьПараметр("ИнформационнаяБаза", Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
	
	Запрос.Текст = ЗапросТекст;
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПараметрыКонтрольнойПроцедуры(ОбъектКонтроля, КодПроцедуры, СписокПолей) Экспорт
	
	Запрос = Новый Запрос;
	ЗапросТекст = "ВЫБРАТЬ
	| %ПоляВыборки
	|ИЗ
	|	РегистрСведений.Настройки%КодПроцедуры КАК Настройки
	|ГДЕ
	|	Настройки.КонтрольнаяПроцедура = &КонтрольнаяПроцедура";
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%КодПроцедуры", КодПроцедуры);
	
	ПоляВСтроку = "";
	Для Каждого ИмяПоля Из СписокПолей Цикл
		ПоляВСтроку = ПоляВСтроку + ?(ПустаяСтрока(ПоляВСтроку), "", ", ") + "Настройки." + ИмяПоля;
	КонецЦикла;
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "%ПоляВыборки", ПоляВСтроку);
	
	Запрос.Текст = ЗапросТекст;
	
	Запрос.УстановитьПараметр("КонтрольнаяПроцедура",КонтрольнаяПроцедура(ОбъектКонтроля, КодПроцедуры));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция КонтрольнаяПроцедура(ОбъектКонтроля, ИмяБизнесПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрольныеПроцедуры.Ссылка
	|ИЗ
	|	Справочник.КонтрольныеПроцедуры КАК КонтрольныеПроцедуры
	|ГДЕ
	|	КонтрольныеПроцедуры.Владелец.ИмяБизнесПроцесса = &ИмяБизнесПроцесса 
	|	И КонтрольныеПроцедуры.ОбъектКонтроля = &ОбъектКонтроля";
	Запрос.УстановитьПараметр("ИмяБизнесПроцесса", ИмяБизнесПроцесса);
	Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектКонтроля);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Получить версию платформы в виде числа формата: wwwwxxxxyyyyzzzz,
// например: 0008000100130041, где первые нули опущены
//
// Возвращаемое значение:
//  Число - версия платформы
//
Функция ВерсияПлатформы() Экспорт
	
	Инфо = Новый СистемнаяИнформация;
	ВерсияЧисло = ВерсияВЧисло(Инфо.ВерсияПриложения);
	
	Возврат ВерсияЧисло;
	
КонецФункции // ВерсияПлатформы()

Функция ВерсияВЧисло(Версия) Экспорт
	Попытка
		Если НЕ ПустаяСтрока(Версия) Тогда
			ВерсияСтроки = РазделитьСтроку(Версия, ".");
			
			Возврат Число(ВерсияСтроки[0]) * 1000000000000000
			+ Число(ВерсияСтроки[1]) * 100000000000
			+ Число(ВерсияСтроки[2]) * 10000000
			+ Число(ВерсияСтроки[3]);
		Иначе
			Возврат 0;
		КонецЕсли;
	Исключение
		Возврат -1;
	КонецПопытки;
КонецФункции

// Функция возвращает соединитель 1С:Предприятия
//
// Возвращаемое значение:
//  COMОбъект - соединитель 1С:предприятия (COMConnector)
//
Функция ПолучитьComСоединитель(ВерсияПлатформы = Неопределено) Экспорт
	Отладка.Информация("ПолучитьComСоединитель");
	ComСоединитель = Новый COMОбъект(ПолучитьВерсиюCom(ВерсияПлатформы) + ".COMConnector");
	Отладка.Информация("ПолучитьComСоединитель__Успешно");
	Возврат ComСоединитель;
	
КонецФункции

// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат СтрНайти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции

// Проверяет физическое наличие записи в информационной базе данных о переданном значении ссылки
//
// Параметры:
//  ЛюбаяСсылка - значение любой ссылки информационной базы данных
// 
// Возвращаемое значение:
//  Истина - ссылка физически существует;
//  Ложь   - ссылка физически не существует
//
Функция СсылкаСуществует(ЛюбаяСсылка) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	[ИмяТаблицы]
	|ГДЕ
	|	Ссылка = &Ссылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ИмяТаблицыПоСсылке(ЛюбаяСсылка));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПутьККонфигурационномуФайлу() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если НЕ ((СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86) Или (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогаОбщихКонфигурационныхФайлов = КаталогПрограммы() + "conf";
	ФайлУказатель = Новый Файл(КаталогаОбщихКонфигурационныхФайлов + "\conf.cfg");
		
	Если ФайлУказатель.Существует() Тогда
		ФайлКонфигурации = Новый ЧтениеТекста(ФайлУказатель.ПолноеИмя);
		Строка = ФайлКонфигурации.ПрочитатьСтроку();
		Пока Строка <> Неопределено Цикл
			Позиция = СтрНайти(Строка, "ConfLocation=");
			Если Позиция > 0 Тогда 
				КаталогКонфигурацииПриложения = СокрЛП(Сред(Строка, Позиция + 13));
				Прервать;
			КонецЕсли;
			Строка = ФайлКонфигурации.ПрочитатьСтроку();
		КонецЦикла;
	КонецЕсли;
	
	
	Возврат КаталогКонфигурацииПриложения;

КонецФункции

Функция РезультатЗапросаВМассив(Результат) Экспорт
	РезультатМассив = Новый Массив;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеСтроки = Новый Структура;
		
		Для Каждого ТекКолонка Из Результат.Колонки Цикл
			ДанныеСтроки.Вставить(ТекКолонка.Имя, Выборка[ТекКолонка.Имя]);
		КонецЦикла;
		
		РезультатМассив.Добавить(ДанныеСтроки);
	КонецЦикла;	
	
	Возврат РезультатМассив;
КонецФункции

Функция ПолучитьШаблоныОповещенийКонтрольныхПроцедур () Экспорт
	Шаблоны = Новый Массив;
	
	Шаблоны.Добавить(Справочники.ТипыЗадач.ВосстановлениеРаботоспособоностиКонтрольнойПроцедуры.Ссылка);
	Шаблоны.Добавить(Справочники.ТипыЗадачКонтрольПамяти.НедоступенКластер.Ссылка);
	Шаблоны.Добавить(Справочники.ТипыЗадачКонтрольПамяти.ПревышенПорогПотребленияПамяти.Ссылка);
	Шаблоны.Добавить(Справочники.ТипыЗадачСборДампов.СборДамповНовыйДампРассмотреть.Ссылка);
	Шаблоны.Добавить(Справочники.ТипыЗадачСборДампов.КаталогЛоговЗавершившегосяПроцессаПуст.Ссылка);
	Шаблоны.Добавить(Справочники.ТипыЗадачКонтрольПодключений.КонтрольПодключенийНевозможноПодключиться.Ссылка);
	Шаблоны.Добавить(Справочники.ТипыЗадачКонтрольПодключений.КонтрольПодключенийТаймаут.Ссылка);
	
	Возврат Шаблоны;
КонецФункции

Функция ИдентификаторЦКК() Экспорт
	
	ИдентификаторЦКК = Неопределено;
	
	Если Константы.СтрокаСоединенияИБ.Получить() = СтрокаСоединенияИнформационнойБазы() Тогда
		ИдентификаторЦКК = Константы.ИмяЭтогоЦКК.Получить();
	Иначе
		ИдентификаторЦКК = СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	
	Возврат ИдентификаторЦКК;
		
КонецФункции

Функция СоздатьРабочийСерверПоИмениХоста(Хост) Экспорт
	Справочники.Оборудование.СоздатьЭлементПоИмениХоста(Хост);	
КонецФункции

// Не вызывать внутри транзакции, т.к. в случае исключения по управляемой блокировки
// внутри ОбщийСерверПовтИсп.ПолучитьПараметрыЗаписиПроизводительности
// будет отменена родительская транзакция с ошибкой "В данной транзакции уже происходили ошибки"
// Что бы данной ситуации не происходило, необходимо инициализировать
// ключевые операции и объект контроля при обновлении конфигурации
//
Процедура ЗаписатьВнутреннийЗамерПроизводительности(ИмяКлючевойОперации, ДатаНачала, ЦелевоеВремя, НеПроверятьТранзакцию, ДопПараметры = Неопределено, ЭтоЦентрМониторинга = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НеПроверятьТранзакцию ИЛИ НЕ ТранзакцияАктивна() Тогда
		ТекДата = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаНачала;
        
        Если ЭтоЦентрМониторинга Тогда
            ПараметрыЗаписиПроизводительности = ЦентрМониторингаИмпортПовтИсп.ПолучитьПараметрыЗаписиПроизводительности(ИмяКлючевойОперации);
        Иначе
            ПараметрыЗаписиПроизводительности = ОбщийСерверПовтИсп.ПолучитьПараметрыЗаписиПроизводительности(ИмяКлючевойОперации, ЦелевоеВремя);
        КонецЕсли;
        
        Если НЕ ПараметрыЗаписиПроизводительности.ПомеченаНаУдаление Тогда
            
            УникальныйИдентификаторЗаписи = Новый УникальныйИдентификатор();
            
            НовЗапись = РегистрыСведений.ЗамерыПроизводительности.СоздатьМенеджерЗаписи();
            НовЗапись.ОбъектКонтроля = ПараметрыЗаписиПроизводительности.ОбъектКонтроля;
            НовЗапись.ДатаЗамераUTC = ТекДата;
            НовЗапись.ИдентификаторКлючевойОперации = ПараметрыЗаписиПроизводительности.УникальныйИдентификаторКлючевойОперации;
            НовЗапись.НомерСеанса = НомерСеансаИнформационнойБазы();
            НовЗапись.Значение = Длительность/1000;
            НовЗапись.ДатаЗаписи = ТекущаяДата();
            НовЗапись.Пользователь = ПараметрыЗаписиПроизводительности.ПользовательЗамераПроизводительности;
            НовЗапись.УникальныйИдентификаторЗаписи = УникальныйИдентификаторЗаписи; 
            НовЗапись.Записать(Ложь);
            
            Если ДопПараметры <> Неопределено Тогда
                
                НаборЗаписей = РегистрыСведений.ЗамерыПроизводительностиДополнительнаяИнформация.СоздатьНаборЗаписей();
                
                Для Каждого ТекПараметр Из ДопПараметры Цикл
                    
                    ПараметрЗамера = ОбщийСерверПовтИсп.ПолучитьПараметрЗамераПоНаименованию(ТекПараметр.Ключ);
                    ЗначениеПараметра = ОбщийСерверПовтИсп.ПолучитьЗначениеПараметраЗамераПоНаименованию(ТекПараметр.Значение, ПараметрЗамера);
                    
                    НовЗаписьДопИнфо = НаборЗаписей.Добавить();
                    НовЗаписьДопИнфо.УникальныйИдентификаторЗаписи = УникальныйИдентификаторЗаписи;
                    НовЗаписьДопИнфо.ПараметрыЗамера = ПараметрЗамера;
                    НовЗаписьДопИнфо.Значение = ЗначениеПараметра;
                    
                КонецЦикла;
                
                НаборЗаписей.Записать(Ложь);
                
            КонецЕсли;
        КонецЕсли;
        
	Иначе
		Комментарий = ИмяКлючевойОперации;
		ЗаписьЖурналаРегистрации("Попытка записи внутреннего замера производительности внутри транзации", УровеньЖурналаРегистрации.Предупреждение,, ИмяКлючевойОперации, Комментарий);
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращаемое значение:
// Булево
// 
Функция НастройкаПараметровОповещенияВыполнена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.НастройкаОповещенияВыполнена.Получить();
	
КонецФункции

Процедура ПриНачалеВыполненияРегламентногоЗадания() Экспорт
    
    ВерсияЦКК = ВерсияЦКК();
	Если ВерсияЦКК <> СохраненнаяВерсия() Тогда
		ВызватьИсключение НСтр("ru = 'Выполнение временно невозможно в связи с обновлением на новую версию '") + ВерсияЦКК;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Константы.ПоказатьФормуПослеОбновления.Получить()) Тогда
        ВызватьИсключение НСтр("ru = 'Необходим запуск помощника'");
    КонецЕсли;
        
КонецПроцедуры

Функция ПередНачаломРаботыСистемы(ЭтоМобильныйКлиент) Экспорт
    
    Справочники.ИнтерфейсыКлиента.ИнициализироватьИнтерфейс();
    
    ПараметрыСеанса.ЭтоМобильныйКлиент = ЭтоМобильныйКлиент;
    
	ПараметрыПриложения = Новый Структура;
	ПараметрыПриложения.Вставить("ТребуетсяПерезагрузка", СоздатьНачальногоПользователя());
	ПараметрыПриложения.ТребуетсяПерезагрузка = ПараметрыПриложения.ТребуетсяПерезагрузка ИЛИ УстановитьКомпактныйРежим();
    ПараметрыПриложения.Вставить("ПолныйИнтерфейс", Справочники.ИнтерфейсыКлиента.ПолныйИнтерфейс);
    ПараметрыПриложения.Вставить("МобильныйКлиент", Справочники.ИнтерфейсыКлиента.МобильныйКлиент);
	
	Если НЕ ПараметрыПриложения.ТребуетсяПерезагрузка Тогда
		ПараметрыПриложения.Вставить("СохраненнаяВерсия", СохраненнаяВерсия());
		ПараметрыПриложения.Вставить("ИдетОбновление", ИдетОбновление());
		ПараметрыПриложения.Вставить("НастройкаПараметровОповещенияВыполнена", НастройкаПараметровОповещенияВыполнена());
		ПараметрыПриложения.Вставить("ТекущийПрофильМониторинга", ТекущийПрофильМониторинга());
        ПараметрыПриложения.Вставить("ФормаПослеОбновления", ФормаДляОткрытия());
	КонецЕсли;
	
	Возврат ПараметрыПриложения;
	
КонецФункции

Функция ТекстЗапросаПериодов(Знач ДатаНачала, Знач ДатаОкончания, Знач Периодичность) Экспорт
    
    Периодичность = ВРЕГ(Периодичность);
    
    ДелительПериода = 0;
    Если Периодичность = "СЕКУНДА" Тогда
        ДелительПериода = 1;
    ИначеЕсли Периодичность = "МИНУТА" Тогда
        ДелительПериода = 60;
        ДатаОкончания = КонецМинуты(ДатаОкончания);
    ИначеЕсли Периодичность = "ЧАС" Тогда
        ДелительПериода = 3600;
        ДатаОкончания = КонецЧаса(ДатаОкончания);
    ИначеЕсли Периодичность = "ДЕНЬ" Тогда
        ДелительПериода = 86400;
        ДатаОкончания = КонецДня(ДатаОкончания);
    КонецЕсли;
        
    КоличествоТочек = ((ДатаОкончания + 1) - ДатаНачала)/ДелительПериода;
    ПорядокТочек = СтрДлина(Формат(КоличествоТочек, "ЧГ=0")) - 1;
    
    ТекстЦифр = "(ВЫБРАТЬ 0 КАК Число ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 1 ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 2 ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 3 ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 4 ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 5 ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 6 ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 7 ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 8 ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 9)";
        
    ПоляЗапроса = "";
    ИсточникДанных = "";
    Пока ПорядокТочек >= 0 Цикл
        ИмяТаблицы = Формат(ПорядокТочек, "ЧН=0; ЧГ=0");
        ПоляЗапроса = ПоляЗапроса + "Т" + ИмяТаблицы + ".Число * " + Формат(Pow(10, ПорядокТочек), "ЧГ=0") + " + ";
        ИсточникДанных = ИсточникДанных + Символы.Таб + ТекстЦифр  + " КАК Т" + ИмяТаблицы + "," + Символы.ПС;
        ПорядокТочек = ПорядокТочек - 1;
    КонецЦикла;
    
    ПоляЗапроса = Лев(ПоляЗапроса, СтрДлина(ПоляЗапроса) - 3);
    ИсточникДанных = Лев(ИсточникДанных, СтрДлина(ИсточникДанных) - 2);
    
    ТекстТаблицаПериодов = " 
    |ВЫБРАТЬ
    |   ДОБАВИТЬКДАТЕ(&ДатаНачала, " + Периодичность + ", " + ПоляЗапроса + ") КАК Период
    |ПОМЕСТИТЬ
    |   Периоды
    |ИЗ
    |   " + ИсточникДанных + "
    |ГДЕ
    |   " + ПоляЗапроса + " <= РАЗНОСТЬДАТ(&ДатаНачала, &ДатаОкончания, " + Периодичность + ")
    |ИНДЕКСИРОВАТЬ ПО
    |   Период";
    
    Возврат ТекстТаблицаПериодов; 
    
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

Функция УдалениеПомеченныхНаУдаление() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
    
    УдалитьДанныеСправочникаГруппыСчетчиков();
    
КонецФункции

Процедура УдалитьУстаревшиеДанные() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
	РегистрыСведений.НастройкиОчисткиУстаревшихДанных.УдалитьУстаревшиеДанные();
	Устаревшее_УдалениеУстаревшихДанных();
	
КонецПроцедуры

Процедура УдалениеИзЖурналаКонтроля(ГраницаУдаления, АдресХранилища) Экспорт
    
    ЕстьУдаление = РегистрыСведений.ЖурналКонтроля.УдалитьУстаревшиеДанные(ГраницаУдаления);
    ПоместитьВоВременноеХранилище(ЕстьУдаление, АдресХранилища);
    
КонецПроцедуры

Процедура УдалениеИзЖурналаОповещений(ГраницаУдаления, АдресХранилища) Экспорт
    
    ЕстьУдаление = РегистрыСведений.ЖурналОповещений.УдалитьУстаревшиеДанные(ГраницаУдаления);
    ПоместитьВоВременноеХранилище(ЕстьУдаление, АдресХранилища);
    
КонецПроцедуры

Процедура УдалениеДанныхМониторингаСеансов(ГраницаУдаления, АдресХранилища) Экспорт
        
    ЕстьУдаление = РегистрыСведений.МониторингСеансов.УдалитьУстаревшиеДанные();
    ПоместитьВоВременноеХранилище(ЕстьУдаление, АдресХранилища);
    
КонецПроцедуры

Процедура УдалениеИзОтправкаСообщений(ГраницаУдаления, АдресХранилища) Экспорт
    
    ЕстьУдаление = Справочники.ОтправкаСообщений.УдалитьУстаревшиеДанные(ГраницаУдаления);
    ПоместитьВоВременноеХранилище(ЕстьУдаление, АдресХранилища);
    
КонецПроцедуры

Процедура УдалениеИзГруппыСчетчиков(ГраницаУдаления, АдресХранилища) Экспорт
    
    ЕстьУдаление = РегистрыСведений.ГруппыСчетчиковФормаСписка.УдалитьУстаревшиеДанные();
    ПоместитьВоВременноеХранилище(ЕстьУдаление, АдресХранилища);
    
КонецПроцедуры

Процедура УдалениеИзГруппыСчетчиковКонтрольПодчиненных(ГраницаУдаления, АдресХранилища) Экспорт
    
    ЕстьУдаление = РегистрыСведений.ГруппыСчетчиковФормаСпискаЕстьКонтрольПодчиненных.УдалитьУстаревшиеДанные();
    ПоместитьВоВременноеХранилище(ЕстьУдаление, АдресХранилища);
    
КонецПроцедуры

Процедура УдалениеИзЗамерыПроизводительности(ГраницаУдаления, АдресХранилища) Экспорт
    
    ЕстьУдаление = РегистрыСведений.ЗамерыПроизводительности.УдалитьУстаревшиеДанные(ГраницаУдаления, Ложь);
    ЕстьУдаление = ЕстьУдаление ИЛИ РегистрыСведений.ЗамерыПроизводительности.УдалитьУстаревшиеДанные(ГраницаУдаления, Истина);
    ПоместитьВоВременноеХранилище(ЕстьУдаление, АдресХранилища);
    
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы() Экспорт
    
    Если ВерсияЦКК() <> СохраненнаяВерсия() Тогда 
        
        ВерсииДляОбновления = Новый Массив;
		
		Версия_2_1_2_1 = ДобавитьВерсию(ВерсииДляОбновления, "2.1.2.1");
		Версия_2_1_2_1.ПроцедураОбновления = "ОбновлениеИнформационнойБазы_2_1_2_1";
        
        Версия_2_1_3_2 = ДобавитьВерсию(ВерсииДляОбновления, "2.1.3.2");
		Версия_2_1_3_2.ПроцедураОбновления = "ОбновлениеИнформационнойБазы_2_1_3_2";
        
        Версия_2_1_3_3 = ДобавитьВерсию(ВерсииДляОбновления, "2.1.3.3");
		Версия_2_1_3_3.ПроцедураОбновления = "ОбновлениеИнформационнойБазы_2_1_3_3";
        
        Версия_2_1_3_4 = ДобавитьВерсию(ВерсииДляОбновления, "2.1.3.4");
		Версия_2_1_3_4.ПроцедураОбновления = "ОбновлениеИнформационнойБазы_2_1_3_4";
        
        Версия_2_1_3_5 = ДобавитьВерсию(ВерсииДляОбновления, "2.1.3.5");
		Версия_2_1_3_5.ПроцедураОбновления = "ОбновлениеИнформационнойБазы_2_1_3_5";
        
        Версия_2_1_3_6 = ДобавитьВерсию(ВерсииДляОбновления, "2.1.3.6");
		Версия_2_1_3_6.ПроцедураОбновления = "ОбновлениеИнформационнойБазы_2_1_3_6";
        
        Версия_2_1_3_7 = ДобавитьВерсию(ВерсииДляОбновления, "2.1.3.7");
		Версия_2_1_3_7.ПроцедураОбновления = "ОбновлениеИнформационнойБазы_2_1_3_7";
        
        Версия_2_1_3_8 = ДобавитьВерсию(ВерсииДляОбновления, "2.1.3.8");
		Версия_2_1_3_8.ПроцедураОбновления = "ОбновлениеИнформационнойБазы_2_1_3_8";
        
        Версия_2_1_3_11 = ДобавитьВерсию(ВерсииДляОбновления, "2.1.3.11");
		Версия_2_1_3_11.ПроцедураОбновления = "ОбновлениеИнформационнойБазы_2_1_3_11";
        
        Версия_2_1_3_13 = ДобавитьВерсию(ВерсииДляОбновления, "2.1.3.13");
		Версия_2_1_3_13.ПроцедураОбновления = "ОбновлениеИнформационнойБазы_2_1_3_13";
        
        Версия_2_1_3_22 = ДобавитьВерсию(ВерсииДляОбновления, "2.1.3.22");
		Версия_2_1_3_22.ПроцедураОбновления = "ОбновлениеИнформационнойБазы_2_1_3_22";
        
        Версия_2_1_3_23 = ДобавитьВерсию(ВерсииДляОбновления, "2.1.3.23");
		Версия_2_1_3_23.ПроцедураОбновления = "ОбновлениеИнформационнойБазы_2_1_3_23";
                        
		ЭтоПервыйЗапуск = ДобавитьВерсииДляОбновления(ВерсииДляОбновления);
		
		ОбновитьДоАктуальнойВерсии(ЭтоПервыйЗапуск);
		
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовоеФоновоеЗадание(Наименование, ИмяМетода, ГраницаУдаления)
    
    АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
    
    ФоновоеЗадание = Новый Структура;
    ФоновоеЗадание.Вставить("Ключ", Новый УникальныйИдентификатор);
    ФоновоеЗадание.Вставить("Идентификатор", Новый УникальныйИдентификатор);
    ФоновоеЗадание.Вставить("Наименование", Наименование);
    ФоновоеЗадание.Вставить("ИмяМетода", ИмяМетода);
    ФоновоеЗадание.Вставить("ГраницаУдаления", ГраницаУдаления);
    ФоновоеЗадание.Вставить("АдресХранилища", АдресХранилища);
    ФоновоеЗадание.Вставить("ЕстьУдаление", Истина);
    
    Возврат ФоновоеЗадание;
    
КонецФункции

Функция ФоновоеЗаданиеВыполнить(ФоновоеЗадание)
    
    ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗадание.Идентификатор);
    Если ФЗ = Неопределено ИЛИ НЕ ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
        
        Если ФЗ <> Неопределено И ФЗ.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
            РезультатВыполнения = ПолучитьИзВременногоХранилища(ФоновоеЗадание.АдресХранилища);
            Если РезультатВыполнения <> Неопределено Тогда
                ФоновоеЗадание.ЕстьУдаление = РезультатВыполнения;
            КонецЕсли;
        КонецЕсли;
        
        Если ФоновоеЗадание.ЕстьУдаление Тогда
            Параметры = Новый Массив;
            Параметры.Добавить(ФоновоеЗадание.ГраницаУдаления);
            Параметры.Добавить(ФоновоеЗадание.АдресХранилища);
            
            ФЗ = ФоновыеЗадания.Выполнить(ФоновоеЗадание.ИмяМетода, Параметры, ФоновоеЗадание.Ключ, ФоновоеЗадание.Наименование);
            ФоновоеЗадание.Идентификатор = ФЗ.УникальныйИдентификатор;
        КонецЕсли;
        
    КонецЕсли;
    
    Возврат ФоновоеЗадание.ЕстьУдаление;
        
КонецФункции

Функция ФоновыеЗаданияУдаления()
    
    НачалоТекущегоДня = НачалоДня(ТекущаяДата());
    
    ПериодХраненияЖурналаКонтроля = Константы.ПериодХраненияЖурналаКонтроля.Получить();
	ПериодХраненияОповещений = Константы.ПериодХраненияОповещений.Получить();
    ПериодХраненияВнутреннихЗамеров = Константы.ПериодХраненияВнутреннихЗамеров.Получить();
    ПериодХраненияЗамеров = Константы.ПериодХраненияЗамеров.Получить();
        
    ФоновыеЗаданияУдаления = Новый Массив;
    
    // Удаление устаревших данных из регистра сведений "ЖурналКонтроля".
    Если ПериодХраненияЖурналаКонтроля > 0 Тогда 
        Наименование = "Удаление устаревших данных из журнала контроля.";
        ИмяМетода = "Общий.УдалениеИзЖурналаКонтроля";
        ГраницаУдаления = НачалоТекущегоДня - ПериодХраненияЖурналаКонтроля * 86400;
        ФоновыеЗаданияУдаления.Добавить(НовоеФоновоеЗадание(Наименование, ИмяМетода, ГраницаУдаления));
    КонецЕсли;
    
    // Удаление устаревших данных из регистра сведений "ЖурналОповещений".
    Если ПериодХраненияОповещений > 0 Тогда
        Наименование = "Удаление устаревших данных из журнала оповещений.";
        ИмяМетода = "Общий.УдалениеИзЖурналаОповещений";
        ГраницаУдаления = НачалоТекущегоДня - ПериодХраненияОповещений * 86400;
        ФоновыеЗаданияУдаления.Добавить(НовоеФоновоеЗадание(Наименование, ИмяМетода, ГраницаУдаления));
    КонецЕсли;
    
    // Удаление устаревших данных из справочника "ОтправкаСообщений".
    Если ПериодХраненияОповещений > 0 Тогда
        Наименование = "Удаление устаревших данных отправки сообщений.";
        ИмяМетода = "Общий.УдалениеИзОтправкаСообщений";
        ГраницаУдаления = НачалоТекущегоДня - ПериодХраненияОповещений * 86400;
        ФоновыеЗаданияУдаления.Добавить(НовоеФоновоеЗадание(Наименование, ИмяМетода, ГраницаУдаления));
    КонецЕсли;
    
    // Удаление устаревших данных из регистра сведений "ГруппыСчетчиковФормаСписка".
    Наименование = "Удаление устаревших данных группы счетчиков.";
    ИмяМетода = "Общий.УдалениеИзГруппыСчетчиков";
    ФоновыеЗаданияУдаления.Добавить(НовоеФоновоеЗадание(Наименование, ИмяМетода, Неопределено));
    
    // Удаление устаревших данных из регистра сведений "ГруппыСчетчиковФормаСпискаЕстьКонтрольПодчиненных"
    Наименование = "Удаление устаревших данных группы счетчиков контроля подчиненных.";
    ИмяМетода = "Общий.УдалениеИзГруппыСчетчиковКонтрольПодчиненных";
    ФоновыеЗаданияУдаления.Добавить(НовоеФоновоеЗадание(Наименование, ИмяМетода, Неопределено));
    
    // Удаление устаревших данных внутренних замеров из регистра сведений "ЗамерыПроизводительности".
    Если ПериодХраненияВнутреннихЗамеров > 0 Тогда
        Наименование = "Удаление устаревших данных из замеров производительности.";
        ИмяМетода = "Общий.УдалениеИзЗамерыПроизводительности";
        ГраницаУдаления = НачалоТекущегоДня - ПериодХраненияВнутреннихЗамеров * 86400;
        ФоновыеЗаданияУдаления.Добавить(НовоеФоновоеЗадание(Наименование, ИмяМетода, ГраницаУдаления));
    КонецЕсли;
    
    // Удаление устаревших данных из регистра сведений "Мониторинг сеансов".
    Наименование = "Удаление устаревших данных мониторинга сеансов.";
    ИмяМетода = "Общий.УдалениеДанныхМониторингаСеансов";
    ФоновыеЗаданияУдаления.Добавить(НовоеФоновоеЗадание(Наименование, ИмяМетода, Неопределено));
        
    Возврат ФоновыеЗаданияУдаления;
    
КонецФункции

// Устарела. Планируется перенос.
Процедура Устаревшее_УдалениеУстаревшихДанных()
    
	Повторять = Истина;
	
	ФоновыеЗаданияУдаления = ФоновыеЗаданияУдаления();
    
    Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
    
	Пока Повторять Цикл
		
		Повторять = Ложь;
        
        Для Каждого ФоновоеЗадание Из ФоновыеЗаданияУдаления Цикл
            ФоновоеЗаданиеВыполнить(ФоновоеЗадание);
            Повторять = Повторять ИЛИ ФоновоеЗадание.ЕстьУдаление;
        КонецЦикла;
        
        ИндексФЗ = ФоновыеЗаданияУдаления.ВГраница();
        Пока ИндексФЗ > -1 Цикл
            Если НЕ ФоновыеЗаданияУдаления[ИндексФЗ].ЕстьУдаление Тогда
                ФоновыеЗаданияУдаления.Удалить(ИндексФЗ);
            КонецЕсли;
            ИндексФЗ = ИндексФЗ - 1;
        КонецЦикла;
                
        КипВнешнийКомпонент.Пауза(100, Инструменты);
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ИзменитьЗапрос(Запрос, ЗапросТекст, ЗаменыВТекстеЗапроса, ДополнительныеПараметрыЗапроса = Неопределено)
	Для Каждого ЗаменаВТексте Из ЗаменыВТекстеЗапроса Цикл
		ЗапросТекст = СтрЗаменить(ЗапросТекст, ЗаменаВТексте.Ключ, ЗаменаВТексте.Значение);
	КонецЦикла;
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для Каждого ПараметрЗапроса Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Разделить строку на составляющие по разделителю и поместить
// части строки в массив
//
// Параметры:
//  РазделяемаяСтрока - Строка, которую нужно разделить
//  Разделитель - Строка, символ разделяющий части строки
//  ПустыеСтроки - Булево, Истина - включать пустые строки в результат,
//                 Ложь - не включать пустые строки в результат
//  Сокращать - Булево, Истина - делать СокрЛП результату, Ложь - нет.
//
// Возвращаемое значение:
//  Массив - части строк
//
Функция РазделитьСтроку(ИсходнаяСтрока, Разделитель, ПустыеСтроки = Ложь, Сокращать = Истина) Экспорт
	
	Результат = Новый Массив;
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	ТекущаяСтрока = "";
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(ИсходнаяСтрока, Сч, 1);
		
		Если ТекущийСимвол = Разделитель Тогда
			
			Если Сокращать Тогда
				ОбработаннаяСтрока = СокрЛП(ТекущаяСтрока);
			Иначе
				ОбработаннаяСтрока = Строка(ТекущаяСтрока);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ОбработаннаяСтрока) Или ПустыеСтроки Тогда
				Результат.Добавить(ОбработаннаяСтрока);
			КонецЕсли;
			
			ТекущаяСтрока = "";
			
		Иначе
			ТекущаяСтрока = ТекущаяСтрока + ТекущийСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработаннаяСтрока = СокрЛП(ТекущаяСтрока);
	
	Если Не ПустаяСтрока(ОбработаннаяСтрока) Тогда
		Результат.Добавить(ОбработаннаяСтрока);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить версию Com объектов
//    ВерсияПлатформы - СправочникСсылка.ВерсииПлатформы
// Возвращаемое значение:
//  Строка - версия в формате V8x
//
Функция ПолучитьВерсиюCom(ВерсияПлатформы = Неопределено)
	
	Если ВерсияПлатформы = Неопределено Тогда
		Инфо = Новый СистемнаяИнформация;
		ВерсияВСтроку = Инфо.ВерсияПриложения;
	Иначе
		ВерсияВСтроку = ВерсияПлатформы.Наименование;
	КонецЕсли;
	
	Попытка 
		Версия = КипОбщий.РазделитьСтроку(ВерсияВСтроку, ".");
		ВерсияСтрока = "V" + Версия[0] + Версия[1];
	Исключение 
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ПолучитьВерсиюCom", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.Общий,,Комментарий);
		ВерсияСтрока = "V82";
	КонецПопытки;
	
	Возврат ВерсияСтрока;
	
КонецФункции

// Возвращает полное имя объекта метаданных по переданному значению ссылки
// Например,
//  "Справочник.Номенклатура";
//  "Документ.ПриходнаяНакладная"
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - значение ссылки, для которого необходимо получить имя таблицы ИБ
// 
// Возвращаемое значение:
//  Строка - полное имя объекта метаданных для указанного значения ссылки
//
Функция ИмяТаблицыПоСсылке(Ссылка)
	
	Возврат Ссылка.Метаданные().ПолноеИмя();
	
КонецФункции

Процедура ВыполнитьЗадание(Знач ИмяЭкспортнойПроцедуры, Знач Параметры = Неопределено) Экспорт
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл 
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + Индекс + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;
	
	Выполнить ИмяЭкспортнойПроцедуры + "(" + ПараметрыСтрока + ")";
	
КонецПроцедуры

Процедура УдалитьСчетчикИзРегистраНеделя(Знач Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СтатистикаНеделя.Период КАК Период
	|ИЗ
	|	РегистрСведений.СтатистикаНеделя КАК СтатистикаНеделя
	|ГДЕ
	|	СтатистикаНеделя.Событие = &Событие
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|";
	
	Запрос.УстановитьПараметр("Событие", Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СтатистикаНеделя.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Отбор.Событие.Установить(Ссылка);
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
		
		УдалитьСчетчикИзРегистраНеделя(Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьСчетчикИзРегистраМесяц(Знач Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СтатистикаМесяц.Период КАК Период
	|ИЗ
	|	РегистрСведений.СтатистикаМесяц КАК СтатистикаМесяц
	|ГДЕ
	|	СтатистикаМесяц.Событие = &Событие
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|";
	
	Запрос.УстановитьПараметр("Событие", Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СтатистикаМесяц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Отбор.Событие.Установить(Ссылка);
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
		
		УдалитьСчетчикИзРегистраМесяц(Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьСчетчикИзРегистраПолный(Знач Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СтатистикаПолный.Период КАК Период
	|ИЗ
	|	РегистрСведений.СтатистикаПолный КАК СтатистикаПолный
	|ГДЕ
	|	СтатистикаПолный.Событие = &Событие
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|";
	
	Запрос.УстановитьПараметр("Событие", Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СтатистикаПолный.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Отбор.Событие.Установить(Ссылка);
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
		
		УдалитьСчетчикИзРегистраПолный(Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьСчетчикИзСправочникаПоказателиСчетчиков(Знач Ссылка)
	
	Выборка = УдалениеНеактуальныхДанных.ПолучитьПоказателиСчетчиковПоГруппеСчетчиков(Ссылка);
	
	Пока Выборка.Следующий() Цикл
		ПоказательСчетчиковОбъект = Выборка.ПоказательСчетчиков.ПолучитьОбъект();
				
		Отбор = Новый Структура("Счетчик", Ссылка);
		СтрокиМассив = ПоказательСчетчиковОбъект.Счетчики.НайтиСтроки(Отбор);
		Если ПоказательСчетчиковОбъект.Счетчики.Количество() = СтрокиМассив.Количество() Тогда
			//Удаляем элемент спрвочника "ПоказателиСчетчиков".
			//Перед непосредственным удалением проверим справочники "ПоказателиМониторинга" или "ПоказателиИнцидентов"
			Если ТипЗнч(Выборка.ПоказательСчетчиков.Владелец) = Тип("СправочникСсылка.ПоказателиМониторинга") Тогда
				УдалениеНеактуальныхДанных.УдалитьПоказательСчетчиковИзПоказателиМониторинга(Выборка.ПоказательСчетчиков);
			ИначеЕсли ТипЗнч(Выборка.ПоказательСчетчиков.Владелец) = Тип("СправочникСсылка.ПоказателиИнцидентов") Тогда
				УдалитьПоказательСчетчиковИзИсточниковИнцидентов(Выборка.ПоказательСчетчиков);
			КонецЕсли;
						
			//А вот сам показатель счетчиков удалять не надо,
			//т.к. он удаляется в модуле объекта при удалении
			//либо показателя мониторинга, либо показателя оповещения
			//ПоказательСчетчиковОбъект.Удалить();
		Иначе
			//Удаляем строки из табличной части элемента
			Для Каждого ТекСтрока Из СтрокиМассив Цикл
				ПоказательСчетчиковОбъект.Счетчики.Удалить(ТекСтрока);
			КонецЦикла;
			ПоказательСчетчиковОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьДанныеСправочникаГруппыСчетчиков()
	Ключ = Новый УникальныйИдентификатор("d88abec8-39d3-4f37-b798-6a1ba6e32e3d");
	
	Отбор = Новый Структура("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФЗ.Количество() = 0 ИЛИ ФЗ[0].Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		ФоновыеЗадания.Выполнить("Общий.УдалитьДанныеСправочникаГруппыСчетчиковВФоне", ,Ключ , "Удаление помеченных на удаление в справочнике <Счетчики>.");
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьДанныеСправочникаГруппыСчетчиковВФоне() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ГруппыСчетчиков.Ссылка КАК ГруппаСчетчиковСсылка
	|ИЗ
	|	Справочник.ГруппыСчетчиков КАК ГруппыСчетчиков
	|ГДЕ
	|	ГруппыСчетчиков.ПометкаУдаления = Истина
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыСчетчиков.ПолныйКодДляПоиска
	|";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если УдалениеНеактуальныхДанных.ПроверитьВозможностьУдаленияГруппыСчетчиков(Выборка.ГруппаСчетчиковСсылка) Тогда 
			УдалитьСчетчикИзРегистраНеделя(Выборка.ГруппаСчетчиковСсылка);
			УдалитьСчетчикИзРегистраМесяц(Выборка.ГруппаСчетчиковСсылка);
			УдалитьСчетчикИзРегистраПолный(Выборка.ГруппаСчетчиковСсылка);
			УдалитьСчетчикИзСправочникаПоказателиСчетчиков(Выборка.ГруппаСчетчиковСсылка);
            РегистрыСведений.ГруппыСчетчиковФормаСписка.УдалитьСчетчик(Выборка.ГруппаСчетчиковСсылка);
			
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(Выборка.ГруппаСчетчиковСсылка);
			НайденныеСсылки = НайтиПоСсылкам(МассивСсылок);
			Если НайденныеСсылки.Количество() = 0 Тогда
				Выборка.ГруппаСчетчиковСсылка.ПолучитьОбъект().Удалить();	
			КонецЕсли;
		Иначе 
			Комментарий = "Невозможно удалить группу счетчиков " + Строка(Выборка.ГруппаСчетчиковСсылка) + " . Уникальный идентификатор " + Выборка.ГруппаСчетчиковСсылка.УникальныйИдентификатор() 
			+ " . Группа счетчиков используется в профилях мониторинга.";
			
			ЗаписьЖурналаРегистрации(
			"ОшибкаПриУдаленииГруппыСчетчиков",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.Общий,
			,
			Комментарий);

		КонецЕсли; 		
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьПоказательСчетчиковИзИсточниковИнцидентов(Знач Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.Ссылка КАК Реф
	               |ИЗ
	               |	Справочник.ПоказателиИнцидентов КАК Т
	               |ГДЕ
	               |	Т.Показатель = &Показатель";
	Запрос.УстановитьПараметр("Показатель", Ссылка);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Реф.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
КонецПроцедуры

// Создает начального пользователя при первом запуске
//
Функция СоздатьНачальногоПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТребуетсяПерезагрузка = Ложь;
	Если Общий.ЧислоЭлементовВыборка("Справочник.Пользователи", Новый Структура) = 0 Тогда
		// Если пользователь заходит под конкретным пользователем, то создаем 
		// в справочнике пользователя с таким именем и не производит перезагрузку,
		// иначе создаем пользователя с именем Оператор и выполняем перезагрузку
		ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		ПустойПользователь = ПользователиИнформационнойБазы.НайтиПоИмени("");
		Оператор = Справочники.Пользователи.СоздатьЭлемент();
		Если ТекущийПользовательИБ.УникальныйИдентификатор = ПустойПользователь.УникальныйИдентификатор Тогда
			НачатьТранзакцию();
			Оператор.Наименование = "Администратор";
			Оператор.ПоказыватьВСпискеВыбора = Истина;
			Роль = Оператор.Роли.Добавить();
			Роль.Роль = "ПолныеПрава";
			Роль.Выбрана = Истина;
			Оператор.Записать();
			
			УправлениеЗадачами.СвязатьПользователяИРоль(
				Оператор.Ссылка,
				Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля
			);
			
			ЗафиксироватьТранзакцию();
			ТребуетсяПерезагрузка = Истина;
		Иначе
			Оператор = СоздатьПользователяНаОснованииТекущегоПользователяИБ();
			УправлениеЗадачами.СвязатьПользователяИРоль(
				Оператор.Ссылка,
				Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля
			);
		КонецЕсли;
	КонецЕсли;
	Возврат ТребуетсяПерезагрузка;
КонецФункции

// Создает элемент справочника Пользователи на основании 
// текущего пользователя информационной базы
//
Функция СоздатьПользователяНаОснованииТекущегоПользователяИБ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ПользовательИБ.Имя <> "" Тогда
		Оператор = Справочники.Пользователи.СоздатьЭлемент();	
		Оператор.Наименование = ПользовательИБ.Имя;
		Оператор.ПоказыватьВСпискеВыбора = ПользовательИБ.ПоказыватьВСпискеВыбора;
		Оператор.УникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор;
		
		РолиИБ = Метаданные.Роли;
		Для Каждого РольИБ Из РолиИБ Цикл
			Если ПользовательИБ.Роли.Содержит(РольИБ) Тогда
				Роль = Оператор.Роли.Добавить();
				Роль.Выбрана = Истина;
				Роль.Роль = РольИБ.Имя;
			КонецЕсли;
		КонецЦикла;
		Оператор.Записать();
		Возврат Оператор.Ссылка;
	КонецЕсли;
КонецФункции

// Обновляет расписание предопределенного регламентного задания
//
Процедура ОбновитьПредопределенноеРегламентноеЗадание(НазваниеМетаданных, Наименование, ПериодВСекундах, Использование = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания[НазваниеМетаданных]);
	
	РегламентноеЗадание.Использование = Использование;
		
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодПовтораВТечениеДня = ПериодВСекундах;
	РегламентноеЗадание.Расписание = Расписание;
	
	Если ПустаяСтрока(РегламентноеЗадание.Наименование) Тогда
		РегламентноеЗадание.Наименование = Наименование;
	КонецЕсли;
	
	РегламентноеЗадание.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ТекущийПрофильМониторинга()
	ТекущийПользователь = СловарьСервер.ТекущийПользователь();
	ПрофильСсылка = Справочники.ПрофильМониторинга.НайтиПоРеквизиту("Пользователь", ТекущийПользователь);
	Если ПрофильСсылка.Пустая() Тогда
		ПрофильСсылка = МониторингСервер.НачальныйПрофильМониторинга();
	КонецЕсли;
	Возврат ПрофильСсылка;
КонецФункции

Функция ФормаДляОткрытия()
	УстановитьПривилегированныйРежим(Истина);
    Возврат Константы.ПоказатьФормуПослеОбновления.Получить();
КонецФункции

Функция УстановитьКомпактныйРежим()
	
	Установлен = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Настройка = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения", "",, Пользователь.Имя);
    
	Если Не ТипЗнч(Настройка) = Тип("НастройкиКлиентскогоПриложения") Тогда
		Настройка = Новый НастройкиКлиентскогоПриложения;
        Настройка.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
        Настройка.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Компактный;
        Установлен = Истина;
	КонецЕсли;
	
	Если Настройка.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси И Настройка.ВариантМасштабаФормКлиентскогоПриложения <> ВариантМасштабаФормКлиентскогоПриложения.Компактный Тогда
		Настройка.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Компактный;
		Установлен = Истина;
    КонецЕсли;
    
    Если Установлен Тогда
        ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", Настройка,, Пользователь.Имя);
    КонецЕсли;
    
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Установлен;
	
КонецФункции

Процедура СнятьПризнакПредопределенныхРолиОборудования()
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.РолиОборудования
    |ГДЕ
    |   Предопределенный
    |   И ИмяПредопределенныхДанных В (&СписокСнять) 
    |";
    
    МассивСнять = Новый Массив;
    МассивСнять.Добавить("Сервер1СиMSSQL");
    МассивСнять.Добавить("Сервер1СиPostgreSQL");
    МассивСнять.Добавить("Сервер1СПредприятие");
    
    Запрос.УстановитьПараметр("СписокСнять", МассивСнять);
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
        СпрОбъект.ИмяПредопределенныхДанных = "";
        СпрОбъект.ОбменДанными.Загрузка = Истина;
        СпрОбъект.Записать();
    КонецЦикла;    
    
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#Область ПрограммныйИнтерфейсОбновлениеИнформационнойБазы

// Возвращаемое значение:
// Строка - Текущая версия конфигурации
//
функция ВерсияЦКК() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Метаданные.Версия;
	
КонецФункции

Функция СохраненнаяВерсия() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.Версия.Получить();
	
КонецФункции

Процедура СоздатьНачальныеОбъектыКонтроляНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Количество(*) Как Всего
	|ИЗ
	|	Справочник.ОбъектыКонтроля
	|КАК
	|	Объект
	|ГДЕ
	|	Наименование <> &ЦентрМониторинга
	|";
	
	Запрос.УстановитьПараметр("ЦентрМониторинга", "Центр мониторинга");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();								
	ВсегоОбъектыКонтроля = Выборка.Всего;
	
	Если ВсегоОбъектыКонтроля = 0 Тогда
		НастройкиПоУмолчанию = НастройкиПоУмолчаниюДляВидовОбъектовКонтроля();
		
		СоздатьНачальныйОбъектКонтроля(
		Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза, 
		"Информационная база 1",
		НастройкиПоУмолчанию[Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза]
		);
		
		СоздатьНачальныйОбъектКонтроля(
		Справочники.ВидыОбъектовКонтроля.РабочийСервер, 
		"Рабочий сервер 1",
		НастройкиПоУмолчанию[Справочники.ВидыОбъектовКонтроля.РабочийСервер]
		);
		
		СоздатьНачальныйОбъектКонтроля(
		Справочники.ВидыОбъектовКонтроля.ЦентрКонтроляКачества, 
		"Центр контроля качества 1",
		НастройкиПоУмолчанию[Справочники.ВидыОбъектовКонтроля.ЦентрКонтроляКачества]
		);
		
		СоздатьНачальныйОбъектКонтроля(
		Справочники.ВидыОбъектовКонтроля.КластерСерверов1С, 
		"Кластер серверов 1С 1",
		НастройкиПоУмолчанию[Справочники.ВидыОбъектовКонтроля.КластерСерверов1С]
		);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ИдетОбновление() Экспорт
	Если ВерсияЦКК() <> СохраненнаяВерсия() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция НачалосьОбновление() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииИнформационнойБазы.ВерсияЧисло
		|ИЗ
		|	РегистрСведений.ВерсииИнформационнойБазы КАК ВерсииИнформационнойБазы
		|ГДЕ
		|	ВерсииИнформационнойБазы.ВерсияЧисло = &ВерсияЧисло
		|";

	Запрос.УстановитьПараметр("ВерсияЧисло", Общий.ВерсияВЧисло(ВерсияЦКК()));

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбновлениеИнформационнойБазы
Функция ДобавитьВерсию(ВерсииДляОбновления, Версия)
	НоваяВерсия = Новый Структура("ВерсияЧисло, Версия, ПроцедураОбновления, СообщатьДлительность, ТекущееЗначение, МаксимальноеЗначение");
	НоваяВерсия.Версия = Версия;
	НоваяВерсия.ВерсияЧисло = ВерсияВЧислоДлина13(Версия);
	НоваяВерсия.СообщатьДлительность = Ложь;
	НоваяВерсия.ТекущееЗначение = 0;
	НоваяВерсия.МаксимальноеЗначение = 100;
	
	ВерсииДляОбновления.Добавить(НоваяВерсия);
	
	Возврат НоваяВерсия;
КонецФункции

Функция ДобавитьВерсииДляОбновления(ВерсииДляОбновления)
	ВерсииДляДобавления = Новый Массив;
	Для Каждого Версия Из ВерсииДляОбновления Цикл
		ВерсииДляДобавления.Добавить(Версия.ВерсияЧисло);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ISNULL(МАКСИМУМ(ВерсииИнформационнойБазы.ВерсияЧисло),0) КАК ВерсияЧисло
		|ИЗ
		|	РегистрСведений.ВерсииИнформационнойБазы КАК ВерсииИнформационнойБазы
		|";

	РезультатЗапроса = Запрос.Выполнить();
	КрайняяВерсия = РезультатЗапроса.Выгрузить()[0].ВерсияЧисло;
	
	Если КрайняяВерсия <> 0 Тогда
		Если ВерсииДляДобавления.Найти(КрайняяВерсия) <> Неопределено Тогда
			ИндексТекущейВерсии = ВерсииДляДобавления.Найти(КрайняяВерсия) + 1;
		Иначе
			Счетчик = ВерсииДляДобавления.ВГРаница();
			ИндексТекущейВерсии = Счетчик;
			Пока Счетчик >= 0 Цикл
				Если ВерсииДляДобавления[Счетчик] < КрайняяВерсия Тогда 
					ИндексТекущейВерсии = Счетчик + 1;
					Прервать;
				КонецЕсли;
				Счетчик = Счетчик - 1;
			КонецЦикла;
		КонецЕсли;
		ЭтоПервыйЗапуск = Ложь;
	Иначе
		Если ПустаяСтрока(СохраненнаяВерсия()) Тогда
			ЭтоПервыйЗапуск = Истина;
			ИндексТекущейВерсии = ВерсииДляДобавления.Количество() - 1;
		Иначе
			ЭтоПервыйЗапуск = Ложь;                                  
			ИндексТекущейВерсии = 0;
		КонецЕсли;
		
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ВерсииИнформационнойБазы.СоздатьНаборЗаписей();
	Если НЕ ЭтоПервыйЗапуск Тогда
		Пока ИндексТекущейВерсии < ВерсииДляОбновления.Количество() Цикл
			ВерсияСтруктура = ВерсииДляОбновления[ИндексТекущейВерсии];
			
			НовЗапись = НаборЗаписей.Добавить();
			НовЗапись.ЗавершеноОбновление = Ложь;
			НовЗапись.ВерсияЧисло = ВерсияСтруктура.ВерсияЧисло;
			НовЗапись.Версия = ВерсияСтруктура.Версия;
			НовЗапись.ПроцедураОбновления = ВерсияСтруктура.ПроцедураОбновления;
			НовЗапись.СообщатьДлительность = ВерсияСтруктура.СообщатьДлительность;
			НовЗапись.ТекущееЗначение = ВерсияСтруктура.ТекущееЗначение;
			НовЗапись.МаксимальноеЗначение = ВерсияСтруктура.МаксимальноеЗначение;
			НовЗапись.ЭтоПервыйЗапуск = ЭтоПервыйЗапуск;
			
			ИндексТекущейВерсии = ИндексТекущейВерсии + 1;
		КонецЦикла;
	Иначе
		ВерсияПервыйЗапуск = ВерсияЦКК();
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.ЗавершеноОбновление = Ложь;
		НовЗапись.ВерсияЧисло = ВерсияВЧислоДлина13(ВерсияПервыйЗапуск);
		НовЗапись.Версия = ВерсияПервыйЗапуск;
		НовЗапись.ПроцедураОбновления = "ЗаполнитьПриПервомЗапуске";
		НовЗапись.СообщатьДлительность = Ложь;
		НовЗапись.ТекущееЗначение = 0;
		НовЗапись.МаксимальноеЗначение = 100;
		НовЗапись.ЭтоПервыйЗапуск = ЭтоПервыйЗапуск;
	КонецЕсли;
	
	Попытка
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ДобавитьВерсииДляОбновления", УровеньЖурналаРегистрации.Ошибка,Метаданные.ОбщиеМодули.Общий,,Комментарий)	
	КонецПопытки;
		
	Возврат ЭтоПервыйЗапуск; 	
		
КонецФункции

Процедура ОбновитьДоАктуальнойВерсии(ЭтоПервыйЗапуск = Ложь)
	
	Если НЕ ЭтоПервыйЗапуск Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВерсииИнформационнойБазы.ПроцедураОбновления КАК ПроцедураОбновления,
		|	ВерсииИнформационнойБазы.Версия КАК Версия,
		|	ВерсииИнформационнойБазы.ЭтоПервыйЗапуск КАК ЭтоПервыйЗапуск
		|ИЗ
		|	РегистрСведений.ВерсииИнформационнойБазы КАК ВерсииИнформационнойБазы
		|ГДЕ
		|	ВерсииИнформационнойБазы.ВерсияЧисло В 
		|	(ВЫБРАТЬ
		|		МИНИМУМ(МинимальнаяВерсия.ВерсияЧисло)
		|	ИЗ
		|	    РегистрСведений.ВерсииИнформационнойБазы КАК МинимальнаяВерсия
		|	ГДЕ
		|		МинимальнаяВерсия.ЗавершеноОбновление = Ложь
		|	)
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ПараметрыОбновления = РезультатЗапроса.Выгрузить()[0];
			Если НЕ ПараметрыОбновления.ЭтоПервыйЗапуск Тогда
				ПроцедураОбновления = ПараметрыОбновления.ПроцедураОбновления;
				Версия = ПараметрыОбновления.Версия;
				Выполнить(ПроцедураОбновления + "(""" + Версия + """)");
			Иначе
				ЗаполнитьПриПервомЗапуске(ПараметрыОбновления.Версия);
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(СохраненнаяВерсия()) Тогда
				ЗаполнитьПриПервомЗапуске(ВерсияЦКК());
			Иначе
				ОбновлениеИнформационнойБазыПоУмолчанию(ВерсияЦКК());
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗаполнитьПриПервомЗапуске(ВерсияЦКК());
	КонецЕсли;
	
КонецПроцедуры

Функция ВерсияВЧислоДлина13(Версия)
	Попытка
		Если НЕ ПустаяСтрока(Версия) Тогда
			ВерсияСтроки = Общий.РазделитьСтроку(Версия, ".");
			
			Возврат Число(ВерсияСтроки[0]) * 1000000000000
			+ Число(ВерсияСтроки[1]) * 100000000
			+ Число(ВерсияСтроки[2]) * 10000
			+ Число(ВерсияСтроки[3]);
		Иначе
			Возврат 0;
		КонецЕсли;
	Исключение
		Возврат -1;
	КонецПопытки;
КонецФункции

Процедура ЗаполнитьПриПервомЗапуске(Версия)
	
	ПодготовитьОбновлениеИнформационнойБазы(Версия);
	
	Комментарий = "Центр Контроля Качества " + Версия + ". Первоначальное заполнение данных.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
	
	Комментарий = "Установка значений констант по умолчанию";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 20, Комментарий);
	
	Комментарий = УстановитьЗначенияКонстантПоУмолчанию();
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 30, Комментарий);
    
    Справочники.ПлощадкиЭксплуатации.Корзина();
	
	СоздатьВидыКонтрольныхПроцедур(Версия, Версия);
	Комментарий = "Создание видов контрольных процедур.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 35, Комментарий);
	
	Комментарий = "Заполнение предопределенных шаблонов техжурналов.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 40, Комментарий);
	ЗаполнитьПредопределенныеШаблоныТЖ();
	
	Комментарий = "Заполнение предопределенных шаблонов счетчиков производительности оборудования.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 50, Комментарий);
	ЗаполнитьПредопределненныеШаблоныСчетчикиПроизводительности();
	
	Комментарий = "Заполнение счетчиков производительности предопределенных ролей оборудования";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 60, Комментарий);
	ЗаполнитьПредопределенныРолиРабочихСерверов(Истина);
	
	Комментарий = "Заполнение шаблонов оповещений контрольных процедур";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 65, Комментарий);
	ЗаполнитьШаблоныОповещенийКонтрольныхПроцедур();
	ЦентрМониторингаИмпортПовтИсп.ПолучитьПараметрыЗаписиПроизводительности("Импорт пакета центра мониторинга");
	
	Комментарий = "Заполнение параметров повторного оповещения";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 70, Комментарий);
	РегистрыСведений.УровниИнцидентовПовторноеОповещение.ЗаполнитьНастройкиПоУмолчанию();
    
    Комментарий = "Заполнение функциональной опции интерфейса";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 75, Комментарий);
	СпрПолныйИнтерфейс = Справочники.ИнтерфейсыКлиента.ПолныйИнтерфейс.ПолучитьОбъект();
    СпрПолныйИнтерфейс.ОтображатьВсеОбъекты = Истина;
    СпрПолныйИнтерфейс.Записать();
    
    Комментарий = "Создание настроек по умолчанию объектов контроля";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 80, Комментарий);
	Справочники.ОбъектыКонтроля.СоздатьНастройкиПоУмолчанию();
    
    Комментарий = "Создание настроек по умолчанию базовых контрольных процедур";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 90, Комментарий);
	Справочники.КонтрольныеПроцедуры.СоздатьНастройкиПоУмолчанию();
    
    СнятьПризнакПредопределенныхРолиОборудования();
    
	Комментарий = "Первоначальное заполнение данных завершено.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 100, Комментарий);
	
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	
	ОбработатьТипыЗадач();
	
	ОбновитьПредопределенноеРегламентноеЗадание(
			"ОповещениеОтветственных",
			"ОповещениеОтветственных",
			Константы.ПериодОповещенияВСекундах.Получить(),
			Константы.ВыполнятьОповещениеПоСМС.Получить() ИЛИ Константы.ВыполнятьОповещениеПоПочте.Получить()
			);
	
КонецПроцедуры

Процедура ПодготовитьОбновлениеИнформационнойБазы(Версия)
	ВерсияЧисло = ВерсияВЧислоДлина13(Версия);
	
	НаборЗаписей = РегистрыСведений.ВерсииИнформационнойБазы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗавершеноОбновление.Установить(Ложь);
	НаборЗаписей.Отбор.ВерсияЧисло.Установить(ВерсияЧисло);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей[0].ТекущееЗначение = 0;
		НаборЗаписей[0].Комментарий = "";
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьСтатусОбновленияИнформационнойБазы(Версия, ТекущееЗначение, Комментарий = Неопределено)
	ВерсияЧисло = ВерсияВЧислоДлина13(Версия);
	
	НаборЗаписей = РегистрыСведений.ВерсииИнформационнойБазы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗавершеноОбновление.Установить(Ложь);
	НаборЗаписей.Отбор.ВерсияЧисло.Установить(ВерсияЧисло);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей.Добавить();
		НаборЗаписей[0].ВерсияЧисло = ВерсияЧисло;
		НаборЗаписей[0].Версия = Версия;
		НаборЗаписей[0].ПроцедураОбновления = "ОбновлениеИнформационнойБазыПоУмолчанию";
		НаборЗаписей[0].ТекущееЗначение = 100;
		НаборЗаписей[0].МаксимальноеЗначение = 100;
	КонецЕсли;
	
	НаборЗаписей[0].ТекущееЗначение = ТекущееЗначение;
	Если Комментарий <> Неопределено Тогда
		НаборЗаписей[0].Комментарий =
			Строка(ТекущаяДата()) + Символы.ПС +
			Комментарий +Символы.ПС +Символы.ПС +
			НаборЗаписей[0].Комментарий;
	КонецЕсли;
	НаборЗаписей.Записать();
КонецПроцедуры

Функция УстановитьЗначенияКонстантПоУмолчанию()
    
    Комментарий = "";
	
	ТекущийПериодОповещения = Константы.ПериодОповещенияВСекундах.Получить();
	Если ТекущийПериодОповещения = 0 Тогда
		Константы.ПериодОповещенияВСекундах.Установить(60);
		Комментарий = Комментарий + "Константы.ПериодОповещенияВСекундах = 60" + Символы.ПС;
	КонецЕсли;
	
	ТекущийПериодСбораСтатистики = Константы.ПериодСбораСтатистики.Получить();
	Если ТекущийПериодСбораСтатистики = 0 Тогда
		Константы.ПериодСбораСтатистики.Установить(600);
		Комментарий = Комментарий + "Константы.ПериодСбораСтатистики = 600" + Символы.ПС;
	КонецЕсли;
	
	ТекущееЧислоПотоковОбработкиДампов = Константы.ЧислоПотоковОбработкиДампов.Получить();
	Если ТекущееЧислоПотоковОбработкиДампов = 0 Тогда
		Константы.ЧислоПотоковОбработкиДампов.Установить(1);
		Комментарий = Комментарий + "Константы.ЧислоПотоковОбработкиДампов = 1" + Символы.ПС;
	КонецЕсли;
	
	ТекущийКритическийСрокХраненияДампаМин = Константы.КритическийСрокХраненияДампаМин.Получить();
	Если ТекущийКритическийСрокХраненияДампаМин = 0 Тогда
		Константы.КритическийСрокХраненияДампаМин.Установить(60);
		Комментарий = Комментарий + "Константы.КритическийСрокХраненияДампаМин = 60" + Символы.ПС;
	КонецЕсли;
	
	ТаймаутУстановкиСоединенияСПубликациейСек = Константы.ТаймаутУстановкиСоединенияСПубликациейСек.Получить();
	Если ТаймаутУстановкиСоединенияСПубликациейСек = 0 Тогда
		Константы.ТаймаутУстановкиСоединенияСПубликациейСек.Установить(10);
		Комментарий = Комментарий + "Константы.ТаймаутУстановкиСоединенияСПубликациейСек = 10" + Символы.ПС;
	КонецЕсли;
	
	ВыполнятьПроверкуПубликаций = Константы.ВыполнятьПроверкуПубликаций.Получить();
	Если ВыполнятьПроверкуПубликаций = 0 Тогда
		Константы.ВыполнятьПроверкуПубликаций.Установить(Истина);
		Комментарий = Комментарий + "Константы.ВыполнятьПроверкуПубликаций = ИСТИНА" + Символы.ПС;
	КонецЕсли;
	
	ЧислоПотоковОбновленияИБ = Константы.ЧислоПотоковОбновленияИБ.Получить();
	Если ЧислоПотоковОбновленияИБ = 0 Тогда
		Константы.ЧислоПотоковОбновленияИБ.Установить(10);
		Комментарий = Комментарий + "Константы.ЧислоПотоковОбновленияИБ = 10" + Символы.ПС;
	КонецЕсли;
	
	МаксимальноеВремяОжиданияВыполненияRacWindows = Константы.МаксимальноеВремяОжиданияВыполненияRacWindows.Получить();
	Если МаксимальноеВремяОжиданияВыполненияRacWindows = 0 Тогда
		Константы.МаксимальноеВремяОжиданияВыполненияRacWindows.Установить(60);
		Комментарий = Комментарий + "Константы.МаксимальноеВремяОжиданияВыполненияRacWindows = 60" + Символы.ПС;
	КонецЕсли;
	
	Если Константы.КонтрольПодключенийДопустимаяНедоступность.Получить() = 0 Тогда
		Константы.КонтрольПодключенийДопустимаяНедоступность.Установить(60);
		Комментарий = Комментарий + "Константы.КонтрольПодключенийДопустимаяНедоступность = 60" + Символы.ПС;
	КонецЕсли;
	
	Константы.КонтрольПодключенийСоздаватьИнциденты.Установить(Истина);
	Комментарий = Комментарий + "Константы.КонтрольПодключенийСоздаватьИнциденты = ИСТИНА" + Символы.ПС;
		
	ЗаполнитьКонстанту_ПериодХраненияДанныхДней();
	
	Константы.СтрокаСоединенияИБ.Установить(СтрокаСоединенияИнформационнойБазы());
	
	КонтрольПодключенийДопустимоНетДанных = Константы.КонтрольПодключенийДопустимоНетДанных.Получить();
	Если КонтрольПодключенийДопустимоНетДанных < 10 Тогда
		Константы.КонтрольПодключенийДопустимоНетДанных.Установить(60);
		Комментарий = Комментарий + "Константы.КонтрольПодключенийДопустимоНетДанных = 60" + Символы.ПС;
	КонецЕсли;
	
	ПериодГруппировкиОповещений = Константы.ПериодГруппировкиОповещений.Получить();
	Если ПериодГруппировкиОповещений < 10 Тогда
		Константы.ПериодГруппировкиОповещений.Установить(300);
		Комментарий = Комментарий + "Константы.ПериодГруппировкиОповещений = 300" + Символы.ПС;
	КонецЕсли;
	
	Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий.Установить(5);
	Комментарий = Комментарий + "Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий = 5" + Символы.ПС;
	
	Константы.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания.Установить(180);
	Комментарий = Комментарий + "Константы.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания = 180" + Символы.ПС;
	
	Если НЕ ЗначениеЗаполнено(Константы.ЦентрМониторингаОтветСервиса.Получить()) Тогда
		Константы.ЦентрМониторингаОтветСервиса.Установить("{""deliveryIntervalHours"":24,""packetProperties"":[""ib"",""pn"",""versionPacket"",""datePacket"",""Конфигурация"",""ВерсияКонфигурации""],""settings"":""TopApdex=100;TopApdexTech=100;ПериодУдаления=86400""}");
    КонецЕсли;
    
    ПериодХраненияЖурналаКонтроля = Константы.ПериодХраненияЖурналаКонтроля.Получить();
    Если ПериодХраненияЖурналаКонтроля = 0 Тогда
        Константы.ПериодХраненияЖурналаКонтроля.Установить(30);
        Комментарий = Комментарий + "Константы.ПериодХраненияЖурналаКонтроля = 30" + Символы.ПС;
    КонецЕсли;
    
    ПериодХраненияОповещений = Константы.ПериодХраненияОповещений.Получить();
    Если ПериодХраненияОповещений = 0 Тогда
        Константы.ПериодХраненияОповещений.Установить(30);
        Комментарий = Комментарий + "Константы.ПериодХраненияОповещений = 30" + Символы.ПС;
    КонецЕсли;
    
    ПериодХраненияВнутреннихЗамеров = Константы.ПериодХраненияВнутреннихЗамеров.Получить();
    Если ПериодХраненияВнутреннихЗамеров = 0 Тогда
        Константы.ПериодХраненияВнутреннихЗамеров.Установить(30);
        Комментарий = Комментарий + "Константы.ПериодХраненияВнутреннихЗамеров = 30" + Символы.ПС;
    КонецЕсли;
    
    Если Константы.РазмерПулаПроверкиПубликаций.Получить() = 0 Тогда
        Константы.РазмерПулаПроверкиПубликаций.Установить(10);
        Комментарий = Комментарий + "Константы.РазмерПулаПроверкиПубликаций = 10" + Символы.ПС;
    КонецЕсли;
    
    Если Константы.ПериодОбновленияИнформацииОСистеме.Получить() = 0 Тогда
        Константы.ПериодОбновленияИнформацииОСистеме.Установить(86400);
        Комментарий = Комментарий + "Константы.ПериодОбновленияИнформацииОСистеме = 86 400" + Символы.ПС;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Константы.ПлощадкаЭксплуатацииПоУмолчанию.Получить()) Тогда
        Константы.ПлощадкаЭксплуатацииПоУмолчанию.Установить(Справочники.ПлощадкиЭксплуатации.Основная());
        Комментарий = Комментарий + "Константы.ПлощадкаЭксплуатацииПоУмолчанию = " + Константы.ПлощадкаЭксплуатацииПоУмолчанию.Получить() + Символы.ПС;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Константы.КоличествоДамповНовогоВарианта.Получить()) Тогда
        Константы.КоличествоДамповНовогоВарианта.Установить(1);
        Комментарий = Комментарий + "Константы.КоличествоДамповНовогоВарианта = " + Константы.КоличествоДамповНовогоВарианта.Получить() + Символы.ПС;
    КонецЕсли;
                        					
	Возврат Лев(Комментарий, СтрДлина(Комментарий) - 1);
    
КонецФункции

// Создает новые виды контрольных процедур и переименовывает уже существующие
//
Процедура СоздатьВидыКонтрольныхПроцедур(ТекущаяВерсия, СохраненнаяВерсия) 
	
	КартаНовыхИмен = КартаПереименованияМетаданныхБизнесПроцессов();
	КартаНовыхИменВидыПроцедур = КартаПереименованияВидыКонтрольныхПроцедур(ТекущаяВерсия, СохраненнаяВерсия);
	
	// внести изменения в названия бизнес процессов существующих  
	СохраненныеИменаБизнесПроцессов = Новый Структура;
	ВидыКонтрольныхПроцедур = Справочники.ВидыКонтрольныхПроцедур.Выбрать();
	Пока ВидыКонтрольныхПроцедур.Следующий() Цикл
		ВидПроцедуры = ВидыКонтрольныхПроцедур.ПолучитьОбъект();
		Если КартаНовыхИмен.Свойство(ВидПроцедуры.ИмяБизнесПроцесса) Тогда
			ВидПроцедуры.ИмяБизнесПроцесса = КартаНовыхИмен[ВидПроцедуры.ИмяБизнесПроцесса];
			ВидПроцедуры.Записать();
		КонецЕсли;
		СохраненныеИменаБизнесПроцессов.Вставить(ВидПроцедуры.ИмяБизнесПроцесса);
		
		НовоеИмя = КартаНовыхИменВидыПроцедур.Получить(ВидПроцедуры.Наименование);
		Если НовоеИмя <> Неопределено Тогда
			ВидПроцедуры.Наименование = НовоеИмя;
			ВидПроцедуры.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	КартаВидовОбъектовКонтроля = КартаИмяБизнесПроцессаВидОбъектаКонтроля();	
	НастройкиПоУмолчанию = НастройкиПоУмолчаниюДляВидовКонтрольныхПроцедур();
	РасписанияПоУмолчанию = РасписанияПоУмолчаниюДляВидовКонтрольныхПроцедур();
	
    ВсеБизнесПроцессы = Новый Массив;
    
    БизнесПроцессАнализВызововКластера1С = Новый Структура("Имя, Синоним", "АнализВызововКластера1С", "Анализ вызовов кластера 1С");
    ВсеБизнесПроцессы.Добавить(БизнесПроцессАнализВызововКластера1С);
    
    БизнесПроцессВнешнийКонтрольЦКК = Новый Структура("Имя, Синоним", "ВнешнийКонтрольЦКК", "Внешний контроль ЦКК");
    ВсеБизнесПроцессы.Добавить(БизнесПроцессВнешнийКонтрольЦКК);
    
    БизнесПроцессКонтрольНагрузочныхТестов = Новый Структура("Имя, Синоним", "КонтрольНагрузочныхТестов", "Контроль нагрузочных тестов");
    ВсеБизнесПроцессы.Добавить(БизнесПроцессКонтрольНагрузочныхТестов);
    
    БизнесПроцессКонтрольПамяти = Новый Структура("Имя, Синоним", "КонтрольПамяти", "Контроль потребления памяти");
    ВсеБизнесПроцессы.Добавить(БизнесПроцессКонтрольПамяти);
    
    БизнесПроцессКонтрольПодключений = Новый Структура("Имя, Синоним", "КонтрольПодключений", "Контроль подключений");
    ВсеБизнесПроцессы.Добавить(БизнесПроцессКонтрольПодключений);
    
    БизнесПроцессКонтрольПроизводительности = Новый Структура("Имя, Синоним", "КонтрольПроизводительности", "Контроль производительности");
    ВсеБизнесПроцессы.Добавить(БизнесПроцессКонтрольПроизводительности);
    
    БизнесПроцессКонтрольРегламентныхЗаданий = Новый Структура("Имя, Синоним", "КонтрольРегламентныхЗаданий", "Контроль выполнения регламентных заданий");
    ВсеБизнесПроцессы.Добавить(БизнесПроцессКонтрольРегламентныхЗаданий);
    
    БизнесПроцессКонтрольЧислаИсключений = Новый Структура("Имя, Синоним", "КонтрольЧислаИсключений", "Мониторинг системных ошибок");
    ВсеБизнесПроцессы.Добавить(БизнесПроцессКонтрольЧислаИсключений);
    
    БизнесПроцессОценкаПользователей = Новый Структура("Имя, Синоним", "ОценкаПользователей", "Оценка пользователей");
    ВсеБизнесПроцессы.Добавить(БизнесПроцессОценкаПользователей);
    
    БизнесПроцессСборДампов = Новый Структура("Имя, Синоним", "СборДампов", "Контроль устойчивости системы");
    ВсеБизнесПроцессы.Добавить(БизнесПроцессСборДампов);
    
	Для Каждого БизнесПроцесс Из ВсеБизнесПроцессы Цикл
		БизнесПроцессИмя = БизнесПроцесс.Имя;
			
		Если НЕ СохраненныеИменаБизнесПроцессов.Свойство(БизнесПроцессИмя) И КартаВидовОбъектовКонтроля.Свойство(БизнесПроцессИмя) Тогда
			НовыйВид = Справочники.ВидыКонтрольныхПроцедур.СоздатьЭлемент();
			НовыйВид.ИмяБизнесПроцесса = БизнесПроцессИмя;
			НовыйВид.Наименование = БизнесПроцесс.Синоним;
			НовыйВид.Владелец = КартаВидовОбъектовКонтроля[БизнесПроцессИмя];
			НовыйВид.Расписание = Новый ХранилищеЗначения(РасписанияПоУмолчанию[БизнесПроцессИмя], Новый СжатиеДанных(9));
			
			НовыйВид.Записать();
		КонецЕсли;
		
		НастройкиВида = НастройкиПоУмолчанию.Получить(БизнесПроцессИмя);
		Если НастройкиВида <> Неопределено Тогда
			
			МенеджерЗаписи = РегистрыСведений["Настройки" + БизнесПроцессИмя].СоздатьМенеджерЗаписи();
			Вид = Справочники.ВидыКонтрольныхПроцедур.НайтиПоРеквизиту("ИмяБизнесПроцесса", БизнесПроцессИмя);
			Если НЕ Вид.Пустая() Тогда
				МенеджерЗаписи.КонтрольнаяПроцедура = Вид;
				Для Каждого Настройка Из НастройкиВида Цикл
					МенеджерЗаписи[Настройка.Ключ] = Настройка.Значение;	
				КонецЦикла;	
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеШаблоныТЖ()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТехнологическиеЖурналыШаблоны.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТехнологическиеЖурналыШаблоны КАК ТехнологическиеЖурналыШаблоны
	|ГДЕ
	|	ТехнологическиеЖурналыШаблоны.Предопределенный = Истина
	|";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ШаблонОбъект.Шаблон = Справочники.ТехнологическиеЖурналыШаблоны.ПолучитьШаблонПредопределенного(Выборка.Ссылка);
		ШаблонОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьПредопределненныеШаблоныСчетчикиПроизводительности()
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетчикиПроизводительностиШаблоны.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СчетчикиПроизводительности КАК СчетчикиПроизводительностиШаблоны
	|ГДЕ
	|	СчетчикиПроизводительностиШаблоны.Предопределенный = Истина
	|";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ШаблонЭлемента = Справочники.СчетчикиПроизводительности.ПолучитьШаблонПредопределенного(Выборка.Ссылка);
		ШаблонОбъект.ЗагрузитьШаблон(ШаблонЭлемента);
		ШаблонОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьПредопределенныРолиРабочихСерверов(Очищать)
    
    Запрос = Новый Запрос;
    
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РолиОборудования.Ссылка
	|ИЗ
	|	Справочник.РолиОборудования КАК РолиОборудования
	|ГДЕ
	|	РолиОборудования.Предопределенный = ИСТИНА
	|";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ЗаполнитьПоШаблону(Очищать);
		СпрОбъект.Записать();
    КонецЦикла;
    
КонецПроцедуры

Процедура ЗаполнитьШаблоныОповещенийКонтрольныхПроцедур()
	ШаблоныМассив = Общий.ПолучитьШаблоныОповещенийКонтрольныхПроцедур();
	
	Для Каждого ТекШаблон Из ШаблоныМассив Цикл
		СпрОбъект = ТекШаблон.ПолучитьОбъект();
		Если ТекШаблон = Справочники.ТипыЗадач.ВосстановлениеРаботоспособоностиКонтрольнойПроцедуры.Ссылка Тогда
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ШаблонВосстановления) Тогда
				СпрОбъект.ШаблонВосстановления = Справочники.ТипыЗадач.ПолучитьШаблонВосстановления();
			КонецЕсли;
		ИначеЕсли ТекШаблон = Справочники.ТипыЗадачКонтрольПамяти.НедоступенКластер.Ссылка Тогда
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ДополнительныйТекстПредупреждения) Тогда
				СпрОбъект.ДополнительныйТекстПредупреждения = Справочники.ТипыЗадачКонтрольПамяти.ПолучитьОсновнойШаблонНедоступенКластер();
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ШаблонПервойРегистрации) Тогда
				СпрОбъект.ШаблонПервойРегистрации = Справочники.ТипыЗадачКонтрольПамяти.ПолучитьШаблонПервойРегистрацииНедоступенКластер();
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ШаблонПовторнойРегистрации) Тогда
				СпрОбъект.ШаблонПовторнойРегистрации = Справочники.ТипыЗадачКонтрольПамяти.ПолучитьШаблонПовторнойРегистрацииНедоступенКластер();
			КонецЕсли;
		ИначеЕсли ТекШаблон = Справочники.ТипыЗадачКонтрольПамяти.ПревышенПорогПотребленияПамяти.Ссылка Тогда
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ДополнительныйТекстПредупреждения) Тогда
				СпрОбъект.ДополнительныйТекстПредупреждения = Справочники.ТипыЗадачКонтрольПамяти.ПолучитьОсновнойШаблонПревышенПорогПотребленияПамяти();
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ШаблонПервойРегистрации) Тогда
				СпрОбъект.ШаблонПервойРегистрации = Справочники.ТипыЗадачКонтрольПамяти.ПолучитьШаблонПервойРегистрацииПревышенПорогПотребленияПамяти();
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ШаблонПовторнойРегистрации) Тогда
				СпрОбъект.ШаблонПовторнойРегистрации = Справочники.ТипыЗадачКонтрольПамяти.ПолучитьШаблонПовторнойРегистрацииПревышенПорогПотребленияПамяти();
			КонецЕсли;
		ИначеЕсли ТекШаблон = Справочники.ТипыЗадачСборДампов.СборДамповНовыйДампРассмотреть.Ссылка Тогда
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ДополнительныйТекстПредупреждения) Тогда
				СпрОбъект.ДополнительныйТекстПредупреждения = Справочники.ТипыЗадачСборДампов.ПолучитьОсновнойШаблонНовыйДампРассмотреть();
			КонецЕсли;
		ИначеЕсли ТекШаблон = Справочники.ТипыЗадачСборДампов.КаталогЛоговЗавершившегосяПроцессаПуст.Ссылка Тогда
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ДополнительныйТекстПредупреждения) Тогда
				СпрОбъект.ДополнительныйТекстПредупреждения = Справочники.ТипыЗадачСборДампов.ПолучитьОсновнойШаблонКаталогЛоговЗавершившегосяПроцессаПуст();
			КонецЕсли;
		ИначеЕсли ТекШаблон = Справочники.ТипыЗадачКонтрольПодключений.КонтрольПодключенийНевозможноПодключиться.Ссылка Тогда
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ДополнительныйТекстПредупреждения) Тогда
				СпрОбъект.ДополнительныйТекстПредупреждения = Справочники.ТипыЗадачКонтрольПодключений.ПолучитьОсновнойШаблонКонтрольПодключенийНевозможноПодключиться();
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ШаблонПервойРегистрации) Тогда
				СпрОбъект.ШаблонПервойРегистрации = Справочники.ТипыЗадачКонтрольПодключений.ПолучитьШаблонПервойРегистрацииКонтрольПодключенийНевозможноПодключиться();
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ШаблонПовторнойРегистрации) Тогда
				СпрОбъект.ШаблонПовторнойРегистрации = Справочники.ТипыЗадачКонтрольПодключений.ПолучитьШаблонПовторнойРегистрацииКонтрольПодключенийНевозможноПодключиться();
			КонецЕсли;
		ИначеЕсли ТекШаблон = Справочники.ТипыЗадачКонтрольПодключений.КонтрольПодключенийТаймаут.Ссылка Тогда
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ДополнительныйТекстПредупреждения) Тогда
				СпрОбъект.ДополнительныйТекстПредупреждения = Справочники.ТипыЗадачКонтрольПодключений.ПолучитьОсновнойШаблонКонтрольПодключенийТаймаут();
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ШаблонПервойРегистрации) Тогда
				СпрОбъект.ШаблонПервойРегистрации = Справочники.ТипыЗадачКонтрольПодключений.ПолучитьШаблонПервойРегистрацииКонтрольПодключенийТаймаут();
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СпрОбъект.ШаблонПовторнойРегистрации) Тогда
				СпрОбъект.ШаблонПовторнойРегистрации = Справочники.ТипыЗадачКонтрольПодключений.ПолучитьШаблонПовторнойРегистрацииКонтрольПодключенийТаймаут();
			КонецЕсли;
		КонецЕсли;
		СпрОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьОбновлениеИнформационнойБазы(Версия)
	
	ВерсияЧисло = ВерсияВЧислоДлина13(Версия);
	
	НаборЗаписейЧитать = РегистрыСведений.ВерсииИнформационнойБазы.СоздатьНаборЗаписей();
	НаборЗаписейЧитать.Отбор.ВерсияЧисло.Установить(ВерсияЧисло);
	НаборЗаписейЧитать.Прочитать();
	
	НаборЗаписей = РегистрыСведений.ВерсииИнформационнойБазы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВерсияЧисло.Установить(ВерсияЧисло);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ЗавершеноОбновление = Истина;
	Запись.ВерсияЧисло = ВерсияЧисло;
	Запись.ТекущееЗначение = 100;
	
	Если НаборЗаписейЧитать.Количество() > 0 Тогда
		Запись.Версия = НаборЗаписейЧитать[0].Версия;
		Запись.ПроцедураОбновления = НаборЗаписейЧитать[0].ПроцедураОбновления;
		Запись.СообщатьДлительность = НаборЗаписейЧитать[0].СообщатьДлительность;
		Запись.МаксимальноеЗначение = НаборЗаписейЧитать[0].МаксимальноеЗначение;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	Константы.Версия.Установить(Версия);
	
КонецПроцедуры

Процедура СоздатьНачальныйОбъектКонтроля(ВидОбъекта, Наименование, НастройкиПоУмолчанию = Неопределено)
	НачатьТранзакцию();
	
	ОбщийОбъект = Справочники.ОбъектыКонтроля.СоздатьЭлемент();
	ОбщийОбъект.Владелец = ВидОбъекта;
	ОбщийОбъект.Наименование = Наименование;
	ОбщийОбъект.НастройкаВыполнена = Ложь;
	ОбщийОбъект.Записать();	
	
	ТекстПоручения = НСтр("ru = 'Настроить объект контроля'") + " ";
	
	ПараметрыФормы = Новый Структура("Ключ", ОбщийОбъект.Ссылка);
	
	ИмяВидаОбъекта = Справочники.ВидыОбъектовКонтроля.ПолучитьИмяПредопределенного(
		ВидОбъекта
	);

	// Назначаем текущего пользователя, если он есть, в качестве ответственного за 
	// настройку начальных объектов контроля
	ТекущийПользователь = СловарьСервер.ТекущийПользователь();
	Если ТекущийПользователь <> Неопределено Тогда
		УправлениеЗадачами.НазначитьОтветственного(
			Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля,
			ОбщийОбъект.Ссылка,
			Справочники.ТипыИсполнителей.ОтветственныйЗаНастройкуОбъектовКонтроля
		);
	КонецЕсли;
	
	Если НастройкиПоУмолчанию <> Неопределено Тогда
		
		НазваниеРегистра = НастройкиКонстантыСервер.ВидОбъектаКонтроляВНазваниеРегистраНастроек()[ВидОбъекта];
		МенеджерЗаписи = РегистрыСведений[НазваниеРегистра].СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбъектКонтроля = ВидОбъекта;
		Для Каждого Настройка Из НастройкиПоУмолчанию Цикл
			МенеджерЗаписи[Настройка.Ключ] = Настройка.Значение;	
		КонецЦикла;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ЗаполнитьКонстанту_ПериодХраненияДанныхДней();	
	Константы.ПериодХраненияДанныхДней.Установить(60);	
КонецПроцедуры

Функция КартаПереименованияМетаданныхБизнесПроцессов()
	
	СтароеНовоеИмяПроцесса = Новый Структура;
	Возврат СтароеНовоеИмяПроцесса;
	
КонецФункции

Функция КартаПереименованияВидыКонтрольныхПроцедур(ТекущаяВерсия, СохраненнаяВерсия)
	
	СтароеНаименованиеПроцедуры = Новый Соответствие;
		
	Если СохраненнаяВерсия >= "2.0.8.11" И ТекущаяВерсия <= "2.0.8.17" Тогда
		СтароеНаименованиеПроцедуры.Вставить("Контроль числа исключений по технологическому журналу", "Мониторинг системных ошибок");
	КонецЕсли;
	
	Возврат	СтароеНаименованиеПроцедуры;
	
КонецФункции

Функция КартаИмяБизнесПроцессаВидОбъектаКонтроля()
	Карта = Новый Структура;
	
	Карта.Вставить("КонтрольПроизводительности", Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
	Карта.Вставить("КонтрольПодключений", Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
	Карта.Вставить("КонтрольРегламентныхЗаданий", Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
	Карта.Вставить("ОценкаПользователей", Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
	Карта.Вставить("КонтрольНагрузочныхТестов", Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
	
	Карта.Вставить("СборДампов", Справочники.ВидыОбъектовКонтроля.РабочийСервер);
	Карта.Вставить("КонтрольЧислаИсключений", Справочники.ВидыОбъектовКонтроля.РабочийСервер);
	Карта.Вставить("АнализВызововКластера1С", Справочники.ВидыОбъектовКонтроля.РабочийСервер);
	
	Карта.Вставить("ВнешнийКонтрольЦКК", Справочники.ВидыОбъектовКонтроля.ЦентрКонтроляКачества);
	
	Карта.Вставить("КонтрольПамяти", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
	
	Возврат Карта;
КонецФункции

Функция НастройкиПоУмолчаниюДляВидовОбъектовКонтроля()
	
	Карта = Новый Соответствие;
	
	Карта.Вставить(Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза, Новый Структура());
	Карта.Вставить(Справочники.ВидыОбъектовКонтроля.РабочийСервер, Новый Структура("КаталогНастроекТЖ",	"C:\Program Files\1cv82\conf\"));
	Карта.Вставить(Справочники.ВидыОбъектовКонтроля.КластерСерверов1С, Новый Структура("ПортКластера, ПортАгентаКластера", 1541, 1540));
	Карта.Вставить(Справочники.ВидыОбъектовКонтроля.ЦентрКонтроляКачества, Новый Структура());
	
	Возврат Карта;
	
КонецФункции

Функция НастройкиПоУмолчаниюДляВидовКонтрольныхПроцедур()
	
	Карта = Новый Соответствие;
	
	Карта.Вставить("КонтрольРегламентныхЗаданий", Новый Структура("ДопустимаяДлительностьВыполнения", 600));
	
	Возврат Карта;
	
КонецФункции

Функция РасписанияПоУмолчаниюДляВидовКонтрольныхПроцедур()
	
	Карта = Новый Структура;
	
	Карта.Вставить("КонтрольПроизводительности", СоздатьРасписание(600));
	Карта.Вставить("КонтрольПодключений", СоздатьРасписание(300));
	Карта.Вставить("СборДампов", СоздатьРасписание(900));
	Карта.Вставить("ВнешнийКонтрольЦКК", СоздатьРасписание(600));
	Карта.Вставить("КонтрольПамяти", СоздатьРасписание(60));
	Карта.Вставить("КонтрольРегламентныхЗаданий", СоздатьРасписание(1800));
	Карта.Вставить("КонтрольЧислаИсключений", СоздатьРасписание(600));
	Карта.Вставить("АнализВызововКластера1С", СоздатьРасписание(600));
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 7;
	Карта.Вставить("ОценкаПользователей", Расписание);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 7;
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(4);
	Расписание.ДниНедели = ДниНедели;
	Расписание.ВремяНачала = Дата("00010101020000");
	Расписание.ПериодПовтораВТечениеДня = 0;
	Карта.Вставить("КонтрольНагрузочныхТестов", Расписание);
	
	Возврат Карта;
	
КонецФункции

Функция СоздатьРасписание(ПериодВСекундах)
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораВТечениеДня = ПериодВСекундах;
	Расписание.ПериодПовтораДней = 1;
	Возврат Расписание;
КонецФункции

// Процедура устанавливает значения параметров для типов задач
//
// Возвращаемое значение:
// Структура
//
Процедура ОбработатьТипыЗадач() Экспорт
	
	ОбработатьТипЗадачи(Справочники.ТипыЗадачКонтрольПодключений.КонтрольПодключенийНевозможноПодключиться,,, 300);
	ОбработатьТипЗадачи(Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийНетСобытий,,, 300);
	ОбработатьТипЗадачи(Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийОшибка,,, 300);
	ОбработатьТипЗадачи(Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийТаймаут,,, 300);
	ОбработатьТипЗадачи(Справочники.ТипыЗадачКонтрольПамяти.ПревышенПорогПотребленияПамяти,,, 300);
	ОбработатьТипЗадачи(Справочники.ТипыЗадачВнешнийКонтрольЦКК.ВнешнийКонтрольЦККНеНайденыОтчеты, Ложь);
	ОбработатьТипЗадачи(Справочники.ТипыЗадачКонтрольПроизводительности.НетФайлов,, Ложь);
	
КонецПроцедуры

Процедура ОбработатьТипЗадачи(ТипСсылка, ПроверятьПриВыполнении = Истина, ОповещатьПриКаждомИнциденте = Истина, МинимальныйПериодОповещения = 0)
	
	ТипОбъект = ТипСсылка.ПолучитьОбъект();
	ТипОбъект.ПроверятьПриВыполнении = ПроверятьПриВыполнении;
	ТипОбъект.ОповещатьПриКаждомИнциденте = ОповещатьПриКаждомИнциденте;
	ТипОбъект.МинимальныйПериодОповещенияСек = МинимальныйПериодОповещения;
	ТипОбъект.Записать();
	
КонецПроцедуры

Функция ЕстьСторонниеСимволы(ИсходнаяСтрока) Экспорт
	
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
	Если СтрДлина(ИсходнаяСтрока) > 0 Тогда
		Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл
			Символ = Сред(ИсходнаяСтрока, Сч, 1);
			Если Найти("abcdefghijklmnopqrstuvwxyz0123456789", Символ) = 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции 

Процедура ВключитьФоновоеОбновлениеЦентраМониторинга(МассивОбработчиков) Экспорт
	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ФоновоеОбновлениеЦентраМониторинга);
    РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
    Если РегЗадания.Количество() = 0 Тогда
    	РегЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ФоновоеОбновлениеЦентраМониторинга);
    	РегЗадание.Ключ = "ФоновоеОбновлениеЦентраМониторинга";
    	РегЗадание.Наименование = "Фоновое обвновление центра мониторинга";
    	РегЗадание.Расписание = Новый РасписаниеРегламентногоЗадания;
		РегЗадание.Параметры.Добавить(МассивОбработчиков);
    	РегЗадание.Расписание.ПериодПовтораДней = 1;
    	РегЗадание.Расписание.ПериодПовтораВТечениеДня = 60;
    	РегЗадание.Использование = Истина;
    	РегЗадание.Записать();
    КонецЕсли;
КонецПроцедуры

Процедура ОбновитьЦентрМониторинга(МассивОбработчиков) Экспорт
	
	ВсегоВыполнено = 0;
	Для Каждого Обработчик Из МассивОбработчиков Цикл
		Если ФоновоеЗаданиеОбновленияЦентраМониторингаВыполнено(Обработчик) Тогда
			ВсегоВыполнено = ВсегоВыполнено + 1;	
		КонецЕсли;
	КонецЦикла;
	
	ВсеВыполнены = МассивОбработчиков.Количество() = ВсегоВыполнено;
	
	Если ВсеВыполнены Тогда
		//Отключить регл. задание
		Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ФоновоеОбновлениеЦентраМониторинга);
		РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
		Если РегЗадания.Количество() = 1 Тогда
			РегЗадание = РегЗадания[0];
			РегЗадание.Использование = Ложь;
			РегЗадание.Записать();
			РегЗадание.Удалить();
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Функция ФоновоеЗаданиеОбновленияЦентраМониторингаВыполнено(Обработчик)
	
	Ключ = "ОбновлениеИнформационнойБазы_" + Обработчик;
	Отбор = Новый Структура("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Завершено);
	ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФЗ.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФЗ.Количество() = 0 Тогда
		// Еще вообще ничего не запускали
		ФоновыеЗадания.Выполнить("Общий." + Обработчик, , Ключ, Ключ);
		Возврат Ложь;
	КонецЕсли;
	
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.ЗавершеноАварийно);
	ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФЗ.Количество() > 0 Тогда
		// Необходимо перезапустить
		ФоновыеЗадания.Выполнить("Общий." + Обработчик, , Ключ, Ключ);
		Возврат Ложь;
	КонецЕсли;
	
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Отменено);
	ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФЗ.Количество() > 0 Тогда
		// Необходимо перезапустить
		ФоновыеЗадания.Выполнить("Общий." + Обработчик, , Ключ, Ключ);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура ПодменитьВерсии_ИнформацияИсторияПодробно() Экспорт
	
	// Получим дни, когда есть данные
	ЗапросПериодЗаписи = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ИнформацияИсторияПодробно.ПериодЗаписи КАК ПериодЗаписи
	                      |ИЗ
	                      |	РегистрСведений.ИнформацияИсторияПодробно КАК ИнформацияИсторияПодробно
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииКонфигурации КАК ВерсииКонфигурации
	                      |		ПО ИнформацияИсторияПодробно.Конфигурация = ВерсииКонфигурации.Владелец
	                      |			И ИнформацияИсторияПодробно.ВерсияКонфигурации.Наименование = ВерсииКонфигурации.Наименование
	                      |ГДЕ
	                      |	ИнформацияИсторияПодробно.ВерсияКонфигурации.Владелец <> ИнформацияИсторияПодробно.Конфигурация
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ПериодЗаписи");
	ВыборкаПериоды = ЗапросПериодЗаписи.Выполнить().Выбрать();
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1000
	                      |	ИнформацияИсторияПодробно.ПериодЗаписи КАК ПериодЗаписи,
	                      |	ИнформацияИсторияПодробно.Конфигурация КАК Конфигурация,
	                      |	ИнформацияИсторияПодробно.ВерсияПлатформы КАК ВерсияПлатформы,
	                      |	ИнформацияИсторияПодробно.ИнформационнаяБаза КАК ИнформационнаяБаза,
	                      |	ИнформацияИсторияПодробно.КоличествоПользователей КАК КоличествоПользователей,
	                      |	ИнформацияИсторияПодробно.ВерсияОС КАК ВерсияОС,
	                      |	ИнформацияИсторияПодробно.ТипПлатформы КАК ТипПлатформы,
	                      |	ИнформацияИсторияПодробно.РежимРаботыКонфигурации КАК РежимРаботыКонфигурации,
	                      |	ВерсииКонфигурации.Ссылка КАК ВерсияКонфигурации
	                      |ИЗ
	                      |	РегистрСведений.ИнформацияИсторияПодробно КАК ИнформацияИсторияПодробно
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииКонфигурации КАК ВерсииКонфигурации
	                      |		ПО ИнформацияИсторияПодробно.Конфигурация = ВерсииКонфигурации.Владелец
	                      |			И ИнформацияИсторияПодробно.ВерсияКонфигурации.Наименование = ВерсииКонфигурации.Наименование
	                      |ГДЕ
						  | ИнформацияИсторияПодробно.ПериодЗаписи = &ПериодЗаписи
	                      |	И ИнформацияИсторияПодробно.ВерсияКонфигурации.Владелец <> ИнформацияИсторияПодробно.Конфигурация");
	
	Пока ВыборкаПериоды.Следующий() Цикл
		
		Запрос.УстановитьПараметр("ПериодЗаписи", ВыборкаПериоды.ПериодЗаписи);
		ЕстьДанныеДляОбработки = Истина;
		
		Пока ЕстьДанныеДляОбработки Цикл
			РезультатЗапроса = Запрос.Выполнить();
			ЕстьДанныеДляОбработки = НЕ РезультатЗапроса.Пустой();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ИнформацияИсторияПодробно.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПериодЗаписи.Установить(Выборка.ПериодЗаписи);
				НаборЗаписей.Отбор.Конфигурация.Установить(Выборка.Конфигурация);
				НаборЗаписей.Отбор.ВерсияПлатформы.Установить(Выборка.ВерсияПлатформы);
				НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(Выборка.ИнформационнаяБаза);
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодменитьВерсии_ИнформацияВерсииКонфигурации() Экспорт
	
	ЕстьДанныеДляОбработки = Истина;
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1000
	                      |	ИнформацияВерсииКонфигурации.ПериодЗаписи КАК ПериодЗаписи,
	                      |	ИнформацияВерсииКонфигурации.Конфигурация КАК Конфигурация,
	                      |	ВерсииКонфигурации.Ссылка КАК ВерсияКонфигурации,
	                      |	ИнформацияВерсииКонфигурации.КоличествоИнформационныхБаз КАК КоличествоИнформационныхБаз,
	                      |	ИнформацияВерсииКонфигурации.ВерсияКонфигурации КАК ВерсияКонфигурацииПрошлая
	                      |ИЗ
	                      |	РегистрСведений.ИнформацияВерсииКонфигурации КАК ИнформацияВерсииКонфигурации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииКонфигурации КАК ВерсииКонфигурации
	                      |		ПО ИнформацияВерсииКонфигурации.Конфигурация = ВерсииКонфигурации.Владелец
	                      |			И ИнформацияВерсииКонфигурации.ВерсияКонфигурации.Наименование = ВерсииКонфигурации.Наименование
	                      |ГДЕ
	                      |	ИнформацияВерсииКонфигурации.ВерсияКонфигурации.Владелец <> ИнформацияВерсииКонфигурации.Конфигурация");
	Пока ЕстьДанныеДляОбработки Цикл
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДанныеДляОбработки = НЕ РезультатЗапроса.Пустой();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Операция должна быть целостной
			НачатьТранзакцию();              			
			// Удаляем старые записи
			НаборЗаписей = РегистрыСведений.ИнформацияВерсииКонфигурации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПериодЗаписи.Установить(Выборка.ПериодЗаписи);
			НаборЗаписей.Отбор.Конфигурация.Установить(Выборка.Конфигурация);
			НаборЗаписей.Отбор.ВерсияКонфигурации.Установить(Выборка.ВерсияКонфигурацииПрошлая);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			// Пишем новые
			НаборЗаписей = РегистрыСведений.ИнформацияВерсииКонфигурации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПериодЗаписи.Установить(Выборка.ПериодЗаписи);
			НаборЗаписей.Отбор.Конфигурация.Установить(Выборка.Конфигурация);
			НаборЗаписей.Отбор.ВерсияКонфигурации.Установить(Выборка.ВерсияКонфигурации);
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			ЗафиксироватьТранзакцию();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодменитьВерсии_ИнформацияИстория() Экспорт
	
	ЕстьДанныеДляОбработки = Истина;
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1000
	                      |	ВерсииКонфигурации.Ссылка КАК ВерсияКонфигурации,
	                      |	ИнформацияИстория.Период КАК Период,
	                      |	ИнформацияИстория.Конфигурация КАК Конфигурация,
	                      |	ИнформацияИстория.ВерсияПлатформы КАК ВерсияПлатформы,
	                      |	ИнформацияИстория.ВерсияОС КАК ВерсияОС,
	                      |	ИнформацияИстория.ТипПроцессора КАК ТипПроцессора,
	                      |	ИнформацияИстория.ТипПлатформы КАК ТипПлатформы,
	                      |	ИнформацияИстория.ЧасовойПоясСеанса КАК ЧасовойПоясСеанса,
	                      |	ИнформацияИстория.ОперативнаяПамять КАК ОперативнаяПамять,
	                      |	ИнформацияИстория.ИнформационнаяБаза КАК ИнформационнаяБаза,
	                      |	ИнформацияИстория.ИмяКомпьютера КАК ИмяКомпьютера,
	                      |	ИнформацияИстория.ИдентификаторКлиента КАК ИдентификаторКлиента,
	                      |	ИнформацияИстория.ТекущийЯзык КАК ТекущийЯзык,
	                      |	ИнформацияИстория.ТекущийКодЛокализации КАК ТекущийКодЛокализации,
	                      |	ИнформацияИстория.ТекущийЯзыкСистемы КАК ТекущийЯзыкСистемы,
	                      |	ИнформацияИстория.ТекущийРежимЗапуска КАК ТекущийРежимЗапуска
	                      |ИЗ
	                      |	РегистрСведений.ИнформацияИстория КАК ИнформацияИстория
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииКонфигурации КАК ВерсииКонфигурации
	                      |		ПО ИнформацияИстория.Конфигурация = ВерсииКонфигурации.Владелец
	                      |			И ИнформацияИстория.ВерсияКонфигурации.Наименование = ВерсииКонфигурации.Наименование
	                      |ГДЕ
	                      |	ИнформацияИстория.ВерсияКонфигурации.Владелец <> ИнформацияИстория.Конфигурация");
	Пока ЕстьДанныеДляОбработки Цикл
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДанныеДляОбработки = НЕ РезультатЗапроса.Пустой();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ИнформацияИстория.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Отбор.Конфигурация.Установить(Выборка.Конфигурация);
			НаборЗаписей.Отбор.ВерсияПлатформы.Установить(Выборка.ВерсияПлатформы);
			НаборЗаписей.Отбор.ВерсияОС.Установить(Выборка.ВерсияОС);
			НаборЗаписей.Отбор.ТипПроцессора.Установить(Выборка.ТипПроцессора);
			НаборЗаписей.Отбор.ТипПлатформы.Установить(Выборка.ТипПлатформы);
			НаборЗаписей.Отбор.ЧасовойПоясСеанса.Установить(Выборка.ЧасовойПоясСеанса);
			НаборЗаписей.Отбор.ОперативнаяПамять.Установить(Выборка.ОперативнаяПамять);
			НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(Выборка.ИнформационнаяБаза);
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодменитьВерсии_ИнформацияСрезПоследних() Экспорт
	
	ЕстьДанныеДляОбработки = Истина;
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1000
	                      |	ВерсииКонфигурации.Ссылка КАК ВерсияКонфигурации,
	                      |	ИнформацияСрезПоследних.Конфигурация КАК Конфигурация,
	                      |	ИнформацияСрезПоследних.ВерсияПлатформы КАК ВерсияПлатформы,
	                      |	ИнформацияСрезПоследних.ВерсияОС КАК ВерсияОС,
	                      |	ИнформацияСрезПоследних.ТипПроцессора КАК ТипПроцессора,
	                      |	ИнформацияСрезПоследних.ТипПлатформы КАК ТипПлатформы,
	                      |	ИнформацияСрезПоследних.ЧасовойПоясСеанса КАК ЧасовойПоясСеанса,
	                      |	ИнформацияСрезПоследних.ОперативнаяПамять КАК ОперативнаяПамять,
	                      |	ИнформацияСрезПоследних.ИнформационнаяБаза КАК ИнформационнаяБаза,
	                      |	ИнформацияСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
	                      |	ИнформацияСрезПоследних.ИдентификаторКлиента КАК ИдентификаторКлиента,
	                      |	ИнформацияСрезПоследних.ТекущийЯзык КАК ТекущийЯзык,
	                      |	ИнформацияСрезПоследних.ТекущийКодЛокализации КАК ТекущийКодЛокализации,
	                      |	ИнформацияСрезПоследних.ТекущийЯзыкСистемы КАК ТекущийЯзыкСистемы,
	                      |	ИнформацияСрезПоследних.ТекущийРежимЗапуска КАК ТекущийРежимЗапуска
	                      |ИЗ
	                      |	РегистрСведений.ИнформацияСрезПоследних КАК ИнформацияСрезПоследних
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииКонфигурации КАК ВерсииКонфигурации
	                      |		ПО ИнформацияСрезПоследних.Конфигурация = ВерсииКонфигурации.Владелец
	                      |			И ИнформацияСрезПоследних.ВерсияКонфигурации.Наименование = ВерсииКонфигурации.Наименование
	                      |ГДЕ
	                      |	ИнформацияСрезПоследних.ВерсияКонфигурации.Владелец <> ИнформацияСрезПоследних.Конфигурация");
	Пока ЕстьДанныеДляОбработки Цикл
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДанныеДляОбработки = НЕ РезультатЗапроса.Пустой();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ИнформацияСрезПоследних.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Конфигурация.Установить(Выборка.Конфигурация);
			НаборЗаписей.Отбор.ВерсияПлатформы.Установить(Выборка.ВерсияПлатформы);
			НаборЗаписей.Отбор.ВерсияОС.Установить(Выборка.ВерсияОС);
			НаборЗаписей.Отбор.ТипПроцессора.Установить(Выборка.ТипПроцессора);
			НаборЗаписей.Отбор.ТипПлатформы.Установить(Выборка.ТипПлатформы);
			НаборЗаписей.Отбор.ЧасовойПоясСеанса.Установить(Выборка.ЧасовойПоясСеанса);
			НаборЗаписей.Отбор.ОперативнаяПамять.Установить(Выборка.ОперативнаяПамять);
			НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(Выборка.ИнформационнаяБаза);
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать();
		КонецЦикла;
		
	КонецЦикла;

	
КонецПроцедуры

Процедура ПодменитьВерсии_СтатистикаЗаполненияИнформационныхБаз() Экспорт
	
	ЕстьДанныеДляОбработки = Истина;
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1000
	                      |	ВерсииКонфигурации.Ссылка КАК ВерсияКонфигурации,
	                      |	СтатистикаЗаполненияИнформационныхБаз.Конфигурация КАК Конфигурация,
	                      |	СтатистикаЗаполненияИнформационныхБаз.ОбъектМетаданных КАК ОбъектМетаданных,
	                      |	СтатистикаЗаполненияИнформационныхБаз.ВсегоЗаписей КАК ВсегоЗаписей,
	                      |	СтатистикаЗаполненияИнформационныхБаз.СреднееКоличествоЗаписей КАК СреднееКоличествоЗаписей,
	                      |	СтатистикаЗаполненияИнформационныхБаз.КоличествоИБ КАК КоличествоИБ,
	                      |	СтатистикаЗаполненияИнформационныхБаз.МинимумЗаписей КАК МинимумЗаписей,
	                      |	СтатистикаЗаполненияИнформационныхБаз.МаксимумЗаписей КАК МаксимумЗаписей,
	                      |	СтатистикаЗаполненияИнформационныхБаз.Медиана КАК Медиана,
	                      |	СтатистикаЗаполненияИнформационныхБаз.СреднееКоличествоПользователей КАК СреднееКоличествоПользователей,
	                      |	СтатистикаЗаполненияИнформационныхБаз.ВерсияКонфигурации КАК ВерсияКонфигурацииПрошлая
	                      |ИЗ
	                      |	РегистрСведений.СтатистикаЗаполненияИнформационныхБаз КАК СтатистикаЗаполненияИнформационныхБаз
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииКонфигурации КАК ВерсииКонфигурации
	                      |		ПО СтатистикаЗаполненияИнформационныхБаз.Конфигурация = ВерсииКонфигурации.Владелец
	                      |			И СтатистикаЗаполненияИнформационныхБаз.ВерсияКонфигурации.Наименование = ВерсииКонфигурации.Наименование
	                      |ГДЕ
	                      |	СтатистикаЗаполненияИнформационныхБаз.ВерсияКонфигурации.Владелец <> СтатистикаЗаполненияИнформационныхБаз.Конфигурация");
	Пока ЕстьДанныеДляОбработки Цикл
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДанныеДляОбработки = НЕ РезультатЗапроса.Пустой();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Операция должна быть целостной
			НачатьТранзакцию();              			
			// Удаляем старые записи
			НаборЗаписей = РегистрыСведений.СтатистикаЗаполненияИнформационныхБаз.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Конфигурация.Установить(Выборка.Конфигурация);
			НаборЗаписей.Отбор.ОбъектМетаданных.Установить(Выборка.ОбъектМетаданных);
			НаборЗаписей.Отбор.ВерсияКонфигурации.Установить(Выборка.ВерсияКонфигурацииПрошлая);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			// Пишем новые
			НаборЗаписей = РегистрыСведений.СтатистикаЗаполненияИнформационныхБаз.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Конфигурация.Установить(Выборка.Конфигурация);
			НаборЗаписей.Отбор.ОбъектМетаданных.Установить(Выборка.ОбъектМетаданных);
			НаборЗаписей.Отбор.ВерсияКонфигурации.Установить(Выборка.ВерсияКонфигурации);
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			ЗафиксироватьТранзакцию();
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура КонвертироватьИспользованиеОперативнойПамятиПроцессамиКластера_2_1_3_3()
    
    ЗапросПоВсем = Новый Запрос;
    ЗапросПоВсем.Текст = "
    |ВЫБРАТЬ
    |   ПараметрыКластеров.ОбъектКонтроля КАК Кластер,
    |   ПараметрыРабочихСерверов.ОбъектКонтроля КАК РабочийСервер
    |ИЗ
    |   РегистрСведений.ПараметрыКластеров КАК ПараметрыКластеров
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
    |ПО
    |   ПараметрыРабочихСерверов.Кластер = ПараметрыКластеров.ОбъектКонтроля
    |";
    
    РезультатПоВсем = ЗапросПоВсем.Выполнить();
    
    ВыборкаСправочник = Справочники.ИспользованиеОперативнойПамятиПроцессамиКластера.Выбрать();
    Пока ВыборкаСправочник.Следующий() Цикл
        
        СпрОбъект = ВыборкаСправочник.ПолучитьОбъект();
        Если СпрОбъект.ВсеКластеры Тогда
                       
            Выборка = РезультатПоВсем.Выбрать();
            Пока Выборка.Следующий() Цикл
                НовСтрока = СпрОбъект.НастройкиПоказателя.Добавить();
                НовСтрока.Кластер = Выборка.Кластер;
                НовСтрока.РабочийСервер = Выборка.РабочийСервер;    
            КонецЦикла;
                        
        Иначе
            
            Если СпрОбъект.ВсеСерверы Тогда
                
                Запрос = Новый Запрос;
                Запрос.Текст = "
                |ВЫБРАТЬ
                |   ОбъектКонтроля КАК РабочийСервер
                |ИЗ
                |   РегистрСведений.ПараметрыРабочихСерверов
                |ГДЕ
                |   Кластер = &Кластер
                |";
                
                Запрос.УстановитьПараметр("Кластер", СпрОбъект.Кластер);
                Результат = Запрос.Выполнить();
                Выборка = Результат.Выбрать();
                Пока Выборка.Следующий() Цикл
                    НовСтрока = СпрОбъект.НастройкиПоказателя.Добавить();
                    НовСтрока.Кластер = СпрОбъект.Кластер;
                    НовСтрока.РабочийСервер = Выборка.РабочийСервер;
                КонецЦикла;
                                
            Иначе
                
                НовСтрока = СпрОбъект.НастройкиПоказателя.Добавить();
                НовСтрока.Кластер = СпрОбъект.Кластер;
                НовСтрока.РабочийСервер = СпрОбъект.Сервер;
                
            КонецЕсли;
            
        КонецЕсли;
        
        СпрОбъект.ОбменДанными.Загрузка = Истина;
        СпрОбъект.Записать();
        
    КонецЦикла;
        
КонецПроцедуры

Процедура КонвертироватьСкоростьВыполненияКлючевыхОпераций_2_1_3_3()
    
    ВыборкаСправочник = Справочники.ПоказателиСкоростиВыполненияТипичныхОпераций.Выбрать();
    Пока ВыборкаСправочник.Следующий() Цикл
        
        СпрОбъект = ВыборкаСправочник.ПолучитьОбъект();
        
        НовИнформационнаяБаза = СпрОбъект.ИнформационныеБазы.Добавить();
        НовИнформационнаяБаза.ИнформационнаяБаза = СпрОбъект.ИнформационнаяБаза;
        
        НовКлючеваяОперация = СпрОбъект.КлючевыеОперации.Добавить();
        НовКлючеваяОперация.Наименование = РегистрыСведений.ОценкаПроизводительностиКлючевыеОперации.Имя(СпрОбъект.ИдентификаторКлючевойОперации); 
        
        Если СпрОбъект.ТипСпискаПользователей = Перечисления.ТипыСпискаПользователей.ТолькоУказанные Тогда
            Для Каждого ТекПользователь Из СпрОбъект.Пользователи Цикл
                НовПользователь = СпрОбъект.ПользователиСсылка.Добавить();
                НовПользователь.Пользователь = Справочники.ПользователиЗамерПроизводительности.ПолучитьСсылкуПоНаименованию(ТекПользователь.ИмяПользователя);
            КонецЦикла;
        ИначеЕсли СпрОбъект.ТипСпискаПользователей = Перечисления.ТипыСпискаПользователей.ВсеКроме Тогда
            
            ПользователиНеВСписке = Новый Массив;
            Для Каждого ТекПользователь Из СпрОбъект.Пользователи Цикл
                НовПользователь = СпрОбъект.ПользователиСсылка.Добавить();
                ПользователиНеВСписке.Добавить(Справочники.ПользователиЗамерПроизводительности.ПолучитьСсылкуПоНаименованию(ТекПользователь.ИмяПользователя));
            КонецЦикла;
            
            Запрос = Новый Запрос;
            Запрос.Текст = "
            |ВЫБРАТЬ
            |   Ссылка
            |ИЗ
            |   Справочник.ПользователиЗамерПроизводительности
            |ГДЕ
            |   НЕ Ссылка В (&ПользователиНеВСписке)
            |";
            
            Запрос.УстановитьПараметр("ПользователиНеВСписке", ПользователиНеВСписке);
            
            Результат = Запрос.Выполнить();
            Выборка = Результат.Выбрать();
            Пока Выборка.Следующий() Цикл
                НовПользователь = СпрОбъект.ПользователиСсылка.Добавить();
                НовПользователь.Пользователь = Выборка.Ссылка;
            КонецЦикла;
            
        КонецЕсли;
        
        СпрОбъект.ОбменДанными.Загрузка = Истина;
        СпрОбъект.Записать();
                
    КонецЦикла;
    
КонецПроцедуры

Процедура КонвертироватьЧислоExcpПоТехнологическомуЖурналу_2_1_3_3()
    
    ЗапросПоВсем = Новый Запрос;
    ЗапросПоВсем.Текст = "
    |ВЫБРАТЬ
    |   ПараметрыКластеров.ОбъектКонтроля КАК Кластер,
    |   ПараметрыРабочихСерверов.ОбъектКонтроля КАК РабочийСервер
    |ИЗ
    |   РегистрСведений.ПараметрыКластеров КАК ПараметрыКластеров
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
    |ПО
    |   ПараметрыРабочихСерверов.Кластер = ПараметрыКластеров.ОбъектКонтроля
    |";
    
    РезультатПоВсем = ЗапросПоВсем.Выполнить();
    
    ВыборкаСправочник = Справочники.ЧислоИсключенийПоТехнологическомуЖурналу.Выбрать();
    Пока ВыборкаСправочник.Следующий() Цикл
        
        СпрОбъект = ВыборкаСправочник.ПолучитьОбъект();
        Если СпрОбъект.ВсеКластеры Тогда
                       
            Выборка = РезультатПоВсем.Выбрать();
            Пока Выборка.Следующий() Цикл
                НовСтрока = СпрОбъект.НастройкиПоказателя.Добавить();
                НовСтрока.Кластер = Выборка.Кластер;
                НовСтрока.РабочийСервер = Выборка.РабочийСервер;    
            КонецЦикла;
                        
        Иначе
            
            Если СпрОбъект.ВсеСерверы Тогда
                
                Запрос = Новый Запрос;
                Запрос.Текст = "
                |ВЫБРАТЬ
                |   ОбъектКонтроля КАК РабочийСервер
                |ИЗ
                |   РегистрСведений.ПараметрыРабочихСерверов
                |ГДЕ
                |   Кластер = &Кластер
                |";
                
                Запрос.УстановитьПараметр("Кластер", СпрОбъект.Кластер);
                Результат = Запрос.Выполнить();
                Выборка = Результат.Выбрать();
                Пока Выборка.Следующий() Цикл
                    НовСтрока = СпрОбъект.НастройкиПоказателя.Добавить();
                    НовСтрока.Кластер = СпрОбъект.Кластер;
                    НовСтрока.РабочийСервер = Выборка.РабочийСервер;
                КонецЦикла;
                                
            Иначе
                
                НовСтрока = СпрОбъект.НастройкиПоказателя.Добавить();
                НовСтрока.Кластер = СпрОбъект.Кластер;
                НовСтрока.РабочийСервер = СпрОбъект.Сервер;
                
            КонецЕсли;
            
        КонецЕсли;
        
        СпрОбъект.ОбменДанными.Загрузка = Истина;
        СпрОбъект.Записать();
        
    КонецЦикла;
        
КонецПроцедуры

Процедура ОбновитьОборудование_2_1_3_4()
    
    Выборка = Справочники.Оборудование.Выбрать();
    Пока Выборка.Следующий() Цикл
        СпрОбъект = Выборка.ПолучитьОбъект();
        Если СпрОбъект.СобиратьДанныеПроизводительности <> 2 Тогда
            СпрОбъект.ФормироватьСчетчикПоНаименованию = Истина;
            СпрОбъект.ОбменДанными.Загрузка = Истина;
            СпрОбъект.Записать();
        КонецЕсли;
    КонецЦикла;
        
КонецПроцедуры

Процедура ОбновитьАгентыЦККДополнительныеРеквизиты_2_1_3_5()
    
    Выборка = Справочники.АгентыКИП.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        АгентыЦККДополнительныеРеквизитыОбъект = Справочники.АгентыКИПДополнительныеРеквизиты.ПолучитьСсылкуПоВладельцу(Выборка.Ссылка, Истина);
        
        АгентыЦККДополнительныеРеквизитыОбъект.Владелец = Выборка.Ссылка;
        АгентыЦККДополнительныеРеквизитыОбъект.ИнформационныеБазыХеш = Выборка.УдалитьИнформационныеБазыХеш;
        АгентыЦККДополнительныеРеквизитыОбъект.КонтрольДоступностиИнформационныхБаз = Выборка.УдалитьКонтрольДоступностиИнформационныхБаз;
        АгентыЦККДополнительныеРеквизитыОбъект.ПериодКонтроляИнформационнойБазы = Выборка.УдалитьПериодКонтроляИнформационнойБазы;
        АгентыЦККДополнительныеРеквизитыОбъект.МинимальныйПроцентДоступностиИнформационнойБазы = Выборка.УдалитьМинимальныйПроцентДоступностиИнформационнойБазы;
        АгентыЦККДополнительныеРеквизитыОбъект.РазмерБуфераСчетчиковПроизводительности = Выборка.УдалитьРазмерБуфераСчетчиковПроизводительности;
        
        АгентыЦККДополнительныеРеквизитыОбъект.ИнформационныеБазы.Загрузить(Выборка.ИнформационныеБазы.Выгрузить());
        
        АгентыЦККДополнительныеРеквизитыОбъект.Записать();
        
    КонецЦикла;
    
КонецПроцедуры

Процедура КонвертацияНастройкиКонтрольПамяти_2_1_3_5()
    
    НаборЗаписей = РегистрыСведений.НастройкиКонтрольПамяти.СоздатьНаборЗаписей();
    НаборЗаписей.Прочитать();
    
    Для Каждого Запись Из НаборЗаписей Цикл
        Запись.Мониторинг = 2;
    КонецЦикла;
    
    НаборЗаписей.Записать(Истина);
        
КонецПроцедуры

Процедура УдалитьРегламентныеЗаданияКонтрольПотребленияПамяти_2_1_3_5()
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   КлючРегламентногоЗадания
    |ИЗ
    |   Справочник.КонтрольныеПроцедуры
    |ГДЕ
    |   Владелец = &КонтрольПотребленияПамяти
    |   И ВЫРАЗИТЬ(КлючРегламентногоЗадания КАК СТРОКА(500)) <> &ПустаяСтрока
    |";
    
    Запрос.УстановитьПараметр("КонтрольПотребленияПамяти", Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти());
    Запрос.УстановитьПараметр("ПустаяСтрока", "");
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        УправлениеЗаданиямиСервер.УдалитьРегламентныеЗадания("Ключ", Выборка.КлючРегламентногоЗадания);
    КонецЦикла;
        
КонецПроцедуры

Процедура КонвертацияОбъектыКонтроля_2_1_3_5()
    
    КонвертацияКластеры_2_1_3_5();
    
КонецПроцедуры

Процедура КонвертацияКластеры_2_1_3_5()
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.ОбъектыКонтроля
    |ГДЕ
    |   Владелец = &Кластер
    |   И НЕ ПлощадкаЭксплуатации = ЗНАЧЕНИЕ(Справочник.ПлощадкиЭксплуатации.ПустаяСсылка)
    |";
    
    Запрос.УстановитьПараметр("Кластер", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        КонвертацияКластер_2_1_3_5(Выборка.Ссылка);
    КонецЦикла;
        
КонецПроцедуры

Процедура КонвертацияКластер_2_1_3_5(Кластер1С)
    
    КластерОбъект = Кластер1С.ПолучитьОбъект();
    
    
    НастройкиКластера = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Кластер1С);
    
    Если НастройкиКластера.ТипПодключения = "RAS" Тогда
        
        КонтрольПотребленияПамяти = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(Кластер1С, Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти());
        НастройкиКластера.Мониторинг = КонтрольПотребленияПамяти.Выполнять И НЕ КонтрольПотребленияПамяти.Пауза;
        
        ПараметрыПодключения = Новый Структура;
        ПараметрыПодключения.Вставить("ТипПодключения", Перечисления.ТипПодключенияКластер1С.RAS);
        ПараметрыПодключения.Вставить("АдресСервераАдминистрирования", НастройкиКластера.АдресСервераАдминистрирования);
        ПараметрыПодключения.Вставить("ПортСервераАдминистрирования", НастройкиКластера.ПортСервераАдминистрирования);
        Подключение = Справочники.ПараметрыПодключенияКластер1С.НайтиПодключение(ПараметрыПодключения);
        
        Если Подключение = Справочники.ПараметрыПодключенияКластер1С.ПустаяСсылка() Тогда
            Подключение = Справочники.ПараметрыПодключенияКластер1С.СоздатьПодключение(ПараметрыПодключения);
        КонецЕсли;
        
        КластерОбъект.Подключение = Подключение;
        КластерОбъект.Записать();
                
    ИначеЕсли НастройкиКластера.ТипПодключения = "COM" Тогда
        
        ПараметрыПодключения = Новый Структура;
        ПараметрыПодключения.Вставить("ТипПодключения", Перечисления.ТипПодключенияКластер1С.COM);
        ПараметрыПодключения.Вставить("АдресКластера", НастройкиКластера.АдресКластера);
        ПараметрыПодключения.Вставить("ПортАгентаКластера", НастройкиКластера.ПортАгентаКластера);
        ПараметрыПодключения.Вставить("ПортКластера", НастройкиКластера.ПортКластера);
        Подключение = Справочники.ПараметрыПодключенияКластер1С.НайтиПодключение(ПараметрыПодключения);
        
        Если Подключение = Справочники.ПараметрыПодключенияКластер1С.ПустаяСсылка() Тогда
            Подключение = Справочники.ПараметрыПодключенияКластер1С.СоздатьПодключение(ПараметрыПодключения);
        КонецЕсли;
        
        КластерОбъект.Подключение = Подключение;
        НастройкиКластера.Мониторинг = Ложь;
        КластерОбъект.Записать();
        
    КонецЕсли;
    
    РегистрыСведений.ПараметрыКластеров.ЗаписатьНастройки(Кластер1С, НастройкиКластера);
        
КонецПроцедуры

Процедура КонтрольПотребленияПамяти_2_1_3_5()
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.КонтрольныеПроцедуры
    |ГДЕ
    |   Владелец = &КонтрольПотребленияПамяти
    |   И Наименование ПОДОБНО &Наименование
    |   И НЕ ОбъектКонтроля.ПлощадкаЭксплуатации = ЗНАЧЕНИЕ(Справочник.ПлощадкиЭксплуатации.ПустаяСсылка)
    |";
    
    Запрос.УстановитьПараметр("КонтрольПотребленияПамяти", Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти());
    Запрос.УстановитьПараметр("Наименование", "%Контроль потребления памяти для%");
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        
        СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
        СпрОбъект.Наименование = СтрЗаменить(СпрОбъект.Наименование, "Контроль потребления памяти для", "Мониторинг кластера");
        СпрОбъект.Записать();
        
    КонецЦикла;
    
КонецПроцедуры

Процедура КонвертацияСправочникОтправкаСообщений_2_1_3_5() Экспорт
    
    РегЗаданиеМетаданные = Метаданные.РегламентныеЗадания.КонвертацияСправочникОтправкаСообщений_2_1_3_5;
    
    // Создаем регламентное задание
    Отбор = Новый Структура("Метаданные", РегЗаданиеМетаданные);
    РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
    Если РегЗадания.Количество() = 0 Тогда
    	РегЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(РегЗаданиеМетаданные);
    	РегЗадание.Ключ = Новый УникальныйИдентификатор("c08426b2-3f71-4f11-ba09-f1d4d2a4dcb6");
    	РегЗадание.Наименование = "Конвертация справочника ""Отправка сообщений"".";
    	РегЗадание.Расписание = Новый РасписаниеРегламентногоЗадания;
    	РегЗадание.Расписание.ПериодПовтораДней = 1;
    	РегЗадание.Расписание.ПериодПовтораВТечениеДня = 60;
    	РегЗадание.Использование = Истина;
    	РегЗадание.Записать();
    КонецЕсли;    
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 100
    |   Ссылка
    |ИЗ
    |   Справочник.УдалитьОтправкаСообщений
    |УПОРЯДОЧИТЬ ПО
    |   ДатаОтправки УБЫВ
    |";
    
    Выполнять = Истина;
    
    // Основной цикл конвертации данных
    Пока Выполнять Цикл
        
        Результат = Запрос.Выполнить();
        
        Выполнять = НЕ Результат.Пустой();
        
        Если Выполнять Тогда
            
            Выборка = Результат.Выбрать();
            
            НачатьТранзакцию();
            
            Попытка
                
                Пока Выборка.Следующий() Цикл
                    
                    УдалитьЭлемент = Выборка.Ссылка.ПолучитьОбъект();
                    НовыйЭлемент = Справочники.ОтправкаСообщений.СоздатьЭлемент();
                    
                    НовыйЭлемент.Тема = УдалитьЭлемент.Тема;
                    НовыйЭлемент.Текст = УдалитьЭлемент.Текст;
                    НовыйЭлемент.Адресат = УдалитьЭлемент.Адресат;
                    НовыйЭлемент.Отправлено = УдалитьЭлемент.Отправлено;
                    НовыйЭлемент.ПоПочте = УдалитьЭлемент.ПоПочте;
                    НовыйЭлемент.ПоSMS = УдалитьЭлемент.ПоSMS;
                    НовыйЭлемент.ДатаОтправки = УдалитьЭлемент.ДатаОтправки;
                    НовыйЭлемент.РазмерТекста = УдалитьЭлемент.РазмерТекста;
                    НовыйЭлемент.ТекстСМС = УдалитьЭлемент.ТекстСМС;
                    НовыйЭлемент.РазмерТекстаСМС = УдалитьЭлемент.РазмерТекстаСМС;
                    НовыйЭлемент.ОтложитьОтправкуДо = УдалитьЭлемент.ОтложитьОтправкуДо;
                    НовыйЭлемент.ДатаОтправкиФакт = УдалитьЭлемент.ДатаОтправкиФакт;
                    НовыйЭлемент.ПоСкайпу = УдалитьЭлемент.ПоСкайпу;
                    НовыйЭлемент.ВозниклаОшибкаПриОтправке = УдалитьЭлемент.ВозниклаОшибкаПриОтправке;
                    НовыйЭлемент.Источник = УдалитьЭлемент.Источник;
                    
                    НовыйЭлемент.Записать();
                    УдалитьЭлемент.Удалить();
                    
                КонецЦикла;
                
                ЗафиксироватьТранзакцию();
                
            Исключение
                
                ОтменитьТранзакцию();
                ВызватьИсключение ПодробноеПредставлениеОшибки(ОписаниеОшибки());
                
            КонецПопытки;
            
        КонецЕсли;
        
    КонецЦикла;
    
    // Удаляем регламентное задание
    Отбор = Новый Структура("Метаданные", РегЗаданиеМетаданные);
    РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
    Если РегЗадания.Количество() = 1 Тогда
        РегЗадание = РегЗадания[0];
        РегЗадание.Использование = Ложь;
        РегЗадание.Записать();
        РегЗадание.Удалить();
    КонецЕсли
        
КонецПроцедуры

Процедура КонвертацияЖурналОповещений_2_1_3_5() Экспорт
    
    РегЗаданиеМетаданные = Метаданные.РегламентныеЗадания.КонвертацияЖурналОповещений_2_1_3_5;
    
    // Создаем регламентное задание
    Отбор = Новый Структура("Метаданные", РегЗаданиеМетаданные);
    РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
    Если РегЗадания.Количество() = 0 Тогда
    	РегЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(РегЗаданиеМетаданные);
    	РегЗадание.Ключ = Новый УникальныйИдентификатор("882c15d7-2327-4692-b165-a5aceabb24e8");
    	РегЗадание.Наименование = "Конвертация регистра сведений ""Журнал оповещений"".";
    	РегЗадание.Расписание = Новый РасписаниеРегламентногоЗадания;
    	РегЗадание.Расписание.ПериодПовтораДней = 1;
    	РегЗадание.Расписание.ПериодПовтораВТечениеДня = 60;
    	РегЗадание.Использование = Истина;
    	РегЗадание.Записать();
        Возврат;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 100
    |   Период,
    |   Оповещение,
    |   ТекстОповещения,
    |   Комментарий,
    |   ОповещениеОтправлено,
    |   ВключитьПоказателиВТекстОповещения
    |ИЗ
    |   РегистрСведений.УдалитьЖурналОповещений
    |УПОРЯДОЧИТЬ ПО
    |   Период УБЫВ
    |";
    
    Выполнять = Истина;
    
    // Основной цикл конвертации данных
    Пока Выполнять Цикл
        
        Результат = Запрос.Выполнить();
        
        Выполнять = НЕ Результат.Пустой();
        
        Если Выполнять Тогда
            
            Выборка = Результат.Выбрать();
            
            НачатьТранзакцию();
            
            Попытка
                
                Пока Выборка.Следующий() Цикл
                    
                    МенеджерЗаписиУдалить = РегистрыСведений.УдалитьЖурналОповещений.СоздатьМенеджерЗаписи();
                    ЗаполнитьЗначенияСвойств(МенеджерЗаписиУдалить, Выборка);
                    
                    МенеджерЗаписиНовый = РегистрыСведений.ЖурналОповещений.СоздатьМенеджерЗаписи();
                    ЗаполнитьЗначенияСвойств(МенеджерЗаписиНовый, Выборка);
                                      
                    
                    МенеджерЗаписиНовый.Записать(Истина);
                    МенеджерЗаписиУдалить.Удалить();
                    
                КонецЦикла;
                
                ЗафиксироватьТранзакцию();
                
            Исключение
                
                ОтменитьТранзакцию();
                ВызватьИсключение ПодробноеПредставлениеОшибки(ОписаниеОшибки());
                
            КонецПопытки;
            
        КонецЕсли;
        
    КонецЦикла;
        
    // Удаляем регламентное задание
    Отбор = Новый Структура("Метаданные", РегЗаданиеМетаданные);
    РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
    Если РегЗадания.Количество() = 1 Тогда
        РегЗадание = РегЗадания[0];
        РегЗадание.Использование = Ложь;
        РегЗадание.Записать();
        РегЗадание.Удалить();
    КонецЕсли;
    
КонецПроцедуры

Процедура КонвертацияМониторингПроцессовСрезПоследних_2_1_3_5()
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Рег.Кластер,
    |   ВЫБОР
    |       КОГДА Спр.Наименование IS NULL ТОГДА Истина
    |       ИНАЧЕ ЛОЖЬ
    |   КОНЕЦ КАК ОбъектНеНайден,
    |   Рег.Сервер,
    |   Рег.Процесс,
    |   Рег.Память,
    |   Рег.ДатаЗаписи
    |ИЗ
    |   РегистрСведений.УдалитьМониторингПроцессовСрезПоследних КАК Рег
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   Справочник.ОбъектыКонтроля КАК Спр
    |ПО
    |   Спр.Ссылка = Рег.Кластер
    |";
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        НачатьТранзакцию();
        
        Попытка
            
            МенеджерЗаписиУдалить = РегистрыСведений.УдалитьМониторингПроцессовСрезПоследних.СоздатьМенеджерЗаписи();
            ЗаполнитьЗначенияСвойств(МенеджерЗаписиУдалить, Выборка);
            МенеджерЗаписиУдалить.Удалить();
            
            Если НЕ Выборка.ОбъектНеНайден Тогда
                МенеджерЗаписиНовый = РегистрыСведений.МониторингПроцессовСрезПоследних.СоздатьМенеджерЗаписи();
                ЗаполнитьЗначенияСвойств(МенеджерЗаписиНовый, Выборка);
                
                ПлощадкаЭксплуатации = Выборка.Кластер.ПлощадкаЭксплуатации;
                
                РабочийСервер = РабочийСерверПоСтроке_2_1_3_5(ПлощадкаЭксплуатации, Выборка.Кластер, Выборка.Сервер);
                Если РабочийСервер <> Неопределено Тогда
                    МенеджерЗаписиНовый.Сервер = РабочийСервер; 
                    МенеджерЗаписиНовый.Записать(Истина);
                КонецЕсли;
            
            КонецЕсли;            
            
            ЗафиксироватьТранзакцию();
            
        Исключение
            
            ОтменитьТранзакцию();
            ВызватьИсключение;
            
        КонецПопытки;
                
    КонецЦикла;
        
КонецПроцедуры

Процедура КонвертацияМониторингПроцессов_2_1_3_5() Экспорт
    
    РегЗаданиеМетаданные = Метаданные.РегламентныеЗадания.КонвертацияМониторингПроцессов_2_1_3_5;
    
    // Создаем регламентное задание
    Отбор = Новый Структура("Метаданные", РегЗаданиеМетаданные);
    РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
    Если РегЗадания.Количество() = 0 Тогда
    	РегЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(РегЗаданиеМетаданные);
    	РегЗадание.Ключ = Новый УникальныйИдентификатор("c5513ec6-630a-479f-b76f-fcfee1920d75");
    	РегЗадание.Наименование = "Конвертация регистра сведений ""Мониторинг процессов"".";
    	РегЗадание.Расписание = Новый РасписаниеРегламентногоЗадания;
    	РегЗадание.Расписание.ПериодПовтораДней = 1;
    	РегЗадание.Расписание.ПериодПовтораВТечениеДня = 60;
    	РегЗадание.Использование = Истина;
    	РегЗадание.Записать();
        Возврат;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 100
    |   Рег.Время,
    |   Рег.Кластер,
    |   ВЫБОР
    |       КОГДА Спр.Наименование IS NULL ТОГДА Истина
    |       ИНАЧЕ ЛОЖЬ
    |   КОНЕЦ КАК ОбъектНеНайден,
    |   Рег.Сервер,
    |   Рег.Процесс,
    |   Рег.Память,
    |   Рег.Изменение,
    |   Рег.ПроцессСтрокой
    |ИЗ
    |   РегистрСведений.УдалитьМониторингПроцессов КАК Рег
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   Справочник.ОбъектыКонтроля КАК Спр
    |ПО
    |   Спр.Ссылка = Рег.Кластер
    |УПОРЯДОЧИТЬ ПО
    |   Рег.Время УБЫВ
    |";
    
    Выполнять = Истина;
    
    // Основной цикл конвертации данных
    Пока Выполнять Цикл
        
        Результат = Запрос.Выполнить();
        
        Выполнять = НЕ Результат.Пустой();
        
        Если Выполнять Тогда
            
            Выборка = Результат.Выбрать();
            
            НачатьТранзакцию();
            
            Попытка
                
                Пока Выборка.Следующий() Цикл
                    
                    МенеджерЗаписиУдалить = РегистрыСведений.УдалитьМониторингПроцессов.СоздатьМенеджерЗаписи();
                    ЗаполнитьЗначенияСвойств(МенеджерЗаписиУдалить, Выборка);
                    МенеджерЗаписиУдалить.Удалить();
                    
                    Если НЕ Выборка.ОбъектНеНайден Тогда
                        МенеджерЗаписиНовый = РегистрыСведений.МониторингПроцессов.СоздатьМенеджерЗаписи();
                        ЗаполнитьЗначенияСвойств(МенеджерЗаписиНовый, Выборка);
                        
                        РабочийСервер = РабочийСерверПоСтроке_2_1_3_5(Выборка.Кластер.ПлощадкаЭксплуатации, Выборка.Кластер, Выборка.Сервер); 
                        Если РабочийСервер <> Неопределено Тогда
                            МенеджерЗаписиНовый.Сервер = РабочийСервер;
                            МенеджерЗаписиНовый.Записать(Истина);                    
                        КонецЕсли;
                    
                    КонецЕсли;
                                        
                КонецЦикла;
                                
                ЗафиксироватьТранзакцию();
                
            Исключение
                
                ОтменитьТранзакцию();
                ВызватьИсключение;
                
            КонецПопытки;
                        
        КонецЕсли;
        
    КонецЦикла;
        
    // Удаляем регламентное задание
    Отбор = Новый Структура("Метаданные", РегЗаданиеМетаданные);
    РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
    Если РегЗадания.Количество() = 1 Тогда
        РегЗадание = РегЗадания[0];
        РегЗадание.Использование = Ложь;
        РегЗадание.Записать();
        РегЗадание.Удалить();
    КонецЕсли;
    
КонецПроцедуры

Процедура КонвертацияМониторингСеансов_2_1_3_5() Экспорт
    
    РегЗаданиеМетаданные = Метаданные.РегламентныеЗадания.КонвертацияМониторингСеансов_2_1_3_5;
    
    // Создаем регламентное задание
    Отбор = Новый Структура("Метаданные", РегЗаданиеМетаданные);
    РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
    Если РегЗадания.Количество() = 0 Тогда
    	РегЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(РегЗаданиеМетаданные);
    	РегЗадание.Ключ = Новый УникальныйИдентификатор("794c155d-854d-4c16-b761-ca264d944e55");
    	РегЗадание.Наименование = "Конвертация регистра сведений ""Мониторинг Сеансов"".";
    	РегЗадание.Расписание = Новый РасписаниеРегламентногоЗадания;
    	РегЗадание.Расписание.ПериодПовтораДней = 1;
    	РегЗадание.Расписание.ПериодПовтораВТечениеДня = 60;
    	РегЗадание.Использование = Истина;
    	РегЗадание.Записать();
        Возврат;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 100
    |  УдалитьМониторингСеансов.Время КАК Время,
    |  УдалитьМониторингСеансов.Кластер КАК Кластер,
    |  ВЫБОР
    |       КОГДА Спр.Наименование IS NULL ТОГДА Истина
    |       ИНАЧЕ ЛОЖЬ
    |   КОНЕЦ КАК ОбъектНеНайден,
    |  УдалитьМониторингСеансов.ФлагВыполненияПроверки КАК ФлагВыполненияПроверки,
    |  УдалитьМониторингСеансов.База КАК База,
    |  УдалитьМониторингСеансов.Сервер КАК Сервер,
    |  УдалитьМониторингСеансов.Процесс КАК Процесс,
    |  УдалитьМониторингСеансов.Сеанс КАК Сеанс,
    |  УдалитьМониторингСеансов.НомерСоединения КАК НомерСоединения,
    |  УдалитьМониторингСеансов.ДатаНачалаСеанса КАК ДатаНачалаСеанса,
    |  УдалитьМониторингСеансов.ДатаПоследнейАктивности КАК ДатаПоследнейАктивности,
    |  УдалитьМониторингСеансов.Компьютер КАК Компьютер,
    |  УдалитьМониторингСеансов.Пользователь КАК Пользователь,
    |  УдалитьМониторингСеансов.Приложение КАК Приложение,
    |  УдалитьМониторингСеансов.Язык КАК Язык,
    |  УдалитьМониторингСеансов.Порт КАК Порт,
    |  УдалитьМониторингСеансов.СоединениеССУБД КАК СоединениеССУБД,
    |  УдалитьМониторингСеансов.ЗахваченоСУБД КАК ЗахваченоСУБД,
    |  УдалитьМониторингСеансов.ЗаблокированоСУБД КАК ЗаблокированоСУБД,
    |  УдалитьМониторингСеансов.ЗаблокированоУпр КАК ЗаблокированоУпр,
    |  УдалитьМониторингСеансов.ВремяВызововСУБДТекущее КАК ВремяВызововСУБДТекущее,
    |  УдалитьМониторингСеансов.ВремяВызововСУБД5Мин КАК ВремяВызововСУБД5Мин,
    |  УдалитьМониторингСеансов.ВремяВызововСУБДВсего КАК ВремяВызововСУБДВсего,
    |  УдалитьМониторингСеансов.ДанныхСУБД5Мин КАК ДанныхСУБД5Мин,
    |  УдалитьМониторингСеансов.ДанныхСУБДВсего КАК ДанныхСУБДВсего,
    |  УдалитьМониторингСеансов.ВремяВызоваТекущее КАК ВремяВызоваТекущее,
    |  УдалитьМониторингСеансов.ВремяВызовов5Мин КАК ВремяВызовов5Мин,
    |  УдалитьМониторингСеансов.ВремяВызововВсего КАК ВремяВызововВсего,
    |  УдалитьМониторингСеансов.КоличествоВызовов5Мин КАК КоличествоВызовов5Мин,
    |  УдалитьМониторингСеансов.КоличествоВызововВсего КАК КоличествоВызововВсего,
    |  УдалитьМониторингСеансов.ОбъемДанных5Мин КАК ОбъемДанных5Мин,
    |  УдалитьМониторингСеансов.ОбъемДанныхВсего КАК ОбъемДанныхВсего,
    |  УдалитьМониторингСеансов.ПамятьТекущая КАК ПамятьТекущая,
    |  УдалитьМониторингСеансов.Память5Мин КАК Память5Мин,
    |  УдалитьМониторингСеансов.ПамятьВсего КАК ПамятьВсего,
    |  УдалитьМониторингСеансов.ЧтениеТекущее КАК ЧтениеТекущее,
    |  УдалитьМониторингСеансов.Чтение5Мин КАК Чтение5Мин,
    |  УдалитьМониторингСеансов.ЧтениеВсего КАК ЧтениеВсего,
    |  УдалитьМониторингСеансов.ЗаписьТекущая КАК ЗаписьТекущая,
    |  УдалитьМониторингСеансов.Запись5Мин КАК Запись5Мин,
    |  УдалитьМониторингСеансов.ЗаписьВсего КАК ЗаписьВсего,
    |  УдалитьМониторингСеансов.Лицензия КАК Лицензия,
    |  УдалитьМониторингСеансов.Спящий КАК Спящий,
    |  УдалитьМониторингСеансов.ЗаснутьЧерез КАК ЗаснутьЧерез,
    |  УдалитьМониторингСеансов.ЗавершитьЧерез КАК ЗавершитьЧерез,
    |  УдалитьМониторингСеансов.ЧислоДублейСеансов КАК ЧислоДублейСеансов
    |ИЗ
    |  РегистрСведений.УдалитьМониторингСеансов КАК УдалитьМониторингСеансов
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   Справочник.ОбъектыКонтроля КАК Спр
    |ПО
    |   Спр.Ссылка = УдалитьМониторингСеансов.Кластер
    |УПОРЯДОЧИТЬ ПО
    |  Время УБЫВ
    |";
    
    Выполнять = Истина;
    
    // Основной цикл конвертации данных
    Пока Выполнять Цикл
        
        Результат = Запрос.Выполнить();
        
        Выполнять = НЕ Результат.Пустой();
        
        Если Выполнять Тогда
            
            Выборка = Результат.Выбрать();
            
            НачатьТранзакцию();
            
            Попытка
                
                Пока Выборка.Следующий() Цикл
                    
                    МенеджерЗаписиУдалить = РегистрыСведений.УдалитьМониторингСеансов.СоздатьМенеджерЗаписи();
                    ЗаполнитьЗначенияСвойств(МенеджерЗаписиУдалить, Выборка);
                    МенеджерЗаписиУдалить.Удалить();
                    
                    Если Выборка.ФлагВыполненияПроверки ИЛИ Выборка.ОбъектНеНайден Тогда
                        Продолжить;
                    КонецЕсли;
                    
                    МенеджерЗаписиНовый = РегистрыСведений.МониторингСеансов.СоздатьМенеджерЗаписи();
                    ЗаполнитьЗначенияСвойств(МенеджерЗаписиНовый, Выборка);
                    
                    ЕстьЗапись = Ложь;
                    
                    Если ЗначениеЗаполнено(Выборка.Сервер) Тогда
                        
                        РабочийСервер = РабочийСерверПоСтроке_2_1_3_5(Выборка.Кластер.ПлощадкаЭксплуатации, Выборка.Кластер, Выборка.Сервер);
                        Если РабочийСервер <> Неопределено Тогда
                            МенеджерЗаписиНовый.Сервер = РабочийСервер;
                            ЕстьЗапись = Истина;
                        КонецЕсли;
                        
                    Иначе
                        
                        МенеджерЗаписиНовый.Сервер = Справочники.ОбъектыКонтроля.ПустаяСсылка();
                        ЕстьЗапись = Истина;
                        
                    КонецЕсли;
                    
                    Если ЕстьЗапись Тогда
                        
                        ИнформационнаяБаза = БазаПоСтроке_2_1_3_5(Выборка.Кластер.ПлощадкаЭксплуатации, Выборка.Кластер, Выборка.База);
                        
                        Если ИнформационнаяБаза <> Неопределено Тогда
                            МенеджерЗаписиНовый.База = ИнформационнаяБаза;
                            МенеджерЗаписиНовый.ИдентификаторСеанса = Новый УникальныйИдентификатор();
                            МенеджерЗаписиНовый.Записать(Истина);
                        КонецЕсли;
                        
                    КонецЕсли;
                    
                КонецЦикла;
                
                ЗафиксироватьТранзакцию();
                
            Исключение
                
                ОтменитьТранзакцию();
                ВызватьИсключение;
                
            КонецПопытки;
            
        КонецЕсли;
        
    КонецЦикла;
        
    // Удаляем регламентное задание
    Отбор = Новый Структура("Метаданные", РегЗаданиеМетаданные);
    РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
    Если РегЗадания.Количество() = 1 Тогда
        РегЗадание = РегЗадания[0];
        РегЗадание.Использование = Ложь;
        РегЗадание.Записать();
        РегЗадание.Удалить();
    КонецЕсли;
    
КонецПроцедуры

Функция РабочийСерверПоСтроке_2_1_3_5(ПлощадкаЭксплуатации, Кластер, СерверСтрока)
    
    Сервер = Неопределено;
    
    СерверМассив = Справочники.ОбъектыКонтроля.НайтиПоНаименованиюРабочийСервер1С(ПлощадкаЭксплуатации, СерверСтрока);
    Если СерверМассив.Количество() > 0 Тогда
        Сервер = СерверМассив[0];
    КонецЕсли;
    
    Возврат Сервер;
    
КонецФункции

Функция БазаПоСтроке_2_1_3_5(ПлощадкаЭкслуатации, Кластер, БазаСтрока)
    
    База = Неопределено;
    
    БазаМассив = Справочники.ОбъектыКонтроля.НайтиИнформационнуюБазуПоИмениВКластере(ПлощадкаЭкслуатации, Кластер, БазаСтрока);
    Если БазаМассив.Количество() > 0 Тогда
        База = БазаМассив[0];
    КонецЕсли;
    
    Возврат База;
        
КонецФункции

Процедура ОбновлениеЛицензий_2_1_3_22() Экспорт
    
    Выборка = Справочники.Лицензии.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        Если НЕ ЗначениеЗаполнено(Выборка.РегистрационныйНомер) Тогда
            
            СпрОбъект = Выборка.ПолучитьОбъект();
            СпрОбъект.Активная = 1;
            СпрОбъект.РегистрационныйНомер = Справочники.Лицензии.РегистрационныйНомерИзНаименования(Выборка.Наименование);
            СпрОбъект.Записать();
            
        КонецЕсли;
                
    КонецЦикла;
        
КонецПроцедуры

Процедура УдалениеИнцидентовНеНайденРабочийСервер_2_1_3_23()
    
    ТипИнцидента = Справочники.ТипыИнцидентов.ТипИнцидента("НеНайденРабочийСервер", Перечисления.УровниИнцидентов.Ошибка);
    
    НаборЗаписей = РегистрыСведений.Инциденты.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.ТипИнцидента.Установить(ТипИнцидента);
    НаборЗаписей.Записать(Истина);
    
    ТипИнцидентаОбъект = ТипИнцидента.ПолучитьОбъект();
    ТипИнцидентаОбъект.Удалить();
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбновлениеДоВерсииИнформационнойБазы

Процедура ОбновлениеИнформационнойБазыПоУмолчанию(Версия)
	
	Если  Версия <> СохраненнаяВерсия() Тогда
		//Начальные действия перед обновлением
		ПодготовитьОбновлениеИнформационнойБазы(Версия);
		
		Комментарий = "Переход на релиз " + Версия;
		ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 100, Комментарий);
		
		//Завершающие действия после обновления
		ЗавершитьОбновлениеИнформационнойБазы(Версия);
		
		#Область Заглушка
		// Данные блок нужен для корректной проверки кофигурации "Поиск неиспользуемых процедур и функций".
		// Данные процедуры вызываются через метод Выполнить, см. Общий.ОбновитьДоАктуальнойВерсии.
		Если Истина = Ложь Тогда
			ОбновлениеИнформационнойБазы_2_1_2_1("");
            ОбновлениеИнформационнойБазы_2_1_3_2("");
            ОбновлениеИнформационнойБазы_2_1_3_3("");
            ОбновлениеИнформационнойБазы_2_1_3_4("");
		КонецЕсли;
		#КонецОбласти
		
		ОбновитьДоАктуальнойВерсии();
	КонецЕсли;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы_2_1_2

Процедура ОбновлениеИнформационнойБазы_2_1_2_1(Версия)
	
	//Начальные действия перед обновлением
	ПодготовитьОбновлениеИнформационнойБазы(Версия);
	Комментарий = "Старт перехода на релиз 2.1.2.1";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
	
	//Завершающие действия после обновления
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	ОбновитьДоАктуальнойВерсии();
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы_2_1_3

Процедура ОбновлениеИнформационнойБазы_2_1_3_2(Версия)
	
	//Начальные действия перед обновлением
	ПодготовитьОбновлениеИнформационнойБазы(Версия);	
	Комментарий = "Старт перехода на релиз 2.1.3.2";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
	
	Комментарий = "Установка значения константы 'Количество дампов нового варианта = 1'.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 20, Комментарий);
    Константы.КоличествоДамповНовогоВарианта.Установить(1);
	
	//Завершающие действия после обновления
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	ОбновитьДоАктуальнойВерсии();
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_2_1_3_3(Версия)
    
    //Начальные действия перед обновлением
	ПодготовитьОбновлениеИнформационнойБазы(Версия);	
	Комментарий = "Старт перехода на релиз 2.1.3.3";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
	
	Комментарий = "Конвертация показателей 'Использование оперативной памяти процессами кластера'.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 30, Комментарий);
    КонвертироватьИспользованиеОперативнойПамятиПроцессамиКластера_2_1_3_3();
    
    Комментарий = "Конвертация показателей 'Скорость выполнения ключевых операций (в секундах)'.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 60, Комментарий);
    КонвертироватьСкоростьВыполненияКлючевыхОпераций_2_1_3_3();
    
    Комментарий = "Конвертация показателей 'Число excp по технологическому журналу'.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 90, Комментарий);
    КонвертироватьЧислоExcpПоТехнологическомуЖурналу_2_1_3_3();
	
	//Завершающие действия после обновления
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	ОбновитьДоАктуальнойВерсии();
    
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_2_1_3_4(Версия)
    
    //Начальные действия перед обновлением
	ПодготовитьОбновлениеИнформационнойБазы(Версия);	
	Комментарий = "Старт перехода на релиз 2.1.3.4";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
		    
    Комментарий = "Обновление элементов справочника 'Оборудование'.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 40, Комментарий);
    ОбновитьОборудование_2_1_3_4();
	
	//Завершающие действия после обновления
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	ОбновитьДоАктуальнойВерсии();
    
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_2_1_3_5(Версия) Экспорт
    
    //Начальные действия перед обновлением
	ПодготовитьОбновлениеИнформационнойБазы(Версия);	
	Комментарий = "Старт перехода на релиз 2.1.3.5";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
		    
    Комментарий = "Обновление дополнительных реквизитов справочника 'Агенты ЦКК'.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 20, Комментарий);
    ОбновитьАгентыЦККДополнительныеРеквизиты_2_1_3_5();
    
    Комментарий = "Конвертация справочника 'ОбъектыКонтроля'.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 30, Комментарий);
    КонвертацияОбъектыКонтроля_2_1_3_5();
    
    Комментарий = "Конвертация регистра сведений 'НастройкиКонтрольПамяти'.";
    ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 40, Комментарий);
    КонвертацияНастройкиКонтрольПамяти_2_1_3_5();
    
    Комментарий = "Удаление регламентных заданий 'Контроль потребления памяти'.";
    ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 40, Комментарий);
    УдалитьРегламентныеЗаданияКонтрольПотребленияПамяти_2_1_3_5();
    
    Комментарий = "Переименование контрольных процедур 'Контроль потребления памяти'.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 50, Комментарий);
    КонтрольПотребленияПамяти_2_1_3_5();
    
    Комментарий = "Конвертация регистра сведений 'Мониторинг процессов срез последних'.";
    ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 70, Комментарий);
    КонвертацияМониторингПроцессовСрезПоследних_2_1_3_5();
    
    //Фоновые задания конвертации
    КонвертацияСправочникОтправкаСообщений_2_1_3_5();
    КонвертацияЖурналОповещений_2_1_3_5();
    КонвертацияМониторингПроцессов_2_1_3_5();
    КонвертацияМониторингСеансов_2_1_3_5();
	
	//Завершающие действия после обновления
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	ОбновитьДоАктуальнойВерсии();
    
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_2_1_3_6(Версия) Экспорт
    
    //Начальные действия перед обновлением
	ПодготовитьОбновлениеИнформационнойБазы(Версия);	
	Комментарий = "Старт перехода на релиз 2.1.3.6";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
		    
    Комментарий = "Обновление предопределенного счетчика '\Processor(_Total)\% System Time'.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 90, Комментарий);
    ШаблонОбъект = Справочники.СчетчикиПроизводительности.ПроцессорПроцентЗагруженностиПроцессораСистемный.ПолучитьОбъект();
    ШаблонЭлемента = Справочники.СчетчикиПроизводительности.ПолучитьШаблонПредопределенного(ШаблонОбъект.Ссылка);
	ШаблонОбъект.ЗагрузитьШаблон(ШаблонЭлемента);
	ШаблонОбъект.Записать();
    
    СпрРольСерверЛинукс = Справочники.РолиОборудования.СерверLinux.ПолучитьОбъект();
    Если СпрРольСерверЛинукс.СчетчикиПроизводительностиLinux.Найти(Справочники.СчетчикиПроизводительности.ПроцессорПроцентЗагруженностиПроцессораСистемный, "СчетчикПроизводительности") = Неопределено Тогда
        НовСтрока = СпрРольСерверЛинукс.СчетчикиПроизводительностиLinux.Добавить();
        НовСтрока.СчетчикПроизводительности = Справочники.СчетчикиПроизводительности.ПроцессорПроцентЗагруженностиПроцессораСистемный;
        СпрРольСерверЛинукс.Записать();
    КонецЕсли;
       
	//Завершающие действия после обновления
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	ОбновитьДоАктуальнойВерсии();
    
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_2_1_3_7(Версия) Экспорт
    
    //Начальные действия перед обновлением
	ПодготовитьОбновлениеИнформационнойБазы(Версия);	
	Комментарий = "Старт перехода на релиз 2.1.3.7";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
		    
    Комментарий = "Установка дополнительных прав агенту ЦКК.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 90, Комментарий);
    
    Пользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
    Для Каждого Пользователь Из Пользователи Цикл
        
        Если Пользователь.Роли.Содержит(Метаданные.Роли.АгентПолныеПрава) Тогда
            
            Если НЕ Пользователь.Роли.Содержит(Метаданные.Роли.АгентПолныеПраваЦКК) Тогда
                Пользователь.Роли.Добавить(Метаданные.Роли.АгентПолныеПраваЦКК);
            КонецЕсли;
            
            Если НЕ Пользователь.Роли.Содержит(Метаданные.Роли.АгентПолныеПраваЦА) Тогда
                Пользователь.Роли.Добавить(Метаданные.Роли.АгентПолныеПраваЦА);
            КонецЕсли;
            
            Пользователь.Записать();
            
        КонецЕсли;
        
    КонецЦикла;
           
	//Завершающие действия после обновления
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	ОбновитьДоАктуальнойВерсии();
    
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_2_1_3_8(Версия) Экспорт
    
    //Начальные действия перед обновлением
	ПодготовитьОбновлениеИнформационнойБазы(Версия);	
	Комментарий = "Старт перехода на релиз 2.1.3.8";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
		    
    Комментарий = "Добавление в имя счетчика оборудования площадки эксплуатации.";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 20, Комментарий);
    
    СчетчикПроизводительностьОборудования = Справочники.ГруппыСчетчиков.НайтиПоПолномуКоду("Производительность оборудования");
    
    Если СчетчикПроизводительностьОборудования <> Неопределено Тогда
        
        Выборка = Справочники.Оборудование.Выбрать();
        Пока Выборка.Следующий() Цикл
            
            Оборудование = Выборка.ПолучитьОбъект();
            
            Попытка
                НачатьТранзакцию();
                
                СчетчикПлощадка = Справочники.ГруппыСчетчиков.НайтиПоКодуДляПоиска(Оборудование.ПлощадкаЭксплуатации.Наименование, СчетчикПроизводительностьОборудования);
                Если СчетчикПлощадка = Справочники.ГруппыСчетчиков.ПустаяСсылка() Тогда
                    СчетчикПлощадка = Справочники.ГруппыСчетчиков.СоздатьЭлемент();
                    СчетчикПлощадка.Родитель = СчетчикПроизводительностьОборудования;
                    СчетчикПлощадка.КодДляПоиска = Оборудование.ПлощадкаЭксплуатации.Наименование;
                    СчетчикПлощадка.Записать();
                    СчетчикПлощадка = СчетчикПлощадка.Ссылка;
                КонецЕсли;
                
                Если Оборудование.ФормироватьСчетчикПоНаименованию Тогда
                    КодДляПоиска = Оборудование.Наименование;
                Иначе
                    КодДляПоиска = ВРЕГ(Оборудование.Хост);
                КонецЕсли;
                
                СчетчикОборудование = Справочники.ГруппыСчетчиков.НайтиПоКодуДляПоиска(КодДляПоиска, СчетчикПроизводительностьОборудования);
                Если СчетчикОборудование <> Справочники.ГруппыСчетчиков.ПустаяСсылка() Тогда
                    
                    СчетчикОборудованиеОбъект = СчетчикОборудование.ПолучитьОбъект();
                    СчетчикОборудованиеОбъект.Родитель = СчетчикПлощадка;
                    СчетчикОборудованиеОбъект.Записать();
                    
                    Счетчики = Справочники.ГруппыСчетчиков.Выбрать(СчетчикОборудование.Ссылка);
                    Пока Счетчики.Следующий() Цикл
                        СчетчикОбъект = Счетчики.ПолучитьОбъект();
                        СчетчикОбъект.Записать();
                    КонецЦикла;
                                        
                КонецЕсли;
                
                ЗафиксироватьТранзакцию();
                
            Исключение
                
                ОтменитьТранзакцию();
                ВызватьИсключение;
                
            КонецПопытки;
            
            
        КонецЦикла;
        
    КонецЕсли;

               
	//Завершающие действия после обновления
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	ОбновитьДоАктуальнойВерсии();
    
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_2_1_3_11(Версия) Экспорт
    
    //Начальные действия перед обновлением
	ПодготовитьОбновлениеИнформационнойБазы(Версия);	
	Комментарий = "Старт перехода на релиз 2.1.3.11";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
		    
    Комментарий = "Заполнение функциональной опции интерфейса";
	СпрПолныйИнтерфейс = Справочники.ИнтерфейсыКлиента.ПолныйИнтерфейс.ПолучитьОбъект();
    СпрПолныйИнтерфейс.ОтображатьВсеОбъекты = Истина;
    СпрПолныйИнтерфейс.Записать();
               
	//Завершающие действия после обновления
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	ОбновитьДоАктуальнойВерсии();
    
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_2_1_3_13(Версия) Экспорт
    
    //Начальные действия перед обновлением
	ПодготовитьОбновлениеИнформационнойБазы(Версия);	
	Комментарий = "Старт перехода на релиз 2.1.3.13";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
	
	//ЦА
	ОбновлениеИнформационнойБазыЦА.ПереносЗначенийИзСсылокНаОбъектыМетаданныхСценариев();
		    
    Комментарий = "Помощник перехода на 2.1.3";
    Константы.ПоказатьФормуПослеОбновления.Установить("Обработка.ПомощникПерехода_2_1_3.Форма");
               
	//Завершающие действия после обновления
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	ОбновитьДоАктуальнойВерсии();
    
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_2_1_3_22(Версия) Экспорт
    
    //Начальные действия перед обновлением
	ПодготовитьОбновлениеИнформационнойБазы(Версия);	
	Комментарий = "Старт перехода на релиз 2.1.3.22";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
    
    ОбновлениеЛицензий_2_1_3_22();
    
	Комментарий = "Помощник перехода на 2.1.3";
    Константы.ПоказатьФормуПослеОбновления.Установить("Обработка.ПомощникПерехода_2_1_3.Форма");
               
	//Завершающие действия после обновления
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	ОбновитьДоАктуальнойВерсии();
    
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_2_1_3_23(Версия) Экспорт
    
    //Начальные действия перед обновлением
	ПодготовитьОбновлениеИнформационнойБазы(Версия);	
	Комментарий = "Старт перехода на релиз 2.1.3.23";
	ОбновитьСтатусОбновленияИнформационнойБазы(Версия, 10, Комментарий);
    
    УдалениеИнцидентовНеНайденРабочийСервер_2_1_3_23();
    
	Комментарий = "Помощник перехода на 2.1.3";
    Константы.ПоказатьФормуПослеОбновления.Установить("Обработка.ПомощникПерехода_2_1_3.Форма");
               
	//Завершающие действия после обновления
	ЗавершитьОбновлениеИнформационнойБазы(Версия);
	ОбновитьДоАктуальнойВерсии();
    
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

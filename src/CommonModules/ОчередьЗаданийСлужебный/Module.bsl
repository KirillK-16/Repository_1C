////////////////////////////////////////////////////////////////////////////////
// Общее описание алгоритма выполнения очереди
// Точкой входа служит процедура "ПланированиеОбработкиЗаданий" - это процедура регламентного задания "Планирования обработки заданий"
// Перед выполнением очереди выполняется перепланирование заданий по расписанию и удаление разовых заданий (без расписания)
// Перепланируются задания в следующих состояниях
//	- Выполняется
//	- Завершено
//	- НеЗапланировано
//	- Ошибка выполнения
// После перепланировки заданий расчитывается количество одновременно выполняющихся фоновых заданий по обработке очереди,
// количество не может быть меньше одного
// Задание, которое будет выполняться должно соответствовать следующим требованиям
//	Использование = ИСТИНА
//	ЗапланированныйМоментЗапуска <= ТекущаяУниверсальнаяДата()
//	СостояниеЗадания = Перечисление.СостоянияЗаданий.Запланировано

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Производит планирование выполнения заданий из РС ОчередьЗаданий 
// 
Процедура ПланированиеОбработкиЗаданий() Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	// Выбираем события в состояниях Выполняется, Завершено, НеЗапланировано, ОшибкаВыполнения
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Очередь.Ссылка КАК Идентификатор,
		|	Очередь.Расписание КАК Расписание,
		|	Очередь.КоличествоПовторовПриАварийномЗавершении КАК КоличествоПовторовПриАварийномЗавершении,
		|	Очередь.ИнтервалПовтораПриАварийномЗавершении КАК ИнтервалПовтораПриАварийномЗавершении
		|ИЗ
		|	Справочник.ОчередьЗаданий КАК Очередь
		|ГДЕ
		|	Очередь.СостояниеЗадания В (ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.Выполняется), ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.Завершено), ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.НеЗапланировано), ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.ОшибкаВыполнения))";
			
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Идентификатор);
		Исключение
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
								
			ЗаписьЖурналаРегистрации(
				"Процедура ПланированиеОбработкиЗаданий() Экспорт",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ОчередьЗаданийСлужебный,
				,
				Комментарий);
			
			// Запись заблокирована, перейти к следующей
			Продолжить;
		КонецПопытки;
		
		// Перепланируем завершившиеся регламентные задания и аварийно завершившиеся фоновые, удаляем выполненные фоновые
		ЗапланироватьЗадание(Выборка);
		
	КонецЦикла;

	// Вычисление количество требуемых исполняющих фоновых заданий
	КоличествоЗапускаемыхФоновыхЗаданий = КоличествоИсполняющихФоновыхЗаданийКЗапуску();
	
	// Запуск исполняющих фоновых заданий
	ЗапуститьИсполняющееФоновоеЗадание(КоличествоЗапускаемыхФоновыхЗаданий);
	
КонецПроцедуры

Процедура ЗапланироватьЗадание(Знач Выборка)
	
	ЧасовойПояс = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Выборка.Идентификатор.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Идентификатор);
		Блокировка.Заблокировать();
		
		Если НЕ Общий.СсылкаСуществует(Выборка.Идентификатор) Тогда
			Блокировка.Заблокировать();
			РазблокироватьДанныеДляРедактирования(Выборка.Идентификатор);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Задание = Выборка.Идентификатор.ПолучитьОбъект();
		
		// Если состояние задания Выполняется, но данные не заблокированы для редактирования - значит оно уже не выполняется
		Если Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Выполняется Тогда
			ЗаписьКонтроляВыполнения(НСтр("ru = 'Очередь регламентных заданий.Завершено с ошибками'", 
				Метаданные.ОсновнойЯзык.КодЯзыка), Выборка.Идентификатор, 
				НСтр("ru = 'Исполняющее задание было принудительно завершено'"));
		КонецЕсли;
		
		Если (Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Выполняется 
			Или Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.ОшибкаВыполнения)
			И Задание.НомерПопытки < Выборка.КоличествоПовторовПриАварийномЗавершении Тогда // Попытка повторного запуска
			
			Если ЗначениеЗаполнено(Задание.ДатаЗавершенияПоследнегоЗапуска) Тогда
				ТочкаОтсчетаПерезапуска = Задание.ДатаЗавершенияПоследнегоЗапуска;
			Иначе
				ТочкаОтсчетаПерезапуска = Задание.ДатаНачалаПоследнегоЗапуска;
			КонецЕсли;
			
			Задание.ЗапланированныйМоментЗапуска = ТочкаОтсчетаПерезапуска + Выборка.ИнтервалПовтораПриАварийномЗавершении;
			Задание.НомерПопытки                 = Задание.НомерПопытки + 1;
			Задание.СостояниеЗадания             = Перечисления.СостоянияЗаданий.Запланировано;
			Задание.ИсполняющееФоновоеЗадание    = Неопределено;
			Задание.Записать();
			
		Иначе
			Расписание = Выборка.Расписание.Получить();
			Если Расписание <> Неопределено Тогда
				
				Задание.ЗапланированныйМоментЗапуска = ПолучитьЗапланированныйМоментЗапускаЗадания(
					Расписание, ЧасовойПояс, Задание.ДатаНачалаПоследнегоЗапуска, Задание.ДатаЗавершенияПоследнегоЗапуска);
				Задание.НомерПопытки = 0;
				Если ЗначениеЗаполнено(Задание.ЗапланированныйМоментЗапуска) Тогда
					Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Запланировано;
				Иначе
					Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.НеАктивно;
				КонецЕсли;
				Задание.ИсполняющееФоновоеЗадание = Неопределено;
				Задание.Записать();
				
			Иначе // Нет расписания
				
				// Разовое задание
				Задание.ОбменДанными.Загрузка = Истина;
				Задание.Удалить();
				
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		РазблокироватьДанныеДляРедактирования(Выборка.Идентификатор);
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		Комментарий =
			"Описание = '" +Инфо.Описание + "', " +
			"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
			"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
			"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
					
			ЗаписьЖурналаРегистрации(
				"Процедура ЗапланироватьЗадание(Знач Выборка)",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ОчередьЗаданийСлужебный,
				,
				Комментарий);
		
		ОтменитьТранзакцию();
		РазблокироватьДанныеДляРедактирования(Выборка.Идентификатор);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура выполняет задания из РС ОчередьЗаданий 
// 
// Параметры: 
// КлючФоновогоЗадания - УникальныйИдентификатор - ключ необходим 
//                       для поиска текущего фонового задания.
//
Процедура ОбработатьОчередьЗаданий(КлючФоновогоЗадания) Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	НайденноеФоновоеЗадание = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ", КлючФоновогоЗадания));
	Если НайденноеФоновоеЗадание.Количество() = 1 Тогда
		ИсполняющееФоновоеЗадание = НайденноеФоновоеЗадание[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	МожноВыполнять = Истина;
	НачалоВыполнения = ТекущаяУниверсальнаяДата();
	
	МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания = 
		Константы.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания.Получить();
	МаксимальноеКоличествоИсполняющихФоновыхЗаданий =
		Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий.Получить();
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 111
		|	ОчередьЗаданий.Ссылка КАК Идентификатор,
		|	ОчередьЗаданий.Использование,
		|	ОчередьЗаданий.ЗапланированныйМоментЗапуска КАК ЗапланированныйМоментЗапуска,
		|	ОчередьЗаданий.ИсполняющееФоновоеЗадание,
		|	ОчередьЗаданий.НомерПопытки,
		|	ОчередьЗаданий.Расписание,
		|	ОчередьЗаданий.ИмяМетода,
		|	ОчередьЗаданий.Параметры,
		|	ОчередьЗаданий.ДатаНачалаПоследнегоЗапуска,
		|	ОчередьЗаданий.ДатаЗавершенияПоследнегоЗапуска
		|ИЗ
		|	Справочник.ОчередьЗаданий КАК ОчередьЗаданий
		|ГДЕ
		|	ОчередьЗаданий.Использование
		|	И ОчередьЗаданий.ЗапланированныйМоментЗапуска <= &ТекущаяУниверсальнаяДата
		|	И ОчередьЗаданий.СостояниеЗадания = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаданий.Запланировано)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗапланированныйМоментЗапуска,
		|	Идентификатор";
	
	Запрос.Текст = ТекстЗапроса;
	РазмерВыборкиТекст = Формат(МаксимальноеКоличествоИсполняющихФоновыхЗаданий * 3, "ЧН=; ЧГ=");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "111", РазмерВыборкиТекст);
	
	Пока МожноВыполнять Цикл 
		Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
		
		Результат = ВыполнитьЗапросВнеТранзакции(Запрос);
		Выборка = Результат.Выбрать();
		
		БлокировкаУстановлена = Ложь;
		Пока Выборка.Следующий() Цикл 
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Идентификатор);
				БлокировкаУстановлена = Истина;
				Прервать;
			Исключение
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации("ОбработатьОчередьЗаданий", УровеньЖурналаРегистрации.Информация, Метаданные.ОбщиеМодули.ОчередьЗаданийСлужебный,,Комментарий);
			КонецПопытки;
		КонецЦикла;
		
		Если Не БлокировкаУстановлена Тогда 
			Возврат;
		КонецЕсли;
		
		Расписание = Выборка.Расписание.Получить();
		Если Расписание <> Неопределено Тогда
			
			Просрочено = НЕ Расписание.ТребуетсяВыполнение(ТекущаяДата());
		Иначе
			Просрочено = Ложь;
		КонецЕсли;
		
		Если Просрочено Тогда
			// Требуется перепланировать задание
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(Выборка.Идентификатор.Метаданные().ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Идентификатор);
				
				Блокировка.Заблокировать();
				
				Задание = Выборка.Идентификатор.ПолучитьОбъект();
				Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.НеЗапланировано;
				Задание.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации("Процедура ОбработатьОчередьЗаданий(КлючФоновогоЗадания) Экспорт",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.ОбщиеМодули.ОчередьЗаданийСлужебный,
					,
					Комментарий);
			
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
		Иначе
			ВыполнитьЗаданиеОчереди(Выборка.Идентификатор, ИсполняющееФоновоеЗадание, Выборка.ИмяМетода);
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Выборка.Идентификатор);
		
		// Проверка возможности дальнейшего выполнения
		ДлительностьВыполнения = ТекущаяУниверсальнаяДата() - НачалоВыполнения;
		Если ДлительностьВыполнения > МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания Тогда
			МожноВыполнять = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Пытается выполнить запрос в несколько попыток.
// Используется для чтения вне транзакции часто изменяемых данных.
// При вызове в транзакции выдает ошибку.
//
// Параметры:
//  Запрос - Запрос - запрос который требуется выполнить
//
// Возвращаемое значение:
//  РезультатЗапроса - результат выполнения запроса
//
Функция ВыполнитьЗапросВнеТранзакции(Знач Запрос) Экспорт
	
	Если ТранзакцияАктивна() Тогда
		ВызватьИсключение(НСтр("ru = 'Транзакция активна. Выполнение запроса вне транзакции невозможно.'"));
	КонецЕсли;
	
	КоличествоПопыток = 0;
	
	Результат = Неопределено;
	Пока Истина Цикл
		Попытка
			Результат = Запрос.Выполнить(); // Чтение вне транзакции, возможно появление ошибки 
			                                // Could not continue scan with NOLOCK due to data movement
			                                // в этом случае нужно повторить попытку чтения
			Прервать;
		Исключение
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("ВыполнитьЗапросВнеТранзакции", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.ОчередьЗаданийСлужебный,Комментарий);
			
			КоличествоПопыток = КоличествоПопыток + 1;
			Если КоличествоПопыток = 5 Тогда
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьЗаданиеОчереди(Знач Ссылка, Знач ИсполняющееФоновоеЗадание, 
		Знач ИмяМетода)
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Ссылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		
		Задание = Ссылка.ПолучитьОбъект();
		
		Если Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Запланировано
			И Задание.Использование
			И Задание.ЗапланированныйМоментЗапуска <= ТекущаяУниверсальнаяДата() Тогда 
			
			Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Выполняется;
			Задание.ИсполняющееФоновоеЗадание = ИсполняющееФоновоеЗадание.УникальныйИдентификатор;
			Задание.ДатаНачалаПоследнегоЗапуска = ТекущаяУниверсальнаяДата();
			Задание.ДатаЗавершенияПоследнегоЗапуска = Неопределено;
			Задание.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			ЗафиксироватьТранзакцию();
			Возврат;
			
		КонецЕсли;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		Комментарий =
			"Описание = '" +Инфо.Описание + "', " +
			"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
			"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
			"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
					
		ЗаписьЖурналаРегистрации(
			"Процедура ВыполнитьЗаданиеОчереди(...)",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ОчередьЗаданийСлужебный,
			,
			Комментарий);
			
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Выполнение задания
	ВыполненоУспешно = Ложь;
	ИнформацияОбОшибкеВыполненияЗадания = Неопределено;
	Попытка
		ЗаписьКонтроляВыполнения(НСтр("ru = 'Очередь регламентных заданий.Старт'", 
			Метаданные.ОсновнойЯзык.КодЯзыка), Ссылка);
		
		Общий.ВыполнитьЗадание(ИмяМетода, Задание.Параметры.Получить());
		
		ВыполненоУспешно = Истина;
		
		Если ТранзакцияАктивна() Тогда
			
			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию();
			КонецЦикла;
			
			ШаблонСообщения = НСтр("ru = 'По завершении выполнения обработчика %1 не была закрыта транзакция'");
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", Задание.ИмяМетода);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Очередь регламентных заданий.Выполнение'", 
				Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка, 
				,
				ИсполняющееФоновоеЗадание, 
				ТекстСообщения);
			
		КонецЕсли;
			
		ЗаписьКонтроляВыполнения(НСтр("ru = 'Очередь регламентных заданий.Завершено успешно'", 
			Метаданные.ОсновнойЯзык.КодЯзыка), Ссылка);
		
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							
		ЗаписьЖурналаРегистрации(
			"Процедура ВыполнитьЗаданиеОчереди(...)",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ОчередьЗаданийСлужебный,
			,
			Комментарий);
		
		Пока ТранзакцияАктивна() Цикл
			ОтменитьТранзакцию();
		КонецЦикла;
		
		ЗаписьКонтроляВыполнения(НСтр("ru = 'Очередь регламентных заданий.Завершено с ошибками'", 
			Метаданные.ОсновнойЯзык.КодЯзыка), Ссылка, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Очередь регламентных заданий.Выполнение'", 
			Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка, 
			,
			ИсполняющееФоновоеЗадание, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			
		ИнформацияОбОшибкеВыполненияЗадания = ИнформацияОбОшибке();
		
	КонецПопытки;
		
	НачатьТранзакцию();
	Попытка
		
		Если Общий.СсылкаСуществует(Ссылка) Тогда // иначе - задание могло быть удалено внутри обработчика
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Ссылка.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			Блокировка.Заблокировать();
			
			Задание = Ссылка.ПолучитьОбъект();
			Задание.ДатаЗавершенияПоследнегоЗапуска = ТекущаяУниверсальнаяДата();
			
			Если ВыполненоУспешно Тогда
				Если Задание.СостояниеЗадания <> Перечисления.СостоянияЗаданий.НеАктивно Тогда
					Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.Завершено;
				КонецЕсли;
			Иначе
				Задание.СостояниеЗадания = Перечисления.СостоянияЗаданий.ОшибкаВыполнения;
			КонецЕсли;
			Задание.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		Комментарий =
			"Описание = '" +Инфо.Описание + "', " +
			"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
			"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
			"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
					
		ЗаписьЖурналаРегистрации(
			"Процедура ВыполнитьЗаданиеОчереди(...)",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ОчередьЗаданийСлужебный,
			,
			Комментарий);
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Рассчитывает необходимое количество исполняющих фоновых заданий
// 
Функция КоличествоИсполняющихФоновыхЗаданийКЗапуску()
	
	КоличествоРаботающихФоновыхЗаданий = КоличествоИсполняющихФоновыхЗаданий();
	
	КоличествоИсполняющихФоновыхЗаданийКЗапуску = 
		Макс(Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий.Получить(), 1) - КоличествоРаботающихФоновыхЗаданий;
	
	Если КоличествоИсполняющихФоновыхЗаданийКЗапуску < 0 Тогда
		КоличествоИсполняющихФоновыхЗаданийКЗапуску = 0;
	КонецЕсли;

	Возврат КоличествоИсполняющихФоновыхЗаданийКЗапуску;
	
КонецФункции

// Запускает заданное количество фоновых заданий 
// 
// Параметры: 
// КоличествоЗапускаемыхФоновыхЗаданий - Число - количество фоновых заданий,
//                                       которых необходимо запустить.
//
Процедура ЗапуститьИсполняющееФоновоеЗадание(КоличествоЗапускаемыхФоновыхЗаданий) 
	
	Для Индекс = 1 По КоличествоЗапускаемыхФоновыхЗаданий Цикл
		Ключ = Новый УникальныйИдентификатор;
		Параметры = Новый Массив;
		Параметры.Добавить(Ключ);
		ФоновыеЗадания.Выполнить("ОчередьЗаданийСлужебный.ОбработатьОчередьЗаданий", Параметры, Ключ, ПолучитьНаименованиеИсполняющегоФоновогоЗадания());
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписьКонтроляВыполнения(Знач ИмяСобытия, Знач ЗаписьЗадания, Знач Комментарий = "")
	
	Если Не ПустаяСтрока(Комментарий) Тогда
		Комментарий = Комментарий + Символы.ПС;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, ,
		Строка(ЗаписьЗадания.УникальныйИдентификатор()), Комментарий + ЗаписьЗадания.ИмяМетода);
	
КонецПроцедуры

// Рассчитывает следующий момент запуска задания. 
// 
// Параметры: 
// Расписание                  - РасписаниеРегламентногоЗадания - расписание, 
//                               для которого требуется рассчитать момент следующего запуска.
// ЧасовойПояс				   - Строка.
// ДатаНачалаПоследнегоЗапуска - Дата - Дата начала последнего запуска регламентного задания. 
//                               Если дата задана, то используется для проверки таких условий как 
//                               ПериодПовтораДней, ПериодНедель, ПериодПовтораВТечениеДня. 
//                               Если дата не задана, то считается, 
//                               что задание не выполнялось ни разу и проверка этих условий не производится.
// 
// Возвращаемое значение: 
// Дата - Рассчитанный следующий момент запуска задания. 
// 
Функция ПолучитьЗапланированныйМоментЗапускаЗадания(Знач Расписание, Знач ЧасовойПояс, 
		Знач ДатаНачалаПоследнегоЗапуска = '00010101', Знач ДатаЗавершенияПоследнегоЗапуска = '00010101') Экспорт
	
	Если ПустаяСтрока(ЧасовойПояс) Тогда
		ЧасовойПояс = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачалаПоследнегоЗапуска) Тогда 
		ДатаНачалаПоследнегоЗапуска = МестноеВремя(ДатаНачалаПоследнегоЗапуска, ЧасовойПояс);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаЗавершенияПоследнегоЗапуска) Тогда
		ДатаЗавершенияПоследнегоЗапуска = МестноеВремя(ДатаЗавершенияПоследнегоЗапуска, ЧасовойПояс);
	КонецЕсли;
	
	ДатаРасчета = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	
	НайденнаяДата = СледующаяДатаВыполненияРасписания(Расписание, ДатаРасчета, ДатаНачалаПоследнегоЗапуска, ДатаЗавершенияПоследнегоЗапуска);
	
	Если ЗначениеЗаполнено(НайденнаяДата) Тогда
		Возврат УниверсальноеВремя(НайденнаяДата, ЧасовойПояс);
	Иначе
		Возврат НайденнаяДата;
	КонецЕсли;
	
КонецФункции

// Возвращает следующую дата выполнения расписания
//
// Параметры:
//  Расписание - РасписаниеРегламентногоЗадания - расписание по которому
//   будет рассчитываться дата
//  ДатаДляПроверки - Дата (ДатаВремя) - минимальная дата на которую может
//   быть запланировано выполнение
//  ДатаНачалаПоследнегоЗапуска - Дата (ДатаВремя) - Дата начала последнего 
//   запуска задания. Если дата задана, то используется для проверки таких 
//   условий как ПериодПовтораДней, ПериодНедель, ПериодПовтораВТечениеДня. 
//   Если дата не задана, то считается, что задание не выполнялось ни разу 
//   и проверка этих условий не производится. 
//  ДатаЗавершенияПоследнегоЗапуска - Дата (ДатаВремя) - Дата завершения 
//   последнего запуска задания. Если дата задана, то используется для 
//   проверки условия ПаузаПовтора. Если дата не задана, то считается, что 
//   задание ни разу не завершалось, и проверка этого условия не производится. 
//  МаксимальныйГоризонтПланирования - Число - Максимальное количество секунд
//   относительно ДатаДляПроверки на которое может быть выполнено планирование.
//   Увеличение значения может привести к замедлению расчета на сложных
//   расписаниях
//
Функция СледующаяДатаВыполненияРасписания(Знач Расписание, Знач ДатаДляПроверки, 
	Знач ДатаНачалаПоследнегоЗапуска = Неопределено, Знач ДатаЗавершенияПоследнегоЗапуска = Неопределено, 
	Знач МаксимальныйГоризонтПланирования = Неопределено) Экспорт
	
	Если МаксимальныйГоризонтПланирования = Неопределено Тогда
		МаксимальныйГоризонтПланирования = 366 * 86400 * 10;
	КонецЕсли;
	
	ИсходнаяДатаДляПроверки = ДатаДляПроверки;
	ВремяНачалаПоследнегоЗапуска = '00010101' + (ДатаНачалаПоследнегоЗапуска - НачалоДня(ДатаНачалаПоследнегоЗапуска));
	
	// Границы по датам
	Если ЗначениеЗаполнено(Расписание.ДатаКонца)
		И ДатаДляПроверки > Расписание.ДатаКонца Тогда
		
		// Интервал выполнения по дням закончился
		Возврат '00010101';
	КонецЕсли;
		
	Если ДатаДляПроверки < Расписание.ДатаНачала Тогда
		ДатаДляПроверки = Расписание.ДатаНачала;
	КонецЕсли;
	
	МожноМенятьДень = Истина;
	
	// Учет периодичности
	Если ЗначениеЗаполнено(ДатаНачалаПоследнегоЗапуска) Тогда
		
		// Период недель
		Если Расписание.ПериодНедель > 1
			И (НачалоНедели(ДатаДляПроверки) - НачалоНедели(ДатаНачалаПоследнегоЗапуска)) / (7 * 86400) < Расписание.ПериодНедель Тогда
		
			ДатаДляПроверки = НачалоНедели(ДатаНачалаПоследнегоЗапуска) + 7 * 86400 * Расписание.ПериодНедель;
		КонецЕсли;
		
		// Период дней
		Если Расписание.ПериодПовтораДней = 0 Тогда
			Если НачалоДня(ДатаДляПроверки) <> НачалоДня(ДатаНачалаПоследнегоЗапуска) Тогда
				// Повторения не установлено и задание уже выполнялось
				Возврат '00010101';
			КонецЕсли;
			
			МожноМенятьДень = Ложь;
		КонецЕсли;
		
		Если Расписание.ПериодПовтораДней > 1
			И НачалоДня(ДатаДляПроверки) - НачалоДня(ДатаНачалаПоследнегоЗапуска) < (Расписание.ПериодПовтораДней - 1)* 86400 Тогда
			
			ДатаДляПроверки = НачалоДня(ДатаНачалаПоследнегоЗапуска) + Расписание.ПериодПовтораДней * 86400;
		КонецЕсли;
	КонецЕсли;
	
	// Учет допустимых интервалов запуска
	ПоменятьМесяц = Ложь;
	ПоменятьДень = Ложь;
	Пока Истина Цикл
		
		Если ДатаДляПроверки - ИсходнаяДатаДляПроверки > МаксимальныйГоризонтПланирования Тогда
			// Отложить планирование
			Возврат '00010101';
		КонецЕсли;
		
		Если НЕ МожноМенятьДень
			И (ПоменятьДень ИЛИ ПоменятьМесяц) Тогда
			
			// Повторения не установлено и задание уже выполнялось
			Возврат '00010101';
		КонецЕсли;
		
		// Месяцы
		Пока ПоменятьМесяц
			ИЛИ Расписание.Месяцы.Количество() > 0 
			И Расписание.Месяцы.Найти(Месяц(ДатаДляПроверки)) = Неопределено Цикл
			
			ПоменятьМесяц = Ложь;
			
			// Переход на следующий месяц
			ДатаДляПроверки = НачалоМесяца(ДобавитьМесяц(ДатаДляПроверки, 1));
		КонецЦикла;
		
		// День месяца
		ДнейВМесяце = День(КонецМесяца(ДатаДляПроверки));
		Если Расписание.ДеньВМесяце <> 0 Тогда
			
			ТекущийДень = День(ДатаДляПроверки);
			
			Если Расписание.ДеньВМесяце > 0 
				И (ДнейВМесяце < Расписание.ДеньВМесяце ИЛИ ТекущийДень > Расписание.ДеньВМесяце)
				ИЛИ Расписание.ДеньВМесяце < 0 
				И (ДнейВМесяце < -Расписание.ДеньВМесяце ИЛИ ТекущийДень > ДнейВМесяце - -Расписание.ДеньВМесяце) Тогда
				
				// В этом месяце нет такого числа или оно уже прошло
				ПоменятьМесяц = Истина;
				Продолжить;
			КонецЕсли;
			
			Если Расписание.ДеньВМесяце > 0 Тогда
				ДатаДляПроверки = НачалоМесяца(ДатаДляПроверки) + (Расписание.ДеньВМесяце - 1) * 86400;
			КонецЕсли;
			
			Если Расписание.ДеньВМесяце < 0 Тогда
				ДатаДляПроверки = НачалоДня(КонецМесяца(ДатаДляПроверки)) - (-Расписание.ДеньВМесяце -1) * 86400;
			КонецЕсли;
		КонецЕсли;
		
		// День недели в месяце
		Если Расписание.ДеньНеделиВМесяце <> 0 Тогда
			Если Расписание.ДеньНеделиВМесяце > 0 Тогда
				ДеньНачалаНедели = (Расписание.ДеньНеделиВМесяце - 1) * 7 + 1;
			КонецЕсли;
			Если Расписание.ДеньНеделиВМесяце < 0 Тогда
				ДеньНачалаНедели = ДнейВМесяце - (-Расписание.ДеньНеделиВМесяце) * 7 + 1;
			КонецЕсли;
			
			ДеньКонцаНедели = Мин(ДеньНачалаНедели + 6, ДнейВМесяце);
			
			Если День(ДатаДляПроверки) > ДеньКонцаНедели 
				ИЛИ ДеньНачалаНедели > ДнейВМесяце Тогда
				// В этом месяце нужная неделя уже прошла (или ее не было)
				ПоменятьМесяц = Истина;
				Продолжить;
			КонецЕсли;
			
			Если День(ДатаДляПроверки) < ДеньНачалаНедели Тогда
				Если Расписание.ДеньВМесяце <> 0 Тогда
					
					// День зафиксирован и он не подходит
					ПоменятьМесяц = Истина;
					Продолжить;
				КонецЕсли;
				ДатаДляПроверки = НачалоМесяца(ДатаДляПроверки) + (ДеньНачалаНедели - 1) * 86400;
			КонецЕсли;
		КонецЕсли;
		
		// День недели
		Пока ПоменятьДень
			ИЛИ Расписание.ДниНедели.Найти(ДеньНедели(ДатаДляПроверки)) = Неопределено
			И Расписание.ДниНедели.Количество() > 0 Цикл
			
			ПоменятьДень = Ложь;
			
			Если Расписание.ДеньВМесяце <> 0 Тогда
				// День зафиксирован и он не подходит
				ПоменятьМесяц = Истина;
				Прервать;
			КонецЕсли;
			
			Если День(ДатаДляПроверки) = ДнейВМесяце Тогда
				// Месяц кончился
				ПоменятьМесяц = Истина;
				Прервать;
			КонецЕсли;
			
			Если Расписание.ДеньНеделиВМесяце <> 0
				И День(ДатаДляПроверки) = ДеньКонцаНедели Тогда
				
				// Нужная неделя кончилась
				ПоменятьМесяц = Истина;
				Прервать;
			КонецЕсли;
			
			ДатаДляПроверки = НачалоДня(ДатаДляПроверки) + 86400;
		КонецЦикла;
		Если ПоменятьМесяц Тогда
			Продолжить;
		КонецЕсли;
		
		// Учет времени
		ВремяДляПроверки = '00010101' + (ДатаДляПроверки - НачалоДня(ДатаДляПроверки));
		
		Если Расписание.ДетальныеРасписанияДня.Количество() = 0 Тогда
			ДетальныеРасписания = Новый Массив;
			ДетальныеРасписания.Добавить(Расписание);
		Иначе
			ДетальныеРасписания = Расписание.ДетальныеРасписанияДня;
		КонецЕсли;
		
		Для Индекс = 0 По ДетальныеРасписания.ВГраница() Цикл
			РасписаниеДня = ДетальныеРасписания[Индекс];
			
			// Границы по времени
			Если ЗначениеЗаполнено(РасписаниеДня.ВремяНачала)
				И ВремяДляПроверки < РасписаниеДня.ВремяНачала Тогда
				
				ВремяДляПроверки = РасписаниеДня.ВремяНачала;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РасписаниеДня.ВремяКонца)
				И ВремяДляПроверки > РасписаниеДня.ВремяКонца Тогда
				
				Если Индекс < ДетальныеРасписания.ВГраница() Тогда
					// Есть еще расписания дня
					Продолжить;
				КонецЕсли;
				
				// В этом дне подходящее время уже прошло
				ПоменятьДень = Истина;
				Прервать;
			КонецЕсли;
			
			// Период повтора в течении дня
			Если ЗначениеЗаполнено(ДатаНачалаПоследнегоЗапуска) Тогда
				
				Если РасписаниеДня.ПериодПовтораВТечениеДня = 0
					И НачалоДня(ДатаДляПроверки) = НачалоДня(ДатаНачалаПоследнегоЗапуска)
					И (НЕ ЗначениеЗаполнено(РасписаниеДня.ВремяНачала) 
						ИЛИ ЗначениеЗаполнено(РасписаниеДня.ВремяНачала) И ВремяНачалаПоследнегоЗапуска >= РасписаниеДня.ВремяНачала)
					И (НЕ ЗначениеЗаполнено(РасписаниеДня.ВремяКонца) 
						ИЛИ ЗначениеЗаполнено(РасписаниеДня.ВремяКонца) И ВремяНачалаПоследнегоЗапуска <= РасписаниеДня.ВремяКонца) Тогда
					
					// В этом интервале (расписании дня) задание уже выполнялось и повторы не установлены
					Если Индекс < ДетальныеРасписания.ВГраница() Тогда
						Продолжить;
					КонецЕсли;
					
					ПоменятьДень = Истина;
					Прервать;
				КонецЕсли;
				
				Если НачалоДня(ДатаДляПроверки) = НачалоДня(ДатаНачалаПоследнегоЗапуска)
					И ВремяДляПроверки - ВремяНачалаПоследнегоЗапуска < РасписаниеДня.ПериодПовтораВТечениеДня Тогда
					
					НовоеВремяДляПроверки = ВремяНачалаПоследнегоЗапуска + РасписаниеДня.ПериодПовтораВТечениеДня;
					
					Если ЗначениеЗаполнено(РасписаниеДня.ВремяКонца) И НовоеВремяДляПроверки > РасписаниеДня.ВремяКонца
						ИЛИ НачалоДня(НовоеВремяДляПроверки) <> НачалоДня(ВремяДляПроверки) Тогда
						
						// Время ушло за интервал
						Если Индекс < ДетальныеРасписания.ВГраница() Тогда
							Продолжить;
						КонецЕсли;
						
						ПоменятьДень = Истина;
						Прервать;
					КонецЕсли;
					
					ВремяДляПроверки = НовоеВремяДляПроверки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Пауза
			Если ЗначениеЗаполнено(ДатаЗавершенияПоследнегоЗапуска) 
				И ЗначениеЗаполнено(РасписаниеДня.ПаузаПовтора) Тогда
				
				ВремяЗавершенияПоследнегоЗапуска = '00010101' + (ДатаЗавершенияПоследнегоЗапуска - НачалоДня(ДатаЗавершенияПоследнегоЗапуска));
				
				Если НачалоДня(ДатаДляПроверки) = НачалоДня(ДатаНачалаПоследнегоЗапуска)
					И ВремяДляПроверки - ВремяЗавершенияПоследнегоЗапуска < РасписаниеДня.ПаузаПовтора Тогда
					
					НовоеВремяДляПроверки = ВремяЗавершенияПоследнегоЗапуска + РасписаниеДня.ПаузаПовтора;
					
					Если ЗначениеЗаполнено(РасписаниеДня.ВремяКонца) И НовоеВремяДляПроверки > РасписаниеДня.ВремяКонца
						ИЛИ НачалоДня(НовоеВремяДляПроверки) <> НачалоДня(ВремяДляПроверки) Тогда
						
						// Время ушло за интервал
						Если Индекс < ДетальныеРасписания.ВГраница() Тогда
							Продолжить;
						КонецЕсли;
						
						ПоменятьДень = Истина;
						Прервать;
					КонецЕсли;
					
					ВремяДляПроверки = НовоеВремяДляПроверки;
					
				КонецЕсли;
			КонецЕсли;
			
			// Нашли подходящее время
			Прервать;
			
		КонецЦикла;
		
		Если ПоменятьДень Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Расписание.ВремяЗавершения)
			И ВремяДляПроверки > Расписание.ВремяЗавершения Тогда
			// В этом дне выполнять поздно
			ПоменятьДень = Истина;
			Продолжить;
		КонецЕсли;
		
		ДатаДляПроверки = НачалоДня(ДатаДляПроверки) + (ВремяДляПроверки - НачалоДня(ВремяДляПроверки));
		
		Возврат ДатаДляПроверки;
		
	КонецЦикла;
	
КонецФункции

Функция КоличествоИсполняющихФоновыхЗаданий()
	
	Отбор = Новый Структура("Наименование, Состояние", ПолучитьНаименованиеИсполняющегоФоновогоЗадания(), СостояниеФоновогоЗадания.Активно); 
	ИсполняющиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор); 
	
	КоличествоРаботающихФоновыхЗаданий = ИсполняющиеФоновыеЗадания.Количество();
	
	Возврат КоличествоРаботающихФоновыхЗаданий;
	
КонецФункции

Функция ПолучитьНаименованиеИсполняющегоФоновогоЗадания()
	
	Возврат "ИсполняющееФоновоеЗадание_5340185be5b240538bc73d9f18ef8df1";
	
КонецФункции

// Возвращает описание параметров заданий очереди
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание параметров, колонки
//   Имя - Строка - имя параметра
//   ИмяВРег - Строка - имя параметра в верхнем регистре
//   Поле - Строка - поле хранения параметра в таблице очереди
//   Тип - ОписаниеТипов - допустимые типы значений параметров
//   Отбор - Булево - параметр допустимо использовать для отбора
//   Добавление - Булево - параметр допустимо указывать при добавлении
//    задания в очередь
//   Изменение - Булево - параметр допустимо изменять 
//
Функция ПараметрыЗаданийОчереди() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ИмяВРег", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("Тип", Новый ОписаниеТипов("ОписаниеТипов"));
	Результат.Колонки.Добавить("Отбор", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Добавление", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Изменение", Новый ОписаниеТипов("Булево"));
	
	ОписаниеПараметра = Результат.Добавить();
	ОписаниеПараметра.Имя = "Идентификатор";
	ОписаниеПараметра.Поле = "Ссылка";
	МассивТипов = Новый Массив();
	ОписаниеПараметра.Тип = Новый ОписаниеТипов("СправочникСсылка.ОчередьЗаданий");
	ОписаниеПараметра.Отбор = Истина;
	
	ОписаниеПараметра = Результат.Добавить();
	ОписаниеПараметра.Имя = "Использование";
	ОписаниеПараметра.Поле = ОписаниеПараметра.Имя;
	ОписаниеПараметра.Тип = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.Отбор = Истина;
	ОписаниеПараметра.Добавление = Истина;
	ОписаниеПараметра.Изменение = Истина;
	
	ОписаниеПараметра = Результат.Добавить();
	ОписаниеПараметра.Имя = "ЗапланированныйМоментЗапуска";
	ОписаниеПараметра.Поле = ОписаниеПараметра.Имя;
	ОписаниеПараметра.Тип = Новый ОписаниеТипов("Дата");
	ОписаниеПараметра.Добавление = Истина;
	ОписаниеПараметра.Изменение = Истина;
	
	ОписаниеПараметра = Результат.Добавить();
	ОписаниеПараметра.Имя = "СостояниеЗадания";
	ОписаниеПараметра.Поле = ОписаниеПараметра.Имя;
	ОписаниеПараметра.Тип = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЗаданий");
	ОписаниеПараметра.Отбор = Истина;
	ОписаниеПараметра.Изменение = Истина;
	
	ОписаниеПараметра = Результат.Добавить();
	ОписаниеПараметра.Имя = "ИмяМетода";
	ОписаниеПараметра.Поле = ОписаниеПараметра.Имя;
	ОписаниеПараметра.Тип = Новый ОписаниеТипов("Строка");
	ОписаниеПараметра.Отбор = Истина;
	ОписаниеПараметра.Добавление = Истина;
	ОписаниеПараметра.Изменение = Истина;
	
	ОписаниеПараметра = Результат.Добавить();
	ОписаниеПараметра.Имя = "Параметры";
	ОписаниеПараметра.Поле = ОписаниеПараметра.Имя;
	ОписаниеПараметра.Тип = Новый ОписаниеТипов("Массив");
	ОписаниеПараметра.Добавление = Истина;
	ОписаниеПараметра.Изменение = Истина;
	
	ОписаниеПараметра = Результат.Добавить();
	ОписаниеПараметра.Имя = "Ключ";
	ОписаниеПараметра.Поле = ОписаниеПараметра.Имя;
	ОписаниеПараметра.Тип = Новый ОписаниеТипов("Строка");
	ОписаниеПараметра.Отбор = Истина;
	ОписаниеПараметра.Добавление = Истина;
	ОписаниеПараметра.Изменение = Истина;
	
	ОписаниеПараметра = Результат.Добавить();
	ОписаниеПараметра.Имя = "ИнтервалПовтораПриАварийномЗавершении";
	ОписаниеПараметра.Поле = ОписаниеПараметра.Имя;
	ОписаниеПараметра.Тип = Новый ОписаниеТипов("Число");
	ОписаниеПараметра.Добавление = Истина;
	ОписаниеПараметра.Изменение = Истина;
	
	ОписаниеПараметра = Результат.Добавить();
	ОписаниеПараметра.Имя = "Расписание";
	ОписаниеПараметра.Поле = ОписаниеПараметра.Имя;
	ОписаниеПараметра.Тип = Новый ОписаниеТипов("РасписаниеРегламентногоЗадания, Неопределено");
	ОписаниеПараметра.Добавление = Истина;
	ОписаниеПараметра.Изменение = Истина;
	
	ОписаниеПараметра = Результат.Добавить();
	ОписаниеПараметра.Имя = "КоличествоПовторовПриАварийномЗавершении";
	ОписаниеПараметра.Поле = ОписаниеПараметра.Имя;
	ОписаниеПараметра.Тип = Новый ОписаниеТипов("Число");
	ОписаниеПараметра.Добавление = Истина;
	ОписаниеПараметра.Изменение = Истина;
	
	ОписаниеПараметра = Результат.Добавить();
	ОписаниеПараметра.Имя = "Наименование";
	ОписаниеПараметра.Поле = ОписаниеПараметра.Имя;
	ОписаниеПараметра.Тип = Новый ОписаниеТипов("Строка");
	ОписаниеПараметра.Отбор = Ложь;
	ОписаниеПараметра.Добавление = Истина;
	ОписаниеПараметра.Изменение = Истина;
	
	ОписаниеПараметра = Результат.Добавить();
	ОписаниеПараметра.Имя = "НавигационнаяСсылкаВладельцаЗадания";
	ОписаниеПараметра.Поле = ОписаниеПараметра.Имя;
	ОписаниеПараметра.Тип = Новый ОписаниеТипов("Строка");
	ОписаниеПараметра.Отбор = Ложь;
	ОписаниеПараметра.Добавление = Истина;
	ОписаниеПараметра.Изменение = Истина;
	
	Для Каждого ОписаниеПараметра Из Результат Цикл
		ОписаниеПараметра.ИмяВРег = ВРег(ОписаниеПараметра.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает часть текста запроса получения заданий для возврата 
// через программный интерфейс.
//
// Параметры:
//  СправочникЗаданий - СправочникМенеджер, менеджер справочника,
//  для которого получаются задания очереди. Используется для фильтрации полей
//  выборки, которые применимы не для всех справочников заданий.
//
Функция ПоляВыборкиОчередиЗаданий() Экспорт
	
	ПоляВыборки = "";
	Для каждого ОписаниеПараметра Из ОчередьЗаданийСлужебный.ПараметрыЗаданийОчереди() Цикл
		
		Если НЕ ПустаяСтрока(ПоляВыборки) Тогда
			ПоляВыборки = ПоляВыборки + "," + Символы.ПС;
		КонецЕсли;
		
		ОписаниеПоляВыборки = "Очередь." + ОписаниеПараметра.Поле + " КАК " + ОписаниеПараметра.Имя;
		
		ПоляВыборки = ПоляВыборки + Символы.Таб + ОписаниеПоляВыборки;
		
	КонецЦикла;
	
	Возврат ПоляВыборки;
	
КонецФункции

// Возвращает допустимые виды сравнения для отбора заданий очереди
Функция ВидыСравненияОтбораЗаданий() Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить(ВидСравнения.Равно, "=");
	Результат.Вставить(ВидСравнения.НеРавно, "<>");
	Результат.Вставить(ВидСравнения.ВСписке, "В");
	Результат.Вставить(ВидСравнения.НеВСписке, "НЕ В");
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

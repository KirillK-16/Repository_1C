
#Область ПрограммныйИнтерфейс

Функция ВыполнитьHTTPЗапрос(Знач ПолныйАдресРесурса, Знач Логин = "", Знач Пароль = "", Знач Выполнений = 10, Знач Печеньки = Неопределено, Таймаут = 30) Экспорт
	
	Если Выполнений < 0 Тогда
		Результат = Новый Структура("КодСостояния, Тело", 423, "Превышено количество перенаправлений.");
		Возврат Результат;
	КонецЕсли;
	
	СтруктураURI = СтруктураURI(ПолныйАдресРесурса, Логин, Пароль);
	
	Если НРег(СтруктураURI.Схема) = "https" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(
        СтруктураURI.Хост, 
	    СтруктураURI.Порт,
	    Логин,
	    Пароль,
	    ,
	    Таймаут,
	    ЗащищенноеСоединение); 
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере); 
	Если Печеньки <> Неопределено Тогда
		HTTPЗапрос.Заголовки.Вставить("Cookie", Печеньки);
	КонецЕсли;
	
	Попытка
		Результат =  HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
		ЗаписьЖурналаРегистрации(
			"Процедура ВыполнитьHTTPЗапрос(...)",
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.ОбщиеМодули.ПубликацииКонтрольДоступности,
			,
			Комментарий);
			
		Результат = Новый Структура("КодСостояния, Тело", 105, Комментарий);
	КонецПопытки;
		
	// Обрабатываем перенаправление
	Если Результат.КодСостояния >= 300 и Результат.КодСостояния < 400  Тогда
		Если Результат.КодСостояния = 301 Тогда
			АдресРесурса = Результат.Заголовки.Получить("Location");
			Если АдресРесурса <> Неопределено Тогда
				НовыйСтруктураURI = СтруктураURI(АдресРесурса, Логин, Пароль);
				Если НЕ ЗначениеЗаполнено(НовыйСтруктураURI.Хост) Тогда
					АдресРесурса = СтруктураURI.Схема + "://" + СтруктураURI.Хост + АдресРесурса;
				КонецЕсли;
				Результат = ВыполнитьHTTPЗапрос(АдресРесурса, СтруктураURI.Логин, СтруктураURI.Пароль, Выполнений-1,,Таймаут);
			КонецЕсли;
		КонецЕсли;
		Если Результат.КодСостояния = 302 Тогда
			АдресРесурса = Результат.Заголовки.Получить("Location");
			Если АдресРесурса <> Неопределено Тогда
				Если Печеньки = Неопределено Тогда
					SetCookie = Результат.Заголовки.Получить("Set-Cookie");
				Иначе
					SetCookie = Печеньки;
				КонецЕсли;
												
				Результат = ВыполнитьHTTPЗапрос(АдресРесурса, СтруктураURI.Логин, СтруктураURI.Пароль, Выполнений-1, SetCookie, Таймаут);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьПроверкуПубликаций () Экспорт
    
    Общий.ПриНачалеВыполненияРегламентногоЗадания();
    
    Результат = ОбщиеДействияПриИтерации(); 
        
    Если Результат.ВыполнятьПроверкуПубликаций Тогда
        ОбработатьВсеРесурсы(Результат);
    КонецЕсли;

КонецПроцедуры

Функция ПолучитьРесурсы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Публикации.Наименование КАК Наименование,
	|	Публикации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Публикации КАК Публикации
	|ГДЕ
	|	Публикации.ВыполнятьКонтроль = ИСТИНА";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуРесурсов()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Публикации.АдресРесурса КАК Наименование,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(250)) КАК Логин,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(250)) КАК Пароль,
	|	ДанныеХранилища КАК ДанныеХранилища,
	|	Публикации.Ссылка КАК Ссылка,
	|	Публикации.ПроверятьТелоОтвета КАК ПроверятьТелоОтвета,
	|	Публикации.ОтветДляСравнения КАК ОтветДляСравнения,
	|	Публикации.ЗапретитьПеренаправление КАК ЗапретитьПеренаправление,
    |   Публикации.Таймаут КАК Таймаут,
    |   Публикации.ПериодКонтроля КАК ПериодКонтроля,
    |   Публикации.МинимальныйПроцентДоступности КАК МинимальныйПроцентДоступности,
    |   Публикации.ПериодичностьКонтроля КАК ПериодичностьКонтроля,
    |   ТекСостояние.ДатаОкончания КАК КрайняяПроверка
	|ИЗ
	|	Справочник.Публикации КАК Публикации
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.БезопасноеХранилище
	|ПО
	|	ВладелецХранилища = Публикации.Ссылка
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.КонтрольПодключенийТекущееСостояние КАК ТекСостояние
    |ПО
    |   ТекСостояние.ИнформационнаяБаза = Публикации.Ссылка
	|ГДЕ
	|	Публикации.ВыполнятьКонтроль = ИСТИНА
    |   И НЕ Публикации.ПометкаУдаления
    |   И РАЗНОСТЬДАТ(ISNULL(ТекСостояние.ДатаОкончания,ДОБАВИТЬКДАТЕ(&ТекущаяДата,СЕКУНДА,-Публикации.ПериодичностьКонтроля)), &ТекущаяДата, СЕКУНДА) >= Публикации.ПериодичностьКонтроля
    |";
    
    Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	ТЗнРесурсы = Запрос.Выполнить().Выгрузить();
    Для Каждого ТекРесурс Из ТЗнРесурсы Цикл
		ДанныеХранилища = ТекРесурс.ДанныеХранилища.Получить();
		ТекРесурс.Логин = ДанныеХранилища.Логин;
		ТекРесурс.Пароль = ДанныеХранилища.Пароль;
	КонецЦикла;
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТЗнРесурсы;
	
КонецФункции

Процедура ОбработатьВсеРесурсы (Результат)
    
    ТаблицаРесурсов = Результат.ТаблицаРесурсов;
    РазмерПулаФоновыхЗаданий = Результат.РазмерПулаФоновыхЗаданий;
    ФоновыеЗаданияПул = Новый Соответствие;
    
    Выполнять = ТаблицаРесурсов.Количество() > 0 ИЛИ ФоновыеЗаданияПул.Количество() > 0;
    Пока Выполнять Цикл
        
        Если ФоновыеЗаданияПул.Количество() < РазмерПулаФоновыхЗаданий Тогда
            
            ТекущийИндексРесурса = ТаблицаРесурсов.Количество() - 1;
            ДобавитьВПул = ТекущийИндексРесурса >= 0;
            
            Пока ДобавитьВПул Цикл
                
                Ресурс = ТаблицаРесурсов[ТекущийИндексРесурса]; 
                
                РесурсФЗ = Новый Структура;
                РесурсФЗ.Вставить("ЗапретитьПеренаправление", Ресурс.ЗапретитьПеренаправление);
                РесурсФЗ.Вставить("Логин", Ресурс.Логин);
                РесурсФЗ.Вставить("Наименование", Ресурс.Наименование);
                РесурсФЗ.Вставить("ОтветДляСравнения", Ресурс.ОтветДляСравнения);
                РесурсФЗ.Вставить("Пароль", Ресурс.Пароль);
                РесурсФЗ.Вставить("ПроверятьТелоОтвета", Ресурс.ПроверятьТелоОтвета);
                РесурсФЗ.Вставить("Ссылка", Ресурс.Ссылка);
                РесурсФЗ.Вставить("Таймаут", Ресурс.Таймаут);
                РесурсФЗ.Вставить("ПериодКонтроля", Ресурс.ПериодКонтроля);
                РесурсФЗ.Вставить("МинимальныйПроцентДоступности", Ресурс.МинимальныйПроцентДоступности);
                
                ПараметрыФЗ = Новый Массив;
                ПараметрыФЗ.Добавить(РесурсФЗ);
                Наименование = "Контроль публикации " + Ресурс.Наименование;
                Ключ = Ресурс.Ссылка.УникальныйИдентификатор();
                Если НЕ ФоновоеЗаданиеАктивно(Ключ) Тогда
                    ФЗ = ФоновыеЗадания.Выполнить("ПубликацииКонтрольДоступности.ОбработатьРесурс", ПараметрыФЗ,Ключ,Наименование);
                КонецЕсли;
                
                ТаблицаРесурсов.Удалить(ТекущийИндексРесурса);
                ТекущийИндексРесурса = ТекущийИндексРесурса - 1;
                ФоновыеЗаданияПул.Вставить(ФЗ.УникальныйИдентификатор, Истина);
                
                ДобавитьВПул = ТекущийИндексРесурса >= 0 И ФоновыеЗаданияПул.Количество() < РазмерПулаФоновыхЗаданий;
                           
            КонецЦикла;
            
            КипВнешнийКомпонент.Пауза(100);
                    
        КонецЕсли;
        
        ЗавершенныеФЗ = Новый Массив;
        Для Каждого УникальныйИдентификаторФЗ Из ФоновыеЗаданияПул Цикл
            ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторФЗ.Ключ);
            Если ФЗ.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
                ЗавершенныеФЗ.Добавить(УникальныйИдентификаторФЗ.Ключ);
            КонецЕсли;
        КонецЦикла;
        
        Для Каждого УникальныйИдентификаторФЗ Из ЗавершенныеФЗ Цикл
            ФоновыеЗаданияПул.Удалить(УникальныйИдентификаторФЗ);
        КонецЦикла;
        
        Выполнять = ТаблицаРесурсов.Количество() > 0 ИЛИ ФоновыеЗаданияПул.Количество() > 0;
                
    КонецЦикла;
        
КонецПроцедуры

Процедура ОбработатьРесурс(Ресурс) Экспорт
    
    ПодключениеУспешно = Истина;
    Если Ресурс.ЗапретитьПеренаправление Тогда
        КоличествоПеренаправлений = 0;
    Иначе
        КоличествоПеренаправлений = 10;
    КонецЕсли;
    
    Попытка
        НачалоПодключения = ТекущаяУниверсальнаяДатаВМиллисекундах();
        Результат = ВыполнитьHTTPЗапрос(Ресурс.Наименование, Ресурс.Логин, Ресурс.Пароль, КоличествоПеренаправлений,,Ресурс.Таймаут);
        ДлительностьПодключения = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоПодключения;
    Исключение
        Комментарий = "Ресурс: " + Ресурс.Наименование + ". " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        
        ЗаписьЖурналаРегистрации(
        "Процедура ОбработатьВсеРесурсы (Знач ТаблицаРесурсов)",
        УровеньЖурналаРегистрации.Ошибка,
        Метаданные.ОбщиеМодули.ПубликацииКонтрольДоступности,
        ,
        Комментарий);
        
        ПодключениеУспешно = Ложь;
        ДополнительнаяИнформация = Комментарий;
    КонецПопытки;
    
    // Анализируем фатальные ошибки
    Если Результат.КодСостояния >= 400 и Результат.КодСостояния < 500  Тогда
        Комментарий = "Ресурс: " + Ресурс.Наименование + ". " + "Код статуса 4XX, ошибка запроса.  Код статуса: " + Результат.КодСостояния;
        ЗаписьЖурналаРегистрации(
        "Процедура ОбработатьВсеРесурсы (Знач ТаблицаРесурсов)",
        УровеньЖурналаРегистрации.Предупреждение,
        Метаданные.ОбщиеМодули.ПубликацииКонтрольДоступности,
        ,
        Комментарий);
        ПодключениеУспешно = Ложь;
        ДополнительнаяИнформация = Комментарий;
    КонецЕсли;
    
    Если Результат.КодСостояния >= 500 и Результат.КодСостояния < 600  Тогда
        Комментарий = "Ресурс: " + Ресурс.Наименование + ". " + "Код статуса 5XX, ошибка сервера. Код статуса: " + Результат.КодСостояния;
        ЗаписьЖурналаРегистрации(
        "Процедура ОбработатьВсеРесурсы (Знач ТаблицаРесурсов)",
        УровеньЖурналаРегистрации.Предупреждение,
        Метаданные.ОбщиеМодули.ПубликацииКонтрольДоступности,
        ,
        Комментарий);
        ПодключениеУспешно = Ложь;
        ДополнительнаяИнформация = Комментарий;
    КонецЕсли;
    
    Если Результат.КодСостояния >= 300 И Результат.КодСостояния < 400 Тогда
        Комментарий = "Ресурс: " + Ресурс.Наименование + ". " + "Код статуса 3XX, ошибка перенаправления. Код статуса: " + Результат.КодСостояния;
        ЗаписьЖурналаРегистрации(
        "Процедура ОбработатьВсеРесурсы (Знач ТаблицаРесурсов)",
        УровеньЖурналаРегистрации.Предупреждение,
        Метаданные.ОбщиеМодули.ПубликацииКонтрольДоступности,
        ,
        Комментарий);
        ПодключениеУспешно = Ложь;
        ДополнительнаяИнформация = Комментарий;
    КонецЕсли;
    
    
    // Статусы 1XX и 2XX считаем хорошими
    Если Результат.КодСостояния < 300 Тогда
        Если Результат.КодСостояния <> 105 Тогда
            Если Ресурс.ПроверятьТелоОтвета Тогда
                Если Ресурс.ОтветДляСравнения <> Результат.ПолучитьТелоКакСтроку() Тогда
                    Комментарий = "Ресурс: " + Ресурс.Наименование + ". " + "Ответ не соответствует заданному";
                    ЗаписьЖурналаРегистрации(
                    "Процедура ОбработатьВсеРесурсы (Знач ТаблицаРесурсов)",
                    УровеньЖурналаРегистрации.Предупреждение,
                    Метаданные.ОбщиеМодули.ПубликацииКонтрольДоступности,
                    ,
                    Комментарий);
                    ПодключениеУспешно = Ложь;
                    ДополнительнаяИнформация = Комментарий;
                КонецЕсли;
            КонецЕсли;
        Иначе
            Комментарий = "Ресурс: " + Ресурс.Наименование + ". " + "Код статуса 105. " + Результат.Тело;
            ЗаписьЖурналаРегистрации(
            "Процедура ОбработатьВсеРесурсы (Знач ТаблицаРесурсов)",
            УровеньЖурналаРегистрации.Предупреждение,
            Метаданные.ОбщиеМодули.ПубликацииКонтрольДоступности,
            ,
            Комментарий);
            ПодключениеУспешно = Ложь;
            ДополнительнаяИнформация = Комментарий;
        КонецЕсли;
    КонецЕсли;
    
    Если ПодключениеУспешно Тогда
        ДополнительнаяИнформация = "Код статуса: " + Результат.КодСостояния;
    КонецЕсли;
    
    Данные = Новый Массив;
    
    ЭлементДанных = Новый Соответствие;
    
    ИмяСчетчикаМассив = Новый Массив;
    ИмяСчетчикаМассив.Добавить("Длительность подключения");
    ИмяСчетчикаМассив.Добавить("Доступность ресурсов");
    ИмяСчетчикаМассив.Добавить(Ресурс.Наименование + ", мс");
    
    ЭлементДанных.Вставить("name", ИмяСчетчикаМассив);
    ЭлементДанных.Вставить("counter", 1);
    ЭлементДанных.Вставить("min", ДлительностьПодключения);
    ЭлементДанных.Вставить("max", ДлительностьПодключения);
    ЭлементДанных.Вставить("avg", ДлительностьПодключения);
    
    Данные.Добавить(ЭлементДанных);
    
    ЭлементДанных = Новый Соответствие;
    
    ИмяСчетчикаМассив = Новый Массив;
    ИмяСчетчикаМассив.Добавить("Длительность подключения");
    ИмяСчетчикаМассив.Добавить("Доступность ресурсов");
    ИмяСчетчикаМассив.Добавить(Ресурс.Наименование + ", мс");
    ИмяСчетчикаМассив.Добавить("Код состояния " + Результат.КодСостояния);
    
    ЭлементДанных.Вставить("name", ИмяСчетчикаМассив);
    ЭлементДанных.Вставить("counter", 1);
    ЭлементДанных.Вставить("min", ДлительностьПодключения);
    ЭлементДанных.Вставить("max", ДлительностьПодключения);
    ЭлементДанных.Вставить("avg", ДлительностьПодключения);
    
    Данные.Добавить(ЭлементДанных);
    
    ЗаписьJSON = Новый ЗаписьJSON();
    ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
    ЗаписатьJSON(ЗаписьJSON, Данные);
    ДанныеJSON = ЗаписьJSON.Закрыть();
    
    РегистрыСведений.СтатистикаБуфер.ДобавитьДанные(ДанныеJSON);
    
    ЗаписатьДанныеОДоступности(Ресурс, ПодключениеУспешно, ДополнительнаяИнформация);
    
КонецПроцедуры

// Записывает состояние ресурса: доступен / недоступен
// 
// Параметры:
//  Ресурс - СправочникСсылка.Публикации
//  Доступность - Число - 1 или 0
//
Процедура ЗаписатьДанныеОДоступности(ПараметрыЗаписи, Доступность, ДополнительнаяИнформация)
    
    Ресурс = ПараметрыЗаписи.Ссылка;
	
	ТекущаяДата = ТекущаяДата();
	
	АктуальноеСостояние = РегистрыСведений.ДоступностьСайта.СрезПоследних(
		ТекущаяДата,
		Новый Структура("Ресурс", Ресурс)
	);
	
	ИзменитьДоступность = Истина;
	Если АктуальноеСостояние.Количество() = 0 И Доступность = Ложь Тогда
		// дублировать состояние не требуется
		ИзменитьДоступность = Ложь;
	КонецЕсли;
	
	Если АктуальноеСостояние.Количество() <> 0 И АктуальноеСостояние[0].Доступность = Доступность Тогда
		// дублировать состояние не требуется
		ИзменитьДоступность = Ложь;
	КонецЕсли;
    
    Если ИзменитьДоступность Тогда
        
        Запись = РегистрыСведений.ДоступностьСайта.СоздатьМенеджерЗаписи();
        Запись.Доступность = Доступность;
        Запись.Ресурс = Ресурс;
        Запись.Период = ТекущаяДата;
        Запись.ДополнительнаяИнформация = ДополнительнаяИнформация;
        Запись.Записать();
        
    КонецЕсли;
    
    ТекущийПроцентДоступности = РегистрыСведений.ДоступностьСайта.ТекущийПроцентДоступности(Ресурс, ПараметрыЗаписи.ПериодКонтроля);
    
    Если ТекущийПроцентДоступности <> -1 Тогда
        
        // Тип инцидента "Публикация"
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента("Публикация");
        ТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, "Публикация", Перечисления.УровниИнцидентов.Ошибка);
        
        ДанныеХеша = "Публикация/" + Ресурс.УникальныйИдентификатор();
        Хеш = Справочники.Инциденты.ХешИнцидента(ДанныеХеша);
        Инцидент = Справочники.Инциденты.СоздатьЭлементПоХешу(Хеш, "Публикация/" + Ресурс.Наименование);
        
        Если ТекущийПроцентДоступности < ПараметрыЗаписи.МинимальныйПроцентДоступности Тогда
            Сообщение = "Публикация " + Ресурс.Наименование + " не доступна!";
            
            СсылкаНаСчетчикПроизводительности = Справочники.ГруппыСчетчиков.НайтиПоПолномуКоду("Длительность подключения/Доступность ресурсов/" + Ресурс + ", мс");
            Если СсылкаНаСчетчикПроизводительности = Неопределено Тогда
                СсылкаНаСчетчикПроизводительности = "";
            КонецЕсли;
            
            НавигационнаяСсылкаИсточника = Новый Структура("НавигационнаяСсылка, Представление", ПолучитьНавигационнуюСсылку(Ресурс), "Публикация: " + Строка(Ресурс));
            
            ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, Инцидент, Ресурс,, Сообщение, 1,,,,СсылкаНаСчетчикПроизводительности, НавигационнаяСсылкаИсточника);
            
        Иначе
            
            ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, Инцидент, Истина);
            
        КонецЕсли;
        
    КонецЕсли;
    
    ЗакрытьИнцидентПубликацияНетДанных(Ресурс);
    
    Параметры = Новый Структура("ИнформационнаяБаза, ТекущийПроцентДоступности, Источник", Ресурс, ТекущийПроцентДоступности, Справочники.ОбъектыКонтроля.ЦентрКонтроляКачества());
	РегистрыСведений.КонтрольПодключенийТекущееСостояние.ЗаписатьТекущееСостояние(Параметры, ?(Доступность = 1, Истина, Ложь));
    
КонецПроцедуры

Процедура ЗакрытьИнцидентПубликацияНетДанных(Ресурс)
    
    // Тип инцидента "НедоступностьНетДанных"
    НаименованиеТипаИнцидента = "НедоступностьНетДанных";
    ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
    ТипИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Предупреждение);
    
    // Инцидент "Публикация"
    ХешИнцидентаПубликация = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(Ресурс.УникальныйИдентификатор()));
    Инцидент = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидентаПубликация, "Публикация/" + Ресурс.Наименование, Ложь);
    
    ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, Инцидент, Истина);
    
КонецПроцедуры

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//    
//     <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>
//               \______________/ \___________/
//                      |               |
//           	   авторизация     имя сервера
//               \____________________________/ \________________________/
//                              |                            |
//                       строка соединения            путь на сервере
//
// Возвращаемое значение:
//  Структура:
//             Схема         - Строка;
//             Логин         - Строка; 
//             Пароль        - Строка;
//             ИмяСервера    - Строка;
//             Хост          - Строка; 
//             Порт          - Строка; 
//             ПутьНаСервере - Строка;
//
Функция СтруктураURI(Знач СтрокаURI, Знач ПарамЛогин = "", Знач ПарамПароль = "")
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Если ПарамЛогин = "" И ПарамПароль = "" Тогда
		Позиция = СтрНайти(СтрокаАвторизации, ":");
		Если Позиция > 0 Тогда
			Логин = Лев(СтрокаАвторизации, Позиция - 1);
			Пароль = Сред(СтрокаАвторизации, Позиция + 1);
		КонецЕсли;
	Иначе
		Логин = ПарамЛогин;
		Пароль = ПарамПароль;
	КонецЕсли;

		
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ФоновоеЗаданиеАктивно(Ключ)
    
    Результат = Истина;
    
    Отбор = Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно);
    ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
        
    Если ФЗ.Количество() = 0 Тогда
        Результат = Ложь;
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

Функция ОбщиеДействияПриИтерации()
    
    Результат = Новый Структура("ВыполнятьПроверкуПубликаций, РазмерПулаФоновыхЗаданий, ТаблицаРесурсов", Ложь, Неопределено, Неопределено);
    
    ВыполнятьПроверкуПубликаций = Константы.ВыполнятьПроверкуПубликаций.Получить();
    Результат.ВыполнятьПроверкуПубликаций = ВыполнятьПроверкуПубликаций;
    
    Если ВыполнятьПроверкуПубликаций Тогда
        
        Результат.РазмерПулаФоновыхЗаданий = Константы.РазмерПулаПроверкиПубликаций.Получить();
        Результат.ТаблицаРесурсов = ПолучитьТаблицуРесурсов();        
        
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////
// Методы, возвращающие неизменные в течении сеанса значения   
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращаемое значение:
//  Строка 
//
Функция ТемаОповещенияЗадачи() Экспорт
	
	Возврат "Критическая ситуация в работе информационной системы";
	
КонецФункции

// Возвращаемое значение:
//  Строка 
//
Функция ТемаОповещенияМониторинг() Экспорт
	
	Возврат "Критическая ситуация в работе информационной системы";
	
КонецФункции

// Возвращаемое значение:
//  Строка 
//
Функция ИмяСвойстваСохраняемыйПарольПользователя() Экспорт
	
	Возврат "СохраняемыйПарольПользователя";
	
КонецФункции

// Возвращаемое значение:
//  Строка 
//
Функция ИмяСвойстваНеВыполнятьСинхронизациюПользователя() Экспорт
	
	Возврат "НеВыполнятьСинхронизациюПользователя";
	
КонецФункции

// Возвращаемое значение:
//  Строка 
//
Функция ОбозначениеТегаПуть() Экспорт
	Возврат "Каталог";
КонецФункции	

// Возвращаемое значение:
//  Строка 
//
Функция ОбозначениеТегаСкрыто() Экспорт
	Возврат "Скрыто";
КонецФункции

// Возвращаемое значение:
//  Строка 
//
Функция ОбозначениеТегаПароль() Экспорт
	Возврат "Пароль";
КонецФункции

// Возвращаемое значение:
//  Строка 
//
Функция ОбозначениеТегаОбрабатыватьИзменения() Экспорт
	Возврат "ОбрабатыватьИзменения";
КонецФункции

// Возвращаемое значение:
//  Массив строковых переменных 
//
Функция МассивСимволовЛогическихДисков() Экспорт	
	СимволыДисков = Новый Массив;
	ТекущийСимвол = "A";		
	Пока Истина Цикл
		СимволыДисков.Добавить(ТекущийСимвол);
		Если ТекущийСимвол = "Z" Тогда
			Прервать; 
		КонецЕсли;	
		
		ТекущийСимвол = Символ(КодСимвола(ТекущийСимвол) + 1);			
	КонецЦикла;
	Возврат СимволыДисков;
КонецФункции

// Возвращает тип платформы сервера.
//
// Возвращаемое значение:
// ТипПлатформы; Неопределено.
//
Функция ТипПлатформыСервера(ВызовСервера = Истина) Экспорт
	
#Если Сервер Тогда
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Возврат СистемнаяИнфо.ТипПлатформы;
#Иначе
	Если ВызовСервера Тогда
		ТипПлатформыСервераСтрокой = ОбщийВызовСервера.ТипПлатформыСервераСтрокой();
		
		Если ТипПлатформыСервераСтрокой = "Linux_x86" Тогда
			Возврат ТипПлатформы.Linux_x86;
			
		ИначеЕсли ТипПлатформыСервераСтрокой = "Linux_x86_64" Тогда
			Возврат ТипПлатформы.Linux_x86_64;
			
		ИначеЕсли ТипПлатформыСервераСтрокой = "Windows_x86" Тогда
			Возврат ТипПлатформы.Windows_x86;
			
		ИначеЕсли ТипПлатформыСервераСтрокой = "Windows_x86_64" Тогда
			Возврат ТипПлатформы.Windows_x86_64;
		КонецЕсли;
		
		Возврат Неопределено;
	Иначе
		СистемнаяИнфо = Новый СистемнаяИнформация;
		Возврат СистемнаяИнфо.ТипПлатформы;
	КонецЕсли;
#КонецЕсли

КонецФункции

Функция СекундВПятиМинутах() Экспорт
	Возврат 60*5;
КонецФункции

Функция МинутаВСекунды() Экспорт
	Возврат 60;
КонецФункции

Функция ЧасВСекунды() Экспорт
	Возврат 60*60;
КонецФункции

Функция ДеньВСекунды() Экспорт
	Возврат ЧасВСекунды()*24;
КонецФункции

Функция НеделяВСекунды() Экспорт
	Возврат ДеньВСекунды()*7;
КонецФункции

Функция МесяцВСекунды() Экспорт
	Возврат ДеньВСекунды()*31;
КонецФункции

Функция КварталВСекунды() Экспорт
	Возврат МесяцВСекунды() * 3;
КонецФункции

Функция ГодВСекунды() Экспорт
	Возврат КварталВСекунды()*4;
КонецФункции

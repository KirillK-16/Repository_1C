Функция СоздатьСценарийСПараметрами(Единица, ТипЕдиницы, Сценарий, Параметры, ДатаСтарта = Неопределено) Экспорт
	// найдем единицу для сценария
	Если ТипЕдиницы = Перечисления.ТипыГруппировокЕдиницАвтоматизации.Сервер Тогда
		ЕдиницаДляСценария = Справочники.АгентыКИП.НайтиПоНаименованию(Единица);
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ГруппыЕдиницАвтоматизацииСоставГруппы.ЕдиницаАвтоматизации КАК ЕдиницаАвтоматизации,
		                      |	ГруппыЕдиницАвтоматизацииСоставГруппы.РольВСценариях КАК РольВСценариях
		                      |ИЗ
		                      |	Справочник.ГруппыЕдиницАвтоматизации.СоставГруппы КАК ГруппыЕдиницАвтоматизацииСоставГруппы
		                      |ГДЕ
		                      |	ГруппыЕдиницАвтоматизацииСоставГруппы.Ссылка.Наименование = &Наименование
		                      |	И ГруппыЕдиницАвтоматизацииСоставГруппы.Ссылка.ТипГруппы = &ТипГруппы");
		Запрос.УстановитьПараметр("Наименование", Единица);
		Запрос.УстановитьПараметр("ТипГруппы", ТипЕдиницы);
		
		ЕдиницаДляСценария = Запрос.Выполнить().Выгрузить();
		Если ЕдиницаДляСценария.Количество() = 0 Тогда
			ЕдиницаДляСценария = Неопределено;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЕдиницаДляСценария <> Неопределено Тогда
		// создаем Экземпляр
		Возврат СоздатьНовыйЭкземплярПоВходящимПараметрам(ЕдиницаДляСценария, Сценарий, Параметры, ДатаСтарта)
	КонецЕсли;	
КонецФункции

Функция СоздатьНовыйЭкземплярПоВходящимПараметрам(ЕдиницаДляСценария, Сценарий, ПараметрыЗаполнения, ДатаСтарта, Контур = Неопределено)
	НачатьТранзакцию();
	Попытка
		СоздаваемыйЭкземпляр = Справочники.ЭкземплярыСценариевАвтоматизации.СоздатьЭлемент();
		
		СсылкаНового = Справочники.ЭкземплярыСценариевАвтоматизации.ПолучитьСсылку(Новый УникальныйИдентификатор);
		СоздаваемыйЭкземпляр.УстановитьСсылкуНового(СсылкаНового);
		
		СоздаваемыйЭкземпляр.Владелец = Сценарий;
		СоздаваемыйЭкземпляр.КонтурАвтоматизации = Контур;
		СоздаваемыйЭкземпляр.РежимВыполнения = Сценарий.РежимВыполнения;
		СоздаваемыйЭкземпляр.Состояние = Перечисления.СостоянияСценария.НеЗапланирован;
		СоздаваемыйЭкземпляр.ПлановаяДатаЗапуска = ДатаСтарта;
		
		СоздаваемыйЭкземпляр.ЗаполнитьЭкземплярНаСервере();
		
		// заполним оборудование
		ВыполнитьСопоставлениеОборудованияПоГруппировочнойЕдинице(ЕдиницаДляСценария, СоздаваемыйЭкземпляр.СопоставлениеШаблоновОборудования);
		
		ШагиАвтоматизации = Справочники.ШагиАвтоматизации.Выбрать(, СсылкаНового, Новый Структура("ТипШага", Перечисления.ТипыЭлементовСхемыСценария.Шаг));
		Пока ШагиАвтоматизации.Следующий() Цикл
			НайденнаяСтрока = СоздаваемыйЭкземпляр.СопоставлениеШаблоновОборудования.Найти(ШагиАвтоматизации.ШаблонОборудования);
			Если НайденнаяСтрока <> Неопределено Тогда
				ОбъектШаг = ШагиАвтоматизации.ПолучитьОбъект();
				ОбъектШаг.Оборудование = НайденнаяСтрока.РеальноеЗначение;
				ОбъектШаг.Записать();
			КонецЕсли;
		КонецЦикла;	
		
		// перезаполним значения шаблонов из параметров
		Для Каждого Параметр Из ПараметрыЗаполнения Цикл
			НЗ = РегистрыСведений.ШаблоныЗаполненияПараметровСценариев.СоздатьНаборЗаписей();
			НЗ.Отбор.ЭкземплярСценария.Установить(СсылкаНового);
			НЗ.Отбор.ИмяШаблона.Установить(ВРег(Параметр.Ключ));
			НЗ.Прочитать();
			Если НЗ.Количество() > 0 Тогда
				Для Каждого Запись Из НЗ Цикл
					Запись.Значение = Параметр.Значение;
					Запись.Объект = Новый ХранилищеЗначения(Параметр.Значение);
				КонецЦикла;	
				НЗ.Записать();
			КонецЕсли;
		КонецЦикла;
		
		НЗ = РегистрыСведений.ШаблоныЗаполненияПараметровСценариев.СоздатьНаборЗаписей();
		НЗ.Отбор.ЭкземплярСценария.Установить(СсылкаНового);
		НЗ.Прочитать();
		
		ВыгрузкаШаблонов = НЗ.Выгрузить();
		
		МассивТипов = Справочники.ТипВсеСсылки().Типы();
		МассивТипов.Добавить(Тип("Строка"));
		
		ВыгрузкаШаблонов.Колонки.Добавить("ОбъектВыгруженный", Новый ОписаниеТипов(МассивТипов));
		Для каждого Строка Из ВыгрузкаШаблонов Цикл
			Строка.ОбъектВыгруженный = Строка.Объект.Получить();
		КонецЦикла;	
				
		Запрос = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьЗапросДляОбработкиВложенныхПараметров(ВыгрузкаШаблонов, "ОбъектВыгруженный");
		
		ВыборкаВерхнегоУровня = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВерхнегоУровня.Следующий() Цикл
			ВыборкаВложенных  = ВыборкаВерхнегоУровня.Выбрать();
			СтроковыйПараметр = "";
			Пока ВыборкаВложенных.Следующий() Цикл
				Если СтроковыйПараметр = "" Тогда
					СтроковыйПараметр = ВыборкаВложенных.Объект;
				КонецЕсли;	
				СтроковыйПараметр = СтрЗаменить(СтроковыйПараметр, ВыборкаВложенных.ИмяШаблонаВложенного, ВыборкаВложенных.ЗначениеВложенного);
			КонецЦикла;	
			
			НЗ = РегистрыСведений.ШаблоныЗаполненияПараметровСценариев.СоздатьНаборЗаписей();
			НЗ.Отбор.ЭкземплярСценария.Установить(СсылкаНового);
			НЗ.Отбор.ИмяШаблона.Установить(ВыборкаВерхнегоУровня.ИмяШаблона);
			НЗ.Прочитать();
			
			Для Каждого Запись Из НЗ Цикл
				Запись.Значение = СтроковыйПараметр;
			КонецЦикла;
			
			НЗ.Записать();

		КонецЦикла;	
			
		ТаблицаШаблонов = НЗ.Выгрузить();
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Таб.Значение КАК Значение,
		                      |	Таб.ИмяШаблона КАК Шаблон
		                      |ПОМЕСТИТЬ ТабЛицаШаблонов
		                      |ИЗ
		                      |	&ТабЛицаШаблонов КАК Таб
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ПараметрыШаговАвтоматизации.ИдентификаторШага КАК ИдентификаторШага,
		                      |	ПараметрыШаговАвтоматизации.Команда КАК Команда,
		                      |	ПараметрыШаговАвтоматизации.Параметр КАК Параметр,
		                      |	ТабЛицаШаблонов.Значение КАК Значение,
		                      |	ПараметрыШаговАвтоматизации.ШаблонЗаполнения КАК ШаблонЗаполнения
		                      |ИЗ
		                      |	РегистрСведений.ПараметрыШаговАвтоматизации КАК ПараметрыШаговАвтоматизации
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабЛицаШаблонов КАК ТабЛицаШаблонов
		                      |		ПО (ПараметрыШаговАвтоматизации.ИдентификаторШага.Владелец = &Владелец)
		                      |			И ПараметрыШаговАвтоматизации.ШаблонЗаполнения = ТабЛицаШаблонов.Шаблон
		                      |			И ПараметрыШаговАвтоматизации.Значение <> ТабЛицаШаблонов.Значение
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |УНИЧТОЖИТЬ ТабЛицаШаблонов");
		Запрос.УстановитьПараметр("ТабЛицаШаблонов", ТаблицаШаблонов);
		Запрос.УстановитьПараметр("Владелец", СсылкаНового);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НЗ = РегистрыСведений.ПараметрыШаговАвтоматизации.СоздатьНаборЗаписей();
			НЗ.Отбор.ИдентификаторШага.Установить(Выборка.ИдентификаторШага);
			НЗ.Отбор.Команда.Установить(Выборка.Команда);
			НЗ.Отбор.Параметр.Установить(Выборка.Параметр);
			Запись = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			НЗ.Записать();
		КонецЦикла;	
		
		СоздаваемыйЭкземпляр.СформироватьНаименованиеНаСервере();
		
		СоздаваемыйЭкземпляр.Записать();

		ЗафиксироватьТранзакцию();
		
		Возврат СоздаваемыйЭкземпляр.Ссылка;
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Копирование сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;		
	КонецПопытки;	
КонецФункции	

Процедура ВыполнитьСопоставлениеОборудованияПоГруппировочнойЕдинице(ЕдиницаДляСценария, ТаблицаДляЗаполнения) Экспорт
	Если ТипЗнч(ЕдиницаДляСценария) = Тип("СправочникСсылка.АгентыКИП") Тогда
		Для Каждого Строка Из ТаблицаДляЗаполнения Цикл
			Строка.РеальноеЗначение = ЕдиницаДляСценария;
		КонецЦикла;	
	Иначе
		Для каждого Строка Из ЕдиницаДляСценария Цикл
			НайденныеСтроки = ТаблицаДляЗаполнения.НайтиСтроки(Новый Структура( "Шаблон", Строка.РольВСценариях));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.РеальноеЗначение = Строка.ЕдиницаАвтоматизации;
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	
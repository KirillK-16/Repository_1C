////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции, которые могут вызываться как с клиента 
// так и с сервера 
//  
////////////////////////////////////////////////////////////////////////////////

Функция ЭтоАдресIP4(Адрес) Экспорт
    
    ШаблонПроверки = "^(25[012345]|2[01234]\d|1?\d\d?|0?\d\d?|\d)\.(25[012345]|2[01234]\d|1?\d\d?|0?\d\d?|\d)\.(25[012345]|2[01234]\d|1?\d\d?|0?\d\d?|\d)\.(25[012345]|2[01234]\d|1?\d\d?|0?\d\d?|\d)$";
    Возврат РегулярныеВыраженияКлиентСервер.СоответствуетШаблонуПоиска(Адрес, ШаблонПроверки);
    
КонецФункции

// Определить символ разделителя каталогов по строке пути
//
// Возвращаемое значение:
//  Каталог - Строка - путь к каталогу
//
Функция РазделительКаталоговОпределитьПоКаталогу(Каталог) Экспорт
	Возврат ?(Найти(Каталог, "\") <> 0, "\", "/");
КонецФункции	

// Форматирует файловый путь, удаляя лишние символы
//
// Параметры:
//  Каталог - Строка - путь к каталогу
//
// Возвращаемое значение:
//  Строка 
//
Функция РазобратьИмяКаталога(Каталог) Экспорт
	РазделительКаталогов = РазделительКаталоговОпределитьПоКаталогу(Каталог);
	Каталог = СокрЛП(Каталог);
	Возврат УбратьРазделителиНаКонцеИмениФайла(
		Каталог,
		РазделительКаталогов
	);
КонецФункции

// Собирает путь из отдельных частей 
//
// Параметры:
//  ЧастиПути - Массив строк
//	Разделитель - Строка
//
// Возвращаемое значение:
//  Строка 
//
Функция СформироватьПуть(ЧастиПути, Разделитель = Неопределено) Экспорт	
	Если ЧастиПути.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;	
	
	ПерваяЧастьПути = СокрЛП(ЧастиПути[0]);
	Если Разделитель = Неопределено Тогда		
		Разделитель = ?(
			ВРег(Лев(ПерваяЧастьПути, 3)) = "FTP", 
			"/", 
			ОбщийКлиентСервер.РазделительКаталоговОпределитьПоКаталогу(ПерваяЧастьПути)
		);
	КонецЕсли;	
	
	ОбщийПуть = "";
	ЭтоПерваяЧасть = Истина;
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		ОбщийПуть = ОбщийПуть + ?(ЭтоПерваяЧасть, "", Разделитель) + СокрЛП(ЧастьПути); 		
		ЭтоПерваяЧасть = Ложь;
	КонецЦикла;	
	Возврат ОбщийПуть;
	
КонецФункции	

// Текст сообщения от ЦКК для проверки параметров оповещения
//
// Параметры:
//	ИмяЦКК - Строка
//
// Возвращаемое значение:
//  Строка - имя созданного архива
//
Функция ТекстПилотногоСообщения(ИмяЦКК) Экспорт
	Возврат "Тестовое сообщение от Центра Контроля Качества """ + ИмяЦКК + """";
КонецФункции

// Разделить строку на составляющие по разделителю и поместить
// части строки в массив
//
// Параметры:
//  РазделяемаяСтрока - Строка, которую нужно разделить
//  Разделитель - Строка, символ разделяющий части строки
//  ПустыеСтроки - Булево, Истина - включать пустые строки в результат,
//                 Ложь - не включать пустые строки в результат
//
// Возвращаемое значение:
//  Массив - части строк
//
Функция РазделитьСтроку(ИсходнаяСтрока, Разделитель, ПустыеСтроки = Ложь) Экспорт
	
	Результат = Новый Массив;
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	ТекущаяСтрока = "";
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(ИсходнаяСтрока, Сч, 1);
		
		Если ТекущийСимвол = Разделитель Тогда
			
			ОбработаннаяСтрока = СокрЛП(ТекущаяСтрока);
			
			Если Не ПустаяСтрока(ОбработаннаяСтрока) Или ПустыеСтроки Тогда
				Результат.Добавить(ОбработаннаяСтрока);
			КонецЕсли;
			
			ТекущаяСтрока = "";
			
		Иначе
			ТекущаяСтрока = ТекущаяСтрока + ТекущийСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработаннаяСтрока = СокрЛП(ТекущаяСтрока);
	
	Если Не ПустаяСтрока(ОбработаннаяСтрока) Тогда
		Результат.Добавить(ОбработаннаяСтрока);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // РазделитьСтроку()

// Объединить строку из массива
// части строки в массив
//
// Параметры:
//  МассивСтрок - Строка, строки, которые нужно объединить
//  Разделитель - Строка, символ разделяющий части строки
//
// Возвращаемое значение:
//  Строка - объединенная строка
//
Функция ОбъединитьСтроку(МассивСтрок, Разделитель) Экспорт
	
	Результат = "";
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + Разделитель;
		КонецЕсли;
		
		Результат = Результат + СтрокаМассива;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ОбъединитьСтроку()

// Текст разделяющий отдельные пункты поручения 
// в поручениях к задачам
//
// Возвращаемое значение:
//  Строка
//
Функция РазделительРезультатов() Экспорт	
	Возврат " +++ ";
КонецФункции

// Добавляет в конец строки другую строку и разделитель 
//
// Параметры:
// 	Строка, Разделитель, ДобавляемоеЗначение - Строки
//
// Возвращаемое значение:
//  Строка
//
Процедура ДобавитьЗначениеКСтрокеЧерезРазделитель(Строка, Разделитель, ДобавляемоеЗначение) Экспорт
	Если ПустаяСтрока(Строка) Тогда
		Строка = Строка(ДобавляемоеЗначение);
	ИначеЕсли Не ПустаяСтрока(ДобавляемоеЗначение) Тогда
		Строка = Строка(Строка) + Разделитель + ДобавляемоеЗначение;
	КонецЕсли;
КонецПроцедуры

// Принимает строку почтового адреса в виде
// "name <addr@dom>"
// Возвращает:
// Результат (Структура)
// - Адрес (Строка) - addr@dom
// - ОтображаемоеИмя (Строка) - name
// - Пользователь (Строка)-  addr
// - Домен (Строка) - dom
//
Функция РазложитьПредставлениеАдресаЭлектроннойПочты(Знач АдресЭлектроннойПочтыСтр) Экспорт
	
	Результат = Новый Структура("Адрес, ОтображаемоеИмя, Пользователь, Домен", "", "", "", "");
	
	АдресЭлектроннойПочтыСтр = СокрЛП(АдресЭлектроннойПочтыСтр);
	
	Поз = СтрНайти(АдресЭлектроннойПочтыСтр, "@");
	Если Поз = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	СтрокаАдреса = "";
	ПозицияПервогоСимволаАдреса = 0;
	ПозицияПоследнегоСимволаАдреса = 0;
	
	// Идем влево от @
	Для Индекс = 0 По Поз - 1 Цикл
		
		ИндексВСтроке = Поз - Индекс;
		СтрокаАдресаПроверка = Сред(АдресЭлектроннойПочтыСтр, ИндексВСтроке, 1) + СтрокаАдреса;
		
		Если СтрокаСодержитТолькоДопустимыеСимволы(СтрокаАдресаПроверка) Тогда
			СтрокаАдреса = СтрокаАдресаПроверка;
			ПозицияПервогоСимволаАдреса = ИндексВСтроке;
		Иначе
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
	// Идем вправо от @
	Для ИндексВСтроке = Поз + 1 По СтрДлина(АдресЭлектроннойПочтыСтр) Цикл
		
		СтрокаАдресаПроверка = СтрокаАдреса + Сред(АдресЭлектроннойПочтыСтр, ИндексВСтроке, 1);
		
		Если СтрокаСодержитТолькоДопустимыеСимволы(СтрокаАдресаПроверка) Тогда
			СтрокаАдреса = СтрокаАдресаПроверка;
			ПозицияПоследнегоСимволаАдреса = ИндексВСтроке;
		Иначе
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Результат.Адрес = СтрокаАдреса;
	// слева от адреса берем представление
	Результат.ОтображаемоеИмя = Лев(АдресЭлектроннойПочтыСтр, ПозицияПервогоСимволаАдреса - 2);
	Результат.ОтображаемоеИмя = СокрЛП(Результат.ОтображаемоеИмя);
	
	Если Не ЭтоАдресЭлектроннойПочты(Результат.Адрес) Тогда
		Результат.Адрес = "";
	Иначе
		Поз = СтрНайти(Результат.Адрес, "@");
		Результат.Пользователь = Лев(Результат.Адрес, Поз - 1);
		Результат.Домен = Сред(Результат.Адрес, Поз + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет строку на формат адреса электронной почты
// проверка не точная но основные элементы на месте
//
Функция ЭтоАдресЭлектроннойПочты(АдресЭлектроннойПочты) Экспорт
	
	Поз = СтрНайти(АдресЭлектроннойПочты, "@");
	Если Поз = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрЧислоВхождений(АдресЭлектроннойПочты, "@") <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Прав(АдресЭлектроннойПочты, 1) = "."
		Или Лев(АдресЭлектроннойПочты, 1) = "." Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрНайти(АдресЭлектроннойПочты, "..") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДопустимыеСимволы = "-.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";
	Для НомерСимвола = 1 По СтрДлина(АдресЭлектроннойПочты) Цикл
		Если СтрНайти(ДопустимыеСимволы, Сред(АдресЭлектроннойПочты, НомерСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Пользователь = Лев(АдресЭлектроннойПочты, Поз - 1);
	Если СтрДлина(Пользователь) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Сервер = Сред(АдресЭлектроннойПочты, Поз + 1);
	Если СтрДлина(Сервер) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Поз = СтрНайти(Сервер, ".");
	Если Поз = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет заполнена ли строка номера телефона
//
Функция ТелефонЗаполнен(ТелефонСтрока, Маска) Экспорт
	
	Возврат НЕ (ПустаяСтрока(ТелефонСтрока) ИЛИ ТелефонСтрока = СтрЗаменить(Маска, "9", " "));
	
КонецФункции	

// Проверяет заполнена ли строка номера телефона
//
Функция ТелефонЗаполненКорректно(ТелефонСтрока, Маска) Экспорт
	
	Возврат НЕ ТелефонЗаполнен(ТелефонСтрока, Маска) ИЛИ (Найти(ТелефонСтрока, " ") = 0); 
	
КонецФункции	

// Создает и выводит сообщение пользователю
//
// Параметры:
//  Текст  - Строка       - текст сообщения. 
//  Поле   - Строка       - имя реквизита к которому привязывается сообщение
//  Данные - Произвольный - объект, с которым должно быть связано сообщение.
//
Процедура СгенерироватьСообщениеПользователю(Текст, Поле, Данные) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст; 
	Сообщение.Поле = Поле;
	Сообщение.УстановитьДанные(Данные);
	Сообщение.Сообщить();
	
КонецПроцедуры	

Функция ЭтоКонтрольнаяПроцедура(Объект) Экспорт
	Возврат ТипЗнч(Объект) = Тип("СправочникСсылка.КонтрольныеПроцедуры");
КонецФункции
 
Функция ЭтоОбъектКонтроля(Объект, Вид = Неопределено) Экспорт
	Значение = ТипЗнч(Объект) = Тип("СправочникСсылка.ОбъектыКонтроля");
	Если Вид <> Неопределено И Значение Тогда
		Значение = Значение И (Объект.Владелец = ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля." + Вид)); 
	КонецЕсли;	
	Возврат Значение;
КонецФункции
  
Функция ЭтоВидОбъектаКонтроля(Объект, Вид = Неопределено) Экспорт
	Значение = ТипЗнч(Объект) = Тип("СправочникСсылка.ВидыОбъектовКонтроля");
	Если Вид <> Неопределено И Значение Тогда
		Значение = Значение И (Объект = ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля." + Вид)); 		
	КонецЕсли;		
	Возврат Значение;
КонецФункции

// Возвращает разделитель пути файловой системы.
// 
// Параметры:
//  Платформа - Неопределено:
//                На клиенте - разделитель пути клиентской файловой системы.
//                На сервере - разделитель пути серверной  файловой системы.
// 
//            - ТипПлатформы - разделитель пути файловой системы для
//                             указанного типа платформы.
//
Функция РазделительПути(Платформа = Неопределено) Экспорт
	
	Если Платформа = Неопределено Тогда
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Платформа = СловарьКлиентСервер.ТипПлатформыСервера(Ложь);
	#Иначе
		Платформа = СловарьКлиент.ТипПлатформыКлиента();
	#КонецЕсли
	
	КонецЕсли;
	
	Если Платформа = ТипПлатформы.Windows_x86 ИЛИ Платформа = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "\";
	Иначе
		Возврат "/";
	КонецЕсли;
	
КонецФункции

Процедура ИзменитьВСоответствии(Объект, Ключ, Изменение) Экспорт
	
	ТекущееЧисло = Объект.Получить(Ключ); 
	Если ТекущееЧисло = Неопределено Тогда
		ТекущееЧисло = 0;
	КонецЕсли;
	Объект.Вставить(Ключ, ТекущееЧисло + Изменение);
	
КонецПроцедуры

Процедура ИзменитьВСтруктуре(Объект, Ключ, Изменение) Экспорт
	 
	Если Объект.Свойство(Ключ) Тогда
		ТекущееЧисло = Объект[Ключ];
	Иначе
		ТекущееЧисло = 0;
	КонецЕсли;
	Объект.Вставить(Ключ, ТекущееЧисло + Изменение);
	
КонецПроцедуры

Функция МаксЗнч(Знч1, Знч2) Экспорт
	
	Если Знч1 = Неопределено Тогда
		Возврат Знч2;
	КонецЕсли;
	
	Если Знч2 = Неопределено Тогда
		Возврат Знч1;
	КонецЕсли;
	
	Возврат Макс(Знч1, Знч2);
	
КонецФункции

Функция МинЗнч(Знч1, Знч2) Экспорт
	
	Если Знч1 = Неопределено Тогда
		Возврат Знч2;
	КонецЕсли;
	
	Если Знч2 = Неопределено Тогда
		Возврат Знч1;
	КонецЕсли;
	
	Возврат Мин(Знч1, Знч2);
	
КонецФункции

Функция ОбъединитьСтруктуры(Структура1, Структура2) Экспорт
	Для Каждого КлючЗначение Из Структура2 Цикл
		Структура1.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
КонецФункции

Функция НеПересечениеСтруктур(Структура1, Структура2) Экспорт
	Результат = Новый Структура;
	
	Для Каждого КлючЗначение Из Структура1 Цикл
		Ключ = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;
		Если НЕ Структура2.Свойство(Ключ) Тогда
			Результат.Вставить(Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ОбъединитьМассивы(Массив1, Массив2) Экспорт
	
	Для Каждого Элемент Из Массив2 Цикл
		Массив1.Добавить(Элемент);
	КонецЦикла;
	
КонецФункции

Функция ЗаполнитьМассивБазовымиЗначениями(МассивЗаполнения, РазмерМассива, БазовоеЗначение = 0) Экспорт
	МассивЗаполнения.Очистить();
	НомерЭлемента = 0;
	Пока НомерЭлемента < РазмерМассива Цикл
		МассивЗаполнения.Добавить(БазовоеЗначение);
		НомерЭлемента = НомерЭлемента + 1;
	КонецЦикла;
КонецФункции

Функция СуммироватьМассивы(Массив1, Массив2) Экспорт
	НомерЭлемента = 0;
	РазмерМассива = Массив1.Количество();
	Пока НомерЭлемента < РазмерМассива Цикл
		ТекущееЗначение1 = Массив1[НомерЭлемента];
		ТекущееЗначение2 = Массив2[НомерЭлемента];
		
		Если ТекущееЗначение1 = Неопределено Тогда
			Массив1[НомерЭлемента] = ТекущееЗначение2;
		ИначеЕсли ТекущееЗначение2 <> Неопределено Тогда
			Массив1[НомерЭлемента] = ТекущееЗначение1 + ТекущееЗначение2;
		КонецЕсли;
		
		НомерЭлемента = НомерЭлемента + 1;
	КонецЦикла;
КонецФункции

// Проверить путь на наличие завершающего слеша и если он есть, удалить его
//
// Параметры:
//  Путь - Строка, путь
//
// Возвращаемое значение:
//  Путь - Строка, обработанный путь
//
Функция СкорректироватьПуть(Путь) Экспорт
	
	Перем Разделитель;
	
	ДлинаПути = СтрДлина(Путь);
	
	Если ДлинаПути = 0 Тогда
		Возврат Путь;
	КонецЕсли;
	
	Если СтрНайти(Путь, "/") <> 0 Тогда
		Разделитель = "/";
	ИначеЕсли СтрНайти(Путь, "\") <> 0 Тогда
		Разделитель = "\";
	Иначе
		Возврат Путь;
	КонецЕсли;
	
	Пока ДлинаПути > 0 И Прав(Путь, 1) = Разделитель Цикл
		Путь = Лев(Путь, ДлинаПути - 1);
		ДлинаПути = СтрДлина(Путь);
	КонецЦикла;
	
	Возврат Путь;
	
КонецФункции // СкорректироватьПуть()

Функция ЧислоВСтроку(Знач Значение) Экспорт
	
	Возврат Формат(Значение, "ЧН=0; ЧГ=0");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// XML

// Получить строковое XML представление DOM
//
// Параметры:
//  ДокументDOM - ДокументDOM, документ для которого нужно получить представление
//
// Возвращаемое значение:
//  Строка - XML представление DOM
//
Функция ПолучитьСтрокуXMLИзDOM(ДокументDOM) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // ПолучитьСтрокуXMLИзDOM()

// Получить DOM представление строки XML
//
// Параметры:
//  СтрокаXML - Строка, XML представление DOM
//
// Возвращаемое значение:
//  ДокументDOM - документ для которого нужно получить представление
//
Функция ПолучитьDOMИзСтрокиXML(СтрокаXML, ИгнорироватьКомментарий = Истина, ИгнорироватьПробельныеСимволы = Истина) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML, Новый ПараметрыЧтенияXML(,,,,,,,ИгнорироватьКомментарий, ИгнорироватьПробельныеСимволы));
	Построитель = Новый ПостроительDOM();
	
	ДокументDOM = Построитель.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	Возврат ДокументDOM;
	
КонецФункции // ПолучитьDOMИзСтрокиXML()

///////////////////////////////////////////////////////////////////////////////
// ФОРМАТИРОВАНИЕ

// Получить количество общее количество секунд в дате
//
// Параметры:
//  ЗначениеДаты - Дата, исходное значение даты
//
// Возвращаемое значение:
//  Число - общее количество секунд в дате
//
Функция ПреобразоватьДатуВСекунды(ЗначениеДаты) Экспорт
	
	Возврат ЗначениеДаты - '00010101';
	
КонецФункции // ПреобразоватьДатуВСекунды()

Процедура ОбъединитьТаблицы(Знач ЦелеваяТаблица, Знач Таблица) Экспорт
	
	Для Каждого Строка Из Таблица Цикл
		
		ЗаполнитьЗначенияСвойств(ЦелеваяТаблица.Добавить(), Строка);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Проверить путь на наличие завершающего разделителя, и если он есть, удалить его
//
// Параметры:
//  ИмяФайла - Строка
//  Разделитель - Строка
Функция УбратьРазделителиНаКонцеИмениФайла(Знач ИмяФайла, Разделитель)	
	ДлинаПути = СтрДлина(ИмяФайла);	
	Если ДлинаПути = 0 Тогда
		Возврат ИмяФайла;
	КонецЕсли;
	
	Пока ДлинаПути > 0 И Прав(ИмяФайла, 1) = Разделитель Цикл
		ИмяФайла = Лев(ИмяФайла, ДлинаПути - 1);
		ДлинаПути = СтрДлина(ИмяФайла);
	КонецЦикла;
	
	Возврат ИмяФайла;	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(АдресЭлектроннойПочты)
	
	ДопустимыеСимволы = "-.0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";
	Для НомерСимвола = 1 По СтрДлина(АдресЭлектроннойПочты) Цикл
		Если СтрНайти(ДопустимыеСимволы, Сред(АдресЭлектроннойПочты, НомерСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

// Процедура управляет состояние поля табличного документа
//
//Параметры:
//  ПолеТабличногоДокумента – ПолеФормы – поле формы с видом ПолеТабличногоДокумента,
//                            для которого необходимо установить состояние.
//  Состояние               – Строка – задает вид состояния.
//
Процедура УстановитьСостояниеПоляТабличногоДокумента(ПолеТабличногоДокумента, Состояние = "НеИспользовать") Экспорт
	
	Если ТипЗнч(ПолеТабличногоДокумента) = Тип("ПолеФормы") 
		И ПолеТабличногоДокумента.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
		Если ВРег(Состояние) = "НЕИСПОЛЬЗОВАТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Ложь;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = "";
		ИначеЕсли ВРег(Состояние) = "НЕАКТУАЛЬНОСТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.'");;
		ИначеЕсли ВРег(Состояние) = "ФОРМИРОВАНИЕОТЧЕТА" Тогда  
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		Иначе
			ВызватьИсключение(НСтр("ru = 'Недопустимое значение параметра (параметр номер ''2'')'"));
		КонецЕсли;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'"));
	КонецЕсли;
	
КонецПроцедуры

// Добавляет / заменяет существующий элемент отбора динамического списка.
//   Работает для платформы версии 8.3.
//
// Параметры:
//   ДинамическийСписок (ДинамическийСписок) Реквизит формы, для которого требуется установить отбор.
//   Остальные параметры - см. УстановитьЭлементОтбора()
//
Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если ЭтоПлатформа83БезРежимаСовместимости() Тогда
		Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
		Иначе
			ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор;
		КонецЕсли;
	Иначе
		ОтборДинамическогоСписка = ДинамическийСписок.Отбор;
	КонецЕсли;
	
	УстановитьЭлементОтбора(
		ОтборДинамическогоСписка,
		ИмяПоля,
		ПравоеЗначение,
		ВидСравнения,
		Представление,
		Использование,
		РежимОтображения,
		ИдентификаторПользовательскойНастройки);
	
КонецПроцедуры

// Используется для создания элемента отбора или, если таковой не найден,
// установления существующим элементам свойств
// Параметры
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных (заполняется всегда)
// Устанавливаемые поля:
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//  ИдентификаторПользовательскойНастройки - Строка - См. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								знач ИмяПоля,
								знач ПравоеЗначение = Неопределено,
								знач ВидСравнения = Неопределено,
								знач Представление = Неопределено,
								знач Использование = Неопределено,
								знач РежимОтображения = Неопределено,
								знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование, РежимОтображения);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Изменение элементов отбора
// Параметры
//  ИмяПоля - строка - имя поля компоновки
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - строка - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								знач ИмяПоля = Неопределено,
								знач Представление = Неопределено,
								знач ПравоеЗначение = Неопределено,
								знач ВидСравнения = Неопределено,
								знач Использование = Неопределено,
								знач РежимОтображения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавление элемента компоновки в контейнер элементов компоновки
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//  ИдентификаторПользовательскойНастройки - Строка - См. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки в синтакс-помощнике.
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									знач ИмяПоля,
									знач ВидСравнения,
									знач ПравоеЗначение = Неопределено,
									знач Представление  = Неопределено,
									знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

// Возвращает Истина, если конфигурация запущена под управлением платформы 1С:Предприятие 8.3 без использования режима совместимости
// с версией 8.3.2 или более ранней.
//
Функция ЭтоПлатформа83БезРежимаСовместимости() Экспорт
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Информация = Новый СистемнаяИнформация;
		Возврат Лев(Информация.ВерсияПриложения, 3) = "8.3"
			И (Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать
			Или (Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1
			И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
			И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_2_16"]
			И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_1"]
			И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_2"]));
	#Иначе
		Возврат Ложь;
	#КонецЕсли
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//    
//     <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>
//               \______________/ \___________/
//                      |               |
//           	   авторизация     имя сервера
//               \____________________________/ \________________________/
//                              |                            |
//                       строка соединения            путь на сервере
//
// Возвращаемое значение:
//  Структура:
//             Схема         - Строка;
//             Логин         - Строка; 
//             Пароль        - Строка;
//             ИмяСервера    - Строка;
//             Хост          - Строка; 
//             Порт          - Строка; 
//             ПутьНаСервере - Строка;
//
&НаСервере
Функция СтруктураURI(Знач СтрокаURI, Знач ПарамЛогин = "", Знач ПарамПароль = "") Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Если ПарамЛогин = "" И ПарамПароль = "" Тогда
		Позиция = СтрНайти(СтрокаАвторизации, ":");
		Если Позиция > 0 Тогда
			Логин = Лев(СтрокаАвторизации, Позиция - 1);
			Пароль = Сред(СтрокаАвторизации, Позиция + 1);
		КонецЕсли;
	Иначе
		Логин = ПарамЛогин;
		Пароль = ПарамПароль;
	КонецЕсли;

		
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьФорматированнуюСтроку(ФорматированныйДокумент, Строка, ВерсияПлатформы, ЭтоКомментарий)
	
	ПараграфСтроки = ФорматированныйДокумент.Элементы.Добавить();
	
	Если НЕ ЗначениеЗаполнено(Строка) Тогда
		Возврат ЭтоКомментарий;
	КонецЕсли;
	
	КавычкаОткрыта = Ложь;
	
	ФорматСимволов = Новый Соответствие;
	ФорматСимволов.Вставить("<", Новый Цвет(0, 0, 255));
	ФорматСимволов.Вставить("=", Новый Цвет(0, 0, 255));
	ФорматСимволов.Вставить("""", Новый Цвет(0, 0, 255));
	ФорматСимволов.Вставить(">", Новый Цвет(0, 0, 255));
	ФорматСимволов.Вставить("/", Новый Цвет(0, 0, 255));
	
	АвтоЦвет = Новый Цвет(139, 69, 19);
	ЧерныйЦвет = Новый Цвет(0,0,0);
	ЗеленыйЦвет = Новый Цвет(0,130,0);
	ЖирныйШрифт = Неопределено;
	ОбычныйШрифт = Неопределено;
	
	ЧислоСимволов = СтрДлина(Строка);
	Буфер = "";
	Отступ = 0;
    ТекЦвет = Неопределено;
		
	Для ТекИндекс = 1 По ЧислоСимволов Цикл
		Симв = Сред(Строка, ТекИндекс, 1);
		Если Симв = Символы.Таб Тогда
			Отступ = Отступ + 20;
			Продолжить;
        КонецЕсли;
        
        Если ТекЦвет = Неопределено Тогда
            ТекЦвет = ФорматСимволов[Симв];
            Если ТекЦвет = Неопределено Тогда
                ТекЦвет = АвтоЦвет;
            КонецЕсли;
        КонецЕсли;
		
		Если Симв = "<" и НЕ ЭтоКомментарий Тогда
			Комментарий = Сред(Строка, ТекИндекс, 4);
			Если Комментарий = "<!--" Тогда
				ЭтоКомментарий = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКомментарий Тогда
			Комментарий = Сред(Строка, ТекИндекс);
			ИндексКонецКомментария = СтрНайти(Комментарий, "-->");
			Если ИндексКонецКомментария = 0 Тогда
				ТекЭл = ФорматированныйДокумент.Добавить(Комментарий, Тип("ТекстФорматированногоДокумента"));
				ТекЭл.ЦветТекста = ЗеленыйЦвет;
				ТекИндекс = ТекИндекс + СтрДлина(Комментарий) - 1;
				
				ЭтоКомментарий = Истина;
				Продолжить;
			Иначе
				Комментарий = Сред(Строка, ТекИндекс, ИндексКонецКомментария + 2);
				ТекЭл = ФорматированныйДокумент.Добавить(Комментарий, Тип("ТекстФорматированногоДокумента"));
				ТекЭл.ЦветТекста = ЗеленыйЦвет;
				ТекИндекс = ТекИндекс + СтрДлина(Комментарий) - 1;
				
				ЭтоКомментарий = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ КавычкаОткрыта Тогда
			ЦветСимвола = ФорматСимволов[Симв];
			Если ЦветСимвола = Неопределено Тогда
				ЦветСимвола = АвтоЦвет;
			КонецЕсли;
		Иначе
			Если Симв <> """" Тогда
				ЦветСимвола = ЧерныйЦвет;
			Иначе
				ЦветСимвола = ФорматСимволов[Симв];
			КонецЕсли;
		КонецЕсли;
		
		Если ТекЦвет <> ЦветСимвола И Буфер <> "" Тогда
			ТекЭл = ФорматированныйДокумент.Добавить(Буфер, Тип("ТекстФорматированногоДокумента"));
			Если ТекЭл <> Неопределено Тогда
				ТекЭл.ЦветТекста = ТекЦвет;
				Если ТекЦвет = ЧерныйЦвет Тогда
					Если ЖирныйШрифт = Неопределено Тогда
						ЖирныйШрифт = Новый Шрифт(ТекЭл.Шрифт,,,Истина);
					КонецЕсли;
					ТекЭл.Шрифт = ЖирныйШрифт;
				Иначе
					Если ОбычныйШрифт = Неопределено Тогда
						ОбычныйШрифт = Новый Шрифт(ТекЭл.Шрифт,,,Ложь);
					КонецЕсли;
					ТекЭл.Шрифт = ОбычныйШрифт;
				КонецЕсли;
				
				Если Отступ <> 0 Тогда
					ТекЭл.Родитель.Отступ = Отступ;
				КонецЕсли;
				
				Буфер = "";
				ТекЦвет = ЦветСимвола;
				Отступ = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Симв <> Символы.Таб Тогда
			Буфер = Буфер + Симв;
		КонецЕсли;
		
		Если Симв = """" Тогда
			КавычкаОткрыта = НЕ КавычкаОткрыта;
        КонецЕсли;
                
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Буфер) Тогда
		ТекЭл = ФорматированныйДокумент.Добавить(Буфер, Тип("ТекстФорматированногоДокумента"));
		ТекЭл.ЦветТекста = ТекЦвет;
		Если ТекЦвет = ЧерныйЦвет Тогда
			Если ЖирныйШрифт = Неопределено Тогда
				ЖирныйШрифт = Новый Шрифт(ТекЭл.Шрифт,,,Истина);
			КонецЕсли;
			ТекЭл.Шрифт = ЖирныйШрифт;
		Иначе
			Если ОбычныйШрифт = Неопределено Тогда
				ОбычныйШрифт = Новый Шрифт(ТекЭл.Шрифт,,,Ложь);
			КонецЕсли;
			ТекЭл.Шрифт = ОбычныйШрифт;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоКомментарий;
КонецФункции

Процедура ФорматированныйДокументПодсветкаXML(ФорматированныйДокумент, Текст, ВерсияПлатформы = Неопределено) Экспорт
	ЧислоСтрок = СтрЧислоСтрок(Текст);
	ЭтоКомментарий = Ложь;
	Для ТекИндекс = 1 По ЧислоСтрок Цикл
		ЭтоКомментарий = ДобавитьФорматированнуюСтроку(ФорматированныйДокумент, СтрПолучитьСтроку(Текст, ТекИндекс), ВерсияПлатформы, ЭтоКомментарий);
	КонецЦикла;
	
	ФорматированныйДокумент.Добавить("", Тип("ПереводСтрокиФорматированногоДокумента"));

КонецПроцедуры

Функция СформироватьПараметрыАдминистрированияКластера(ТипПодключения, 
	АдресАгентаСервера, ПортАгентаСервера,
	АдресСервераАдминистрирования, ПортСервераАдминистрирования, 
	ПортКластера, ИмяАдминистратораКластера, ПарольАдминистратораКластера,
	ВерсияПлатформы, КаталогЗапускаRAS) Экспорт
	
	ПараметрыАдминистрированияКластера = Новый Структура;
	ПараметрыАдминистрированияКластера.Вставить("ТипПодключения", ТипПодключения);
	ПараметрыАдминистрированияКластера.Вставить("АдресАгентаСервера", АдресАгентаСервера);
	ПараметрыАдминистрированияКластера.Вставить("ПортАгентаСервера", ПортАгентаСервера);
	ПараметрыАдминистрированияКластера.Вставить("АдресСервераАдминистрирования", АдресСервераАдминистрирования);
	ПараметрыАдминистрированияКластера.Вставить("ПортСервераАдминистрирования", ПортСервераАдминистрирования);
	ПараметрыАдминистрированияКластера.Вставить("ПортКластера", ПортКластера);
	ПараметрыАдминистрированияКластера.Вставить("ИмяАдминистратораКластера", ИмяАдминистратораКластера);
	ПараметрыАдминистрированияКластера.Вставить("ПарольАдминистратораКластера", ПарольАдминистратораКластера);
	ПараметрыАдминистрированияКластера.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	ПараметрыАдминистрированияКластера.Вставить("КаталогЗапускаRAS", КаталогЗапускаRAS);
	
	Возврат ПараметрыАдминистрированияКластера;
КонецФункции

#Область КопироватьОтбор

Процедура КопироватьОтбор(ОтборКуда, ОтборОткуда) Экспорт
	
	Для Каждого ТекЭлемент Из ОтборОткуда.Элементы Цикл
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаполнитьГруппуЭлементов(ТекЭлемент, ОтборКуда.Элементы);
		Иначе
			ЗаполнитьЭлемент(ТекЭлемент, ОтборКуда.Элементы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьГруппуЭлементов(ЭлементГруппа, ЭлементыРодитель)
	
	НовЭлемент = ЭлементыРодитель.Добавить(ТипЗнч(ЭлементГруппа));
	НовЭлемент.Использование = ЭлементГруппа.Использование;
	НовЭлемент.ТипГруппы = ЭлементГруппа.ТипГруппы;
	Для Каждого ТекЭлемент Из ЭлементГруппа.Элементы Цикл
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаполнитьГруппуЭлементов(ТекЭлемент, НовЭлемент.Элементы);
		Иначе
			ЗаполнитьЭлемент(ТекЭлемент, НовЭлемент.Элементы);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьЭлемент(ТекЭлемент, ЭлементыРодитель)
	
	НовЭлемент = ЭлементыРодитель.Добавить(ТипЗнч(ТекЭлемент));
	НовЭлемент.ВидСравнения = ТекЭлемент.ВидСравнения;
	НовЭлемент.Использование = ТекЭлемент.Использование;
	НовЭлемент.ЛевоеЗначение = ТекЭлемент.ЛевоеЗначение;
	НовЭлемент.ПравоеЗначение = ТекЭлемент.ПравоеЗначение;
		
КонецПроцедуры

#КонецОбласти
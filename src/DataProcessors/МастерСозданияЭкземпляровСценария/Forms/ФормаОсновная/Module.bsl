#Область СлужебныеПроцедурыИФункции

// для копирования
&НаСервере
Процедура ПодготовитьКопииЭкземпляраНаСервере()
	ШаблоныОборудования = ЭталонныйСценарий.СопоставлениеШаблоновОборудования.Выгрузить();
	
	ОбъектыПримененияЭталона = РегистрыСведений.ШаблоныЗаполненияПараметровСценариев.СоздатьНаборЗаписей();
	ОбъектыПримененияЭталона.Отбор.ЭкземплярСценария.Установить(ЭталонныйСценарий);
	ОбъектыПримененияЭталона.Прочитать();
	
	Для Инкремент = 1 По КоличествоСоздаваемыхЭкземпляров Цикл
		УИД_экземпляра = Новый УникальныйИдентификатор;
		
		НовыйЭкземпляр = ЗаготовкиЭкземпляровСценариев.Добавить();
		НовыйЭкземпляр.УникальныйИдентификатор = УИД_экземпляра;
		НовыйЭкземпляр.ПлановаяДатаНачала = ЭталонныйСценарий.ПлановаяДатаЗапуска;
		НовыйЭкземпляр.ПлановаяДатаОкончания = ЭталонныйСценарий.ПлановаяДатаОкончания;
		НовыйЭкземпляр.СостояниеПриСоздании = Перечисления.СостоянияСценария.НеЗапланирован;
		НовыйЭкземпляр.ПорядковыйНомер = "Экземпляр №" + Инкремент;
		
		Для каждого Строка Из ШаблоныОборудования Цикл
			НоваяСтрокаВЭкземпляре = СопоставлениеШаблоновОборудования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВЭкземпляре,Строка);
			НоваяСтрокаВЭкземпляре.УникальныйИдентификатор = УИД_экземпляра;
			НоваяСтрокаВЭкземпляре.ПорядковыйНомер = НовыйЭкземпляр.ПорядковыйНомер;
		КонецЦикла;	
		
		Для каждого Строка Из ОбъектыПримененияЭталона Цикл
			НоваяСтрокаВЭкземпляре = ОбъектыЗаполненияПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВЭкземпляре, Строка);
			Хранилище = Строка.Объект;
			НоваяСтрокаВЭкземпляре.Объект = Хранилище.Получить();

			Если НоваяСтрокаВЭкземпляре.СпособЗаполнения = Перечисления.СпособыЗаполненияПараметровКоманды.РучнойВвод Или НоваяСтрокаВЭкземпляре.СпособЗаполнения = Перечисления.СпособыЗаполненияПараметровКоманды.ПустаяСтрока Тогда
				НоваяСтрокаВЭкземпляре.Объект = НоваяСтрокаВЭкземпляре.Значение;
			КонецЕсли;
			
			НоваяСтрокаВЭкземпляре.УникальныйИдентификатор = УИД_экземпляра;
			НоваяСтрокаВЭкземпляре.УчаствуетВИнтерфейсныхГруппировках = ?(Строка.УчаствуетВИнтерфейсныхГруппировках, 1, 0);
			НоваяСтрокаВЭкземпляре.ПорядковыйНомер = НовыйЭкземпляр.ПорядковыйНомер;
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

// для создания
&НаСервере
Процедура ЗаполнитьДанныеНовыхЭкземпляровИзСценария()
	
	Если ЗначениеЗаполнено(ЭталонныйСценарий) И ЗначениеЗаполнено(КонтурАвтоматизации) Тогда
		ШаблоныОборудования = ЭталонныйСценарий.ШагиАвтоматизации.Выгрузить(, "ШаблонЕдиницыОборудования");
		ШаблоныОборудования.Свернуть("ШаблонЕдиницыОборудования");
		
		ОбъектыПримененияЭталона = ЭталонныйСценарий.ШаблоныЗаполненияПараметров.Выгрузить();
		
		Для Инкремент = 1 По КоличествоСоздаваемыхЭкземпляров Цикл
			УИД_экземпляра = Новый УникальныйИдентификатор;
			
			НовыйЭкземпляр = ЗаготовкиЭкземпляровСценариев.Добавить();
			НовыйЭкземпляр.УникальныйИдентификатор = УИД_экземпляра;
			НовыйЭкземпляр.СостояниеПриСоздании = Перечисления.СостоянияСценария.НеЗапланирован;
			НовыйЭкземпляр.ПорядковыйНомер = "Экземпляр №" + Инкремент;
			
			Для каждого Строка Из ШаблоныОборудования Цикл
				Если ЗначениеЗаполнено(Строка.ШаблонЕдиницыОборудования) Тогда
					НоваяСтрокаВЭкземпляре = СопоставлениеШаблоновОборудования.Добавить();
					НоваяСтрокаВЭкземпляре.Шаблон = Строка.ШаблонЕдиницыОборудования;
					НоваяСтрокаВЭкземпляре.УникальныйИдентификатор = УИД_экземпляра;
					НоваяСтрокаВЭкземпляре.ПорядковыйНомер = НовыйЭкземпляр.ПорядковыйНомер;
				КонецЕсли;	
			КонецЦикла;	
			
			Для каждого Строка Из ОбъектыПримененияЭталона Цикл
				НоваяСтрокаВЭкземпляре = ОбъектыЗаполненияПараметров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВЭкземпляре, Строка);

				РаботаСоСценариямиАвтоматизацииСервер.ЗаполнитьЗначениеПараметраПоДаннымОбъекта(НоваяСтрокаВЭкземпляре);
				
				НоваяСтрокаВЭкземпляре.УникальныйИдентификатор = УИД_экземпляра;
				НоваяСтрокаВЭкземпляре.УчаствуетВИнтерфейсныхГруппировках = ?(Строка.УчаствуетВИнтерфейсныхГруппировках, 1, 0);
				НоваяСтрокаВЭкземпляре.ПорядковыйНомер = НовыйЭкземпляр.ПорядковыйНомер;
			КонецЦикла;	

			Запрос = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьЗапросДляОбработкиВложенныхПараметров(ОбъектыЗаполненияПараметров.Выгрузить(ОбъектыЗаполненияПараметров.НайтиСтроки(Новый Структура("УникальныйИдентификатор", УИД_экземпляра))));
			
			ВыборкаВерхнегоУровня = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаВерхнегоУровня.Следующий() Цикл
				ВыборкаВложенных = ВыборкаВерхнегоУровня.Выбрать();
				СтроковыйПараметр = "";
				Пока ВыборкаВложенных.Следующий() Цикл
					Если СтроковыйПараметр = "" Тогда
						СтроковыйПараметр = ВыборкаВложенных.Объект;
					КонецЕсли;	
					СтроковыйПараметр = СтрЗаменить(СтроковыйПараметр, ВыборкаВложенных.ИмяШаблонаВложенного, ВыборкаВложенных.ЗначениеВложенного);
				КонецЦикла;	
				
				Строки = ОбъектыЗаполненияПараметров.НайтиСтроки(Новый Структура("ИмяШаблона, УникальныйИдентификатор", ВыборкаВерхнегоУровня.ИмяШаблона, УИД_экземпляра));		
				Для каждого Строка из Строки Цикл
					Строка.Значение = СтроковыйПараметр;
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

//
&НаКлиенте
Процедура ПодготовитьКопииЭкземпляра(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПерезаполнения", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, НСтр("ru='Ранее заполненные параметры будут очищены. Продолжить выполнение операции?';"
    + " en = 'Do you want to continue?'"), Режим, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПерезаполнения(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбъектыЗаполненияПараметров.Очистить();
		ЗаготовкиЭкземпляровСценариев.Очистить();
		СопоставлениеШаблоновОборудования.Очистить();
		
		Если ТипЗнч(ЭталонныйСценарий) = Тип("СправочникСсылка.ЭкземплярыСценариевАвтоматизации") Тогда		
			ПодготовитьКопииЭкземпляраНаСервере();
		Иначе
			ЗаполнитьДанныеНовыхЭкземпляровИзСценария();
		КонецЕсли;	
		
		Элементы.ЗаготовкиЭкземпляровСценариев.ТекущаяСтрока = 0;
	Иначе
		Возврат;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаготовкиЭкземпляровСценариевПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Отбор = Новый Структура("УникальныйИдентификатор", Элемент.ТекущиеДанные.УникальныйИдентификатор);
		Элементы.ОбъектыЗаполненияПараметров.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		Элементы.СопоставлениеШаблоновОборудования.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНовыеЭкземпляры(Команда)
	Если ЗначениеЗаполнено(КонтурАвтоматизации) Тогда
		Для каждого Строка Из ЗаготовкиЭкземпляровСценариев Цикл
			Структура = Новый Структура;
			Структура.Вставить("УникальныйИдентификатор", Строка.УникальныйИдентификатор);
			Структура.Вставить("ПлановаяДатаНачала", Строка.ПлановаяДатаНачала);
			Структура.Вставить("ПлановаяДатаОкончания", Строка.ПлановаяДатаОкончания);
			Структура.Вставить("СостояниеПриСоздании", Строка.СостояниеПриСоздании);

			СоздатьЭкземплярНаСервере(Структура);
			ВыполненоПроцентов = 100*(Строка.ПолучитьИдентификатор()+1)/ЗаготовкиЭкземпляровСценариев.Количество();
		КонецЦикла;	
		ВыполненоПроцентов = 100;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияУведомления", ЭтаФорма, Параметры);
		ПоказатьПредупреждение(Оповещение, НСтр("ru='Формирование новых сценариев завершено.'; en='Operation finished.'"));
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияУведомления", ЭтаФорма, Параметры);
		ПоказатьПредупреждение(Оповещение, НСтр("ru='Не заполнено значение контура автоматизации.'; en='The value of the automation contour is not filled.'"));
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭкземплярНаСервере(СтруктураПараметров)
	Шаблоны = СопоставлениеШаблоновОборудования.НайтиСтроки(Новый Структура("УникальныйИдентификатор", СтруктураПараметров.УникальныйИдентификатор));
	
	Объекты = ОбъектыЗаполненияПараметров.НайтиСтроки(Новый Структура("УникальныйИдентификатор", СтруктураПараметров.УникальныйИдентификатор));
	
	ШаблоныДляФормирования = Новый Соответствие;
	Для Каждого НайденнаяСтрока Из Шаблоны Цикл
		ШаблоныДляФормирования.Вставить(НайденнаяСтрока.Шаблон, НайденнаяСтрока.РеальноеЗначение);
	КонецЦикла;	
	
	РаботаСоСценариямиАвтоматизацииСервер.СоздатьНовыйЭкземплярСценарияПоЭталону(ЭталонныйСценарий, КонтурАвтоматизации, СтруктураПараметров.ПлановаяДатаНачала, СтруктураПараметров.ПлановаяДатаОкончания, СтруктураПараметров.СостояниеПриСоздании, ШаблоныДляФормирования, Объекты, СтруктураПараметров.УникальныйИдентификатор);
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗакрытияУведомления(Параметры) Экспорт
	ВыполненоПроцентов = 0;
	ОбъектыЗаполненияПараметров.Очистить();
	ЗаготовкиЭкземпляровСценариев.Очистить();
	СопоставлениеШаблоновОборудования.Очистить();
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтотОбъект.Параметры.Свойство("ЭталонныйСценарий", ЭталонныйСценарий);
КонецПроцедуры

&НаКлиенте
Процедура ЭталонныйСценарийПриИзменении(Элемент)
	ИнициализироватьМастер();	
КонецПроцедуры

&НаКлиенте
Процедура ЭталонныйСценарийОчистка(Элемент, СтандартнаяОбработка)
	ИнициализироватьМастер();
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьМастер()
	Если ТипЗнч(ЭталонныйСценарий) = Тип("СправочникСсылка.ЭкземплярыСценариевАвтоматизации") И Не ЭталонныйСценарий.Пустая() Тогда
		КонтурАвтоматизации = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьЗначениеРеквизитаСценарияНаСервере(ЭталонныйСценарий, "КонтурАвтоматизации");
	КонецЕсли;
	
	КоличествоСоздаваемыхЭкземпляров = 1;
	ЗаготовкиЭкземпляровСценариев.Очистить();
	ОбъектыЗаполненияПараметров.Очистить();
	СопоставлениеШаблоновОборудования.Очистить();
	
	Элементы.Контур.Доступность = НЕ ЭталонныйСценарий= Неопределено И Не ЭталонныйСценарий.Пустая();
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИнициализироватьМастер();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыЗаполненияПараметровИмяШаблонаПриИзменении(Элемент)
	Элементы.ОбъектыЗаполненияПараметров.ТекущиеДанные.ИмяШаблона = ВРег(Элементы.ОбъектыЗаполненияПараметров.ТекущиеДанные.ИмяШаблона);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыЗаполненияПараметровСпособЗаполненияПриИзменении(Элемент)
	ЗадатьОбъектИЗначение();	
	УстановитьРежимРедактированияЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыЗаполненияПараметровОтносительнаяСсылкаНаМетаданныеПриИзменении(Элемент)
	ЗадатьОбъектИЗначение();	
	УстановитьРежимРедактированияЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьОбъектИЗначение()
	ТекущиеДанныеСтроки = Элементы.ОбъектыЗаполненияПараметров.ТекущиеДанные;
	Если ТекущиеДанныеСтроки <> Неопределено Тогда
		РаботаСоСценариямиАвтоматизацииКлиент.ЗадатьПустойОбъектИЗначениеСтрокиШаблона(ТекущиеДанныеСтроки);
		ТекущиеДанныеСтроки.Изменен = Истина;
		
		ШаблоныЭтогоЭкземпляра = ОбъектыЗаполненияПараметров.НайтиСтроки(Новый Структура("УникальныйИдентификатор", ТекущиеДанныеСтроки.УникальныйИдентификатор));
		
		Для каждого Строка Из ШаблоныЭтогоЭкземпляра Цикл
			Если Строка.СпособЗаполнения = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПараметровКоманды.РучнойВвод") 
				И СтрНайти(Строка.Объект, ТекущиеДанныеСтроки.ИмяШаблона) <> 0 Тогда
				РаботаСоСценариямиАвтоматизацииКлиент.ВыполнитьПересчетСоставныхПараметров(Строка, ШаблоныЭтогоЭкземпляра);
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыЗаполненияПараметровОтносительнаяСсылкаНаМетаданныеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСоСценариямиАвтоматизацииКлиент.ОбъектыЗаполненияПараметровОтносительнаяСсылкаНаМетаданныеНачалоВыбора(ЭталонныйСценарий, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРедактированияЗначения()
	ТекДанные = Элементы.ОбъектыЗаполненияПараметров.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		РаботаСоСценариямиАвтоматизацииКлиент.УстановитьРежимРедактированияЗначения(ТекДанные.СпособЗаполнения, Элементы.ОбъектыЗаполненияПараметровОтносительнаяСсылкаНаМетаданные, Элементы.ОбъектыЗаполненияПараметровОбъект); 
	КонецЕсли;			
КонецПроцедуры	

&НаКлиенте
Процедура ОбъектыЗаполненияПараметровОбъектПриИзменении(Элемент)
	ТекущиеДанныеСтроки = Элементы.ОбъектыЗаполненияПараметров.ТекущиеДанные;
	Если ТекущиеДанныеСтроки <> Неопределено Тогда
		РаботаСоСценариямиАвтоматизацииКлиент.ЗаполнитьЗначениеПараметраПоДаннымОбъекта(ТекущиеДанныеСтроки);
		ТекущиеДанныеСтроки.Изменен = Истина;
		
		ШаблоныЭтогоЭкземпляра = ОбъектыЗаполненияПараметров.НайтиСтроки(Новый Структура("УникальныйИдентификатор", ТекущиеДанныеСтроки.УникальныйИдентификатор));
		
		РаботаСоСценариямиАвтоматизацииКлиент.ВыполнитьПересчетСоставныхПараметров(ТекущиеДанныеСтроки, ШаблоныЭтогоЭкземпляра);
		Для каждого Строка Из ШаблоныЭтогоЭкземпляра Цикл
			Если Строка.СпособЗаполнения = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПараметровКоманды.РучнойВвод") 
				И СтрНайти(Строка.Объект, ТекущиеДанныеСтроки.ИмяШаблона) <> 0 Тогда
				РаботаСоСценариямиАвтоматизацииКлиент.ВыполнитьПересчетСоставныхПараметров(Строка, ШаблоныЭтогоЭкземпляра);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПараметров(Команда)
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПодбора", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура("ОбъектыЗаполненияПараметров, СопоставлениеШаблоновОборудования, ЗаготовкиЭкземпляровСценариев", ОбъектыЗаполненияПараметров, СопоставлениеШаблоновОборудования,  ЗаготовкиЭкземпляровСценариев);
	ОткрытьФорму("Обработка.МастерСозданияЭкземпляровСценария.Форма.ФормаГрупповогоЗаполненияПараметров", ПараметрыОткрытия, ЭтотОбъект,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПодбора(Параметры, ДополнительныеПараметры) Экспорт
	Если Параметры <> Неопределено Тогда
		
		Если Параметры.Свойство("ОбъектыЗаполненияПараметров") Тогда
			ОбъектыЗаполненияПараметров.Очистить();
			Для каждого Строка Из Параметры.ОбъектыЗаполненияПараметров Цикл
				НоваяСтрока = ОбъектыЗаполненияПараметров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			КонецЦикла;	
		КонецЕсли;
		
		Если Параметры.Свойство("СопоставлениеШаблоновОборудования") Тогда
			СопоставлениеШаблоновОборудования.Очистить();
			Для каждого Строка Из Параметры.СопоставлениеШаблоновОборудования Цикл
				НоваяСтрока = СопоставлениеШаблоновОборудования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			КонецЦикла;	
		КонецЕсли;
		
		Если Параметры.Свойство("ЗаготовкиЭкземпляровСценариев") Тогда
			ЗаготовкиЭкземпляровСценариев.Очистить();
			Для каждого Строка Из Параметры.ЗаготовкиЭкземпляровСценариев Цикл
				НоваяСтрока = ЗаготовкиЭкземпляровСценариев.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыЗаполненияПараметровПриАктивизацииСтроки(Элемент)
	УстановитьРежимРедактированияЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ЗаготовкиЭкземпляровСценариевРеквизитПриИзменении(Элемент)
	ТекДанные = Элементы.ЗаготовкиЭкземпляровСценариев.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		ТекДанные.Изменен = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеШаблоновОборудованияРеальноеЗначениеПриИзменении(Элемент)
	ТекДанные = Элементы.СопоставлениеШаблоновОборудования.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		ТекДанные.Изменен = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыЗаполненияПараметровОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ОбъектыЗаполненияПараметров.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.СпособЗаполнения = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПараметровКоманды.РучнойВвод") Тогда
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатРедактированияВыражения", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СписокШаблонов", Новый СписокЗначений);
		ПараметрыОткрытия.Вставить("ТекущееЗначение", Элемент.ТекстРедактирования);
		
		ДанныеВыбора = Элемент.ТекстРедактирования;
			
		Для Каждого Строка Из ОбъектыЗаполненияПараметров Цикл
			ПараметрыОткрытия.СписокШаблонов.Добавить(Строка.ИмяШаблона);
		КонецЦикла;	
		
		ОткрытьФорму("ОбщаяФорма.ФормированиеСоставногоПараметраСценария", ПараметрыОткрытия, ЭтотОбъект,,,,Оповещение);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатРедактированияВыражения(ВозвращенныеПараметры, ДополнительныеПараметры) Экспорт
	Если ВозвращенныеПараметры <> Неопределено И ВозвращенныеПараметры.Свойство("РезультирующееВыражение") Тогда
		ТекДанные = Элементы.ОбъектыЗаполненияПараметров.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ТекДанные.Объект = ВозвращенныеПараметры.РезультирующееВыражение;
			ТекДанные.Значение = РаботаСоСценариямиАвтоматизацииКлиентСервер.ТрансляцияСоставногоПараметра(Строка(ТекДанные.Объект), ОбъектыЗаполненияПараметров);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	
#КонецОбласти

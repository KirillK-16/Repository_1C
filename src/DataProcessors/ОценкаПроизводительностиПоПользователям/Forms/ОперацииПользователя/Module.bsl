////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнформационнаяБаза = Параметры.ИнформационнаяБаза;
	Пользователь = Параметры.ПользовательСсылка;
	Если ЗначениеЗаполнено(Параметры.ДатаОтчета) Тогда
		ДатаОтчета = Параметры.ДатаОтчета;
	Иначе
		ДатаОтчета = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовок();
	
	Если ИнформационнаяБаза <> Неопределено И Пользователь <> Неопределено Тогда
		Сформировать(Неопределено);
	Иначе
		ОчиститьРезультаты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ИдентификаторЗадания <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИнформационнаяБазаПриИзменении(Элемент)
	ОчиститьРезультаты();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	УстановитьЗаголовок();
	ОчиститьРезультаты();
КонецПроцедуры

&НаКлиенте
Процедура КлючеваяОперацияПриИзменении(Элемент)
	
	УстановитьОтборПоОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтчетаПриИзменении(Элемент)
	ОчиститьРезультаты();
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьПустыеПриИзменении(Элемент)
	
	Если СкрыватьПустые Тогда
		УдалитьПустыеСтроки();
	Иначе
		ВосстановитьПустыеСтроки();
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура КлючеваяОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
	ОписаниеОповещения = Новый ОписаниеОповещения("КлючеваяОперацияНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.ОценкаПроизводительностиКлючевыеОперации.Форма.ФормаВыбора", ПараметрыФормы,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура КлючеваяОперацияНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	КлючеваяОперацияИдентификатор = РезультатЗакрытия.УникальныйИдентификатор;
	КлючеваяОперация = РезультатЗакрытия.Имя;
	УстановитьОтборПоОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура КлючеваяОперацияОчистка(Элемент, СтандартнаяОбработка)
	
	КлючеваяОперацияИдентификатор = Неопределено;
	КлючеваяОперация = Неопределено;
	УстановитьОтборПоОперации();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Операции

&НаКлиенте
Процедура ОперацииПриАктивизацииЯчейки(Элемент)
	Элементы.Операции.ТекущаяСтрока = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьКлючевуюОперацию();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = ПрочитатьДанные();
	
	ПараметрыОбработчикаОжидания = Новый Структура;
	
	Попытка
		Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
			ОбщийКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеИндикаторДлительныхОпераций, "ФормированиеОтчета");
			Элементы.Результаты.ТекущаяСтраница = Элементы.ИндикаторДлительныхОпераций;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		Иначе
			Элементы.Результаты.ТекущаяСтраница = Элементы.Результат;
		КонецЕсли;
	Исключение
		ОчиститьРезультаты();
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура УстановитьЗаголовок()
	Заголовок = НСтр("ru = 'Операции пользователя'") + " " + Пользователь;
КонецПроцедуры

// Очищает данные отчета, останавливает фоновое задание
//
&НаКлиенте
Процедура ОчиститьРезультаты()
	
	Операции.Очистить();
	ОбщийКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеИндикаторДлительныхОпераций, "НЕАКТУАЛЬНОСТЬ");
	Элементы.Результаты.ТекущаяСтраница = Элементы.ИндикаторДлительныхОпераций;
	Если ИдентификаторЗадания <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму обработки КлючеваяОперацияПоПользователю
//
&НаКлиенте
Процедура ПоказатьКлючевуюОперацию()
	
	Если Элементы.Операции.ТекущиеДанные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Выберите строку в списке'");
		Сообщение.Поле = "Производительность";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
	ПараметрыФормы.Вставить("Пользователь", Пользователь);
	ПараметрыФормы.Вставить("ДатаОкончания", ДатаОтчета);
	ПараметрыФормы.Вставить("ИдентификаторОперации", Элементы.Операции.ТекущиеДанные.КлючеваяОперацияУникальныйИдентификатор);
	ОткрытьФорму("Обработка.ОценкаПроизводительностиПоПользователям.Форма.КлючеваяОперацияПоПользователю", ПараметрыФормы, 
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтроки()
	
	Индекс = Операции.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если Операции[Индекс].ApdexПо100ЗамерамОформление < 0 Тогда
			Операции.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПустыеСтроки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОценкаПроизводительностиКлючевыеОперации.Имя КАК КлючеваяОперация,
		|	ОценкаПроизводительностиКлючевыеОперации.УникальныйИдентификатор КАК КлючеваяОперацияУникальныйИдентификатор,
		|	ОценкаПроизводительностиКлючевыеОперации.ЦелевоеВремяВИБ
		|ИЗ
		|	РегистрСведений.ОценкаПроизводительностиКлючевыеОперации КАК ОценкаПроизводительностиКлючевыеОперации
		|ГДЕ
		|	ОценкаПроизводительностиКлючевыеОперации.ИнформационнаяБаза = &ИнформационнаяБаза
		|	И НЕ ОценкаПроизводительностиКлючевыеОперации.УникальныйИдентификатор В (&КлючевыеОперации)";
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	Запрос.УстановитьПараметр("КлючевыеОперации", Операции.Выгрузить(, "КлючеваяОперацияУникальныйИдентификатор"));
	Выборка = Запрос.Выполнить().Выбрать();
	ОбразецОформления = Новый Структура("ApdexПо100ЗамерамОформление, ApdexЗа7днейОформление, "
		"ApdexЗа30днейОформление, ApdexЗа90днейОформление",
		-1, -1, -1, -1);
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Операции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбразецОформления);
		
	КонецЦикла;
	Операции.Сортировать("КлючеваяОперация");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоОперации()
	
	Если ЗначениеЗаполнено(КлючеваяОперацияИдентификатор) Тогда
		Элементы.Операции.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючеваяОперацияУникальныйИдентификатор", 
			КлючеваяОперацияИдентификатор);
	Иначе
		Элементы.Операции.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование отчета в фоновом задании

// Запускает фоновое задание формирования отчета
//
&НаСервере
Функция ПрочитатьДанные()
	
	ПараметрыОтчета = ПараметрыОтчета();
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	Если Общий.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ОценкаПроизводительностиПоПользователям.ПрочитатьДанныеПоОперациям(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"ОценкаПроизводительностиПоПользователям.ПрочитатьДанныеПоОперациям", 
			ПараметрыОтчета);
						
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;		
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Помещает данные отчета в элементы формы
//
&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	ЗначениеВДанныеФормы(РезультатВыполнения, Операции);
	ИдентификаторЗадания = Неопределено;
	
КонецПроцедуры

// Помещает данные формы в структуру для передачи в отчет
//
&НаСервере
Функция ПараметрыОтчета()
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
	ПараметрыОтчета.Вставить("Пользователь", Пользователь);
	ПараметрыОтчета.Вставить("ДатаОтчета", ДатаОтчета);
	ПараметрыОтчета.Вставить("СкрыватьПустые", СкрыватьПустые);
	
	Возврат ПараметрыОтчета;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()  
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			Элементы.Результаты.ТекущаяСтраница = Элементы.Результат;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОчиститьРезультаты();
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

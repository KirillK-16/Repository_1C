////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаОкончания = ТекущаяДата();
	ДатаНачала = ДатаОкончания - 7*24*60*60;
	ВыборкаИнформационныхБаз = Общий.ВыборкаИнформационныхБаз();
	Если ВыборкаИнформационныхБаз.Следующий() Тогда
		ИнформационнаяБаза = ВыборкаИнформационныхБаз.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОчиститьРезультаты();
	ОтборПользователей = "Всех";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ИдентификаторЗадания <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИнформационнаяБазаПриИзменении(Элемент)
	
	ОчиститьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ОчиститьРезультаты();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	ОчиститьРезультаты();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЧислуОперацийПриИзменении(Элемент)
	ОчиститьРезультаты();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Производительность

&НаКлиенте
Процедура ПроизводительностьПриАктивизацииЯчейки(Элемент)
	Элементы.Производительность.ТекущаяСтрока = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительностьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьОперацииПользователя();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = ПрочитатьДанные();
	
	ПараметрыОбработчикаОжидания = Новый Структура;
	
	Попытка
		Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
			ОбщийКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеИндикаторДлительныхОпераций, "ФормированиеОтчета");
			Элементы.Результаты.ТекущаяСтраница = Элементы.ИндикаторДлительныхОпераций;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		Иначе
			Элементы.Результаты.ТекущаяСтраница = Элементы.Результат;
		КонецЕсли;
	Исключение
		ОчиститьРезультаты();
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Открывает форму обработки ОперацииПользователя
//
&НаКлиенте
Процедура ПоказатьОперацииПользователя()
	
	Если Элементы.Производительность.ТекущиеДанные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Выберите строку в списке'");
		Сообщение.Поле = "Производительность";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
	ПараметрыФормы.Вставить("ПользовательСсылка", Элементы.Производительность.ТекущиеДанные.Пользователь);
	ПараметрыФормы.Вставить("ДатаОтчета", ДатаОкончания);
	ПараметрыФормы.Вставить("SDF", "☺");
	
	ОткрытьФорму("Обработка.ОценкаПроизводительностиПоПользователям.Форма.ОперацииПользователя", ПараметрыФормы, 
		ЭтотОбъект);
	
КонецПроцедуры

// Очищает данные отчета, останавливает фоновое задание
//
&НаКлиенте
Процедура ОчиститьРезультаты()
	
	Производительность.Очистить();
	ОбщийКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеИндикаторДлительныхОпераций, "НЕАКТУАЛЬНОСТЬ");
	Элементы.Результаты.ТекущаяСтраница = Элементы.ИндикаторДлительныхОпераций;
	Если ИдентификаторЗадания <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование отчета в фоновом задании

// Запускает фоновое задание формирования отчета
//
&НаСервере
Функция ПрочитатьДанные()
	
	ПараметрыОтчета = ПараметрыОтчета();
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	Если Общий.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ОценкаПроизводительностиПоПользователям.ПрочитатьДанныеПоПользователям(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"ОценкаПроизводительностиПоПользователям.ПрочитатьДанныеПоПользователям", 
			ПараметрыОтчета);
						
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;		
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Помещает данные отчета в элементы формы
//
&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	ЗначениеВДанныеФормы(РезультатВыполнения, Производительность);
	
	Шаблон = НСтр("ru = 'Apdex выбранного периода
                   |%Начало - %Конец'");
	Шаблон = СтрЗаменить(Шаблон, "%Начало", Формат(ДатаНачала, "ДФ=dd.MM.yy"));
	Шаблон = СтрЗаменить(Шаблон, "%Конец", Формат(ДатаОкончания, "ДФ=dd.MM.yy"));
	Элементы.ПроизводительностьТекущийApdex.Заголовок = Шаблон;
	
	Шаблон = НСтр("ru = 'Apdex прошлого периода
                   |%Начало - %Конец'");
	Шаблон = СтрЗаменить(Шаблон, "%Начало", Формат(ДатаНачала - (ДатаОкончания - ДатаНачала), "ДФ=dd.MM.yy"));
	Шаблон = СтрЗаменить(Шаблон, "%Конец", Формат(ДатаНачала, "ДФ=dd.MM.yy"));
	Элементы.ПроизводительностьПредыдущийApdex.Заголовок = Шаблон;
	
	ИдентификаторЗадания = Неопределено;
	
КонецПроцедуры

// Помещает данные формы в структуру для передачи в отчет
//
&НаСервере
Функция ПараметрыОтчета()
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
	ПараметрыОтчета.Вставить("ДатаНачала", ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаОкончания", ДатаОкончания);
	ПараметрыОтчета.Вставить("ОтборПользователей", ОтборПользователей);
	ПараметрыОтчета.Вставить("ОтборПоЧислуОпераций", ОтборПоЧислуОпераций);

	Возврат ПараметрыОтчета;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()  
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			Элементы.Результаты.ТекущаяСтраница = Элементы.Результат;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОчиститьРезультаты();
		ВызватьИсключение;
	КонецПопытки;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

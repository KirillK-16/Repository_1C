
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗагрузитьНастройки();
	Обновить();
КонецПроцедуры

&НаСервере
Функция СформироватьЗапрос(ТекстЗапроса)
	
	Запрос = Новый Запрос;
	ПараметрыЗапроса = Новый Структура;
	
	Фильтр = " ТехнологическийЖурнал.Тип = Значение(Перечисление.СобытияТЖ.ВызовКластера1С) ";
	
	Условия = Новый Массив;
	СтрокаПараметров = "ИмяРеквизита, ТекстУсловия, СтрокаЗамены";
	Условия.Добавить(Новый Структура(
		СтрокаПараметров,
		"КонецПериода", " ТехнологическийЖурнал.Дата <= &КонецПериода ", "%УсловиеНаКонец"
	));
	Условия.Добавить(Новый Структура(
		СтрокаПараметров,
		"НачалоПериода", " ТехнологическийЖурнал.Дата >= &НачалоПериода ", "%УсловиеНаНачало"
	));
	Условия.Добавить(Новый Структура(
		СтрокаПараметров,
		"Кластер", " ТехнологическийЖурнал.Кластер = &Кластер ", "%УсловиеНаКластер"
	));
	
	Для Каждого Условие Из Условия Цикл
		ИмяРеквизита = Условие.ИмяРеквизита;
		ЗначениеРеквизита = Объект[ИмяРеквизита];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Если НЕ ПустаяСтрока(Фильтр) Тогда
				Фильтр = Фильтр + " И ";
			КонецЕсли;
			Фильтр = Фильтр + Условие.ТекстУсловия;
			ПараметрыЗапроса.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ИнформационнаяБаза) Тогда
		Если ПустаяСтрока(ИмяБазыВКластере) Тогда
			ИмяБазыВКластере = РегистрыСведений.ПараметрыИнформационныхБаз.Получить(Новый Структура(
				"ОбъектКонтроля", Объект.ИнформационнаяБаза
			))["ИмяБазыВКластере"];
		КонецЕсли;
		Фильтр = Фильтр + " И ТехнологическийЖурнал.ИнформационнаяБазаВСтроку = &ИмяБазыВКластере ";
		ПараметрыЗапроса.Вставить("ИмяБазыВКластере", ИмяБазыВКластере);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Фильтр) Тогда
		Фильтр = " ГДЕ " + Фильтр;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Фильтр", Фильтр);
	
	Запрос.Текст = ТекстЗапроса;
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	Возврат Запрос;
	
КонецФункции

&НаСервере
Процедура Обновить()
	ОбновитьРейтинг();
КонецПроцедуры

&НаСервере
Процедура ОбновитьРейтинг()
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Сумма(ТехнологическийЖурнал.Продолжительность) КАК ДлительностьВызовов,
	|	ТехнологическийЖурнал.Интерфейс КАК Интерфейс,
	|	ТехнологическийЖурнал.Метод КАК Метод,
	|	МетодыSCALL.НазваниеМетода КАК НазваниеМетода
	|ИЗ
	|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.МетодыSCALL КАК МетодыSCALL
	|ПО 
	|	МетодыSCALL.Интерфейс = ТехнологическийЖурнал.Интерфейс И МетодыSCALL.Метод = ТехнологическийЖурнал.Метод
	|
	|	%Фильтр
	|
	|СГРУППИРОВАТЬ ПО
	|	ТехнологическийЖурнал.Интерфейс, ТехнологическийЖурнал.Метод, МетодыSCALL.НазваниеМетода
	|
	|УПОРЯДОЧИТЬ ПО ДлительностьВызовов УБЫВ";
	
	Запрос = СформироватьЗапрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НеизвестныеМетоды = РегистрыСведений.МетодыSCALL.СоздатьНаборЗаписей();
	
	РейтингВызовов.Очистить();
	Пока Выборка.Следующий() Цикл
		СтрокаРейтинга = РейтингВызовов.Добавить();
		НазваниеМетода = Выборка.НазваниеМетода;
		
		
		Если ЗначениеЗаполнено(НазваниеМетода) Тогда
			СтрокаРейтинга.Метод = НазваниеМетода;
		Иначе
			Интерфейс = Выборка.Интерфейс;
			Метод = Выборка.Метод;
			СтрокаРейтинга.Метод = Строка(Метод);
			СтрокаРейтинга.Интерфейс = Интерфейс;
			Если ТипЗнч(НазваниеМетода) <> Тип("Строка") Тогда
				СтрокаМетода = НеизвестныеМетоды.Добавить();
				СтрокаМетода.Интерфейс = Интерфейс;
				СтрокаМетода.Метод = Метод;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаРейтинга.ДлительностьВызовов = Формат(Выборка.ДлительностьВызовов / 1000000, "ЧДЦ=6");
	КонецЦикла;
	
	Если НеизвестныеМетоды.Количество() Тогда
		НеизвестныеМетоды.Записать(Ложь);
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	Обновить();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	Обновить();
КонецПроцедуры

&НаКлиенте
Процедура КластерПриИзменении(Элемент)
	Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаПриИзменении(Элемент)
	ИмяБазыВКластере = "";
	Обновить();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроек()
	Возврат "НастройкиФормыКонтрольБлокировокПоТехнологическомуЖурналу";
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	КлючНастроек = КлючНастроек();
	ХранилищеНастроекДанныхФорм.Сохранить(КлючНастроек, "НачалоПериода", Объект.НачалоПериода);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючНастроек, "КонецПериода", Объект.КонецПериода);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючНастроек, "Кластер", Объект.Кластер);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючНастроек, "ИнформационнаяБаза", Объект.ИнформационнаяБаза);
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройки()
	КлючНастроек = КлючНастроек();
	
	ДатаНачалаСохраненная = ХранилищеНастроекДанныхФорм.Загрузить(КлючНастроек, "НачалоПериода");
	Если НЕ ЗначениеЗаполнено(ДатаНачалаСохраненная) Тогда
		ДатаНачалаСохраненная = ТекущаяДатаСеанса() - 3600;
	КонецЕсли;
	Объект.НачалоПериода = ДатаНачалаСохраненная;
	
	ДатаОкончанияСохраненная = ХранилищеНастроекДанныхФорм.Загрузить(КлючНастроек, "КонецПериода");
	Если НЕ ЗначениеЗаполнено(ДатаОкончанияСохраненная) Тогда
		ДатаОкончанияСохраненная = ТекущаяДатаСеанса();
	КонецЕсли;
	Объект.КонецПериода = ДатаОкончанияСохраненная;
	
	Кластер = ХранилищеНастроекДанныхФорм.Загрузить(КлючНастроек, "Кластер");
	Если ЗначениеЗаполнено(Кластер) Тогда
		Объект.Кластер = Кластер;
	КонецЕсли;
	
	ИнформационнаяБаза = ХранилищеНастроекДанныхФорм.Загрузить(КлючНастроек, "ИнформационнаяБаза");
	Если ЗначениеЗаполнено(ИнформационнаяБаза) Тогда
		Объект.ИнформационнаяБаза = ИнформационнаяБаза;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КластерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("КластерНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаВыбораФормаВыбораКластераПоВсем",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура КластерНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Объект.Кластер = РезультатЗакрытия;
		КластерПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ИнформационнаяБазаНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаВыбораИнформационнойБазы",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Объект.ИнформационнаяБаза = РезультатЗакрытия;
		ИнформационнаяБазаПриИзменении(Неопределено);
	КонецЕсли;

КонецПроцедуры



&НаКлиенте
Процедура КластерОчистка(Элемент, СтандартнаяОбработка)
	КластерПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаОчистка(Элемент, СтандартнаяОбработка)
	ИнформационнаяБазаПриИзменении(Неопределено);
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьКоманда(Команда)
	Обновить();
КонецПроцедуры


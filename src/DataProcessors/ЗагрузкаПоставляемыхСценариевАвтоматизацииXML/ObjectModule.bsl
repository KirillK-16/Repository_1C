#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
Перем МетаданныеОписание Экспорт;
Перем СсылочныеТипы Экспорт;
Перем ОбработанныхКонстант Экспорт;
Перем ОбработанныхНаборовЗаписей Экспорт;
Перем мСоответствиеКолонокДвижений;

// массив строк дерева метаданных, имеющих признак Выгружать
Перем СоставПолнойВыгрузки Экспорт;

Перем мТипРезультатЗапроса; 
Перем мТипДанныхУдаления;

Перем мКоличествоСохраненныхПоследнихВыгрузок;

Перем мНаличиеВыгрузкиПодчиненныхОбъектов;
#КонецОбласти

#Область ПрограммныйИнтерфейсОбработки
Процедура ВыполнитьВыгрузку_10(ПутьКФайлу) Экспорт
	// Выгрузка в формате версии 1.0
	// выгружается всегда актуальная версия
	// получим ее, если такой нет, то отменим выгрузку
	ЗапросВерсии = Новый Запрос("ВЫБРАТЬ
	                      |	ВерсииПоставки.Версия КАК Версия
	                      |ИЗ
	                      |	РегистрСведений.ВерсииПоставки КАК ВерсииПоставки
	                      |ГДЕ
	                      |	ВерсииПоставки.Актуальная");
	РезультатЗапросаВерсии = ЗапросВерсии.Выполнить().Выгрузить();
	Если РезультатЗапросаВерсии.Количество() <> 1 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указана актуальная версия или несколько версий указаны в качестве актуальных. Выгрузка не выполнена";
		
		Сообщение.Сообщить();
	Иначе	
		Запись = Новый ЗаписьXML; 
		Запись.ОткрытьФайл(ПутьКФайлу); 
		Запись.ЗаписатьОбъявлениеXML(); 
		Запись.ЗаписатьНачалоЭлемента("SystemAdministrationCenterData"); // корневой
		Запись.ЗаписатьАтрибут("ФорматВыгрузки", "1.0");
		
		Запись.ЗаписатьКомментарий("Центр администрирования. Поставляемые сценарии"); 
		
		// версия
		Запись.ЗаписатьНачалоЭлемента("ВерсияПоставки");
			Запись.ЗаписатьАтрибут("Версия", СериализаторXDTO.XMLСтрока(РезультатЗапросаВерсии[0].Версия));		
		Запись.ЗаписатьКонецЭлемента();
		
		// контуры
		Выборка = Справочники.КонтурыАдминистрирования.Выбрать(); 
		Запись.ЗаписатьНачалоЭлемента("Справочник");
		Запись.ЗаписатьАтрибут("Имя", "КонтурыАдминистрирования");
		Запись.ЗаписатьАтрибут("ПерезаписыватьСуществующие", СериализаторXDTO.XMLСтрока(Ложь));
		Пока Выборка.Следующий() Цикл 
			Если Выборка.ЭтоГруппа Тогда 
				Продолжить; 
			КонецЕсли; 
			
			Запись.ЗаписатьНачалоЭлемента("Элемент");
			Запись.ЗаписатьАтрибут("УникальныйИдентификатор", СериализаторXDTO.XMLСтрока(Выборка.Ссылка)); 
				Запись.ЗаписатьНачалоЭлемента("СтандартныеРеквизиты");
					Запись.ЗаписатьАтрибут("Код", СериализаторXDTO.XMLСтрока(Выборка.Код)); 
					Запись.ЗаписатьАтрибут("Наименование", СериализаторXDTO.XMLСтрока(Выборка.Наименование));
				Запись.ЗаписатьКонецЭлемента();	
				
				Запись.ЗаписатьНачалоЭлемента("Реквизиты");
					Запись.ЗаписатьАтрибут("РабочийКаталогДляАвтоматизацииWIN", СериализаторXDTO.XMLСтрока(Выборка.РабочийКаталогДляАвтоматизацииWIN)); 
					Запись.ЗаписатьАтрибут("КаталогУстановкиWIN", СериализаторXDTO.XMLСтрока(Выборка.КаталогУстановкиWIN)); 
					Запись.ЗаписатьАтрибут("КаталогКонфигурацийДляАвтоматизацииWIN", СериализаторXDTO.XMLСтрока(Выборка.КаталогКонфигурацийДляАвтоматизацииWIN)); 
					Запись.ЗаписатьАтрибут("КорневойСкриптАвтоматизацииWIN", СериализаторXDTO.XMLСтрока(Выборка.КорневойСкриптАвтоматизацииWIN)); 
					Запись.ЗаписатьАтрибут("СловарьКомандАвтоматизацииWIN", СериализаторXDTO.XMLСтрока(Выборка.СловарьКомандАвтоматизацииWIN)); 
					Запись.ЗаписатьАтрибут("РабочийКаталогДляАвтоматизацииLIN", СериализаторXDTO.XMLСтрока(Выборка.РабочийКаталогДляАвтоматизацииLIN)); 
					Запись.ЗаписатьАтрибут("КаталогУстановкиLIN", СериализаторXDTO.XMLСтрока(Выборка.КаталогУстановкиLIN)); 
					Запись.ЗаписатьАтрибут("КаталогКонфигурацийДляАвтоматизацииLIN", СериализаторXDTO.XMLСтрока(Выборка.КаталогКонфигурацийДляАвтоматизацииLIN)); 
					Запись.ЗаписатьАтрибут("КорневойСкриптАвтоматизацииLIN", СериализаторXDTO.XMLСтрока(Выборка.КорневойСкриптАвтоматизацииLIN)); 
					Запись.ЗаписатьАтрибут("СловарьКомандАвтоматизацииLIN", СериализаторXDTO.XMLСтрока(Выборка.СловарьКомандАвтоматизацииLIN)); 
					Запись.ЗаписатьАтрибут("УстановкаПоУмолчаниюWin", СериализаторXDTO.XMLСтрока(Выборка.УстановкаПоУмолчаниюWin)); 
					Запись.ЗаписатьАтрибут("УстановкаПоУмолчаниюLinux", СериализаторXDTO.XMLСтрока(Выборка.УстановкаПоУмолчаниюLinux)); 
				Запись.ЗаписатьКонецЭлемента();
				
				Запись.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
					//
				Запись.ЗаписатьКонецЭлемента();
			Запись.ЗаписатьКонецЭлемента(); 
		КонецЦикла; 
		Запись.ЗаписатьКонецЭлемента();
		
		// ШаблоныЕдиницАвтоматизации
		Выборка = Справочники.ШаблоныЕдиницАвтоматизации.Выбрать(); 
		Запись.ЗаписатьНачалоЭлемента("Справочник");
		Запись.ЗаписатьАтрибут("Имя", "ШаблоныЕдиницАвтоматизации");
		Запись.ЗаписатьАтрибут("ПерезаписыватьСуществующие", СериализаторXDTO.XMLСтрока(Истина));
		Пока Выборка.Следующий() Цикл 
			Если Выборка.ЭтоГруппа Тогда 
				Продолжить; 
			КонецЕсли; 
			
			Запись.ЗаписатьНачалоЭлемента("Элемент");
			Запись.ЗаписатьАтрибут("УникальныйИдентификатор", СериализаторXDTO.XMLСтрока(Выборка.Ссылка));
				Запись.ЗаписатьНачалоЭлемента("СтандартныеРеквизиты");
					Запись.ЗаписатьАтрибут("Наименование", СериализаторXDTO.XMLСтрока(Выборка.Наименование));
				Запись.ЗаписатьКонецЭлемента();	
				
				Запись.ЗаписатьНачалоЭлемента("Реквизиты");
					// 
				Запись.ЗаписатьКонецЭлемента();
				
				Запись.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
					//
				Запись.ЗаписатьКонецЭлемента();
			Запись.ЗаписатьКонецЭлемента(); 
		КонецЦикла;
		Запись.ЗаписатьКонецЭлемента();
		
		// команды
		Выборка = Справочники.КомандыАвтоматизации.Выбрать(); 
		
		Запись.ЗаписатьНачалоЭлемента("Справочник");
		Запись.ЗаписатьАтрибут("Имя", "КомандыАвтоматизации");
		Запись.ЗаписатьАтрибут("ПерезаписыватьСуществующие", СериализаторXDTO.XMLСтрока(Истина));
		Пока Выборка.Следующий() Цикл 
			Если Выборка.ЭтоГруппа Тогда 
				Продолжить; 
			КонецЕсли; 
			
			Запись.ЗаписатьНачалоЭлемента("Элемент"); 
			Запись.ЗаписатьАтрибут("УникальныйИдентификатор", СериализаторXDTO.XMLСтрока(Выборка.Ссылка)); 
				Запись.ЗаписатьНачалоЭлемента("СтандартныеРеквизиты");
					Запись.ЗаписатьАтрибут("Код", СериализаторXDTO.XMLСтрока(Выборка.Код)); 
					Запись.ЗаписатьАтрибут("Наименование", СериализаторXDTO.XMLСтрока(Выборка.Наименование)); 
				Запись.ЗаписатьКонецЭлемента();	
				
				Запись.ЗаписатьНачалоЭлемента("Реквизиты");
					Запись.ЗаписатьАтрибут("Поставляется", СериализаторXDTO.XMLСтрока(Истина)); 
					Запись.ЗаписатьАтрибут("Описание", СериализаторXDTO.XMLСтрока(Выборка.Описание)); 
				Запись.ЗаписатьКонецЭлемента();
				
				Запись.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
					Запись.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
					Запись.ЗаписатьАтрибут("Имя", "ПараметрыОбязательные");
					Запись.ЗаписатьАтрибут("ОставлятьПользовательскиеСтроки", СериализаторXDTO.XMLСтрока(Ложь));
					Для Каждого СтрокаТабЧасти Из Выборка.ПараметрыОбязательные Цикл
						Запись.ЗаписатьНачалоЭлемента("СтрокаТабличнойЧасти");
							Запись.ЗаписатьНачалоЭлемента("ПоляОтбора");
								Запись.ЗаписатьАтрибут("ИмяПараметра", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ИмяПараметра)); 
								Запись.ЗаписатьАтрибут("ПредставлениеПараметраВАгенте", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ПредставлениеПараметраВАгенте)); 
								Запись.ЗаписатьАтрибут("Описание", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.Описание)); 
							Запись.ЗаписатьКонецЭлемента();
							
							Запись.ЗаписатьНачалоЭлемента("ПоляЗагрузки");
							Запись.ЗаписатьКонецЭлемента();
						Запись.ЗаписатьКонецЭлемента();
					КонецЦикла;	
					Запись.ЗаписатьКонецЭлемента();
					
					Запись.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
					Запись.ЗаписатьАтрибут("Имя", "ПараметрыДополнительные");
					Запись.ЗаписатьАтрибут("ОставлятьПользовательскиеСтроки", СериализаторXDTO.XMLСтрока(Ложь));
					Для Каждого СтрокаТабЧасти Из Выборка.ПараметрыДополнительные Цикл
						Запись.ЗаписатьНачалоЭлемента("СтрокаТабличнойЧасти");
						
							Запись.ЗаписатьНачалоЭлемента("ПоляОтбора");
								Запись.ЗаписатьАтрибут("ИмяПараметра", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ИмяПараметра)); 
								Запись.ЗаписатьАтрибут("ПредставлениеПараметраВАгенте", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ПредставлениеПараметраВАгенте)); 
								Запись.ЗаписатьАтрибут("Описание", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.Описание)); 
							Запись.ЗаписатьКонецЭлемента();
							
							Запись.ЗаписатьНачалоЭлемента("ПоляЗагрузки");
							Запись.ЗаписатьКонецЭлемента();
						Запись.ЗаписатьКонецЭлемента();
					КонецЦикла;	
					Запись.ЗаписатьКонецЭлемента();
				Запись.ЗаписатьКонецЭлемента();
			Запись.ЗаписатьКонецЭлемента(); 
		КонецЦикла;
		Запись.ЗаписатьКонецЭлемента();
		
		// сценарии
		Выборка = Справочники.СценарииАвтоматизации.Выбрать(); 
		
		Запись.ЗаписатьНачалоЭлемента("Справочник");
		Запись.ЗаписатьАтрибут("Имя", "СценарииАвтоматизации");
		Запись.ЗаписатьАтрибут("ПерезаписыватьСуществующие", СериализаторXDTO.XMLСтрока(Истина));
		Пока Выборка.Следующий() Цикл 
			Если Выборка.ЭтоГруппа Тогда 
				Продолжить; 
			КонецЕсли; 
			
			Запись.ЗаписатьНачалоЭлемента("Элемент");
			Запись.ЗаписатьАтрибут("УникальныйИдентификатор", СериализаторXDTO.XMLСтрока(Выборка.Ссылка)); 
				Запись.ЗаписатьНачалоЭлемента("СтандартныеРеквизиты");
					Запись.ЗаписатьАтрибут("Код", СериализаторXDTO.XMLСтрока(Выборка.Код)); 
					Запись.ЗаписатьАтрибут("Наименование", СериализаторXDTO.XMLСтрока(Выборка.Наименование));
				Запись.ЗаписатьКонецЭлемента();	
				
				Запись.ЗаписатьНачалоЭлемента("Реквизиты");
					Запись.ЗаписатьАтрибут("РежимВыполнения", СериализаторXDTO.XMLСтрока(Выборка.РежимВыполнения)); 
					Запись.ЗаписатьАтрибут("Поставляется", СериализаторXDTO.XMLСтрока(Истина)); 
					Запись.ЗаписатьАтрибут("Описание", СериализаторXDTO.XMLСтрока(Выборка.Описание)); 
					Запись.ЗаписатьАтрибут("ВерсияПоставки", СериализаторXDTO.XMLСтрока(Выборка.ВерсияПоставки)); 
				Запись.ЗаписатьКонецЭлемента();	
				
				Запись.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
					Запись.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
					Запись.ЗаписатьАтрибут("Имя", "ШагиАвтоматизации");
					Запись.ЗаписатьАтрибут("ОставлятьПользовательскиеСтроки", СериализаторXDTO.XMLСтрока(Ложь));
					Для Каждого СтрокаТабЧасти Из Выборка.ШагиАвтоматизации Цикл
						Запись.ЗаписатьНачалоЭлемента("СтрокаТабличнойЧасти");
							
							Запись.ЗаписатьНачалоЭлемента("ПоляОтбора");
								Запись.ЗаписатьАтрибут("НомерШага", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.НомерШага)); 
								Запись.ЗаписатьАтрибут("ШагРодитель", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ШагРодитель)); 
								Запись.ЗаписатьАтрибут("УникальныйИдентификаторШага", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.УникальныйИдентификаторШага)); 
								Запись.ЗаписатьАтрибут("УникальныйИдентификаторШагаРодителя", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.УникальныйИдентификаторШагаРодителя)); 
								Запись.ЗаписатьАтрибут("ТипШага", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ТипШага)); 
								Запись.ЗаписатьАтрибут("Команда", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.Команда)); 
								Запись.ЗаписатьАтрибут("КомандаОтката", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.КомандаОтката)); 
								Запись.ЗаписатьАтрибут("ШаблонЕдиницыОборудования", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ШаблонЕдиницыОборудования)); 
							Запись.ЗаписатьКонецЭлемента();
							
							Запись.ЗаписатьНачалоЭлемента("ПоляЗагрузки");
								Запись.ЗаписатьАтрибут("ВремяНачалаШага", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ВремяНачалаШага)); 
								Запись.ЗаписатьАтрибут("Название", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.Название)); 
								Запись.ЗаписатьАтрибут("ВключенПоУмолчанию", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ВключенПоУмолчанию)); 
								Запись.ЗаписатьАтрибут("ВключенПоУмолчаниюОткат", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ВключенПоУмолчаниюОткат));
							Запись.ЗаписатьКонецЭлемента();

						Запись.ЗаписатьКонецЭлемента();
					КонецЦикла;	
					Запись.ЗаписатьКонецЭлемента();
					
					Запись.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
					Запись.ЗаписатьАтрибут("Имя", "ШаблоныЗаполненияПараметров");
					Запись.ЗаписатьАтрибут("ОставлятьПользовательскиеСтроки", СериализаторXDTO.XMLСтрока(Истина));
					Для Каждого СтрокаТабЧасти Из Выборка.ШаблоныЗаполненияПараметров Цикл
						Запись.ЗаписатьНачалоЭлемента("СтрокаТабличнойЧасти");
							Запись.ЗаписатьНачалоЭлемента("ПоляОтбора");
								Запись.ЗаписатьАтрибут("ИмяШаблона", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ИмяШаблона)); 
							Запись.ЗаписатьКонецЭлемента();
							
							Запись.ЗаписатьНачалоЭлемента("ПоляЗагрузки");
								Запись.ЗаписатьАтрибут("УчаствуетВИнтерфейсныхГруппировках", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.УчаствуетВИнтерфейсныхГруппировках)); 
								Запись.ЗаписатьАтрибут("ОтносительнаяСсылкаНаМетаданные", СериализаторXDTO.XMLСтрока("")); 
								Запись.ЗаписатьАтрибут("СпособЗаполнения", СериализаторXDTO.XMLСтрока(Перечисления.СпособыЗаполненияПараметровКоманды.РучнойВвод)); 
							Запись.ЗаписатьКонецЭлемента();	
						Запись.ЗаписатьКонецЭлемента();
					КонецЦикла;	
					Запись.ЗаписатьКонецЭлемента();
					
					Запись.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
					Запись.ЗаписатьАтрибут("Имя", "ПараметрыШаговАвтоматизации");
					Запись.ЗаписатьАтрибут("ОставлятьПользовательскиеСтроки", СериализаторXDTO.XMLСтрока(Ложь));
					Для Каждого СтрокаТабЧасти Из Выборка.ПараметрыШаговАвтоматизации Цикл
						Запись.ЗаписатьНачалоЭлемента("СтрокаТабличнойЧасти");
							Запись.ЗаписатьНачалоЭлемента("ПоляОтбора");  
								Запись.ЗаписатьАтрибут("УникальныйИдентификаторШага", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.УникальныйИдентификаторШага)); 
								Запись.ЗаписатьАтрибут("Параметр", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.Параметр)); 
								Запись.ЗаписатьАтрибут("ДляОтката", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ДляОтката));
							Запись.ЗаписатьКонецЭлемента();
							
							Запись.ЗаписатьНачалоЭлемента("ПоляЗагрузки");
								Запись.ЗаписатьАтрибут("Значение", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.Значение)); 
								 
								Запись.ЗаписатьАтрибут("ИзШаблона", СериализаторXDTO.XMLСтрока(СтрокаТабЧасти.ИзШаблона)); 
							Запись.ЗаписатьКонецЭлемента();	
						Запись.ЗаписатьКонецЭлемента();
					КонецЦикла;	
					Запись.ЗаписатьКонецЭлемента();
				Запись.ЗаписатьКонецЭлемента();
			Запись.ЗаписатьКонецЭлемента(); 
		КонецЦикла; 
		Запись.ЗаписатьКонецЭлемента();
		
		// РС
		НЗ = РегистрыСведений.ПрограммныйИнтерфейсАвтоматизации.СоздатьНаборЗаписей();
		НЗ.Прочитать();
		
		Запись.ЗаписатьНачалоЭлемента("РегистрСведений");
		Запись.ЗаписатьАтрибут("Имя", "ПрограммныйИнтерфейсАвтоматизации");
		Запись.ЗаписатьАтрибут("ПерезаписыватьСуществующие", СериализаторXDTO.XMLСтрока(Истина));
		Запись.ЗаписатьАтрибут("ОставлятьПользовательскиеСтроки", СериализаторXDTO.XMLСтрока(Истина));
		Для Каждого ЗаписьРегистра Из НЗ Цикл 
			
			Запись.ЗаписатьНачалоЭлемента("Запись"); 
				// измерения пишем в атрибуты
				 
				Запись.ЗаписатьАтрибут("Команда", СериализаторXDTO.XMLСтрока(ЗаписьРегистра.Команда)); 
				Запись.ЗаписатьАтрибут("Период", СериализаторXDTO.XMLСтрока(ЗаписьРегистра.Период));
				
				Запись.ЗаписатьНачалоЭлемента("Ресурсы");
					Запись.ЗаписатьАтрибут("КомандаДляАгента", СериализаторXDTO.XMLСтрока(ЗаписьРегистра.КомандаДляАгента)); 
					Запись.ЗаписатьАтрибут("ВерсияПоставки", СериализаторXDTO.XMLСтрока(ЗаписьРегистра.ВерсияПоставки)); 
				Запись.ЗаписатьКонецЭлемента();	
				
				Запись.ЗаписатьНачалоЭлемента("Реквизиты");
				 
				Запись.ЗаписатьКонецЭлемента();	
			Запись.ЗаписатьКонецЭлемента();	
		КонецЦикла;
		Запись.ЗаписатьКонецЭлемента();
		
		НЗ = РегистрыСведений.ПрограммныйИнтерфейсАвтоматизацииПараметры.СоздатьНаборЗаписей();
		НЗ.Прочитать();
		
		Запись.ЗаписатьНачалоЭлемента("РегистрСведений");
		Запись.ЗаписатьАтрибут("Имя", "ПрограммныйИнтерфейсАвтоматизацииПараметры");
		Запись.ЗаписатьАтрибут("ПерезаписыватьСуществующие", СериализаторXDTO.XMLСтрока(Истина));
		Запись.ЗаписатьАтрибут("ОставлятьПользовательскиеСтроки", СериализаторXDTO.XMLСтрока(Истина));
		Для Каждого ЗаписьРегистра Из НЗ Цикл 
			Запись.ЗаписатьНачалоЭлемента("Запись"); 
			// измерения пишем в атрибуты
				Запись.ЗаписатьАтрибут("Период", СериализаторXDTO.XMLСтрока(ЗаписьРегистра.Период));  				
				Запись.ЗаписатьАтрибут("Команда", СериализаторXDTO.XMLСтрока(ЗаписьРегистра.Команда)); 
				Запись.ЗаписатьАтрибут("ИмяПараметра", СериализаторXDTO.XMLСтрока(ЗаписьРегистра.ИмяПараметра)); 
				
				Запись.ЗаписатьНачалоЭлемента("Ресурсы");
					Запись.ЗаписатьАтрибут("ВерсияПоставки", СериализаторXDTO.XMLСтрока(ЗаписьРегистра.ВерсияПоставки)); 
					Запись.ЗаписатьАтрибут("ПредставлениеПараметраВАгенте", СериализаторXDTO.XMLСтрока(ЗаписьРегистра.ПредставлениеПараметраВАгенте));
				Запись.ЗаписатьКонецЭлемента();	
				
				Запись.ЗаписатьНачалоЭлемента("Реквизиты");
					Запись.ЗаписатьАтрибут("Обязательный", СериализаторXDTO.XMLСтрока(ЗаписьРегистра.Обязательный)); 
				Запись.ЗаписатьКонецЭлемента();	
			Запись.ЗаписатьКонецЭлемента();	
		КонецЦикла;
		Запись.ЗаписатьКонецЭлемента();
		
		Запись.ЗаписатьКонецЭлемента(); // корневой
		Запись.Закрыть(); 
	КонецЕсли;	
КонецПроцедуры

// Процедура разбирает файл выгрузки и осуществляет запись в ИБ сохраненных
// там объектов
//
// Параметры
//   ИмяФайла - имя файла выгрузки
//
Процедура ВыполнитьЗагрузку(Знач ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.Расширение = ".xml" Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		// проверка формата файла обмена
		Если Не ЧтениеXML.Прочитать()
			Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "SystemAdministrationCenterData" Тогда
			
			СообщитьПользователю(НСтр("ru='Неверный формат файла выгрузки. Не найдено начало блока SystemAdministrationCenterData'"));
			Возврат;
			
		КонецЕсли;
		
		Если Не ЧтениеXML.Прочитать()
			Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "ВерсияПоставки" Тогда
			
			СообщитьПользователю(НСтр("ru='Неверный формат файла выгрузки. Не найдено начало блока ВерсияПоставки'"));
			Возврат;
			
		КонецЕсли;
		
		// обработаем версию
		ВерсияПоставки = "";
		Если ЧтениеXML.ПрочитатьАтрибут()
			И ЧтениеXML.ЛокальноеИмя = "Версия"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут Тогда
			ВерсияПоставки = XMLЗначение(Тип("Строка"), ЧтениеXML.Значение);
		Иначе	
			СообщитьПользователю(НСтр("ru='Неверный формат файла выгрузки. Не указана версия поставки'"));
			Возврат;
		КонецЕсли;	
		
		Если Не ЧтениеXML.Прочитать()
			Или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "ВерсияПоставки" Тогда
			
			СообщитьПользователю(НСтр("ru='Неверный формат файла выгрузки. Не найден конец блока ВерсияПоставки'"));
			Возврат;
			
		КонецЕсли;
		
		Загружено = 0;
		
		ШаблонСообщения = НСтр("ru='Начало загрузки: %Дата%'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Дата%", ТекущаяДатаСеанса());
		
		СообщитьПользователю(ТекстСообщения);
		
		// чтение и запись в ИБ записанных в выгрузке объектов
		Пока ЧтениеXML.Прочитать() Цикл 
			Если (ЧтениеXML.ЛокальноеИмя = "Справочник" Или ЧтениеXML.ЛокальноеИмя = "РегистрСведений") Тогда
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					ТипМетаданных =  ЧтениеXML.ЛокальноеИмя;
					ВыполнитьЗаполнениеОбъектаИзXML(ЧтениеXML, ТипМетаданных, ВерсияПоставки, Загружено);
				КонецЕсли;	
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		// проверка формата файла обмена
		Если  ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "SystemAdministrationCenterData" Тогда
			
			СообщитьПользователю(НСтр("ru='Неверный формат файла выгрузки. Не найден конец блока SystemAdministrationCenterData'"));
			Возврат;
			
		КонецЕсли;
		
		ЧтениеXML.Закрыть();
		
		//Записать версию 
		ТекДата = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьТекущуюДатуСеанса();
		НЗ = РегистрыСведений.ВерсииПоставки.СоздатьНаборЗаписей();
		НЗ.Отбор.Версия.Установить(ВерсияПоставки);
		Запись = НЗ.Добавить();
		Запись.Версия = ВерсияПоставки;
		Запись.ДатаЗагрузки = ТекДата;
		Запись.ДатаИзмененияАктуальности = ТекДата;
		Запись.Актуальная = Истина;
		НЗ.Записать();
		
		ШаблонЗагружено = НСтр("ru='Загружено объектов: %Количество%'");
		СообщениеЗагружено = СтрЗаменить(ШаблонЗагружено, "%Количество%", Загружено);
		
		ШаблонОкончание = НСтр("ru='Окончание загрузки: %Дата%'");
		СообщениеОкончание = СтрЗаменить(ШаблонОкончание, "%Дата%", ТекущаяДатаСеанса());
		
		СообщитьПользователю(СообщениеЗагружено);
		СообщитьПользователю(СообщениеОкончание);
		СообщитьПользователю(НСтр("ru='Загрузка данных успешно завершена'"));
		
	КонецЕсли;  

КонецПроцедуры

Процедура ВыполнитьЗаполнениеОбъектаИзXML(ЧтениеXML, ИмяТипаМетаданных, ВерсияПоставки, Загружено)
	НачатьТранзакцию();
		
	Попытка
		ИмяОбъектаМетаданных = Неопределено;
		ПерезаписыватьСуществующие = Неопределено;
		
		Пока ЧтениеXML.СледующийАтрибут() Цикл
			Если ЧтениеXML.ЛокальноеИмя = "Имя"
				И ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут Тогда
				ИмяОбъектаМетаданных = ЧтениеXML.Значение;
			КонецЕсли;	
			Если ЧтениеXML.ЛокальноеИмя = "ПерезаписыватьСуществующие"
				И ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут Тогда
				ПерезаписыватьСуществующие = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;	
		
		Если ИмяОбъектаМетаданных = Неопределено Или ПерезаписыватьСуществующие = Неопределено Тогда	
			ВызватьИсключение НСтр("ru='Неверный формат файла выгрузки. Не указано Имя загружаемого объекта'");
		КонецЕсли;	
		
		Если ИмяТипаМетаданных = "Справочник" Тогда
			Менеджер = Справочники[ИмяОбъектаМетаданных];
			
			// Обход элементов
			Пока ЧтениеXML.Прочитать()
				И (ЧтениеXML.ЛокальноеИмя = "Элемент" Или ЧтениеXML.ЛокальноеИмя = "Группа")
				И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
				
			    СсылкаСправочника = Неопределено;
				ОбъектСправочника = Неопределено;
				Индекс = 1;
				
				ЭтоГруппа = (ЧтениеXML.ЛокальноеИмя = "Группа");
				Если ЧтениеXML.ПрочитатьАтрибут()
					И ЧтениеXML.ЛокальноеИмя = "УникальныйИдентификатор"
					И ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут Тогда
					СсылкаСправочника = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ЧтениеXML.Значение));
					ОбъектСправочника = СсылкаСправочника.ПолучитьОбъект();
					
					Если ОбъектСправочника = Неопределено Тогда
						ОбъектСправочника = ?(ЭтоГруппа, Менеджер.СоздатьГруппу(), Менеджер.СоздатьЭлемент());
						ОбъектСправочника.УстановитьСсылкуНового(СсылкаСправочника);
					КонецЕсли;	
					
					Пока ЧтениеXML.Прочитать() Цикл		
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							Индекс = Индекс + 1;
							Если ЧтениеXML.ЛокальноеИмя = "ТабличныеЧасти" Тогда
								// Продолжим...
							ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ТабличнаяЧасть" Тогда
								ИмяТЧ = "";
								ОставлятьПользовательскиеСтроки = Истина;
								СтруктураДанныхСтроки = Неопределено;
								Пока ЧтениеXML.СледующийАтрибут() Цикл
									Если ЧтениеXML.ЛокальноеИмя = "Имя" Тогда
										ИмяТЧ = ЧтениеXML.Значение;
										ТаблицаТЧ = ОбъектСправочника[ИмяТЧ].Выгрузить();
									КонецЕсли;
									Если ЧтениеXML.ЛокальноеИмя = "ОставлятьПользовательскиеСтроки" Тогда
										ОставлятьПользовательскиеСтроки = XMLЗначение(Тип("Булево"), ЧтениеXML.Значение);
									КонецЕсли;
								КонецЦикла;  
							ИначеЕсли ЧтениеXML.ЛокальноеИмя = "СтрокаТабличнойЧасти" Тогда
								СтруктураДанныхСтроки = Новый Структура;
								СтрокаТЧ = ТаблицаТЧ.Добавить(); // !!!
								
								// обходим реквизиты ТЧ, по которым отбираемся
								ЧтениеXML.Прочитать();
								Если ЧтениеXML.ЛокальноеИмя = "ПоляОтбора" Тогда
									Пока ЧтениеXML.СледующийАтрибут() Цикл
										СтруктураДанныхСтроки.Вставить(ЧтениеXML.ЛокальноеИмя, XMLЗначение(ТипЗнч(СтрокаТЧ[ЧтениеXML.ЛокальноеИмя]), ЧтениеXML.Значение));
									КонецЦикла;	
								Иначе
									ВызватьИсключение НСтр("ru='Неверный формат файла выгрузки. Для ТЧ " + ИмяТЧ +  " нет блока ПоляОтбора'");									
								КонецЕсли;	
								
								СтрокиИзТЧ = ТаблицаТЧ.НайтиСтроки(СтруктураДанныхСтроки);
								
								КолВо = СтрокиИзТЧ.Количество();
								
								Если КолВо <> 0 Тогда
									ТаблицаТЧ.Удалить(СтрокаТЧ);
									СтрокаТЧ = СтрокиИзТЧ[КолВо-1];
									Если КолВо > 1 Тогда
										Для й = 2 По КолВо Цикл
											ТаблицаТЧ.Удалить(СтрокиИзТЧ[КолВо-й]);
										КонецЦикла;	
									КонецЕсли;	
								КонецЕсли;
								
								Если Не ОставлятьПользовательскиеСтроки Тогда
									НайденныеСтрокиТЧ = ОбъектСправочника[ИмяТЧ].НайтиСтроки(СтруктураДанныхСтроки);
									Для Каждого Элемент Из НайденныеСтрокиТЧ Цикл
										ОбъектСправочника[ИмяТЧ].Удалить(Элемент);
									КонецЦикла;
								КонецЕсли;	
								ЧтениеXML.Прочитать();
								
								// обходим реквизиты ТЧ, по которым заполняем
								ЧтениеXML.Прочитать();
								Если ЧтениеXML.ЛокальноеИмя = "ПоляЗагрузки" Тогда
									// только для добавляемых строк
									Если СтрокиИзТЧ.Количество() = 0 Тогда
										Пока ЧтениеXML.СледующийАтрибут() Цикл
											СтруктураДанныхСтроки.Вставить(ЧтениеXML.ЛокальноеИмя, XMLЗначение(ТипЗнч(СтрокаТЧ[ЧтениеXML.ЛокальноеИмя]), ЧтениеXML.Значение));
										КонецЦикла;
									КонецЕсли;	
								Иначе
									ВызватьИсключение НСтр("ru='Неверный формат файла выгрузки. Для ТЧ " + ИмяТЧ +  " нет блока ПоляЗагрузки'");									
								КонецЕсли;	
								ЧтениеXML.Прочитать();
					
								ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДанныхСтроки);
								
								ЧтениеXML.Прочитать();
							ИначеЕсли ЧтениеXML.ЛокальноеИмя = "Реквизиты"
								Или ЧтениеXML.ЛокальноеИмя = "СтандартныеРеквизиты" Тогда 
									Пока ЧтениеXML.СледующийАтрибут() Цикл
										ОбъектСправочника[ЧтениеXML.ЛокальноеИмя] = XMLЗначение(ТипЗнч(ОбъектСправочника[ЧтениеXML.ЛокальноеИмя]), ЧтениеXML.Значение);
									КонецЦикла;	
							Иначе	
								ВызватьИсключение НСтр("ru='Неверный формат файла выгрузки. Неожиданный элемент в выгрузке для объекта метаданных " + ИмяОбъектаМетаданных + "'" );
							КонецЕсли;	
						КонецЕсли;
						
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
							Если ЧтениеXML.ЛокальноеИмя = "ТабличнаяЧасть" И ИмяТЧ <> "" Тогда
								Если Не ОставлятьПользовательскиеСтроки И СтруктураДанныхСтроки <> Неопределено Тогда
									Для Каждого Строка Из ОбъектСправочника[ИмяТЧ] Цикл
										ЗаполнитьЗначенияСвойств(СтруктураДанныхСтроки, Строка);
										СтрокиНаУдаление = ТаблицаТЧ.НайтиСтроки(СтруктураДанныхСтроки);
										Для каждого Элемент Из СтрокиНаУдаление Цикл
											ТаблицаТЧ.Удалить(Элемент);
										КонецЦикла;	
									КонецЦикла;
								КонецЕсли;
								ОбъектСправочника[ИмяТЧ].Загрузить(ТаблицаТЧ);
							КонецЕсли;	
							Индекс = Индекс - 1;
						КонецЕсли;	
												
						Если Индекс < 1 Тогда
							Прервать;
						КонецЕсли;	
					КонецЦикла;
					
					Если ОбъектСправочника <> Неопределено И (ОбъектСправочника.ЭтоНовый() Или ПерезаписыватьСуществующие) Тогда
						ОбъектСправочника.ОбменДанными.Загрузка = ПриЗагрузкеИспользоватьРежимОбменДанными;
						ОбъектСправочника.Записать();
						Загружено = Загружено + 1;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
		ИначеЕсли ИмяТипаМетаданных = "РегистрСведений" Тогда
			Менеджер = РегистрыСведений[ИмяОбъектаМетаданных];
			
			ЗамещатьЗначения = ПерезаписыватьСуществующие;
			ЧтениеXML.ПервыйАтрибут();
			Пока ЧтениеXML.СледующийАтрибут() Цикл
				Если ЧтениеXML.ЛокальноеИмя = "ЗамещатьЗначения" Тогда
					ЗамещатьЗначения = XMLЗначение(ТипЗнч("Булево"), ЧтениеXML.Значение);;
				КонецЕсли;
			КонецЦикла;  
			Пока ЧтениеXML.Прочитать()
				И ЧтениеXML.ЛокальноеИмя = "Запись"
				И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
				
				// отбор по измерениям
				НЗ = Менеджер.СоздатьНаборЗаписей();
				Пока ЧтениеXML.СледующийАтрибут() Цикл
					НЗ.Отбор[ЧтениеXML.ЛокальноеИмя].Установить(XMLЗначение(НЗ.Отбор[ЧтениеXML.ЛокальноеИмя].ТипЗначения.Типы()[0], ЧтениеXML.Значение));
				КонецЦикла;
				
				НЗ.Прочитать();
				
				// измерения
				Если НЗ.Количество() = 0 Тогда
					Запись = НЗ.Добавить();
				Иначе
					Запись = НЗ[0];
				КонецЕсли;
				
				ЧтениеXML.ПервыйАтрибут();
				Запись[ЧтениеXML.ЛокальноеИмя] = XMLЗначение(ТипЗнч(Запись[ЧтениеXML.ЛокальноеИмя]), ЧтениеXML.Значение);
				
				Пока ЧтениеXML.СледующийАтрибут() Цикл
					Запись[ЧтениеXML.ЛокальноеИмя] = XMLЗначение(ТипЗнч(Запись[ЧтениеXML.ЛокальноеИмя]), ЧтениеXML.Значение);
				КонецЦикла;
				
				// ресурсы
				ЧтениеXML.Прочитать();
				Пока ЧтениеXML.СледующийАтрибут() Цикл
					Запись[ЧтениеXML.ЛокальноеИмя] = XMLЗначение(ТипЗнч(Запись[ЧтениеXML.ЛокальноеИмя]), ЧтениеXML.Значение);
				КонецЦикла;
				ЧтениеXML.Прочитать();
				
				// реквизиты
				ЧтениеXML.Прочитать();
				Пока ЧтениеXML.СледующийАтрибут() Цикл
					Запись[ЧтениеXML.ЛокальноеИмя] = XMLЗначение(ТипЗнч(Запись[ЧтениеXML.ЛокальноеИмя]), ЧтениеXML.Значение);
				КонецЦикла;
				ЧтениеXML.Прочитать();
				
				НЗ.ОбменДанными.Загрузка = ПриЗагрузкеИспользоватьРежимОбменДанными;
				НЗ.Записать();
				
				ЧтениеXML.Прочитать();
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	  	ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка паставляемых сценариев'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
КонецПроцедуры	

Процедура СообщитьПользователю(Текст)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация
ПриЗагрузкеИспользоватьРежимОбменДанными = Истина;
ПродолжитьЗагрузкуВСлучаеВозникновенияОшибки = Ложь;
мНаличиеВыгрузкиПодчиненныхОбъектов = Ложь;
мКоличествоСохраненныхПоследнихВыгрузок = 50;

мТипРезультатЗапроса = Тип("РезультатЗапроса");
мТипДанныхУдаления = Тип("УдалениеОбъекта");

мСоответствиеКолонокДвижений = Новый Соответствие;
ОбработанныхКонстант = 0;
ОбработанныхНаборовЗаписей = 0;
#КонецОбласти

#КонецЕсли
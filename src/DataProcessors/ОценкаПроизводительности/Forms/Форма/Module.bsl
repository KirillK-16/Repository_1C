
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ИнформационнаяБаза.СписокВыбора.Очистить();
	ИнформационныеБазы = НастройкиСервер.СписокИнформационныхБаз();
	Пока ИнформационныеБазы.Следующий() Цикл
		Элементы.ИнформационнаяБаза.СписокВыбора.Добавить(ИнформационныеБазы.ПолучитьОбъект().Ссылка);	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Параметры.ОбъектКонтроля) Тогда
		
		Объект.ИнформационнаяБаза = Параметры.ОбъектКонтроля;
		Если ЗначениеЗаполнено(Параметры.КлючеваяОперация) Тогда
			КлючеваяОперация = Параметры.КлючеваяОперация;
			//Читаем настройки только для выбранной ключевой операций
			ОбёрткаМассив = Новый Массив;
			ОбёрткаМассив.Добавить(КлючеваяОперация);
			ОбновитьНастройкиКлючевыхОпераций(Новый Структура(
				"ИдентификаторыОпераций", ОбёрткаМассив
			));
		Иначе
			//Читаем настройки всех ключевых операций для текущей ИБ
			ОбновитьНастройкиКлючевыхОпераций();
		КонецЕсли;
		ОбновитьСписокПользователей();
		
	КонецЕсли;
	
	Если Параметры.Свойство("Дата") И ЗначениеЗаполнено(Параметры.Дата) Тогда
		ДатаОкончания = Дата(Параметры.Дата);
	Иначе
		ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	Объект.ДатаОкончания = ДатаОкончания;
	Объект.ДатаНачала = ДатаОкончания - 24*60*60;
	Объект.Период = 100;
	Объект.Шаг = "Час";
	ШагРаспределения = 0.5;
	Объект.ОбрезатьПоследние = 50;
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаПриИзменении(Элемент)
	
	ИнформационнаяБазаПриИзмененииСервер();
	ОчиститьРезультаты();
	
КонецПроцедуры

&НаСервере
Процедура ИнформационнаяБазаПриИзмененииСервер()
	
	ОбновитьСписокПользователей();
	ОбновитьНастройкиКлючевыхОпераций();
	ЭтотОбъект.Элементы.ДинамикаПроизводительности.ФиксацияСлева = 3;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРезультаты()
	
	ПоказыватьОбщуюПроизводительность = Ложь;
	Объект.Диаграмма.Очистить();
	Объект.ДиаграммаРаспределения.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДинамикаПроизводительностиПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрокаДинамики = ТекущаяСтрокаДинамики();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	ОчиститьСообщения();
	ОбновитьФорму(Новый Структура("ОбновитьТаблицу, ОбновитьРаспределение", Истина, Истина));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРаспределение(Команда)
	ОбновитьФорму(Новый Структура("ОбновитьТаблицу, ОбновитьРаспределение", Ложь, Истина));
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКлючевуюОперацию(Команда)
	Если УдалитьКлючевуюОперациюСервер() = "ОбщаяПроизводительность" Тогда
		ПоказыватьОбщуюПроизводительность = Ложь;
		Элементы.ДинамикаПроизводительностиПоказыватьОбщуюПроизводительность.Доступность = НЕ ПоказыватьОбщуюПроизводительность;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКлючевуюОперацию(Команда)
	
	ДобавленныеОперации = Новый СписокЗначений;
	Для НомерСтроки = 0 По ДинамикаПроизводительности.Количество() - 1 Цикл
		ДобавленныеОперации.Добавить(ДинамикаПроизводительности[НомерСтроки].УникальныйИдентификатор);
	КонецЦикла;
	
	РежимИнформационнойБазы = РежимОтображенияИнформационнойБазы();
	СтруктураОтбораКлючевыхОпераций = Новый Структура(
		"СписокЗапрещенныхОпераций, ИнформационнаяБаза, НастройкиБратьИзБазы",
		ДобавленныеОперации,
		Объект.ИнформационнаяБаза,
		РежимИнформационнойБазы
	);	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКлючевуюОперациюЗавершение", ЭтотОбъект, ДобавленныеОперации);
	ОткрытьФорму("РегистрСведений.ОценкаПроизводительностиКлючевыеОперации.Форма.ФормаВыбора", СтруктураОтбораКлючевыхОпераций,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКлючевуюОперациюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ДобавитьКлючевуюОперациюСервер(РезультатЗакрытия, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОбщуюПроизводительность(Команда)
	
	Если ПоказыватьОбщуюПроизводительность = Неопределено ИЛИ ПоказыватьОбщуюПроизводительность = Ложь Тогда
		
		ДобавитьСтрокуВТаблицуПроизводительности(
			"Общая производительность", 
			0,
			"ОбщаяПроизводительность",
			0
		);
		
		ПоказыватьОбщуюПроизводительность = Истина;
		Элементы.ДинамикаПроизводительностиПоказыватьОбщуюПроизводительность.Доступность = НЕ ПоказыватьОбщуюПроизводительность;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьAPDEX(Команда)
	
	СтрокаТЧ = ТекущаяСтрокаДинамики();
	Элемент = Элементы.ДинамикаПроизводительности.ТекущийЭлемент;
	Префикс = "ДинамикаКолонка";
	ДлинаПрефикса = СтрДлина(Префикс);
	
	Если Лев(Элемент.Имя, ДлинаПрефикса) <> Префикс Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаТЧ[Элемент.Имя]) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеAPDEX = 0;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УказатьAPDEXЗавершение", ЭтотОбъект);
	ПоказатьВводЧисла(ОписаниеОповещения, ЗначениеAPDEX, НСтр("ru = 'Введите желаемое значение APDEX'"), 3, 2);

КонецПроцедуры

&НаКлиенте
Процедура УказатьAPDEXЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	Если Число <> Неопределено Тогда
		ЗначениеAPDEX = Число;
		Если 0 > ЗначениеAPDEX Или ЗначениеAPDEX > 1 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Введен неправильный показатель APDEX.
			|Допустимые значения от 0 до 1.'"));
			Возврат;
		КонецЕсли;
		
		СтрокаТЧ = ТекущаяСтрокаДинамики();
		Элемент = Элементы.ДинамикаПроизводительности.ТекущийЭлемент;
		Префикс = "ДинамикаКолонка";
		ДлинаПрефикса = СтрДлина(Префикс);
		
		ЗначениеAPDEX = ?(ЗначениеAPDEX = 0, 0.001, ЗначениеAPDEX);
		СтрокаТЧ[Элемент.Имя] = ЗначениеAPDEX;
		
		ИндексПериода = Число(Сред(Элемент.Имя, ДлинаПрефикса + 1));
		ЦелевоеВремя = РассчитатьЦелевоеВремя(СтрокаТЧ.УникальныйИдентификатор, ЗначениеAPDEX, ИндексПериода);
		
		СтрокаТЧ.ЦелевоеВремя = ЦелевоеВремя;
		ОбёрткаИдентификатора = Новый Массив;
		ОбёрткаИдентификатора.Добавить(СтрокаТЧ.УникальныйИдентификатор);
		ОбновитьФорму(Новый Структура("ОбновитьТаблицу, ОбновитьРаспределение, ИдентификаторыОпераций", Истина, Ложь, ОбёрткаИдентификатора));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДинамикаПроизводительностиЦелевоеВремяПриИзменении(Элемент)
	ТекущаяСтрока = ТекущаяСтрокаДинамики();
	ИзменитьЦелевоеВремя(ТекущаяСтрока.УникальныйИдентификатор, Объект.ИнформационнаяБаза, ТекущаяСтрока.ЦелевоеВремя);
КонецПроцедуры

&НаКлиенте
Процедура ДинамикаПроизводительностиAPDEXПриИзменении(Элемент)
	
	СтрокаТЧ = ТекущаяСтрокаДинамики();
	APDEXЭлемент = Элементы.ДинамикаПроизводительности.ТекущийЭлемент;	
	ИмяAPDEXЭлемента = APDEXЭлемент.Имя;
	
	ЗначениеAPDEX = СтрокаТЧ[ИмяAPDEXЭлемента];	
	ЗначениеAPDEX = ?(ЗначениеAPDEX = 0, 0.001, ЗначениеAPDEX);
		
	ИндексПериода = Число(Сред(ИмяAPDEXЭлемента, СтрДлина(ПрефиксКолонок()) + 1));
	ЦелевоеВремя = РассчитатьЦелевоеВремя(СтрокаТЧ.УникальныйИдентификатор, ЗначениеAPDEX, ИндексПериода);
	
	СтрокаТЧ.ЦелевоеВремя = ЦелевоеВремя;
	ДинамикаПроизводительностиЦелевоеВремяПриИзменении(Неопределено);
	
	ОбёрткаИдентификатора = Новый Массив;
	ОбёрткаИдентификатора.Добавить(СтрокаТЧ.УникальныйИдентификатор);
	ОбновитьФорму(Новый Структура("ОбновитьТаблицу, ОбновитьРаспределение, ИдентификаторыОпераций", Истина, Ложь, ОбёрткаИдентификатора));
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущаяСтрокаДинамики = ТекущаяСтрокаДинамики();
	Если ТекущаяСтрокаДинамики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Врем = ДинамикаПроизводительности;
	ТекущийИндекс = Врем.Индекс(ТекущаяСтрокаДинамики);
	
	Если Врем.Количество() <= 1 ИЛИ 
		ТекущийИндекс = 0 ИЛИ
		Врем[ТекущийИндекс - 1].УникальныйИдентификатор = "ОбщаяПроизводительность" ИЛИ
		ТекущаяСтрокаДинамики.УникальныйИдентификатор = "ОбщаяПроизводительность"
	Тогда
		Возврат;
	КонецЕсли;
	
	НаправлениеСдвига = -1;
	ВыполнитьСдвигСтроки(НаправлениеСдвига, ТекущийИндекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущаяСтрокаДинамики = ТекущаяСтрокаДинамики();
	Если ТекущаяСтрокаДинамики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Врем = ДинамикаПроизводительности;
	ТекущийИндекс = Врем.Индекс(ТекущаяСтрокаДинамики);
	
	Если Врем.Количество() <= 1 ИЛИ
		ТекущийИндекс = Врем.Количество() - 1 ИЛИ
		ТекущаяСтрокаДинамики.УникальныйИдентификатор = "ОбщаяПроизводительность" ИЛИ
		Врем[ТекущийИндекс + 1].УникальныйИдентификатор = "ОбщаяПроизводительность"
	Тогда
		Возврат;
	КонецЕсли;
	
	НаправлениеСдвига = 1;
	ВыполнитьСдвигСтроки(НаправлениеСдвига, ТекущийИндекс);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияПриИзменении(Элемент)
	ПереключитьРежимОтображения();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсехПользователей(Команда)
	Для Каждого СтрокаПользователя ИЗ СписокПользователей Цикл
		СтрокаПользователя.Выбран = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборВсехПользователей(Команда)
	Для Каждого СтрокаПользователя ИЗ СписокПользователей Цикл
		СтрокаПользователя.Выбран = Ложь;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Параметры - Структура с полями ИдентификаторыОпераций, НастройкиИзИБ
&НаСервере
Процедура ОбновитьНастройкиКлючевыхОпераций(Параметры = Неопределено)
	
	ТаблицаКлючевыхОпераций = РеквизитФормыВЗначение("ДинамикаПроизводительности");
	ТаблицаКлючевыхОпераций.Очистить();
	ЗагрузитьКлючевыеОперации(ТаблицаКлючевыхОпераций, Объект.ИнформационнаяБаза, Параметры);
	ЗначениеВРеквизитФормы(ТаблицаКлючевыхОпераций, "ДинамикаПроизводительности");
	
КонецПроцедуры

// Параметры - Структура с полями ИдентификаторыОпераций, НастройкиИзИБ
&НаСервереБезКонтекста
Функция ЗагрузитьКлючевыеОперации(ТаблицаКлючевыхОпераций, ИнформационнаяБаза, Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Если Параметры.Свойство("ИдентификаторыОпераций") Тогда
		ИдентификаторыОпераций = Параметры["ИдентификаторыОпераций"];
	Иначе
		ИдентификаторыОпераций = Неопределено;
	КонецЕсли;
	
	Если Параметры.Свойство("НастройкиИзИБ") Тогда
		НастройкиИзИБ = Параметры["НастройкиИзИБ"];
	Иначе
		НастройкиИзИБ = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	Если ИдентификаторыОпераций <> Неопределено Тогда
		Запрос.УстановитьПараметр("ИдентификаторыОпераций", ИдентификаторыОпераций);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КлючевыеОперации.Имя КАК Имя,
	|	КлючевыеОперации.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	КлючевыеОперации.Приоритет КАК Приоритет,
	|   КлючевыеОперации.ПриоритетВИБ КАК ПриоритетВИБ,
	|	КлючевыеОперации.ЦелевоеВремя КАК ЦелевоеВремя,
	|	КлючевыеОперации.ЦелевоеВремяВИБ КАК ЦелевоеВремяВИБ
	|ИЗ
	|	РегистрСведений.ОценкаПроизводительностиКлючевыеОперации КАК КлючевыеОперации
	|ГДЕ
	|	КлючевыеОперации.ИнформационнаяБаза = &ИнформационнаяБаза " + ?(
		ИдентификаторыОпераций = Неопределено,
		"",
		" И КлючевыеОперации.УникальныйИдентификатор В (&ИдентификаторыОпераций) "
	) + " УПОРЯДОЧИТЬ ПО Приоритет" + ?(НастройкиИзИБ, "ВИБ", "");
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаКлючевыхОпераций.Добавить();
		НоваяСтрока.Имя = Выборка.Имя;
		НоваяСтрока.ЦелевоеВремя = Выборка["ЦелевоеВремя" + ?(НастройкиИзИБ, "ВИБ", "")];
		НоваяСтрока.УникальныйИдентификатор = Выборка.УникальныйИдентификатор;
		НоваяСтрока.Приоритет = Выборка["Приоритет" + ?(НастройкиИзИБ, "ВИБ", "")];
	КонецЦикла;
		
КонецФункции

&НаСервере
Процедура ОбновитьСписокПользователей()
	
	СписокПользователейДанные = РеквизитФормыВЗначение("СписокПользователей");
	СписокПользователейДанные.Очистить();
	ЗагрузитьПользователей(
		СписокПользователейДанные, 
		Объект.ИнформационнаяБаза
	);	
	ЗначениеВРеквизитФормы(СписокПользователейДанные, "СписокПользователей");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьПользователей(
	СписокПользователей, 
	ИнформационнаяБаза
)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	
	//ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Замеры.Пользователь КАК Пользователь
	//|ИЗ
	//|	РегистрСведений.ЗамерыПроизводительности КАК Замеры
	//|ГДЕ
	//|	Замеры.ОбъектКонтроля = &ИнформационнаяБаза
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Пользователь";
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ОбъектыКонтроляПользователи.ПользовательЗамерПроизводительности КАК Пользователь
	               |ИЗ
	               |	РегистрСведений.ОбъектыКонтроляПользователи КАК ОбъектыКонтроляПользователи
	               |ГДЕ
	               |	ОбъектыКонтроляПользователи.ОбъектКонтроля = &ИнформационнаяБаза";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СписокПользователей.Добавить();
		НоваяСтрока.ИмяПользователя = Выборка.Пользователь;
		НоваяСтрока.Выбран = Истина;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВТаблицуПроизводительности(
	Имя, Приоритет, УникальныйИдентификатор, ЦелевоеВремя
)
	ДинамикаПроизводительностиДанные = РеквизитФормыВЗначение("ДинамикаПроизводительности");
	
	НоваяСтрока = ДинамикаПроизводительностиДанные.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.ЦелевоеВремя = ЦелевоеВремя;
	НоваяСтрока.УникальныйИдентификатор = УникальныйИдентификатор;
	НоваяСтрока.Приоритет = Приоритет;
	
	ДинамикаПроизводительностиДанные.Сортировать("Приоритет");
	
	ЗначениеВРеквизитФормы(ДинамикаПроизводительностиДанные, "ДинамикаПроизводительности");
КонецПроцедуры

&НаСервере
Функция ПрефиксКолонок()
	Возврат "ДинамикаКолонка";
КонецФункции

&НаСервере
Процедура ОбновитьТаблицуПроизводительности(Динамика, ОчиститьТаблицу = Истина)
	
	Если Не ЭтотОбъект.ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоДополнительныхКолонок = Динамика.Количество();
	Если ОчиститьТаблицу Тогда
		ЗаголовкиКолонок = Новый Массив;
		НомерКолонки = 0;
		Пока НомерКолонки < ЧислоДополнительныхКолонок Цикл
			
			ЗаголовкиКолонок.Добавить(Строка(Объект.ДатаНачала + ШагВСекунды(Объект.Шаг) * НомерКолонки));
			НомерКолонки = НомерКолонки + 1;	
			
		КонецЦикла;
		
		ОписаниеТипаКолонки = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 2, ДопустимыйЗнак.Неотрицательный));
		НастройкиСервер.ИзменитьСоставКолонокТаблицыДинамически(
			ЭтотОбъект,
			Элементы.ДинамикаПроизводительности,
			ЗаголовкиКолонок,
			ПрефиксКолонок(),
			,
			Новый Структура(
				"ТолькоПросмотр, МаксимальноеЗначение, МинимальноеЗначение",
				Истина, 1, 0
			),
			ОписаниеТипаКолонки
		);
	КонецЕсли;

	ЧислоСлужебныхКолонок = 4;
	ДинамикаПроизводительностиДанные = РеквизитФормыВЗначение("ДинамикаПроизводительности");
	Для Каждого СтрокаТаблицы Из ДинамикаПроизводительностиДанные Цикл
		
		ИдентификаторОперации = СтрокаТаблицы.УникальныйИдентификатор;
		НомерКолонки = 0;
		Для Каждого КолонкаТаблицы Из СтрокаТаблицы Цикл
			Если НомерКолонки > ЧислоСлужебныхКолонок - 1 Тогда
				НомерВременногоСреза = НомерКолонки - ЧислоСлужебныхКолонок;
				Apdex = Динамика[НомерВременногоСреза]["Apdex"][ИдентификаторОперации];
				
				Если Apdex <> Неопределено Тогда
					СтрокаТаблицы[НомерКолонки] = Формат(Apdex, "ЧДЦ=2; ЧН=0");
				КонецЕсли;
				
			КонецЕсли;
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;	
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ДинамикаПроизводительностиДанные, "ДинамикаПроизводительности");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДиаграмму(Динамика)
	
	Если Не ЭтотОбъект.ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;

	Диаграмма = Объект.Диаграмма;	
	Диаграмма.Обновление = Ложь;
	
	Диаграмма.АвтоМаксимальноеЗначение	= Ложь;
	Диаграмма.АвтоМинимальноеЗначение	= Ложь;
	Диаграмма.МаксимальноеЗначение		= 1;
	Диаграмма.МинимальноеЗначение		= 0;
	Диаграмма.БазовоеЗначение			= 0;
	Диаграмма.ПропускатьБазовоеЗначение	= Истина;
	
	Диаграмма.Очистить();
	
	ТекстЗаголовка = НСтр("ru = 'Диаграмма производительности с %1 по %2 - шаг: %3'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(Объект.ДатаНачала, "ДФ=dd.MM.yyyy"));
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%2", Формат(Объект.ДатаОкончания, "ДФ=dd.MM.yyyy"));
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%3", Строка(Объект.Шаг));
	Элементы.Диаграмма.Заголовок = ТекстЗаголовка;
	
	ИдентификаторСерия = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ДинамикаПроизводительности Цикл
    	Серия = Диаграмма.Серии.Добавить(СтрокаТаблицы.Имя);
		ИдентификаторСерия.Вставить(СтрокаТаблицы.УникальныйИдентификатор, Серия);
	КонецЦикла;
	
	НомерВременногоСреза = 0;	
	Для Каждого ВременнойСрез Из Динамика Цикл
		Дата = ВременнойСрез["Дата"]; 
		Точка = Диаграмма.Точки.Добавить(Дата);
		Точка.Текст = Строка(Объект.ДатаНачала + ШагВСекунды(Объект.Шаг) * НомерВременногоСреза);

		Для Каждого ИдентификаторApdex Из ВременнойСрез["Apdex"] Цикл
			Apdex = ИдентификаторApdex.Значение;
			Если Apdex = 0 Тогда
				Apdex = 0.01;
			КонецЕсли;	
			Идентификатор = ИдентификаторApdex.Ключ;
						
			Диаграмма.УстановитьЗначение(Точка, ИдентификаторСерия[Идентификатор], Apdex);  	
        КонецЦикла;
		
		НомерВременногоСреза = НомерВременногоСреза + 1;
	КонецЦикла;
	Диаграмма.ТипДиаграммы = ТипДиаграммы.График;
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ШагВСекунды(Шаг)
	Возврат ?(
		Шаг = "Час", 3600, ?(
		Шаг = "День", 24 * 3600, ?(
		Шаг = "Неделя", 7 * 24 * 3600, 30* 24 * 3600)));
		 
КонецФункции

&НаСервере
Функция ДобавитьКлючевуюОперациюСервер(ПараметрыКО, ТекущиеОперации)
	
	ДобавитьСтрокуВТаблицуПроизводительности(
		ПараметрыКО.Имя, 
		ПараметрыКО.Приоритет, 
		ПараметрыКО.УникальныйИдентификатор, 
		ПараметрыКО.ЦелевоеВремя
	);
	
КонецФункции

&НаСервере
Функция УдалитьКлючевуюОперациюСервер()
	
	ИдентификаторСтроки = Элементы.ДинамикаПроизводительности.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	ИдентификаторОперации = ДинамикаПроизводительности.НайтиПоИдентификатору(ИдентификаторСтроки).УникальныйИдентификатор;
	
	ДинамикаПроизводительностиДанные = РеквизитФормыВЗначение("ДинамикаПроизводительности");	
	СтрокаТаблицы = ДинамикаПроизводительностиДанные.Найти(ИдентификаторОперации, "УникальныйИдентификатор");
	Если СтрокаТаблицы <> Неопределено Тогда
		ДинамикаПроизводительностиДанные.Удалить(СтрокаТаблицы); 
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДинамикаПроизводительностиДанные, "ДинамикаПроизводительности");
	
	Возврат ИдентификаторОперации;
	
КонецФункции

&НаСервере
Процедура ОбновитьДиаграммуРаспределения(ТолькоПользователей = Неопределено)
	
	КонтрольПроизводительности.ПостроитьРаспределение(Объект.ДиаграммаРаспределения,
		Объект.ИнформационнаяБаза, ТолькоПользователей, ДинамикаПроизводительности, Объект.ДатаНачала, Объект.ДатаОкончания,
		ШагРаспределения, Объект.ОбрезатьПоследние / 100, Ложь);
	
КонецПроцедуры

// Вычисляет целевое время для указанного значения APDEX
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации, ключевая операция, для которой следует рассчитать целевое время
//  ЗначениеAPDEX - Число, APDEX, для которого необходимо подобрать целевое время
//  ИндексПериода - Число, индекс периода, для которого будет вычислено целевое время
//
// Возвращаемое значение:
//  Число - целевое время, при котором APDEX будет равен указанному значению
//
&НаСервере
Функция РассчитатьЦелевоеВремя(КлючеваяОперация, ЗначениеAPDEX, ИндексПериода)
	
	ШагЧисло = ШагВСекунды(Объект.Шаг);
	ОкончаниеПериода = УниверсальноеВремя(Объект.ДатаНачала + (ШагЧисло * ИндексПериода));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлючеваяОперация", КлючеваяОперация);
	Запрос.УстановитьПараметр("ДатаОкончания", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ИнформационнаяБаза", Объект.ИнформационнаяБаза);
	
	Запрос.Текст = СтрЗаменить("
	|ВЫБРАТЬ ПЕРВЫЕ %Период
	|	Замеры.Значение КАК ВремяВыполнения,
	|	Замеры.ДатаЗамера КАК ДатаЗамера
	|ИЗ 
	|	РегистрСведений.ЗамерыПроизводительности Как Замеры
	|ГДЕ 
	|	Замеры.ИдентификаторКлючевойОперации = &КлючеваяОперация И
	|	Замеры.ОбъектКонтроля = &ИнформационнаяБаза И
	|	Замеры.ДатаЗамера < &ДатаОкончания
	|УПОРЯДОЧИТЬ ПО ДатаЗамера УБЫВ", "%Период", Объект.Период);
	
	Замеры = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Замеры.Добавить(Выборка.ВремяВыполнения);
	КонецЦикла;
	
	ЦелевоеВремя = 0.1;
	ПредыдущееЦелевоеВремя = 0; //ЦелевоеВремя;
	ШагСекунд = 1;
	Пока Истина Цикл
		
		ЗначениеAPDEXРассчитанное = КонтрольПроизводительности.ЗначениеApdex(
			Замеры,
			ЦелевоеВремя,
			Объект.Период
		);
		
		РазницаAPDEX = ЗначениеAPDEXРассчитанное - ЗначениеAPDEX;
		Если (РазницаAPDEX < 0 И РазницаAPDEX > -0.01) ИЛИ (РазницаAPDEX >= 0 И РазницаAPDEX < 0.01) Тогда
			Прервать;
		КонецЕсли;
		
		Если ЗначениеAPDEXРассчитанное < ЗначениеAPDEX Тогда
			
			ПредыдущееЦелевоеВремя = ЦелевоеВремя;
			ЦелевоеВремя = ЦелевоеВремя + ШагСекунд;
		
		ИначеЕсли ЗначениеAPDEXРассчитанное > ЗначениеAPDEX Тогда
			
			ШагСекунд = ШагСекунд / 10;
			Если ШагСекунд = 0.001 ИЛИ ЦелевоеВремя = 0.01 Тогда
				Прервать;
			КонецЕсли;
						
			ЦелевоеВремя = ПредыдущееЦелевоеВремя + ШагСекунд;
					
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЦелевоеВремя;	
			
КонецФункции

&НаКлиенте
Функция ТекущаяСтрокаДинамики()
	
	ТекущаяСтрока = Элементы.ДинамикаПроизводительности.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		Возврат ДинамикаПроизводительности.НайтиПоИдентификатору(Элементы.ДинамикаПроизводительности.ТекущаяСтрока);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьЦелевоеВремя(Идентификатор, ИнформационнаяБаза, ЦелевоеВремя)
	Настройки = РегистрыСведений.ОценкаПроизводительностиКлючевыеОперации.Получить(Новый Структура(
		"УникальныйИдентификатор, ИнформационнаяБаза",
		Идентификатор, ИнформационнаяБаза
	));
	
	МенеджерЗаписи = РегистрыСведений.ОценкаПроизводительностиКлючевыеОперации.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УникальныйИдентификатор = Идентификатор;
	МенеджерЗаписи.ИнформационнаяБаза = ИнформационнаяБаза;
	МенеджерЗаписи.ПриоритетВИБ = Настройки.ПриоритетВИБ;
	МенеджерЗаписи.ЦелевоеВремяВИБ = Настройки.ЦелевоеВремяВИБ;
	МенеджерЗаписи.Имя = Настройки.Имя;
	МенеджерЗаписи.МинимальноДопустимыйУровень = Настройки.МинимальноДопустимыйУровень;
	МенеджерЗаписи.Приоритет = Настройки.Приоритет;
	МенеджерЗаписи.ЦелевоеВремя = ЦелевоеВремя;	
	МенеджерЗаписи.Записать();
КонецФункции

&НаСервере
Процедура ОбновитьФорму(Параметры = Неопределено)
	
	Если Не ЭтотОбъект.ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Если Параметры.Свойство("ОбновитьТаблицу") Тогда
		ОбновитьТаблицу = Параметры.ОбновитьТаблицу;
	Иначе
		ОбновитьТаблицу = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ОбновитьРаспределение") Тогда
		ОбновитьРаспределение = Параметры.ОбновитьРаспределение;
	Иначе
		ОбновитьРаспределение = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ИдентификаторыОпераций") Тогда
		ИдентификаторыОпераций = Параметры.ИдентификаторыОпераций;
		ОчиститьТаблицу = Ложь;
	Иначе
		ОчиститьТаблицу = Истина;
		ИдентификаторыОпераций = Новый Массив;
		Для Каждого СтрокаКлючевыеОперации Из ДинамикаПроизводительности Цикл
			ИдентификаторыОпераций.Добавить(СтрокаКлючевыеОперации.УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	ТолькоПользователей = ВыбранныеПользователи(Истина);
	Если ОбновитьТаблицу Тогда
			
		ДинамикаAPDEX = Новый Массив;
		ШагВСекундах = ШагВСекунды(Объект.Шаг);
		ЧислоТочек = Окр((Объект.ДатаОкончания - Объект.ДатаНачала) / ШагВСекундах) + 1;
		ИндексТочки = 0;
		Пока ИндексТочки < ЧислоТочек Цикл
			ДинамикаAPDEX.Добавить(Новый Структура(
				"Дата, Apdex", 
				Объект.ДатаНачала + ШагВСекундах * ИндексТочки,
				Новый Соответствие
			));
			ИндексТочки = ИндексТочки + 1;
		КонецЦикла;
		
		Для Каждого ИдентификаторОперации Из ИдентификаторыОпераций Цикл
			
			КлючевыеОперацииВрем = Новый Массив;
			КлючевыеОперацииВрем.Добавить(ИдентификаторОперации);
			ДинамикаПоПоказателю = КонтрольПроизводительности.ДинамикаApdex(
				УниверсальноеВремя(Объект.ДатаНачала),
				ЧислоТочек,
				ШагВСекундах,
				Объект.Период,
				Объект.ИнформационнаяБаза, 
				КлючевыеОперацииВрем, 
				ТолькоПользователей,
				Перечисления.ТипыСпискаПользователей.ТолькоУказанные,
				НЕ РежимРедактирования
			);
			ИндексВременногоСреза = 0;
			Для Каждого ЗначениеApdex Из ДинамикаПоПоказателю Цикл
				ДинамикаAPDEX[ИндексВременногоСреза]["Apdex"].Вставить(ИдентификаторОперации, ЗначениеApdex);
				ИндексВременногоСреза = ИндексВременногоСреза + 1;
			КонецЦикла;
		КонецЦикла;
		
		ОбновитьТаблицуПроизводительности(ДинамикаAPDEX, ОчиститьТаблицу);
		Если РежимРедактирования Тогда
			РазрешитьПодборApdex();
		КонецЕсли;
	
		ОбновитьДиаграмму(ДинамикаAPDEX);

	КонецЕсли;
	
	Если ОбновитьРаспределение Тогда
		ОбновитьДиаграммуРаспределения(ТолькоПользователей);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимОтображения()
	
	РежимОтображенияИнформационнойБазы = РежимОтображенияИнформационнойБазы();
	Элементы.ДинамикаПроизводительностиПереместитьВверх.Видимость = НЕ РежимОтображенияИнформационнойБазы;
	Элементы.ДинамикаПроизводительностиПереместитьВниз.Видимость = НЕ РежимОтображенияИнформационнойБазы;
	Элементы.ДинамикаПроизводительностиПоказыватьОбщуюПроизводительность.Доступность = РежимОтображенияИнформационнойБазы;
	
	РазрешитьРедактированиеЦелевогоВремени(НЕ РежимОтображенияИнформационнойБазы);
	РазрешитьПодборApdex(НЕ РежимОтображенияИнформационнойБазы);	
	ПеречитатьНастройкиЗапросов();
	
КонецПроцедуры

&НаСервере
Функция ВыбранныеПользователи(Выбран = Истина)
	
	Пользователи = Новый Массив;
	Для Каждого СтрокаПользователей Из СписокПользователей Цикл
		
		Если СтрокаПользователей.Выбран = Выбран Тогда
			Пользователи.Добавить(СтрокаПользователей.ИмяПользователя);
		КонецЕсли;	
		
	КонецЦикла;
	Возврат Пользователи;
	
КонецФункции

&НаКлиенте
Процедура ПеречитатьНастройкиЗапросов()
	
	ИдентификаторыОпераций = Новый Массив;
	Для Каждого СтрокаКлючевойОперации Из ДинамикаПроизводительности Цикл
		
		Идентификатор = СтрокаКлючевойОперации.УникальныйИдентификатор;
		Если Идентификатор <> "ОбщаяПроизводительность" Тогда
			ИдентификаторыОпераций.Добавить(СтрокаКлючевойОперации.УникальныйИдентификатор);
		КонецЕсли;	
		
	КонецЦикла;
	ОбновитьНастройкиКлючевыхОпераций(Новый Структура(
		"ИдентификаторыОпераций, НастройкиИзИБ", 
		ИдентификаторыОпераций,
		РежимОтображенияИнформационнойБазы()
	));
	ОчиститьРезультаты();
	
КонецПроцедуры

&НаКлиенте
Функция РежимОтображенияИнформационнойБазы()
	
	Возврат НЕ РежимРедактирования;
	
КонецФункции

&НаСервере
Процедура РазрешитьРедактированиеЦелевогоВремени(РазрешитьРедактирование = Истина)
	
	Элементы.ДинамикаПроизводительностиЦелевоеВремя.УстановитьДействие("ПриИзменении", ?(
	    РазрешитьРедактирование,
		"ДинамикаПроизводительностиЦелевоеВремяПриИзменении",
		Неопределено		
	));
	Элементы.ДинамикаПроизводительностиЦелевоеВремя.ТолькоПросмотр = НЕ РазрешитьРедактирование;
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьПодборApdex(РазрешитьРедактирование = Истина)
	
	ПрефиксКолонок = ПрефиксКолонок();
	НомерКолонки = 1;
	Пока НомерКолонки < ЧислоДополнительныхКолонок Цикл
		Колонка = Элементы[ПрефиксКолонок + Строка(НомерКолонки)];
		Колонка.УстановитьДействие("ПриИзменении", ?(
			РазрешитьРедактирование,
			"ДинамикаПроизводительностиAPDEXПриИзменении",
			Неопределено
		));
		Колонка.ТолькоПросмотр = НЕ РазрешитьРедактирование;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьСдвигСтроки(НаправлениеСдвига, ТекущийИндекс)
	
	Врем = ДинамикаПроизводительности;
	
	Приоритет1 = Врем[ТекущийИндекс].Приоритет;
	Приоритет2 = Врем[ТекущийИндекс + НаправлениеСдвига].Приоритет;
	
	ОбменятьПриоритеты(
		Объект.ИнформационнаяБаза,
		Врем[ТекущийИндекс].УникальныйИдентификатор,
		Приоритет1,
		Врем[ТекущийИндекс + НаправлениеСдвига].УникальныйИдентификатор, 
		Приоритет2
	);
		
	Врем[ТекущийИндекс].Приоритет = Приоритет2;
	Врем[ТекущийИндекс + НаправлениеСдвига].Приоритет = Приоритет1;
	
	Врем.Сдвинуть(ТекущийИндекс, НаправлениеСдвига);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбменятьПриоритеты(ИнформационнаяБаза, Идентификатор1, Приоритет1, Идентификатор2, Приоритет2)
	
	НачатьТранзакцию();
	
	Операции = Новый Массив;
	Операции.Добавить(Новый Структура("Приоритет, Идентификатор", Приоритет2, Идентификатор1));
	Операции.Добавить(Новый Структура("Приоритет, Идентификатор", Приоритет1, Идентификатор2));
	
	Для Каждого КлючеваяОперация ИЗ Операции Цикл
		
		Идентификатор = КлючеваяОперация.Идентификатор;		
		Настройки = РегистрыСведений.ОценкаПроизводительностиКлючевыеОперации.Получить(Новый Структура(
			"УникальныйИдентификатор, ИнформационнаяБаза",
			Идентификатор, ИнформационнаяБаза
		));
	
		МенеджерЗаписи = РегистрыСведений.ОценкаПроизводительностиКлючевыеОперации.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.УникальныйИдентификатор = Идентификатор;		
		МенеджерЗаписи.ПриоритетВИБ = Настройки.ПриоритетВИБ;
		МенеджерЗаписи.ЦелевоеВремяВИБ = Настройки.ЦелевоеВремяВИБ;
		МенеджерЗаписи.Имя = Настройки.Имя;
		МенеджерЗаписи.МинимальноДопустимыйУровень = Настройки.МинимальноДопустимыйУровень;
		МенеджерЗаписи.ЦелевоеВремя = Настройки.ЦелевоеВремя;
		
		МенеджерЗаписи.ИнформационнаяБаза = ИнформационнаяБаза;
		МенеджерЗаписи.Приоритет = КлючеваяОперация.Приоритет;
			
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВсеКлючевыеОперации(Команда)
	ДинамикаПроизводительности.Очистить();
КонецПроцедуры







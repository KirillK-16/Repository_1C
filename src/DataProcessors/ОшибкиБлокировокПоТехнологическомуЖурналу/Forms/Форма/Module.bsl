
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗагрузитьНастройки();
	Обновить();
КонецПроцедуры

&НаСервере
Функция СформироватьЗапрос(ТекстЗапроса, ФильтроватьПоВидуБлокировки = Истина)
	
	Запрос = Новый Запрос;
	ПараметрыЗапроса = Новый Структура;
	
	Фильтр = " ТехнологическийЖурнал.Тип = Значение(Перечисление.СобытияТЖ.ОшибкаБлокировки) ";
	
	Условия = Новый Массив;
	СтрокаПараметров = "ИмяРеквизита, ТекстУсловия";
	Условия.Добавить(Новый Структура(
		СтрокаПараметров,
		"КонецПериода", " ТехнологическийЖурнал.Дата <= &КонецПериода "
	));
	Условия.Добавить(Новый Структура(
		СтрокаПараметров,
		"НачалоПериода", " ТехнологическийЖурнал.Дата >= &НачалоПериода "
	));
	Условия.Добавить(Новый Структура(
		СтрокаПараметров,
		"Кластер", " ТехнологическийЖурнал.Кластер = &Кластер "
	));
	
	Если ФильтроватьПоВидуБлокировки Тогда
		Условия.Добавить(Новый Структура(
			СтрокаПараметров,
			"ВидБлокировки", " ТехнологическийЖурнал.ВидБлокировки = &ВидБлокировки "
		));
	КонецЕсли;
	
	Для Каждого Условие Из Условия Цикл
		ИмяРеквизита = Условие.ИмяРеквизита;
		ЗначениеРеквизита = Объект[ИмяРеквизита];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Если НЕ ПустаяСтрока(Фильтр) Тогда
				Фильтр = Фильтр + " И ";
			КонецЕсли;
			Фильтр = Фильтр + Условие.ТекстУсловия;
			ПараметрыЗапроса.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ИнформационнаяБаза) Тогда
		Если ПустаяСтрока(ИмяБазыВКластере) Тогда
			ИмяБазыВКластере = РегистрыСведений.ПараметрыИнформационныхБаз.Получить(Новый Структура(
				"ОбъектКонтроля", Объект.ИнформационнаяБаза
			))["ИмяБазыВКластере"];
		КонецЕсли;
		Фильтр = Фильтр + " И ТехнологическийЖурнал.ИнформационнаяБазаВСтроку = &ИмяБазыВКластере ";
		ПараметрыЗапроса.Вставить("ИмяБазыВКластере", ИмяБазыВКластере);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Фильтр) Тогда
		Фильтр = " ГДЕ " + Фильтр;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Фильтр", Фильтр);
	
	Запрос.Текст = ТекстЗапроса;
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	Возврат Запрос;
	
КонецФункции

&НаСервере
Процедура Обновить(ОбновитьСтатистику = Истина, ОбновитьРейтинг = Истина)
	
	Если ОбновитьСтатистику Тогда
		ОбновитьСтатистику();
	КонецЕсли;
	
	Если ОбновитьРейтинг Тогда
		ОбновитьРейтинг();
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРейтинг()
	ТекстЗапроса = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТехнологическийЖурнал.КонтекстХэш) КАК КоличествоБлокировокСДаннымКонтекстом,
	|	ТехнологическийЖурнал.КонтекстХэш КАК КонтекстХэш,
	|	ТехнологическийЖурнал.ВидБлокировки КАК ВидБлокировки
	|ПОМЕСТИТЬ РейтингБлокировок
	|ИЗ
	|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|	%Фильтр
	|
	|СГРУППИРОВАТЬ ПО
	|	ТехнологическийЖурнал.КонтекстХэш, ТехнологическийЖурнал.ВидБлокировки;
	|
	|/////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТехнологическийЖурнал.КонтекстХэш,
	|	ТехнологическийЖурнал.ВидБлокировки,
	|	МАКСИМУМ(ТехнологическийЖурнал.УникальныйИдентификатор) КАК УникальныйИдентификатор
	|ПОМЕСТИТЬ ИдентификаторыЗаписей
	|ИЗ
	|	РейтингБлокировок
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|ПО 
	|	РейтингБлокировок.КонтекстХэш = ТехнологическийЖурнал.КонтекстХэш
	|	И РейтингБлокировок.ВидБлокировки = ТехнологическийЖурнал.ВидБлокировки
	|СГРУППИРОВАТЬ ПО
	|	ТехнологическийЖурнал.КонтекстХэш, ТехнологическийЖурнал.ВидБлокировки;
	|
	|/////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТехнологическийЖурнал.Контекст,
	|	ТехнологическийЖурнал.КонтекстХэш,
	|	ТехнологическийЖурнал.ВидБлокировки
	|ПОМЕСТИТЬ ДанныеПоБлокировкам
	|ИЗ
	|	ИдентификаторыЗаписей
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|ПО 
	|	ИдентификаторыЗаписей.УникальныйИдентификатор = ТехнологическийЖурнал.УникальныйИдентификатор;
	|
	|/////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РейтингБлокировок.КоличествоБлокировокСДаннымКонтекстом КАК КоличествоБлокировокСДаннымКонтекстом,
	|	ДанныеПоБлокировкам.Контекст,
	|	ДанныеПоБлокировкам.КонтекстХэш,
	|	ДанныеПоБлокировкам.ВидБлокировки
	|ИЗ
	|	РейтингБлокировок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	ДанныеПоБлокировкам КАК ДанныеПоБлокировкам
	|ПО 
	|	РейтингБлокировок.КонтекстХэш = ДанныеПоБлокировкам.КонтекстХэш 
	|	И РейтингБлокировок.ВидБлокировки = ДанныеПоБлокировкам.ВидБлокировки 
	|
	|УПОРЯДОЧИТЬ ПО РейтингБлокировок.КоличествоБлокировокСДаннымКонтекстом УБЫВ";
	
	Запрос = СформироватьЗапрос(ТекстЗапроса, Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РейтингБлокировок.Очистить();
	Пока Выборка.Следующий() Цикл
		ВидБлокировки = Выборка.ВидБлокировки;
		
			СтрокаРейтинга = РейтингБлокировок.Добавить();
			СтрокаРейтинга.КоличествоБлокировокСДаннымКонтекстом = Выборка.КоличествоБлокировокСДаннымКонтекстом;
			СтрокаРейтинга.Контекст = Выборка.Контекст;
			СтрокаРейтинга.ВидБлокировки = ВидБлокировки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатистику()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество,
	|	НАЧАЛОПЕРИОДА(ТехнологическийЖурнал.Дата, ДЕНЬ) КАК Дата,
	|	ТехнологическийЖурнал.ВидБлокировки КАК ВидБлокировки
	|ИЗ
	|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|	%Фильтр
	|
	|СГРУППИРОВАТЬ ПО
	|	ТехнологическийЖурнал.ВидБлокировки, НАЧАЛОПЕРИОДА(ТехнологическийЖурнал.Дата, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО Дата";
	
	Запрос = СформироватьЗапрос(ТекстЗапроса, Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтатистикаПоБлокировкам.Очистить();
	ПоследняяДата = Неопределено;
	Пока Выборка.Следующий() Цикл
		ТекущаяДата = Выборка.Дата;
		Если ПоследняяДата <> ТекущаяДата Тогда
			СтрокаСтатистики = СтатистикаПоБлокировкам.Добавить();
			СтрокаСтатистики.Дата = ТекущаяДата;
			ПоследняяДата = ТекущаяДата;
		КонецЕсли;
		
		Если Выборка.ВидБлокировки = Перечисления.ВидыБлокировок.Взаимоблокировка1С Тогда
			СтрокаСтатистики.Взаимоблокировок1С = Выборка.Количество;
		КонецЕсли;
		
		Если Выборка.ВидБлокировки = Перечисления.ВидыБлокировок.ВзаимоблокировкаСУБД Тогда
			СтрокаСтатистики.ВзаимоблокировокСУБД = Выборка.Количество;
		КонецЕсли;
		
		Если Выборка.ВидБлокировки = Перечисления.ВидыБлокировок.Таймаут1С Тогда
			СтрокаСтатистики.Таймаутов1С = Выборка.Количество;
		КонецЕсли;
		
		Если Выборка.ВидБлокировки = Перечисления.ВидыБлокировок.ТаймаутСУБД Тогда
			СтрокаСтатистики.ТаймаутовСУБД = Выборка.Количество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	Обновить();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	Обновить();
КонецПроцедуры

&НаКлиенте
Процедура КластерПриИзменении(Элемент)
	Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаПриИзменении(Элемент)
	ИмяБазыВКластере = "";
	Обновить();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроек()
	Возврат "НастройкиФормыКонтрольБлокировокПоТехнологическомуЖурналу";
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	КлючНастроек = КлючНастроек();
	ХранилищеНастроекДанныхФорм.Сохранить(КлючНастроек, "НачалоПериода", Объект.НачалоПериода);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючНастроек, "КонецПериода", Объект.КонецПериода);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючНастроек, "Кластер", Объект.Кластер);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючНастроек, "ИнформационнаяБаза", Объект.ИнформационнаяБаза);
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройки()
	КлючНастроек = КлючНастроек();
	
	ДатаНачалаСохраненная = ХранилищеНастроекДанныхФорм.Загрузить(КлючНастроек, "НачалоПериода");
	Если НЕ ЗначениеЗаполнено(ДатаНачалаСохраненная) Тогда
		ДатаНачалаСохраненная = ТекущаяДатаСеанса() - 3600;
	КонецЕсли;
	Объект.НачалоПериода = ДатаНачалаСохраненная;
	
	ДатаОкончанияСохраненная = ХранилищеНастроекДанныхФорм.Загрузить(КлючНастроек, "КонецПериода");
	Если НЕ ЗначениеЗаполнено(ДатаОкончанияСохраненная) Тогда
		ДатаОкончанияСохраненная = ТекущаяДатаСеанса();
	КонецЕсли;
	Объект.КонецПериода = ДатаОкончанияСохраненная;
	
	Кластер = ХранилищеНастроекДанныхФорм.Загрузить(КлючНастроек, "Кластер");
	Если ЗначениеЗаполнено(Кластер) Тогда
		Объект.Кластер = Кластер;
	КонецЕсли;
	
	ИнформационнаяБаза = ХранилищеНастроекДанныхФорм.Загрузить(КлючНастроек, "ИнформационнаяБаза");
	Если ЗначениеЗаполнено(ИнформационнаяБаза) Тогда
		Объект.ИнформационнаяБаза = ИнформационнаяБаза;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КластерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("КластерНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаВыбораКластера",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КластерНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Объект.Кластер = РезультатЗакрытия;
		КластерПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КластерОчистка(Элемент, СтандартнаяОбработка)
	КластерПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ИнформационнаяБазаНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаВыбораИнформационнойБазы",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Объект.ИнформационнаяБаза = РезультатЗакрытия;
		ИнформационнаяБазаПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаОчистка(Элемент, СтандартнаяОбработка)
	ИнформационнаяБазаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ВидБлокировкиПриИзменении(Элемент)
	Обновить(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВидБлокировкиОчистка(Элемент, СтандартнаяОбработка)
	Обновить(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоманда(Команда)
	Обновить();
КонецПроцедуры

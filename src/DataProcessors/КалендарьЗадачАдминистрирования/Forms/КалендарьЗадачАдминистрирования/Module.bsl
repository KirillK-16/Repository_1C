#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Календарь.ТекущиеПериодыОтображения.Очистить();
	НачалоПериода = НачалоНедели(ТекущаяДатаСеанса());
	КонецПериода  = КонецНедели(ТекущаяДатаСеанса());
	
	ЗаполнитьПланировщикНаСервере(НачалоПериода, КонецПериода);
	
	Календарь.ТекущиеПериодыОтображения.Добавить(НачалоПериода, КонецПериода);
	ВариантПериодаОтображения = Перечисления.ВариантыПериодаОтображения.Неделя;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланировщикНаСервере(НачалоПериодаОтображения, ОкончаниеПериодаОтображения)
	Запрос = Новый Запрос;
	
	ТекстВТ = "ВЫБРАТЬ
	          |	ЭкземплярыСценариевАвтоматизации.Ссылка КАК Ссылка,
	          |	ЭкземплярыСценариевАвтоматизации.ПометкаУдаления КАК ПометкаУдаления,
	          |	ЭкземплярыСценариевАвтоматизации.Владелец КАК Владелец,
	          |	ЭкземплярыСценариевАвтоматизации.Код КАК Код,
	          |	ЭкземплярыСценариевАвтоматизации.Наименование КАК Наименование,
	          |	ЭкземплярыСценариевАвтоматизации.Состояние КАК Состояние,
	          |	ЭкземплярыСценариевАвтоматизации.КонтурАвтоматизации КАК КонтурАвтоматизации,
	          |	ЭкземплярыСценариевАвтоматизации.ПлановаяДатаЗапуска КАК ПлановаяДатаЗапуска,
	          |	ЭкземплярыСценариевАвтоматизации.ПлановаяДатаОкончания КАК ПлановаяДатаОкончания,
	          |	ЭкземплярыСценариевАвтоматизации.ФактическаяДатаЗапуска КАК ФактическаяДатаЗапуска,
	          |	ЭкземплярыСценариевАвтоматизации.ФактическаяДатаОкончания КАК ФактическаяДатаОкончания,
	          |	ЭкземплярыСценариевАвтоматизации.ДатаЗапускаТеста КАК ДатаЗапускаТеста,
	          |	ЭкземплярыСценариевАвтоматизации.ДатаОкончанияТеста КАК ДатаОкончанияТеста,
	          |	ЭкземплярыСценариевАвтоматизации.РежимВыполнения КАК РежимВыполнения,
	          |	ЭкземплярыСценариевАвтоматизации.Комментарий КАК Комментарий
	          |ПОМЕСТИТЬ ЭкземплярыСценариевДляПоказа
	          |ИЗ
	          |	Справочник.ЭкземплярыСценариевАвтоматизации КАК ЭкземплярыСценариевАвтоматизации
	          |ГДЕ
	          |	ЭкземплярыСценариевАвтоматизации.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.НеЗапланирован)
	          |	И ЭкземплярыСценариевАвтоматизации.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.ТестЗавершенУспешно)
	          |	И ЭкземплярыСценариевАвтоматизации.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.ТестЗавершенНеуспешно)
	          |	И ЭкземплярыСценариевАвтоматизации.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.ТестСтартован)
	          |	И ЭкземплярыСценариевАвтоматизации.РежимВыполнения <> ЗНАЧЕНИЕ(Перечисление.РежимВыполненияСценария.Фоновое)
	          |	И (ЭкземплярыСценариевАвтоматизации.ПлановаяДатаЗапуска МЕЖДУ &ДатаНачала И &ДатаОкончания
	          |			ИЛИ ЭкземплярыСценариевАвтоматизации.ПлановаяДатаОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания
	          |			ИЛИ ЭкземплярыСценариевАвтоматизации.ПлановаяДатаЗапуска = ДАТАВРЕМЯ(1, 1, 1)
	          |			ИЛИ ЭкземплярыСценариевАвтоматизации.ПлановаяДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	          |
	          |ИНДЕКСИРОВАТЬ ПО
	          |	Ссылка
			  |;";
	
	Если Не ГруппироватьОдинаковыеСценарии Тогда 
		Если Не ЭтоФакт Тогда
			Запрос.Текст = ТекстВТ +
			"
			|ВЫБРАТЬ
			|	ЭкземплярыСценариевАвтоматизации.Ссылка КАК Ссылка,
			|	ЭкземплярыСценариевАвтоматизации.Наименование КАК Наименование,
			|	ЭкземплярыСценариевАвтоматизации.Состояние КАК Состояние,
			|	ПланЗапускаСценариевАвтоматизации.Начало КАК ДатаНачалаПлан,
			|	ЭкземплярыСценариевАвтоматизации.ФактическаяДатаЗапуска КАК ДатаНачалаФакт,
			|	ПланЗапускаСценариевАвтоматизации.Окончание КАК ДатаОкончанияПлан,
			|	ЭкземплярыСценариевАвтоматизации.ФактическаяДатаОкончания КАК ДатаОкончанияФакт,
			|	ПланЗапускаСценариевАвтоматизации.ДатаЗамещения КАК ДатаЗамещения,
			|	ВЫБОР
			|		КОГДА &ОтображатьОтмененныеЗадачи = ИСТИНА
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ПланЗапускаСценариевАвтоматизации.Удаленный
			|	КОНЕЦ КАК Удаленный,
			|	ПланЗапускаСценариевАвтоматизации.Расписание КАК Расписание,
			|	ЕСТЬNULL(ПланЗапускаСценариевАвтоматизации.ВыполняетсяПоРасписанию, ЛОЖЬ) КАК ВыполняетсяПоРасписанию,
			|	ЕСТЬNULL(ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель, ЗНАЧЕНИЕ(Справочник.ЭкземплярыСценариевАвтоматизации.ПустаяСсылка)) КАК ЭкземплярРодитель,
			|	ЭкземплярыСценариевАвтоматизации.Код КАК Код,
			|	ВЫБОР
			|		КОГДА ЭкземплярыСценариевАвтоматизации.ПометкаУдаления
			|				ИЛИ ПланЗапускаСценариевАвтоматизации.Удаленный
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Отмененное,
			|	ИСТИНА КАК План,
			|	ЭкземплярыСценариевАвтоматизации.Владелец КАК Владелец
			|ИЗ
			|	ЭкземплярыСценариевДляПоказа КАК ЭкземплярыСценариевАвтоматизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
			|		ПО ЭкземплярыСценариевАвтоматизации.Ссылка = ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария
			|ГДЕ
			|	(НЕ ЭкземплярыСценариевАвтоматизации.ПометкаУдаления
			|				И НЕ ПланЗапускаСценариевАвтоматизации.Удаленный
			|			ИЛИ &ОтображатьОтмененныеЗадачи = ИСТИНА)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ЭкземплярыСценариевДляПоказа";
			
		Иначе // Факт
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭкземплярыСценариевАвтоматизации.Ссылка КАК Ссылка,
			|	ЭкземплярыСценариевАвтоматизации.Наименование КАК Наименование,
			|	ЭкземплярыСценариевАвтоматизации.Состояние КАК Состояние,
			|	ЭкземплярыСценариевАвтоматизации.ФактическаяДатаЗапуска КАК ДатаНачалаФакт,
			|	ЭкземплярыСценариевАвтоматизации.ФактическаяДатаОкончания КАК ДатаОкончанияФакт,
			|	ЭкземплярыСценариевАвтоматизации.Код КАК Код,
			|	ЭкземплярыСценариевАвтоматизации.Владелец КАК Владелец,
			|	ЛОЖЬ КАК ВыполняетсяПоРасписанию,
			|	НЕОПРЕДЕЛЕНО КАК ЭкземплярРодитель,
			|	ЛОЖЬ КАК Отмененное
			|ИЗ
			|	Справочник.ЭкземплярыСценариевАвтоматизации КАК ЭкземплярыСценариевАвтоматизации
			|ГДЕ
			|	НЕ ЭкземплярыСценариевАвтоматизации.ПометкаУдаления
			|	И ЭкземплярыСценариевАвтоматизации.РежимВыполнения <> ЗНАЧЕНИЕ(Перечисление.РежимВыполненияСценария.Фоновое)
			|	И (ЭкземплярыСценариевАвтоматизации.ФактическаяДатаЗапуска МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	ИЛИ ЭкземплярыСценариевАвтоматизации.ФактическаяДатаОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)";
		КонецЕсли;
		
		ФинальныеСостояния = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьФинальныеСостояния();
		
		Запрос.УстановитьПараметр("ФинальныеСостояния", ФинальныеСостояния);
		
		Запрос.УстановитьПараметр("ДатаНачала", НачалоПериодаОтображения); 
		Запрос.УстановитьПараметр("ДатаОкончания", ОкончаниеПериодаОтображения); 
		Запрос.УстановитьПараметр("ОтображатьОтмененныеЗадачи", ОтображатьОтмененныеЗадачи); 
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальная = РезультатЗапроса.Выбрать();
		
		
		Пока ВыборкаДетальная.Следующий() Цикл
			Если НЕ ЭтоФакт Тогда	
				ДатаНачала    = ВыборкаДетальная.ДатаНачалаПлан; 
				ДатаОкончания = ВыборкаДетальная.ДатаОкончанияПлан;
				Если ДатаНачала = '00010101' И ДатаОкончания = '00010101' Тогда
					Если ФинальныеСостояния.Найти(ВыборкаДетальная.Состояние) = Неопределено Тогда
						ДатаНачала = НачалоДня(ТекущаяДатаСеанса());
						ДатаОкончания = КонецДня(ТекущаяДатаСеанса());
					КонецЕсли;	
				ИначеЕсли ДатаНачала = '00010101' Тогда 
					ДатаНачала = НачалоДня(ДатаОкончания);
				ИначеЕсли ДатаОкончания = '00010101' Тогда 
					ДатаОкончания = КонецДня(ДатаНачала);
				КонецЕсли;	
			Иначе
				ДатаНачала    = ВыборкаДетальная.ДатаНачалаФакт; 
				ДатаОкончания = ВыборкаДетальная.ДатаОкончанияФакт;
			КонецЕсли;	
			Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
				// Это план
				Если НЕ ЭтоФакт Тогда 
					НовыйЭлемент = Календарь.Элементы.Найти(ВыборкаДетальная.Ссылка);
					Если НовыйЭлемент = Неопределено Тогда
						НовыйЭлемент = Календарь.Элементы.Добавить(ДатаНачала, ДатаОкончания);
					КонецЕсли;	
				Иначе
					НовыйЭлемент = Календарь.Элементы.Добавить(ДатаНачала, ДатаОкончания);
				КонецЕсли;	
				
				НовыйЭлемент.Текст = ВыборкаДетальная.Наименование;
				НовыйЭлемент.Значение = ВыборкаДетальная.Ссылка;
				НовыйЭлемент.Картинка = Новый Картинка;
				НовыйЭлемент.Начало = ДатаНачала;
				НовыйЭлемент.Конец	= ДатаОкончания;
		
				// цвет рамки
				Если Не ЭтоФакт Тогда
					Если  ВыборкаДетальная.ВыполняетсяПоРасписанию Тогда
						НовыйЭлемент.ЦветРамки = WebЦвета.Оранжевый;
					ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальная.ЭкземплярРодитель) Тогда
						НовыйЭлемент.ЦветРамки = WebЦвета.Синий;
					КонецЕсли;	
				КонецЕсли;	
				
				ЗаполнитьДекоративныеАтрибутыЭлементаКалендаря(НовыйЭлемент, ВыборкаДетальная);
			КонецЕсли;	
		КонецЦикла;	
	// ГРУППИРОВКА - пока кажется группировать есть смысл только в режиме "План" (Факт всегда не совпадет в части дат.) 
	Иначе 		
		Запрос.Текст = ТекстВТ +
		"
		|
		|ВЫБРАТЬ
		|	ЭкземплярыСценариевАвтоматизации.Ссылка КАК Ссылка,
		|	ЭкземплярыСценариевАвтоматизации.Наименование КАК Наименование,
		|	ЭкземплярыСценариевАвтоматизации.Состояние КАК Состояние,
		|	ЭкземплярыСценариевАвтоматизации.ПлановаяДатаЗапуска КАК ДатаНачалаПлан,
		|	НАЧАЛОПЕРИОДА(ЭкземплярыСценариевАвтоматизации.ПлановаяДатаЗапуска, ЧАС) КАК ДатаНачалаПланДляГруппировки,
		|	ЭкземплярыСценариевАвтоматизации.ФактическаяДатаЗапуска КАК ДатаНачалаФакт,
		|	ЭкземплярыСценариевАвтоматизации.ПлановаяДатаОкончания КАК ДатаОкончанияПлан,
		|	КОНЕЦПЕРИОДА(ЭкземплярыСценариевАвтоматизации.ПлановаяДатаОкончания, ЧАС) КАК ДатаОкончанияПланДляГруппировки,
		|	ЭкземплярыСценариевАвтоматизации.ФактическаяДатаОкончания КАК ДатаОкончанияФакт,
		|	ПланЗапускаСценариевАвтоматизации.ДатаЗамещения КАК ДатаЗамещения,
		|	ВЫБОР
		|		КОГДА &ОтображатьОтмененныеЗадачи = ИСТИНА
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ПланЗапускаСценариевАвтоматизации.Удаленный
		|	КОНЕЦ КАК Удаленный,
		|	ЭкземплярыСценариевАвтоматизации.Код КАК Код,
		|	ВЫБОР
		|		КОГДА ЭкземплярыСценариевАвтоматизации.ПометкаУдаления
		|				ИЛИ ПланЗапускаСценариевАвтоматизации.Удаленный
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Отмененное,
		|	ИСТИНА КАК План,
		|	ЭкземплярыСценариевАвтоматизации.Владелец КАК Владелец,
		|	ШаблоныЗаполненияПараметровСценариев.ИмяШаблона КАК ИмяШаблона,
		|	ШаблоныЗаполненияПараметровСценариев.Значение КАК Значение
		|ИЗ
		|	ЭкземплярыСценариевДляПоказа КАК ЭкземплярыСценариевАвтоматизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланЗапускаСценариевАвтоматизации КАК ПланЗапускаСценариевАвтоматизации
		|		ПО ЭкземплярыСценариевАвтоматизации.Ссылка = ПланЗапускаСценариевАвтоматизации.ЭкземплярСценария
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШаблоныЗаполненияПараметровСценариев КАК ШаблоныЗаполненияПараметровСценариев
		|		ПО ЭкземплярыСценариевАвтоматизации.Ссылка = ШаблоныЗаполненияПараметровСценариев.ЭкземплярСценария
		|			И (ШаблоныЗаполненияПараметровСценариев.УчаствуетВИнтерфейсныхГруппировках)
		|ГДЕ
		|	(НЕ ЭкземплярыСценариевАвтоматизации.ПометкаУдаления
		|				И НЕ ПланЗапускаСценариевАвтоматизации.Удаленный
		|			ИЛИ &ОтображатьОтмененныеЗадачи = ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПланЗапускаСценариевАвтоматизации.ЭкземплярРодитель
		|ИТОГИ ПО
		|	Владелец,
		|	ДатаНачалаПланДляГруппировки,
		|	ДатаОкончанияПланДляГруппировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЭкземплярыСценариевДляПоказа";
		
		ФинальныеСостояния = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьФинальныеСостояния();
		
		Запрос.УстановитьПараметр("ФинальныеСостояния", ФинальныеСостояния);
		
		Запрос.УстановитьПараметр("ДатаНачала", НачалоПериодаОтображения); 
		Запрос.УстановитьПараметр("ДатаОкончания", ОкончаниеПериодаОтображения); 
		Запрос.УстановитьПараметр("ОтображатьОтмененныеЗадачи", ОтображатьОтмененныеЗадачи); 
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			Выборка1 = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка1.Следующий() Цикл
				Выборка2 = Выборка1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка2.Следующий() Цикл
					ВыборкаДетальная = Выборка2.Выбрать();
					
					НовыйЭлемент = Неопределено;
					
					Значение = Новый Структура;
					
					Значение.Вставить("Сценарий", Выборка2.Владелец);
					Значение.Вставить("ДатаНачала", Выборка2.ДатаНачалаПлан);
					Значение.Вставить("ДатаОкончания", Выборка2.ДатаНачалаФакт);
					Значение.Вставить("СписокЭкземпляров", Новый СписокЗначений);
					
					Пока ВыборкаДетальная.Следующий() Цикл
						Если НЕ ЭтоФакт Тогда	
							ДатаНачала    = ВыборкаДетальная.ДатаНачалаПлан; 
							ДатаОкончания = ВыборкаДетальная.ДатаОкончанияПлан;
							Если ДатаНачала = '00010101' И ДатаОкончания = '00010101' Тогда
								Если ФинальныеСостояния.Найти(ВыборкаДетальная.Состояние) = Неопределено Тогда
									ДатаНачала = НачалоДня(ТекущаяДатаСеанса());
									ДатаОкончания = КонецДня(ТекущаяДатаСеанса());
								КонецЕсли;	
							ИначеЕсли ДатаНачала = '00010101' Тогда 
								ДатаНачала = НачалоДня(ДатаОкончания);
							ИначеЕсли ДатаОкончания = '00010101' Тогда 
								ДатаОкончания = КонецДня(ДатаНачала);
							КонецЕсли;	
						Иначе
							ДатаНачала    = ВыборкаДетальная.ДатаНачалаФакт; 
							ДатаОкончания = ВыборкаДетальная.ДатаОкончанияФакт;
						КонецЕсли;	
						Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
							НовыйЭлемент = Календарь.Элементы.Найти(Значение);
							Если НовыйЭлемент = Неопределено Тогда
								НовыйЭлемент = Календарь.Элементы.Добавить(ДатаНачала, ДатаОкончания);
							КонецЕсли;	
							
							НовыйЭлемент.Текст = ?(НовыйЭлемент.Текст = "", ВыборкаДетальная.Наименование + Символы.ПС + ?(ВыборкаДетальная.ИмяШаблона = NULL, "", ВыборкаДетальная.ИмяШаблона + "=" + ВыборкаДетальная.Значение+";"), НовыйЭлемент.Текст + Символы.ПС + ?(ВыборкаДетальная.ИмяШаблона = NULL, "", ВыборкаДетальная.ИмяШаблона + "=" + ВыборкаДетальная.Значение+";"));
							Если Не ЗначениеЗаполнено(НовыйЭлемент.Значение) Тогда
								НовыйЭлемент.Значение = Значение;
							КонецЕсли;
							
							Картинка = Новый Картинка;
							Если ВыборкаДетальная.Состояние = Перечисления.СостоянияСценария.ЗавершенНеуспешно
								ИЛИ ВыборкаДетальная.Состояние = Перечисления.СостоянияСценария.ЗавершенФатально 
								ИЛИ ВыборкаДетальная.Состояние = Перечисления.СостоянияСценария.Прерван Тогда
								Картинка = БиблиотекаКартинок.СтатусНеОк;
							ИначеЕсли ВыборкаДетальная.Состояние = Перечисления.СостоянияСценария.ВПроцессеОтката Тогда
								Если Картинка <> БиблиотекаКартинок.СтатусНеОк Тогда
									Картинка = БиблиотекаКартинок.СтатусОткатывается; 
								КонецЕсли;	
							ИначеЕсли ВыборкаДетальная.Состояние = Перечисления.СостоянияСценария.Стартован Тогда
								Если Картинка <> БиблиотекаКартинок.СтатусНеОк 
									И Картинка <> БиблиотекаКартинок.СтатусОткатывается 
									И Картинка <> БиблиотекаКартинок.СтатусВнимание Тогда
									Картинка = БиблиотекаКартинок.СтатусВыполняется;
								КонецЕсли;		
							ИначеЕсли (ВыборкаДетальная.Состояние = Перечисления.СостоянияСценария.Запланирован
								ИЛИ ВыборкаДетальная.Состояние = Перечисления.СостоянияСценария.ТестЗавершенНеуспешно
								ИЛИ ВыборкаДетальная.Состояние = Перечисления.СостоянияСценария.ТестЗавершенУспешно
								ИЛИ ВыборкаДетальная.Состояние = Перечисления.СостоянияСценария.ТестСтартован)
									И (НовыйЭлемент.Начало >= ТекущаяДатаСеанса() ИЛИ НовыйЭлемент.Конец >= ТекущаяДатаСеанса()) Тогда
								Если Картинка <> БиблиотекаКартинок.СтатусНеОк 
									И Картинка <> БиблиотекаКартинок.СтатусОткатывается 
									И Картинка <> БиблиотекаКартинок.СтатусВнимание Тогда
									Картинка = БиблиотекаКартинок.ЧасыБольшие;
								КонецЕсли;		
							ИначеЕсли ВыборкаДетальная.Состояние = Перечисления.СостоянияСценария.ЗавершенУспешно
								Или ВыборкаДетальная.Состояние = Перечисления.СостоянияСценария.ЗавершенУсловноУспешно Тогда
								Если Картинка <> БиблиотекаКартинок.СтатусНеОк 
									И Картинка <> БиблиотекаКартинок.СтатусОткатывается 
									И Картинка <> БиблиотекаКартинок.СтатусВнимание 
									И Картинка <> БиблиотекаКартинок.ЧасыБольшие Тогда
									Картинка = БиблиотекаКартинок.СтатусОк;
								КонецЕсли;	
							ИначеЕсли НовыйЭлемент.Начало < ТекущаяДатаСеанса() И НовыйЭлемент.Конец < ТекущаяДатаСеанса() Тогда
								Если Картинка <> БиблиотекаКартинок.СтатусНеОк 
									И Картинка <> БиблиотекаКартинок.СтатусОткатывается Тогда
									Картинка = БиблиотекаКартинок.СтатусВнимание;
								КонецЕсли;		
							КонецЕсли;

							СписокЭкземпляровДляОтображения = НовыйЭлемент.Значение.СписокЭкземпляров;
							Если СписокЭкземпляровДляОтображения.НайтиПоЗначению(ВыборкаДетальная.Ссылка) = Неопределено Тогда
								НовыйЭлемент.Значение.СписокЭкземпляров.Добавить(ВыборкаДетальная.Ссылка,,,Картинка);
							КонецЕсли;	
							НовыйЭлемент.Начало = ДатаНачала;
							НовыйЭлемент.Конец	= ДатаОкончания;
					
							ЗаполнитьДекоративныеАтрибутыЭлементаКалендаря(НовыйЭлемент, ВыборкаДетальная);
						КонецЕсли;	
					КонецЦикла;
					
					Если НовыйЭлемент <> Неопределено Тогда
						НовыйЭлемент.Текст = "[" + НовыйЭлемент.Значение.СписокЭкземпляров.Количество() + "] " +  НовыйЭлемент.Текст;
						НовыйЭлемент.Подсказка = "[" + НовыйЭлемент.Значение.СписокЭкземпляров.Количество() + "] " +  НовыйЭлемент.Подсказка;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ЗаполнитьДекоративныеАтрибутыЭлементаКалендаря(ЭлементКалендаря, СтруктураДанныхЗаполнения)
	// подсказка
	Если СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.Стартован Тогда
		ЭлементКалендаря.Подсказка = НСтр("ru='Сценарий выполняется'");
	ИначеЕсли СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.Запланирован Тогда
		ЭлементКалендаря.Подсказка = НСтр("ru='Сценарий запланирован'");
	ИначеЕсли СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ЗавершенУспешно Тогда
		ЭлементКалендаря.Подсказка = НСтр("ru='Сценарий завершен успешно'");
	ИначеЕсли СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ЗавершенУсловноУспешно Тогда
		ЭлементКалендаря.Подсказка = НСтр("ru='Сценарий завершен, есть неуспешные вспомогательные шаги'");
	ИначеЕсли СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ВПроцессеОтката Тогда
		ЭлементКалендаря.Подсказка = НСтр("ru='Сценарий откатывается'");
	ИначеЕсли СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ЗавершенНеуспешно
		ИЛИ СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ЗавершенФатально Тогда
		ЭлементКалендаря.Подсказка = НСтр("ru='Сценарий завершен неуспешно'");
	ИначеЕсли СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.Прерван Тогда
		ЭлементКалендаря.Подсказка = НСтр("ru='Сценарий прерван аварийно. Состояние системы неизвестно'");
	КонецЕсли;
	
	// цвет
	Если СтруктураДанныхЗаполнения.Отмененное Тогда
		ЭлементКалендаря.ЦветФона  = WebЦвета.СеребристоСерый;
	Иначе	
		НЗ = РегистрыСведений.ОформлениеЗадачАвтоматизацииВКалендаре.СоздатьНаборЗаписей();
		НЗ.Отбор.Сценарий.Установить(СтруктураДанныхЗаполнения.Владелец);
		НЗ.Прочитать();
		Если НЗ.Количество() > 0 Тогда
			ЭлементКалендаря.ЦветФона = НЗ[0].ЦветФона.Получить();
		Иначе
			ЭлементКалендаря.ЦветФона  = WebЦвета.БледноЗеленый;
		КонецЕсли;
	КонецЕсли;	
	
	// Картинки
	// С учетом возможной группировки задач в календаре, а картинка задается только одна, нужно ввести приоритеты картинок
	// 1. Неуспех
	// 2. Откат
	// 3. Не выполнилось По плану
	// 4. Стартован/запланирован
	// 5. Успех
	
	// если установлена картинка более высокого приоритета, то не меняем
	
	Если СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ЗавершенНеуспешно
		ИЛИ СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ЗавершенФатально 
		ИЛИ СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.Прерван Тогда
		ЭлементКалендаря.Картинка = БиблиотекаКартинок.СтатусНеОк;
	ИначеЕсли СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ВПроцессеОтката Тогда
		Если ЭлементКалендаря.Картинка <> БиблиотекаКартинок.СтатусНеОк Тогда
			ЭлементКалендаря.Картинка = БиблиотекаКартинок.СтатусОткатывается; 
		КонецЕсли;	
	ИначеЕсли СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.Стартован Тогда
		Если ЭлементКалендаря.Картинка <> БиблиотекаКартинок.СтатусНеОк 
			И ЭлементКалендаря.Картинка <> БиблиотекаКартинок.СтатусОткатывается 
			И ЭлементКалендаря.Картинка <> БиблиотекаКартинок.СтатусВнимание Тогда
			ЭлементКалендаря.Картинка = БиблиотекаКартинок.СтатусВыполняется;
		КонецЕсли;		
	ИначеЕсли СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.Запланирован
				ИЛИ СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ТестЗавершенНеуспешно
				ИЛИ СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ТестЗавершенУспешно
				ИЛИ СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ТестСтартован 
			И (ЭлементКалендаря.Начало >= ТекущаяДатаСеанса() ИЛИ ЭлементКалендаря.Конец >= ТекущаяДатаСеанса()) Тогда
		Если ЭлементКалендаря.Картинка <> БиблиотекаКартинок.СтатусНеОк 
			И ЭлементКалендаря.Картинка <> БиблиотекаКартинок.СтатусОткатывается 
			И ЭлементКалендаря.Картинка <> БиблиотекаКартинок.СтатусВнимание Тогда
			ЭлементКалендаря.Картинка = БиблиотекаКартинок.ЧасыБольшие;
		КонецЕсли;		
	ИначеЕсли СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ЗавершенУспешно 
		Или СтруктураДанныхЗаполнения.Состояние = Перечисления.СостоянияСценария.ЗавершенУсловноУспешно Тогда
		Если ЭлементКалендаря.Картинка <> БиблиотекаКартинок.СтатусНеОк 
			И ЭлементКалендаря.Картинка <> БиблиотекаКартинок.СтатусОткатывается 
			И ЭлементКалендаря.Картинка <> БиблиотекаКартинок.СтатусВнимание 
			И ЭлементКалендаря.Картинка <> БиблиотекаКартинок.ЧасыБольшие Тогда
			ЭлементКалендаря.Картинка = БиблиотекаКартинок.СтатусОк;
		КонецЕсли;	
	ИначеЕсли ЭлементКалендаря.Начало < ТекущаяДатаСеанса() И ЭлементКалендаря.Конец < ТекущаяДатаСеанса() Тогда
		Если ЭлементКалендаря.Картинка <> БиблиотекаКартинок.СтатусНеОк 
			И ЭлементКалендаря.Картинка <> БиблиотекаКартинок.СтатусОткатывается Тогда
			ЭлементКалендаря.Картинка = БиблиотекаКартинок.СтатусВнимание;
			ЭлементКалендаря.Подсказка = НСтр("ru='Сценарий не был выполнен по плану'");;
		КонецЕсли;		
	КонецЕсли;
	
	ЭлементКалендаря.Подсказка = ЭлементКалендаря.Подсказка + Символы.ПС + "============================" + Символы.ПС + "[" + Формат(ЭлементКалендаря.Начало, "ДФ=HH:mm") + " - " + Формат(ЭлементКалендаря.Конец, "ДФ=HH:mm") + "] " + ЭлементКалендаря.Текст;
КонецПроцедуры	

&НаКлиенте
Процедура КалендарьПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьВыбор(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Значение = Элемент.ВыделенныеЭлементы[0].Значение;
	Если ЗначениеЗаполнено(Значение) Тогда
		Если ТипЗнч(Значение) = Тип("СправочникСсылка.ЭкземплярыСценариевАвтоматизации") Тогда
			ОбработатьВыборЗначенияВКалендаре(Значение);
		ИначеЕсли ТипЗнч(Значение) = Тип("Структура") И Значение.Свойство("СписокЭкземпляров") Тогда
			Если Значение.СписокЭкземпляров.Количество() = 1 Тогда
				ОбработатьВыборЗначенияВКалендаре(Значение.СписокЭкземпляров[0].Значение);
			Иначе	
				Оповещение = Новый ОписаниеОповещения("ОбработатьВыборЗначенияВКалендаре",ЭтотОбъект); 
				ПоказатьВыборИзСписка(Оповещение, Значение.СписокЭкземпляров);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗначенияВКалендаре(Параметры, ДополнительныеПараметры = Неопределено) Экспорт
	Если Параметры <> Неопределено Тогда
		Если ТипЗнч(Параметры) = Тип("ЭлементСпискаЗначений") Тогда
			Ключ = Параметры.Значение;
		Иначе
			Ключ = Параметры;
		КонецЕсли;	
		ПараметрыФормы = Новый Структура("Ключ", Ключ);
		ОткрытьФорму("Справочник.ЭкземплярыСценариевАвтоматизации.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция ОбновитьНаСервере()
	ЗаполнитьПланировщикНаСервере(Календарь.ТекущиеПериодыОтображения[0].Начало, Календарь.ТекущиеПериодыОтображения[0].Конец);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ЭкземплярыСценариевАвтоматизации.Ссылка КАК Экземпляр,
	                      |	ЭкземплярыСценариевАвтоматизации.ФактическаяДатаОкончания КАК ДатаПереводаВСостояние,
	                      |	ЭкземплярыСценариевАвтоматизации.Состояние КАК Состояние,
	                      |	ВЫБОР
	                      |		КОГДА ЭкземплярыСценариевАвтоматизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.ЗавершенУспешно)
	                      |				ИЛИ ЭкземплярыСценариевАвтоматизации.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСценария.ЗавершенУсловноУспешно)
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК Успех,
	                      |	ЭкземплярыСценариевАвтоматизации.Представление КАК Представление
	                      |ИЗ
	                      |	Справочник.ЭкземплярыСценариевАвтоматизации КАК ЭкземплярыСценариевАвтоматизации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОповещенияОЗавершенииСценариев КАК ОповещенияОЗавершенииСценариев
	                      |		ПО ЭкземплярыСценариевАвтоматизации.Ссылка = ОповещенияОЗавершенииСценариев.Экземпляр
	                      |ГДЕ
	                      |	ЭкземплярыСценариевАвтоматизации.РежимВыполнения <> ЗНАЧЕНИЕ(Перечисление.РежимВыполненияСценария.Фоновое)
	                      |	И ЭкземплярыСценариевАвтоматизации.Состояние В(&ФинальныеСостояния)
	                      |	И ОповещенияОЗавершенииСценариев.Экземпляр ЕСТЬ NULL
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДатаПереводаВСостояние");
	
	ФинальныеСостояния = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьФинальныеСостояния();
	Запрос.УстановитьПараметр("ФинальныеСостояния", ФинальныеСостояния);
	
	Результат = Запрос.Выполнить().Выгрузить();
	МассивРезультата = Новый Массив;
	
	НачатьТранзакцию();
	
	Попытка
		Для каждого Строка Из Результат Цикл
			Структура = Новый Структура("Экземпляр, Представление, Успех", Строка.Экземпляр, Строка.Представление, Строка.Успех);
			
			НЗ = РегистрыСведений.ОповещенияОЗавершенииСценариев.СоздатьНаборЗаписей();
			НЗ.Отбор.Экземпляр.Установить(Строка.Экземпляр);
			НЗ.Отбор.Состояние.Установить(Строка.Состояние);
			НЗ.Отбор.ДатаПереводаВСостояние.Установить(Строка.ДатаПереводаВСостояние);
			
			Запись = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			
			НЗ.Записать(); 
			
			МассивРезультата.Добавить(Структура);
		КонецЦикла;	
		ЗафиксироватьТранзакцию();
	Исключение
	    ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат МассивРезультата;
КонецФункции

&НаКлиенте
Процедура Обновить(Команда)
	ВыполнитьОбновлениеОтображаемыхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбновлениеОтображаемыхДанных()
	Календарь.Элементы.Очистить();
	МассивЗавершенныхДляОповещения = ОбновитьНаСервере();
	ВывестиОповещениеПользователю(МассивЗавершенныхДляОповещения);
КонецПроцедуры	

&НаКлиенте
Процедура ВывестиОповещениеПользователю(МассивЗавершенныхДляОповещения)
    Для Каждого Элемент Из МассивЗавершенныхДляОповещения Цикл
		ДействияПриНажатии = ПолучитьНавигационнуюСсылку(Элемент.Экземпляр);
		Пояснение = Элемент.Представление;
		ПоказатьОповещениеПользователя("Завершен экземпляр сценария", ДействияПриНажатии, Пояснение, ?(Элемент.Успех, БиблиотекаКартинок.РукаОк, БиблиотекаКартинок.РукаНеОк), СтатусОповещенияПользователя.Важное);    
    КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура КалендарьПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Календарь.ТекущиеПериодыОтображения.Очистить();
	НовыйПериод = Календарь.ТекущиеПериодыОтображения.Добавить(ТекущиеПериодыОтображения[0].Начало, ТекущиеПериодыОтображения[0].Конец);
	
	ВыполнитьОбновлениеОтображаемыхДанных();
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	Если Элемент.ВыделенныеЭлементы.Количество() > 0 Тогда
		РедактируемыйЭкземпляр = Элемент.ВыделенныеЭлементы[0];
		Если РедактируемыйЭкземпляр <> Неопределено И ТипЗнч(РедактируемыйЭкземпляр.Значение) = Тип("СправочникСсылка.ЭкземплярыСценариевАвтоматизации") Тогда
			НеактивныеСостояния = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьНеактивныеСостояния();
			СостояниеЭкземпляра = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьЗначениеРеквизитаСценарияНаСервере(РедактируемыйЭкземпляр.Значение, "Состояние");
			Если НеактивныеСостояния.Найти(СостояниеЭкземпляра) <> Неопределено Тогда 
				СтруктураРедактируемогоУзла = Новый Структура("Значение, Начало, Окончание", РедактируемыйЭкземпляр.Значение, РедактируемыйЭкземпляр.Начало, РедактируемыйЭкземпляр.Конец);
				РаботаСКалендаремСервер.ВыполнитьПростуюОбработкуИзменения(СтруктураРедактируемогоУзла);
				
				ВыполнитьОбновлениеОтображаемыхДанных();
			Иначе
				ОтменаРедактирования = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Нельзя менять параметры запуска активных или завершенных сценариев'");
				Сообщение.Сообщить();
			КонецЕсли;	
		Иначе
			// Это что-то не связанное с задачами автоматизации
			ОтменаРедактирования = Истина;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

// В данной процедуре стандартное расписание элемента Планировщика
// анализируется и на его основании создаются Экземпляры сценариев
// с плановой датой, соответствующей расписанию
//
// ПРАВИЛА:
// --расписание есть только у родительского элемента
// --у дочерних можно менять дату старта и финиша + удалять
// --редактируем только некоторые параметры расписания
//
&НаКлиенте
Процедура ИзменитьЭлементыРегулярногоСценария(Параметры, ДополнительныеПараметры) Экспорт
	Если Параметры <> Неопределено И Элементы.Календарь.ВыделенныеЭлементы.Количество()>0 Тогда
				
		Если Параметры.Изменено Тогда  
			ТекущийРедактируемыйЭлемент = Элементы.Календарь.ВыделенныеЭлементы[0];
			ПараметрыТекущегоЭлемента = Новый Структура("Значение, Начало, Окончание", ТекущийРедактируемыйЭлемент.Значение, ТекущийРедактируемыйЭлемент.Начало, ТекущийРедактируемыйЭлемент.Конец);
			
			РаботаСКалендаремСервер.ВыполнитьОбработкуИзмененияРасписанияНаСервере(ПараметрыТекущегоЭлемента, Параметры);
			
			ВыполнитьОбновлениеОтображаемыхДанных();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриАктивизации(Элемент)
	Если Элемент.ВыделенныеЭлементы.Количество()>0 И Не ЭтоФакт И Не ГруппироватьОдинаковыеСценарии Тогда
		Элементы.КалендарьКонтекстноеМенюРедактироватьРасписание.Доступность = Истина;
		Элементы.КалендарьКонтекстноеМенюУдалитьЗадачу.Доступность = Истина;
	Иначе	
		Элементы.КалендарьКонтекстноеМенюРедактироватьРасписание.Доступность = Ложь;
		Элементы.КалендарьКонтекстноеМенюУдалитьЗадачу.Доступность = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если (Конец - Начало) <> 3600 Тогда //иначе любой клик будет приводить к созданию экземпляра сценария
		ДобавитьЗадачуВКалендарь(Начало, Конец);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьРасписание(Команда)
	Если Элементы.Календарь.ВыделенныеЭлементы.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ИзменитьЭлементыРегулярногоСценария", ЭтотОбъект);
		
		ЭлементКалендаря = Элементы.Календарь.ВыделенныеЭлементы[0];
		
		Расписание = РаботаСКалендаремСервер.ПолучитьРасписаниеНаСервере(ЭлементКалендаря.Значение);
		Если Расписание = Неопределено Тогда
			Расписание = Новый РасписаниеЭлементаПланировщика;
			РасписаниеЗадано = Ложь;
		Иначе
			РасписаниеЗадано = Истина;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		
		ПараметрыОткрытия.Вставить("Начало", ЭлементКалендаря.Начало);
		ПараметрыОткрытия.Вставить("Окончание", ЭлементКалендаря.Конец);
		ПараметрыОткрытия.Вставить("ДатаКонца", Расписание.ДатаКонца);
		ПараметрыОткрытия.Вставить("КоличествоПовторов", Расписание.КоличествоПовторов);
		ПараметрыОткрытия.Вставить("ПериодНедель", Расписание.ПериодНедель);
		ПараметрыОткрытия.Вставить("ПериодПовтораДней", Расписание.ПериодПовтораДней);
		ПараметрыОткрытия.Вставить("ДниНедели", Расписание.ДниНедели);
		ПараметрыОткрытия.Вставить("РасписаниеЗадано", РасписаниеЗадано);
		
		ОткрытьФорму("Обработка.КалендарьЗадачАдминистрирования.Форма.ФормаРасписания", ПараметрыОткрытия, ЭтотОбъект,,,,Оповещение);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачу(Команда)
	ТекДата = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьТекущуюДатуСеанса();
	СледующийЧас = НачалоЧаса(КонецЧаса(ТекДата)+1);
	ДобавитьЗадачуВКалендарь(СледующийЧас, СледующийЧас + 3600);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуВКалендарь(Начало, Окончание)
	Если Не ЭтоФакт Тогда
		ПараметрыЗадачи = Новый Структура("Начало, Окончание", Начало, Окончание);
		Оповещение = Новый ОписаниеОповещения("ОбработатьДобавлениеНовогоЭкземпляра", ЭтотОбъект);
		ОткрытьФорму("Справочник.ЭкземплярыСценариевАвтоматизации.ФормаОбъекта", ПараметрыЗадачи, ЭтотОбъект,,,,Оповещение);
	Иначе
		ПоказатьПредупреждение(, "ru='Действие доступно только в режиме планирования'");
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьДобавлениеНовогоЭкземпляра(Параметры, ДополнительныеПараметры) Экспорт
	ВыполнитьОбновлениеОтображаемыхДанных();
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьЗадачу(Команда)
	Оповещение = Новый ОписаниеОповещения("ОбработатьУдалениеЭкземпляра", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КалендарьЗадачАдминистрирования.Форма.ФормаУдаления", , ЭтотОбъект,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУдалениеЭкземпляра(Параметры, ДополнительныеПараметры) Экспорт
	Если Параметры <> Неопределено И Элементы.Календарь.ВыделенныеЭлементы.Количество()>0 Тогда
		// 0 - только эта задача
		// 1 - вся серия
		// 2 - все после этой
		ПрименятьК = Параметры.ПрименитьИзменениеК;
		
		ТекущийРедактируемыйЭлемент = Элементы.Календарь.ВыделенныеЭлементы[0];
		
		РаботаСКалендаремСервер.УдалитьЭлементыСценариев(ТекущийРедактируемыйЭлемент.Значение, ПрименятьК);
	КонецЕсли;	
	ВыполнитьОбновлениеОтображаемыхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ВариантПериодаОтображенияПриИзменении(Элемент)
	ИзменитьПериодОтображенияКалендаря();
	ВыполнитьОбновлениеОтображаемыхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодОтображенияКалендаря()
	ТекДата = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьТекущуюДатуСеанса();
	Если ВариантПериодаОтображения = ПредопределенноеЗначение("Перечисление.ВариантыПериодаОтображения.ОдинДень") Тогда
		Календарь.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Календарь.КратностьПериодическогоВарианта = 1;
		Календарь.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Календарь.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		Календарь.ШкалаВремени.Элементы[0].Формат = Формат("DF=HH:mm");
		Календарь.ТекущиеПериодыОтображения[0].Начало = НачалоДня(ТекДата);
		Календарь.ТекущиеПериодыОтображения[0].Конец = КонецДня(ТекДата);
		Календарь.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	ИначеЕсли ВариантПериодаОтображения = ПредопределенноеЗначение("Перечисление.ВариантыПериодаОтображения.ЧетыреДня") Тогда
		Календарь.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Календарь.КратностьПериодическогоВарианта = 1;
		Календарь.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Календарь.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		Календарь.ШкалаВремени.Элементы[0].Формат = Формат("DF=HH:mm");
		Календарь.ТекущиеПериодыОтображения[0].Начало = НачалоДня(ТекДата);
		Календарь.ТекущиеПериодыОтображения[0].Конец = НачалоДня(ТекДата)+4*24*3600-1;
		Календарь.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	ИначеЕсли ВариантПериодаОтображения = ПредопределенноеЗначение("Перечисление.ВариантыПериодаОтображения.СемьДней") Тогда
		Календарь.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Календарь.КратностьПериодическогоВарианта = 1;
		Календарь.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Календарь.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		Календарь.ШкалаВремени.Элементы[0].Формат = Формат("DF=HH:mm");
		Календарь.ТекущиеПериодыОтображения[0].Начало = НачалоДня(ТекДата);
		Календарь.ТекущиеПериодыОтображения[0].Конец = НачалоДня(ТекДата)+7*24*3600-1;
		Календарь.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	ИначеЕсли ВариантПериодаОтображения = ПредопределенноеЗначение("Перечисление.ВариантыПериодаОтображения.Неделя") Тогда
		Календарь.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Календарь.КратностьПериодическогоВарианта = 1;
		Календарь.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Календарь.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		Календарь.ШкалаВремени.Элементы[0].Формат = Формат("DF=HH:mm");
		Календарь.ТекущиеПериодыОтображения[0].Начало = НачалоНедели(ТекДата);
		Календарь.ТекущиеПериодыОтображения[0].Конец = КонецНедели(ТекДата);
		Календарь.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	ИначеЕсли ВариантПериодаОтображения = ПредопределенноеЗначение("Перечисление.ВариантыПериодаОтображения.Месяц") Тогда
		Календарь.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
		Календарь.КратностьПериодическогоВарианта = 1;
		Календарь.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		Календарь.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.День;
		Календарь.ШкалаВремени.Элементы[0].Формат = Формат("DF=dd.MM");
		Календарь.ТекущиеПериодыОтображения[0].Начало = НачалоНедели(НачалоМесяца(ТекДата));
		Календарь.ТекущиеПериодыОтображения[0].Конец = КонецНедели(КонецМесяца(ТекДата));
		Календарь.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ПланФактПриИзменении(Элемент)
	ВыполнитьОбновлениеОтображаемыхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОтмененныеПриИзменении(Элемент)
	ВыполнитьОбновлениеОтображаемыхДанных();
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	Если Не ЭтоФакт И Не ГруппироватьОдинаковыеСценарии Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьУдалениеЭкземпляра", ЭтотОбъект);
		ОткрытьФорму("Обработка.КалендарьЗадачАдминистрирования.Форма.ФормаУдаления", , ЭтотОбъект,,,,Оповещение);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьОдинаковыеСценарииПриИзменении(Элемент)
	Если ГруппироватьОдинаковыеСценарии Тогда
		ЭтоФакт = Ложь;
		Элементы.ЭтоФакт.ТолькоПросмотр = Истина;
	Иначе	
		Элементы.ЭтоФакт.ТолькоПросмотр = Ложь;	
	КонецЕсли;	
	
	ВыполнитьОбновлениеОтображаемыхДанных();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСписка(Команда)
	ОткрытьФорму("Справочник.ЭкземплярыСценариевАвтоматизации.ФормаСписка", , ЭтотОбъект,,,,);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВыполнитьОбновлениеОтображаемыхДанных();
	ПодключитьОбработчикОжидания("ВыполнитьОбновлениеОтображаемыхДанных", 60);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОтключитьОбработчикОжидания("ВыполнитьОбновлениеОтображаемыхДанных");
КонецПроцедуры

#КонецОбласти
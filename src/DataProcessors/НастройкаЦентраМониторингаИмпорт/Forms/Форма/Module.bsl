&НаСервереБезКонтекста
Функция СоздатьНаборЦентрМониторингаИмпорт()
	НаборКонстант = Константы.СоздатьНабор("
		|ИмпортироватьДанныеЦентрМониторингаИмпорт,
		|КоличествоФоновыхЗаданийЗагрузкиЦентрМониторингаИмпорт,
		|КоличествоПакетовФоновогоЗаданияЦентрМониторингаИмпорт,
		|КаталогиЦентраМониторинга,
		|ЦентрМониторингаОтветСервиса
		|");
		
	Возврат НаборКонстант;	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда 
		Для Каждого ЭлементФормы Из Элементы Цикл 
			Попытка
				ЭлементФормы.Доступность = Ложь;
			Исключение
				//свойства может не быть	
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	НаборКонстант = СоздатьНаборЦентрМониторингаИмпорт();
	НаборКонстант.Прочитать();
	
	ЗначениеВДанныеФормы(НаборКонстант, Объект.НастройкиКонстантыНабор);
	
	ПрочитатьНастройкиРегЗадания();
	ПрочитатьНастройкиКаталоговЦентраМониторинга(НаборКонстант.КаталогиЦентраМониторинга);
	ПрочитатьНастройкиЦентраМониторинга(НаборКонстант.ЦентрМониторингаОтветСервиса);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиРегЗадания()
	УстановитьПривилегированныйРежим(Истина);
	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ЦентрМониторингаИмпортДанных);
	РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	
	Если РегЗадания.Количество() > 0 Тогда
		ЭтотОбъект.РегЗаданиеИмпортДанныхВключено = РегЗадания[0].Использование;
		ЭтотОбъект.РегЗаданиеИмпортДанныхРасписание = РегЗадания[0].Расписание; 
		ЭтотОбъект.РегЗаданиеИмпортДанныхРасписаниеПредставление = Строка(ЭтотОбъект.РегЗаданиеИмпортДанныхРасписание);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиКаталоговЦентраМониторинга(КаталогиЦентраМониторингаХранилище)
	Каталоги = КаталогиЦентраМониторингаХранилище.Получить();
	Если Каталоги <> Неопределено Тогда
		Для Каждого ТекКаталог Из Каталоги Цикл
			НовСтрока = ЭтотОбъект.КаталогиЦентраМониторинга.Добавить();
			НовСтрока.Использовать = ТекКаталог["Использовать"];
			НовСтрока.КаталогЗагрузки = ТекКаталог["КаталогЗагрузки"];
			НовСтрока.КаталогУспешно = ТекКаталог["КаталогУспешно"];
			НовСтрока.КаталогОшибка = ТекКаталог["КаталогОшибка"];
			НовСтрока.ОписаниеОшибки = ТекКаталог["ОписаниеОшибки"];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиЦентраМониторинга(ЦентрМониторингаОтветСервиса)
	
	Если ЗначениеЗаполнено(ЦентрМониторингаОтветСервиса) Тогда
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ЦентрМониторингаОтветСервиса);
		
		Данные = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		ЭтотОбъект.ПериодОтправкиДанных = Данные["deliveryIntervalHours"];
		
		ТегиПакетов = Данные["packetProperties"];
		
		Если ТегиПакетов.Найти("info") <> Неопределено Тогда 
			ЭтотОбъект.Информация = Истина;
		КонецЕсли;
		Если ТегиПакетов.Найти("versions") <> Неопределено Тогда 
			ЭтотОбъект.ВерсииПодсистем = Истина;
		КонецЕсли;
		Если ТегиПакетов.Найти("dumps") <> Неопределено Тогда 
			ЭтотОбъект.Дампы = Истина;
		КонецЕсли;
		Если ТегиПакетов.Найти("business") <> Неопределено Тогда 
			ЭтотОбъект.БизнесСтатистика = Истина;
		КонецЕсли;
		Если ТегиПакетов.Найти("config") <> Неопределено Тогда 
			ЭтотОбъект.СтатистикаКонфигурации = Истина;
		КонецЕсли;
		Если ТегиПакетов.Найти("options") <> Неопределено Тогда 
			ЭтотОбъект.ФункциональныеОпции = Истина;
		КонецЕсли;
		Если ТегиПакетов.Найти("perf") <> Неопределено Тогда 
			ЭтотОбъект.ОценкаПроизводительности = Истина;
		КонецЕсли;
		Если ТегиПакетов.Найти("internal_perf") <> Неопределено Тогда 
			ЭтотОбъект.ОценкаПроизводительностиТехнологическая = Истина;
		КонецЕсли;
		
		ДопНастройки = Данные["settings"];
		ДопНастройкиМассив = СтрРазделить(ДопНастройки, ";");
		Для Каждого ДопНастройка Из ДопНастройкиМассив Цикл
			ДопНастройкаМассив = СтрРазделить(ДопНастройка, "=");
			Если ДопНастройкаМассив[0] = "TopApdex" Тогда
				ЭтотОбъект.ОценкаПроизводительностиКоличество = ДопНастройкаМассив[1];
			ИначеЕсли ДопНастройкаМассив[0] = "TopApdexTech" Тогда
				ЭтотОбъект.ОценкаПроизводительностиТехнологическаяКоличество = ДопНастройкаМассив[1];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


	

&НаКлиенте
Процедура НастройкиКонстантыНаборИмпортироватьДанныеЦентрМониторингаИмпортПриИзменении(Элемент)
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКонстантыНаборКоличествоФоновыхЗаданийЗагрузкиЦентрМониторингаИмпортПриИзменении(Элемент)
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКонстантыНаборКоличествоПакетовФоновогоЗаданияЦентрМониторингаИмпортПриИзменении(Элемент)
	ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИЗакрытьНаСервере()
	НаборКонстант = СоздатьНаборЦентрМониторингаИмпорт();
	НаборКонстант.ИмпортироватьДанныеЦентрМониторингаИмпорт = Объект.НастройкиКонстантыНабор.ИмпортироватьДанныеЦентрМониторингаИмпорт;
	НаборКонстант.КоличествоФоновыхЗаданийЗагрузкиЦентрМониторингаИмпорт = Объект.НастройкиКонстантыНабор.КоличествоФоновыхЗаданийЗагрузкиЦентрМониторингаИмпорт;
	НаборКонстант.КоличествоПакетовФоновогоЗаданияЦентрМониторингаИмпорт = Объект.НастройкиКонстантыНабор.КоличествоПакетовФоновогоЗаданияЦентрМониторингаИмпорт;
		
	ОтветСервиса = Новый Соответствие;
	ОтветСервиса.Вставить("deliveryIntervalHours", ЭтотОбъект.ПериодОтправкиДанных);
	
	ТегиПакетов = Новый Массив;
	ТегиПакетов.Добавить("ib");
	ТегиПакетов.Добавить("pn");
	ТегиПакетов.Добавить("versionPacket");
	ТегиПакетов.Добавить("datePacket");
	
	Если ЭтотОбъект.Информация Тогда
		ТегиПакетов.Добавить("info");
	КонецЕсли;
	Если ЭтотОбъект.ВерсииПодсистем Тогда
		ТегиПакетов.Добавить("versions");
	КонецЕсли;
	Если ЭтотОбъект.Дампы Тогда
		ТегиПакетов.Добавить("dumps");
	КонецЕсли;
	Если ЭтотОбъект.БизнесСтатистика Тогда
		ТегиПакетов.Добавить("business");
	КонецЕсли;
	Если ЭтотОбъект.СтатистикаКонфигурации Тогда
		ТегиПакетов.Добавить("config");
	КонецЕсли;
	Если ЭтотОбъект.ФункциональныеОпции Тогда
		ТегиПакетов.Добавить("options");
	КонецЕсли;
	Если ЭтотОбъект.ОценкаПроизводительности Тогда
		ТегиПакетов.Добавить("perf");
	КонецЕсли;
	Если ЭтотОбъект.ОценкаПроизводительностиТехнологическая Тогда
		ТегиПакетов.Добавить("internal_perf");
	КонецЕсли;
	
	ТегиПакетов.Добавить("Конфигурация");
	ТегиПакетов.Добавить("ВерсияКонфигурации");
		
	ОтветСервиса.Вставить("packetProperties", ТегиПакетов);
	ОтветСервиса.Вставить("settings", "TopApdex=" + Формат(ЭтотОбъект.ОценкаПроизводительностиКоличество, "ЧН=0; ЧГ=0") + ";TopApdexTech=" + Формат(ЭтотОбъект.ОценкаПроизводительностиТехнологическаяКоличество, "ЧН=0; ЧГ=0") + ";ПериодУдаления=86400");
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, ОтветСервиса);
	
	Данные = ЗаписьJSON.Закрыть();	
	НаборКонстант.ЦентрМониторингаОтветСервиса = Данные;
	
	Каталоги = Новый Массив;
	Для Каждого ТекКаталог Из ЭтотОбъект.КаталогиЦентраМониторинга Цикл
		Каталог = Новый Соответствие;
		Каталог.Вставить("Использовать", ТекКаталог.Использовать);
		Каталог.Вставить("КаталогЗагрузки", ТекКаталог.КаталогЗагрузки);
		Каталог.Вставить("КаталогУспешно", ТекКаталог.КаталогУспешно);
		Каталог.Вставить("КаталогОшибка", ТекКаталог.КаталогОшибка);
		Каталог.Вставить("ОписаниеОшибки", ТекКаталог.ОписаниеОшибки);
		
		Каталоги.Добавить(Каталог);
	КонецЦикла;
	НаборКонстант.КаталогиЦентраМониторинга = Новый ХранилищеЗначения(Каталоги);
	
	НаборКонстант.Записать();
	
	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ЦентрМониторингаИмпортДанных);
	РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	
	Если РегЗадания.Количество() > 0 Тогда	
		РегЗадания[0].Использование = ЭтотОбъект.РегЗаданиеИмпортДанныхВключено;
		РегЗадания[0].Расписание = ЭтотОбъект.РегЗаданиеИмпортДанныхРасписание;
		РегЗадания[0].Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьИЗакрытьНаСервере();
	ЭтотОбъект.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеИмпортДанныхНажатие(Элемент)
	НастроитьРасписаниеИмпорта();
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РегЗаданиеИмпортДанныхРасписаниеПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	НастроитьРасписаниеИмпорта();
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеИмпорта()
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ЭтотОбъект.РегЗаданиеИмпортДанныхРасписание);
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеИмпортаЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеИмпортаЗавершение(РасписаниеВыбрано, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеВыбрано <> Неопределено Тогда
		ЭтотОбъект.РегЗаданиеИмпортДанныхРасписание = РасписаниеВыбрано;
		ЭтотОбъект.РегЗаданиеИмпортДанныхРасписаниеПредставление = Строка(ЭтотОбъект.РегЗаданиеИмпортДанныхРасписание);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПередатьНастройкиНаСервере()
	Перем РезультатОтправки;
	ЦентрМониторингЭкспортСлужебный.ПередатьНастройки(Новый Структура("ИнформацияОТребуемыхДампах,ТочечныеОтветы,ПравилаСвойствСообщений", Истина, Истина, Истина), РезультатОтправки);
	Возврат РезультатОтправки;
КонецФункции

&НаКлиенте
Процедура ПередатьНастройки(Команда)
	Состояние(ПередатьНастройкиНаСервере());
КонецПроцедуры


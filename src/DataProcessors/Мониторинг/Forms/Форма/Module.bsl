&НаКлиенте
Перем Буфер, ОбязательноЗакрыть, ВыбратьНастройкуОбщая;

&НаКлиенте
Перем ДиаграммыДляАнализа;

&НаКлиенте
Перем ИдентификаторНетСерии;

&НаКлиенте
Перем ВыполняющиесяФоновыеЗадания;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отладка = Константы.ОтладкаОбработкаМониторинга.Получить();
	
	ЗначенияМасштаба = Новый Структура;
	ЗначенияМасштаба.Вставить("СписокВыбора", Новый СписокЗначений);
	
	МониторингКлиентСервер.ЗагрузитьСписокЗначенийМасштаба(ЗначенияМасштаба);
	Для Каждого ТекМасштаб Из ЗначенияМасштаба.СписокВыбора Цикл
		ЭтотОбъект.Элементы.ПоказателиМасштаб.СписокВыбора.Добавить(Формат(ТекМасштаб, "ЧГ=0"), Строка(ТекМасштаб));
	КонецЦикла;
		
	ЗагрузитьСохраненныеНастройки();
		
	ДатаНачала = Объект.ДатаНачала;
	ДатаОкончания = Объект.ДатаОкончания;
	Объект.ВысотаДиаграммыАнализа = 15;
	
	ЭтотОбъект.Элементы.ТаблицаСДанными.ФиксацияСлева = 1;
	
	ЭтотОбъект.Элементы.ПоказателиВыделятьТекущийПоказатель.Видимость = ЭтотОбъект.ВыделятьПоказатель;
	ЭтотОбъект.Элементы.ПоказателиВыделятьТекущийПоказательНе.Видимость = НЕ ЭтотОбъект.ВыделятьПоказатель;
	
	ЭтотОбъект.ПредыдущаяТочка = Объект.ЧислоТочек - 1;;
	ЭтотОбъект.ТекущаяТочка = Объект.ЧислоТочек - 1;
	ЭтотОбъект.Элементы.ТекущаяТочка.МаксимальноеЗначение = Объект.ЧислоТочек - 1;
	
	Если ПустаяСтрока(ЭтотОбъект.ТипДиаграммыПредставление) Тогда
		ЭтотОбъект.ТипДиаграммыПредставление = "График";
	КонецЕсли;
	
	Если ЭтотОбъект.АнализПоказателейЧислоКолонок = 0 Тогда
		ЭтотОбъект.АнализПоказателейЧислоКолонок = 1;
	КонецЕсли;
	
	ЭтотОбъект.ОбновлениеЧерез = "включить";
    
    ЭтотОбъект.ВидимостьZoom = Истина;
	ЭтотОбъект.ВидимостьПоказателей = Истина;
    Заголовок = "Мониторинг: " + Строка(ЭтотОбъект.ТекущаяНастройкаИмя);
	
	ЭтотОбъект.ВключитьВРотацию = Ложь;
	
	Диаграмма = Объект.Диаграмма;
	
	Диаграмма.Обновление = Ложь;
	Диаграмма.Анимация = АнимацияДиаграммы.НеИспользовать;
	Диаграмма.ТипДиаграммы = ТипДиаграммы[ЭтотОбъект.ТипДиаграммыПредставление];
	Диаграмма.ОтображатьЛегенду = Ложь; 
	Диаграмма.ОбластьПостроения.Право = 1;
	Диаграмма.ОбластьПостроения.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	Диаграмма.ОбластьПостроения.ОтображатьШкалу = Истина;
	Диаграмма.ОбластьПостроения.ОтображатьПодписиШкалыТочек = Истина; 
	
	Диаграмма.ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Горизонтально;
	Диаграмма.АвтоУстановкаТекстаТочек = Ложь;
	Диаграмма.ПропускатьБазовоеЗначение = Ложь;
	Диаграмма.БазовоеЗначение = МониторингКлиентСервер.БазовоеЗначение();
	Диаграмма.РазделительПодписей = ", ";
	Диаграмма.АвтоМинимальноеЗначение = Ложь;
	Диаграмма.МинимальноеЗначение = 0;
	
	Диаграмма.ОтображатьЗаголовок = Истина;
	
	ЖирныйШрифт = Новый Шрифт(Диаграмма.ОбластьЗаголовка.Шрифт,,,Истина);
	Диаграмма.ОбластьЗаголовка.Шрифт = ЖирныйШрифт;
	Диаграмма.ОбластьЗаголовка.ЦветТекста = ЭтотОбъект.ЦветЗаголовкаТекущейТочки;
	Диаграмма.ОбластьЗаголовка.ПрозрачныйФон = Истина;
	Диаграмма.ОбластьЗаголовка.Верх = ЭтотОбъект.ПоложениеЗаголовкаТекущейТочки;
	Диаграмма.ОбластьЗаголовка.Низ = ЭтотОбъект.ПоложениеЗаголовкаТекущейТочки + 0.05;
	Диаграмма.ОбластьЗаголовка.Лево = 0.9;
	Диаграмма.ОбластьЗаголовка.Право = 1;
	
	Диаграмма.ПропускатьБазовоеЗначение = Истина;
	Диаграмма.ОбластьЗаголовка.Текст = Объект.ДатаОкончания;
	Диаграмма.Обновление = Истина;
	
	Элементы.ГрафикВперед.Видимость = НЕ Объект.Онлайн;
	Элементы.ГрафикНазад.Видимость = НЕ Объект.Онлайн;
	Элементы.ОбновлениеЧерез.Видимость = Объект.Онлайн;
	
	Если Объект.ДатаНачала = Объект.ДатаОкончания Тогда
		Объект.ДатаОкончания = Объект.ДатаОкончания + Объект.ЧислоТочек - 1;
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ЭтотОбъект.Элементы.Ротация.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполняющиесяФоновыеЗадания = Новый Соответствие;
			
	Буфер = Новый Соответствие;
	ДиаграммыДляАнализа = Новый Соответствие;
	ИдентификаторНетСерии = "--нет серии--";
	
	Если Объект.Онлайн Тогда
		СтартОнлайн();
    Иначе
        УстановитьТекущийПериодУвеличить();
		ОбновитьДиаграмму();
	КонецЕсли;
	
	ДобавитьВОчередьРотации();
            
КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияПараметровДиаграммыНаСервере()
	ТаблицаСДаннымиДанные = РеквизитФормыВЗначение("ТаблицаСДанными");
	Колонки = ТаблицаСДаннымиДанные.Колонки;
	ИндексКрайнейКолонки = ТаблицаСДаннымиДанные.Колонки.Количество() - 1;
	
	
	УдаляемыеРеквизиты = ЭтотОбъект.ПолучитьРеквизиты("ТаблицаСДанными");
	УдаляемыеРеквизитыПути = Новый Массив;
	
	Для ИндексРеквизита = 2  По УдаляемыеРеквизиты.Количество() - 1 Цикл
		УдаляемыеРеквизитыПути.Добавить(ЭтотОбъект.Элементы[УдаляемыеРеквизиты[ИндексРеквизита].Имя].ПутьКДанным);
	КонецЦикла;
	ЭтотОбъект.ИзменитьРеквизиты(, УдаляемыеРеквизитыПути);
	
	Пока ИндексКрайнейКолонки > 1 Цикл
		Колонки.Удалить(ИндексКрайнейКолонки);
		ИндексКрайнейКолонки = ИндексКрайнейКолонки - 1;
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(ТаблицаСДаннымиДанные, "ТаблицаСДанными");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияПараметровДиаграммы(Параметр)
	Объект.Диаграмма.Очистить();
	
	Объект.Диаграмма.ОбластьЗаголовка.ЦветТекста = Параметр.ЦветЗаголовкаТекущейТочки;
	Объект.Диаграмма.ОбластьЗаголовка.Верх = Параметр.ПоложениеЗаголовкаТекущейТочки/100;
	Объект.Диаграмма.ОбластьЗаголовка.Низ = (Параметр.ПоложениеЗаголовкаТекущейТочки/100) + 0.05;
	ОбработкаИзмененияПараметровДиаграммыНаСервере();
	
	Объект.ЧислоТочек = Параметр.ЧислоТочек;
	Объект.ШагСдвига = Параметр.ШагСдвига;
	
	ЭтотОбъект.ТекущаяТочка = Объект.ЧислоТочек - 1;
	ЭтотОбъект.ПредыдущаяТочка = Объект.ЧислоТочек - 1;
	ЭтотОбъект.Элементы.ТекущаяТочка.МаксимальноеЗначение = Объект.ЧислоТочек - 1;
		
	Если Объект.Онлайн Тогда
		СтопОнлайн();
		ОбновитьДиаграмму();
		СтартОнлайн();
	Иначе
		ОбновитьДиаграмму();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбязательноЗакрыть <> Неопределено Тогда
		ОбязательноЗакрыть = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если НЕ ЗавершениеРаботы Тогда
			СохранитьПрофильНаКлиенте();
			УдалитьИзОчереди();
			УдалитьИзОчередиРотации();
			ВыполнитьСледующее();
			Отказ = Истина;
		Иначе
			ТекстПредупреждения = "Профиль мониторинга не сохранен!";
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыполнитьСледующее" Тогда
		ОбработкаОповещенияВыполнитьСледующее(Параметр, Источник);
	КонецЕсли;
	
	Если ИмяСобытия = "АктивизироватьФорму" Тогда
		ОбработкаОповещенияАктивизироватьФорму(Параметр, Источник);
	КонецЕсли;
					
	Если ИмяСобытия = "ПрофильМониторингаПараметрыДиаграммыЗаписан" Тогда
		ОбработкаИзмененияПараметровДиаграммы(Параметр);
		Возврат;
	КонецЕсли;	

	Если Источник <> Неопределено Тогда
		Если Источник.ВладелецФормы <> ЭтотОбъект Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПоказательМониторингаСоздан" Тогда
		Модифицированность = Истина;
		
		ОбработатьДобавлениеПоказателяНаКлиенте(Параметр);
	ИначеЕсли ИмяСобытия = "ПоказателиМониторингаСозданы" Тогда
		Модифицированность = Истина;
		
		Показатели = Новый Массив;
		Для Каждого ТекПараметр Из Параметр Цикл
			ОбработатьДобавлениеПоказателяНаКлиенте(ТекПараметр, Ложь);
			Показатели.Добавить(ТекПараметр.Ссылка);
		КонецЦикла;
		ОбновитьДиаграмму();
	ИначеЕсли ИмяСобытия = "ПоказательМониторингаИзменен" Тогда
		Модифицированность = Истина;
		
		Если Буфер <> Неопределено Тогда
			ПоказательВМассив = Новый Массив;
			
			Если ТипЗнч(Параметр) = Тип("Структура") Тогда
				Если Буфер[Параметр.Ссылка] <> Неопределено Тогда
					Если Параметр.Свойство("Цвет") Тогда
						Буфер[Параметр.Ссылка].Цвет = Параметр.Цвет;
					КонецЕсли;
					Если Параметр.Свойство("ТолщинаЛинии") Тогда
						Буфер[Параметр.Ссылка].ТолщинаЛинии = Параметр.ТолщинаЛинии;
					КонецЕсли;
					Если Параметр.Свойство("ТипЛинии") Тогда
						Буфер[Параметр.Ссылка].ТипЛинии = Параметр.ТипЛинии;
					КонецЕсли;
					Если Параметр.Свойство("Автомасштаб") Тогда
						Буфер[Параметр.Ссылка].Автомасштаб = Параметр.Автомасштаб;
					КонецЕсли;
					Если Параметр.Свойство("Масштаб") Тогда
						Буфер[Параметр.Ссылка].Масштаб = Параметр.Масштаб;
					КонецЕсли;
					Если Параметр.Свойство("Маркер") Тогда
						Буфер[Параметр.Ссылка].Маркер = Параметр.Маркер;
					КонецЕсли;
				КонецЕсли;
				
				ОбработатьИзменениеПоказателяНаКлиенте(Параметр);
				ПоказательВМассив.Добавить(Параметр.Ссылка);
			ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") Тогда
				Для Каждого ТекПараметр Из Параметр Цикл
					Если Буфер[ТекПараметр.Ссылка] <> Неопределено Тогда
						Если ТекПараметр.Свойство("Цвет") Тогда
							Буфер[ТекПараметр.Ссылка].Цвет = ТекПараметр.Цвет;
						КонецЕсли;
						Если ТекПараметр.Свойство("ТолщинаЛинии") Тогда
							Буфер[ТекПараметр.Ссылка].ТолщинаЛинии = ТекПараметр.ТолщинаЛинии;
						КонецЕсли;
						Если ТекПараметр.Свойство("ТипЛинии") Тогда
							Буфер[ТекПараметр.Ссылка].ТипЛинии = ТекПараметр.ТипЛинии;
						КонецЕсли;
						Если ТекПараметр.Свойство("Автомасштаб") Тогда
							Буфер[ТекПараметр.Ссылка].Автомасштаб = ТекПараметр.Автомасштаб;
						КонецЕсли;
						Если ТекПараметр.Свойство("Масштаб") Тогда
							Буфер[ТекПараметр.Ссылка].Масштаб = ТекПараметр.Масштаб;
						КонецЕсли;
						Если ТекПараметр.Свойство("Маркер") Тогда
							Буфер[ТекПараметр.Ссылка].Маркер = ТекПараметр.Маркер;
						КонецЕсли;
					КонецЕсли;
					ОбработатьИзменениеПоказателяНаКлиенте(ТекПараметр);
					ПоказательВМассив.Добавить(ТекПараметр.Ссылка);
				КонецЦикла;
			КонецЕсли;
			
			ВывестиСерииПоказателей(ПоказательВМассив, Истина, Ложь, Истина, Истина, Истина, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура АвтообновлениеПриИзменении(Элемент)
	Если Автообновление Тогда
		Если ВалидацияДат() Тогда
			ОбновитьДиаграмму();
		Иначе
			Автообновление = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОнлайнПриИзменении(Элемент)
	
	ДействияПриИзмененииРежима();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Онлайн = Объект.Онлайн;
	
	Если Онлайн Тогда
		СтопОнлайн();
		ОбновитьДиаграмму();
		СтартОнлайн();
	Иначе
		Если Автообновление Тогда
			ОбновитьДиаграмму();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВалидацияДатыНачала(ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
    
    Попытка
        ДатаКакДата = Дата(Текст);
    Исключение
        ДатаКакДата = Дата(1,1,1);
    КонецПопытки;
        
    ВалидацияДатыНачала(ДатаКакДата, СтандартнаяОбработка);
	
	Модифицированность = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если Автообновление Тогда
		
		ОбновитьДиаграмму();
		
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыбранноеЗначение = КонецДня(ВыбранноеЗначение);
	ВалидацияДатыОкончания(ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ВалидацияДатыОкончания(Дата(Текст), СтандартнаяОбработка);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭлементПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.АнализПоказателейСтраница И НЕ ВкладкаДиаграммАнализаАктивирована() Тогда
		Если Объект.Онлайн Тогда
			ОтключитьОбработчикОжидания("ОбновлениеЧерез");
		КонецЕсли;
		ПодключитьОбработчикОжидания("ДанныеЭлементПриСменеСтраницыЧерезОбработчик", 0.2, Истина);
	ИначеЕсли ТекущаяСтраница = Элементы.ДиаграммаСтраница Тогда
		Если Объект.Онлайн И ЭтотОбъект.ФлагОбновлениеЧерез Тогда
			ПодключитьОбработчикОжидания("ОбновлениеЧерез", 1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭлементПриСменеСтраницыЧерезОбработчик()
	ПометитьВкладкуДиаграммАнализаАктивированной();
	ДобавитьДиаграммыАнализа();
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьДиаграммыАнализа(СоздатьРеквизиты = Истина)
	ДиаграммыДляАнализа = ДобавитьДиаграммыАнализаПоВсемПоказателям(СоздатьРеквизиты);
	Если Объект.ДатаНачала < Объект.ДатаОкончания Тогда
		ВывестиСерииПоказателей(,,,, Истина, Ложь);
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Показатели

&НаКлиенте
Процедура ПоказателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоляДляРедактирования = Новый Массив;
	ПоляДляРедактирования.Добавить("ПоказателиАвтомасштаб");
	ПоляДляРедактирования.Добавить("ПоказателиМасштаб");
	ПоляДляРедактирования.Добавить("ПоказателиТипЛинии");
	ПоляДляРедактирования.Добавить("ПоказателиМаркер");
	ПоляДляРедактирования.Добавить("ПоказателиЦвет");
	
	Если ПоляДляРедактирования.Найти(Поле.Имя) = Неопределено Тогда
		РедактироватьПоказатель(Неопределено);
		СтандартнаяОбработка = Ложь;
    КонецЕсли;
    
    Если Поле.Имя = "ПоказателиЦвет" Тогда
        ОписаниеОповещения = Новый ОписаниеОповещения("ПоказателиВыборЗавершение", ЭтотОбъект);
        ПараметрыОткрытия = Новый Структура("Красный, Зеленый, Синий",0,0,0);
        ОткрытьФорму("ОбщаяФорма.ФормаВыбораЦвета", ПараметрыОткрытия,,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиВыборЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
		ИдентификаторВариантаПоказателя = ИзменитьПоказатель(ТекущиеДанные.Показатель, "Цвет", РезультатЗакрытия);
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка", ТекущиеДанные.Показатель);
		ПараметрОповещения.Вставить("ИдентификаторВариантаПоказателя", ИдентификаторВариантаПоказателя);
		ПараметрОповещения.Вставить("ИзменилисьДанные", Ложь);
		ПараметрОповещения.Вставить("ИзменилсяВид", Истина);
		ПараметрОповещения.Вставить("ИзменилосьСглаживание", Ложь);
		ПараметрОповещения.Вставить("Цвет", РезультатЗакрытия);
		ПараметрОповещения.Вставить("СтарыйИдентификаторТипа", Неопределено);
		
		Оповестить("ПоказательМониторингаИзменен", ПараметрОповещения, Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)

	Если Объект.Онлайн Тогда 
		ОнлайнПриИзменении(Команда);		
	Иначе 
		Если ВалидацияДат() Тогда
			ОбновитьДиаграмму();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоказатель(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Владелец", Профиль);
	
	ОткрытьФорму("Справочник.ПоказателиМониторинга.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения, Номер", ЗначенияЗаполнения), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьПоказатели(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Владелец", Профиль);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПоказателей", Новый Структура("ЗначенияЗаполнения, Номер", ЗначенияЗаполнения), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПоказатель(Команда)
    
    ИдентификаторПоказателя = Элементы.Показатели.ТекущаяСтрока;
	
	Если ИдентификаторПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоказателя = ТаблицаПоказателей.НайтиПоИдентификатору(ИдентификаторПоказателя);
	
	Если СтрокаПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаПоказатель = СтрокаПоказателя.Показатель;
	ДанныеПоПоказателю = Буфер[СсылкаНаПоказатель];
	
	// Клонируем показатель
	ПараметрОповещения = КлонироватьПоказатель(СсылкаНаПоказатель);
	
	ОбработатьДобавлениеПоказателяНаКлиенте(ПараметрОповещения);
	// Открываем форму клона
	Модифицированность = Истина;
	
	ОткрытьФорму("Справочник.ПоказателиМониторинга.ФормаОбъекта", Новый Структура("Ключ, Масштаб", ПараметрОповещения.Ссылка, СтрокаПоказателя.Масштаб), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПоказательПрошлый(Команда)
    
    ИдентификаторПоказателя = Элементы.Показатели.ТекущаяСтрока;
	
	Если ИдентификаторПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоказателя = ТаблицаПоказателей.НайтиПоИдентификатору(ИдентификаторПоказателя);
	
	Если СтрокаПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаПоказатель = СтрокаПоказателя.Показатель;
	ДанныеПоПоказателю = Буфер[СсылкаНаПоказатель];
	
	// Клонируем показатель
	ПараметрОповещения = КлонироватьПоказатель(СсылкаНаПоказатель, Истина);
	
	ОбработатьДобавлениеПоказателяНаКлиенте(ПараметрОповещения);
	// Открываем форму клона
	Модифицированность = Истина;
	
	ОткрытьФорму("Справочник.ПоказателиМониторинга.ФормаОбъекта", Новый Структура("Ключ, Масштаб", ПараметрОповещения.Ссылка, СтрокаПоказателя.Масштаб), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    
КонецПроцедуры

&НаКлиенте
Процедура УбратьПоказатель(Команда)
	ЕстьУдаление = Ложь;
	Для Каждого ТекПоказатель Из ЭтотОбъект.Элементы.Показатели.ВыделенныеСтроки Цикл
		СтрокаПоказателя = ТаблицаПоказателей.НайтиПоИдентификатору(ТекПоказатель);
		Если СтрокаПоказателя = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СсылкаНаПоказатель = СтрокаПоказателя.Показатель;
		ДанныеПоПоказателю = Буфер[СсылкаНаПоказатель];
		
		Если ДанныеПоПоказателю <> Неопределено И ДанныеПоПоказателю.Свойство("ИдентификаторСерии") Тогда
			ИдентификаторСерии = ДанныеПоПоказателю.ИдентификаторСерии;
		КонецЕсли;
		
		Буфер.Удалить(СсылкаНаПоказатель);
		ТаблицаПоказателей.Удалить(СтрокаПоказателя);
		ЕстьУдалениеПоказателя = УдалитьПоказательСервер(СсылкаНаПоказатель, ДиаграммыДляАнализа);
		Если НЕ ЕстьУдаление И ЕстьУдалениеПоказателя Тогда
			ЕстьУдаление = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьУдаление Тогда
		ДобавитьДиаграммыАнализа(Истина);
	КонецЕсли;
		
	Если Автообновление Тогда
		Если ПараметрыОбработчикаОжидания <> Неопределено Тогда
			ОбновитьДиаграмму();
		Иначе
			// Обновляем диаграммы (в том числе диаграммы анализа)
			ВывестиСерииПоказателей(,,,, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	ЗаписатьНастройкиПрофиля(Неопределено);	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПоказатель(Команда)
	
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ОткрытьФорму("Справочник.ПоказателиМониторинга.ФормаОбъекта", Новый Структура("Ключ, Масштаб", ТекущиеДанные.Показатель, ТекущиеДанные.Масштаб), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьПоказательВниз(Команда)
    
    ВнутренниеЗамерыКлиент.НачатьЗамер("Мониторинг.СдвинутьПоказательВниз");
    
    Если СдвинутьПоказательКлиент(1) И (Автообновление ИЛИ Объект.Онлайн) Тогда
        ВывестиСерииПоказателей();
    КонецЕсли;
	    
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьПоказательВверх(Команда)
    
    ВнутренниеЗамерыКлиент.НачатьЗамер("Мониторинг.СдвинутьПоказательВверх");
    
    Если СдвинутьПоказательКлиент(-1) И (Автообновление ИЛИ Объект.Онлайн) Тогда
        ВывестиСерииПоказателей();
    КонецЕсли;
        	    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВпередНаВесьПериод(Команда)
	
	Если НЕ ВалидацияДат() Тогда
		Возврат;
	КонецЕсли;
	
	Шаг = Шаг();
	ДатаНачала = Объект.ДатаНачала;
	ДатаОкончания = Объект.ДатаОкончания;
	
	Объект.ДатаНачала = ДатаОкончания;
	Объект.ДатаОкончания = ДатаОкончания + (ДатаОкончания - ДатаНачала);
	
	Если ТаблицаПоказателей.Количество() = 0 Тогда
		Объект.Диаграмма.Очистить();
		Возврат;
	КонецЕсли;
	ОбновитьДиаграмму();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНазадНаВесьПериод(Команда)
	
	Если НЕ ВалидацияДат() Тогда
		Возврат;
	КонецЕсли;
	
	Шаг = Шаг();
	ДатаНачала = Объект.ДатаНачала;
	ДатаОкончания = Объект.ДатаОкончания;
	
	Объект.ДатаНачала = ДатаНачала - (ДатаОкончания - ДатаНачала);
	Объект.ДатаОкончания = ДатаНачала;
	
	Если ТаблицаПоказателей.Количество() = 0 Тогда
		Объект.Диаграмма.Очистить();
		Возврат;
	КонецЕсли;
	ОбновитьДиаграмму();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОповещение(Команда)
	
	Если Элементы.Показатели.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Нет выделенных показателей!", 30);
		Возврат;
	КонецЕсли;
	
	ПоказателиМассив = Новый Массив;
	Для Каждого ТекИндекс Из Элементы.Показатели.ВыделенныеСтроки Цикл
		ПоказателиМассив.Добавить(ТаблицаПоказателей.НайтиПоИдентификатору(ТекИндекс).Показатель);
	КонецЦикла;
	
	ЗначениеСоздания = СоздатьИсточникИнцидентовЦКК(ПоказателиМассив);
	ОткрытьФорму("Справочник.ОбнаружениеИнцидентов.ФормаОбъекта", Новый Структура("ЗначениеСоздания", ЗначениеСоздания), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СтартОнлайн()
	
	Элементы.ДатаОкончания.ТолькоПросмотр = Истина;
	
	ТекущаяДата = ТекущаяДата();

	ДатаОкончания = Объект.ДатаОкончания;
	ДатаНачала = Объект.ДатаНачала;
	
	Сдвиг = ТекущаяДата - ДатаОкончания;
	
	Объект.ДатаНачала = ДатаНачала + Сдвиг;
	Объект.ДатаОкончания = ТекущаяДата;
	
	ОбновитьДиаграмму();
	
	ШагОбновления = Шаг();
	Если ШагОбновления < ЭтотОбъект.МинимальныйШагОбновления Тогда
		ШагОбновления = ЭтотОбъект.МинимальныйШагОбновления;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьШагМониторинга", ШагОбновления);
	Если Отладка Тогда 
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ПодключениеОбработчикаОжидания.ВыполнитьШагМониторинга", "Шаг мониторинга: " + Строка(ШагОбновления));		
	КонецЕсли;
	Если ЭтотОбъект.ФлагОбновлениеЧерез Тогда
		ПодключитьОбработчикОжидания("ОбновлениеЧерез", 1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеЧерез()
	Попытка
		ШагОбновления = Шаг();
		Если ШагОбновления < ЭтотОбъект.МинимальныйШагОбновления Тогда
			ШагОбновления = ЭтотОбъект.МинимальныйШагОбновления;
		КонецЕсли;
		
		СекундДоОбновления = Цел(ШагОбновления - (ТекущаяДата() - Объект.ДатаОкончания));
		ЭтотОбъект.ОбновлениеЧерез = Формат(Дата(1,1,1) + СекундДоОбновления, "ДЛФ=T");
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СтопОнлайн()
	
	Элементы.ДатаОкончания.ТолькоПросмотр = Ложь;
	Если Отладка Тогда 
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ОтключениеОбработчикаОжидания.ВыполнитьШагМониторинга");		
	КонецЕсли;
	ОтключитьОбработчикОжидания("ВыполнитьШагМониторинга");
	ОтключитьОбработчикОжидания("ОбновлениеЧерез");	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриИзмененииРежима()
	
	Онлайн = Объект.Онлайн;
	Если НЕ Онлайн Тогда
		
		НастроитьВидимостьКомандНавигацииПоГрафику(Истина);
		СтопОнлайн();
        Элементы.ГруппаУвеличить.Доступность = Истина;
        Элементы.ГруппаСдвинуть.Доступность = Истина;
            
	Иначе
		
		Если ВалидацияДат() Тогда
			НастроитьВидимостьКомандНавигацииПоГрафику(Ложь);
			СтартОнлайн();
		Иначе
			Объект.Онлайн = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьКомандНавигацииПоГрафику(Знач ПоказыватьКомандыНаГрафике = Истина)
	
    //Элементы.ГрафикВперед.Видимость = ПоказыватьКомандыНаГрафике;
    //Элементы.ГрафикНазад.Видимость = ПоказыватьКомандыНаГрафике;
	Элементы.ОбновлениеЧерез.Видимость = НЕ ПоказыватьКомандыНаГрафике;
	
КонецПроцедуры

&НаСервере 
Функция ПерезаполнитьТаблицуИзменитьМасштабы(
	Знач ЗначенияПоВсемПоказателям,
	Знач МасштабыПоВсемПоказателям
) 
	ЗаполнитьСтрокиВТаблицеСДанными(ЗначенияПоВсемПоказателям);
	МониторингКлиентСервер.ОбновитьМасштабы(ТаблицаПоказателей, МасштабыПоВсемПоказателям);
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокиВТаблицеСДанными(Знач ДанныеПоПоказателям, Знач Сдвиг = 0)
	
	Шаг = ШагСервер();
	ДатаНачала = Объект.ДатаНачала;
	ДатаОкончания = Объект.ДатаОкончания;
	
	ТаблицаСДаннымиДанные = РеквизитФормыВЗначение("ТаблицаСДанными");
	Колонки = ТаблицаСДаннымиДанные.Колонки;
	КоличествоКолонок = ТаблицаСДаннымиДанные.Колонки.Количество();
	
	
	// Настроить заголовки колонок
	Если КоличествоКолонок = 2 Тогда
		СоздатьПустуюТаблицуДляДанных(ДатаНачала, ДатаОкончания, Шаг);
		ТаблицаСДаннымиДанные = РеквизитФормыВЗначение("ТаблицаСДанными");
	Иначе
		Если ДатаНачала <> ДатаНачалаТаблица ИЛИ ДатаОкончания <> ДатаОкончанияТаблица Тогда 
			Дата = ДатаНачала;
			ИндексКолонки = 2;
			НомерТочки = 0;
			Пока НомерТочки < Объект.ЧислоТочек Цикл
				Элементы[Колонки[ИндексКолонки].Имя].Заголовок = Дата;
				//Колонки[ИндексКолонки].Заголовок = Дата;
				Дата = Дата + Шаг;
				НомерТочки = НомерТочки + 1;
				ИндексКолонки = ИндексКолонки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ДатаНачалаТаблица = ДатаНачала;
	ДатаОкончанияТаблица = ДатаОкончания;
	
	// Добавить новые строки
	ПоказателиБезСтрок = Новый Массив;
	Для Каждого ПоказательДанные Из ДанныеПоПоказателям Цикл
		Показатель = ПоказательДанные.Ключ;
		Если ТаблицаСДаннымиДанные.Найти(ПоказательДанные.Ключ, "Показатель") = Неопределено Тогда
			ПоказателиБезСтрок.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	
	Если ПоказателиБезСтрок.Количество() > 0 Тогда
		Для Каждого Показатель Из ПоказателиБезСтрок Цикл
			СтрокаТаблицы = ТаблицаСДаннымиДанные.Добавить();
			СтрокаТаблицы.Показатель = Показатель;
			СтрокаТаблицы.НазваниеПоказателя =  Показатель.Показатель.Описание;
		КонецЦикла;
	КонецЕсли;
	
	// Заполнить данные
	Для Каждого СтрокаТаблицы Из ТаблицаСДаннымиДанные Цикл
		Показатель = СтрокаТаблицы.Показатель;
		Значения = ДанныеПоПоказателям[Показатель];
		Если Значения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоСлужебныхКолонок = 2;
		
		// если требуется сдвинуть колонки таблицы
		Если Сдвиг <> 0 Тогда
			
			ВеличинаСдвига = Значения.Количество();
			Если Сдвиг < 0 Тогда
				
				НаправлениеОбхода = 1;
				ИндексКолонкиНачалоОбхода = ЧислоСлужебныхКолонок + ВеличинаСдвига;
				ИндексКолонкиКонецОбхода = КоличествоКолонок;
				НачальныйИндексДляНовыхЗамеров = КоличествоКолонок - ВеличинаСдвига;
			Иначе
				НаправлениеОбхода = -1;
				ИндексКолонкиНачалоОбхода = КоличествоКолонок - 1 - ВеличинаСдвига;
				ИндексКолонкиКонецОбхода = ЧислоСлужебныхКолонок - 1;
				НачальныйИндексДляНовыхЗамеров = ЧислоСлужебныхКолонок;
			КонецЕсли;
			
			ИндексКолонки = ИндексКолонкиНачалоОбхода;
			Пока ИндексКолонки <> ИндексКолонкиКонецОбхода Цикл
				СтрокаТаблицы.Установить(
					ИндексКолонки + Сдвиг * ВеличинаСдвига, 
					СтрокаТаблицы[ИндексКолонки]
				);
				ИндексКолонки = ИндексКолонки + НаправлениеОбхода;
			КонецЦикла;
			
			ИндексКолонки = НачальныйИндексДляНовыхЗамеров;
		Иначе
			ИндексКолонки = ЧислоСлужебныхКолонок;
		КонецЕсли;
		
		Для Каждого Значение Из Значения Цикл
			Если ТипЗнч(Значение) = Тип("Структура") Тогда
				Значение = Значение.Среднее;
			КонецЕсли;
			
			Если Значение = Неопределено Тогда
				ЗначениеВСтроку = "";
			Иначе
				ЗначениеВСтроку = Формат(Значение, "ЧН=;ЧДЦ=3");
			КонецЕсли;
			
			СтрокаТаблицы.Установить(
				ИндексКолонки, 
				ЗначениеВСтроку
			);
			ИндексКолонки = ИндексКолонки + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаСДаннымиДанные, "ТаблицаСДанными");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПустуюТаблицуДляДанных(Знач НачалоПериода, Знач КонецПериода, Знач Шаг)
	
	ПрефиксКолонок = "ДанныеЗамеровКолонка_";
	
	ДанныеВВидеТаблицы = Новый ТаблицаЗначений;
	ДанныеВВидеТаблицы.Колонки.Добавить("Показатель", , "Показатель");
	ДанныеВВидеТаблицы.Колонки.Добавить("НазваниеПоказателя", , "Название показателя");
	
	Дата = НачалоПериода;
	ЗаголовкиКолонок = Новый Массив;
	ИменаРеквизитовКолонок = Новый Массив;
	НомерКолонки = 1;
	Пока НомерКолонки <= Объект.ЧислоТочек Цикл
		ИмяРеквизитаКолонки = НастройкиСервер.ИмяДинамическогоЭлементаКолонки(ПрефиксКолонок, Формат(НомерКолонки, "ЧГ=0"));
		ИменаРеквизитовКолонок.Добавить(ИмяРеквизитаКолонки);
		ДанныеВВидеТаблицы.Колонки.Добавить(
			ИмяРеквизитаКолонки, 
			Новый ОписаниеТипов("Число, Строка"), 
			Дата
		);
		//ЗаголовкиКолонок.Добавить(Строка(Дата));
		ЗаголовкиКолонок.Добавить(Формат(Дата, "ДФ=dd.MM.yy") + Символы.ПС + Формат(Дата, "ДЛФ=T"));
		
		Дата = Дата + Шаг;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		
		ДанныеПоПоказателюСтрока = ДанныеВВидеТаблицы.Добавить();
		ДанныеПоПоказателюСтрока.Установить(0, СтрокаПоказателя.Показатель);
		ДанныеПоПоказателюСтрока.Установить(1, СтрокаПоказателя.Наименование);
		
	КонецЦикла;
	ПараметрыЭлементов = Новый Структура;
	ПараметрыЭлементов.Вставить("ТолькоПросмотр", Истина);
	ПараметрыЭлементов.Вставить("РастягиватьПоГоризонтали", Ложь);
	ПараметрыЭлементов.Вставить("Ширина", 5);
	ПараметрыЭлементов.Вставить("ГоризонтальноеПоложениеВШапке", ГоризонтальноеПоложениеЭлемента.Центр);
	ПараметрыЭлементов.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Право); 
	
	
	НастройкиСервер.ИзменитьСоставКолонокТаблицыДинамически(
		ЭтотОбъект,
		Элементы.ТаблицаСДанными,
		ЗаголовкиКолонок,
		,
		ИменаРеквизитовКолонок,
		ПараметрыЭлементов
	);
	
	ТаблицаСДанными.Загрузить(ДанныеВВидеТаблицы);
КонецПроцедуры

&НаСервере
Функция УдалитьПоказательСервер(Знач СсылкаНаПоказатель, ДиаграммыДляАнализа)
	ЕстьУдаление = Ложь;
	Для Каждого СтрокаПоказателя Из ТаблицаСДанными Цикл  
		Если СтрокаПоказателя.Показатель = СсылкаНаПоказатель Тогда
			ТаблицаСДанными.Удалить(СтрокаПоказателя);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ПоказательОбъект = СсылкаНаПоказатель.ПолучитьОбъект();
	
	Если ВкладкаДиаграммАнализаАктивированаСервер() Тогда
		// разбираемся с диаграммами анализа
		// если на диаграмму не осталось ссылок, то есть 
		// все отображаемые показатели удалены, тогда удаляем и диаграмму.
		Попытка
			ИдентификаторТипаПоказателя = ПоказательОбъект.Показатель.ПолучитьОбъект().ИдентификаторТипаПоказателя();
			ЕстьУдаление = УдалитьДиаграммуАнализаСУчётомСсылокПоИдентификатору(ДиаграммыДляАнализа, ИдентификаторТипаПоказателя);
		Исключение
			Инфо = ИнформацияОбОшибке();
			Комментарий =
				"Описание = '" +Инфо.Описание + "', " +
				"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
				"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
				"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
			
			ЗаписьЖурналаРегистрации(
				"Процедура УдалитьПоказательСервер(Знач СсылкаНаПоказатель, ДиаграммыДляАнализа)",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ПоказателиМониторинга.МодульОбъекта,
				,
				Комментарий);
		КонецПопытки;
	КонецЕсли;
	   	
	ПоказательОбъект.Удалить();
	
	Возврат ЕстьУдаление;
КонецФункции

&НаСервере
Процедура ЗагрузитьСохраненныеНастройки()
	ТекущийПользователь = СловарьСервер.ТекущийПользователь();
	Профиль = Справочники.ПрофильМониторинга.НайтиПоРеквизиту("Пользователь", ТекущийПользователь);
	Если Профиль.Пустая() Тогда
		Профиль = СоздатьНастройкиПоУмолчанию();
	КонецЕсли;
	
	ЗаполнитьДанныеПоПрофилю(Профиль);
	ЗагрузитьПоказателиПрофиля(Профиль);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоПрофилю(ВыбранныйПрофиль)
	ЭтотОбъект.МинимальныйШагОбновления = ВыбранныйПрофиль.МинимальныйШагОбновления;
	Если ЭтотОбъект.МинимальныйШагОбновления = 0 Тогда
		ЭтотОбъект.МинимальныйШагОбновления = 30;
	КонецЕсли;
		
	ЭтотОбъект.ИнтервалРотацииПрофиля = ВыбранныйПрофиль.ВремяОтображенияПрофиляПриРотации;
	Если ЭтотОбъект.ИнтервалРотацииПрофиля = 0 Тогда
		ЭтотОбъект.ИнтервалРотацииПрофиля = 30;
	КонецЕсли;
	
	ЭтотОбъект.ИнтервалПроверкиВыпоненияФоновогоЗадания = ВыбранныйПрофиль.ИнтервалПроверкиВыпоненияФоновогоЗадания;
	Если ЭтотОбъект.ИнтервалПроверкиВыпоненияФоновогоЗадания = 0 Тогда
		ЭтотОбъект.ИнтервалПроверкиВыпоненияФоновогоЗадания = 3;
	КонецЕсли;
		
	Онлайн = ВыбранныйПрофиль.Онлайн;
	Попытка
		ЭтотОбъект.ЦветЗаголовкаТекущейТочки = ЗначениеИзСтрокиВнутр(ВыбранныйПрофиль.ЦветЗаголовкаТекущейТочки);
	Исключение
		ЭтотОбъект.ЦветЗаголовкаТекущейТочки = Новый Цвет(0,0,0);
	КонецПопытки;
	
	Если ВыбранныйПрофиль.ПоложениеЗаголовкаТекущейТочки = 0 Тогда
		ЭтотОбъект.ПоложениеЗаголовкаТекущейТочки = 90/100;
	Иначе
		ЭтотОбъект.ПоложениеЗаголовкаТекущейТочки = ВыбранныйПрофиль.ПоложениеЗаголовкаТекущейТочки/100; 
	КонецЕсли;
		
	ЭтотОбъект.ТипДиаграммыПредставление = ВыбранныйПрофиль.ТипДиаграммы;
	ЭтотОбъект.АнализПоказателейЧислоКолонок = ВыбранныйПрофиль.АнализПоказателейЧислоКолонок;
	ЭтотОбъект.КаждыйПоказательОтдельно = ВыбранныйПрофиль.КаждыйПоказательОтдельно;
	
	Для Каждого ТекТипДиаграммы Из ВыбранныйПрофиль.ТипыДиаграммАнализДиаграмм Цикл
		ЭтотОбъект.ТипыДиаграмм.Добавить(ТекТипДиаграммы.ИдентификаторТипаПоказателя, ТекТипДиаграммы.ТипДиаграммы);
	КонецЦикла;
		
	Объект.ДатаНачала = ВыбранныйПрофиль.ДатаНачала;
	Объект.ДатаОкончания = ВыбранныйПрофиль.ДатаОкончания;
	Объект.Онлайн = Онлайн;
	Автообновление = ВыбранныйПрофиль.Автообновление;
	ЧислоТочек = ВыбранныйПрофиль.ЧислоТочек;
	Если ЧислоТочек = 0 Тогда
		ЧислоТочек = 100;
	КонецЕсли;
	
	ШагСдвига = ВыбранныйПрофиль.ШагСдвига;
	Если ШагСдвига = 0 Тогда
		ШагСдвига = 10;
	КонецЕсли;
	
	Объект.ЧислоТочек = ЧислоТочек;
	Объект.ШагСдвига = ШагСдвига;
	Объект.ТекущаяНастройка = ВыбранныйПрофиль.ТекущаяНастройка;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоказателиПрофиля(ВыбранныйПрофиль, КопироватьПоказатели = Ложь)
	Настройка = ВыбранныйПрофиль.НастройкиПоказателей.Найти(Объект.ТекущаяНастройка, "УИД");
	Если Настройка <> Неопределено Тогда
		ЭтотОбъект.ТекущаяНастройкаИмя = Настройка.Наименование;
		Заголовок = "Мониторинг: " + Настройка.Наименование;
	КонецЕсли;
	
	ТаблицаПоказателей.Очистить();
	Показатели = Справочники.ПрофильМониторинга.ПолучитьПоказатели(ВыбранныйПрофиль, Объект.ТекущаяНастройка);
	Для Каждого ТекПоказатель Из Показатели Цикл
		Если ТекПоказатель.Показатель = Справочники.ПоказателиМониторинга.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекПоказатель.Показатель.ПолучитьОбъект() <> Неопределено Тогда
			Если НЕ КопироватьПоказатели Тогда
				Показатель = ТекПоказатель.Показатель;
			Иначе
				Показатель = ТекПоказатель.Показатель.Скопировать();
				Показатель.Записать();
				Показатель = Показатель.Ссылка;
			КонецЕсли;
			
				НовСтрока = ТаблицаПоказателей.Добавить();
				НовСтрока.Наименование = Показатель.Показатель.Описание;
				НовСтрока.ОтображатьНаДиаграмме = ТекПоказатель.ОтображатьНаДиаграмме;
				НовСтрока.Показатель = Показатель;
				НовСтрока.Автомасштаб = Показатель.Автомасштаб;
				НовСтрока.Масштаб = ТекПоказатель.Масштаб;
				НовСтрока.ТипЛинии = ТекПоказатель.ТипЛинии;
				НовСтрока.ЦветСимволом = "g";
				УказатьВСпискеЦветПоказателя(Показатель, Показатель.Цвет);
				НовСтрока.Маркер = ?(Показатель.Маркер = "", "Нет", Показатель.Маркер);
                Если Показатель.ПоказатьДанныеЗаПрошлыйПериод Тогда
                    НовСтрока.Период = Показатель.ВременноеСмещение;
                Иначе
                    НовСтрока.Период = "текущий";
                КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Создает профиль мониторинга для нового пользователя
//
// Возвращаемое значение:
//  СправочникСсылка.ПрофилиМониторинга
//
&НаСервере
Функция СоздатьНастройкиПоУмолчанию()
	
	НачатьТранзакцию();
	Попытка
		Профиль = МониторингСервер.НачальныйПрофильМониторинга();
		// Создать начальные показатели
		
		// ПРОЦЕНТ ДОСТУПНОСТИ ИНФОРМАЦИОННОЙ БАЗЫ
		Показатель = Справочники.ПроцентДоступностиСервисаВсеБазы.СоздатьЭлемент();
		Показатель.ИнтервалУсреднения = Перечисления.ИнтервалыУсреднения.День;
		ВыборкаБаз = Общий.ВыборкаИнформационныхБаз();
		Пока ВыборкаБаз.Следующий() Цикл
			СтрокаБазы = Показатель.ИнформационныеБазы.Добавить();
			СтрокаБазы.ИнформационнаяБаза = ВыборкаБаз.Ссылка;
		КонецЦикла;
		ДобавитьПоказательМониторинга(2, Показатель, Профиль);
		
		// APDEX
		Показатель = Справочники.ПоказателиAPDEX.СоздатьЭлемент();
		Показатель.Описание = "Оценка производительности(период = 100)";
		Показатель.ПериодAPDEX = 100;
		Показатель.ТипСпискаПользователей = Перечисления.ТипыСпискаПользователей.Все;
		ДобавитьПоказательМониторинга(1, Показатель, Профиль);
		
		// Число падений
		Показатель = Справочники.ЧислоПаденийРабочихПроцессов.СоздатьЭлемент();
		Показатель.ИнтервалУсреднения = Перечисления.ИнтервалыУсреднения.День;
		Показатель.ТипПадения = Перечисления.ТипыПаденияРабочегоПроцесса.СОбразованиемИБезОбразованияДампа;
		Показатель.ВсеСерверы = Истина;
		ВыборкаСерверов = Общий.ВыборкаРабочихСерверов();
		Если ВыборкаСерверов.Следующий() Тогда
			Показатель.РабочийСервер = ВыборкаСерверов.Ссылка;
		КонецЕсли;
		ДобавитьПоказательМониторинга(3, Показатель, Профиль);
		
		// ЧИСЛО СЕАНСОВ
		Показатель = Справочники.ЧислоСеансовПользователей.СоздатьЭлемент();
		Показатель.ВсеКластеры = Истина;
		ВыборкаКластеров = Общий.ВыборкаКластеров();
		Если ВыборкаКластеров.Следующий() Тогда
			Показатель.Кластер = ВыборкаКластеров.Ссылка;
		КонецЕсли;
		ДобавитьПоказательМониторинга(4, Показатель, Профиль);
		
		ЗафиксироватьТранзакцию();
	Исключение
		Инфо = ИнформацияОбОшибке();
		Комментарий =
			"Описание = '" +Инфо.Описание + "', " +
			"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
			"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
			"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
			
		ЗаписьЖурналаРегистрации(
			"Функция СоздатьНастройкиПоУмолчанию()",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.Мониторинг.Формы.Форма,
			,
			Комментарий);
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Профиль;
		
КонецФункции

// Начальное заполнение профиля мониторинга
//
// Параметры:
//  Номер - Число - порядковый номер добавляемого показателя
//  Показатель - СправочникОбъект - ссылка на новый показатель
//  Профиль - СправочникСсылка.ПрофилиМониторинга
//
&НаСервере
Процедура ДобавитьПоказательМониторинга(Знач Номер, Знач Показатель, Знач Профиль)
	ПоказательМониторинга = Справочники.ПоказателиМониторинга.СоздатьЭлемент();
	ПоказательМониторингаСсылка = Справочники.ПоказателиМониторинга.ПолучитьСсылку();
	ПоказательМониторинга.УстановитьСсылкуНового(ПоказательМониторингаСсылка);
	
	ПоказательСсылка = Справочники[Показатель.Метаданные().Имя].ПолучитьСсылку();
	Показатель.УстановитьСсылкуНового(ПоказательСсылка);
	Показатель.Владелец = ПоказательМониторингаСсылка;
	
	ПоказательМониторинга.Показатель = ПоказательСсылка;
	ПоказательМониторинга.Владелец = Профиль;
	ПоказательМониторинга.Номер = Номер;
	
	ПоказательМониторинга.ТолщинаЛинии = 2;
	ПоказательМониторинга.ТипЛинии = "Сплошная";
	ПоказательМониторинга.КоличествоУсредняемыхЗначений = 10;
	ПоказательМониторинга.ВременноеСмещение = Перечисления.ВариантыСмещенияВременногоОкна.День;
	
	ПараметрыОтображения = Новый Структура("Цвет, АвтоМасштаб, Масштаб");
	Показатель.ЗаполнитьПараметрыОтображенияПоУмолчанию(ПараметрыОтображения);
	ПоказательМониторинга.АвтоМасштаб = ПараметрыОтображения.АвтоМасштаб;
	ПоказательМониторинга.Цвет = ЗначениеВСтрокуВнутр(ПараметрыОтображения.Цвет);
	ПоказательМониторинга.Масштаб = ПараметрыОтображения.Масштаб;
	
	Показатель.Записать();
	ПоказательМониторинга.Записать();
	
	ПрофильОбъект = Профиль.ПолучитьОбъект();
	НовыйПоказатель = ПрофильОбъект.ПорядокПоказателей.Добавить();
	НовыйПоказатель.ОтображатьНаДиаграмме = Истина;
	НовыйПоказатель.НастройкаПоказателя = Профиль.ТекущаяНастройка;
	НовыйПоказатель.Показатель = ПоказательМониторинга.Ссылка;
	НовыйПоказатель.Номер = ПоказательМониторинга.Номер;
	НовыйПоказатель.ТолщинаЛинии = ПоказательМониторинга.ТолщинаЛинии;
	НовыйПоказатель.ТипЛинии = ПоказательМониторинга.ТипЛинии;
	НовыйПоказатель.КоличествоУсредняемыхЗначений = ПоказательМониторинга.КоличествоУсредняемыхЗначений;
	НовыйПоказатель.ВременноеСмещение = ПоказательМониторинга.ВременноеСмещение;
	ПрофильОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Функция СохранитьПрофильНаКлиенте(ЗадатьВопрос = Истина)
	
	СтатусОтказа = Ложь;
	
	Если Модифицированность Тогда
		Если ЗадатьВопрос Тогда
			ДополнительныеПараметры = Новый Структура("Показать", Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьПрофильНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, "Профиль мониторинга изменен. Сохранить?", РежимДиалогаВопрос.ДаНетОтмена, 60);
		Иначе
			ДополнительныеПараметры = Новый Структура("Показать", Ложь);
			СохранитьПрофильНаКлиентеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусОтказа;
	
КонецФункции

&НаКлиенте
Процедура СохранитьПрофильНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьПрофиль(ЭтотОбъект.ТекущаяНастройкаИмя);
		Модифицированность = Ложь;
		
		Если ОбязательноЗакрыть = Неопределено Тогда
			ОбязательноЗакрыть = Истина;
			ЭтотОбъект.Закрыть();
		Иначе
			ОбязательноЗакрыть = Неопределено;
		КонецЕсли;
		
		Если ВыбратьНастройкуОбщая <> Неопределено Тогда
			ВыбратьНастройкуОбщая();
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Если ОбязательноЗакрыть = Неопределено Тогда
			ОбязательноЗакрыть = Истина;
			ЭтотОбъект.Закрыть();
		Иначе
			ОбязательноЗакрыть = Неопределено;
		КонецЕсли;
		
		Если ВыбратьНастройкуОбщая <> Неопределено Тогда
			ВыбратьНастройкуОбщая();
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		СтатусОтказа = Истина;
		ОбязательноЗакрыть = Неопределено;
		ВыбратьНастройкуОбщая = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПрофильНаКлиентеЗавершениеВводСтрокиЗавершение(Строка, ДополнительныеПараметры) Экспорт
	// Т.к. после ввода строки нам ничего делать не надо,
	// но при проверки конфигурации возникает ошибка пустого обработчика,
	// то делаем так.
	ЧтобыНиктоНеЗнал = Истина;
КонецПроцедуры

&НаСервере
Процедура СохранитьПрофиль(ИмяНастройки)
	Если Объект.ТекущаяНастройка = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Объект.ТекущаяНастройка = Новый УникальныйИдентификатор();
		ЭтотОбъект.ТекущаяНастройкаИмя = "Текущая настройка";
	КонецЕсли;
	
	ПрофильОбъект = Профиль.ПолучитьОбъект();
	ПрофильОбъект.АнализПоказателейЧислоКолонок = ЭтотОбъект.АнализПоказателейЧислоКолонок;
	ПрофильОбъект.ТипДиаграммы = ЭтотОбъект.ТипДиаграммыПредставление;
	ПрофильОбъект.Онлайн = Объект.Онлайн;
	Если Объект.ДатаНачала < Объект.ДатаОкончания Тогда
		ПрофильОбъект.ДатаНачала = Объект.ДатаНачала;
		ПрофильОбъект.ДатаОкончания = Объект.ДатаОкончания;
	КонецЕсли;
	ПрофильОбъект.Автообновление = Автообновление;
	ПрофильОбъект.ТекущаяНастройка = Объект.ТекущаяНастройка;
	ПрофильОбъект.КаждыйПоказательОтдельно = ЭтотОбъект.КаждыйПоказательОтдельно;
	
	НастройкаПоказателей = ПрофильОбъект.НастройкиПоказателей.Найти(ПрофильОбъект.ТекущаяНастройка, "УИД");
	Если НастройкаПоказателей <> Неопределено Тогда
		ПрофильОбъект.НастройкиПоказателей.Удалить(ПрофильОбъект.НастройкиПоказателей.Индекс(НастройкаПоказателей));
	КонецЕсли;
	
	Если ПрофильОбъект.ТекущаяНастройка <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Настройка = ПрофильОбъект.НастройкиПоказателей.Добавить();
		Настройка.УИД = ПрофильОбъект.ТекущаяНастройка;
		Настройка.Наименование = ИмяНастройки;
	КонецЕсли;
	
	Отбор = Новый Структура("НастройкаПоказателя", ПрофильОбъект.ТекущаяНастройка);
	ПорядокПоказателейНастройка = ПрофильОбъект.ПорядокПоказателей.НайтиСтроки(Отбор);
	Для Каждого ТекСтрока Из ПорядокПоказателейНастройка Цикл
		ПрофильОбъект.ПорядокПоказателей.Удалить(ПрофильОбъект.ПорядокПоказателей.Индекс(ТекСтрока));
	КонецЦикла;
		
	Номер = 0;
	Для Каждого СтрокаПоказатель Из ТаблицаПоказателей Цикл
		ТекПоказатель = ПрофильОбъект.ПорядокПоказателей.Добавить();
		ТекПоказатель.Номер = Номер;
		ТекПоказатель.ОтображатьНаДиаграмме = СтрокаПоказатель.ОтображатьНаДиаграмме;
		ТекПоказатель.Масштаб = СтрокаПоказатель.Масштаб;
		ТекПоказатель.ТипЛинии = СтрокаПоказатель.ТипЛинии;
		ТекПоказатель.Показатель = СтрокаПоказатель.Показатель;
		ТекПоказатель.НастройкаПоказателя = ПрофильОбъект.ТекущаяНастройка;
		Номер = Номер + 1;
	КонецЦикла;
	
	ПрофильОбъект.ТипыДиаграммАнализДиаграмм.Очистить();
	Для Каждого ТекЭлемент Из ЭтотОбъект.ТипыДиаграмм Цикл
		НовЗапись = ПрофильОбъект.ТипыДиаграммАнализДиаграмм.Добавить();
		НовЗапись.ИдентификаторТипаПоказателя = ТекЭлемент.Значение;
		НовЗапись.ТипДиаграммы = ТекЭлемент.Представление;
	КонецЦикла;
			
	ПрофильОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИмеющимисяДанными(Знач ДанныеПоПоказателю, Знач ИдентификаторВариантаПоказателя)
	// Ищем по буферу элементы с таким же идентификатором
	// Если находим, то повторный запрос к СУБД не делаем
	Для Каждого ПоказательДанные Из Буфер Цикл
		ВремПоказатель = ПоказательДанные.Ключ;
		ВремДанные = ПоказательДанные.Значение;
		
		Если ВремДанные <> Неопределено И ВремДанные.ИдентификаторВариантаПоказателя = ИдентификаторВариантаПоказателя Тогда
			Если ВремДанные.Свойство("Данные") Тогда
				ДанныеПоПоказателю.Вставить("Данные", ВремДанные.Данные);
				ДанныеПоПоказателю.Вставить("Статистика", ВремДанные.Статистика);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ОчищенныеЗначенияДляГрафика(Знач Значения, Знач СсылкаНаПоказатель, Знач ПоказыватьТренд)
	// заполняем данные в таблице
	// вычисляем масштаб
	Если Значения.Количество() > 0 И ТипЗнч(Значения[0])= Тип("Структура") Тогда
		СредниеЗначенияПоТочкам = Новый Массив;
		Для Каждого Замер Из Значения Цикл
			СредниеЗначенияПоТочкам.Добавить(Замер.Среднее);
		КонецЦикла;
		ОчищенныеЗначения = СредниеЗначенияПоТочкам;
	Иначе
		ОчищенныеЗначения = Значения;
	КонецЕсли;
	
	ЗначенияВТаблицу = Новый Соответствие;
	Если ПоказыватьТренд Тогда
		ЗначенияНаГрафике = МониторингКлиентСервер.СгладитьДанныеСсылкаНаПоказатель(ОчищенныеЗначения, СсылкаНаПоказатель);
	Иначе
		ЗначенияНаГрафике = ОчищенныеЗначения;
	КонецЕсли;
	
	Возврат ЗначенияНаГрафике;
КонецФункции

&НаСервере
Функция ИдентификаторТипаПоказателя(Знач ПоказательМониторинга)
	
	Если ЗначениеЗаполнено(ПоказательМониторинга.Показатель) Тогда
		Возврат ПоказательМониторинга.Показатель.ПолучитьОбъект().ИдентификаторТипаПоказателя();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

&НаСервере 
Функция СортироватьДиаграммыАнализаПоВсемПоказателям(Знач ДиаграммыДляАнализа)
	ОтсортированныеЭлементы = Новый Массив;
	Для Каждого ПоказательСтрока Из ТаблицаПоказателей Цикл
		СсылкаНаПоказатель = ПоказательСтрока.Показатель;
		ИдентификаторТипа = ИдентификаторТипаПоказателя(СсылкаНаПоказатель);
		ИмяРеквизита = ДиаграммыДляАнализа[ИдентификаторТипа].ИмяРеквизита;
		Если ОтсортированныеЭлементы.Найти(ИмяРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОтсортированныеЭлементы.Добавить(ИмяРеквизита);
	КонецЦикла;
	
	ТекущиеЭлементы = Новый Массив;
	Для Каждого Элемент Из Элементы.АнализПоказателейСтраница.ПодчиненныеЭлементы Цикл
		ЭлементИмя = Элемент.Имя;
		Если ЭлементИмя = ИмяФлагаАктивацииВкладкиДиаграммАнализа() Тогда
			Продолжить;
		КонецЕсли;
		ТекущиеЭлементы.Добавить(ЭлементИмя);
	КонецЦикла;
	
	ВерхняяГраница = ОтсортированныеЭлементы.Количество() - 1;
	НомерЭлемента = ВерхняяГраница;
	Пока НомерЭлемента >= 0 Цикл
		ИмяЭлементаСорт = ОтсортированныеЭлементы[НомерЭлемента];
		ИмяЭлемента     = ТекущиеЭлементы[НомерЭлемента];
		
		Если ИмяЭлемента <> ИмяЭлементаСорт Тогда
			ТекущийИндекс = ТекущиеЭлементы.Найти(ИмяЭлементаСорт);
			ТекущиеЭлементы.Удалить(ТекущийИндекс);
			ТекущиеЭлементы.Вставить(НомерЭлемента, ИмяЭлементаСорт);
			
			ЭлементДиаграммы = Элементы[ИмяЭлементаСорт];
			Если НомерЭлемента = ВерхняяГраница Тогда
				Элементы.Переместить(ЭлементДиаграммы, ЭлементДиаграммы.Родитель);
			Иначе
				ИмяСледующегоЭлемента = ОтсортированныеЭлементы[НомерЭлемента + 1];
				Элементы.Переместить(ЭлементДиаграммы, ЭлементДиаграммы.Родитель, Элементы[ИмяСледующегоЭлемента]);
			КонецЕсли;
			
		КонецЕсли;
		НомерЭлемента = НомерЭлемента - 1;
	КонецЦикла;
КонецФункции

&НаСервере 
Функция ДобавитьДиаграммыАнализаПоВсемПоказателям(СоздатьРеквизиты = Истина)
	УдаляемыеРеквизиты = Новый Массив;
	
	Для ИндексДиаграммы = 1 По ЧислоДиаграммАнализа Цикл
		ДиаграммаДляАнализаЭлемент = ЭтотОбъект.Элементы.Найти("ДиаграммаДляАнализа__" + Формат(ИндексДиаграммы, "ЧГ=0"));
		Если ДиаграммаДляАнализаЭлемент <> Неопределено Тогда
			Если СоздатьРеквизиты Тогда
				УдаляемыеРеквизиты.Добавить(ДиаграммаДляАнализаЭлемент.ПутьКДанным);	
			КонецЕсли;
			ЭтотОбъект.Элементы.Удалить(ДиаграммаДляАнализаЭлемент);
		КонецЕсли;
		
		ТипДиаграммыЭлемент = ЭтотОбъект.Элементы.Найти("ТипДиаграммы_" + Формат(ИндексДиаграммы, "ЧГ=0"));
		Если ТипДиаграммыЭлемент <> Неопределено Тогда
			Если СоздатьРеквизиты Тогда
				УдаляемыеРеквизиты.Добавить(ТипДиаграммыЭлемент.ПутьКДанным);	
			КонецЕсли;
			ЭтотОбъект.Элементы.Удалить(ТипДиаграммыЭлемент);	
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексГруппы = 1 По АнализПоказателейЧислоГрупп Цикл
		ЭтотОбъект.Элементы.Удалить(ЭтотОбъект.Элементы["ГруппаДиаграммыАнализа_" + Формат(ИндексГруппы, "ЧГ=0")]);
	КонецЦикла;
	
	Если СоздатьРеквизиты Тогда
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	КонецЕсли;
		
	ЧислоДиаграммАнализа = 0;
	АнализПоказателейЧислоГрупп = 0;
	ТекущийИдентификаторДиаграммыАнализа = 0;
		
	ДиаграммыДляАнализа = Новый Соответствие;
	Для Каждого ПоказательСтрока Из ТаблицаПоказателей Цикл
		 ДобавитьДиаграммуАнализаСУчётомСсылок(ДиаграммыДляАнализа, ПоказательСтрока.Показатель, СоздатьРеквизиты);
	 КонецЦикла;
	 
	Возврат ДиаграммыДляАнализа; 
КонецФункции

&НаСервере
Процедура УдалитьДиаграммыАнализаПоВсемПоказателям()
	УдаляемыеРеквизиты = Новый Массив;
	
	Для ИндексДиаграммы = 1 По ЧислоДиаграммАнализа Цикл
		ДиаграммаДляАнализаЭлемент = ЭтотОбъект.Элементы.Найти("ДиаграммаДляАнализа__" + Формат(ИндексДиаграммы, "ЧГ=0"));
		Если ДиаграммаДляАнализаЭлемент <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ДиаграммаДляАнализаЭлемент.ПутьКДанным);	
			ЭтотОбъект.Элементы.Удалить(ДиаграммаДляАнализаЭлемент);
		КонецЕсли;
		
		ТипДиаграммыЭлемент = ЭтотОбъект.Элементы.Найти("ТипДиаграммы_" + Формат(ИндексДиаграммы, "ЧГ=0"));
		Если ТипДиаграммыЭлемент <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ТипДиаграммыЭлемент.ПутьКДанным);	
			ЭтотОбъект.Элементы.Удалить(ТипДиаграммыЭлемент);	
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексГруппы = 1 По АнализПоказателейЧислоГрупп Цикл
		ЭтотОбъект.Элементы.Удалить(ЭтотОбъект.Элементы["ГруппаДиаграммыАнализа_" + Формат(ИндексГруппы, "ЧГ=0")]);
	КонецЦикла;
	
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	ЧислоДиаграммАнализа = 0;
	АнализПоказателейЧислоГрупп = 0;
	ТекущийИдентификаторДиаграммыАнализа = 0;
КонецПроцедуры

&НаСервере
Функция ДобавитьДиаграммуАнализаСУчётомСсылок(Знач ДиаграммыДляАнализа, Знач ПоказательМониторинга, СоздатьРеквизиты = Истина)
	Если ЭтотОбъект.КаждыйПоказательОтдельно = 0 Тогда
		ИдентификаторТипаПоказателя = ИдентификаторТипаПоказателя(ПоказательМониторинга);
		Заголовок = ИдентификаторТипаПоказателя;
	Иначе
		ИдентификаторТипаПоказателя = Строка(ПоказательМониторинга.Показатель.УникальныйИдентификатор());
		Заголовок = ПоказательМониторинга.Показатель.Описание;
	КонецЕсли;
		
	Возврат ДобавитьДиаграммуАнализаСУчётомСсылокПоИдентификатору(
		ДиаграммыДляАнализа, 
		ИдентификаторТипаПоказателя, 
		Заголовок,
		СоздатьРеквизиты
	);
	
КонецФункции

// добавляем диаграмму на страницу анализа
// если диаграмма уже добавлена, тогда просто увеличиваем число ссылок на неё, 
// иначе добавляем на форму новую
// возвращаем идентификатор типа показателя, чтобы можно было найти
// имя реквизита соответствующей диаграммы на клиенте
&НаСервере
Функция ДобавитьДиаграммуАнализаСУчётомСсылокПоИдентификатору(Знач ДиаграммыДляАнализа, 
	Знач ИдентификаторТипаПоказателя, Знач Заголовок, СоздатьРеквизиты = Истина)
	
	ДанныеПоДиаграмме = ДиаграммыДляАнализа.Получить(ИдентификаторТипаПоказателя);
	Если ДанныеПоДиаграмме = Неопределено Тогда
		Если ЭтотОбъект.ТипыДиаграмм.НайтиПоЗначению(ИдентификаторТипаПоказателя) = Неопределено Тогда
			ЭтотОбъект.ТипыДиаграмм.Добавить(ИдентификаторТипаПоказателя);
		КонецЕсли;
				
		ИмяРеквизитаДиаграммыАнализа = ДобавитьДиаграммуАнализа(Заголовок, ИдентификаторТипаПоказателя, СоздатьРеквизиты);
		ДиаграммыДляАнализа.Вставить(ИдентификаторТипаПоказателя, Новый Структура(
			"ИмяРеквизита, ЧислоСсылок",
			ИмяРеквизитаДиаграммыАнализа,
			1
		));
	Иначе
		ИмяРеквизитаДиаграммыАнализа = ДанныеПоДиаграмме["ИмяРеквизита"];
		ДанныеПоДиаграмме.Вставить("ЧислоСсылок", ДанныеПоДиаграмме.ЧислоСсылок + 1);
	КонецЕсли;
	
	Возврат Новый Структура(
		"ИмяРеквизитаДиаграммыАнализа, ИдентификаторТипаПоказателя",
		ИмяРеквизитаДиаграммыАнализа, ИдентификаторТипаПоказателя
	);
	
КонецФункции

&НаСервере
Функция ДобавитьДиаграммуАнализа(Знач Заголовок, ИдентификаторТипаПоказателя, СоздатьРеквизиты = Истина)
	
	ЧислоДиаграммАнализа = ЧислоДиаграммАнализа + 1;
	ТекущийИдентификаторДиаграммыАнализа = ТекущийИдентификаторДиаграммыАнализа + 1;
	
	ИмяРеквизитаДиаграммы = МониторингКлиентСервер.ПрефиксДиаграммыАнализа() + ТекущийИдентификаторДиаграммыАнализа;
	ИмяРеквизитаТипДиаграммы = "ТипДиаграммы_" + ТекущийИдентификаторДиаграммыАнализа;
	
	Если СоздатьРеквизиты Тогда
		МассивРеквизитовДиаграммАнализа = Новый Массив;
		
		//Реквизит диаграмма
		РеквизитДиаграммы = Новый РеквизитФормы(ИмяРеквизитаДиаграммы, Новый ОписаниеТипов("Диаграмма"));
		МассивРеквизитовДиаграммАнализа.Добавить(РеквизитДиаграммы);
		
		//Реквизит тип диаграммы
		РеквизитТипДиаграммы = Новый РеквизитФормы(ИмяРеквизитаТипДиаграммы, Новый ОписаниеТипов("Строка"));
		МассивРеквизитовДиаграммАнализа.Добавить(РеквизитТипДиаграммы);
		
		ИзменитьРеквизиты(МассивРеквизитовДиаграммАнализа);
		
		ЗначТипДиаграммы =  ЭтотОбъект.ТипыДиаграмм.НайтиПоЗначению(ИдентификаторТипаПоказателя);
		Если ЗначТипДиаграммы <> Неопределено Тогда
			Если ЗначТипДиаграммы.Представление = "" Тогда
				ЗначТипДиаграммы.Представление = "График";
			КонецЕсли;
			ЭтотОбъект[ИмяРеквизитаТипДиаграммы] = ЗначТипДиаграммы.Представление;	
		Иначе
			ЭтотОбъект[ИмяРеквизитаТипДиаграммы] = "График";	
		КонецЕсли;
		
		
		Диаграмма = ЭтотОбъект[ИмяРеквизитаДиаграммы];
		Диаграмма.Обновление = Ложь;
		
		Диаграмма.ТипДиаграммы = ТипДиаграммы[ЭтотОбъект[ИмяРеквизитаТипДиаграммы]];
		Диаграмма.ОтображатьЛегенду = Ложь; 
		Диаграмма.ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Горизонтально;
		Диаграмма.АвтоУстановкаТекстаТочек = Ложь;
		
		Диаграмма.ОбластьЗаголовка.Текст = Заголовок;
		Диаграмма.ОбластьЗаголовка.Лево = 0;
		Диаграмма.ОбластьЗаголовка.Низ = 0.1;
		Диаграмма.ОбластьЗаголовка.ПрозрачныйФон = Истина;
		
		Диаграмма.ОтображатьЗаголовок = Истина;
		Диаграмма.ОбластьПостроения.Верх = 0.1;
		Диаграмма.ОбластьПостроения.Лево = 0;
		Диаграмма.ОбластьПостроения.Низ = 1;
		Диаграмма.ОбластьПостроения.Право = 1;
		
		Диаграмма.Окантовка = Истина;
		
		Диаграмма.Обновление = Истина;
	КонецЕсли;
				
	//В какую группу добавлять
	Если ЭтотОбъект.АнализПоказателейЧислоГрупп = 0 Тогда
		ЭтотОбъект.АнализПоказателейЧислоГрупп = ЭтотОбъект.АнализПоказателейЧислоГрупп + 1;
		ИмяГруппы = "ГруппаДиаграммыАнализа_" + Формат(ЭтотОбъект.АнализПоказателейЧислоГрупп, "ЧГ=0");
		ЭлементГруппы = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ЭтотОбъект.Элементы.ГруппаДиаграммыАнализаГлавная);
		ЭлементГруппы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппы.ОтображатьЗаголовок = Ложь;
		ЭлементГруппы.Отображение = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппы.РастягиватьПоВертикали = Ложь;
		ЭлементГруппы.РастягиватьПоГоризонтали = Истина;
		ЭлементГруппы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	КонецЕсли;
	
	ИндексГруппы = Цел((ЧислоДиаграммАнализа - 0.1)/АнализПоказателейЧислоКолонок) + 1;
	Если ИндексГруппы > АнализПоказателейЧислоГрупп Тогда
		ЭтотОбъект.АнализПоказателейЧислоГрупп = ЭтотОбъект.АнализПоказателейЧислоГрупп + 1;
		ИмяГруппы = "ГруппаДиаграммыАнализа_" + Формат(ЭтотОбъект.АнализПоказателейЧислоГрупп, "ЧГ=0");
		ЭлементГруппы = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ЭтотОбъект.Элементы.ГруппаДиаграммыАнализаГлавная);
		ЭлементГруппы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппы.ОтображатьЗаголовок = Ложь;
		ЭлементГруппы.Отображение = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппы.РастягиватьПоВертикали = Ложь;
		ЭлементГруппы.РастягиватьПоГоризонтали = Истина;
		ЭлементГруппы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	КонецЕсли;
	
	ИмяГруппыРодитель = "ГруппаДиаграммыАнализа_" + Формат(ЭтотОбъект.АнализПоказателейЧислоГрупп, "ЧГ=0");
	// привязываем к реквизиту элемент на форме
	//Создаем вертикальную группу для вывода настройки диаграммы и самой диаграммы
	ИмяГруппыДиаграмма = "ГруппаДиаграммаАнализа_" + Формат(ЭтотОбъект.ЧислоДиаграммАнализа, "ЧГ=0");
	ЭлементГруппыДиаграмма = Элементы.Добавить(ИмяГруппыДиаграмма, Тип("ГруппаФормы"),ЭтотОбъект.Элементы[ИмяГруппыРодитель]);
	ЭлементГруппыДиаграмма.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементГруппыДиаграмма.ОтображатьЗаголовок = Ложь;
	ЭлементГруппыДиаграмма.Отображение = ОтображениеОбычнойГруппы.Нет;
	ЭлементГруппыДиаграмма.РастягиватьПоВертикали = Ложь;
	ЭлементГруппыДиаграмма.РастягиватьПоГоризонтали = Истина;
	ЭлементГруппыДиаграмма.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	//Создаем горизонтальную группу настроек диаграммы
	ИмяГруппыНастройка = "ГруппаДиаграммаАнализаНастройка_" + Формат(ЭтотОбъект.ЧислоДиаграммАнализа, "ЧГ=0");
	ЭлементГруппыНастройка = Элементы.Добавить(ИмяГруппыНастройка, Тип("ГруппаФормы"), ЭлементГруппыДиаграмма);
	ЭлементГруппыНастройка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементГруппыНастройка.ОтображатьЗаголовок = Ложь;
	ЭлементГруппыНастройка.Отображение = ОтображениеОбычнойГруппы.Нет;
	ЭлементГруппыНастройка.РастягиватьПоВертикали = Ложь;
	ЭлементГруппыНастройка.РастягиватьПоГоризонтали = Истина;
	ЭлементГруппыНастройка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
	//Добавляем тип диаграммы
	ИмяТипаДиаграммы = "ТипДиаграммы_" +  Формат(ЭтотОбъект.ЧислоДиаграммАнализа, "ЧГ=0");
	ЭлементТипДиаграммы = Элементы.Добавить(ИмяТипаДиаграммы, Тип("ПолеФормы"), ЭлементГруппыНастройка);
	ЭлементТипДиаграммы.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементТипДиаграммы.Заголовок = "Тип диаграммы";
	ЭлементТипДиаграммы.ПутьКДанным = ИмяРеквизитаТипДиаграммы;
	ЭлементТипДиаграммы.РастягиватьПоГоризонтали = Ложь;
	ЭлементТипДиаграммы.РежимВыбораИзСписка = Истина;
	ЭлементТипДиаграммы.УстановитьДействие("ПриИзменении", "ПрограммноПриИзмененииТипаДиаграммы");
	
	ЭлементТипДиаграммы.СписокВыбора.Добавить("График", "График");
	ЭлементТипДиаграммы.СписокВыбора.Добавить("ГрафикПоШагам", "График по шагам");
	ЭлементТипДиаграммы.СписокВыбора.Добавить("ГрафикСНакоплением", "График с накоплением");
	ЭлементТипДиаграммы.СписокВыбора.Добавить("ГрафикСОбластями", "Области");
	ЭлементТипДиаграммы.СписокВыбора.Добавить("ГрафикСОбластямиИНакоплением", "Области с накоплением");
	ЭлементТипДиаграммы.СписокВыбора.Добавить("ГрафикСОбластямиНормированный", "Области нормированные");
		
	//Создаем сам элемент диаграммы
	ИмяГруппыДиаграмма = "ГруппаДиаграммаАнализа_" + Формат(ЭтотОбъект.ЧислоДиаграммАнализа, "ЧГ=0");
	ЭлементДиаграммы = Элементы.Добавить(ИмяРеквизитаДиаграммы, Тип("ПолеФормы"), ЭлементГруппыДиаграмма);
	ЭлементДиаграммы.Вид = ВидПоляФормы.ПолеДиаграммы;
	ЭлементДиаграммы.ПутьКДанным = ИмяРеквизитаДиаграммы;
	ЭлементДиаграммы.Заголовок = Заголовок;
	ЭлементДиаграммы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементДиаграммы.РастягиватьПоВертикали = Ложь;
	ЭлементДиаграммы.РастягиватьПоГоризонтали = Истина;
		
	Возврат ИмяРеквизитаДиаграммы;
	
КонецФункции

&НаСервере
Функция УдалитьДиаграммуАнализаСУчётомСсылокПоИдентификатору(Знач ДиаграммыДляАнализа, Знач ИдентификаторТипаПоказателя)
	ЕстьУдаление = Ложь;
	
	ДанныеПоДиаграмме = ДиаграммыДляАнализа.Получить(ИдентификаторТипаПоказателя);
	Если ДанныеПоДиаграмме <> Неопределено Тогда
		ЧислоСсылок = ДанныеПоДиаграмме.ЧислоСсылок - 1;
		Если ЧислоСсылок > 0 Тогда
			ДанныеПоДиаграмме.Вставить("ЧислоСсылок", ЧислоСсылок);
		Иначе
			ДиаграммыДляАнализа.Удалить(ИдентификаторТипаПоказателя);
			ЕстьУдаление = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьУдаление;
КонецФункции

&НаКлиенте
Процедура ВывестиСерииПоказателей(
	Знач Показатели = Неопределено, 
	Знач ЗапретитьОбновление = Истина, 
	Знач ОчиститьДиаграмму = Истина, 
	Знач ОбновитьМасштаб = Ложь,
	Знач ОбновитьДиаграммуАнализа = Ложь,
	Знач ОбновитьОсновнуюДиаграмму = Истина,
	Знач ИзменитьМаксимальноеЗначение = Истина
)
	
	Шаг = Шаг();
	Диаграмма = Объект.Диаграмма;
    Диаграмма.Обновление = Ложь;
	ДатаНачала = Объект.ДатаНачала;
	ЧислоТочек = Объект.ЧислоТочек;
	
	Если Показатели = Неопределено Тогда
		ДанныеПоПоказателям = Буфер;
	Иначе
		ДанныеПоПоказателям = Новый Соответствие;
		Для Каждого Показатель Из Показатели Цикл
			ДанныеПоПоказателям.Вставить(Показатель, Буфер[Показатель]);
		КонецЦикла;
	КонецЕсли;
	
	ВыбранныеПоказатели = Новый Массив;
	Для Каждого ТекПоказатель Из ТаблицаПоказателей Цикл
		ТекПоказательСтруктура = Новый Структура;
		ТекПоказательСтруктура.Вставить("Показатель", ТекПоказатель.Показатель);
		ТекПоказательСтруктура.Вставить("ОтображатьНаДиаграмме", ТекПоказатель.ОтображатьНаДиаграмме);
		Если НЕ ЭтотОбъект.ВыделятьПоказатель Тогда
			ТекПоказательСтруктура.Вставить("Выделять", Ложь);
		Иначе
			Если ЭтотОбъект.Элементы.Показатели.ТекущиеДанные <> Неопределено Тогда
				Если ЭтотОбъект.Элементы.Показатели.ТекущиеДанные.Показатель = ТекПоказатель.Показатель Тогда
					ТекПоказательСтруктура.Вставить("Выделять", Истина);
				Иначе
					ТекПоказательСтруктура.Вставить("Выделять", Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВыбранныеПоказатели.Добавить(ТекПоказательСтруктура);
	КонецЦикла;
			
	Если ОбновитьМасштаб Тогда
		РезультатыДобавленияСерии = Новый Структура("МасштабыПоВсемПоказателям", Новый Соответствие);
		СтарыеМасштабы = Новый Соответствие;
		Для Каждого ПоказательДанные Из ДанныеПоПоказателям Цикл
			Если ПоказательДанные.Значение <> Неопределено И ПоказательДанные.Значение.Свойство("Масштаб") Тогда
				СтарыеМасштабы.Вставить(ПоказательДанные.Ключ, ПоказательДанные.Значение["Масштаб"]);
			КонецЕсли;
		КонецЦикла;
	Иначе
		РезультатыДобавленияСерии = Неопределено;
	КонецЕсли;
	
	ПараметрыДиаграмм = Новый Структура("ДатаНачала, Шаг, ЧислоТочек", ДатаНачала, Шаг, ЧислоТочек);
	Если ОбновитьОсновнуюДиаграмму Тогда
		ВывестиСерииПоказателейНаКлиенте(
			Диаграмма,
			ДанныеПоПоказателям, 
			ПараметрыДиаграмм,
			РезультатыДобавленияСерии,
			ОчиститьДиаграмму,
			ЗапретитьОбновление,
			ВыбранныеПоказатели,
			,
			,
			,
			ИзменитьМаксимальноеЗначение
		);
	КонецЕсли;
	
	Если ОбновитьДиаграммуАнализа И ВкладкаДиаграммАнализаАктивирована() Тогда
		РазбивкаПоИдентификаторам = РазбитьДанныеПоДиаграммамАнализа(ДанныеПоПоказателям);
		Для Каждого ИдентификаторТипаДанные Из РазбивкаПоИдентификаторам Цикл
			ИдентификаторТипа = ИдентификаторТипаДанные.Ключ;
			Если ДиаграммыДляАнализа[ИдентификаторТипа] <> Неопределено Тогда
				ИмяЭлементаДиаграммы = ДиаграммыДляАнализа[ИдентификаторТипа].ИмяРеквизита;
				
				ДиаграммаАнализ = ЭтотОбъект[ИмяЭлементаДиаграммы];
				Если ОчиститьДиаграмму Тогда
					ДиаграммаАнализ.БазовоеЗначение = 0;
					ДиаграммаАнализ.МаксимальноеЗначение = 0;
				КонецЕсли;
				
				ДанныеАнализ = ИдентификаторТипаДанные.Значение;
				ВывестиСерииПоказателейНаКлиенте(
				ДиаграммаАнализ,
				ДанныеАнализ, 
				ПараметрыДиаграмм,
				,
				ОчиститьДиаграмму,
				,
				ВыбранныеПоказатели,
				Истина,
				Неопределено,
				,
				Ложь,
				Ложь,
				Ложь
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбновитьМасштаб Тогда
		НовыеМасштабы = РезультатыДобавленияСерии["МасштабыПоВсемПоказателям"];
		ИзмененныеМасштабы = Новый Соответствие;
		Для Каждого ПоказательМасштаб Из НовыеМасштабы Цикл
			Показатель = ПоказательМасштаб.Ключ;
			НовыйМасштаб = ПоказательМасштаб.Значение;
			СтарыйМасштаб = СтарыеМасштабы[Показатель];
			Если СтарыйМасштаб <> НовыйМасштаб Тогда
				ИзмененныеМасштабы.Вставить(Показатель, НовыйМасштаб);
			КонецЕсли;
		КонецЦикла;
		
		Если ИзмененныеМасштабы.Количество() > 0 Тогда
			МониторингКлиентСервер.ОбновитьМасштабы(ТаблицаПоказателей, ИзмененныеМасштабы);
		КонецЕсли;
	КонецЕсли;
	
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСерииПоказателейНаСервере(	Диаграмма, Буфер, ПараметрыДиаграммы, РезультатыДобавленияСерии = Неопределено,
											ОчиститьДиаграмму = Истина, ЗапретитьОбновление = Истина,
											ВыбранныйПоказатель = Неопределено, АвтоУстановкаБазовогоЗначения = Ложь,
											ОграничениеПоМаксимумуЗначения = 100, ФорматДаты = Неопределено, ИзменитьМаксимальноеЗначение = Истина,
											ВыводитьПолзунок = Истина, ОсновнаяДиаграмма = Истина)
											
	ПорядокПоказателей = Новый Массив;										
	Для Каждого ТекПоказатель Из ТаблицаПоказателей Цикл
		ПорядокПоказателей.Добавить(ТекПоказатель.Показатель);
	КонецЦикла;
	
	ВыделятьЦветом = Ложь;
	Если ВыделятьПоказатель И ТипДиаграммыПредставление = "ГрафикСОбластями" Тогда
		Индекс = ПорядокПоказателей.Найти(ЭтотОбъект.Элементы.Показатели.ТекущиеДанные.Показатель);
		Если Индекс <> Неопределено Тогда
			ПорядокПоказателей.Удалить(Индекс);
			ПорядокПоказателей.Добавить(ЭтотОбъект.Элементы.Показатели.ТекущиеДанные.Показатель);
		КонецЕсли;
	ИначеЕсли ВыделятьПоказатель И ТипДиаграммыПредставление = "ГрафикСОбластямиИНакоплением" Тогда
		ВыделятьЦветом = Истина;
	ИначеЕсли ВыделятьПоказатель И ТипДиаграммыПредставление = "ГрафикСОбластямиНормированный" Тогда
		ВыделятьЦветом = Истина;
	КонецЕсли;

		
	Максимум = МониторингКлиентСервер.ВывестиСерииПоказателей(
		Диаграмма,
		Буфер, 
		ПараметрыДиаграммы,
		РезультатыДобавленияСерии,
		ОчиститьДиаграмму,
		ЗапретитьОбновление,
		ВыбранныйПоказатель,
		АвтоУстановкаБазовогоЗначения,
		ОграничениеПоМаксимумуЗначения,
		ФорматДаты,
		ВыводитьПолзунок,
		ОсновнаяДиаграмма,
		ПорядокПоказателей,
		ВыделятьЦветом
		);
		
	Если ИзменитьМаксимальноеЗначение Тогда
		ЭтотОбъект.МаксимальноеЗначениеНаГрафике = Максимум;
		
		ШагСлужебный = ЭтотОбъект.МаксимальноеЗначениеНаГрафике/50;
		Если ВыводитьПолзунок И Объект.Диаграмма.Серии.Количество() > 50 И ЭтотОбъект.ТипДиаграммыПредставление = "График" Тогда
			Для НомСерии = 1 По 49 Цикл
				Объект.Диаграмма.УстановитьЗначение(ЭтотОбъект.ПредыдущаяТочка, НомСерии, 0);
				Объект.Диаграмма.УстановитьЗначение(ЭтотОбъект.ТекущаяТочка, НомСерии, НомСерии * ШагСлужебный);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСерииПоказателейНаКлиенте(	Диаграмма, Буфер, ПараметрыДиаграммы, РезультатыДобавленияСерии = Неопределено,
											ОчиститьДиаграмму = Истина, ЗапретитьОбновление = Истина,
											ВыбранныйПоказатель = Неопределено, АвтоУстановкаБазовогоЗначения = Ложь,
											ОграничениеПоМаксимумуЗначения = 100, ФорматДаты = Неопределено, ИзменитьМаксимальноеЗначение = Истина,
											ВыводитьПолзунок = Истина, ОсновнаяДиаграмма = Истина)
	
	ПорядокПоказателей = Новый Массив;										
	Для Каждого ТекПоказатель Из ТаблицаПоказателей Цикл
		ПорядокПоказателей.Добавить(ТекПоказатель.Показатель);
	КонецЦикла;
	
	ВыделятьЦветом = Ложь;
	Если ВыделятьПоказатель И ТипДиаграммыПредставление = "ГрафикСОбластями" Тогда
		Индекс = ПорядокПоказателей.Найти(ЭтотОбъект.Элементы.Показатели.ТекущиеДанные.Показатель);
		Если Индекс <> Неопределено Тогда
			ПорядокПоказателей.Удалить(Индекс);
			ПорядокПоказателей.Добавить(ЭтотОбъект.Элементы.Показатели.ТекущиеДанные.Показатель);
		КонецЕсли;
	ИначеЕсли ВыделятьПоказатель И ТипДиаграммыПредставление = "ГрафикСОбластямиИНакоплением" Тогда
		ВыделятьЦветом = Истина;
	ИначеЕсли ВыделятьПоказатель И ТипДиаграммыПредставление = "ГрафикСОбластямиНормированный" Тогда
		ВыделятьЦветом = Истина;
	КонецЕсли;
	
	Максимум = МониторингКлиентСервер.ВывестиСерииПоказателей(
		Диаграмма,
		Буфер, 
		ПараметрыДиаграммы,
		РезультатыДобавленияСерии,
		ОчиститьДиаграмму,
		ЗапретитьОбновление,
		ВыбранныйПоказатель,
		АвтоУстановкаБазовогоЗначения,
		ОграничениеПоМаксимумуЗначения,
		ФорматДаты,
		ВыводитьПолзунок,
		ОсновнаяДиаграмма,
		ПорядокПоказателей,
		ВыделятьЦветом
		);
		
		Если ИзменитьМаксимальноеЗначение Тогда
			ЭтотОбъект.МаксимальноеЗначениеНаГрафике = Максимум;
			
			
			ШагСлужебный = ЭтотОбъект.МаксимальноеЗначениеНаГрафике/50;
			Если ВыводитьПолзунок И Объект.Диаграмма.Серии.Количество() > 50 И ЭтотОбъект.ТипДиаграммыПредставление = "График" Тогда
				Для НомСерии = 1 По 49 Цикл
					Объект.Диаграмма.УстановитьЗначение(ЭтотОбъект.ПредыдущаяТочка, НомСерии, 0);
					Объект.Диаграмма.УстановитьЗначение(ЭтотОбъект.ТекущаяТочка, НомСерии, НомСерии * ШагСлужебный);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСерииТаблицуИМасштабы(
	Знач ДанныеПоПоказателям,  
	Знач ЗапретитьОбновление = Истина, 
	Знач ОбновитьТаблицуПоказателей = Истина, 
	Знач ОчиститьДиаграмму = Истина,
	Знач ДиаграммыДляАнализа = Неопределено
)
	Шаг = ШагСервер();
	Диаграмма = Объект.Диаграмма;
	ДатаНачала = Объект.ДатаНачала;
	ЧислоТочек = Объект.ЧислоТочек;
	
	Если ОбновитьТаблицуПоказателей Тогда
		РезультатыДобавленияСерии = Новый Структура("ЗначенияПоВсемПоказателям, МасштабыПоВсемПоказателям", Новый Соответствие,Новый Соответствие);
	Иначе
		РезультатыДобавленияСерии = Неопределено;
	КонецЕсли;
	
	ПараметрыДиаграмм = Новый Структура("ДатаНачала, Шаг, ЧислоТочек", ДатаНачала, Шаг, ЧислоТочек);
	
	ВыбранныеПоказатели = Новый Массив;
	Для Каждого ТекПоказатель Из ТаблицаПоказателей Цикл
		ТекПоказательСтруктура = Новый Структура;
		ТекПоказательСтруктура.Вставить("Показатель", ТекПоказатель.Показатель);
		ТекПоказательСтруктура.Вставить("ОтображатьНаДиаграмме", ТекПоказатель.ОтображатьНаДиаграмме);
		Если НЕ ЭтотОбъект.ВыделятьПоказатель Тогда
			ТекПоказательСтруктура.Вставить("Выделять", Ложь);
		Иначе
			Если ЭтотОбъект.ТаблицаПоказателей.НайтиПоИдентификатору(ЭтотОбъект.Элементы.Показатели.ТекущаяСтрока).Показатель = ТекПоказатель.Показатель Тогда
				ТекПоказательСтруктура.Вставить("Выделять", Истина);
			Иначе
				ТекПоказательСтруктура.Вставить("Выделять", Ложь);
			КонецЕсли;
		КонецЕсли;
		
		ВыбранныеПоказатели.Добавить(ТекПоказательСтруктура);
	КонецЦикла; 
	
	ВывестиСерииПоказателейНаСервере(
		Диаграмма,
		ДанныеПоПоказателям, 
		ПараметрыДиаграмм,
		РезультатыДобавленияСерии,
		ОчиститьДиаграмму,
		ЗапретитьОбновление,
		ВыбранныеПоказатели,
		,
		,
		,
		Истина,
		Истина,
		Истина
	);

	Если ВкладкаДиаграммАнализаАктивированаСервер() И ДиаграммыДляАнализа <> Неопределено Тогда
		РазбивкаПоИдентификаторам = РазбитьДанныеПоДиаграммамАнализа(ДанныеПоПоказателям);
		Для Каждого ИдентификаторТипаДанные Из РазбивкаПоИдентификаторам Цикл
			ИдентификаторТипа = ИдентификаторТипаДанные.Ключ;
			Если ДиаграммыДляАнализа[ИдентификаторТипа] <> Неопределено Тогда
				ИмяЭлементаДиаграммы = ДиаграммыДляАнализа[ИдентификаторТипа].ИмяРеквизита;
				
				ДиаграммаАнализ = ЭтотОбъект[ИмяЭлементаДиаграммы];
				Если ОчиститьДиаграмму Тогда
					ДиаграммаАнализ.БазовоеЗначение = -1;
					ДиаграммаАнализ.МаксимальноеЗначение = 0;
				КонецЕсли;
				
				ДанныеАнализ = ИдентификаторТипаДанные.Значение;
				ВывестиСерииПоказателейНаСервере(
				ДиаграммаАнализ,
				ДанныеАнализ, 
				ПараметрыДиаграмм,
				,
				ОчиститьДиаграмму,
				,
				ВыбранныеПоказатели,
				Истина,
				Неопределено,
				,
				,
				Ложь,
				Ложь
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбновитьТаблицуПоказателей Тогда
		ПерезаполнитьТаблицуИзменитьМасштабы(
			РезультатыДобавленияСерии.ЗначенияПоВсемПоказателям,
			РезультатыДобавленияСерии.МасштабыПоВсемПоказателям
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазбитьДанныеПоДиаграммамАнализа(Знач ДанныеПоПоказателям)
	РазбивкаПоИдентификаторам = Новый Соответствие;
	
	Для Каждого ПоказательДанные Из ДанныеПоПоказателям Цикл
		Показатель = ПоказательДанные.Ключ;
		Данные = ПоказательДанные.Значение;
		
		Если ЭтотОбъект.КаждыйПоказательОтдельно = 0 Тогда
			ИдентификаторТипаПоказателя = ИдентификаторТипаПоказателя(Показатель);
		Иначе
			ИдентификаторТипаПоказателя = Строка(Показатель.Показатель.УникальныйИдентификатор());
		КонецЕсли;
				
		ДанныеДляТекущегоИдентификатора = РазбивкаПоИдентификаторам.Получить(ИдентификаторТипаПоказателя);
		Если ДанныеДляТекущегоИдентификатора = Неопределено Тогда
			ДанныеДляТекущегоИдентификатора = Новый Соответствие;
			РазбивкаПоИдентификаторам.Вставить(ИдентификаторТипаПоказателя, ДанныеДляТекущегоИдентификатора);
		КонецЕсли;
		ДанныеДляТекущегоИдентификатора.Вставить(Показатель, Данные);
	КонецЦикла;
	Возврат РазбивкаПоИдентификаторам;
КонецФункции

&НаСервере
Процедура ОбновитьСтатистикуПоказателиСчетчиков(Буфер, Показатель)
	Если Буфер[Показатель].Свойство("Данные") Тогда
		Данные = Буфер[Показатель].Данные;
	ИначеЕсли Буфер[Показатель].Свойство("Замеры") Тогда
		Данные = Буфер[Показатель].Замеры;
	КонецЕсли;
	
	СтатистикаНовая = МониторингКлиентСервер.ВычислитьСредниеЗначения(Данные);
	Всего = МониторингКлиентСервер.ВычислитьВсего(Данные);
	СтатистикаНовая.Вставить("Всего", Всего);
	
	 Буфер[Показатель].Статистика.Всего = СтатистикаНовая.Всего;	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатистику(Знач Буфер)
	Если Буфер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 0;
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		Если Буфер[СтрокаПоказателя.Показатель] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипПоказателя = ТипЗнч(СтрокаПоказателя.Показатель.Показатель);
		Если Тип("СправочникСсылка.ПоказателиСчетчиков") = ТипПоказателя Тогда
			ОбновитьСтатистикуПоказателиСчетчиков(Буфер, СтрокаПоказателя.Показатель);
		КонецЕсли;
		
		Статистика = Буфер[СтрокаПоказателя.Показатель].Статистика;
		Если Статистика.Свойство("Текущее") Тогда
			Если Статистика.Текущее = Неопределено Тогда
				Данные = Буфер[СтрокаПоказателя.Показатель].Данные;
				Попытка
					Статистика.Текущее = Данные[Данные.Количество() - 1]; 
				Исключение
					Статистика.Текущее = Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
					
		СтрокаПоказателя.Среднее = ?(
		НЕ Статистика.Свойство("Сред"),
		"",
		Формат(Статистика["Сред"], "ЧН=;ЧДЦ=2")
		);
		СтрокаПоказателя.Максимальное = ?(
		НЕ Статистика.Свойство("Макс"),
		"",
		Формат(Статистика["Макс"], "ЧН=;ЧДЦ=2")
		);
		
		СтрокаПоказателя.Минимальное = ?(
		НЕ Статистика.Свойство("Мин"),
		"",
		Формат(Статистика["Мин"], "ЧН=;ЧДЦ=2")
		);
		СтрокаПоказателя.Текущее = ?(
		НЕ Статистика.Свойство("Текущее"),
		"",
		Формат(Статистика["Текущее"], "ЧДЦ=2; ЧН=0")
		);
		СтрокаПоказателя.Всего = ?(
		НЕ Статистика.Свойство("Всего"),
		"",
		Формат(Статистика["Всего"], "ЧДЦ=2; ЧН=0")
		);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатистикуИзБуфера(Знач Буфер)
	НомерСтроки = 0;
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		БуферПоказателя = Буфер[СтрокаПоказателя.Показатель];
		Если БуферПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Мин = 0;
		Макс = 0;
		Всего = 0;
		Если БуферПоказателя.Данные <> Неопределено Тогда
			Для Каждого ТекДанные Из БуферПоказателя.Данные Цикл
				Мин = ?(Мин < ТекДанные, Мин, ТекДанные);
				Макс = ?(Макс > ТекДанные, Макс, ТекДанные);
				Всего = Всего + ТекДанные;
			КонецЦикла;
			
			Колво = БуферПоказателя.Данные.Количество(); 
			СтрокаПоказателя.Среднее = Формат(Всего/Колво, "ЧН=;ЧДЦ=2");
			СтрокаПоказателя.Максимальное = Формат(Макс, "ЧН=;ЧДЦ=2");
			СтрокаПоказателя.Минимальное = Формат(Мин, "ЧН=;ЧДЦ=2");
			СтрокаПоказателя.Текущее = Формат(БуферПоказателя.Данные[Колво - 1], "ЧН=;ЧДЦ=2");
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция Шаг()
	
	Шаг = (Объект.ДатаОкончания - Объект.ДатаНачала) / (Объект.ЧислоТочек - 1);
	Возврат Шаг;
	
КонецФункции

&НаСервере
Функция ШагСервер()
	
	Шаг = (Объект.ДатаОкончания - Объект.ДатаНачала) / (Объект.ЧислоТочек - 1);
	Возврат Шаг;
	
КонецФункции

&НаСервере
Функция ДобавитьПоказательВСписокПоказателей(Знач ПоказательМониторинга)
	
	СтрокаПоказателя = ТаблицаПоказателей.Добавить();
	СтрокаПоказателя.ОтображатьНаДиаграмме = Истина;
	СтрокаПоказателя.Показатель = ПоказательМониторинга;
	СтрокаПоказателя.Наименование = ?(ЗначениеЗаполнено(ПоказательМониторинга.Показатель), 
	ПоказательМониторинга.Показатель.Описание, "<Не задан>");
	СтрокаПоказателя.Автомасштаб = ПоказательМониторинга.Автомасштаб;
	СтрокаПоказателя.Масштаб = МониторингКлиентСервер.МасштабВСтроку(ПоказательМониторинга.Масштаб);
	СтрокаПоказателя.ЦветСимволом = "g";
	СтрокаПоказателя.ТипЛинии = ПоказательМониторинга.ТипЛинии;
	СтрокаПоказателя.Маркер = "Нет";
    
    Если ПоказательМониторинга.ПоказатьДанныеЗаПрошлыйПериод Тогда
        СтрокаПоказателя.Период = ПоказательМониторинга.ВременноеСмещение;
    Иначе
        СтрокаПоказателя.Период = "текущий";
    КонецЕсли;
    	
	УказатьВСпискеЦветПоказателя(ПоказательМониторинга, ПоказательМониторинга.Цвет);
	Возврат СтрокаПоказателя;
КонецФункции

&НаСервере
Процедура УказатьВСпискеЦветПоказателя(Знач Ссылка, Знач Цвет)
	ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить(); 
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); // Поля таблицы для которых будет действовать оформление 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПоказателиЦвет"); 
	ОформляемоеПоле.Использование = ИСТИНА;

	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); // отбор текущей строки таблицы 
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаПоказателей.Показатель"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение = Ссылка; 
	
	ЦветЯчейки = ЗначениеИзСтрокиВнутр(Цвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветЯчейки);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветГраницы", ЦветЯчейки);
КонецПроцедуры

&НаКлиенте
Функция СдвинутьПоказательКлиент(Знач Смещение)
    
    ТД = Элементы.Показатели.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Врем = ТаблицаПоказателей;
	ТекущийИндекс = Врем.Индекс(ТД);
    
    Если Смещение = 1 И ТаблицаПоказателей.Количество() - 1 = ТекущийИндекс Тогда
        Возврат Ложь;
    КонецЕсли;
    
    Если Смещение = -1 И 0 = ТекущийИндекс Тогда
        Возврат Ложь;
    КонецЕсли;
    
    ТаблицаПоказателей.Сдвинуть(ТекущийИндекс, Смещение);
    ТаблицаСДанными.Сдвинуть(ТекущийИндекс, Смещение);
    
    Модифицированность = Истина;
    
    Возврат Истина;
    	    
КонецФункции

&НаКлиенте
Функция ВкладкаДиаграммАнализаАктивирована()
	Возврат ВкладкаДиаграммАнализаАктивирована;
КонецФункции

&НаСервере
Функция ВкладкаДиаграммАнализаАктивированаСервер()
	Возврат ВкладкаДиаграммАнализаАктивирована;
КонецФункции

&НаКлиенте
Процедура ПометитьВкладкуДиаграммАнализаАктивированной()
	ВкладкаДиаграммАнализаАктивирована = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФлагаАктивацииВкладкиДиаграммАнализа()
	Возврат "ВысотаДиаграммыАнализа";
КонецФункции

&НаСервере
Функция КлонироватьПоказатель(Знач ПоказательМониторинга, СравниватьСПрошлым = Ложь)
	
	КлонПоказателя = ПоказательМониторинга.Скопировать();
    Если СравниватьСПрошлым Тогда
        КлонПоказателя.ПоказатьДанныеЗаПрошлыйПериод = Истина;
        КлонПоказателя.ВременноеСмещение = Перечисления.ВариантыСмещенияВременногоОкна.День;
        КлонПоказателя.ТипЛинии = "Точечная";
    КонецЕсли;
        
	КлонПоказателя.Записать();
	
	Если КлонПоказателя.Показатель <> Неопределено Тогда
		ПоказательОбъект = КлонПоказателя.Показатель.ПолучитьОбъект();
		Если ПоказательОбъект <> Неопределено Тогда
			ИдентификаторВариантаПоказателя = ПоказательОбъект.ИдентификаторВариантаПоказателя()
			+ МониторингКлиентСервер.СуффиксИдентификатораВариантаПоказателяМониторинга(КлонПоказателя);
		КонецЕсли;
	КонецЕсли;
		
	Возврат МониторингКлиентСервер.ПараметрОповещенияПоказательМониторингаСозданИзменен(
		ИдентификаторВариантаПоказателя, КлонПоказателя.Ссылка);
		
КонецФункции

&НаКлиенте
Функция ВалидацияДат()
	
	Если Объект.ДатаНачала >= Объект.ДатаОкончания ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ПоказатьПредупреждение(,"Действие не может быть выполнено! Неверно выбран интервал дат!");
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВалидацияДатыНачала(Знач ВыбраннаяДата, Знач СтандартнаяОбработка)
	Если Объект.Онлайн ИЛИ Автообновление Тогда
		Если ВыбраннаяДата >= Объект.ДатаОкончания Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьПредупреждение(,"Выбранное значение некорректно!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалидацияДатыОкончания(Знач ВыбраннаяДата, Знач СтандартнаяОбработка)
	Если Объект.Онлайн ИЛИ Автообновление Тогда
		Если ВыбраннаяДата <= Объект.ДатаНачала Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьПредупреждение(,"Выбранное значение некорректно!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Асинхронное заполнение данными

////////////////////////////////////////////////////////////////////////////////
// Полное обновление данных

&НаКлиенте
Процедура ОбновитьДиаграмму(Показатели = Неопределено)
	Если Отладка Тогда 
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ОбновитьДиаграмму.Начало");		
	КонецЕсли;
	
	Если Объект.ДатаНачала >= Объект.ДатаОкончания Тогда
		ОчиститьРезультаты();
		Возврат;
	КонецЕсли;
	
	ПараметрыОчереди = Новый Структура("ПроцедураОбновления", "ОбновитьДиаграмму");
	
	Если НужноОбновлятьДиаграмму() Тогда
		Если ДобавитьВОчередь(ПараметрыОчереди) Тогда
			ОбновитьДиаграммуНеСтавитьВОчередь(Показатели);
		КонецЕсли;
	КонецЕсли;
	
	Если Отладка Тогда 
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ОбновитьДиаграмму.Завершение");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДиаграммуОбработкаОжидания()
    
    Модифицированность = Истина;
    ОбновитьДиаграмму();
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДиаграммуНеСтавитьВОчередь(Показатели = Неопределено)
	Объект.СмещениеОтОпорнойТочкиВШагах = 0;
	Объект.ОпорнаяДата = Объект.ДатаНачала;
	
	Буфер = Новый Соответствие;
	
	Попытка
		Результат = ПрочитатьДанные(Показатели);
		ВыполняющиесяФоновыеЗадания.Вставить("МониторингСервер.ОбновитьДанныеПоПоказателямВФоне", Результат);
		Если Не Результат.ЗаданиеВыполнено Тогда
			НастроитьОбработчикОжидания(Результат.АдресХранилища, Результат.ИдентификаторЗадания, "ОбновитьВсе");
			Возврат;
		Иначе
			ЗагрузитьПодготовленныеДанные("ОбновитьВсе", Результат.АдресХранилища);
		КонецЕсли;
		
	Исключение
		ОчиститьРезультаты();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДиаграммуНеСтавитьВОчередьБезПоказателей()
	ОбновитьДиаграммуНеСтавитьВОчередь();
КонецПроцедуры

// Запускает фоновое задание для полного заполнения данных или при добавлении/изменении одного показателя
//
// Параметры:
//  Показатель - СправочникСсылка - показатель, по которому требуется прочитать данные
//             - Неопределено - прочитать данные по всем показателям
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ЗаданиеВыполнено - Булево - если Ложь, требуется запуск фонового задания
//   * АдресХранилища - Строка - 
//   * ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания
//
&НаСервере
Функция ПрочитатьДанные(Знач Показатель = Неопределено)
	
	ПараметрыЗадания = ПараметрыЧтенияДанных(Показатель);
	
	Если Общий.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		МониторингСервер.ОбновитьДанныеПоПоказателямВФоне(ПараметрыЗадания, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
	Иначе
		РезультатВыполнения = ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"МониторингСервер.ОбновитьДанныеПоПоказателямВФоне", 
			ПараметрыЗадания);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Завершает полное обновление всех графиков и таблиц
//
&НаКлиенте
Процедура ЗавершитьОбновление(Знач АдресХранилища)
	
	Буфер = ЗавершитьОбновлениеСервер(АдресХранилища, ДиаграммыДляАнализа, Истина);
	
КонецПроцедуры

// Заканчивает обработку полного обновления данных или добавления дополнительного показателя 
//
// Выполняет следующие действия:
// - Заполняет данные статистики
// - Добавляет или обновляет строки в таблице данных
// - Добавляет серии или обновляет основную диаграмму
// - Добавляет серии или обновляет диаграмму анализа
//
&НаСервере 
Функция ЗавершитьОбновлениеСервер(Знач АдресХранилища, Знач ДиаграммыДляАнализа, Знач ОчиститьДиаграмму)
	
	Буфер = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	Если ТребуетсяОбновление(Буфер) Тогда 
		ОбновитьСтатистику(Буфер);
		
		ОбновитьСерииТаблицуИМасштабы(
		Буфер,
		,
		,
		ОчиститьДиаграмму,
		ДиаграммыДляАнализа
		);
	КонецЕсли;
	
	Возврат Буфер;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Добавление показателя

&НаКлиенте
Процедура ОбработатьДобавлениеПоказателяНаКлиенте(Знач ПараметрОповещения, Знач ПолучитьДанные = Истина)
	СсылкаНаПоказатель = ПараметрОповещения.Ссылка;
	ИдентификаторВариантаПоказателя = ПараметрОповещения.ИдентификаторВариантаПоказателя;
	ДанныеПоПоказателю = Новый Структура;
	
	Если ИдентификаторВариантаПоказателя <> Неопределено Тогда
		ДанныеПоПоказателю.Вставить("ИдентификаторВариантаПоказателя", ИдентификаторВариантаПоказателя);
		ЗаполнитьИмеющимисяДанными(ДанныеПоПоказателю, ИдентификаторВариантаПоказателя);
	КонецЕсли;
	
	Попытка
		Результат = ОбработатьДобавлениеПоказателяНаСервере(
			СсылкаНаПоказатель, 
			ДиаграммыДляАнализа,
			ДанныеПоПоказателю,
			ПолучитьДанные
			);
		Если Результат <> Неопределено Тогда
			Элементы.Показатели.ТекущаяСтрока = Результат["ИдентификаторСтрокиПоказателя"];
		КонецЕсли;
			
		
		Если ПолучитьДанные Тогда
			Если Не Результат.ЗаданиеВыполнено Тогда
				НастроитьОбработчикОжидания(Результат.АдресХранилища, 
				Результат.ИдентификаторЗадания, "ДобавитьПоказатель", СсылкаНаПоказатель);
				Возврат;
			Иначе
				ЗагрузитьПодготовленныеДанные("ДобавитьПоказатель", Результат.АдресХранилища, СсылкаНаПоказатель);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ОчиститьРезультаты();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Добавляет показатель в список показателей
//
// - Если включен режим автообновления - запускается вычисление данных (или копируются имеющиеся)
// - В список показателей заносится новая строка
// - На вкладку диаграмм добавляется новая диаграмма
// Не делается (выполняется в ЗавершитьОбновлениеСервер):
// - Заполнение данных статистики в таблице показателей
// - Добавление строки в таблице данных
// - Вывод данных на графиках
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ЗаданиеВыполнено - Булево - если Ложь, требуется запуск фонового задания
//   * АдресХранилища - Строка, Неопределено - значение Неопределено возвращается в том случае, если автообновление
//                                             отключено, обновление графика не требуется
//   * ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания
//
&НаСервере
Функция ОбработатьДобавлениеПоказателяНаСервере(Знач СсылкаНаПоказатель, 
	ДиаграммыДляАнализа, Знач ИмеющиесяДанные = Неопределено, Знач ПолучитьДанные = Истина)
	
	Если Автообновление Тогда
		Если ПолучитьДанные Тогда
			Если ИмеющиесяДанные.Свойство("Данные") Тогда
				Результат = ЗаполнитьДанныеПоказателяИзКопии(СсылкаНаПоказатель, ИмеющиесяДанные);
			Иначе
				Результат = ПрочитатьДанные(СсылкаНаПоказатель);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьСтрокуВТаблицуСДанными(СсылкаНаПоказатель);
		
	Иначе
		Результат = Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, Неопределено);
	КонецЕсли;
	
	СтрокаПоказателя = ДобавитьПоказательВСписокПоказателей(СсылкаНаПоказатель);
	Если Результат <> Неопределено Тогда
		Результат.Вставить("ИдентификаторСтрокиПоказателя", СтрокаПоказателя.ПолучитьИдентификатор());
	КонецЕсли;
		
	Если ВкладкаДиаграммАнализаАктивированаСервер() Тогда
		ДобавитьДиаграммуАнализаСУчётомСсылок(
			ДиаграммыДляАнализа, 
			СсылкаНаПоказатель
		);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет данные нового показателя на основе уже имеющихся
//
&НаСервере
Функция ЗаполнитьДанныеПоказателяИзКопии(Знач Показатель, Знач ИмеющиесяДанныеПоПоказателю)
	
	СводныеНастройки = Новый Структура;
	СводныеНастройки.Вставить("ИдентификаторТипаПоказателя", ИдентификаторТипаПоказателя(Показатель));
	
	ОбщийКлиентСервер.ОбъединитьСтруктуры(СводныеНастройки, ИмеющиесяДанныеПоПоказателю);
	
	ИдентификаторВариантаПоказателя = Показатель.Показатель.ПолучитьОбъект().ИдентификаторВариантаПоказателя() 
		+ МониторингКлиентСервер.СуффиксИдентификатораВариантаПоказателяМониторинга(Показатель);
	СводныеНастройки.Вставить("ИдентификаторВариантаПоказателя", ИдентификаторВариантаПоказателя);
	
	НастройкиВида = МониторингСервер.НастройкиВида(Показатель);
	ОбщийКлиентСервер.ОбъединитьСтруктуры(СводныеНастройки, НастройкиВида);
	
	НастройкиСерии = МониторингСервер.НастройкиСерии(Показатель);
	ОбщийКлиентСервер.ОбъединитьСтруктуры(СводныеНастройки, НастройкиСерии);
	
	НастройкиСглаживания = МониторингСервер.НастройкиСглаживания(Показатель);
	ОбщийКлиентСервер.ОбъединитьСтруктуры(СводныеНастройки, НастройкиСглаживания);
	
	ДанныеПоВсемПоказателям = Новый Соответствие;
	ДанныеПоВсемПоказателям.Вставить(Показатель, СводныеНастройки);
	
	ОбновитьСтатистику(ДанныеПоВсемПоказателям);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеПоВсемПоказателям, УникальныйИдентификатор);
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВТаблицуСДанными(Знач ПоказательМониторинга)
	
	Строка = ТаблицаСДанными.Добавить();
	Строка.Показатель = ПоказательМониторинга;
	
	Строка.НазваниеПоказателя = ?(ЗначениеЗаполнено(ПоказательМониторинга.Показатель),
		ПоказательМониторинга.Показатель.Описание, "<Не задан>");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеПоказателя(Знач АдресХранилища, Знач Показатель)
	
	Если АдресХранилища = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоПоказателям = ЗавершитьОбновлениеСервер(АдресХранилища, ДиаграммыДляАнализа, Ложь);
	Буфер.Вставить(Показатель, ДанныеПоПоказателям[Показатель]);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Изменение показателя

// Инициирует изменение показателя. Вызывает ОбработатьИзменениеПоказателяНаСервере
// Если ОбработатьИзменениеПоказателяНаСервере возвращает признак НастройкиВида - вызывает ОбновитьНастройкиВидаПоказателя
// иначе запускается ожидание завершения фонового задания
//
&НаКлиенте
Процедура ОбработатьИзменениеПоказателяНаКлиенте(Знач ПараметрОповещения)
	Если ПараметрОповещения.ИзменилисьДанные Тогда
		ОбновитьДиаграмму();
	КонецЕсли;
	
	СсылкаНаПоказатель = ПараметрОповещения.Ссылка;
	ИдентификаторВариантаПоказателя = ПараметрОповещения.ИдентификаторВариантаПоказателя;
	
	ИмеющиесяДанные = Новый Структура;
	Если Автообновление Тогда
		ЗаполнитьИмеющимисяДанными(ИмеющиесяДанные, ИдентификаторВариантаПоказателя);
	КонецЕсли;
	
	Шаг = Шаг();
	
	Результат = ОбработатьИзменениеПоказателяНаСервере(
		ПараметрОповещения, 
		Шаг, 
		Буфер[СсылкаНаПоказатель], 
		ДиаграммыДляАнализа, 
		ИмеющиесяДанные
	);
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		НастроитьОбработчикОжидания(Результат.АдресХранилища, 
			Результат.ИдентификаторЗадания, "ОбновитьПоказатель", СсылкаНаПоказатель);
		Возврат;
	Иначе
		Если Результат.Свойство("НастройкиВида") Тогда
			ОбновитьНастройкиВидаПоказателя(Результат.НастройкиВида, СсылкаНаПоказатель);
		Иначе
			ЗагрузитьПодготовленныеДанные("ОбновитьПоказатель", Результат.АдресХранилища, СсылкаНаПоказатель);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Обрабатывает изменение показателя
//
// - Если не включен режим автообновления - данные не пересчитываются
// - Если установлен только флаг ИзменилсяВид - в поле НастройкиВида возвращаются новые настройки
// - В списке показателей обновляется описание показателя (название, вид), данные не очищаются
// - На вкладку диаграмм добавляется новая диаграмма (при необходимости)
// Не делается (выполняется в ЗавершитьОбновлениеПоказателя):
// - Заполнение данных статистики в таблице показателей
// - Обновление строки в таблице данных
// - Вывод данных на графиках
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ЗаданиеВыполнено - Булево - если Ложь, требуется запуск фонового задания
//   * АдресХранилища - Строка, Неопределено - значение Неопределено возвращается в том случае, если автообновление
//                                             отключено, обновление графика не требуется
//   * ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания
//   * НастройкиВида - Структура - заполняется только в том случае, если изменился только вид
//
&НаСервере
Функция ОбработатьИзменениеПоказателяНаСервере(Знач ПараметрОповещения, Знач Шаг, 
	Знач СтарыеДанные, ДиаграммыДляАнализа, Знач ИмеющиесяДанные = Неопределено)
	
	СсылкаНаПоказатель = ПараметрОповещения.Ссылка;
		
	Если Автообновление Тогда
		
		Если Не ПараметрОповещения.ИзменилосьСглаживание И Не ПараметрОповещения.ИзменилисьДанные Тогда
			Результат = Новый Структура("ЗаданиеВыполнено, АдресХранилища, НастройкиВида", Истина, Неопределено, 
				МониторингСервер.НастройкиВида(СсылкаНаПоказатель));
		ИначеЕсли ИмеющиесяДанные.Свойство("Данные") Тогда
			Результат = ЗаполнитьДанныеПоказателяИзКопии(СсылкаНаПоказатель, ИмеющиесяДанные);
		Иначе
			Результат = ПрочитатьДанные(СсылкаНаПоказатель);
		КонецЕсли;
	Иначе
		Результат = Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, Неопределено);
	КонецЕсли;
	
	Если ПараметрОповещения.ИзменилисьДанные ИЛИ ПараметрОповещения.ИзменилсяВид ИЛИ ПараметрОповещения.ИзменилосьСглаживание Тогда
		
		// Меняем показатель в таблице показателей
		ИдентификаторПоказателя = Элементы.Показатели.ТекущаяСтрока;
		Показатель = ТаблицаПоказателей.НайтиПоИдентификатору(ИдентификаторПоказателя);
		НаименованиеПоказателя = ?(ЗначениеЗаполнено(СсылкаНаПоказатель.Показатель), СсылкаНаПоказатель.Показатель.Описание,
			"<Не задан>");
		Показатель.Наименование = НаименованиеПоказателя;
		Показатель.Автомасштаб = СсылкаНаПоказатель.Автомасштаб;
		Если НЕ СсылкаНаПоказатель.АвтоМасштаб Тогда
			// Возможно изменить масштаб сразу, иначе придётся рассчитывать его (выполняется ниже)
			Показатель.Масштаб = МониторингКлиентСервер.МасштабВСтроку(СсылкаНаПоказатель.Масштаб);
		КонецЕсли;
		Показатель.ТипЛинии = СсылкаНаПоказатель.ТипЛинии;
		УказатьВСпискеЦветПоказателя(СсылкаНаПоказатель, СсылкаНаПоказатель.Цвет);
        Если СсылкаНаПоказатель.ПоказатьДанныеЗаПрошлыйПериод Тогда
            Показатель.Период = СсылкаНаПоказатель.ВременноеСмещение;
        Иначе
            Показатель.Период = "текущий";
        КонецЕсли;
        		
		// Меняем показатель в таблице данных
		Для Каждого СтрокаПоказателя Из ТаблицаСДанными Цикл  
			Если СтрокаПоказателя.Показатель = СсылкаНаПоказатель Тогда
				Если СтрокаПоказателя.НазваниеПоказателя <> НаименованиеПоказателя Тогда
					СтрокаПоказателя.НазваниеПоказателя = НаименованиеПоказателя;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВкладкаДиаграммАнализаАктивированаСервер() Тогда
		НовыйИдентификаторТипа = ИдентификаторТипаПоказателя(СсылкаНаПоказатель);
		Если ЗначениеЗаполнено(ПараметрОповещения.СтарыйИдентификаторТипа) 
			И НовыйИдентификаторТипа <> ПараметрОповещения.СтарыйИдентификаторТипа Тогда
			// Если настройки показателя поменялись, то его нужно перенести на другой график,
			// старый при этом нужно либо удалить, либо передвинуть
			
			// обновим показатель на новый график
			ДобавитьДиаграммуАнализаСУчётомСсылокПоИдентификатору(
				ДиаграммыДляАнализа, 
				НовыйИдентификаторТипа,
				НовыйИдентификаторТипа
			);
			// удаляем с предыдущего графика
			УдалитьДиаграммуАнализаСУчётомСсылокПоИдентификатору(ДиаграммыДляАнализа, 
				ПараметрОповещения.СтарыйИдентификаторТипа);
			
			// Сортируем диаграммы в соответствии со списком показателей
			СортироватьДиаграммыАнализаПоВсемПоказателям(ДиаграммыДляАнализа);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьНастройкиВидаПоказателя(Знач НастройкиВида, Знач СсылкаНаПоказатель)
	
	// достаточно просто изменить вид одной серии
	ПараметрыСерии = Новый Структура;
	
	ДанныеПоПоказателю = Буфер[СсылкаНаПоказатель];
	Если ДанныеПоПоказателю = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийКлиентСервер.ОбъединитьСтруктуры(ДанныеПоПоказателю, НастройкиВида);

	ПараметрыСерии = Новый Структура;
	
	ПараметрыСерии.Вставить(
		"Линия", 
		МониторингКлиентСервер.Линия(
			НастройкиВида.ТипЛинии,
			НастройкиВида.ТолщинаЛинии
		)
	);
	ПараметрыСерии.Вставить("Цвет", НастройкиВида.Цвет);
	
	ИдентификаторСерии = ДанныеПоПоказателю.ИдентификаторСерии;
	Серия = МониторингКлиентСервер.СерияПоЗначению(Объект.Диаграмма, ИдентификаторСерии);
	МониторингКлиентСервер.ОбновитьСериюПоказателя(Серия, ПараметрыСерии);
	
	Если ВкладкаДиаграммАнализаАктивирована() Тогда
		Серия = МониторингКлиентСервер.СерияПоЗначению(
			ЭтотОбъект[ДиаграммыДляАнализа[ДанныеПоПоказателю.ИдентификаторТипаПоказателя].ИмяРеквизита], 
			ИдентификаторСерии
		);
		МониторингКлиентСервер.ОбновитьСериюПоказателя(Серия, ПараметрыСерии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбновлениеПоказателя(Знач АдресХранилища, Знач Показатель)
	
	
	Если АдресХранилища = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоПоказателям = ЗавершитьОбновлениеПоказателяСервер(АдресХранилища, Показатель);
	Буфер.Вставить(Показатель, ДанныеПоПоказателям[Показатель]);
	
	// НЕ РАБОТАЕТ ИЗМЕНЕНИЕ СУЩЕСТВУЮЩИХ СЕРИЙ
	//
	//МониторингКлиентСервер.ДобавитьСериюПоказателя(
	//	Объект.Диаграмма, 
	//	ДанныеПоПоказателю, 
	//	Объект.ДатаНачала, 
	//	Шаг,
	//	ВидИзменился
	//);
	
	ВывестиСерииПоказателей(,,,,Истина);
	
КонецПроцедуры

// Заканчивает обработку изменения показателя 
//
// Выполняет следующие действия:
// - Заполняет данные статистики
// - Добавляет или обновляет строки в таблице данных
//
// Не делает (делается на клиенте в ЗавершитьОбновлениеПоказателя):
// - Добавляет серии или обновляет основную диаграмму
// - Добавляет серии или обновляет диаграмму анализа
//
&НаСервере
Функция ЗавершитьОбновлениеПоказателяСервер(Знач АдресХранилища, Знач СсылкаНаПоказатель)
	
	Буфер = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	Значения = Буфер[СсылкаНаПоказатель].Данные;
	Статистика = Буфер[СсылкаНаПоказатель].Статистика;
	
	ОбновитьСтатистику(Буфер);
	
	ПоказыватьТренд = СсылкаНаПоказатель.ПоказыватьТренд;
	ЗначенияНаГрафике = ОчищенныеЗначенияДляГрафика(Значения, СсылкаНаПоказатель, ПоказыватьТренд);
	
	ЗначенияВТаблицу = Новый Соответствие;
	ЗначенияВТаблицу.Вставить(
		СсылкаНаПоказатель,
		ЗначенияНаГрафике
	);
	
	МасштабСоответствие = Новый Соответствие;
	Если СсылкаНаПоказатель.Автомасштаб Тогда
		// вычисляем оптимальный масштаб
		Если Статистика.Свойство("ПоТочкам") И НЕ ПоказыватьТренд Тогда
			СтатистикаПоТочкам = Статистика;
		Иначе
			СтатистикаПоТочкам = МониторингКлиентСервер.ВычислитьСредниеЗначения(ЗначенияНаГрафике);
		КонецЕсли;
		
		МасштабСоответствие.Вставить(
			СсылкаНаПоказатель, 
			МониторингКлиентСервер.ОптимальныйМасштаб(СтатистикаПоТочкам.Макс)
		);
	КонецЕсли;
	ПерезаполнитьТаблицуИзменитьМасштабы(
		ЗначенияВТаблицу,
		МасштабСоответствие
	);
		
	Возврат Буфер;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сдвиг графика

// Инициирует сдвиг графика
// ВНИМАНИЕ!!!
// ВЫПОЛНЯТЬ СДВИГ ГРАФИКА ПРИХОДИТЬСЯ ВСЕГДА ОТ ТЕКУЩЕЙ ДАТЫ НАЗАД НА ЧИСЛО ТОЧЕК НА ГРАФИКЕ!!
// ПОЧЕМУ?
// ДАННЫЕ В РЕГИСТРЫ ПОПАДАЮТ С ДЕЛЬТОЙ ЗАПАЗДЫВАНИЯ И ПОЭТОМУ, ЧТОБЫ ПОЛУЧАТЬ АКТУАЛЬНЫЕ ДАННЫЕ
// ОНЛАЙН ПРИ СДВИГЕ ВСЕГДА НЕОБХОДИМО ПРОЧИТАТЬ ДАННЫЕ ЗА ВЕСЬ ПЕРИОД!!!
&НаКлиенте
Процедура ВыполнитьСдвигГрафика(СдвигВШагах = Неопределено)
	Если Отладка Тогда
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьСдвигГрафика.Начало");					
	КонецЕсли;

	
	Если СдвигВШагах = Неопределено Тогда
		СдвигВШагах = РассчитатьСдвиг();
	КонецЕсли;
	
	Если Отладка Тогда
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьСдвигГрафика.ЗначениеСдвигВШагах", СдвигВШагах);					
	КонецЕсли;
	
	Если СдвигВШагах <> 0 Тогда 
		Шаг = Шаг();
		СдвигВСекундах = Шаг * СдвигВШагах;
		Объект.ДатаОкончания = Объект.ДатаОкончания + СдвигВСекундах;
		Объект.ДатаНачала = Объект.ДатаНачала + СдвигВСекундах;
		
		Объект.ОпорнаяДата = Объект.ДатаНачала;
		
		ДанныеПоПоказателямДляПередачиНаСервер = Новый Соответствие;
		Для Каждого ПоказательДанные Из Буфер Цикл
			Показатель = ПоказательДанные.Ключ;
			ДанныеПоПоказателю = ПоказательДанные.Значение;
			Значения = ДанныеПоПоказателю["Данные"];
			
			ДанныеПоПоказателюДляПередачиНаСервер = Новый Структура;
			
			ДанныеПоПоказателямДляПередачиНаСервер.Вставить(Показатель, ДанныеПоПоказателюДляПередачиНаСервер);
		КонецЦикла;
		
		Результат = ПрочитатьДанныеДляСдвига(Объект.ЧислоТочек, ДанныеПоПоказателямДляПередачиНаСервер);
		Если Отладка Тогда 
			Комментарий = "";
			Для Каждого ЗначениеСоответствия Из Результат Цикл
				Комментарий = Комментарий + "К=" + ЗначениеСоответствия.Ключ + "З=" + ЗначениеСоответствия.Значение;  	
			КонецЦикла;
			ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьСдвигГрафика.ЗначениеРезультат", Комментарий);
		КонецЕсли;
		
		ВыполняющиесяФоновыеЗадания.Вставить("МониторингСервер.ВыполнитьСдвигГрафикаВФоне", Результат);
		
		Если Не Результат.ЗаданиеВыполнено Тогда
			//Заголовок =  НСтр("ru = 'Мониторинг (получение данных)'");
			НастроитьОбработчикОжидания(Результат.АдресХранилища, Результат.ИдентификаторЗадания, "Сдвинуть");
			Возврат;
		Иначе
			ЗагрузитьПодготовленныеДанные("Сдвинуть", Результат.АдресХранилища);
		КонецЕсли;
	Иначе
		УдалитьИзОчереди();
		СтатусМониторинга = НСтр("ru = 'Мониторинг'");
		ВыполнитьСледующее();
	КонецЕсли;	
	
	Если Отладка Тогда
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьСдвигГрафика.Завершение");					
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСдвигГрафикаБезПараметра()
	ВыполнитьСдвигГрафика();
КонецПроцедуры

// Запускает фоновое задание для получения данных, необходимых для сдвига графика
//
// Параметры:
//  СдвигВШагах - Число - положительное означает сдвиг вправо (будут показаны более новые данные)
//  ДанныеПоПоказателям - Соответствие 
//   * Ключ - СправочникСсылка - показатель
//   * Значение - Структура - с полями:
//    ** КоррекцияСмещения
//    ** Замеры
//    ** Статистика
//
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ЗаданиеВыполнено - Булево - если Ложь, требуется запуск фонового задания
//   * АдресХранилища - Строка - 
//   * ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания
//
&НаСервере
Функция ПрочитатьДанныеДляСдвига(Знач СдвигВШагах, Знач ДанныеПоПоказателям)
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДанныеПоПоказателям", ДанныеПоПоказателям);
	ПараметрыЗадания.Вставить("СдвигВШагах", 0);
	ПараметрыЗадания.Вставить("Шаг", ШагСервер());
	ПараметрыЗадания.Вставить("ОпорнаяДата", Объект.ОпорнаяДата);
	ПараметрыЗадания.Вставить("ЧислоТочек", СдвигВШагах);
	ПараметрыЗадания.Вставить("СмещениеОтОпорнойТочкиВШагах", 0);
	
	Если Общий.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		МониторингСервер.ВыполнитьСдвигГрафикаВФоне(ПараметрыЗадания, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
	Иначе
		РезультатВыполнения = ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"МониторингСервер.ВыполнитьСдвигГрафикаВФоне", 
		ПараметрыЗадания);
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

// Завершает сдвиг графика
//
// Выполняет следующие действия:
// - Вызывает ЗавершитьСдвигСервер
// - Обновляет диаграммы
//
&НаКлиенте
Процедура ЗавершитьСдвиг(Знач АдресХранилища, Знач СдвигВправо)
	
	Если Отладка Тогда
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ЗавершитьСдвиг.Начало");					
	КонецЕсли;	
	
	ВычисленныеДанные = ЗавершитьСдвигСервер(АдресХранилища, СдвигВправо, ЭтотОбъект.УникальныйИдентификатор);
	
	Если ВычисленныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВычисленныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Отладка Тогда
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ЗавершитьСдвиг.Сдвиг");					
	КонецЕсли;	
	
	Для Каждого ДанныеССервераПоПоказателю Из ВычисленныеДанные Цикл
		Показатель = ДанныеССервераПоПоказателю.Ключ;
		ДанныеССервера = ДанныеССервераПоПоказателю.Значение;
		
		ТекущийДанныеПоПоказателю = Буфер[Показатель];
				
		Если ДанныеССервера.Свойство("ОбъединениеЗамеровВыполнено") И ДанныеССервера["ОбъединениеЗамеровВыполнено"] <> Неопределено И ДанныеССервера["ОбъединениеЗамеровВыполнено"] Тогда
			Количество = ТекущийДанныеПоПоказателю["Данные"].Количество();
			Для Каждого ЗамерССервера Из ДанныеССервера["Замеры"] Цикл
				ТекущийДанныеПоПоказателю["Данные"].Добавить(ЗамерССервера);
			КонецЦикла;
			
			КоличествоНовое = ТекущийДанныеПоПоказателю["Данные"].Количество();
			Для лчНом = 1 По (КоличествоНовое - Количество) Цикл
				Если ТекущийДанныеПоПоказателю["Данные"].Количество() > 0 Тогда
					ТекущийДанныеПоПоказателю["Данные"].Удалить(0);	
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТекущийДанныеПоПоказателю["Данные"] <> Неопределено Тогда 
				Количество = ТекущийДанныеПоПоказателю["Данные"].Количество();
				Для Каждого ЗамерССервера Из ДанныеССервера["Замеры"] Цикл
					ТекущийДанныеПоПоказателю["Данные"].Добавить(ЗамерССервера);
				КонецЦикла;
			КонецЕсли;
			
			Если ТекущийДанныеПоПоказателю["Данные"] <> Неопределено Тогда
				КоличествоНовое = ТекущийДанныеПоПоказателю["Данные"].Количество();
				Для лчНом = 1 По (КоличествоНовое - Количество) Цикл
					Если ТекущийДанныеПоПоказателю["Данные"].Количество() > 0 Тогда
						ТекущийДанныеПоПоказателю["Данные"].Удалить(0);	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	
	// обновить нужно также и диаграммы анализа
	ВывестиСерииПоказателей(, , , Истина, Истина);
	
	Шаг = Шаг();
	ДатаНачала = Объект.ДатаНачала;
	Для ИндексКолонки = 1 По Объект.ЧислоТочек Цикл
		ДатаЗаголовка = ДатаНачала + (ИндексКолонки - 1) * Шаг;
		ЭлементКолонка = ЭтотОбъект.Элементы.Найти("ДанныеЗамеровКолонка_" + Формат(ИндексКолонки, "ЧГ=0"));
		Если ЭлементКолонка <> Неопределено Тогда
			ЭлементКолонка.Заголовок = Формат(ДатаЗаголовка, "ДФ=dd.MM.yy") + Символы.ПС + Формат(ДатаЗаголовка, "ДЛФ=T");
		КонецЕсли;
	КонецЦикла;
	Для Каждого Показатель Из Буфер Цикл
		ПараметрыОтбора = Новый Структура("Показатель", Показатель.Ключ);
		СтрокиМассив = ЭтотОбъект.ТаблицаСДанными.НайтиСтроки(ПараметрыОтбора);
		Для Каждого ТекСтрока Из СтрокиМассив Цикл
			Для ИндексКолонки = 1 По Объект.ЧислоТочек Цикл
				Если Показатель.Значение.Данные <> Неопределено Тогда
					ИмяКолонки = "ДанныеЗамеровКолонка_" + Формат(ИндексКолонки, "ЧГ=0");
					Если ТекСтрока.Свойство(ИмяКолонки) Тогда
						ТекСтрока[ИмяКолонки] = Формат(Показатель.Значение.Данные[ИндексКолонки - 1], "ЧДЦ=3");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;		
	КонецЦикла;
		
	ОбновитьСтатистикуИзБуфера(Буфер);
	
	Объект.Диаграмма.Обновление = Ложь;
	КолвоТочек = Объект.Диаграмма.КоличествоТочек;
	ТекТочкаСтрока = Строка(Объект.ДатаНачала + ((Объект.ДатаОкончания - Объект.ДатаНачала)/(КолвоТочек-1) * ЭтотОбъект.ТекущаяТочка));
	Объект.Диаграмма.ОбластьЗаголовка.Текст = ТекТочкаСтрока;
	Объект.Диаграмма.Обновление = Истина;
	
	Если Отладка Тогда
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ЗавершитьСдвиг.Завершение");					
	КонецЕсли;

КонецПроцедуры

// Заканчивает обработку сдвига графика
//
// Выполняет следующие действия:
// - Заполняет данные статистики
// - Добавляет или обновляет строки в таблице данных
// Не делает (делается на клиенте в ЗавершитьСдвиг):
// - Обновляет основную диаграмму
// - Обновляет диаграммы анализа
//
&НаСервереБезКонтекста
Функция ЗавершитьСдвигСервер(Знач АдресХранилища, Знач СдвигВправо, УникальныйИдентификаторФормы)
	
	Буфер = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	Возврат Буфер;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции

// Готовит параметры для функции ПрочитатьДанные
//
&НаСервере
Функция ПараметрыЧтенияДанных(Знач Показатель)
	
	ВыбранныеПоказатели = Новый Массив;
	Если Показатель = Неопределено Тогда
		
		Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
			
			ВыбранныеПоказатели.Добавить(СтрокаПоказателя.Показатель);
			
		КонецЦикла;
	Иначе
		Если ТипЗнч(Показатель) = Тип("Массив") Тогда
			Для Каждого ТекПоказатель Из Показатель Цикл
				ВыбранныеПоказатели.Добавить(ТекПоказатель);
			КонецЦикла;
		Иначе
			ВыбранныеПоказатели.Добавить(Показатель);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Показатели", ВыбранныеПоказатели);
	ПараметрыОтчета.Вставить("СмещениеОтОпорнойТочкиВШагах", Объект.СмещениеОтОпорнойТочкиВШагах);
	ПараметрыОтчета.Вставить("ЧислоТочек", Объект.ЧислоТочек);
	ПараметрыОтчета.Вставить("ОпорнаяДата", Объект.ОпорнаяДата);
	ПараметрыОтчета.Вставить("ДатаНачала", Объект.ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

// Запускает выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище – Булево – признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию – Ложь.
//
// Возвращаемое значение:
//  Структура              - Возвращает свойства: 
//                             - АдресХранилища - адрес временного хранилища, в которое будет
//                          	 помещен результат работы задания;
//                             - АдресХранилищаДополнительный - адрес дополнительного временного хранилища,
//                               в которое будет помещен результат работы задания (доступно только если 
//                               установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//                             - ИдентификаторЗадания - уникальный идентификатор запущенного
//                               фонового задания;
//                             - ЗаданиеВыполнено - Истина если задание было успешно выполнено 
//                               за время вызова функции.
// 
&НаСервере
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь) Экспорт
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Отчет Мониторинг.Запуск фонового задания'", Метаданные.ОсновнойЯзык.КодЯзыка),
		УровеньЖурналаРегистрации.Примечание, , , 
		НСтр("ru = 'Процедура'") + ": " + ИмяЭкспортнойПроцедуры);
		
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры,, НаименованиеЗадания);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       	АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     	Ложь);
	Результат.Вставить("ИдентификаторЗадания", 	Задание.УникальныйИдентификатор);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запускает обработчик ожидания фонового задания или добавляет информацию к существующему
// В структуре ПараметрыОбработчикаОжидания создается поле СведенияОЗаданиях, соответствие, 
//   Ключ - СправочникСсылка - Показатель, Значение - Структура - АдресХранилища, ИдентификаторЗадания
//
&НаКлиенте
Процедура НастроитьОбработчикОжидания(Знач АдресХранилища, Знач ИдентификаторЗадания, Знач Операция, 
	Знач Показатель = "", Знач СдвигВправо = Неопределено)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияНовый", ЭтотОбъект.ИнтервалПроверкиВыпоненияФоновогоЗадания);
	
	Если Отладка Тогда
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.НастроитьОбработчикОжидания.Подключение");					
	КонецЕсли;
	
КонецПроцедуры

// Отменяет выполнение всех исполняющихся фоновых заданий
//
&НаСервере
Функция ОтменитьВыполнениеЗаданий()
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Отчет Мониторинг.Отмена всех фоновых заданий'", Метаданные.ОсновнойЯзык.КодЯзыка),
		УровеньЖурналаРегистрации.Примечание, , , 
		НСтр("ru = 'Количество заданий'") + ": " + 
			?(ПараметрыОбработчикаОжидания <> Неопределено, ПараметрыОбработчикаОжидания.СведенияОЗаданиях.Количество(), 0));
		
	Если ПараметрыОбработчикаОжидания = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	
	Для Каждого КлючИЗначение Из ПараметрыОбработчикаОжидания.СведенияОЗаданиях Цикл
		ОтменитьВыполнениеЗадания(КлючИЗначение.Ключ, КлючИЗначение.Значение.АдресХранилища);
		Результат = Истина;
	КонецЦикла;
	ПараметрыОбработчикаОжидания = Неопределено;
	Возврат Результат;
	
КонецФункции

// Отменяет выполнение задания, удаляет данные во временном хранилище
//
&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания, Знач АдресХранилища)
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Отчет Мониторинг.Отмена фонового задания'", Метаданные.ОсновнойЯзык.КодЯзыка),
		УровеньЖурналаРегистрации.Примечание);
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСостояниеФоновогоЗадания(Идентификатор)
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	
	Состояния = Новый Соответствие;
	Состояния.Вставить(СостояниеФоновогоЗадания.Активно, "Активно");
	Состояния.Вставить(СостояниеФоновогоЗадания.Завершено, "Завершено");
	Состояния.Вставить(СостояниеФоновогоЗадания.ЗавершеноАварийно, "ЗавершеноАварийно");
	Состояния.Вставить(СостояниеФоновогоЗадания.Отменено, "Отменено");
	
	Если ФоновоеЗадание <> Неопределено Тогда
		Возврат Состояния[ФоновоеЗадание.Состояние];
	Иначе
		Возврат "Неопределено";
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция РассчитатьСдвиг()
	Возврат Окр((ТекущаяДата() - Объект.ДатаОкончания) / Шаг());
КонецФункции                   

&НаКлиенте
Процедура ВыполнитьШагМониторинга()
	Отладка = ПолучитьЗначениеОтладкиНаСервере("ОтладкаОбработкаМониторинга");
	
	Если Отладка Тогда 
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьШагМониторинга.Начало");		
	КонецЕсли;
	ИдетОбновитьВсе = Ложь;
	ОбновитьВсеРезультат = ВыполняющиесяФоновыеЗадания["МониторингСервер.ОбновитьДанныеПоПоказателямВФоне"];
	
	Если Отладка Тогда
		Комментарий = "";
		Для Каждого ЗначениеСоответствия Из ВыполняющиесяФоновыеЗадания Цикл
			КомментарийВложенный = "";
			Для Каждого ЗначениеСоответствия_Вложенное  Из ЗначениеСоответствия.Значение Цикл
				КомментарийВложенный = КомментарийВложенный + "КВ=" + ЗначениеСоответствия.Ключ + "ЗВ=" +ЗначениеСоответствия.Значение;
			КонецЦикла;
			Комментарий = Комментарий + "К=" + ЗначениеСоответствия.Ключ + "З=" + КомментарийВложенный;  	
		КонецЦикла;
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьШагМониторинга.СоставВыполняющиесяФоновыеЗадания", Комментарий);
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьШагМониторинга.ЗначениеОбновитьВсеРезультат", Строка(ОбновитьВсеРезультат));
	КонецЕсли;
	
	Если ОбновитьВсеРезультат <> Неопределено Тогда
		ИдетОбновитьВсе = НЕ ОбновитьВсеРезультат.ЗаданиеВыполнено;
	КонецЕсли;
	
	Если Отладка Тогда
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьШагМониторинга.ЗначениеИдетОбновитьВсе", Строка(ИдетОбновитьВсе));		
	КонецЕсли;
	
	Если НЕ ИдетОбновитьВсе Тогда
		ИдетСдвиг = Ложь;
		ИдетСдвигРезультат = ВыполняющиесяФоновыеЗадания["МониторингСервер.ВыполнитьСдвигГрафикаВФоне"];
		
		Если Отладка Тогда
			ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьШагМониторинга.ЗначениеИдетСдвигРезультат", Строка(ИдетСдвигРезультат));					
		КонецЕсли;

		Если ИдетСдвигРезультат <> Неопределено Тогда
			ИдетСдвиг = НЕ ИдетСдвигРезультат.ЗаданиеВыполнено;
		КонецЕсли;
		
		Если Отладка Тогда
			ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьШагМониторинга.ЗначениеИдетСдвиг", Строка(ИдетСдвиг));					
		КонецЕсли;
		
		Если Не ИдетСдвиг Тогда
			ПараметрыОчереди = Новый Структура("ПроцедураОбновления", "ВыполнитьШагМониторинга");
			Если ДобавитьВОчередь(ПараметрыОчереди) Тогда
				ВыполнитьСдвигГрафика();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отладка Тогда 
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьШагМониторинга.Завершение");		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияНовый()
	ПодключитьОбработчикОжидания = Истина;
	
	//Проверка, выполняется ли фоновое задание по полному обновлению
	ОбновитьВсеРезультат = ВыполняющиесяФоновыеЗадания["МониторингСервер.ОбновитьДанныеПоПоказателямВФоне"];
	
	Если Отладка Тогда 
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.Подключаемый_ПроверитьВыполнениеЗаданияНовый.ЗначениеОбновитьВсеРезультат", Строка(ОбновитьВсеРезультат));		
	КонецЕсли;

	Если ОбновитьВсеРезультат <> Неопределено Тогда
		
		Если Отладка Тогда 
			ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.Подключаемый_ПроверитьВыполнениеЗаданияНовый.ЗначениеОбновитьВсеРезультат.ЗаданиеВыполнено", Строка(ОбновитьВсеРезультат.ЗаданиеВыполнено));		
		КонецЕсли;

		Если Не ОбновитьВсеРезультат.ЗаданиеВыполнено Тогда
			СостояниеФоновогоЗаданияСтр = ПроверитьСостояниеФоновогоЗадания(ОбновитьВсеРезультат.ИдентификаторЗадания);
			
			Если Отладка Тогда 
				ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.Подключаемый_ПроверитьВыполнениеЗаданияНовый.ЗначениеСостояниеФоновогоЗадания1", Строка(СостояниеФоновогоЗаданияСтр));		
			КонецЕсли;
			
			Если СостояниеФоновогоЗаданияСтр = "Активно" Тогда
				//Ждем получения данных...
			ИначеЕсли СостояниеФоновогоЗаданияСтр = "Завершено" Тогда
				СтатусМониторинга = НСтр("ru = 'Мониторинг (вывод данных)'");
				ЗагрузитьПодготовленныеДанные("ОбновитьВсе", ОбновитьВсеРезультат.АдресХранилища);
				ОбновитьВсеРезультат.ЗаданиеВыполнено = Истина;
				ПодключитьОбработчикОжидания = Ложь;
				СтатусМониторинга = НСтр("ru = 'Мониторинг'");
			ИначеЕсли СостояниеФоновогоЗаданияСтр = "ЗавершеноАварийно" Тогда
				ОбновитьВсеРезультат.АдресХранилища = Неопределено;
				ОбновитьВсеРезультат.ЗаданиеВыполнено = Истина;
				
				СтатусМониторинга = НСтр("ru = 'Фоновое задание получения данных завершено аварийно'");
				ПодключитьОбработчикОжидания = Ложь;
				
				ВыполнитьСледующее();
			ИначеЕсли СостояниеФоновогоЗаданияСтр = "Отменено" Тогда
				СтатусМониторинга = НСтр("ru = 'Фоновое задание получения данных отменено'");
				ПодключитьОбработчикОжидания = Ложь;
				ВыполнитьСледующее();
			ИначеЕсли СостояниеФоновогоЗаданияСтр = "Неопределено" Тогда
				СтатусМониторинга = НСтр("ru = 'Фоновое задание получения данных не найдено'");
				ПодключитьОбработчикОжидания = Ложь;
				ВыполнитьСледующее();
			Иначе
				СтатусМониторинга = НСтр("ru = 'Неизвестная ошибка фонового задания получения данных'");
				ПодключитьОбработчикОжидания = Ложь;
				ВыполнитьСледующее();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Проверка, выполняется ли фоновое задание по получению данных для сдвига
	ВыполнитьСдвигРезультат = ВыполняющиесяФоновыеЗадания["МониторингСервер.ВыполнитьСдвигГрафикаВФоне"];
	
	Если Отладка Тогда 
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.Подключаемый_ПроверитьВыполнениеЗаданияНовый.ВыполнитьСдвигРезультат", Строка(ВыполнитьСдвигРезультат));		
	КонецЕсли;
	
	Если ВыполнитьСдвигРезультат <> Неопределено Тогда
		
		Если Отладка Тогда 
			ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.Подключаемый_ПроверитьВыполнениеЗаданияНовый.ЗначениеВыполнитьСдвигРезультат.ЗаданиеВыполнено", Строка(ВыполнитьСдвигРезультат.ЗаданиеВыполнено));		
		КонецЕсли;
		
		Если НЕ ВыполнитьСдвигРезультат.ЗаданиеВыполнено Тогда
			СостояниеФоновогоЗаданияСтр = ПроверитьСостояниеФоновогоЗадания(ВыполнитьСдвигРезультат.ИдентификаторЗадания);
			
			Если Отладка Тогда 
				ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.Подключаемый_ПроверитьВыполнениеЗаданияНовый.ЗначениеСостояниеФоновогоЗадания2", Строка(СостояниеФоновогоЗаданияСтр));		
			КонецЕсли;

			Если СостояниеФоновогоЗаданияСтр = "Активно" Тогда
				//Ждем получения данных...
			ИначеЕсли СостояниеФоновогоЗаданияСтр = "Завершено" Тогда
				СтатусМониторинга = НСтр("ru = 'Мониторинг (вывод данных)'");
				ВыполнитьСдвигРезультат.ЗаданиеВыполнено = Истина;
				ПодключитьОбработчикОжидания = Ложь;
				
				ЗагрузитьПодготовленныеДанные("Сдвинуть", ВыполнитьСдвигРезультат.АдресХранилища);
				
				СтатусМониторинга = НСтр("ru = 'Мониторинг'");
			ИначеЕсли СостояниеФоновогоЗаданияСтр = "ЗавершеноАварийно" Тогда
				ОбновитьВсеРезультат.АдресХранилища = Неопределено;
				ОбновитьВсеРезультат.ЗаданиеВыполнено = Истина;
				
				СтатусМониторинга = НСтр("ru = 'Фоновое задание получения данных завершено аварийно'");
				ПодключитьОбработчикОжидания = Ложь;
				
				ВыполнитьСледующее();
			ИначеЕсли СостояниеФоновогоЗаданияСтр = "Отменено" Тогда
				СтатусМониторинга = НСтр("ru = 'Фоновое задание получения данных отменено'");
				ПодключитьОбработчикОжидания = Ложь;
				ВыполнитьСледующее();
			ИначеЕсли СостояниеФоновогоЗаданияСтр = "Неопределено" Тогда
				СтатусМониторинга = НСтр("ru = 'Фоновое задание получения данных не найдено'");
				ПодключитьОбработчикОжидания = Ложь;
				ВыполнитьСледующее();
			Иначе
				СтатусМониторинга = НСтр("ru = 'Неизвестная ошибка фонового задания получения данных'");
				ПодключитьОбработчикОжидания = Ложь;
				ВыполнитьСледующее();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ ПодключитьОбработчикОжидания Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияНовый");
		Если Отладка Тогда 
			ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.Подключаемый_ПроверитьВыполнениеЗаданияНовый.Отключение");		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// В зависимости от типа выполнившегося задания запускает соответствующий обработчик
//
&НаКлиенте
Процедура ЗагрузитьПодготовленныеДанные(Знач Операция, Знач АдресХранилища, Знач Показатель = "Показатель мониторинга",
	Знач СдвигВправо = Истина);
	
	Если Отладка Тогда
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ЗагрузитьПодготовленныеДанные.Начало");					
	КонецЕсли;
	
	УдалитьИзОчереди();
	
	Если Отладка Тогда
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ЗагрузитьПодготовленныеДанные.ЗначениеОперация", Строка(Операция));					
	КонецЕсли;
	
	Если Операция = "ОбновитьВсе" Тогда
		ЗавершитьОбновление(АдресХранилища);
	ИначеЕсли Операция = "Сдвинуть" Тогда
		ЗавершитьСдвиг(АдресХранилища, СдвигВправо);
	ИначеЕсли Операция = "ДобавитьПоказатель" Тогда
		ЗавершитьДобавлениеПоказателя(АдресХранилища, Показатель);
	ИначеЕсли Операция = "ОбновитьПоказатель" Тогда
		ЗавершитьОбновлениеПоказателя(АдресХранилища, Показатель);
	КонецЕсли;
	
	ВыполнитьСледующее();
	
	Если Отладка Тогда
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ЗагрузитьПодготовленныеДанные.Окончание");					
	КонецЕсли;

КонецПроцедуры

// В случае ошибки выполнения фонового задания - очищает отображаемые данные
//
&НаКлиенте
Процедура ОчиститьРезультаты()
	
	Буфер = Новый Соответствие;
	Объект.Диаграмма.Очистить();
	Для Каждого Диаграмма Из ДиаграммыДляАнализа Цикл
		ЭтотОбъект[Диаграмма.Значение.ИмяРеквизита].Очистить();
	КонецЦикла;
	ТаблицаСДанными.Очистить();
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	ОтменитьВыполнениеЗаданий();
	//Заголовок = НСтр("ru = 'Мониторинг (ошибка получения данных)'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОтображатьНаДиаграммеПриИзменении(Элемент)
	ВывестиСерииПоказателей(,,,,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиВыделитьВсе(Команда)
	Для Каждого ТекПоказатель Из ТаблицаПоказателей Цикл
		ТекПоказатель.ОтображатьНаДиаграмме = Истина;
	КонецЦикла;
	ВывестиСерииПоказателей();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСнятьВсе(Команда)
	Для Каждого ТекПоказатель Из ТаблицаПоказателей Цикл
		ТекПоказатель.ОтображатьНаДиаграмме = Ложь;
	КонецЦикла;
	ВывестиСерииПоказателей();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНавигационнуюСсылкуПрофиль(Команда)
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЭтотОбъект.Профиль) + "?ref_set=" + Объект.ТекущаяНастройка;
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьПрофильНаКлиентеЗавершениеВводСтрокиЗавершение", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещения, НавигационнаяСсылка, НСтр("ru = 'Ссылка на настройки'"));
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПолучитьНавигационнуюСсылкуПрофиль(РезультатВвода, ДополнительныеПараметры) Экспорт
	Если РезультатВвода <> Неопределено Тогда
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНавигационнуюСсылкуПрофиль(Команда)
	ПараметрыОткрытия = Новый Структура("Ключ", ЭтотОбъект.Профиль);
	ФормаДляЗагрузки = ОткрытьФорму("Справочник.ПрофильМониторинга.Форма.ФормаЭлементаПоНавигационнойСсылке", ПараметрыОткрытия, Элементы.Показатели);
	ФормаДляЗагрузки.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗагрузитьНавигационнуюСсылкуПрофиль(РезультатВвода, ДополнительныеПараметры) Экспорт
	ОповещениеЗагрузитьНавигационнуюСсылкуПрофильНаСервере(РезультатВвода);
КонецПроцедуры

&НаСервере
Процедура ОповещениеЗагрузитьНавигационнуюСсылкуПрофильНаСервере(РезультатВвода)
	ИмяСекцииНастройка = "?ref_set=";
	ИмяСекцииДата = "e1cib/data/";
	ИмяСекцииСсылка = "?ref=";
	
	НачалоСекцииНастройки = СтрНайти(РезультатВвода, ИмяСекцииНастройка);
	Если НачалоСекцииНастройки > 0 Тогда
		СсылкаНастройка = Сред(РезультатВвода, НачалоСекцииНастройки + СтрДлина(ИмяСекцииНастройка));
		
		РезультатВвода = Лев(РезультатВвода, НачалоСекцииНастройки - 1);
		
		НачалоСекцииДата = СтрНайти(РезультатВвода, ИмяСекцииДата);
		НачалоСекцииСсылки = СтрНайти(РезультатВвода, ИмяСекцииСсылка);
		
		Если НачалоСекцииДата > 0  И НачалоСекцииСсылки > 0 Тогда
			ПредставлениеТипа   = Сред(РезультатВвода, НачалоСекцииДата + СтрДлина(ИмяСекцииДата), НачалоСекцииСсылки - НачалоСекцииДата - СтрДлина(ИмяСекцииДата));
			ПредставлениеТипа = СтрЗаменить(ПредставлениеТипа, "Справочник.", "");
			ПустаяСсылка = ЗначениеВСтрокуВнутр(Справочники[ПредставлениеТипа].ПустаяСсылка());
			ЗначениеСсылки = СтрЗаменить(ПустаяСсылка, "00000000000000000000000000000000", Сред(РезультатВвода, НачалоСекцииСсылки + СтрДлина(ИмяСекцииСсылка)));
			СсылкаНаПрофиль = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
			
			ЗаполнитьДанныеПоПрофилю(СсылкаНаПрофиль);
			Объект.ТекущаяНастройка = Новый УникальныйИдентификатор(СсылкаНастройка);
			ЗагрузитьПоказателиПрофиля(СсылкаНаПрофиль, Истина);
			Объект.ТекущаяНастройка = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиПрофиля(Команда)
	Если Объект.ТекущаяНастройка = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Объект.ТекущаяНастройка = Новый УникальныйИдентификатор();
		ЭтотОбъект.ТекущаяНастройкаИмя = "Текущая настройка";
	КонецЕсли;
	
	ОбязательноЗакрыть = Ложь;
	СохранитьПрофильНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНастройку(Команда)
	
	Если Модифицированность Тогда
		ОбязательноЗакрыть = Ложь;
		ВыбратьНастройкуОбщая = Истина;
		СохранитьПрофильНаКлиенте();
	Иначе
		ВыбратьНастройкуОбщая();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНастройкуОбщая()
	
	Если Объект.ТекущаяНастройка = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Объект.ТекущаяНастройка = Новый УникальныйИдентификатор();
		ЭтотОбъект.ТекущаяНастройкаИмя = "Текущая настройка";
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ЭтотОбъект.Профиль);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыОткрытия.Вставить("ТекущаяНастройка", Объект.ТекущаяНастройка);
	Форма = ОткрытьФорму("Справочник.ПрофильМониторинга.Форма.ФормаНастройкиПоказателей", ПараметрыОткрытия, Элементы.Показатели);
	
	ТекущаяСтрокаНастройки = Форма.Объект.НастройкиПоказателей.НайтиСтроки(Новый Структура("УИД",Объект.ТекущаяНастройка));
	Если ТекущаяСтрокаНастройки.Количество() = 1 Тогда
		Форма.Элементы.НастройкиПоказателей.ТекущаяСтрока = ТекущаяСтрокаНастройки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	УдалитьДиаграммыАнализаПоВсемПоказателям();
	ВкладкаДиаграммАнализаАктивирована = Ложь;
	
	ВыбратьНастройкуОбщая = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.ТекущаяНастройка = ВыбранноеЗначение;
	ЗагрузитьПоказателиПрофиля(Профиль);
	ЭтотОбъект.ТаблицаСДанными.Очистить();
	Обновить(ЭтотОбъект.Команды.Обновить);
	Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьДиапазон(Команда)
	Объект.ДатаНачала = Объект.ДатаОкончания - (Объект.ДатаОкончания - Объект.ДатаНачала) / 2;
	Если Автообновление Тогда
		ОбновитьДиаграмму();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьДиапазон(Команда)
	Объект.ДатаНачала = Объект.ДатаОкончания - (Объект.ДатаОкончания - Объект.ДатаНачала) * 2;
	Если Автообновление Тогда
		ОбновитьДиаграмму();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимВыделенияТекущегоПоказателя(Команда)
	
	ЭтотОбъект.ВыделятьПоказатель = НЕ ЭтотОбъект.ВыделятьПоказатель;
	
	ЭтотОбъект.Элементы.ПоказателиВыделятьТекущийПоказатель.Видимость = ЭтотОбъект.ВыделятьПоказатель;
	ЭтотОбъект.Элементы.ПоказателиВыделятьТекущийПоказательНе.Видимость = НЕ ЭтотОбъект.ВыделятьПоказатель;
	ВывестиСерииПоказателей(,,,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьПоказателей(Команда)
    
    ЭтотОбъект.ВидимостьПоказателей = НЕ ЭтотОбъект.ВидимостьПоказателей;
	
	Если ЭтотОбъект.ВидимостьПоказателей Тогда
		ЭтотОбъект.Элементы.ИзменитьВидимостьПоказателей.Заголовок = "Скрыть профиль";
	Иначе
		ЭтотОбъект.Элементы.ИзменитьВидимостьПоказателей.Заголовок = "Показать профиль";
	КонецЕсли;
		
	ЭтотОбъект.Элементы.Показатели.Видимость = ЭтотОбъект.ВидимостьПоказателей;
    
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьZoom(Команда)
    
    ЭтотОбъект.ВидимостьZoom = НЕ ЭтотОбъект.ВидимостьZoom;
	
	Если ЭтотОбъект.ВидимостьZoom Тогда
		ЭтотОбъект.Элементы.ФормаИзменитьВидимостьZoom.Заголовок = "Скрыть Zoom";
	Иначе
		ЭтотОбъект.Элементы.ФормаИзменитьВидимостьZoom.Заголовок = "Показать Zoom";
	КонецЕсли;
		
	ЭтотОбъект.Элементы.ГруппаУвеличить.Видимость = ЭтотОбъект.ВидимостьZoom;
    ЭтотОбъект.Элементы.ГруппаСдвинуть.Видимость = ЭтотОбъект.ВидимостьZoom;
    
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		СкопироватьПоказатель(ЭтотОбъект.Команды.СкопироватьПоказатель);
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиТипЛинииПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	ИдентификаторВариантаПоказателя = ИзменитьПоказатель(ТекущиеДанные.Показатель, "ТипЛинии", ТекущиеДанные.ТипЛинии);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Ссылка", ТекущиеДанные.Показатель);
	ПараметрОповещения.Вставить("ИдентификаторВариантаПоказателя", ИдентификаторВариантаПоказателя);
	ПараметрОповещения.Вставить("ИзменилисьДанные", Ложь);
	ПараметрОповещения.Вставить("ИзменилсяВид", Истина);
	ПараметрОповещения.Вставить("ИзменилосьСглаживание", Ложь);
	ПараметрОповещения.Вставить("ТипЛинии", ТекущиеДанные.ТипЛинии);
	ПараметрОповещения.Вставить("СтарыйИдентификаторТипа", Неопределено);
	
	Оповестить("ПоказательМониторингаИзменен", ПараметрОповещения, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиМасштабПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	ТекущиеДанные.Автомасштаб = Ложь;
	ИдентификаторВариантаПоказателя = ИзменитьПоказатель(ТекущиеДанные.Показатель, "Масштаб", ТекущиеДанные.Масштаб);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Ссылка", ТекущиеДанные.Показатель);
	ПараметрОповещения.Вставить("ИдентификаторВариантаПоказателя", ИдентификаторВариантаПоказателя);
	ПараметрОповещения.Вставить("ИзменилисьДанные", Ложь);
	ПараметрОповещения.Вставить("ИзменилсяВид", Истина);
	ПараметрОповещения.Вставить("ИзменилосьСглаживание", Ложь);
	ПараметрОповещения.Вставить("Масштаб", ТекущиеДанные.Масштаб);
	ПараметрОповещения.Вставить("Автомасштаб", ТекущиеДанные.Автомасштаб);
	ПараметрОповещения.Вставить("СтарыйИдентификаторТипа", Неопределено);
	
	Оповестить("ПоказательМониторингаИзменен", ПараметрОповещения, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиАвтомасштабПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	ИдентификаторВариантаПоказателя = ИзменитьПоказатель(ТекущиеДанные.Показатель, "Автомасштаб", ТекущиеДанные.Автомасштаб);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Ссылка", ТекущиеДанные.Показатель);
	ПараметрОповещения.Вставить("ИдентификаторВариантаПоказателя", ИдентификаторВариантаПоказателя);
	ПараметрОповещения.Вставить("ИзменилисьДанные", Ложь);
	ПараметрОповещения.Вставить("ИзменилсяВид", Истина);
	ПараметрОповещения.Вставить("ИзменилосьСглаживание", Ложь);
	ПараметрОповещения.Вставить("Масштаб", ТекущиеДанные.Масштаб);
	ПараметрОповещения.Вставить("Автомасштаб", ТекущиеДанные.Автомасштаб);
	ПараметрОповещения.Вставить("СтарыйИдентификаторТипа", Неопределено);
	
	Оповестить("ПоказательМониторингаИзменен", ПараметрОповещения, Неопределено);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьПоказатели(Знач ТаблицаПоказателей, Масштаб, Автомасштаб, ИзменениеАвтомасштаба = Ложь)
	Массив_ИдентификаторВариантаПоказателя = Новый Массив;
	
	Для Каждого ТекущиеДанные Из ТаблицаПоказателей Цикл
		Если ИзменениеАвтомасштаба Тогда 
			ИдентификаторВариантаПоказателя = ИзменитьПоказатель(ТекущиеДанные.Показатель, "АвтоМасштаб", Автомасштаб);		
		Иначе 
			ИдентификаторВариантаПоказателя = ИзменитьПоказатель(ТекущиеДанные.Показатель, "Масштаб", Масштаб);		
		КонецЕсли;	
		Массив_ИдентификаторВариантаПоказателя.Добавить(ИдентификаторВариантаПоказателя);	
	КонецЦикла;
	
	Возврат Массив_ИдентификаторВариантаПоказателя;
КонецФункции


&НаСервереБезКонтекста
Функция ИзменитьПоказатель(Показатель, Реквизит, Значение)
	ПоказательОбъект = Показатель.ПолучитьОбъект();
	Если Реквизит = "Цвет" Тогда
		ПоказательОбъект[Реквизит] = ЗначениеВСтрокуВнутр(Значение);
	Иначе
		ПоказательОбъект[Реквизит] = Значение;
	КонецЕсли;
	
	Если Реквизит = "Масштаб" Тогда
		ПоказательОбъект.Автомасштаб = Ложь;
		Если ТипЗнч(Значение) =  Тип("Число") Тогда 
			ПоказательОбъект.Масштаб = Значение;
		КонецЕсли;
	КонецЕсли;
	ПоказательОбъект.Записать();
	
	ПоказательПоказателяОбъект = Показатель.Показатель.ПолучитьОбъект();
	ИдентификаторВариантаПоказателя =
		ПоказательПоказателяОбъект.ИдентификаторВариантаПоказателя() +
		МониторингКлиентСервер.СуффиксИдентификатораВариантаПоказателяМониторинга(ПоказательОбъект);
		
	Возврат ИдентификаторВариантаПоказателя;
КонецФункции

&НаКлиенте
Процедура ПоказателиПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ПоказателиПриАктивизацииСтрокиЧерезОбработчик", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяТочкаПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ТекущаяТочкаПриИзмененииЧерезОбработчик", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПриАктивизацииСтрокиЧерезОбработчик()
	
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	Если (ТекущиеДанные = Неопределено) ИЛИ (ТаблицаСДанными.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиСерииПоказателей(,,,,Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяТочкаПриИзмененииЧерезОбработчик()
	Если Объект.Диаграмма.Серии.Количество() < 50 Тогда
		ЭтотОбъект.ПредыдущаяТочка = ЭтотОбъект.ТекущаяТочка;
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.ТекущаяТочка <> ЭтотОбъект.ПредыдущаяТочка Тогда
		Если ЭтотОбъект.ТипДиаграммыПредставление = "График" Тогда
			Объект.Диаграмма.Обновление = Ложь;
			
			Объект.Диаграмма.ПропускатьБазовоеЗначение = Истина;
			ШагСлужебный = ЭтотОбъект.МаксимальноеЗначениеНаГрафике/50;
			Для НомСерии = 1 По 49 Цикл
				Объект.Диаграмма.УстановитьЗначение(ЭтотОбъект.ПредыдущаяТочка, НомСерии, 0);
				Объект.Диаграмма.УстановитьЗначение(ЭтотОбъект.ТекущаяТочка, НомСерии, НомСерии * ШагСлужебный);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого ТекПоказатель Из ЭтотОбъект.ТаблицаПоказателей Цикл
			Если Буфер[ТекПоказатель.Показатель] <> Неопределено Тогда
				Если Буфер[ТекПоказатель.Показатель].Данные <> Неопределено Тогда
					Если ЭтотОбъект.ТекущаяТочка <= Буфер[ТекПоказатель.Показатель].Данные.Количество() - 1 Тогда
						Данные = Буфер[ТекПоказатель.Показатель].Данные[ЭтотОбъект.ТекущаяТочка];
						Если ТипЗнч(Данные) = Тип("Структура") Тогда
							Данные = Данные.Среднее;
						КонецЕсли;
					Иначе
						Данные = "";
					КонецЕсли;
					ТекПоказатель.Текущее = Формат(Данные, "ЧДЦ=2");
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		КолвоТочек = Объект.Диаграмма.КоличествоТочек;
		ТекТочкаСтрока = Строка(Объект.ДатаНачала + ((Объект.ДатаОкончания - Объект.ДатаНачала)/(КолвоТочек-1) * ЭтотОбъект.ТекущаяТочка));
		ЭтотОбъект.ПредыдущаяТочка = ЭтотОбъект.ТекущаяТочка;
		
		Объект.Диаграмма.ОбластьЗаголовка.Текст = ТекТочкаСтрока;
		Коэффициент = 1/КолвоТочек;
		
		Если ЭтотОбъект.ТекущаяТочка > (КолвоТочек/2) Тогда
			Объект.Диаграмма.ОбластьЗаголовка.Лево = Коэффициент * (ЭтотОбъект.ТекущаяТочка + 1) - 0.1;
			Объект.Диаграмма.ОбластьЗаголовка.Право = Коэффициент * (ЭтотОбъект.ТекущаяТочка + 1);
		Иначе
			Объект.Диаграмма.ОбластьЗаголовка.Лево = Коэффициент * (ЭтотОбъект.ТекущаяТочка + 1);
			Объект.Диаграмма.ОбластьЗаголовка.Право = Коэффициент * (ЭтотОбъект.ТекущаяТочка + 1) + 0.1;
		КонецЕсли;
				
		Объект.Диаграмма.Обновление = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипДиаграммыПриИзменении(Элемент)
	Объект.Диаграмма.Обновление = Ложь;
	
	Объект.Диаграмма.ТипДиаграммы = ТипДиаграммы[ЭтотОбъект.ТипДиаграммыПредставление];
	
	Если Объект.Диаграмма.Серии.Количество() > 50 Тогда
		Если ЭтотОбъект.ТипДиаграммыПредставление <> "График" Тогда
			Для НомСерии = 1 По 49 Цикл
				Объект.Диаграмма.УстановитьЗначение(ЭтотОбъект.ТекущаяТочка, НомСерии, 0);
			КонецЦикла;
		Иначе
			ШагСлужебный = ЭтотОбъект.МаксимальноеЗначениеНаГрафике/50;
			
			Для НомСерии = 1 По 49 Цикл
				Объект.Диаграмма.УстановитьЗначение(ЭтотОбъект.ТекущаяТочка, НомСерии, НомСерии * ШагСлужебный);
			КонецЦикла;
		КонецЕсли;
		
		Если ЭтотОбъект.ТипДиаграммыПредставление = "ГрафикСНакоплением" Тогда
			Для НомСерии = 0 По 49 Цикл
				Объект.Диаграмма.Серии[НомСерии].Маркер = ТипМаркераДиаграммы.Нет;
				Объект.Диаграмма.Серии[НомСерии].Линия = Новый Линия(ТипЛинииДиаграммы.НетЛинии);
			КонецЦикла;
		Иначе
			Для НомСерии = 0 По 49 Цикл
				Объект.Диаграмма.Серии[НомСерии].Маркер = ТипМаркераДиаграммы.Круг;
				Объект.Диаграмма.Серии[НомСерии].Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Диаграмма.Обновление = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрограммноПриИзмененииТипаДиаграммы(Элемент)
	Имя = Элемент.Имя;
	Индекс = СтрНайти(Имя, "_");
	Если Индекс > 0 Тогда
		ИмяДиаграммы = "ДиаграммаДляАнализа__" + Прав(Имя, СтрДлина(Имя) - Индекс);
		
		ЭтотОбъект[ИмяДиаграммы].ТипДиаграммы = ТипДиаграммы[ЭтотОбъект[Имя]];
		
		Для Каждого ТекТипДиаграммы Из ДиаграммыДляАнализа Цикл
			Если ТекТипДиаграммы.Значение.ИмяРеквизита = ИмяДиаграммы Тогда
				ТекТип = ЭтотОбъект.ТипыДиаграмм.НайтиПоЗначению(ТекТипДиаграммы.Ключ);
				Если ТекТип <> Неопределено Тогда
					ТекТип.Представление = ЭтотОбъект[Имя];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура АнализПоказателейЧислоКолонокПриИзменении(Элемент)
	Если АнализПоказателейЧислоКолонок = 0 Тогда
		АнализПоказателейЧислоКолонок = 1;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("АнализПоказателейЧислоКолонокПриИзмененииЧерезОбработчик", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура АнализПоказателейЧислоКолонокПриИзмененииЧерезОбработчик()
	ДобавитьДиаграммыАнализа(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеЧерезНажатие(Элемент, СтандартнаяОбработка)
	Если Объект.Онлайн Тогда
		Если ЭтотОбъект.ФлагОбновлениеЧерез Тогда
			ОтключитьОбработчикОжидания("ОбновлениеЧерез");
			ЭтотОбъект.ОбновлениеЧерез = "включить";
			ЭтотОбъект.ФлагОбновлениеЧерез = НЕ ЭтотОбъект.ФлагОбновлениеЧерез;
		Иначе
			ПодключитьОбработчикОжидания("ОбновлениеЧерез", 1);
			ЭтотОбъект.ФлагОбновлениеЧерез = НЕ ЭтотОбъект.ФлагОбновлениеЧерез;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура АвтомасштабУстановитьВсем(Команда)
	Массив_ИдентификаторВариантаПоказателя = ИзменитьПоказатели(ЭтотОбъект.ТаблицаПоказателей, Неопределено, Истина, Истина);
	Обновить(Неопределено);
	
	Для Каждого ТекПоказатель Из ЭтотОбъект.ТаблицаПоказателей Цикл
		ТекПоказатель.Автомасштаб = Истина;
	КонецЦикла;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АвтомасштабСнятьВсем(Команда)
	Массив_ИдентификаторВариантаПоказателя = ИзменитьПоказатели(ЭтотОбъект.ТаблицаПоказателей, Неопределено, Ложь, Истина);
	Обновить(Неопределено);
	
	Для Каждого ТекПоказатель Из ЭтотОбъект.ТаблицаПоказателей Цикл
		ТекПоказатель.Автомасштаб = Ложь;
	КонецЦикла;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МасштабВсем(Масштаб)
	Массив_ИдентификаторВариантаПоказателя = ИзменитьПоказатели(ЭтотОбъект.ТаблицаПоказателей, Масштаб, Ложь);
	Обновить(Неопределено);
	
	Для Каждого ТекПоказатель Из ЭтотОбъект.ТаблицаПоказателей Цикл
		ТекПоказатель.Автомасштаб = Ложь;
	КонецЦикла;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_000000001(Команда)
    МасштабВсем("0.00000001");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_00000001(Команда)
	МасштабВсем("0.0000001");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_0000001(Команда)
	МасштабВсем("0.000001");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_000001(Команда)
	МасштабВсем("0.00001");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_00001(Команда)
	МасштабВсем("0.0001");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_0001(Команда)
	МасштабВсем("0.001");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_001(Команда)
	МасштабВсем("0.01");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_01(Команда)
	МасштабВсем("0.1");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_1(Команда)
	МасштабВсем("1");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_10(Команда)
	МасштабВсем("10");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_100(Команда)
	МасштабВсем("100");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_1000(Команда)
	МасштабВсем("1000");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_10000(Команда)
	МасштабВсем("10000");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_100000(Команда)
	МасштабВсем("100000");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_1000000(Команда)
	МасштабВсем("1000000");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_10000000(Команда)
	МасштабВсем("10000000");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб_100000000(Команда)
    МасштабВсем("100000000");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КаждыйПоказательОтдельноПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("КаждыйПоказательОтдельноПриИзмененииЧерезОбработчик", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КаждыйПоказательОтдельноПриИзмененииЧерезОбработчик()
	ДобавитьДиаграммыАнализа(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиМаркерПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Показатели.ТекущиеДанные;
	ИдентификаторВариантаПоказателя = ИзменитьПоказатель(ТекущиеДанные.Показатель, "Маркер", ТекущиеДанные.Маркер);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Ссылка", ТекущиеДанные.Показатель);
	ПараметрОповещения.Вставить("ИдентификаторВариантаПоказателя", ИдентификаторВариантаПоказателя);
	ПараметрОповещения.Вставить("ИзменилисьДанные", Ложь);
	ПараметрОповещения.Вставить("ИзменилсяВид", Истина);
	ПараметрОповещения.Вставить("ИзменилосьСглаживание", Ложь);
	ПараметрОповещения.Вставить("Маркер", ТекущиеДанные.Маркер);
	ПараметрОповещения.Вставить("СтарыйИдентификаторТипа", Неопределено);
	
	Оповестить("ПоказательМониторингаИзменен", ПараметрОповещения, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередУдалением(Элемент, Отказ)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Функция ДобавитьВОчередь(ПараметрыОчереди)
	ТекущаяДата = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если МониторингОчередьЗаданийДиаграммы = Неопределено Тогда
		МониторингОчередьЗаданийДиаграммы = Новый Массив;
	КонецЕсли;
	
	ЭлементОчереди = НайтиЭлементОчереди(МониторингОчередьЗаданийДиаграммы, ЭтотОбъект.УникальныйИдентификатор);
	Если ЭлементОчереди = Неопределено Тогда
	
		Если МониторингОчередьЗаданийДиаграммы.Количество() = 0 Тогда
			СтатусВыполнения = Истина;
			СтатусМониторинга = НСтр("ru = 'Мониторинг (получение данных)'");
		Иначе
			СтатусВыполнения = Ложь;
			СтатусМониторинга = НСтр("ru = 'Мониторинг (в очереди на выполнение)'");
		КонецЕсли;
		
		ЭлементОчереди = Новый Структура("УникальныйИдентификаторФормы, ТекущаяДата, ПроцедураОбновления, Форма");
		ЭлементОчереди.УникальныйИдентификаторФормы = ЭтотОбъект.УникальныйИдентификатор;
		ЭлементОчереди.ТекущаяДата = ТекущаяДата;
		ЭлементОчереди.ПроцедураОбновления = ПараметрыОчереди.ПроцедураОбновления;
		ЭлементОчереди.Форма = ЭтотОбъект;
		
		МониторингОчередьЗаданийДиаграммы.Добавить(ЭлементОчереди);
	Иначе
		СтатусВыполнения = Ложь;
	КонецЕсли;
	
	Возврат СтатусВыполнения;
КонецФункции

&НаКлиенте
Функция УдалитьИзОчереди()
	//ЗаписатьЛогВыполнения("УдалитьИзОчереди");
	
	ИндексыНаУдаление = Новый Массив;
	
	Если МониторингОчередьЗаданийДиаграммы <> Неопределено Тогда 
		ТекИндекс = МониторингОчередьЗаданийДиаграммы.ВГраница();
		Пока ТекИндекс > -1 Цикл
			ЭлементОчереди = МониторингОчередьЗаданийДиаграммы[ТекИндекс];
			Если ЭлементОчереди.УникальныйИдентификаторФормы = ЭтотОбъект.УникальныйИдентификатор Тогда
				ИндексыНаУдаление.Добавить(ТекИндекс);
			КонецЕсли;
			
			ТекИндекс = ТекИндекс - 1;
		КонецЦикла;
		
		Для Каждого ТекИндекс Из ИндексыНаУдаление Цикл
			МониторингОчередьЗаданийДиаграммы.Удалить(ТекИндекс);	
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ВыполнитьСледующее()
	
	Если Отладка Тогда 
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьСледующее.Начало");		
	КонецЕсли;
	
	Если МониторингОчередьЗаданийДиаграммы <> Неопределено Тогда 
		Если МониторингОчередьЗаданийДиаграммы.Количество() > 0 Тогда
			
			ЭлементОповещения = Неопределено;
			
			Для Каждого ЭлементОчереди Из МониторингОчередьЗаданийДиаграммы Цикл
				Если ЭлементОчереди.Форма.ВводДоступен() И НЕ ЭлементОчереди.Форма.ВключитьВРотацию Тогда
					ЭлементОповещения = ЭлементОчереди;
				КонецЕсли;
			КонецЦикла;
			
			Если ЭлементОповещения = Неопределено ИЛИ ЭлементОповещения.УникальныйИдентификаторФормы = ЭтотОбъект.УникальныйИдентификатор Тогда
				ЭлементОповещения = МониторингОчередьЗаданийДиаграммы[0];
			КонецЕсли;
			
			Оповестить("ВыполнитьСледующее", ЭлементОповещения.УникальныйИдентификаторФормы, ЭтотОбъект); 
		КонецЕсли;
	КонецЕсли;
	
	Если Отладка Тогда 
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ВыполнитьСледующее.Завершение");		
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияВыполнитьСледующее(Параметр, Источник)
	Если Отладка Тогда 
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ОбработкаОповещенияВыполнитьСледующее.Начало");		
	КонецЕсли;
	
	Если Параметр = ЭтотОбъект.УникальныйИдентификатор Тогда
		ЭлементОчереди = НайтиЭлементОчереди(МониторингОчередьЗаданийДиаграммы, Параметр);
		
		Если ЭлементОчереди <> Неопределено Тогда
			//ЗаписатьЛогВыполнения("ОбработкаОповещенияВыполнитьСледующее");
			
			СтатусМониторинга = НСтр("ru = 'Мониторинг (получение данных)'");
			Если ЭлементОчереди.ПроцедураОбновления = "ОбновитьДиаграмму" Тогда
				Если Отладка Тогда 
					ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ПодключениеОбработчикаОжидания.ОбновитьДиаграммуНеСтавитьВОчередьБезПоказателей");		
				КонецЕсли;
				
				ПодключитьОбработчикОжидания("ОбновитьДиаграммуНеСтавитьВОчередьБезПоказателей", ЭтотОбъект.МинимальныйШагОбновления, Истина);
			ИначеЕсли ЭлементОчереди.ПроцедураОбновления = "ВыполнитьШагМониторинга" Тогда
				Если Отладка Тогда 
					ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ПодключениеОбработчикаОжидания.ВыполнитьСдвигГрафикаБезПараметра");		
				КонецЕсли;
				
				ПодключитьОбработчикОжидания("ВыполнитьСдвигГрафикаБезПараметра", ЭтотОбъект.МинимальныйШагОбновления, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отладка Тогда 
		ЗаписатьОтладочнуюИнформациюНаСервере("Мониторинг.ОбработкаОповещенияВыполнитьСледующее.Завершение");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	Сообщить("При активизации");
КонецПроцедуры

&НаКлиенте
Процедура Ротация(Команда)
	ЭтотОбъект.ВключитьВРотацию = НЕ ЭтотОбъект.ВключитьВРотацию;
	
	Если ЭтотОбъект.ВключитьВРотацию Тогда
		ЭтотОбъект.Элементы.Ротация.Картинка = БиблиотекаКартинок.ОсвободитьФайл;
	Иначе
		ЭтотОбъект.Элементы.Ротация.Картинка = БиблиотекаКартинок.ЗанятьФайл;
	КонецЕсли;
	
	Если ЭтотОбъект.ВключитьВРотацию Тогда
		ДобавитьВОчередьРотации();
	Иначе
		УдалитьИзОчередиРотации();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВОчередьРотации()
	Если МониторингОчередьРотации = Неопределено Тогда
		МониторингОчередьРотации = Новый Массив;
	КонецЕсли;
	
	ЭлементОчереди = НайтиЭлементОчереди(МониторингОчередьРотации, ЭтотОбъект.УникальныйИдентификатор);
	Если ЭлементОчереди = Неопределено Тогда
		ЭлементОчереди = Новый Структура("УникальныйИдентификаторФормы, Активна, Форма", ЭтотОбъект.УникальныйИдентификатор, Ложь, ЭтотОбъект);
		
		МониторингОчередьРотации.Добавить(ЭлементОчереди);
	КонецЕсли;
	
	Если МониторингОчередьРотации.Количество() > 1 Тогда
		ПодключитьОбработчикОжиданияОчередиРотации(ЭтотОбъект.ИнтервалРотацииПрофиля);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзОчередиРотации()
	ИндексыНаУдаление = Новый Массив;
	
	ТекИндекс = МониторингОчередьРотации.ВГраница();
	Пока ТекИндекс > -1 Цикл
		ЭлементОчереди = МониторингОчередьРотации[ТекИндекс];
		Если ЭлементОчереди.УникальныйИдентификаторФормы = ЭтотОбъект.УникальныйИдентификатор Тогда
			ИндексыНаУдаление.Добавить(ТекИндекс);
		КонецЕсли;
		
		ТекИндекс = ТекИндекс - 1;
	КонецЦикла;
	
	Для Каждого ТекИндекс Из ИндексыНаУдаление Цикл
		МониторингОчередьРотации.Удалить(ТекИндекс);	
	КонецЦикла;
	
	Если МониторингОчередьРотации.Количество() < 2 Тогда
		ОтключитьОбработчикОжиданияОчередиРотации();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияАктивизироватьФорму(Параметр, Источник)
	Если Параметр = ЭтотОбъект.УникальныйИдентификатор Тогда
		ЭтотОбъект.Активизировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НужноОбновлятьДиаграмму()
	
	Результат = Истина;
		
	Если ТаблицаПоказателей.Количество() = 0 Тогда 
		Результат = Ложь;
	Иначе 
		МассивСтрокСВидимостью = ТаблицаПоказателей.НайтиСтроки(Новый Структура("ОтображатьНаДиаграмме", Истина)); 
		Если МассивСтрокСВидимостью.Количество() = 0 Тогда 
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция  ПолучитьЗначениеОтладкиНаСервере(Константа)
	Возврат Отладка.ПолучитьЗначениеОтладки(Константа);
КонецФункции

&НаСервереБезКонтекста 
Процедура ЗаписатьОтладочнуюИнформациюНаСервере(Событие, Комментарий = "")
	
	Отладка.ЗаписатьОтладочнуюИнформацию(Событие, Комментарий);

КонецПроцедуры

&НаСервере
Функция ТребуетсяОбновление(Буфер)
	
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		Если Буфер.Получить(СтрокаПоказателя.Показатель) = Неопределено Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьИсточникИнцидентовЦКК(Знач ПоказательМониторинга)
	Возврат МониторингСервер.СоздатьИсточникИнцидентовЦКК(ПоказательМониторинга);
КонецФункции

&НаКлиенте
Процедура ВыделитьКомандуУвеличить(ЭлементКоманды)
    
    НовыйШрифт = Новый Шрифт(Элементы.УвеличитьОдинЧас.Шрифт,,,Ложь);
    Элементы.УвеличитьОдинЧас.Шрифт = Новый Шрифт(НовыйШрифт);
    
    НовыйШрифт = Новый Шрифт(Элементы.УвеличитьДваЧаса.Шрифт,,,Ложь);
    Элементы.УвеличитьДваЧаса.Шрифт = Новый Шрифт(НовыйШрифт);
    
    НовыйШрифт = Новый Шрифт(Элементы.УвеличитьТриЧаса.Шрифт,,,Ложь);
    Элементы.УвеличитьТриЧаса.Шрифт = Новый Шрифт(НовыйШрифт);
    
    НовыйШрифт = Новый Шрифт(Элементы.УвеличитьШестьЧасов.Шрифт,,,Ложь);
    Элементы.УвеличитьШестьЧасов.Шрифт = Новый Шрифт(НовыйШрифт);
    
    НовыйШрифт = Новый Шрифт(Элементы.УвеличитьДвенадцатьЧасов.Шрифт,,,Ложь);
    Элементы.УвеличитьДвенадцатьЧасов.Шрифт = Новый Шрифт(НовыйШрифт);
    
    НовыйШрифт = Новый Шрифт(Элементы.УвеличитьОдинДень.Шрифт,,,Ложь);
    Элементы.УвеличитьОдинДень.Шрифт = Новый Шрифт(НовыйШрифт);
    
    НовыйШрифт = Новый Шрифт(Элементы.УвеличитьСемьДней.Шрифт,,,Ложь);
    Элементы.УвеличитьСемьДней.Шрифт = Новый Шрифт(НовыйШрифт);
    
    НовыйШрифт = Новый Шрифт(Элементы.УвеличитьЧетырнадцатьДней.Шрифт,,,Ложь);
    Элементы.УвеличитьЧетырнадцатьДней.Шрифт = Новый Шрифт(НовыйШрифт);
    
    НовыйШрифт = Новый Шрифт(Элементы.УвеличитьОдинМесяц.Шрифт,,,Ложь);
    Элементы.УвеличитьОдинМесяц.Шрифт = Новый Шрифт(НовыйШрифт);
    
    НовыйШрифт = Новый Шрифт(Элементы.УвеличитьШестьМесяцев.Шрифт,,,Ложь);
    Элементы.УвеличитьШестьМесяцев.Шрифт = Новый Шрифт(НовыйШрифт);
    
    НовыйШрифт = Новый Шрифт(ЭлементКоманды.Шрифт,,,Истина);
    ЭлементКоманды.Шрифт = Новый Шрифт(НовыйШрифт);
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийПериодУвеличить()
    
    Период = Объект.ДатаОкончания - Объект.ДатаНачала;
    ПериодМесяц = Объект.ДатаОкончания - ДобавитьМесяц(Объект.ДатаОкончания, -1); 
    ПериодШестьМесяцев = Объект.ДатаОкончания - ДобавитьМесяц(Объект.ДатаОкончания, -6); 
    
    Если Период = 3600 Тогда
        ВыделитьКомандуУвеличить(Элементы.УвеличитьОдинЧас);
    ИначеЕсли Период = 7200 Тогда
        ВыделитьКомандуУвеличить(Элементы.УвеличитьДваЧаса);
    ИначеЕсли Период = 10800 Тогда
        ВыделитьКомандуУвеличить(Элементы.УвеличитьТриЧаса);
    ИначеЕсли Период = 21600 Тогда
        ВыделитьКомандуУвеличить(Элементы.УвеличитьШестьЧасов);
    ИначеЕсли Период = 43200 Тогда
        ВыделитьКомандуУвеличить(Элементы.УвеличитьДвенадцатьЧасов);
    ИначеЕсли Период = 86400 Тогда
        ВыделитьКомандуУвеличить(Элементы.УвеличитьОдинДень);
    ИначеЕсли Период = 604800 Тогда
        ВыделитьКомандуУвеличить(Элементы.УвеличитьСемьДней);
    ИначеЕсли Период = 1209600 Тогда
        ВыделитьКомандуУвеличить(Элементы.УвеличитьЧетырнадцатьДней);
    ИначеЕсли Период = ПериодМесяц Тогда
        ВыделитьКомандуУвеличить(Элементы.УвеличитьОдинМесяц);
    ИначеЕсли Период = ПериодШестьМесяцев Тогда
        ВыделитьКомандуУвеличить(Элементы.УвеличитьШестьМесяцев);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьОдинЧас(Команда)
    
    ВыделитьКомандуУвеличить(Элементы.УвеличитьОдинЧас);
    
    Объект.ДатаНачала = Объект.ДатаОкончания - 3600;
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьДваЧаса(Команда)
    
    ВыделитьКомандуУвеличить(Элементы.УвеличитьДваЧаса);
    
    Объект.ДатаНачала = Объект.ДатаОкончания - 7200;
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьТриЧаса(Команда)
    
    ВыделитьКомандуУвеличить(Элементы.УвеличитьТриЧаса);
    
    Объект.ДатаНачала = Объект.ДатаОкончания - 10800;
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШестьЧасов(Команда)
    
    ВыделитьКомандуУвеличить(Элементы.УвеличитьШестьЧасов);
    
    Объект.ДатаНачала = Объект.ДатаОкончания - 21600;
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьДвенадцатьЧасов(Команда)
    
    ВыделитьКомандуУвеличить(Элементы.УвеличитьДвенадцатьЧасов);
    
    Объект.ДатаНачала = Объект.ДатаОкончания - 43200;
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьОдинДень(Команда)
    
    ВыделитьКомандуУвеличить(Элементы.УвеличитьОдинДень);
    
    Объект.ДатаНачала = Объект.ДатаОкончания - 86400;
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьСемьДней(Команда)
    
    ВыделитьКомандуУвеличить(Элементы.УвеличитьСемьДней);
    
    Объект.ДатаНачала = Объект.ДатаОкончания - 604800;
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьЧетырнадцатьДней(Команда)
    
    ВыделитьКомандуУвеличить(Элементы.УвеличитьЧетырнадцатьДней);
    
    Объект.ДатаНачала = Объект.ДатаОкончания - 1209600;
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьОдинМесяц(Команда)
    
    ВыделитьКомандуУвеличить(Элементы.УвеличитьОдинМесяц);
    
    Объект.ДатаНачала = ДобавитьМесяц(Объект.ДатаОкончания, -1);
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШестьМесяцев(Команда)
    
    ВыделитьКомандуУвеличить(Элементы.УвеличитьШестьМесяцев);
    
    Объект.ДатаНачала = ДобавитьМесяц(Объект.ДатаОкончания, -6);
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВперед(Команда)
    
    ТекДата = ТекущаяДата();
    ПериодБуфер = Объект.ДатаОкончания - Объект.ДатаНачала;
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
	Период = Объект.ДатаОкончания - Объект.ДатаНачала; 
    Объект.ДатаОкончания = Объект.ДатаОкончания + Период;
    Объект.ДатаНачала = Объект.ДатаНачала + Период;
    
    Если Объект.ДатаОкончания > ТекДата Тогда
        Объект.ДатаОкончания = ТекДата;
        Объект.ДатаНачала = Объект.ДатаОкончания - ПериодБуфер;
    КонецЕсли;
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГрафикНазад(Команда)
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Период = Объект.ДатаОкончания - Объект.ДатаНачала; 
    Объект.ДатаОкончания = Объект.ДатаОкончания - Период;
    Объект.ДатаНачала = Объект.ДатаНачала - Период;
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНазадШестьМесяцев(Команда)
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Объект.ДатаНачала = ДобавитьМесяц(Объект.ДатаНачала, -6);
    Объект.ДатаОкончания = ДобавитьМесяц(Объект.ДатаОкончания, -6);
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНазадОдинМесяц(Команда)
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Объект.ДатаНачала = ДобавитьМесяц(Объект.ДатаНачала, - 1);
    Объект.ДатаОкончания = ДобавитьМесяц(Объект.ДатаОкончания, -1);
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНазадСемьДней(Команда)
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Объект.ДатаНачала = Объект.ДатаНачала - 604800;
    Объект.ДатаОкончания = Объект.ДатаОкончания - 604800;
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНазадОдинДень(Команда)
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Объект.ДатаНачала = Объект.ДатаНачала - 86400;
    Объект.ДатаОкончания = Объект.ДатаОкончания - 86400;
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНазадДвенадцатьЧасов(Команда)
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Объект.ДатаНачала = Объект.ДатаНачала - 43200;
    Объект.ДатаОкончания = Объект.ДатаОкончания - 43200;
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикНазадОдинЧас(Команда)
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Объект.ДатаНачала = Объект.ДатаНачала - 3600;
    Объект.ДатаОкончания = Объект.ДатаОкончания - 3600;
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВпередОдинЧас(Команда)
    
    ТекДата = ТекущаяДата();
    Период = Объект.ДатаОкончания - Объект.ДатаНачала;
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Объект.ДатаНачала = Объект.ДатаНачала + 3600;
    Объект.ДатаОкончания = Объект.ДатаОкончания + 3600;
    
    Если Объект.ДатаОкончания > ТекДата Тогда
        Объект.ДатаОкончания = ТекДата;
        Объект.ДатаНачала = Объект.ДатаОкончания - Период;
    КонецЕсли;
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВпередДвенадцатьЧасов(Команда)
    
    ТекДата = ТекущаяДата();
    Период = Объект.ДатаОкончания - Объект.ДатаНачала;
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Объект.ДатаНачала = Объект.ДатаНачала + 43200;
    Объект.ДатаОкончания = Объект.ДатаОкончания + 43200;
    
    Если Объект.ДатаОкончания > ТекДата Тогда
        Объект.ДатаОкончания = ТекДата;
        Объект.ДатаНачала = Объект.ДатаОкончания - Период;
    КонецЕсли;
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВпередОдинДень(Команда)
    
    ТекДата = ТекущаяДата();
    Период = Объект.ДатаОкончания - Объект.ДатаНачала;
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Объект.ДатаНачала = Объект.ДатаНачала + 86400;
    Объект.ДатаОкончания = Объект.ДатаОкончания + 86400;
    
    Если Объект.ДатаОкончания > ТекДата Тогда
        Объект.ДатаОкончания = ТекДата;
        Объект.ДатаНачала = Объект.ДатаОкончания - Период;
    КонецЕсли;
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВпередСемьДней(Команда)
    
    ТекДата = ТекущаяДата();
    Период = Объект.ДатаОкончания - Объект.ДатаНачала;
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Объект.ДатаНачала = Объект.ДатаНачала + 604800;
    Объект.ДатаОкончания = Объект.ДатаОкончания + 604800;
    
    Если Объект.ДатаОкончания > ТекДата Тогда
        Объект.ДатаОкончания = ТекДата;
        Объект.ДатаНачала = Объект.ДатаОкончания - Период;
    КонецЕсли;
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВпередОдинМесяц(Команда)
    
    ТекДата = ТекущаяДата();
    Период = Объект.ДатаОкончания - Объект.ДатаНачала;
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Объект.ДатаНачала = ДобавитьМесяц(Объект.ДатаНачала,  1);
    Объект.ДатаОкончания = ДобавитьМесяц(Объект.ДатаОкончания, 1);
    
    Если Объект.ДатаОкончания > ТекДата Тогда
        Объект.ДатаОкончания = ТекДата;
        Объект.ДатаНачала = Объект.ДатаОкончания - Период;
    КонецЕсли;
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ГрафикВпередШестьМесяцев(Команда)
    
    ТекДата = ТекущаяДата();
    Период = Объект.ДатаОкончания - Объект.ДатаНачала;
    
    Объект.Онлайн = Ложь;
    ОнлайнПриИзменении(Команда);
    
    Объект.ДатаНачала = ДобавитьМесяц(Объект.ДатаНачала, 6);
    Объект.ДатаОкончания = ДобавитьМесяц(Объект.ДатаОкончания, 6);
    
    Если Объект.ДатаОкончания > ТекДата Тогда
        Объект.ДатаОкончания = ТекДата;
        Объект.ДатаНачала = Объект.ДатаОкончания - Период;
    КонецЕсли;
    
    Если Автообновление Тогда
        Объект.Диаграмма.Очистить();
		ПодключитьОбработчикОжидания("ОбновитьДиаграммуОбработкаОжидания", 0.1, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
    
    Если Автообновление ИЛИ Объект.Онлайн Тогда
        ВывестиСерииПоказателей();
    КонецЕсли;
    
КонецПроцедуры













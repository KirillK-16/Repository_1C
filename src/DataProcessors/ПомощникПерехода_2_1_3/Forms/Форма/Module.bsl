
#Область ПеремНаКлиенте

&НаКлиенте
Перем ИсточникПеретаскивания, ТипЗакрытия;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Кластеры = ПоискНаСервере();
    Для Каждого Кластер Из Кластеры Цикл
        
        НовСтрока = Объект.Кластера.Добавить();
        ЗаполнитьЗначенияСвойств(НовСтрока, Кластер);
        
    КонецЦикла;
    
    УстановитьПривилегированныйРежим(Истина);
    Константы.ПоказатьФормуПослеОбновления.Установить("");
    
    Если Константы.ВидимостьПомощникПерехода_2_1_3.Получить() <> (Кластеры.Количество() > 0) Тогда
        Константы.ВидимостьПомощникПерехода_2_1_3.Установить(Кластеры.Количество() > 0);
        ЭтотОбъект.ОбновитьИнтерфейс = Истина;
    КонецЕсли;
    
    УстановитьПривилегированныйРежим(Ложь);
        
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    Если ЭтотОбъект.ОбновитьИнтерфейс Тогда
        ОбновитьИнтерфейс();
    КонецЕсли;
    
    Отказ = Объект.Кластера.Количество() = 0;
    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
    
    Если НЕ ЗавершениеРаботы И НЕ ЭтотОбъект.АнализПроведен И ТипЗакрытия = Неопределено Тогда
        Текст = НСтр("ru = 'Анализ структуры кластеров не был произведен.
        |Закрыть помощник перехода?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
        Отказ = Истина;
        СтандартнаяОбработка = Ложь;
    КонецЕсли;
    
    Если НЕ ЗавершениеРаботы И Модифицированность И ТипЗакрытия = Неопределено Тогда
        Текст = НСтр("ru = 'Не записан результат проведенного анализа.
        |Закрыть помощник перехода?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
        Отказ = Истина;
        СтандартнаяОбработка = Ложь;
    КонецЕсли;
        
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Поиск(Команда)
    
    Объект.ИндексКластера = 0;
    Объект.РезультатАнализа.Очистить();
    Элементы.ИндексКластера.Видимость = Истина;
    ПодключитьОбработчикОжидания("АнализКластераПодлючаемая", 0.1, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
    ЗаписатьНаСервере();
    Модифицированность = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КластераПриАктивизацииСтроки(Элемент)
    ПодключитьОбработчикОжидания("КластераПриАктивизацииСтрокиПодключаемая", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РабочиеСервераЦККПриАктивизацииСтроки(Элемент)
    ПодключитьОбработчикОжидания("РабочиеСервераЦККПриАктивизацииСтрокиПодключаемая", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РабочиеСервераЦККПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
    
    Если ИсточникПеретаскивания = "РабочиеСервераRAS" Тогда
        Если Строка = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Элементы.РабочиеСервераЦКК.ТекущиеДанные.Оборудование) Тогда
            ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
        КонецЕсли;
    Иначе
        ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура РабочиеСервераЦККПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
    
    ДопАдреса = Новый Массив;
    
    Для Каждого ТекЭлемент Из ПараметрыПеретаскивания.Значение Цикл
        ДопАдреса.Добавить(ТекЭлемент.ХостRAS + ";" + ТекЭлемент.АдресRAS);
    КонецЦикла;
    
    Приемник = Объект.РабочиеСервераЦКК.НайтиПоИдентификатору(Строка);
    Приемник.ДополнительныеАдреса = Приемник.ДополнительныеАдреса + ?(ЗначениеЗаполнено(Приемник.ДополнительныеАдреса), "$", "") + СтрСоединить(ДопАдреса, "$");
    РабочиеСервераЦККОбновление(Приемник);
    
    Элементы.РабочиеСервераЦКК.ТекущаяСтрока = Строка;
    
    ТекущийКластер = Элементы.Кластера.ТекущиеДанные.Кластер;
    
    ПараметрыОтбора = Новый Структура("Кластер, РабочийСервер", ТекущийКластер, Приемник.РабочийСервер);
    ДанныеРезультатАнализа = Объект.РезультатАнализа.НайтиСтроки(ПараметрыОтбора);
    ДанныеРезультатАнализа[0].ДополнительныеАдреса = Приемник.ДополнительныеАдреса; 
    
    ИсточникПеретаскивания = "";
    
    СтандартнаяОбработка = Ложь;
    
КонецПроцедуры

&НаКлиенте
Процедура РабочиеСервераRASНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
    
    ИсточникПеретаскивания = "РабочиеСервераRAS";
    ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
    
КонецПроцедуры

&НаКлиенте
Процедура РабочиеСервераRASПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
    
    ТекДанныеКластер = Элементы.Кластера.ТекущиеДанные;
    
    Для Каждого ТекЗначение Из ПараметрыПеретаскивания.Значение Цикл
        
        НовСтрока = Объект.РезультатАнализа.Добавить();
        НовСтрока.Кластер = ТекДанныеКластер.Кластер;
        НовСтрока.ТипПодключения = ТекДанныеКластер.ТипПодключения;
        НовСтрока.ХостRAS = ТекЗначение.Хост;
        НовСтрока.АдресRAS = ТекЗначение.Адрес;
        НовСтрока.ТипПроблемы = "НетRAS";
        НовСтрока.ДополнительнаяИнформация = "Не обнаружен в ЦКК.";
        
        НовСтрока = Объект.РабочиеСервераRAS.Добавить();
        НовСтрока.ХостRAS = ТекЗначение.Хост;
        НовСтрока.АдресRAS = ТекЗначение.Адрес;
        НовСтрока.Комментарий = "Будет создан автоматически при мониторинге.";
        
    КонецЦикла;
    
    СтандартнаяОбработка = Ложь;
    
КонецПроцедуры

&НаКлиенте
Процедура РабочиеСервераRASОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
    
    Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
        
        Для Каждого Элемент Из ПараметрыПеретаскивания.Значение Цикл
            
            ТекущийКластер = Элементы.Кластера.ТекущиеДанные.Кластер;
            ПараметрыОтбора = Новый Структура("Кластер, ХостRAS, АдресRAS, ТипПроблемы", ТекущийКластер, Элемент.ХостRAS, Элемент.АдресRAS, "НетRAS");
            
            РезультатАнализаУдалить = Объект.РезультатАнализа.НайтиСтроки(ПараметрыОтбора);
            Для Каждого ТекЭлемент Из РезультатАнализаУдалить Цикл
                Объект.РезультатАнализа.Удалить(Объект.РезультатАнализа.Индекс(ТекЭлемент));
            КонецЦикла;
                        
            Объект.РабочиеСервераRAS.Удалить(Объект.РабочиеСервераRAS.Индекс(Элемент));
            
        КонецЦикла;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеАдресаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
    
    ИсточникПеретаскивания = "ДополнительныеАдреса";
    ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
    
КонецПроцедуры

&НаКлиенте
Процедура РабочиеСервераRASПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
    
    Если ИсточникПеретаскивания <> "ДополнительныеАдреса" Тогда
        ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеАдресаОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
    
    Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
        
        Для Каждого Элемент Из ПараметрыПеретаскивания.Значение Цикл
            Объект.ДополнительныеАдреса.Удалить(Объект.ДополнительныеАдреса.Индекс(Элемент));
        КонецЦикла;
        
        ДополнительныеАдреса = "";
        Для Каждого ТекЭлемент Из Объект.ДополнительныеАдреса Цикл
            ДополнительныеАдреса = ДополнительныеАдреса + ?(ЗначениеЗаполнено(ДополнительныеАдреса), "$", "") + ТекЭлемент.Хост + ";" + ТекЭлемент.Адрес; 
        КонецЦикла;
        
        Элементы.РабочиеСервераЦКК.ТекущиеДанные.ДополнительныеАдреса = ДополнительныеАдреса;
        
        ТекКластер = Элементы.Кластера.ТекущиеДанные.Кластер;
        ТекРабочийСервер = Элементы.РабочиеСервераЦКК.ТекущиеДанные.РабочийСервер;
        
        ПараметрыОтбора = Новый Структура("Кластер, РабочийСервер", ТекКластер, ТекРабочийСервер);
        ТекРезультатАнализа = Объект.РезультатАнализа.НайтиСтроки(ПараметрыОтбора);
        ТекРезультатАнализа[0].ДополнительныеАдреса = ДополнительныеАдреса;
                
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура КластераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    Если Поле.Имя = "КластераКластер" Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.Кластер);
        ОткрытьФорму("Справочник.ОбъектыКонтроля.ФормаОбъекта", ПараметрыОткрытия);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура РабочиеСервераЦККВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    Если Поле.Имя = "РабочиеСервераЦККРабочийСервер" Тогда
        
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.РабочийСервер);
        ОткрытьФорму("Справочник.ОбъектыКонтроля.ФормаОбъекта", ПараметрыОткрытия);
        
    ИначеЕсли Поле.Имя = "РабочиеСервераЦККОборудование" Тогда
        
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.Оборудование);
        ОткрытьФорму("Справочник.Оборудование.ФормаОбъекта", ПараметрыОткрытия);
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПередЗакрытиеЗавершение(РезультатВопроса, ДополнительныеДанные) Экспорт
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ТипЗакрытия = 1;
		Закрыть("Программно");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КластераПриАктивизацииСтрокиПодключаемая() Экспорт
    
    Если Элементы.Кластера.ТекущаяСтрока <> Неопределено Тогда
        ВывестиТекущийАнализ(Объект.Кластера.НайтиПоИдентификатору(Элементы.Кластера.ТекущаяСтрока));
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура РабочиеСервераЦККПриАктивизацииСтрокиПодключаемая() Экспорт
    
    Данные = Элементы.РабочиеСервераЦКК.ТекущиеДанные;
    РабочиеСервераЦККОбновление(Данные);    
    
КонецПроцедуры

&НаКлиенте
Процедура РабочиеСервераЦККОбновление(Данные)
    
    Если Данные = Неопределено Тогда
        Объект.ЗаголовокДополнительныеАдреса = "Дополнительные адреса";
    Иначе
        Объект.ЗаголовокДополнительныеАдреса = "Дополнительные адреса '" + Данные.Оборудование + "'";
        
        Объект.ДополнительныеАдреса.Очистить();
        
        ДополнительныеАдресаМассив = СтрРазделить(Данные.ДополнительныеАдреса, "$");
        Для Каждого ДопАдрес Из ДополнительныеАдресаМассив Цикл
            
            ДопАдресПараметры = СтрРазделить(ДопАдрес, ";");
            
            Если ДопАдресПараметры.Количество() = 2 Тогда
                НовСтрока = Объект.ДополнительныеАдреса.Добавить();
                НовСтрока.Хост = ДопАдресПараметры[0];
                НовСтрока.Адрес = ДопАдресПараметры[1];
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЕсли;    
    
КонецПроцедуры

&НаКлиенте
Процедура АнализКластераПодлючаемая() Экспорт
    
    Если Элементы.ИндексКластера.МаксимальноеЗначение <> Объект.Кластера.Количество() Тогда
        Элементы.ИндексКластера.МаксимальноеЗначение = Объект.Кластера.Количество();
    КонецЕсли;
    
    ВсегоКластеров = Объект.Кластера.Количество();
        
    Если Объект.ИндексКластера < ВсегоКластеров Тогда
            
        ДанныеФормыЭлементКоллекции = Объект.Кластера[Объект.ИндексКластера];
        Объект.Кластера.НайтиПоИдентификатору(Элементы.Кластера.ТекущаяСтрока);
        ПараметрыКластера = КластерДанныеФормыЭлементКолллекциВСтруктуру(ДанныеФормыЭлементКоллекции);
        РезультатАнализа = АнализКластера(ПараметрыКластера);
        
        Если РезультатАнализа.Выполнено Тогда
            
            ЗагрузитьРезультат(ПараметрыКластера, РезультатАнализа.Результат);
            ДанныеФормыЭлементКоллекции.РезультатАнализа = РезультатАнализаПредставление(РезультатАнализа.Результат);
            
        Иначе
            
            ЗагрузитьОшибочныйРезультат(ПараметрыКластера, РезультатАнализа);
            ДанныеФормыЭлементКоллекции.РезультатАнализа = РезультатАнализа.Результат.ДополнительнаяИнформация;
            
        КонецЕсли;
        
        Элементы.Кластера.ТекущаяСтрока = Объект.ИндексКластера;
        ВывестиТекущийАнализ(Объект.Кластера.НайтиПоИдентификатору(Элементы.Кластера.ТекущаяСтрока));
        ПодключитьОбработчикОжидания("ПродолжитьПодключаемая", 0.1, Истина);
        
    Иначе
        
        ВывестиТекущийАнализ(Объект.Кластера.НайтиПоИдентификатору(Элементы.Кластера.ТекущаяСтрока));
        Элементы.Записать.Доступность = Истина;
        ЭтотОбъект.АнализПроведен = Истина;
        Модифицированность = Истина;
        
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Функция РезультатАнализаПредставление(Результат)
    
    Представление = "Есть проблемы";
    
    Если Результат.ТолькоЦКК.Количество() = 0 И Результат.ТолькоRAS.Количество() = 0 Тогда
        Представление = "ОК";
    Иначе
        
        СтрокДопАдресов = 0;
        Для Каждого ТолькоЦКК Из Результат.ТолькоЦКК Цикл
            СтрокДопАдресов = СтрокДопАдресов + ?(ЗначениеЗаполнено(ТолькоЦКК.ДополнительныеАдреса),1,0);
        КонецЦикла;
        
        Если СтрокДопАдресов = Результат.ТолькоЦКК.Количество() И Результат.ТолькоRAS.Количество() = 0 Тогда
            Представление = "ОК";
        КонецЕсли;
        
    КонецЕсли;
    
    Возврат Представление;
    
КонецФункции

&НаКлиенте
Процедура ПродолжитьПодключаемая() Экспорт
    
    Объект.ИндексКластера = Объект.ИндексКластера + 1;
    ПодключитьОбработчикОжидания("АнализКластераПодлючаемая", 0.1, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТекущийАнализ(Данные)
    
    Объект.ЗаголовокРабочийСервер = "Проблемные рабочие серверы кластера '" + Данные.Кластер + "'";
    
    Объект.РабочиеСервераЦКК.Очистить();
    Объект.РабочиеСервераRAS.Очистить();
    Объект.ДополнительныеАдреса.Очистить();
    
    ПараметрыОтбора = Новый Структура("Кластер", Данные.Кластер);
    РезультатАнализа = Объект.РезультатАнализа.НайтиСтроки(ПараметрыОтбора);
    
    Для Каждого ТекДанные Из РезультатАнализа Цикл
        
        Если ТекДанные.ТипПроблемы = "НетЦКК" Тогда
            
            НовСтрока = Объект.РабочиеСервераЦКК.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрока, ТекДанные);
            
        ИначеЕсли ТекДанные.ТипПроблемы = "НетRAS" Тогда
            
            НовСтрока = Объект.РабочиеСервераRAS.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрока, ТекДанные);
            НовСтрока.Комментарий = "Будет создан автоматически при мониторинге.";
            
        КонецЕсли;
        
    КонецЦикла;
    
    Если Объект.РабочиеСервераЦКК.Количество() > 0 Тогда
        Элементы.РабочиеСервераЦКК.ТекущаяСтрока = Объект.РабочиеСервераЦКК[0].ПолучитьИдентификатор();
        РабочиеСервераЦККОбновление(Элементы.РабочиеСервераЦКК.ТекущиеДанные);
    Иначе
        РабочиеСервераЦККОбновление(Неопределено);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Функция КластерДанныеФормыЭлементКолллекциВСтруктуру(ДанныеФормыЭлементКолллекции)
    
    Структура = Новый Структура(
        "ПлощадкаЭксплуатации,
        |Кластер,
        |ТипПодключения,
        |СерверRAS,
        |ПортRAS,
        |ПортКластера,
        |АдминистраторКластера,
        |ПарольАдминистратораКластера,
        |РезультатАнализа");
    ЗаполнитьЗначенияСвойств(Структура, ДанныеФормыЭлементКолллекции);
    
    Возврат Структура;
    
КонецФункции

&НаКлиенте
Процедура ЗагрузитьРезультат(ПараметрыКластера, Результат)
   
    Для Каждого ТекДанные Из Результат.ТолькоЦКК Цикл
        ДобавитьСтроку(ПараметрыКластера, ТекДанные);
    КонецЦикла;
    
    Для Каждого ТекДанные Из Результат.ТолькоRAS Цикл
        ДобавитьСтроку(ПараметрыКластера, ТекДанные);
    КонецЦикла;
        
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОшибочныйРезультат(ПараметрыКластера, РезультатАнализа)
    
    ДобавитьСтроку(ПараметрыКластера, РезультатАнализа.Результат);
        
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(ПараметрыКластера, Данные)
    
    НовСтрока = Объект.РезультатАнализа.Добавить();
   
    ЗаполнитьЗначенияСвойств(НовСтрока, Данные); 
    НовСтрока.Кластер = ПараметрыКластера.Кластер;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция АнализКластера(ПараметрыКластера)
    
    РабочиеСервераЦКК = РабочиеСервераКластераВЦКК(ПараметрыКластера.Кластер);
    
    Попытка
        
        РабочиеСервераХорошо = Новый Массив;
        РабочиеСервераТолькоЦКК = Новый Массив;
        РабочиеСервераТолькоRAS = Новый Массив;
        
        РабочиеСервераRAS = РабочиеСервераRAS(ПараметрыКластера);
        Выборка = РабочиеСервераЦКК.Выбрать();
        Пока Выборка.Следующий() Цикл
            
            РабочийСерверRAS = РабочиеСервераRAS[Выборка.Хост];
            
            Если РабочийСерверRAS <> Неопределено Тогда
                
                Если Выборка.Хост = РабочийСерверRAS.ИмяКомпьютера Тогда
                    
                    РабочийСерверХорошо = СтруктураРезультатаАнализа();
                    РабочийСерверХорошо.ТипПодключения = ПараметрыКластера.ТипПодключения;
                    РабочийСерверХорошо.РабочийСервер = Выборка.РабочийСервер;
                    РабочийСерверХорошо.Оборудование = Выборка.Оборудование;
                    РабочийСерверХорошо.ХостЦКК = Выборка.Хост;
                    РабочийСерверХорошо.ХостRAS = РабочийСерверRAS.ИмяКомпьютера;
                    РабочийСерверХорошо.ТипПроблемы = "ОК";
                    
                    РабочиеСервераХорошо.Добавить(РабочийСерверХорошо);
                    
                    РабочиеСервераRAS.Удалить(Выборка.Хост);
                    
                КонецЕсли;
                
            Иначе
                
                НашлиВСетевыхАдаптерах = Ложь;
                
                Для Каждого КлючЗначение ИЗ РабочиеСервераRAS Цикл
                    
                    Адреса = ПолучитьАдресаПоИмени(КлючЗначение.Значение.ИмяКомпьютера);            
                    Если Адреса.Количество() > 0 Тогда
                        
                        Адрес = Адреса[0];
                        
                        Оборудование = ПоискВСетевыхАдаптерах(ПараметрыКластера.ПлощадкаЭксплуатации, КлючЗначение.Значение.ИмяКомпьютера);
                        
                        Если ЗначениеЗаполнено(Оборудование) Тогда
                            
                            РабочийСерверХорошо = СтруктураРезультатаАнализа();
                            РабочийСерверХорошо.ТипПодключения = ПараметрыКластера.ТипПодключения;
                            РабочийСерверХорошо.РабочийСервер = Выборка.РабочийСервер;
                            РабочийСерверХорошо.Оборудование = Оборудование;
                            РабочийСерверХорошо.ХостЦКК = Выборка.Хост;
                            РабочийСерверХорошо.ХостRAS = Оборудование.Хост;
                            РабочийСерверХорошо.ТипПроблемы = "ОК";
                            
                            РабочиеСервераХорошо.Добавить(РабочийСерверХорошо);
                            
                            РабочиеСервераRAS.Удалить(КлючЗначение.Ключ);                            
                            
                            НашлиВСетевыхАдаптерах = Истина;
                            
                            Прервать;
                            
                        КонецЕсли;
                                                
                    КонецЕсли;
                    
                КонецЦикла;
                
                Если НЕ НашлиВСетевыхАдаптерах Тогда
                    
                    РабочийСерверТолькоЦКК = СтруктураРезультатаАнализа();
                    РабочийСерверТолькоЦКК.ТипПодключения = ПараметрыКластера.ТипПодключения;
                    РабочийСерверТолькоЦКК.РабочийСервер = Выборка.РабочийСервер;
                    РабочийСерверТолькоЦКК.Оборудование = Выборка.Оборудование;
                    РабочийСерверТолькоЦКК.ХостЦКК = Выборка.Хост;
                    РабочийСерверТолькоЦКК.ДополнительнаяИнформация = "Не обнаружен в кластере.";
                    РабочийСерверТолькоЦКК.ТипПроблемы = "НетЦКК";
                    
                    РабочиеСервераТолькоЦКК.Добавить(РабочийСерверТолькоЦКК);
                    
                КонецЕсли;
                
            КонецЕсли;
            
        КонецЦикла;
        
        Для Каждого КлючЗначение Из РабочиеСервераRAS Цикл
            
            Адреса = ПолучитьАдресаПоИмени(КлючЗначение.Значение.ИмяКомпьютера);            
            Если Адреса.Количество() > 0 Тогда
                Адрес = Адреса[0];
            КонецЕсли;
                                    
            РабочийСерверТолькоRAS = СтруктураРезультатаАнализа();
            РабочийСерверТолькоRAS.ТипПодключения = ПараметрыКластера.ТипПодключения;
            РабочийСерверТолькоRAS.ХостRAS = КлючЗначение.Значение.ИмяКомпьютера;
            РабочийСерверТолькоRAS.АдресRAS = Адрес;
            РабочийСерверТолькоRAS.ДополнительнаяИнформация = "Не обнаружен в ЦКК.";
            РабочийСерверТолькоRAS.ТипПроблемы = "НетRAS";
            
            РабочиеСервераТолькоRAS.Добавить(РабочийСерверТолькоRAS);
                        
        КонецЦикла;
        
        Индекс = РабочиеСервераТолькоRAS.ВГраница();
        Пока Индекс > -1 Цикл
            
            РабочийСерверТолькоRAS = РабочиеСервераТолькоRAS[Индекс];
            Для Каждого РабочийСерверТолькоЦКК Из РабочиеСервераТолькоЦКК Цикл
                
                Если ЕстьАдресОборудования(РабочийСерверТолькоЦКК.Оборудование, РабочийСерверТолькоRAS.АдресRAS) Тогда
                    
                    ДополнительныеАдреса = РабочийСерверТолькоЦКК.ДополнительныеАдреса;
                    Если ДополнительныеАдреса = Неопределено Тогда
                        ДополнительныеАдреса = "";
                    КонецЕсли;
                    
                    ДополнительныеАдреса = ДополнительныеАдреса + ?(ЗначениеЗаполнено(ДополнительныеАдреса),"$","") + РабочийСерверТолькоRAS.ХостRAS + ";" + РабочийСерверТолькоRAS.АдресRAS;  
                    РабочийСерверТолькоЦКК.ДополнительныеАдреса = ДополнительныеАдреса;
                    РабочиеСервераТолькоRAS.Удалить(Индекс);
                    
                    Прервать;
                    
                КонецЕсли;
                
            КонецЦикла;
            
            Индекс = Индекс - 1;
                        
        КонецЦикла;
                
        Результат = Новый Структура("Выполнено, Результат", Истина, Новый Структура("Хорошо, ТолькоЦКК, ТолькоRAS", РабочиеСервераХорошо, РабочиеСервераТолькоЦКК, РабочиеСервераТолькоRAS));
                
        
    Исключение
        
        РезультатОшибка = СтруктураРезультатаАнализа();
        РезультатОшибка.ТипПодключения = ПараметрыКластера.ТипПодключения;
        РезультатОшибка.ДополнительнаяИнформация = ИнформацияОбОшибке().Описание;
        Результат = Новый Структура("Выполнено, Результат", Ложь, РезультатОшибка);
        
    КонецПопытки;
    
    Возврат Результат;
    
КонецФункции

&НаСервереБезКонтекста
Функция ПоискВСетевыхАдаптерах(ПлощадкаЭксплуатации, ИмяКомпьютера)
    
    Оборудование = Справочники.Оборудование.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   СпрОборудование.Ссылка КАК Оборудование
    |ИЗ
    |   РегистрСведений.ОборудованиеСетевыеАдаптеры КАК СетевыеАдаптеры
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.Оборудование КАК СпрОборудование
    |ПО
    |   СпрОборудование.Ссылка = СетевыеАдаптеры.Оборудование
    |   И СпрОборудование.ПлощадкаЭксплуатации = &ПлощадкаЭксплутации
    |ГДЕ
    |   ИмяКомпьютера = &ИмяКомпьютера
    |";
    
    Запрос.УстановитьПараметр("ПлощадкаЭксплутации", ПлощадкаЭксплуатации);
    Запрос.УстановитьПараметр("ИмяКомпьютера", ИмяКомпьютера);
    
    Результат = Запрос.Выполнить();
    
    Если НЕ Результат.Пустой() Тогда
        
        Выборка = Результат.Выбрать();
        Если Выборка.Количество() = 1 Тогда
            Выборка.Следующий();
            Оборудование = Выборка.Оборудование;
        КонецЕсли;        
        
    КонецЕсли;
    
    Возврат Оборудование;
        
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьАдресОборудования(Оборудование, Адрес)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Оборудование
    |ИЗ
    |   РегистрСведений.ОборудованиеСетевыеАдаптеры
    |ГДЕ
    |   Оборудование = &Оборудование
    |   И IPAddress = &Адрес
    |";
    
    Запрос.УстановитьПараметр("Оборудование", Оборудование);
    Запрос.УстановитьПараметр("Адрес", Адрес);
    
    Возврат НЕ Запрос.Выполнить().Пустой();
    
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураРезультатаАнализа()
    Возврат Новый Структура("РабочийСервер, Оборудование, ХостЦКК, ХостRAS, АдресRAS, ДополнительнаяИнформация, ТипПодключения, ТипПроблемы, ДополнительныеАдреса");
КонецФункции

&НаСервереБезКонтекста
Функция РабочиеСервераКластераВЦКК(Кластер)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ОбъектКонтроля КАК РабочийСервер,
    |   СпрОборудование.Ссылка КАК Оборудование,
    |   СпрОборудование.Хост КАК Хост
    |ИЗ
    |   РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   Справочник.Оборудование КАК СпрОборудование
    |ПО
    |   СпрОборудование.Ссылка = ПараметрыРабочихСерверов.Оборудование
    |ГДЕ
    |   Кластер = &Кластер
    |";
    
    Запрос.УстановитьПараметр("Кластер", Кластер);
    
    Возврат Запрос.Выполнить();
    
КонецФункции

&НаСервереБезКонтекста
Функция РабочиеСервераRAS(ПараметрыКластера)
    
    РабочиеСервераRAS = Новый Соответствие;
    
    АдминистрированиеСервера = АдминистрированиеСервера(ПараметрыКластера.СерверRAS, ПараметрыКластера.ПортRAS);
    АдминистрированиеКластер = АдминистрированиеКластер(АдминистрированиеСервера, ПараметрыКластера.ПортКластера);
    АутентификацияКластера(АдминистрированиеКластер, ПараметрыКластера.АдминистраторКластера, ПараметрыКластера.ПарольАдминистратораКластера);
    АдминистрированиеРабочийСервера = АдминистрированиеКластер.ПолучитьРабочиеСерверы();
    Для Каждого АдминистрированиеРабочийСервер Из АдминистрированиеРабочийСервера Цикл
        РабочиеСервераRAS.Вставить(АдминистрированиеРабочийСервер.ИмяКомпьютера, АдминистрированиеРабочийСервер);
    КонецЦикла;
    
    Возврат РабочиеСервераRAS;
    
КонецФункции

&НаСервереБезКонтекста
Функция ПоискНаСервере()
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ПараметрыКластеров.ОбъектКонтроля КАК Кластер,
    |   ПараметрыКластеров.ТипПодключения КАК ТипПодключения,
    |   ПараметрыКластеров.АдресСервераАдминистрирования КАК СерверRAS,
    |   ПараметрыКластеров.ПортСервераАдминистрирования КАК ПортRAS,
    |   ПараметрыКластеров.ПортКластера,
    |   ОбъектыКонтроля.ПлощадкаЭксплуатации,
    |   БезопасноеХранилище.ДанныеХранилища КАК ДанныеХранилища,
    |   ВЫРАЗИТЬ("""" КАК СТРОКА (100)) КАК АдминистраторКластера, 
    |   ВЫРАЗИТЬ("""" КАК СТРОКА (100)) КАК ПарольАдминистратораКластера
    |ИЗ
    |   РегистрСведений.ПараметрыКластеров КАК ПараметрыКластеров
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ОбъектыКонтроля КАК ОбъектыКонтроля
    |ПО
    |   ОбъектыКонтроля.Ссылка = ПараметрыКластеров.ОбъектКонтроля
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.БезопасноеХранилище КАК БезопасноеХранилище
    |ПО
    |   БезопасноеХранилище.ВладелецХранилища = ПараметрыКластеров.ОбъектКонтроля 
    |ГДЕ
    |   ОбъектКонтроля <> &ВидОбъектаКонтроля
    |   И ПараметрыКластеров.ТипПодключения <> &ПустаяСтрока
    |";
    
    Запрос.УстановитьПараметр("ВидОбъектаКонтроля", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
    Запрос.УстановитьПараметр("ПустаяСтрока", "");
    
    УстановитьПривилегированныйРежим(Истина);
    ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
    УстановитьПривилегированныйРежим(Ложь);
    
    Кластеры = Новый Массив;
    
    Для Каждого Строка Из ТаблицаЗначений Цикл
        
        ПараметрыКластера = Новый Структура("Кластер, ТипПодключения, СерверRAS, ПортRAS, ПортКластера, ПлощадкаЭксплуатации");
        ЗаполнитьЗначенияСвойств(ПараметрыКластера, Строка);
        ДанныеХранилища = Строка.ДанныеХранилища.Получить();
        ПараметрыКластера.Вставить("АдминистраторКластера", ДанныеХранилища.АдминистраторКластера);
        ПараметрыКластера.Вставить("ПарольАдминистратораКластера", ДанныеХранилища.ПарольАдминистратораКластера);
        
        Кластеры.Добавить(ПараметрыКластера);
        
    КонецЦикла;
   
    Возврат Кластеры;
    
КонецФункции

&НаСервереБезКонтекста
Функция АдминистрированиеСервера(Адрес, Порт)
    
    Попытка
        АдминистрированиеСервера = Новый АдминистрированиеСервера(Адрес, Порт);
    Исключение
        ОписаниеОшибки =  ОписаниеОшибкиАдминистрированиеКластера(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации("АдминистрированиеКластераRAS", УровеньЖурналаРегистрации.Ошибка,, "АдминистрированиеСервера", ОписаниеОшибки);
        ВызватьИсключение ОписаниеОшибки;
    КонецПопытки;
    
    Возврат АдминистрированиеСервера;
    
КонецФункции

&НаСервереБезКонтекста
Функция АутентификацияКластера(АдминистрированиеКластер, Пользователь, Пароль) Экспорт
    
    Попытка
        АдминистрированиеКластер.ВыполнитьАутентификацию(Пользователь, Пароль);
    Исключение
        ОписаниеОшибки =  ОписаниеОшибкиАдминистрированиеКластера(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации("АдминистрированиеКластераRAS", УровеньЖурналаРегистрации.Ошибка,, "АутентификацияКластера", ОписаниеОшибки);
        ВызватьИсключение ОписаниеОшибки;
    КонецПопытки;
    
КонецФункции

&НаСервереБезКонтекста
Функция АдминистрированиеКластер(АдминистрированиеСервера, ПортКластера)
    
    АдминистрированиеКластер = Неопределено;
    
    КластерыRAS = ПолучитьКластеры(АдминистрированиеСервера);
    
    Для Каждого КластерRAS Из КластерыRAS Цикл
        Если КластерRAS.Порт = ПортКластера Тогда
            АдминистрированиеКластер = КластерRAS;
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    Возврат АдминистрированиеКластер;
        
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКластеры(АдминистрированиеСервера, Конвертировать = Ложь) Экспорт
    
    Попытка
        
        Кластеры = АдминистрированиеСервера.ПолучитьКластеры();
        КластерыРезультат = Кластеры;
                
    Исключение
        ОписаниеОшибки =  ОписаниеОшибкиАдминистрированиеКластера(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации("АдминистрированиеКластераRAS", УровеньЖурналаРегистрации.Ошибка,, "ПолучитьКластеры", ОписаниеОшибки);
        ВызватьИсключение ОписаниеОшибки;
    КонецПопытки;
    
    Возврат КластерыРезультат;
    
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеОшибкиАдминистрированиеКластера(ИнформацияОбОшибке)
    
    ОписаниеОшибки = Новый Массив;
    ЗаполнитьОписаниеОшибки(ОписаниеОшибки, ИнформацияОбОшибке);
    
    Если ОписаниеОшибки.Количество() > 1 Тогда
        ОписаниеОшибки.Удалить(0);
    КонецЕсли;
    
    Возврат СтрСоединить(ОписаниеОшибки, " ");
    
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеОшибки(ОписаниеОшибкиМассив, ОписаниеОшибки)
    
    Описание = ОписаниеОшибки.Описание;
    Если НЕ СтрЗаканчиваетсяНа(Описание, ".") Тогда
        Описание = Описание + ".";
    КонецЕсли;
    
    ОписаниеОшибкиМассив.Добавить(Описание);
    
    Если ОписаниеОшибки.Причина <> Неопределено Тогда
        ЗаполнитьОписаниеОшибки(ОписаниеОшибкиМассив, ОписаниеОшибки.Причина);
    КонецЕсли;
        
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПоХостуВПлощадке(Хост, ПлощадкаЭксплуатации) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.Оборудование
    |ГДЕ
    |   Хост = &Хост
    |   И ПлощадкаЭксплуатации = &ПлощадкаЭксплуатации
    |";
    
    Запрос.УстановитьПараметр("Хост", Хост);
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
        
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАдресаПоИмени(Хост)
    
    Адреса = Новый Массив;
    
    Команда = "nslookup " + Хост;
    
    Данные = ВыполнитьКомандуКонсоли(Команда, Ложь);
    ДанныеМассив = СтрРазделить(Данные, Символы.ПС, Ложь);
    
    Для Индекс = 3 По ДанныеМассив.ВГраница() Цикл
        
        Если Индекс = 3 Тогда
            АдресМассив = СтрРазделить(ДанныеМассив[Индекс], ":");
            АдресМассив.Удалить(0);
            Адреса.Добавить(СокрЛП(СтрСоединить(АдресМассив,":")));
        Иначе
            Адреса.Добавить(СокрЛП(ДанныеМассив[Индекс]));
        КонецЕсли;
                
    КонецЦикла;
    
    Возврат Адреса;
    
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьКомандуКонсоли(Команда, ПриОшибкеИсключение = Истина)
    
    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
    ИмяВременногоФайлаОшибок = ПолучитьИмяВременногоФайла("txt");
    
    cmd = "cmd /c ""chcp 437&" + Команда + ">""" + ИмяВременногоФайла + """ 2>""" + ИмяВременногоФайлаОшибок + """""";
    
    ЗапуститьПриложение(cmd,,Истина);
    
    ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла); 
    Данные = ЧтениеТекста.Прочитать();
    ЧтениеТекста.Закрыть();
    УдалитьФайлы(ИмяВременногоФайла);
    
    ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайлаОшибок); 
    ДанныеОшибка = ЧтениеТекста.Прочитать();
    ЧтениеТекста.Закрыть();
    УдалитьФайлы(ИмяВременногоФайлаОшибок);
    
    Если ПриОшибкеИсключение И ЗначениеЗаполнено(ДанныеОшибка) Тогда
        ВызватьИсключение ДанныеОшибка;
    КонецЕсли;
        
    Возврат Данные;
    
КонецФункции

&НаСервере
Процедура ЗаписатьНаСервере()
    
    ОборудованиеДляЗаписи = Новый Соответствие;
    
    Для Каждого ТекЭлемент Из Объект.РезультатАнализа Цикл
        
        Если ЗначениеЗаполнено(ТекЭлемент.ДополнительныеАдреса) Тогда
            ДобавитьДляЗаписи(ОборудованиеДляЗаписи, ТекЭлемент);
        КонецЕсли;
        
    КонецЦикла;
    
    Для Каждого КлючЗначение Из ОборудованиеДляЗаписи Цикл
        
        НаборЗаписей = РегистрыСведений.ОборудованиеСетевыеАдаптеры.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Оборудование.Установить(КлючЗначение.Ключ);
        НаборЗаписей.Прочитать();
        
        Индекс = КлючЗначение.Значение.ВГраница();
        Пока Индекс > -1 Цикл
            
            ДопАдрес = КлючЗначение.Значение[Индекс];
            
            ИндексСетевогоАдаптера = 1;
            Для Каждого ТекСтрока Из НаборЗаписей Цикл
                
                Если ТекСтрока.IPAddress = ДопАдрес.Адрес Тогда
                    
                    ТекСтрока.ИмяКомпьютера = ДопАдрес.ИмяКомпьютера;
                    
                    Если НЕ ЗначениеЗаполнено(ТекСтрока.СетевойАдаптер) Тогда
                        ТекСтрока.СетевойАдаптер = "Сетевой адаптер #" + Формат(НаборЗаписей.Количество(), "ЧН=0; ЧГ=0");
                    КонецЕсли;
                    
                    Если НЕ ЗначениеЗаполнено(ТекСтрока.Наименование) Тогда
                        ТекСтрока.Наименование = "Сетевой адаптер #" + Формат(НаборЗаписей.Количество(), "ЧН=0; ЧГ=0");
                    КонецЕсли;
                    
                КонецЕсли;
                                
            КонецЦикла;
            
            КлючЗначение.Значение.Удалить(Индекс);
                        
            Индекс = Индекс - 1;
            
        КонецЦикла;
        
        Для Каждого ДопАдрес Из КлючЗначение.Значение Цикл
            
            НовЗапись = НаборЗаписей.Добавить();
            НовЗапись.Оборудование = КлючЗначение.Ключ;
            НовЗапись.СетевойАдаптер = "Сетевой адаптер #" + Формат(НаборЗаписей.Количество(), "ЧН=0; ЧГ=0");
            НовЗапись.Наименование = "Сетевой адаптер #" + Формат(НаборЗаписей.Количество(), "ЧН=0; ЧГ=0");
            НовЗапись.ИмяКомпьютера = ДопАдрес.ИмяКомпьютера;
            НовЗапись.IPAddress = ДопАдрес.Адрес;
            
        КонецЦикла;
        
        НаборЗаписей.Записать(Истина);
                
    КонецЦикла;
        
КонецПроцедуры

&НаСервере
Процедура ДобавитьДляЗаписи(ОборудованиеДляЗаписи, ТекЭлемент)
    
    ДополнительныеАдреса = ОборудованиеДляЗаписи[ТекЭлемент.Оборудование];
    Если ДополнительныеАдреса = Неопределено Тогда
        ДополнительныеАдреса = Новый Массив;
        ОборудованиеДляЗаписи.Вставить(ТекЭлемент.Оборудование, ДополнительныеАдреса);
    КонецЕсли;
    
    ДопАдреса = СтрРазделить(ТекЭлемент.ДополнительныеАдреса, "$");
    Для Каждого ТекДопАдрес Из ДопАдреса Цикл
        ДопАдресаПараметры = СтрРазделить(ТекДопАдрес, ";");
        ДополнительныеАдреса.Добавить(Новый Структура("ИмяКомпьютера, Адрес", ДопАдресаПараметры[0], ДопАдресаПараметры[1]));
    КонецЦикла;    
    
КонецПроцедуры

#КонецОбласти

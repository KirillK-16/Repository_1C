
#Область КлиентскиеПеременные

&НаКлиенте
Перем ДанныеДиаграмм, КОЛИЧЕСТВО_ТОЧЕК, ПервоеПолучение;

&НаКлиенте
Перем АктивацияПредупреждений, АктивацияОшибки, АктивацияКритическиеОшибки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    ЭтотОбъект.Заголовок = "Монитор инцидентов " + ТекущаяДата();
    
    ЭтаОбработка = РеквизитФормыВЗначение("Объект");
        
    ЭтотОбъект.ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
    ЭтотОбъект.ПериодОбновления = 1;
        
    ИнициализироватьДиаграммы();
    
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
    
    НастройкиФормыСохр = Настройки["НастройкиФормы"];
    Если НастройкиФормыСохр <> Неопределено Тогда
        
        ЧтениеXML = Новый ЧтениеXML;
        ЧтениеXML.УстановитьСтроку(НастройкиФормыСохр);
        НастройкиДиаграмм = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
        
        Для Каждого ТекНастройка Из НастройкиДиаграмм Цикл
            
            Если ТекНастройка.УровеньИнцидента = "КритическаяОшибка" Тогда
                ДиаграммаКритическаяОшибка.ТипДиаграммы = ТекНастройка.ТипДиаграммы;
            ИначеЕсли ТекНастройка.УровеньИнцидента = "Ошибка" Тогда
                ДиаграммаОшибка.ТипДиаграммы = ТекНастройка.ТипДиаграммы;
            ИначеЕсли ТекНастройка.УровеньИнцидента = "Предупреждение" Тогда
                ДиаграммаПредупреждение.ТипДиаграммы = ТекНастройка.ТипДиаграммы;                
            КонецЕсли;
            
        КонецЦикла;
                
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    АктивацияПредупреждений = 0;
    АктивацияОшибки = 0;
    АктивацияКритическиеОшибки = 0;
    
    ПервоеПолучение = Истина;
    
    ПодключитьОбработчикОжидания("ПриОткрытииПодключаемая", 0.1, Истина);    
        
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
    
    НастройкиДиаграмм = НастройкиДиаграмм();
    
    #Если ТонкийКлиент Тогда
    ЗаписьXML = Новый ЗаписьXML;
    ЗаписьXML.УстановитьСтроку();
    СериализаторXDTO.ЗаписатьXML(ЗаписьXML, НастройкиДиаграмм, НазначениеТипаXML.Явное);
    НастройкиФормы = ЗаписьXML.Закрыть();
    #КонецЕсли
    
    Если НЕ ЗавершениеРаботы Тогда
        ПередЗакрытиемНаСервере(ЭтотОбъект.ТекущийПользователь);   
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
    
    Если ИмяСобытия = "277004fa-403a-4a46-981d-13ce1d409048" Тогда
        
        Если Параметр["ТекДанные"] <> Неопределено Тогда
            
            ТекДанные = Параметр["ТекДанные"];
            
            Если ТекДанные.УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Ошибка") Тогда
                ЭтотОбъект.ДиаграммаОшибка.ТипДиаграммы = ТекДанные.ТипДиаграммы;
            ИначеЕсли ТекДанные.УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.КритическаяОшибка") Тогда
                ЭтотОбъект.ДиаграммаКритическаяОшибка.ТипДиаграммы = ТекДанные.ТипДиаграммы;
            ИначеЕсли ТекДанные.УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Предупреждение") Тогда
                ЭтотОбъект.ДиаграммаПредупреждение.ТипДиаграммы = ТекДанные.ТипДиаграммы;
            КонецЕсли;
            
        КонецЕсли;
        
        Если Параметр["ПериодОбновления"] <> Неопределено Тогда
            ЭтотОбъект.ПериодОбновления = Параметр["ПериодОбновления"];
            ДанныеДиаграммИнициализация();
            ДиаграммаОшибка.Очистить();
            ДиаграммаКритическаяОшибка.Очистить();
            ДиаграммаПредупреждение.Очистить();
            КритическиеОшибки.Очистить();
            Ошибки.Очистить();
            Предупреждения.Очистить();
        КонецЕсли;
                
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПредупрежденияСброситьТекущуюСтроку(Команда)
    
    УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Предупреждение"); 
    Элементы.Предупреждения.ТекущаяСтрока = Неопределено;
    УстановитьСтандартнуюТолщинуЛиний(УровеньИнцидента);
    ВывестиДанныеУровня(ЭтотОбъект.ДиаграммаПредупреждение, УровеньИнцидента);
    
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиСброситьТекущуюСтроку(Команда)
    
    УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Ошибка"); 
    Элементы.Ошибки.ТекущаяСтрока = Неопределено;
    УстановитьСтандартнуюТолщинуЛиний(УровеньИнцидента);
    ВывестиДанныеУровня(ЭтотОбъект.ДиаграммаОшибка, УровеньИнцидента);
    
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиСброситьТекущуюСтроку(Команда)
    
    УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.КритическаяОшибка"); 
    Элементы.КритическиеОшибки.ТекущаяСтрока = Неопределено;
    УстановитьСтандартнуюТолщинуЛиний(УровеньИнцидента);
    ВывестиДанныеУровня(ЭтотОбъект.ДиаграммаКритическаяОшибка, УровеньИнцидента);
    
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
    
    ПараметрыОткрытия = Новый Структура;
    
    НастройкиДиаграмм = НастройкиДиаграмм();    
    ПараметрыОткрытия.Вставить("НастройкиДиаграмм", НастройкиДиаграмм);
    ПараметрыОткрытия.Вставить("ПериодОбновления", ЭтотОбъект.ПериодОбновления);
    
    ОткрытьФорму("Обработка.МониторИнцидентов.Форма.ФормаНастройки", ПараметрыОткрытия, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПредупрежденияПриАктивизацииСтроки(Элемент)
    
    ОбщаяПриАктивизацииСтроки(ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Предупреждение"));
   
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПриАктивизацииСтроки(Элемент)
    ОбщаяПриАктивизацииСтроки(ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Ошибка"));
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиПриАктивизацииСтроки(Элемент)
    ОбщаяПриАктивизацииСтроки(ПредопределенноеЗначение("Перечисление.УровниИнцидентов.КритическаяОшибка"));
КонецПроцедуры

&НаКлиенте
Процедура ПредупрежденияОтображатьСериюПриИзменении(Элемент)
    
    УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Предупреждение");
    Диаграмма = ЭтотОбъект.ДиаграммаПредупреждение;
    ТекТабло = Элементы.Предупреждения;
    
    ДанныеДиаграммы = ДанныеДиаграмм[УровеньИнцидента];
    Серии = ДанныеДиаграммы["Серии"];
    
    ТекДанные = ТекТабло.ТекущиеДанные;
    ТипИнцидентаСтрока = Строка(ТекДанные.ТипИнцидента);
    Серии[ТипИнцидентаСтрока]["ОтображатьСерию"] = ТекДанные.ОтображатьСерию; 
        
    ВывестиДанныеУровня(Диаграмма, УровеньИнцидента);
    
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиОтображатьСериюПриИзменении(Элемент)
    
    УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Ошибка");
    Диаграмма = ЭтотОбъект.ДиаграммаОшибка;
    ТекТабло = Элементы.Ошибки;
    
    ДанныеДиаграммы = ДанныеДиаграмм[УровеньИнцидента];
    Серии = ДанныеДиаграммы["Серии"];
    
    ТекДанные = ТекТабло.ТекущиеДанные;
    ТипИнцидентаСтрока = Строка(ТекДанные.ТипИнцидента);
    Серии[ТипИнцидентаСтрока]["ОтображатьСерию"] = ТекДанные.ОтображатьСерию; 
        
    ВывестиДанныеУровня(Диаграмма, УровеньИнцидента);
    
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОтображатьСериюПриИзменении(Элемент)
    
    УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.КритическаяОшибка");
    Диаграмма = ЭтотОбъект.ДиаграммаКритическаяОшибка;
    ТекТабло = Элементы.КритическиеОшибки;
    
    ДанныеДиаграммы = ДанныеДиаграмм[УровеньИнцидента];
    Серии = ДанныеДиаграммы["Серии"];
    
    ТекДанные = ТекТабло.ТекущиеДанные;
    ТипИнцидентаСтрока = Строка(ТекДанные.ТипИнцидента);
    Серии[ТипИнцидентаСтрока]["ОтображатьСерию"] = ТекДанные.ОтображатьСерию; 
        
    ВывестиДанныеУровня(Диаграмма, УровеньИнцидента);
    
КонецПроцедуры

&НаКлиенте
Процедура ПредупрежденияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    ТекДанные = Элементы.Предупреждения.ТекущиеДанные;
    
    Форма = ПолучитьФорму("ОбщаяФорма.ПанельИнцидентов",,ЭтотОбъект, ТекДанные.ТипИнцидента);
    УстановитьПараметрыПанелиИнцидентов(Форма, ТекДанные.ТипИнцидента);       
    
    Форма.Открыть();    
    
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    ТекДанные = Элементы.Ошибки.ТекущиеДанные;
    
    Форма = ПолучитьФорму("ОбщаяФорма.ПанельИнцидентов",,ЭтотОбъект, ТекДанные.ТипИнцидента);
    УстановитьПараметрыПанелиИнцидентов(Форма, ТекДанные.ТипИнцидента);       
    
    Форма.Открыть();
    
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    ТекДанные = Элементы.КритическиеОшибки.ТекущиеДанные;
    
    Форма = ПолучитьФорму("ОбщаяФорма.ПанельИнцидентов",,ЭтотОбъект, ТекДанные.ТипИнцидента);
    УстановитьПараметрыПанелиИнцидентов(Форма, ТекДанные.ТипИнцидента);       
    
    Форма.Открыть();
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция НастройкиДиаграмм()
    
    НастройкиДиаграмм = Новый Массив;
    
    НовыйЭлемент = Новый Структура("УровеньИнцидента, ТипДиаграммы", ПредопределенноеЗначение("Перечисление.УровниИнцидентов.КритическаяОшибка"), ЭтотОбъект.ДиаграммаКритическаяОшибка.ТипДиаграммы);
    НастройкиДиаграмм.Добавить(НовыйЭлемент);
    
    НовыйЭлемент = Новый Структура("УровеньИнцидента, ТипДиаграммы", ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Ошибка"), ЭтотОбъект.ДиаграммаОшибка.ТипДиаграммы);
    НастройкиДиаграмм.Добавить(НовыйЭлемент);
    
    НовыйЭлемент = Новый Структура("УровеньИнцидента, ТипДиаграммы", ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Предупреждение"), ЭтотОбъект.ДиаграммаПредупреждение.ТипДиаграммы);
    НастройкиДиаграмм.Добавить(НовыйЭлемент);
    
    Возврат НастройкиДиаграмм;
    
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыПанелиИнцидентов(Форма, ТипИнцидента)
    
    Форма.Автозаголовок = Ложь;
    Форма.Заголовок = "Инциденты: " + ТипИнцидента;
    Форма.АвтоматическоеСохранениеДанныхВНастройках = АвтоматическоеСохранениеДанныхФормыВНастройках.НеИспользовать;
    Форма.ОтображатьАрхивные = Ложь;
    Форма.ОтображатьНеАктуальные = Ложь;
    Форма.ОтображатьТолько = "* Все";
    Форма.АвтообновлениеСписка = Ложь;
    Форма.Элементы.грОтображать.Видимость = Ложь;
    Форма.Элементы.ФормаОбновить.Видимость = Ложь;
    
    ПользовательскиеНастройки = Форма.Список.Отбор;
    ПользовательскиеНастройки.Элементы.Очистить();
    
    НовЭлемент = ПользовательскиеНастройки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипИнцидента");
    НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    НовЭлемент.ПравоеЗначение = ТипИнцидента;
    
    НовЭлемент = ПользовательскиеНастройки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УровеньИнцидента");
    НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
    НовЭлемент.ПравоеЗначение = 0;
    
    НовЭлемент = ПользовательскиеНастройки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
    НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    НовЭлемент.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыИнцидентов.НовыйИнцидент");
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартнуюТолщинуЛиний(УровеньИнцидента)
    
    Если ДанныеДиаграмм <> Неопределено Тогда
                       
        ДанныеДиаграммы = ДанныеДиаграмм[УровеньИнцидента];
        Серии = ДанныеДиаграммы["Серии"];
                
        Для Каждого ТекСерия Из Серии Цикл
            ТекСерия.Значение["ТолщинаЛинии"] = 2;
        КонецЦикла;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбщаяПриАктивизацииСтроки(УровеньИнцидента)
      
    Если ДанныеДиаграмм <> Неопределено Тогда
        
        Если УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Предупреждение") Тогда
            
            АктивацияСчетчик = АктивацияПредупреждений;
            ТекТабло = Элементы.Предупреждения;
            Диаграмма = ЭтотОбъект.ДиаграммаПредупреждение; 
            
        ИначеЕсли УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Ошибка") Тогда
            
            АктивацияСчетчик = АктивацияОшибки;
            ТекТабло = Элементы.Ошибки;
            Диаграмма = ЭтотОбъект.ДиаграммаОшибка;
            
        ИначеЕсли УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.КритическаяОшибка") Тогда            
            
            АктивацияСчетчик = АктивацияКритическиеОшибки;
            ТекТабло = Элементы.КритическиеОшибки;
            Диаграмма = ЭтотОбъект.ДиаграммаКритическаяОшибка;
            
        КонецЕсли;
                
        Если АктивацияСчетчик = 0 Тогда
            
            АктивацияСчетчик = 1;
            ТекТабло.ТекущаяСтрока = Неопределено;
            
        Иначе
            
            ДанныеДиаграммы = ДанныеДиаграмм[УровеньИнцидента];
            Серии = ДанныеДиаграммы["Серии"];
            
            Если ТекТабло.ТекущиеДанные <> Неопределено Тогда
                
                ТекДанные = ТекТабло.ТекущиеДанные;
                ТипИнцидентаСтрока = Строка(ТекДанные.ТипИнцидента);
                Для Каждого ТекСерия Из Серии Цикл
                    
                    Если ТекСерия.Ключ = ТипИнцидентаСтрока Тогда
                        ТекСерия.Значение["ТолщинаЛинии"] = 4;
                    Иначе
                        ТекСерия.Значение["ТолщинаЛинии"] = 2;
                    КонецЕсли;
                    
                КонецЦикла;
                
                ВывестиДанныеУровня(Диаграмма, УровеньИнцидента);
                
            КонецЕсли;
            
        КонецЕсли;
        
        Если УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Предупреждение") Тогда
            АктивацияПредупреждений = АктивацияСчетчик;
        ИначеЕсли УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Ошибка") Тогда    
            АктивацияОшибки = АктивацияСчетчик;
        ИначеЕсли УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.КритическаяОшибка") Тогда
            АктивацияКритическиеОшибки = АктивацияСчетчик;
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПодключаемая() Экспорт
    
    КОЛИЧЕСТВО_ТОЧЕК = 720;
    
    ДанныеДиаграммИнициализация();
    
    ПараметрыХранилищаНастроек = Новый Структура("КлючОбъекта, КлючНастроек, Пользователь", "МониторИнцидентов", "МониторИнцидентов", ЭтотОбъект.ТекущийПользователь);
    ПараметрыЗапуска = ДлительныеОперацииКлиент.ПодготовитьЗапускВыполненияВФоне(Неопределено, ПараметрыХранилищаНастроек);
    
    ПараметрыЗапуска[0].Вставить("Контекст", "Обработки.МониторИнцидентов.Создать()");
    ПараметрыЗапуска[0].Вставить("ИмяПроцедуры", "ДлительнаяОперацияВФоне");
    
    ЭтотОбъект.УникальныйИдентификаторФоновогоЗадания = НачатьМониторинг(ПараметрыЗапуска);
        
    ПодключитьОбработчикОжидания("ШагМониторинг", 0.1, Истина);
    
    Элементы.Предупреждения.ТекущаяСтрока = Неопределено;
    
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДиаграммИнициализация()
    
    ДанныеДиаграмм = Новый Соответствие;
    ДанныеДиаграмм.Вставить(ПредопределенноеЗначение("Перечисление.УровниИнцидентов.КритическаяОшибка"), Новый Соответствие);
    ДанныеДиаграмм.Вставить(ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Ошибка"), Новый Соответствие);
    ДанныеДиаграмм.Вставить(ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Предупреждение"), Новый Соответствие);
    ДанныеДиаграмм.Вставить(ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Информация"), Новый Соответствие);
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПередЗакрытиемНаСервере(Пользователь)
    
    КлючОбъекта = "МониторИнцидентов";
    КлючНастроек = "МониторИнцидентов";
    
    ДанныеХранилища = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек,,Пользователь);
    Если ДанныеХранилища = Неопределено Тогда
        ДанныеХранилища = Новый Соответствие;
        ДанныеХранилища.Вставить("ВыполнятьДо", ТекущаяУниверсальнаяДата());
        ДанныеХранилища.Вставить("Данные", Неопределено);
    КонецЕсли;
    ДанныеХранилища.Вставить("ВыполнятьДо", ТекущаяУниверсальнаяДата() - 3600);
    ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, ДанныеХранилища,,Пользователь);
    
КонецФункции

&НаКлиенте
Процедура ШагМониторинг() Экспорт
    
    ТекДата = ТекущаяДата();
    ЭтотОбъект.Заголовок = "Монитор инцидентов " + ТекДата;
    
    РезультатВыполнения = ОбщийВызовСервера.ШагМониторингНаСервере(ЭтотОбъект.ТекущийПользователь, ЭтотОбъект.УникальныйИдентификаторФоновогоЗадания);
    Если РезультатВыполнения["Данные"] <> Неопределено Тогда
        
        Данные = РезультатВыполнения["Данные"];
        ДобавитьТочку(ТекДата);
        ЗагрузитьДанные(Данные, ТекДата);
        УстановитьУсловноеОформление();
        
        ПервоеПолучение = Ложь;
        
        ПодключитьОбработчикОжидания("ШагМониторинг", ЭтотОбъект.ПериодОбновления, Истина);
        
    ИначеЕсли РезультатВыполнения["Ошибка"] <> Неопределено Тогда
        
        ПодключитьОбработчикОжидания("ПриОткрытииПодключаемая", 1, Истина);
        
    Иначе
        
        ПодключитьОбработчикОжидания("ШагМониторинг", ЭтотОбъект.ПериодОбновления, Истина);
        
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУсловноеОформление()
    
    УсловноеОформлениеДанные = Новый Соответствие;
    УсловноеОформлениеВыполнить = Ложь;
    
    Для Каждого ТекДанные Из ДанныеДиаграмм Цикл
        
        Если ТипЗнч(ТекДанные.Ключ) = Тип("ПеречислениеСсылка.УровниИнцидентов") И ТекДанные.Значение["Серии"] <> Неопределено И ТекДанные.Значение["Серии"].Количество() > 0 Тогда
            
            УсловноеОформлениеДанныеУровень = Новый Соответствие;
            УсловноеОформлениеДанные.Вставить(ТекДанные.Ключ, УсловноеОформлениеДанныеУровень);
        
            Для Каждого ТекСерия Из ТекДанные.Значение["Серии"] Цикл
                
                УсловноеОформлениеДанныеУровень.Вставить(ТекСерия.Значение["ТипИнцидента"], ТекСерия.Значение["Цвет"]);
                
                Если ТекСерия.Значение["ИзменитьЦвет"] Тогда
                    УсловноеОформлениеВыполнить = УсловноеОформлениеВыполнить ИЛИ ТекСерия.Значение["ИзменитьЦвет"];
                    ТекСерия.Значение["ИзменитьЦвет"] = Ложь;
                КонецЕсли;
                
            КонецЦикла;
            
        КонецЕсли;
                
    КонецЦикла;
    
    Если УсловноеОформлениеВыполнить Тогда
        УстановитьУсловноеОформлениеНаСервере(УсловноеОформлениеДанные);
    КонецЕсли;
            
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеНаСервере(УсловноеОформлениеДанные)
    
    ЭтотОбъект.УсловноеОформление.Элементы.Очистить();
    
    Для Каждого ТекДанные Из УсловноеОформлениеДанные Цикл
        
        Если ТекДанные.Ключ = Перечисления.УровниИнцидентов.Предупреждение Тогда
            ИмяПоляКомпоновкиДанныхОтбор = "Предупреждения.ТипИнцидента";
            ИмяПоляКомпоновкиДанных = "ПредупрежденияМаркерСерии";
        ИначеЕсли ТекДанные.Ключ = Перечисления.УровниИнцидентов.КритическаяОшибка Тогда
            ИмяПоляКомпоновкиДанныхОтбор = "КритическиеОшибки.ТипИнцидента";
            ИмяПоляКомпоновкиДанных = "КритическиеОшибкиМаркерСерии";
        ИначеЕсли ТекДанные.Ключ = Перечисления.УровниИнцидентов.Ошибка Тогда
            ИмяПоляКомпоновкиДанныхОтбор = "Ошибки.ТипИнцидента";
            ИмяПоляКомпоновкиДанных = "ОшибкиМаркерСерии";
        КонецЕсли;
                
        Для Каждого ТекДанныеУровня Из ТекДанные.Значение Цикл
            
            НовЭлемент = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
            
            ОформлениеЦветТекста = НовЭлемент.Оформление.Элементы.Найти("ЦветТекста");
            ОформлениеЦветТекста.Использование = Истина;
            ОформлениеЦветТекста.Значение = ТекДанныеУровня.Значение;
                        
            ЭлементОтбора = НовЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
            ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновкиДанныхОтбор);
            ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
            ЭлементОтбора.ПравоеЗначение = ТекДанныеУровня.Ключ;
            
            НовПоле = НовЭлемент.Поля.Элементы.Добавить();
            НовПоле.Использование = Истина;
            НовПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновкиДанных);
            
        КонецЦикла;
        
    КонецЦикла;
        
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТочку(ТекДата)
    
    ТочкиДиаграммы = ДанныеДиаграмм["Точки"];
    Если ТочкиДиаграммы = Неопределено Тогда
        ТочкиДиаграммы = Новый Массив;
        ДанныеДиаграмм.Вставить("Точки", ТочкиДиаграммы);
    КонецЕсли;
    
    ТочкиДиаграммы.Добавить(ТекДата);
    Пока ТочкиДиаграммы.Количество() > КОЛИЧЕСТВО_ТОЧЕК Цикл
        ТочкиДиаграммы.Удалить(0);
    КонецЦикла;
        
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Данные, ТекДата)
    
    Если Данные <> Неопределено Тогда
        
        Для Каждого ТекДанные Из Данные Цикл
            
            Если ТекДанные.Ключ = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.КритическаяОшибка") Тогда
                
                ТекДиаграмма = ЭтотОбъект.ДиаграммаКритическаяОшибка;
                ТекТабло = ЭтотОбъект.КритическиеОшибки;
                УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.КритическаяОшибка"); 
                
            ИначеЕсли ТекДанные.Ключ = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Ошибка") Тогда
                
                ТекДиаграмма = ЭтотОбъект.ДиаграммаОшибка;
                ТекТабло = ЭтотОбъект.Ошибки;
                УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Ошибка"); 
                
            ИначеЕсли ТекДанные.Ключ = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Предупреждение") Тогда
                
                ТекДиаграмма = ЭтотОбъект.ДиаграммаПредупреждение;
                ТекТабло = ЭтотОбъект.Предупреждения;
                УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Предупреждение"); 
                
            ИначеЕсли ТекДанные.Ключ = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Информация") Тогда
            КонецЕсли;
            
            ЗагрузитьДанныеУровня(ТекДиаграмма, ТекТабло, ТекДанные.Значение, УровеньИнцидента, ТекДата);
            ВывестиДанныеУровня(ТекДиаграмма, УровеньИнцидента);
            
        КонецЦикла;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеУровня(Диаграмма, УровеньИнцидента)
    
    Диаграмма.Обновление = Ложь;
    
    Диаграмма.Очистить();
       
    ДанныеДиаграммы = ДанныеДиаграмм[УровеньИнцидента];
    
    Точки = ДанныеДиаграмм["Точки"];
    НеАктивныхТочек = КОЛИЧЕСТВО_ТОЧЕК - Точки.Количество();
    ДатаПервойАктивнойТочки = Точки[0] - ЭтотОбъект.ПериодОбновления * НеАктивныхТочек;
    ПерваяТочка = Истина;
    
    Если НеАктивныхТочек > 0 И ПерваяТочка Тогда
        Диаграмма.Точки.Добавить("");
        ПерваяТочка = Ложь;
    КонецЕсли;
    
    Для Индекс = 2 По НеАктивныхТочек Цикл
        Диаграмма.Точки.Добавить(Формат(ДатаПервойАктивнойТочки + ЭтотОбъект.ПериодОбновления * (Индекс - 1), "ДФ='ЧЧ:мм:сс'"));
    КонецЦикла;
    
    АктивныеТочки = Новый Соответствие;
    Для Каждого ТекТочка Из Точки Цикл
        Если ПерваяТочка ТОгда
            НоваяТочка = Диаграмма.Точки.Добавить("");
            ПерваяТочка = Ложь;
        Иначе
            НоваяТочка = Диаграмма.Точки.Добавить(Формат(ТекТочка, "ДФ='ЧЧ:мм:сс'"));
        КонецЕсли;
        АктивныеТочки.Вставить(ТекТочка, НоваяТочка);
    КонецЦикла;
        
    Если ДанныеДиаграммы["Серии"].Количество() = 0 Тогда
        
        Диаграмма.ПропускатьБазовоеЗначение = Истина;
        
        СерияДиаграммы = Диаграмма.Серии.Добавить("");
        СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
        СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.НетЛинии);
        
        Для Каждого ТекТочка Из Диаграмма.Точки Цикл
            Диаграмма.УстановитьЗначение(ТекТочка, СерияДиаграммы, 0);
        КонецЦикла;
        
    Иначе
        
        Диаграмма.ПропускатьБазовоеЗначение = Ложь
        
    КонецЕсли;
    
    Для Каждого ТекСерия Из ДанныеДиаграммы["Серии"] Цикл
        
        Если ТекСерия.Значение["ОтображатьСерию"] Тогда
            
            СерияДиаграммы = Диаграмма.Серии.Добавить(ТекСерия.Ключ);
            СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
            СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, ТекСерия.Значение["ТолщинаЛинии"]);
            СерияДиаграммы.Цвет = ТекСерия.Значение["Цвет"];
                        
            Для Каждого ТекТочка Из ТекСерия.Значение["ДанныеСерии"] Цикл
                
                ТочкаДиаграммы = АктивныеТочки[ТекТочка["Время"]];
                
                Если ТочкаДиаграммы <> Неопределено Тогда
                    Диаграмма.УстановитьЗначение(ТочкаДиаграммы, СерияДиаграммы, ТекТочка["КоличествоИнцидентов"]);
                КонецЕсли;
                
            КонецЦикла;
            
        КонецЕсли;
        
    КонецЦикла;
    
    Диаграмма.Обновление = Истина;
        
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеУровня(Диаграмма, ТекТабло, Данные, УровеньИнцидента, ТекДата)
    
    ПалитраДиаграммы = Диаграмма.ПолучитьПалитру();
    
    ДанныеДиаграммы = ДанныеДиаграмм[УровеньИнцидента];
    ТекущийИндексЦвета = ДанныеДиаграммы["ТекущийИндексЦвета"];
    Если ТекущийИндексЦвета = Неопределено Тогда
        ТекущийИндексЦвета = 0;
        ДанныеДиаграммы.Вставить("ТекущийИндексЦвета", ТекущийИндексЦвета);
    КонецЕсли;
        
    СерииДиаграммы = ДанныеДиаграммы["Серии"];
    Если СерииДиаграммы = Неопределено Тогда
        СерииДиаграммы = Новый Соответствие;
        ДанныеДиаграммы.Вставить("Серии", СерииДиаграммы);
    КонецЕсли;
    
    Сортировка = Новый СписокЗначений;
    
    СерииСДанными = Новый Соответствие;
    
    Для Каждого ТекСтрока Из ТекТабло Цикл
        ТекСтрока.Количество = 0;
        СерииСДанными.Вставить(ТекСтрока.ТипИнцидента, Истина);
    КонецЦикла;
    
    НовыеСерии = Новый Массив;
    
    Для Каждого ТекДанные Из Данные Цикл
        
        СерииСДанными.Удалить(ТекДанные.Ключ);
        
        ПараметрыСерии = СерииДиаграммы[Строка(ТекДанные.Ключ)];
        
        Если ПараметрыСерии = Неопределено Тогда
            ПараметрыСерии = Новый Соответствие;
            ПараметрыСерии.Вставить("ТипИнцидента", ТекДанные.Ключ);
            ПараметрыСерии.Вставить("ДанныеСерии", Новый Массив);
            
            ПараметрыСерии.Вставить("Цвет", ПалитраДиаграммы[ТекущийИндексЦвета]);
            ТекущийИндексЦвета = ТекущийИндексЦвета + 1;
            Если ТекущийИндексЦвета > ПалитраДиаграммы.ВГраница() Тогда
                ТекущийИндексЦвета = 0;
            КонецЕсли;
            ДанныеДиаграммы.Вставить("ТекущийИндексЦвета", ТекущийИндексЦвета);
                        
            ПараметрыСерии.Вставить("ИзменитьЦвет", Истина);
            ПараметрыСерии.Вставить("ТолщинаЛинии", 2);
            ПараметрыСерии.Вставить("ОтображатьСерию", Истина);
            СерииДиаграммы.Вставить(Строка(ТекДанные.Ключ), ПараметрыСерии);
            
            НовыеСерии.Добавить(ТекДанные.Ключ);
                        
        КонецЕсли;
        
        ДанныеСерии = ПараметрыСерии["ДанныеСерии"];
                
        ЗначениеСерии = Новый Соответствие;
        ЗначениеСерии.Вставить("Время", ТекДата);
        ЗначениеСерии.Вставить("КоличествоИнцидентов", ТекДанные.Значение["Количество"]);
        ДанныеСерии.Добавить(ЗначениеСерии);
        
        // Если данных больше, чем количество точек на диаграмме, то лишнии удаляем
        Пока ДанныеСерии.Количество() > КОЛИЧЕСТВО_ТОЧЕК Цикл
            ДанныеСерии.Удалить(0);
        КонецЦикла;
        
        ОтборСтрок = Новый Структура("ТипИнцидента", ТекДанные.Ключ);
        СтрокиТаблицы = ТекТабло.НайтиСтроки(ОтборСтрок);
        
        Если СтрокиТаблицы.Количество() > 0 Тогда
            СтрокаТаблицы = СтрокиТаблицы[0];
        Иначе
            СтрокаТаблицы = ТекТабло.Добавить();
            СтрокаТаблицы.МаркерСерии = "▬▬";
            СтрокаТаблицы.ТипИнцидента = ТекДанные.Ключ;
            СтрокаТаблицы.ОтображатьСерию = Истина;
        КонецЕсли;
        
        СтрокаТаблицы.Количество = ТекДанные.Значение["Количество"];    
                   
    КонецЦикла;
    
    Для Каждого ТекДанные Из СерииСДанными Цикл
        
        ПараметрыСерии = СерииДиаграммы[Строка(ТекДанные.Ключ)];
        
        Если ПараметрыСерии <> Неопределено Тогда
            
            ДанныеСерии = ПараметрыСерии["ДанныеСерии"];
            
            ЗначениеСерии = Новый Соответствие;
            ЗначениеСерии.Вставить("Время", ТекДата);
            ЗначениеСерии.Вставить("КоличествоИнцидентов", 0);
            ДанныеСерии.Добавить(ЗначениеСерии);
            
            // Если данных больше, чем количество точек на диаграмме, то лишнии удаляем
            Пока ДанныеСерии.Количество() > КОЛИЧЕСТВО_ТОЧЕК Цикл
                ДанныеСерии.Удалить(0);
            КонецЦикла;
            
        КонецЕсли;
        
    КонецЦикла;
        
    // Если все значения серии равны 0, серию необходимо удалить
    СерииУдалить = Новый Массив;
    Для Каждого ТекСерия Из ДанныеДиаграммы["Серии"] Цикл
        
        ПараметрыСерии = СерииДиаграммы[Строка(ТекСерия.Ключ)];
        ДанныеСерии = ПараметрыСерии["ДанныеСерии"];
        
        СуммаЗначений = 0;
        Для Каждого ТекДанныеСерии Из ДанныеСерии Цикл
            СуммаЗначений = СуммаЗначений + ТекДанныеСерии["КоличествоИнцидентов"];
        КонецЦикла;
        
        Если СуммаЗначений = 0 Тогда
            
            ОтборСтрок = Новый Структура("ТипИнцидента", ТекСерия.Значение["ТипИнцидента"]);
            СтрокиТаблицы = ТекТабло.НайтиСтроки(ОтборСтрок);
            
            Если СтрокиТаблицы.Количество() > 0 Тогда
                СтрокаТаблицы = СтрокиТаблицы[0];
                ТекТабло.Удалить(ТекТабло.Индекс(СтрокаТаблицы));
                СерииУдалить.Добавить(ТекСерия.Ключ);
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
    Для Каждого ТекСерия Из СерииУдалить Цикл
        ДанныеДиаграммы["Серии"].Удалить(ТекСерия);
    КонецЦикла;
        
    ИтогКоличество = 0;
    Для Каждого СтрокаТаблицы Из ТекТабло Цикл
        Сортировка.Добавить(СтрокаТаблицы, Формат(СтрокаТаблицы.Количество, "ЧЦ=10; ЧН=0; ЧВН=; ЧГ=0"));
        ИтогКоличество = ИтогКоличество + СтрокаТаблицы.Количество;
    КонецЦикла;
    
    Если УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.КритическаяОшибка") Тогда
        КритическиеОшибкиИтог = ИтогКоличество;
    ИначеЕсли УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Ошибка") Тогда
        ОшибкиИтогКоличество = ИтогКоличество;
    ИначеЕсли УровеньИнцидента = ПредопределенноеЗначение("Перечисление.УровниИнцидентов.Предупреждение") Тогда
        ПредупрежденияИтогКоличество = ИтогКоличество;
    КонецЕсли;
        
    Сортировка.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
    НужныйИндекс = 0;
    Для Каждого ТекСтрока Из Сортировка Цикл
        
        ТекИндекс = ТекТабло.Индекс(ТекСтрока.Значение);
        ТекТабло.Сдвинуть(ТекИндекс, НужныйИндекс - ТекИндекс);
        НужныйИндекс = НужныйИндекс + 1;
        
    КонецЦикла;        
    
    Если НЕ ПервоеПолучение И НовыеСерии.Количество() > 0 Тогда
        ВывестиОповещениеПользователю(НовыеСерии);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОповещениеПользователю(НовыеСерии)
    
    ДействияПриНажатии = "e1cib/app/Обработка.МониторИнцидентов";
    Пояснение = СтрСоединить(НовыеСерии, ", ") + ".";
    ПоказатьОповещениеПользователя("Обнаружены новые типы инцидентов", ДействияПриНажатии, Пояснение, БиблиотекаКартинок.ИнцидентыЗнак_32, СтатусОповещенияПользователя.Важное);    
    
КонецПроцедуры

&НаСервере
Функция НачатьМониторинг(ПараметрыЗапуска)
    
    Пользователь = ПараметрыЗапуска[0].ПараметрыХранилищаНастроек.Пользователь; 
    КлючФЗ = "МониторингИнцидентов" + ПараметрыЗапуска[0].ПараметрыХранилищаНастроек.Пользователь;
    
    ХранилищеОбщихНастроек.Удалить(ПараметрыЗапуска[0].ПараметрыХранилищаНастроек.КлючОбъекта, ПараметрыЗапуска[0].ПараметрыХранилищаНастроек.КлючНастроек, Пользователь); 
    
    ОтборФЗ = Новый Структура("Ключ, Состояние", КлючФЗ, СостояниеФоновогоЗадания.Активно);
    
    АктивныеФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФЗ);
    
    Пока АктивныеФЗ.Количество() > 0 Цикл
        
        Для Каждого ТекФЗ Из АктивныеФЗ Цикл
            ТекФЗ.Отменить();
        КонецЦикла;
        
        КипВнешнийКомпонент.Пауза(1000);
        АктивныеФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФЗ);
        
    КонецЦикла;
            
    ФЗ = ФоновыеЗадания.Выполнить("ДлительныеОперации.ВыполнитьВФоне", ПараметрыЗапуска, КлючФЗ, "Мониторинг инцидентов: " + Пользователь);
    
    Возврат ФЗ.УникальныйИдентификатор;
    
КонецФункции

&НаСервере
Процедура ИнициализироватьДиаграммы()
    
    ИнициализироватьДиаграмму(ЭтотОбъект.ДиаграммаКритическаяОшибка);
    ИнициализироватьДиаграмму(ЭтотОбъект.ДиаграммаОшибка);
    ИнициализироватьДиаграмму(ЭтотОбъект.ДиаграммаПредупреждение);
    
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДиаграмму(Диаграмма)
    
    Диаграмма = Новый Диаграмма;
    
    Диаграмма.Анимация = АнимацияДиаграммы.НеИспользовать;
    Диаграмма.ТипДиаграммы = ТипДиаграммы.График;
    Диаграмма.ОбластьПостроения.ОриентацияМеток = ОриентацияПодписейДиаграммы.Горизонтально;
    Диаграмма.ОбластьПостроения.ШкалаТочек.ШагШкалы = 100;
    Диаграмма.ОбластьПостроения.Лево = 0;
    Диаграмма.ОбластьПостроения.Право = 1;
    Диаграмма.ОбластьПостроения.Верх = 0;
    Диаграмма.ОбластьПостроения.Низ = 1;
    
    Диаграмма.ОтображатьЛегенду = Ложь;
    
КонецПроцедуры

#КонецОбласти
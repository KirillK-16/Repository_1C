
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Интерфейс

// Создает/изменяет в справочнике методику по переданным данным
//
// Параметры:
//		СтруктураДанныхМетодики - Структура с даными
//		Родитель - Группа справочника "Методики"
//
// Возвращаемое значение:
//		Ссылка на созданную/измененную методику
//
Функция ЗагрузитьМетодикуВБазу(СтруктураДанныхМетодики, Родитель = Неопределено) Экспорт
	
	Методика = Справочники.Методики.НайтиПоРеквизиту("Идентификатор", СтруктураДанныхМетодики.Идентификатор);
	
	ОбъектМетодика = Неопределено;
	Если НЕ ЗначениеЗаполнено(Методика) Тогда
		
		ОбъектМетодика = Справочники.Методики.СоздатьЭлемент();
		ОбъектМетодика.Родитель = Справочники.Методики.НовыеМетодики;
		ОбъектМетодика.УстановитьНовыйКод("");
		
	Иначе
		ОбъектМетодика = Методика.ПолучитьОбъект();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		ОбъектМетодика.Родитель = Родитель;
	КонецЕсли;
	
	ОбъектМетодика.Наименование = СтруктураДанныхМетодики.Наименование;
	ОбъектМетодика.Идентификатор = СтруктураДанныхМетодики.Идентификатор;
	ОбъектМетодика.ТекстМетодикиHTML = СтруктураДанныхМетодики.ТекстHTML;
	ОбъектМетодика.Одобрено = СтруктураДанныхМетодики.Одобрено;
	
	ОбъектМетодика.Применение.Очистить();
	Для Каждого СтрокаПрименение Из СтруктураДанныхМетодики.МассивПрименение Цикл
		НоваяСтрока = ОбъектМетодика.Применение.Добавить();
		НоваяСтрока.ОбъектПрименения = Перечисления.ТипЭлементаПлощадки[СтрокаПрименение.ОбъектПрименения];
	КонецЦикла;
	
	ОбъектМетодика.Файлы.Очистить();
	Для Каждого СтрокаФайл Из СтруктураДанныхМетодики.МассивФайлов Цикл
		НоваяСтрока = ОбъектМетодика.Файлы.Добавить();
		НоваяСтрока.Идентификатор = СтрокаФайл.Идентификатор;
		НоваяСтрока.ИмяФайла = СтрокаФайл.ИмяФайла;
		НоваяСтрока.Файл = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаФайл.АдресХранилища));
	КонецЦикла;
	
	ОбъектМетодика.Записать();
	Методика = ОбъектМетодика.Ссылка;
	
	Возврат Методика;
	
КонецФункции

// Формирует zip-архив данных методики
//
// Параметры:
//		Методика - Ссылка на элемент методики
//
// Возвращаемое значение:
//		путь к zip архиву
//
Функция СформироватьАрхивМетодики(Методика) Экспорт
	
	ОбъектМетодика = Методика.ПолучитьОбъект();
	
	ИмяФайлаHTML = СокрЛП(ОбъектМетодика.Идентификатор);
	ФайлаHTML = Новый Файл(КаталогВременныхФайлов() + "\" + ИмяФайлаHTML + ".html");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(ОбъектМетодика.ТекстМетодикиHTML);
	ТекстовыйДокумент.Записать(ФайлаHTML.ПолноеИмя, КодировкаТекста.UTF8);
	
	МассивКартинок = Новый Массив();
	Для Каждого СтрокаФайл Из ОбъектМетодика.Файлы Цикл
		
		ИмяФайлаКартинки = КаталогВременныхФайлов() + "\" + СтрокаФайл.ИмяФайла;
		ДвоичныеДанные = СтрокаФайл.Файл.Получить();
		ДвоичныеДанные.Записать(ИмяФайлаКартинки);
		МассивКартинок.Добавить(ИмяФайлаКартинки);
			
	КонецЦикла;
	
	ИмяФайлаОписания = КаталогВременныхФайлов() + "\" + ИмяФайлаHTML + ".xml";
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаОписания, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Методика");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(ОбъектМетодика.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Идентификатор");
	ЗаписьXML.ЗаписатьТекст(СокрЛП(ОбъектМетодика.Идентификатор));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Автор");
	ЗаписьXML.ЗаписатьТекст(СокрЛП(ОбъектМетодика.Автор));
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файлы");
	Для Каждого СтрокаФайл Из ОбъектМетодика.Файлы Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
		ЗаписьXML.ЗаписатьАтрибут("Идентификатор", СтрокаФайл.Идентификатор);
		ЗаписьXML.ЗаписатьАтрибут("ИмяФайла", СтрокаФайл.ИмяФайла);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Применение");
	Для Каждого СтрокаПрименение Из ОбъектМетодика.Применение Цикл
		
		ИндексЗначения = Перечисления.ТипЭлементаПлощадки.Индекс(СтрокаПрименение.ОбъектПрименения);
		МетаданныеЗначения = Метаданные.Перечисления.ТипЭлементаПлощадки.ЗначенияПеречисления[ИндексЗначения];
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ОбъектПрименения");
		ЗаписьXML.ЗаписатьАтрибут("Идентификатор", МетаданныеЗначения.Имя);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
		
	ИмяZip = ФайлаHTML.Путь + ФайлаHTML.ИмяБезРасширения + ".zip";
	ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяZip);
	ЗаписьZipФайла.Добавить(ФайлаHTML.ПолноеИмя);
	ЗаписьZipФайла.Добавить(ИмяФайлаОписания);
	Для Каждого ИмяФайлаКартинки Из МассивКартинок Цикл
		ЗаписьZipФайла.Добавить(ИмяФайлаКартинки);
	КонецЦикла;
	ЗаписьZipФайла.Записать();
	
	Возврат ИмяZip;
	
КонецФункции

// Обновляет справочник методик из zip-файла на диске
//
// Параметры:
//		АдресВременногоХранилища - адрес во временного хранилища файла
//
Процедура ОбновитьСДиска(АдресВременногоХранилища) Экспорт
	
	КаталогМетодик = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор()) + ПолучитьРазделительПутиСервера();
	СоздатьКаталог(КаталогМетодик);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ДвоичныеДанные.Записать(КаталогМетодик + "methodics.zip");
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(КаталогМетодик + "methodics.zip");
	ЧтениеZipФайла.ИзвлечьВсе(КаталогМетодик);
	
	ФайлОписания = Новый Файл(КаталогМетодик + "methodics.xml");
	Если НЕ ФайлОписания.Существует() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найден файл: " + ФайлОписания.ПолноеИмя);
		Возврат;
	КонецЕсли;
	
	СтруктураСписковМетодик = ПолучитьСтруктуруСписковМетодикИзФайлаСервер(ФайлОписания.ПолноеИмя);
	
	ОбновитьГруппыСервер(СтруктураСписковМетодик.МассивГрупп);
	
	МассивДанныхМетодик = Новый Массив();
	Для Каждого СтруктураМетодика Из СтруктураСписковМетодик.МассивМетодик Цикл
		СтруктураДанныхМетодики = ПолучитьДанныеМетодики(КаталогМетодик, СтруктураМетодика);
		МассивДанныхМетодик.Добавить(СтруктураДанныхМетодики);
	КонецЦикла;
	
	ОбновитьМетодикиСервер(МассивДанныхМетодик);
	
	УдалитьФайлы(КаталогМетодик);
	
КонецПроцедуры

// Обновляет справочник методик по сети
//
Процедура ОбновитьИзИнтернет(Параметры, АдресХранилища) Экспорт
	
	Прокси = МетодикиСервер.ПолучитьПроксиСервисаМетодик(АдресХранилища);
	Если Прокси = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	
	ОбъектXDTOMethodics = Неопределено;
	
	Попытка
		ОбъектXDTOMethodics = Прокси.getList(); 
	Исключение
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + "Ошибка получения списка методик с веб-сервиса: " + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	Если ОбъектXDTOMethodics = Неопределено Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + "Ошибка получения списка методик с веб-сервиса: " + Символы.ПС + "Нет данных.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ПоместитьВоВременноеХранилище(СообщениеОбОшибке, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Попытка
		СтруктураСписковМетодик = ПолучитьСтруктуруСписковМетодикСервер(ОбъектXDTOMethodics);
		ОбновитьГруппыСервер(СтруктураСписковМетодик.МассивГрупп);
	Исключение
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	МассивИдентификаторов = Новый Массив();
	Для Каждого СтруктураМетодика Из СтруктураСписковМетодик.МассивМетодик Цикл
		МассивИдентификаторов.Добавить(СтруктураМетодика.Идентификатор);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Методики.Ссылка КАК Методика,
	|	Методики.Идентификатор КАК Идентификатор,
	|	Методики.Одобрено КАК Одобрено
	|ИЗ
	|	Справочник.Методики КАК Методики
	|ГДЕ
	|	Методики.Идентификатор В(&МассивИдентификаторов)
	|";
	
	СоответствиеМетодик = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеМетодик.Вставить(Выборка.Идентификатор, Новый Структура("Методика, Одобрено", Выборка.Методика, Выборка.Одобрено));
	КонецЦикла;
	
	МассивДанныхМетодик = Новый Массив();
	Для Каждого СтруктураМетодика Из СтруктураСписковМетодик.МассивМетодик Цикл
		
		СтруктураНайденнойМетодики = СоответствиеМетодик[СтруктураМетодика.Идентификатор];
		Если СтруктураНайденнойМетодики <> Неопределено И СтруктураНайденнойМетодики.Одобрено >= СтруктураМетодика.Одобрено Тогда
			Продолжить;
		КонецЕсли;
			
		Попытка
			ХранилищеМетодики = Прокси.get(СтруктураМетодика.Идентификатор);
		Исключение
			
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + "Ошибка получения данных методики: " 
				+ Символы.ПС + СтруктураМетодика.Идентификатор 
				+ Символы.ПС + ОписаниеОшибки();
				
			Продолжить;
			
		КонецПопытки;
		
		Если ХранилищеМетодики = Неопределено ИЛИ ТипЗнч(ХранилищеМетодики) <> Тип("ХранилищеЗначения") Тогда
			
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + "Ошибка получения данных методики: " 
				+ Символы.ПС + СтруктураМетодика.Идентификатор 
				+ Символы.ПС + "Нет данных";
				
			Продолжить;
			
		КонецЕсли;
		
		ФайлМетодики = Новый Файл(КаталогВременныхФайлов() + СтруктураМетодика.Идентификатор + ".zip");
		ДвоичныеДанные = ХранилищеМетодики.Получить();
		Если ДвоичныеДанные = Неопределено ИЛИ ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные")  Тогда
			
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + "Ошибка получения данных методики: " 
				+ Символы.ПС + СтруктураМетодика.Идентификатор 
				+ Символы.ПС + "Нет данных";
				
			Продолжить;
			
		КонецЕсли;
			
		Попытка
			ДвоичныеДанные.Записать(ФайлМетодики.ПолноеИмя);
		Исключение
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + "Ошибка получения данных методики: " + ОписаниеОшибки();
			Продолжить;
		КонецПопытки;
			
		Попытка
			СтруктураДанныхМетодики = ПолучитьДанныеМетодики(КаталогВременныхФайлов(), СтруктураМетодика);
			МассивДанныхМетодик.Добавить(СтруктураДанныхМетодики);
		Исключение
		КонецПопытки;
			
	КонецЦикла;
	
	Попытка
		ОбновитьМетодикиСервер(МассивДанныхМетодик);
	Исключение
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(СообщениеОбОшибке, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСXDTO

Функция ПолучитьМассивИзСпискаXDTO(ОбъектXDTO, ИмяСвойства)
	
	МассивДанных = Новый Массив();
	
	Если ОбъектXDTO.Свойства().Получить(ИмяСвойства) = Неопределено Тогда
		
		// Ничего не делать
		
	ИначеЕсли ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("СписокXDTO") Тогда
		
		МассивДанных = ОбъектXDTO[ИмяСвойства];
		
	ИначеЕсли ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("ОбъектXDTO") 
		И ОбъектXDTO.Установлено(ОбъектXDTO.Свойства().Получить(ИмяСвойства)) Тогда
		
		МассивДанных.Добавить(ОбъектXDTO[ИмяСвойства]);
		
	КонецЕсли;
	
	Возврат МассивДанных;
	
КонецФункции

Функция ЗначениеXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеПоУмолчанию =  Неопределено)
	
	Значение = ЗначениеПоУмолчанию;
	Свойство = ОбъектXDTO.Свойства().Получить(ИмяСвойства);
	
	Если Свойство <> Неопределено И ОбъектXDTO.Установлено(Свойство) 
			И ТипЗнч(ОбъектXDTO[ИмяСвойства]) <> Тип("ОбъектXDTO") Тогда
		Значение = ОбъектXDTO[ИмяСвойства];
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область Вспомогательные

Функция ПолучитьСтруктуруСписковМетодикИзФайлаСервер(ФайлОписания)
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ФайлОписания);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Чтение.Закрыть();
	
	Возврат ПолучитьСтруктуруСписковМетодикСервер(ОбъектXDTO);
	
КонецФункции

Функция ПолучитьСтруктуруСписковМетодикСервер(ОбъектXDTO) Экспорт
	
	СтруктураСписков = Новый Структура();
	СтруктураСписков.Вставить("МассивГрупп", Новый Массив());
	СтруктураСписков.Вставить("МассивМетодик", Новый Массив());
	
	МассивГрупп = ПолучитьМассивИзСпискаXDTO(ОбъектXDTO, "GroupsList");
	Для Каждого ОбъектXDTOГруппа Из МассивГрупп Цикл
		
		СтруктураСсылки = Новый Структура("Идентификатор, Наименование, РодительИдентификатор");
		
		СтруктураСсылки.Идентификатор = ЗначениеXDTO(ОбъектXDTOГруппа, "ID", "");
		СтруктураСсылки.Наименование = ЗначениеXDTO(ОбъектXDTOГруппа, "Name", "");
		СтруктураСсылки.РодительИдентификатор = ЗначениеXDTO(ОбъектXDTOГруппа, "ParentID", "");
		
		СтруктураСписков.МассивГрупп.Добавить(СтруктураСсылки);
		
	КонецЦикла;
	
	МассивМетодик = ПолучитьМассивИзСпискаXDTO(ОбъектXDTO, "MethodicsList");
	Для Каждого ОбъектXDTOМетодика Из МассивМетодик Цикл
		
		СтруктураСсылки = Новый Структура("Идентификатор, Наименование, РодительИдентификатор, Одобрено");
		
		СтруктураСсылки.Идентификатор = ЗначениеXDTO(ОбъектXDTOМетодика, "ID", "");
		СтруктураСсылки.Наименование = ЗначениеXDTO(ОбъектXDTOМетодика, "Name", "");
		СтруктураСсылки.РодительИдентификатор = ЗначениеXDTO(ОбъектXDTOМетодика, "ParentID", "");
		
		Одобрено = Неопределено;
		Попытка
			Одобрено = XMLЗначение(Тип("Дата"), ЗначениеXDTO(ОбъектXDTOМетодика, "Approved", Неопределено));
		Исключение
		КонецПопытки;
		СтруктураСсылки.Одобрено = Одобрено;
			
		СтруктураСписков.МассивМетодик.Добавить(СтруктураСсылки);
	
	КонецЦикла;
	
	Возврат СтруктураСписков;
	
КонецФункции

Процедура ОбновитьГруппыСервер(МассивГрупп)
	
	Для Каждого СтруктураГруппа Из МассивГрупп Цикл
		
		Родитель = Неопределено;
		Если ЗначениеЗаполнено(СтруктураГруппа.РодительИдентификатор) Тогда
			Родитель = Справочники.Методики.НайтиПоРеквизиту("Идентификатор", СтруктураГруппа.РодительИдентификатор);
		КонецЕсли;
		
		Группа = Справочники.Методики.НайтиПоРеквизиту("Идентификатор", СтруктураГруппа.Идентификатор);
		Если ЗначениеЗаполнено(Группа) И НЕ Группа.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектГруппа = Неопределено;
		Если ЗначениеЗаполнено(Группа) Тогда
			ОбъектГруппа = Группа.ПолучитьОбъект();
		Иначе
			ОбъектГруппа = Справочники.Методики.СоздатьГруппу();
			ОбъектГруппа.УстановитьНовыйКод("");
			ОбъектГруппа.Идентификатор = СтруктураГруппа.Идентификатор;
		КонецЕсли;
		
		ОбъектГруппа.Наименование = СтруктураГруппа.Наименование;
		ОбъектГруппа.Родитель = Родитель;
		ОбъектГруппа.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеМетодики(КаталогМетодик, СтруктураМетодика)
	
	ВременныйКаталогМетодики = Новый Файл(КаталогВременныхФайлов() + ПолучитьРазделительПутиСервера() + СтруктураМетодика.Идентификатор);
	УдалитьФайлы(ВременныйКаталогМетодики.ПолноеИмя);
	
	СоздатьКаталог(ВременныйКаталогМетодики.ПолноеИмя);
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(КаталогМетодик + ПолучитьРазделительПутиСервера() + СтруктураМетодика.Идентификатор + ".zip");
	ЧтениеZipФайла.ИзвлечьВсе(ВременныйКаталогМетодики.ПолноеИмя);
	
	СтруктураДанныхМетодики = МетодикиСервер.ПолучитьСтруктуруДанныхМетодикиИзXML(ВременныйКаталогМетодики.ПолноеИмя + ПолучитьРазделительПутиСервера() + СтруктураМетодика.Идентификатор + ".xml");
	
	Для Каждого СтруктураФайла Из СтруктураДанныхМетодики.МассивФайлов Цикл
		ДвоичныеДанные = Новый ДвоичныеДанные(ВременныйКаталогМетодики.ПолноеИмя + ПолучитьРазделительПутиСервера() + СтруктураФайла.ИмяФайла);
		АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		СтруктураФайла.Вставить("АдресХранилища", АдресХранилища);
	КонецЦикла;
	
	СтруктураДанныхМетодики.Вставить("РодительИдентификатор", СтруктураМетодика.РодительИдентификатор);
	СтруктураДанныхМетодики.Вставить("Одобрено", СтруктураМетодика.Одобрено);
	
	Возврат СтруктураДанныхМетодики;
	
КонецФункции

Процедура ОбновитьМетодикиСервер(МассивДанныхМетодик)
	
	Для Каждого СтруктураДанныхМетодики Из МассивДанныхМетодик Цикл
		Справочники.Методики.ЗагрузитьМетодикуВБазу(СтруктураДанныхМетодики, Справочники.Методики.НайтиПоРеквизиту("Идентификатор", СтруктураДанныхМетодики.РодительИдентификатор));
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПараметрыПодключенияFTP() Экспорт
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("Сервер", "localhost");
	СтруктураПараметров.Вставить("Порт", 21);
	СтруктураПараметров.Вставить("ИмяПользователя", "");
	СтруктураПараметров.Вставить("ПарольПользователя", "");
	СтруктураПараметров.Вставить("Прокси", Неопределено);
	СтруктураПараметров.Вставить("ПассивноеСоединение", Истина);
	СтруктураПараметров.Вставить("Таймаут", 30);
	СтруктураПараметров.Вставить("ЗащищенноеСоединение", Неопределено);
	СтруктураПараметров.Вставить("УровеньИспользованияЗащищенногоСоединения", УровеньИспользованияЗащищенногоСоединенияFTP.Авто);
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#КонецЕсли
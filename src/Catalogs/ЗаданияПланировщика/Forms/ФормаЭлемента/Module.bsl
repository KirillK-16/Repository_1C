
&НаКлиенте
Процедура ОбработкаРасписанияЗадания(Параметры, ДополнительныеПараметры) Экспорт
	Если Параметры <> Неопределено Тогда
		ПоместитьВХранилищеНаСервере(Параметры);
		ОбновитьТекстовоеПредставлениеРасписания();
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбновитьТекстовоеПредставлениеРасписания();
КонецПроцедуры

&НаКлиенте
Процедура ТриггерТекстомНажатие(Элемент, СтандартнаяОбработка)  
	СтандартнаяОбработка = Ложь;

	Оповещение = Новый ОписаниеОповещения("ОбработкаРасписанияЗадания", ЭтотОбъект);
	
	Расписание = ПолучитьРасписаниеИзХранилища();
	Если Расписание = Неопределено Тогда 
		Расписание = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;	
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Диалог.Показать(Оповещение);
КонецПроцедуры

&НаСервере
Процедура ПоместитьВХранилищеНаСервере(Расписание)
	ОбъектЗадания = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ЗаданияПланировщика"));
	ОбъектЗадания.Триггер = Новый ХранилищеЗначения(Расписание);
	ОбъектЗадания.Записать();
	
	ЗначениеВДанныеФормы(ОбъектЗадания, Объект);
КонецПроцедуры

&НаСервере
Функция ПолучитьРасписаниеИзХранилища()
	ОбъектЗадания = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ЗаданияПланировщика"));
	
	Расписание = ОбъектЗадания.Триггер.Получить();
	
	Возврат Расписание;
КонецФункции	

&НаСервере
Процедура ОбновитьТекстовоеПредставлениеРасписания()
	Расписание = ПолучитьРасписаниеИзХранилища();
	Если Расписание = Неопределено Тогда
		ТриггерТекстом = НСтр("ru='<расписание не задано>'");
	Иначе
		ТриггерТекстом = Расписание;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ЕдиницыАвтоматизацииПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ЕдиницыАвтоматизации.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		РаботаСоСценариямиАвтоматизацииКлиент.ИзменитьОтборДинамическогоСписка(ЖурналВыполнения, "Агент", ТекДанные.Агент);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтборЖурналаВыполнения(ИмяПоляКомпоновки, ПравоеЗначение)
	Для Каждого ЭлементОтбора Из ЖурналВыполнения.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновки) Тогда
			ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;			
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// отбор по заданию
	ЭлементОтбораЗадание = ЖурналВыполнения.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораЗадание.Использование = Истина;
	ЭлементОтбораЗадание.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораЗадание.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаданиеПланировщика");
	ЭлементОтбораЗадание.ПравоеЗначение = Объект.Ссылка;
	
	// отбор по агенту
	ЭлементОтбораАгент = ЖурналВыполнения.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораАгент.Использование = Истина;
	ЭлементОтбораАгент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораАгент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Агент");
	ЭлементОтбораАгент.ПравоеЗначение = ПредопределенноеЗначение("Справочник.АгентыКИП.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадание(Команда)
	ВыделенныеСтроки = Элементы.ЕдиницыАвтоматизации.ВыделенныеСтроки;
	ЗапуститьЗаданияПоВыбраннымАгентаНаСервере(ВыделенныеСтроки);
КонецПроцедуры

&НаСервере
Процедура ЗапуститьЗаданияПоВыбраннымАгентаНаСервере(ВыбранныеАгенты)
	Для Каждого СтрокаАгента Из ВыбранныеАгенты Цикл
		РаботаСоСценариямиАвтоматизацииВзаимодействиеСАгентом.ЗапуститьЗаданияПланировщикаПоРасписанию(Объект.ЕдиницыАвтоматизации[СтрокаАгента].Агент, Ложь);
	КонецЦикла; 
КонецПроцедуры	

&НаКлиенте
Процедура КонтурАдминистрированияПриИзменении(Элемент)
	ИзменитьОтборЖурналаВыполнения("КонтурАдминистрирования", Объект.КонтурАдминистрирования);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Команда)
	Для каждого Строка Из Объект.ЕдиницыАвтоматизации Цикл
		Строка.Запущено = Истина;
	КонецЦикла;	
	Модифицированность  = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлаги(Команда)
	Для каждого Строка Из Объект.ЕдиницыАвтоматизации Цикл
		Строка.Запущено = Ложь;
	КонецЦикла;	
	Модифицированность  = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕдиницыАвтоматизацииПередУдалениемНаСервере(Агент, ЗаданиеПланировщика)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЖурналВыполненияЗаданийПланировщика.Агент КАК Агент
	                      |ИЗ
	                      |	РегистрСведений.ЖурналВыполненияЗаданийПланировщика КАК ЖурналВыполненияЗаданийПланировщика
	                      |ГДЕ
	                      |	ЖурналВыполненияЗаданийПланировщика.Агент = &Агент
	                      |	И ЖурналВыполненияЗаданийПланировщика.ЗаданиеПланировщика = &ЗаданиеПланировщика");
	Запрос.УстановитьПараметр("Агент", Агент);
	Запрос.УстановитьПараметр("ЗаданиеПланировщика", ЗаданиеПланировщика);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Пустой();
КонецФункции

&НаКлиенте
Процедура ЕдиницыАвтоматизацииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	Выделенные = Элементы.ЕдиницыАвтоматизации.ВыделенныеСтроки;
	КолВо = Выделенные.Количество();
	Для й = 1 По КолВо Цикл
		Удалять = ЕдиницыАвтоматизацииПередУдалениемНаСервере(Объект.ЕдиницыАвтоматизации[Выделенные[КолВо-й]].Агент, Объект.Ссылка);
		Если Удалять Тогда
			Объект.ЕдиницыАвтоматизации.Удалить(Выделенные[КолВо-й]);
		Иначе
			Объект.ЕдиницыАвтоматизации[Выделенные[КолВо-й]].Запущено = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru='С элементов, по которым были запуски заданий, вместо удаления снят признак запуска'");
	
	Сообщение.Сообщить();
КонецПроцедуры


#Область ПеременныеНаКлиенте

&НаКлиенте
Перем ПараметрыКонтроляЕстьРедактирование, ПараметрыКонтроляПередНачаломИзмененияПрограммно;

&НаКлиенте
Перем СписокЕстьРедактирование, ПредПараметр, ПредЭлементИмя, ПредПараметрБыстроеРедактирование;

#КонецОбласти

#Область ПереопределяемыеПроцедурыИФункции

&НаСервере
Функция ПолучитьОбъектыЭлементовПлощадки()
    
    Возврат Справочники.ПлощадкиЭксплуатации.ПолучитьРабочиеСерверы1С(ЭтотОбъект.Параметры.ЭлементыПлощадки);
    
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыКонтроля()
    
    ДобавитьПараметр("ДиапазоныПортов", "Диапазоны IP портов", Неопределено, "Строка");
    ДобавитьПараметр("МаксимальныйОбъемПамятиРабочихПроцессов", "Максимальный объем памяти рабочих процессов, байт", Неопределено, "Число");
    ДобавитьПараметр("БезопасныйРасходПамятиЗаОдинВызов", "Безопасный расход памяти за один вызов, байт", Неопределено, "Число");
    ДобавитьПараметр("ОбъемПамятиРабочихПроцессовДоКоторогоСерверСчитаетсяПроизводительным", "Объем памяти рабочих процессов до которого сервер считается производительным, байт.", Неопределено, "Число");
    ДобавитьПараметр("КоличествоИбНаПроцесс", "Количество ИБ на процесс", Неопределено, "Число");
    ДобавитьПараметр("КоличествоСоединенийНаПроцесс", "Количество соединений на процесс", Неопределено, "Число");
    ДобавитьПараметр("МенеджерНаКаждыйСервис", "Менеджер на каждый сервис", Неопределено, "Булево");
    ДобавитьПараметр("ЦентральныйСервер", "Центральный сервер", Неопределено, "Булево");
            
КонецПроцедуры

&НаСервере
Функция ТекстЗапроса()
    
    ТекстЗапроса = "
    |ВЫБРАТЬ
    |   ПараметрыРабочихСерверов.ОбъектКонтроля КАК Ссылка,
    |   ОбъектыКонтроля.Наименование КАК Наименование,
    |";
    
    Для Каждого ТекПараметр Из ПараметрыКонтроля Цикл
        
        ТекстЗапроса = ТекстЗапроса + Символы.Таб + "ПараметрыРабочихСерверов." + ТекПараметр.Параметр + ",
        |   ЛОЖЬ КАК Контроль" + ТекПараметр.Параметр + ",
        |";
                
    КонецЦикла;
    
    ИндексЗапятая = СтрНайти(ТекстЗапроса, ",", НаправлениеПоиска.СКонца) - 1;
        
    ТекстЗапроса = Лев(ТекстЗапроса, ИндексЗапятая) + "
    |ИЗ
    |   РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ОбъектыКонтроля КАК ОбъектыКонтроля
    |ПО
    |   ОбъектыКонтроля.Ссылка = ПараметрыРабочихСерверов.ОбъектКонтроля
    |";
    
    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
        
    Возврат ТекстЗапроса;
    
КонецФункции

&НаСервере
Процедура УстановитьОграниченияПолейОтбора(НаборДанных)
    
    // см. пример в форме ФормаКонтрольПараметровКластеры1С
    
КонецПроцедуры

&НаСервере
Процедура КонвертироватьДанные(ТЗнБуфер)
    
     // см. пример в форме ФормаКонтрольПараметровКластеры1С
    
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияПереопределяемая()
    
    МассивСтрок = Новый Массив;
    МассивСтрок.Добавить(ЭтотОбъект.Список[0]);
    ТЗнБуфер = ЭтотОбъект.Список.Выгрузить(МассивСтрок);
        
    Для Каждого ТекКолонка Из ТЗнБуфер.Колонки Цикл
        
        Если СтрНачинаетсяС(ТекКолонка.Имя, "_") Тогда
            
            ИндексСсылки = Число(СтрЗаменить(ТекКолонка.Имя, "_", ""));
            
            ТекРабочийСервер = ЭтотОбъект.Ссылки[ИндексСсылки];
            
            ПараметрыКонтроляРабочегоСервера = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(ТекРабочийСервер.Значение);
            НастройкиКонтроляРабочегоСервера = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(ТекРабочийСервер.Значение);
            
            Для Каждого ТекСтрока Из ЭтотОбъект.Список Цикл
                
                Если ТекСтрока.Редактировать Тогда
                    
                    Параметр = ТекСтрока.Параметр;
                    ЭтоКонтроль = СтрНачинаетсяС(Параметр, "Контроль");
                    
                    Если ЭтоКонтроль Тогда
                        
                        НастройкиКонтроляРабочегоСервера[СтрЗаменить(Параметр, "Контроль", "")] = ТекСтрока[ТекКолонка.Имя]; 
                        
                    Иначе
                        
                        ПараметрыКонтроляРабочегоСервера[ТекСтрока.Параметр] = ТекСтрока[ТекКолонка.Имя];
                                                
                    КонецЕсли;
                    
                КонецЕсли;
                
            КонецЦикла;
            
            РегистрыСведений.ПараметрыРабочихСерверов.ЗаписатьНастройки(ТекРабочийСервер.Значение, ПараметрыКонтроляРабочегоСервера);
            РегистрыСведений.КонтрольПараметровОбъектов.ЗаписатьНастройки(ТекРабочийСервер.Значение, НастройкиКонтроляРабочегоСервера);
            
        КонецЕсли;
        
    КонецЦикла;
        
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Если ЭтотОбъект.Параметры.Свойство("ЭлементыПлощадки") Тогда
        
        СсылкиМассив = ПолучитьОбъектыЭлементовПлощадки();
        Ссылки = Новый СписокЗначений;
        Ссылки.ЗагрузитьЗначения(СсылкиМассив);
        УстановитьОтборСсылки(Ссылки);
       
    КонецЕсли;
    
    ЗаполнитьПараметрыКонтроля();
    
    ЗаполнитьСписок();
    
    НаборДанных = ИнициализироватьКомпоновщик();
    УстановитьОграниченияПолейОтбора(НаборДанных);
    
    УстановитьОтбор();
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    ПараметрыКонтроляЕстьРедактирование = Ложь;
    ПараметрыКонтроляПередНачаломИзмененияПрограммно = Ложь;
    СписокЕстьРедактирование = Ложь;
    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
    
    Если НЕ ЗавершениеРаботы И Модифицированность Тогда
        
        ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект);
        ПоказатьВопрос(ОписаниеОповещения, "Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
        
        Отказ = Истина;
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьВсе(Команда)
    
    Для Каждого ТекДанные Из ЭтотОбъект.Список Цикл
        ТекДанные.Редактировать = Истина;
    КонецЦикла;
                
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
    
    Для Каждого ТекДанные Из ЭтотОбъект.Список Цикл
        ТекДанные.Редактировать = Ложь;
    КонецЦикла;
        
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
    
    ЗаписатьИзменения();
    ЭтотОбъект.Закрыть();
    
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
    ЗаписатьИзменения();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЗначению(Команда)
    
    Если Модифицированность Тогда
        ОписаниеОповещения = Новый ОписаниеОповещения("ОтборПоЗначениюЗавершение", ЭтотОбъект);
        ПоказатьВопрос(ОписаниеОповещения, "Все изменения будут потеряны! Продолжить?", РежимДиалогаВопрос.ДаНет);
    Иначе
        ОтборПоЗначениюОбщий();
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбранноеВсем(Команда)
    
    ТекущиеДанные = Элементы.Список.ТекущиеДанные;
    Параметр = СтрЗаменить(Элементы.Список.ТекущийЭлемент.Имя, "Список", "");
    
    Значение = ТекущиеДанные[Параметр];
    
    Индекс = 0;
    Выполнять = Истина;
    Пока Выполнять Цикл
        
        Имя = "_" + Формат(Индекс, "ЧН=0; ЧГ=0");
        Выполнять = ТекущиеДанные.Свойство(Имя);
        Если Выполнять Тогда
            ТекущиеДанные[Имя] = Значение;
        КонецЕсли;
        
        Индекс = Индекс + 1;
        
    КонецЦикла;
    
    Модифицированность = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтборы(Команда)
    
    Если Модифицированность Тогда
        ОписаниеОповещения = Новый ОписаниеОповещения("ОтключитьОтборыЗавершение", ЭтотОбъект);
        ПоказатьВопрос(ОписаниеОповещения, "Все изменения будут потеряны! Продолжить?", РежимДиалогаВопрос.ДаНет);
    Иначе
        ОтключитьОтборыНаСервере();
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПараметрыЗаписиКонтрольПриИзменении(Элемент)
    
    ТекДанные = ЭтотОбъект.Элементы.ПараметрыКонтроля.ТекущиеДанные;
    
    ПараметрыКонтроляЕстьРедактирование = Ложь;
        
    Если ТекДанные.ОтборКонтроль = "Отключен" Тогда
        ТекДанные.ОтборКонтроль = "Равно";
    КонецЕсли;
    Элементы.ПараметрыЗаписиКонтроль.СписокВыбора.Очистить();
    
    ИзменитьОтборБыстрый(ТекДанные, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиПараметрЗначениеПриИзменении(Элемент)
    
    ТекДанные = ЭтотОбъект.Элементы.ПараметрыКонтроля.ТекущиеДанные;
    
    ПараметрыКонтроляЕстьРедактирование = Ложь;
    
    Если ТекДанные.ПараметрОтбор = "Отключен" Тогда
        ТекДанные.ПараметрОтбор = "Равно";
    КонецЕсли;
    
    ИзменитьОтборБыстрый(ТекДанные, Ложь);
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКонтроляПриАктивизацииСтроки(Элемент)
    
    ТекДанные = ЭтотОбъект.Элементы.ПараметрыКонтроля.ТекущиеДанные;
    
    Если ТекДанные.СписокВыбора.Количество() > 0 Тогда
        
        Элементы.ПараметрыЗаписиПараметрЗначение.РежимВыбораИзСписка = Истина;
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Очистить();
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.ЗагрузитьЗначения(ТекДанные.СписокВыбора.ВыгрузитьЗначения());
        
    Иначе
        
        Элементы.ПараметрыЗаписиПараметрЗначение.РежимВыбораИзСписка = Ложь;
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Очистить();
        
    КонецЕсли;
    
    Если ТекДанные.ТипСтр = "Число" Тогда
        
        СписокВыбора = Элементы.ПараметрыЗаписиПараметрОтбор.СписокВыбора;
        СписокВыбора.Очистить();
        СписокВыбора.Добавить("Равно");
        СписокВыбора.Добавить("Не Равно");
        СписокВыбора.Добавить("Меньше");
        СписокВыбора.Добавить("Меньше или равно");
        СписокВыбора.Добавить("Больше");
        СписокВыбора.Добавить("Больше или равно");
        СписокВыбора.Добавить("Отключен");
        
    ИначеЕсли ТекДанные.ТипСтр = "Дата" Тогда
        
        СписокВыбора = Элементы.ПараметрыЗаписиПараметрОтбор.СписокВыбора;
        СписокВыбора.Очистить();
        СписокВыбора.Добавить("Равно");
        СписокВыбора.Добавить("Не Равно");
        СписокВыбора.Добавить("Меньше");
        СписокВыбора.Добавить("Меньше или равно");
        СписокВыбора.Добавить("Больше");
        СписокВыбора.Добавить("Больше или равно");
        СписокВыбора.Добавить("Отключен");
        
    Иначе
        
        СписокВыбора = Элементы.ПараметрыЗаписиПараметрОтбор.СписокВыбора;
        СписокВыбора.Очистить();
        СписокВыбора.Добавить("Равно");
        СписокВыбора.Добавить("Не Равно");
        СписокВыбора.Добавить("Отключен");
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиОтборКонтрольПриИзменении(Элемент)
    
    ТекДанные = Элементы.ПараметрыКонтроля.ТекущиеДанные;
    
    ПараметрыКонтроляЕстьРедактирование = Ложь;
    
    Если ТекДанные.ОтборКонтроль = "Отключен" Тогда
        ТекДанные.Контроль = Неопределено;
    КонецЕсли;
    
    ИзменитьОтборБыстрый(ТекДанные, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
    УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиПараметрОтборПриИзменении(Элемент)
    
    ТекДанные = Элементы.ПараметрыКонтроля.ТекущиеДанные;
    
    ПараметрыКонтроляЕстьРедактирование = Ложь;
    
    Если ТекДанные.ПараметрОтбор = "Отключен" Тогда
        ТекДанные.ПараметрЗначение = Неопределено;
    КонецЕсли;
        
    ИзменитьОтборБыстрый(ТекДанные, Ложь);
    
КонецПроцедуры

&НаКлиенте
Процедура РасширенныеНастройкиОтбораПриИзменении(Элемент)
    
    Элементы.ПараметрыКонтроляГруппаОтборКонтроль.Видимость = НЕ ЭтотОбъект.РасширенныеНастройкиОтбора;
    Элементы.ПараметрыКонтроляГруппаОтборЗначение.Видимость = НЕ ЭтотОбъект.РасширенныеНастройкиОтбора;
    Элементы.КомпоновщикНастройкиОтбор.Видимость = ЭтотОбъект.РасширенныеНастройкиОтбора;
    
    Если НЕ ЭтотОбъект.РасширенныеНастройкиОтбора Тогда
        ЭтотОбъект.СсылкиВсе.ЗагрузитьЗначения(ЭтотОбъект.Ссылки.ВыгрузитьЗначения());
        РасширенныеНастройкиОтбораПриИзмененииНаСервере();
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКонтроляПередНачаломИзменения(Элемент, Отказ)
    
    Если Модифицированность И НЕ ПараметрыКонтроляПередНачаломИзмененияПрограммно Тогда
        
        ДополнительныеПараметры = Новый Структура("Элемент", Элемент);
        ОписаниеОповещения = Новый ОписаниеОповещения("ПараметрыКонтроляПередНачаломИзмененияВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры);
        ПоказатьВопрос(ОписаниеОповещения, "Все изменения будут потеряны! Продолжить?", РежимДиалогаВопрос.ДаНет);
        Отказ = Истина;
        
    КонецЕсли;
    
    ПараметрыКонтроляПередНачаломИзмененияПрограммно = Ложь;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКонтроляПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    
    ПараметрыКонтроляЕстьРедактирование = Истина;
    
    ТекДанные = ЭтотОбъект.Элементы.ПараметрыКонтроля.ТекущиеДанные;
    ТекущийЭлементИмя = ЭтотОбъект.Элементы.ПараметрыКонтроля.ТекущийЭлемент.Имя;
    
    Если ТекущийЭлементИмя = "ПараметрыЗаписиПараметрЗначение" И ТекДанные.ТипСтр = "Число" И ТекДанные.ПараметрЗначение = Неопределено Тогда
        ТекДанные.ПараметрЗначение = 0;
    КонецЕсли;
    
    Если ТекущийЭлементИмя = "ПараметрыЗаписиКонтроль" И ТекДанные.Контроль = Неопределено Тогда
        ТекДанные.Контроль = Истина;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКонтроляПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
    
    ПараметрыКонтроляЕстьРедактирование = Ложь;
    
    ТекДанные = ЭтотОбъект.Элементы.ПараметрыКонтроля.ТекущиеДанные;
    ТекущийЭлементИмя = ЭтотОбъект.Элементы.ПараметрыКонтроля.ТекущийЭлемент.Имя;
    
    Если ТекущийЭлементИмя = "ПараметрыЗаписиПараметрЗначение" И ТекДанные.ПараметрОтбор = "Отключен" Тогда
        
        Если ОтменаРедактирования Тогда
            ТекДанные.ПараметрЗначение = Неопределено;
        Иначе
            ТекДанные.ПараметрОтбор = "Равно";
            ИзменитьОтборБыстрый(ТекДанные, Ложь);
        КонецЕсли;
        
    КонецЕсли;
    
    Если ОтменаРедактирования И ТекДанные.ПараметрОтбор = "Отключен" Тогда
        ТекДанные.ПараметрЗначение = Неопределено;
        ИзменитьОтборБыстрый(ТекДанные, Ложь);
    КонецЕсли;
    
    Если ОтменаРедактирования И ТекДанные.ОтборКонтроль = "Отключен" Тогда
        ТекДанные.Контроль = Неопределено;
        ИзменитьОтборБыстрый(ТекДанные, Истина);
    КонецЕсли;
    
    Если НЕ ОтменаРедактирования И ТекДанные.ОтборКонтроль = "Отключен" И ТекДанные.Контроль <> Неопределено Тогда
        ТекДанные.ОтборКонтроль = "Равно";
        ИзменитьОтборБыстрый(ТекДанные, Истина);
    КонецЕсли;
            
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКонтроляПриАктивизацииЯчейки(Элемент)
    
    Если ПараметрыКонтроляЕстьРедактирование Тогда
        Элементы.ПараметрыКонтроля.ЗакончитьРедактированиеСтроки(Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииЯчейки(Элемент)
            
    ТекДанные = Элементы.Список.ТекущиеДанные;
    
    Если ТекДанные <> Неопределено Тогда
        
        ТекЭлементИмя = Элементы.Список.ТекущийЭлемент.Имя;
        
        Элементы.Список.ЗакончитьРедактированиеСтроки(Ложь);
        
        Если ТекЭлементИмя <> "СписокРедактировать" Тогда
            
            Если ТекДанные.Параметр = "ЗащищенноеСоединение" И (СтрНачинаетсяС(СтрЗаменить(ТекЭлементИмя, "Список", ""), "_") ИЛИ ТекЭлементИмя = "СписокПараметрБыстроеРедактирование") Тогда
                Элементы[ТекЭлементИмя].РежимВыбораИзСписка = Истина;
                СписокВыбора = Элементы[ТекЭлементИмя].СписокВыбора;
                СписокВыбора.Очистить();
                СписокВыбора.Добавить("выключено");
                СписокВыбора.Добавить("только соединение");
                СписокВыбора.Добавить("постоянно");
            ИначеЕсли ТекДанные.Параметр = "РежимРаспределенияНагрузки" И (СтрНачинаетсяС(СтрЗаменить(ТекЭлементИмя, "Список", ""), "_") ИЛИ ТекЭлементИмя = "СписокПараметрБыстроеРедактирование") Тогда
                Элементы[ТекЭлементИмя].РежимВыбораИзСписка = Истина;
                СписокВыбора = Элементы[ТекЭлементИмя].СписокВыбора;
                СписокВыбора.Очистить();
                СписокВыбора.Добавить("Приоритет по производительности");
                СписокВыбора.Добавить("Приоритет по памяти");
            Иначе
                Элементы[ТекЭлементИмя].РежимВыбораИзСписка = Ложь;
                СписокВыбора = Элементы[ТекЭлементИмя].СписокВыбора;
                СписокВыбора.Очистить();
            КонецЕсли;
            
        КонецЕсли;
        
        ИмяРеквизита = СтрЗаменить(ТекЭлементИмя, "Список", "");
        
        Если Элементы[ТекЭлементИмя].Вид = ВидПоляФормы.ПолеВвода Тогда
            Если ТипЗнч(ТекДанные[ИмяРеквизита]) = Тип("Булево") Тогда
                Элементы[ТекЭлементИмя].РедактированиеТекста = Ложь;
            Иначе
                Элементы[ТекЭлементИмя].РедактированиеТекста = Истина;
            КонецЕсли;
        КонецЕсли;
                
    КонецЕсли;
            
КонецПроцедуры

&НаКлиенте
Процедура СписокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
   
    ТекДанные = Элементы.Список.ТекущиеДанные;
    ТекЭлементИмя = Элементы.Список.ТекущийЭлемент.Имя;
    
    Если ТекЭлементИмя = "СписокПараметрБыстроеРедактирование" Тогда
        ПредПараметрБыстроеРедактирование = ТекДанные.ПараметрБыстроеРедактирование; 
    КонецЕсли;
            
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
    
    ТекДанные = Элементы.Список.ТекущиеДанные;
    ТекЭлементИмя = Элементы.Список.ТекущийЭлемент.Имя;
    
    Если ТекЭлементИмя = "СписокПараметрБыстроеРедактирование" Тогда
        ПредПараметрБыстроеРедактирование = ТекДанные.ПараметрБыстроеРедактирование;
    КонецЕсли;
    
    Модифицированность = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура СписокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
    
    Если НЕ ОтменаРедактирования И ПредПараметрБыстроеРедактирование <> Неопределено Тогда
        
        ТекДанные = Элементы.Список.ТекущиеДанные;
        
        Индекс = 0;
        Выполнять = Истина;
        
        Пока Выполнять Цикл
            
            Имя = "_" + Формат(Индекс, "ЧН=0; ЧГ=0");
            Выполнять = ТекДанные.Свойство(Имя);
            
            Если Выполнять Тогда
                ТекДанные[Имя] = ПредПараметрБыстроеРедактирование; 
            КонецЕсли;
            
            Индекс = Индекс + 1;
            
        КонецЦикла;
        
        ПредПараметрБыстроеРедактирование = Неопределено;
        
        Модифицированность = Истина;
        
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииПоля(Элемент)
    
    ТекДанные = Элементы.Список.ТекущиеДанные;
    
    Параметр = СтрЗаменить(Элементы.Список.ТекущийЭлемент.Имя, "Список", "");
    
    Если НЕ ТекДанные.Редактировать ИЛИ Параметр = "ПараметрПредставление" ИЛИ Параметр = "Редактировать" Тогда
        Элементы.СписокКонтекстноеМенюУстановитьВыбранноеВсем.Доступность = Ложь;
    Иначе
        Элементы.СписокКонтекстноеМенюУстановитьВыбранноеВсем.Доступность = Истина;
    КонецЕсли;
    
    Если Параметр = "ПараметрПредставление" ИЛИ Параметр = "Редактировать" ИЛИ Параметр = "ПараметрБыстроеРедактирование" Тогда
        Элементы.СписокКонтекстноеМенюОтборПоЗначению.Доступность = Ложь;
    Иначе
        Элементы.СписокКонтекстноеМенюОтборПоЗначению.Доступность = Истина;        
    КонецЕсли;
            
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменитьОтборБыстрый(ТекДанные, Контроль)
    
    Если Контроль Тогда
        ПараметрыОтбора = Новый Структура;
        ПараметрыОтбора.Вставить("ЛевоеЗначение", "Контроль" + ТекДанные.Параметр);
        ПараметрыОтбора.Вставить("ВидСравнения", ТекДанные.ОтборКонтроль);                      
        ПараметрыОтбора.Вставить("ПравоеЗначение", ТекДанные.Контроль);
    Иначе
        ПараметрыОтбора = Новый Структура;
        ПараметрыОтбора.Вставить("ЛевоеЗначение", ТекДанные.Параметр);
        ПараметрыОтбора.Вставить("ВидСравнения", ТекДанные.ПараметрОтбор);                      
        ПараметрыОтбора.Вставить("ПравоеЗначение", ТекДанные.ПараметрЗначение);
    КонецЕсли;
        
    ИзменитьОтбор(ПараметрыОтбора);
    
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметр(Параметр, ПараметрПредставление, ПараметрЗначение, ТипСтр, СписокВыбора = Неопределено)
    
    НовСтрока = ЭтотОбъект.ПараметрыКонтроля.Добавить();
    НовСтрока.Параметр = Параметр;
    НовСтрока.ПараметрПредставление = ПараметрПредставление;
    НовСтрока.ПараметрЗначение = ПараметрЗначение;
    НовСтрока.ОтборКонтроль = "Отключен";
    НовСтрока.Контроль = Неопределено;
    НовСтрока.ПараметрОтбор = "Отключен";
    НовСтрока.ТипСтр = ТипСтр;
    Если СписокВыбора = Неопределено Тогда
        НовСтрока.СписокВыбора = Новый СписокЗначений;
    Иначе
        НовСтрока.СписокВыбора = СписокВыбора;
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Функция ИнициализироватьКомпоновщик()
    
    СКД = Новый СхемаКомпоновкиДанных();
	ИсточникСКД = СКД.ИсточникиДанных.Добавить();
	ИсточникСКД.Имя = "ИсточникДанных1";
	ИсточникСКД.ТипИсточникаДанных = "local";
    
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    НаборДанных.ИмяОбъекта = "НаборДанных1";
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Ссылка";
    Поле.ПутьКДанным = "Ссылка";
    Поле.Заголовок = "Ссылка";
    Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля");
    Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Наименование";
    Поле.ПутьКДанным = "Наименование";
    Поле.Заголовок = "Наименование";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка");
        
    Для Каждого ТекПараметр Из ПараметрыКонтроля Цикл
        ДобавитьПолеНабораДанныхСКД(НаборДанных, ТекПараметр);
    КонецЦикла;
                    
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, ЭтотОбъект.УникальныйИдентификатор);
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    
    ГруппировкаНастроек = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
        
    Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Использование = Истина;
    ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
    
    Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Использование = Истина;
    ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Наименование");

    Для Каждого ТекПараметр Из ПараметрыКонтроля Цикл
        
        Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле.Использование = Истина;
        ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ТекПараметр.Параметр);
        
        Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле.Использование = Истина;
        ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Контроль" + ТекПараметр.Параметр);
                
    КонецЦикла;
    
    Возврат НаборДанных; 
    
КонецФункции

&НаСервере
Процедура ДобавитьПолеНабораДанныхСКД(НаборДанных, ТекПараметр)
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = ТекПараметр.Параметр;
    Поле.ПутьКДанным = ТекПараметр.Параметр;
    Поле.Заголовок = ТекПараметр.ПараметрПредставление;
    
    Типы = Новый Массив;
    Если ТекПараметр.ТипСтр = "Строка" Тогда
        Типы.Добавить(Тип("Строка"));
    ИначеЕсли ТекПараметр.ТипСтр = "Число" Тогда
        Типы.Добавить(Тип("Число"));
    ИначеЕсли ТекПараметр.ТипСтр = "Булево" Тогда
        Типы.Добавить(Тип("Булево"));
    КонецЕсли;
    
    Поле.ТипЗначения = Новый ОписаниеТипов(Типы);
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Контроль" + ТекПараметр.Параметр;
    Поле.ПутьКДанным = "Контроль" + ТекПараметр.Параметр;
    Поле.Заголовок = "Контроль для """ + ТекПараметр.ПараметрПредставление + """";
    Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
    
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
    
    КомпоновщикЗапрос = Новый КомпоновщикНастроекКомпоновкиДанных();
    СКД = Новый СхемаКомпоновкиДанных();
    
    ИсточникСКД = СКД.ИсточникиДанных.Добавить();
    ИсточникСКД.Имя = "ИсточникДанных1";
    ИсточникСКД.ТипИсточникаДанных = "local";
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанных.Запрос = ТекстЗапроса(); 
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
    КомпоновщикЗапрос.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    
    КомпоновщикЗапрос.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
    ОтключитьОтборыНеСсылка(КомпоновщикЗапрос.Настройки.Отбор);
    
    УдалитьИзВременногоХранилища(URLСхемы);
        
    ГруппировкаНастроек = КомпоновщикЗапрос.Настройки.Структура[0];
    
    Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле = КомпоновщикЗапрос.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Использование = Истина;
    ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ДанныеХранилища");
    
    ТЗнБуфер = Новый ТаблицаЗначений;
   
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
        СКД, 
        КомпоновщикЗапрос.Настройки,,,
        Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
    );
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
    ПроцессорВывода.УстановитьОбъект(ТЗнБуфер);
        
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
    
    СсылкиВсе.ЗагрузитьЗначения(ТЗнБуфер.ВыгрузитьКолонку("Ссылка"));
    
    КонвертироватьДанные(ТЗнБуфер);
    УстановитьПараметрыКонтроля(ТЗнБуфер);
                   
    СписокБуфер = Новый ТаблицаЗначений;
    
    СКД = Новый СхемаКомпоновкиДанных();
    ИсточникСКД = СКД.ИсточникиДанных.Добавить();
    ИсточникСКД.Имя = "ИсточникДанных1";
    ИсточникСКД.ТипИсточникаДанных = "local";
    
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    НаборДанных.ИмяОбъекта = "НаборДанных1";
    
    Для Каждого Колонка Из ТЗнБуфер.Колонки Цикл
        Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
        Поле.Поле = Колонка.Имя;
        Поле.ПутьКДанным = Колонка.Имя;
        Поле.Заголовок = Колонка.Заголовок;
        Поле.ТипЗначения = Колонка.ТипЗначения;
    КонецЦикла;
    
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, ЭтотОбъект.УникальныйИдентификатор);
    
    КомпоновщикБуфер = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикБуфер.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    КомпоновщикБуфер.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
        
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
        СКД, 
        КомпоновщикБуфер.Настройки,,,
        Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
    );
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, Новый Структура("НаборДанных1", ТЗнБуфер));
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
    ПроцессорВывода.УстановитьОбъект(СписокБуфер);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
    
    ЭтотОбъект.Ссылки.ЗагрузитьЗначения(СписокБуфер.ВыгрузитьКолонку("Ссылка"));
    ТранспонироватьДанные(СписокБуфер);
    
    СписокУсловноеОформление();
    
    Модифицированность = Ложь;
    
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыКонтроля(ТЗнБуфер)
    
    Кластеры1С = ТЗнБуфер.ВыгрузитьКолонку("Ссылка");
    НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройкиОбъектов(Кластеры1С);
    
    Для Каждого ТекСтрока Из ТЗнБуфер Цикл
        
        НастройкиКонтроляКластер = НастройкиКонтроля[ТекСтрока.Ссылка];
        
        Если НастройкиКонтроляКластер <> Неопределено Тогда
            
            Для Каждого ТекНастройка Из НастройкиКонтроляКластер Цикл
                ИмяКолонки = "Контроль" + ТекНастройка.Ключ;
                Если ТЗнБуфер.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
                    ТекСтрока[ИмяКолонки] = ТекНастройка.Значение;
                КонецЕсли;
            КонецЦикла;
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура СписокУсловноеОформление()
    
    ЭлементОформления = Неопределено;
    ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор("1399be2f-9b7a-452f-9f18-0d34fa8cbc01");
    
    Для Каждого ТекЭлементОформления Из ЭтотОбъект.УсловноеОформление.Элементы Цикл
        
        Если ТекЭлементОформления.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
            ЭлементОформления = ТекЭлементОформления;
            Прервать;
        КонецЕсли;
                
    КонецЦикла;
    
    Если ЭлементОформления = Неопределено Тогда
        
        ЭлементОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
        ЭлементОформления.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
        
        ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Редактировать"); // имя поля
        ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
        ЭлементОтбора.ПравоеЗначение = Ложь;
        ЭлементОтбора.Использование = Истина;
        
        ЭлементОформленияТолькоПросмотр = ЭлементОформления.Оформление.Элементы.Найти("ТолькоПросмотр"); 
        ЭлементОформленияТолькоПросмотр.Значение = Истина;
        ЭлементОформленияТолькоПросмотр.Использование = Истина;
        
        ЦветТекста = ЭлементОформления.Оформление.Элементы.Найти("ЦветТекста");
        ЦветТекста.Значение = Новый Цвет(192,192,192);
        ЦветТекста.Использование = Истина;
        
    КонецЕсли;
    
    ЭлементОформления.Поля.Элементы.Очистить();
    
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПараметрПредставление");
    ПолеОформления.Использование = Истина;
    
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПараметрБыстроеРедактирование");
    ПолеОформления.Использование = Истина;
    
    Для Индекс = 0 По ЭтотОбъект.Ссылки.Количество() - 1 Цикл
        ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
        ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Список_" + Формат(Индекс, "ЧН=0; ЧГ=0"));
        ПолеОформления.Использование = Истина;
    КонецЦикла;
            
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтбор(ПараметрыОтбора)
    
    ГруппаБыстрогоОтбора = ГруппаБыстрогоОтбора();
    ЭлементБыстрогоОтбора = ЭлементБыстрогоОтбора(ГруппаБыстрогоОтбора, ПараметрыОтбора.ЛевоеЗначение);
    
    ЭлементБыстрогоОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыОтбора.ЛевоеЗначение);
    Если ПараметрыОтбора.ВидСравнения = "Отключен" Тогда
        ЭлементБыстрогоОтбора.Использование = Ложь;
    Иначе
        Если ПараметрыОтбора.ПравоеЗначение = Неопределено Тогда
            ЭлементБыстрогоОтбора.Использование = Ложь;
        Иначе
            ЭлементБыстрогоОтбора.Использование = Истина;
        КонецЕсли;
        ЭлементБыстрогоОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрСоединить(СтрРазделить(ПараметрыОтбора.ВидСравнения, " "), "")];
    КонецЕсли;
    ЭлементБыстрогоОтбора.ПравоеЗначение = ПараметрыОтбора.ПравоеЗначение;
    Элементы.КомпоновщикНастройкиОтбор.ОбновитьТекстРедактирования();
    УстановитьОтбор();
    
КонецПроцедуры

&НаКлиенте
Функция ГруппаБыстрогоОтбора()
    
    ГруппаБыстрогоОтбора = Неопределено;
    ИдентификаторПользовательскойНастройки = "79fd7c46-6e8c-460d-bee3-aeda8963d2df";
    
    Для Каждого ТекЭлемент Из Компоновщик.Настройки.Отбор.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
            ГруппаБыстрогоОтбора = ТекЭлемент;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Если ГруппаБыстрогоОтбора = Неопределено Тогда
        
        ГруппаБыстрогоОтбора = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        ГруппаБыстрогоОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
        ГруппаБыстрогоОтбора.Использование = Истина;
        ГруппаБыстрогоОтбора.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
        
    КонецЕсли;
    
    Возврат ГруппаБыстрогоОтбора;
    
КонецФункции

&НаКлиенте
Функция ЭлементБыстрогоОтбора(ГруппаОтбора, Параметр)
    
    ЭлементБыстрогоОтбора = Неопределено;
    
    Для Каждого ТекЭлемент Из ГруппаОтбора.Элементы Цикл
        Если Строка(ТекЭлемент.ЛевоеЗначение) = Параметр Тогда
            ЭлементБыстрогоОтбора = ТекЭлемент;
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    Если ЭлементБыстрогоОтбора = Неопределено Тогда
        ЭлементБыстрогоОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    КонецЕсли;
    
    Возврат ЭлементБыстрогоОтбора;
       
КонецФункции

&НаСервере
Процедура ОтключитьОтборыНеСсылка(Отбор)
    
    Для Каждого ТекЭлемент Из Отбор.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
            Если Строка(ТекЭлемент.ЛевоеЗначение) <> "Ссылка" Тогда
                ТекЭлемент.Использование = Ложь;
            КонецЕсли;
        ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
            ОтключитьОтборыНеСсылка(ТекЭлемент);
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСсылки(Ссылки)
    
    НовЭлемент = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовЭлемент.Использование = Истина;
    НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
    НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
    НовЭлемент.ПравоеЗначение = Ссылки;
    
КонецПроцедуры

&НаСервере
Процедура СброситьОтбор()
    
    Компоновщик.Настройки.Отбор.Элементы.Очистить();
        
    УстановитьОтборСсылки(ЭтотОбъект.СсылкиВсе);
    
    Для Каждого ТекПараметр Из ЭтотОбъект.ПараметрыКонтроля Цикл
        ТекПараметр.ОтборКонтроль = "Отключен";
        ТекПараметр.Контроль = Неопределено;
        ТекПараметр.ПараметрОтбор = "Отключен";
        ТекПараметр.ПараметрЗначение = Неопределено;
    КонецЦикла;
            
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзменения()
    
    Модифицированность = Ложь;
    ЗаписатьИзмененияПереопределяемая();
    СброситьОтбор();
    УстановитьОтбор();
    
КонецПроцедуры

&НаСервере
Процедура РасширенныеНастройкиОтбораПриИзмененииНаСервере()
    
    СброситьОтбор();
    УстановитьОтбор();
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКонтроляПередНачаломИзмененияВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ПараметрыКонтроляПередНачаломИзмененияПрограммно = Истина;
        Элементы.ПараметрыКонтроля.ИзменитьСтроку();
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЗначениюОбщий()
    
    ТекущиеДанные = Элементы.Список.ТекущиеДанные;
    ТекЭлементИмя = Элементы.Список.ТекущийЭлемент.Имя;
    
    Параметр = ТекущиеДанные.Параметр;
    Значение = ТекущиеДанные[СтрЗаменить(ТекЭлементИмя, "Список", "")];
    
    ЭтоКонтроль = СтрНачинаетсяС(Параметр, "Контроль");
    
    Если ЭтоКонтроль Тогда
        Параметр = СтрЗаменить(Параметр, "Контроль", "");
    КонецЕсли;
    
    ПараметрыПоиска = Новый Структура("Параметр", Параметр);
    Строки = ЭтотОбъект.ПараметрыКонтроля.НайтиСтроки(ПараметрыПоиска);
    СтрокаПараметр = Строки[0];
    
    Если ЭтоКонтроль Тогда
        
        СтрокаПараметр["Контроль"] = Значение;
        Если СтрокаПараметр["ОтборКонтроль"] <> "Равно" Тогда
            СтрокаПараметр["ОтборКонтроль"] = "Равно"
        КонецЕсли;
        
    Иначе
        
        СтрокаПараметр["ПараметрЗначение"] = Значение;
        Если СтрокаПараметр["ПараметрОтбор"] <> "Равно" Тогда
            СтрокаПараметр["ПараметрОтбор"] = "Равно"
        КонецЕсли;
        
    КонецЕсли;
    
    ИзменитьОтборБыстрый(СтрокаПараметр, ЭтоКонтроль);
    
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЗначениюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ОтборПоЗначениюОбщий();
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЗаписатьИзменения();
        Модифицированность = Ложь;
        ЭтотОбъект.Закрыть();
    ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Модифицированность = Ложь;
        ЭтотОбъект.Закрыть();
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписок()
    
    ЭтотОбъект.Список.Очистить();
    
    Для Каждого ТекПараметр Из ЭтотОбъект.ПараметрыКонтроля Цикл
        
        НовСтрока = ЭтотОбъект.Список.Добавить();
        НовСтрока.Редактировать = Истина;
        НовСтрока.Параметр = ТекПараметр.Параметр;
        НовСтрока.ПараметрПредставление = ТекПараметр.ПараметрПредставление;
        НовСтрока.ТипСтр = ТекПараметр.ТипСтр;
        
        Если НовСтрока.ТипСтр = "Число" Тогда
            
            Если ТекПараметр.Параметр = "КоличествоИбНаПроцесс" Тогда
                НовСтрока.ПараметрБыстроеРедактирование = 8;
            ИначеЕсли ТекПараметр.Параметр = "КоличествоСоединенийНаПроцесс" Тогда
                НовСтрока.ПараметрБыстроеРедактирование = 128;
            Иначе
                НовСтрока.ПараметрБыстроеРедактирование = 0;
            КонецЕсли;
                        
        ИначеЕсли НовСтрока.ТипСтр = "Строка" Тогда
            
            Если ТекПараметр.Параметр = "ДиапазоныПортов" Тогда
                НовСтрока.ПараметрБыстроеРедактирование = "1560:1591";
            КонецЕсли;
            
        ИначеЕсли НовСтрока.ТипСтр = "Булево" Тогда
            
            НовСтрока.ПараметрБыстроеРедактирование = Ложь;
            
        КонецЕсли;
        
    КонецЦикла;
    
    Для Каждого ТекПараметр Из ЭтотОбъект.ПараметрыКонтроля Цикл
        
        НовСтрока = ЭтотОбъект.Список.Добавить();
        НовСтрока.Редактировать = Истина;
        НовСтрока.Параметр = "Контроль" + ТекПараметр.Параметр;
        НовСтрока.ПараметрПредставление = "Контроль """ + ТекПараметр.ПараметрПредставление + """";
        НовСтрока.ПараметрБыстроеРедактирование = Истина;
        НовСтрока.ТипСтр = "Булево";
        
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура ТранспонироватьДанные(Данные)
    
    Если ЭтотОбъект.Список.Количество() Тогда
        
        РеквизитыПараметров = Новый Массив;
        
        Типы = Новый Массив;
        Типы.Добавить(Тип("Строка"));
        Типы.Добавить(Тип("Число"));
        Типы.Добавить(Тип("Булево"));
        ОписаниеТипов = Новый ОписаниеТипов(Типы);
        
        МассивСтрок = Новый Массив;
        МассивСтрок.Добавить(ЭтотОбъект.Список[0]);
        ТЗнБуферУдалить = ЭтотОбъект.Список.Выгрузить(МассивСтрок);
        
        УдаляемыеРеквизиты = Новый Массив;
        УдаляемыеЭлементы = Новый Массив;
        Для Каждого ТекКолонка Из ТЗнБуферУдалить.Колонки Цикл
            
            Если СтрНачинаетсяС(ТекКолонка.Имя, "_") Тогда
                УдаляемыеРеквизиты.Добавить("Список." + ТекКолонка.Имя);
                УдаляемыеЭлементы.Добавить("Список" + ТекКолонка.Имя);
            КонецЕсли;
            
        КонецЦикла;
        
        Индекс = 0;
        МассивИмен = Новый Массив;
        Для Каждого ТекЭлемент Из Данные Цикл
            
            Имя = "_" + Формат(Индекс, "ЧН=0; ЧГ=0");
            МассивИмен.Добавить(Имя);
            РеквизитыПараметров.Добавить(Новый РеквизитФормы(Имя, ОписаниеТипов,"Список",ТекЭлемент.Ссылка));
            
            Индекс = Индекс + 1;
            
        КонецЦикла;
        
        ЭтотОбъект.ИзменитьРеквизиты(РеквизитыПараметров, УдаляемыеРеквизиты);
        
        Для Каждого ТекУдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
            
            ЭлементУдалить = Элементы.Найти(ТекУдаляемыйЭлемент);
            Если ЭлементУдалить <> Неопределено Тогда
                Элементы.Удалить(ЭлементУдалить);
            КонецЕсли;
            
        КонецЦикла;
        
        Для Каждого Имя Из МассивИмен Цикл
            
            НовыйЭлемент = Элементы.Добавить("Список" + Имя, Тип("ПолеФормы"), Элементы.Список);
            НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
            НовыйЭлемент.ВыбиратьТип = Ложь;
            НовыйЭлемент.ПутьКДанным = "Список." + Имя;
            НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
            НовыйЭлемент.Формат = "ЧН=0";
            НовыйЭлемент.ФорматРедактирования = "ЧН=0";
            НовыйЭлемент.Ширина = 15;
            НовыйЭлемент.МаксимальнаяШирина = 15;
            НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
            
        КонецЦикла;
        
        Индекс = 0;
        Для Каждого ТекЭлемент Из Данные Цикл
            
            Имя = "_" + Формат(Индекс, "ЧН=0; ЧГ=0");
            Для Каждого ТекЭлементСписка Из ЭтотОбъект.Список Цикл
                ТекЭлементСписка[Имя] = ТекЭлемент[ТекЭлементСписка.Параметр];
            КонецЦикла;
            
            Индекс = Индекс + 1;
            
        КонецЦикла;
        
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ОтключитьОтборыНаСервере()
    
    СброситьОтбор();
    УстановитьОтбор();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтборыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ОтключитьОтборыНаСервере();
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

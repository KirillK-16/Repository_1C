
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    ЗаполнитьПараметрыЗаписи();
    
    Если ЭтотОбъект.Параметры.Свойство("ЭлементыПлощадки") Тогда
        
        МассивКластеры1С = Справочники.ПлощадкиЭксплуатации.ПолучитьКластеры1С(ЭтотОбъект.Параметры.ЭлементыПлощадки);
        Кластеры1С = Новый СписокЗначений;
        Кластеры1С.ЗагрузитьЗначения(МассивКластеры1С);
        
        НовЭлемент = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        НовЭлемент.Использование = Истина;
        НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
        НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
        НовЭлемент.ПравоеЗначение = Кластеры1С;
        
    КонецЕсли;
    
    ИнициализироватьКомпоновщик();
    УстановитьОтбор();
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьВсе(Команда)
    
    Для Каждого ТекСтрока Из ЭтотОбъект.ПараметрыЗаписи Цикл
        ТекСтрока.Изменить = Истина;
        Элементы["Список" + ТекСтрока.Параметр].Видимость = Истина; 
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
    
    Для Каждого ТекСтрока Из ЭтотОбъект.ПараметрыЗаписи Цикл
        ТекСтрока.Изменить = Ложь;
        Элементы["Список" + ТекСтрока.Параметр].Видимость = Ложь; 
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
    
    ЗаписатьИзменения();
    ЭтотОбъект.Закрыть();
    
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
    ЗаписатьИзменения();
КонецПроцедуры

&НаКлиенте
Процедура НайтиОтличныеОт(Команда)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные;
    ТекДанные.ЕстьОтбор = Истина;
    УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
    
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтличныеОт(Команда)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные;
    ТекДанные.ЕстьОтбор = Ложь;
    СнятьОтборПоПараметру(ТекДанные.Параметр);
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПараметрыЗаписиПараметрЗначениеПриИзменении(Элемент)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные; 
    ЭтотОбъект[ТекДанные.Параметр] = ТекДанные.ПараметрЗначение; 
    
    Если ТекДанные.ЕстьОтбор Тогда
        УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиПараметрЗначениеПарольПриИзменении(Элемент)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные;
    
    Если ТекДанные.Параметр = "ПарольАдминистратораКластера" Тогда
        
        ТекДанные.ПараметрЗначение = ТекДанные.ПараметрЗначениеПароль;
        ЭтотОбъект[ТекДанные.Параметр] = ТекДанные.ПараметрЗначение; 
        
        Если ТекДанные.ЕстьОтбор = Истина Тогда
            УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
        КонецЕсли;
    
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиИзменитьПриИзменении(Элемент)
    
    Элементы["Список" + Элемент.Родитель.ТекущиеДанные.Параметр].Видимость = Элемент.Родитель.ТекущиеДанные.Изменить; 
    
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
    УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    ТекДанные = Элемент.ТекущиеДанные;
        
    Если Поле.Имя = "ПараметрыЗаписиЕстьОтбор" Тогда
        
        Если ТекДанные.ЕстьОтбор = Истина Тогда
            УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
        Иначе
            СнятьОтборПоПараметру(ТекДанные.Параметр);            
        КонецЕсли;
        
        Элементы.КомпоновщикНастройкиОтбор.ОбновитьТекстРедактирования();
        
        СтандартнаяОбработка = Ложь;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиПриАктивизацииСтроки(Элемент)
    
    ТекДанные = Элемент.ТекущиеДанные;
    
    Если ТекДанные.Параметр = "ТипПодключения" Тогда
        
        Элементы.ПараметрыЗаписиПараметрЗначение.РежимВыбораИзСписка = Истина;
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Добавить("RAS");
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Добавить("COM");
        Элементы.ПараметрыЗаписиПараметрЗначение.РедактированиеТекста = Ложь;
           
    Иначе
        
        Элементы.ПараметрыЗаписиПараметрЗначение.РежимВыбораИзСписка = Ложь;
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Очистить();
        Элементы.ПараметрыЗаписиПараметрЗначение.РедактированиеТекста = Истина;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиЕстьОтборПриИзменении(Элемент)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные;
    
    Если ТекДанные.ЕстьОтбор Тогда
        УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
    Иначе
        СнятьОтборПоПараметру(ТекДанные.Параметр);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПараметрыЗаписи()
    
    НастройкиПоУмолчанию = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
        
    //ДобавитьПараметр("ТипПодключения", "Тип подключения", НастройкиПоУмолчанию["ТипПодключения"]);
    ДобавитьПараметр("АдминистраторКластера", "Администратор кластера", НастройкиПоУмолчанию["АдминистраторКластера"]);
    ДобавитьПараметр("ПарольАдминистратораКластера", "Пароль", НастройкиПоУмолчанию["ПарольАдминистратораКластера"]);
    //ДобавитьПараметр("АдресСервераАдминистрирования", "Сервер администрирования", НастройкиПоУмолчанию["АдресСервераАдминистрирования"]);
    //ДобавитьПараметр("ПортСервераАдминистрирования", "Порт сервера администрирования", НастройкиПоУмолчанию["ПортСервераАдминистрирования"]);
    //ДобавитьПараметр("КаталогЗапускаСервераАдминистрирования", "Каталог клиента администрирования", НастройкиПоУмолчанию["КаталогЗапускаСервераАдминистрирования"]);
    //ДобавитьПараметр("ВерсияПлатформы", "Версия платформы", НастройкиПоУмолчанию["ВерсияПлатформы"]);
    //ДобавитьПараметр("ПортКластера", "Основной порт менеджера кластера", НастройкиПоУмолчанию["ПортКластера"]);
   
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметр(Параметр, ПараметрПредставление, ПараметрЗначение)
    
    ЭтотОбъект[Параметр] = ПараметрЗначение;
    
    НовСтрока = ЭтотОбъект.ПараметрыЗаписи.Добавить();
    НовСтрока.Изменить = Истина;
    НовСтрока.Параметр = Параметр;
    НовСтрока.ПараметрПредставление = ПараметрПредставление;
    НовСтрока.ПараметрЗначение = ПараметрЗначение;
    НовСтрока.ПараметрЗначениеПароль = ПараметрЗначение;
    НовСтрока.ЕстьОтбор = Ложь;
    
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзменения()
    
    НастройкиДляЗаписи = Новый Структура;
        
    Для Каждого ТекСтрока Из ПараметрыЗаписи Цикл
        Если ТекСтрока.Изменить Тогда
            НастройкиДляЗаписи.Вставить(ТекСтрока.Параметр, ТекСтрока.ПараметрЗначение);
        КонецЕсли;
    КонецЦикла;
    
    Кластеры1С = Новый СписокЗначений;
    Для Каждого ТекСтрока Из Список Цикл
        РегистрыСведений.ПараметрыКластеров.ЗаписатьНастройки(ТекСтрока.Ссылка, НастройкиДляЗаписи);
        Кластеры1С.Добавить(ТекСтрока.Ссылка);
    КонецЦикла;
    
    Компоновщик.Настройки.Отбор.Элементы.Очистить();
    
    Для Каждого ТекПараметр Из ПараметрыЗаписи Цикл
        ТекПараметр.ЕстьОтбор = Ложь;
    КонецЦикла;
    
    НовЭлемент = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовЭлемент.Использование = Истина;
    НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
    НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
    НовЭлемент.ПравоеЗначение = Кластеры1С;
    
    УстановитьОтбор();
    
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщик()
    
    СКД = Новый СхемаКомпоновкиДанных();
	ИсточникСКД = СКД.ИсточникиДанных.Добавить();
	ИсточникСКД.Имя = "ИсточникДанных1";
	ИсточникСКД.ТипИсточникаДанных = "local";
    
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    НаборДанных.ИмяОбъекта = "НаборДанных1";
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Ссылка";
    Поле.ПутьКДанным = "Ссылка";
    Поле.Заголовок = "Ссылка";
    Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля");
    Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Наименование";
    Поле.ПутьКДанным = "Наименование";
    Поле.Заголовок = "Наименование";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150));
        
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ТипПодключения";
    Поле.ПутьКДанным = "ТипПодключения";
    Поле.Заголовок = "Тип подключения";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(3));
    ТипыПодключения = Новый СписокЗначений;
    ТипыПодключения.Добавить("RAS");
    ТипыПодключения.Добавить("COM");
    Поле.УстановитьДоступныеЗначения(ТипыПодключения);
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "АдминистраторКластера";
    Поле.ПутьКДанным = "АдминистраторКластера";
    Поле.Заголовок = "Администратор кластера";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ПарольАдминистратораКластера";
    Поле.ПутьКДанным = "ПарольАдминистратораКластера";
    Поле.Заголовок = "Пароль администратора кластера";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "АдресСервераАдминистрирования";
    Поле.ПутьКДанным = "АдресСервераАдминистрирования";
    Поле.Заголовок = "Сервер администрирования";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ПортСервераАдминистрирования";
    Поле.ПутьКДанным = "ПортСервераАдминистрирования";
    Поле.Заголовок = "Порт сервера администрирования";
    Поле.ТипЗначения = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "КаталогЗапускаСервераАдминистрирования";
    Поле.ПутьКДанным = "КаталогЗапускаСервераАдминистрирования";
    Поле.Заголовок = "Каталог клиента администрирования";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(250));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ВерсияПлатформы";
    Поле.ПутьКДанным = "ВерсияПлатформы";
    Поле.Заголовок = "Версия платформы";
    Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВерсииПлатформы");
    Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ПортКластера";
    Поле.ПутьКДанным = "ПортКластера";
    Поле.Заголовок = "Основной порт менеджера кластера";
                
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    
    ГруппировкаНастроек = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
        
    Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Использование = Истина;
    ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
    
    Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Использование = Истина;
    ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
    
    Для Каждого ТекПараметр Из ПараметрыЗаписи Цикл
        
        Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле.Использование = Истина;
        ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ТекПараметр.Параметр);
                
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура КомпоновщикНастройкиОтборПриИзмененииНаСервере()
    
    УстановитьОтбор();
    
КонецПроцедуры

&НаКлиенте
Функция ГруппаНайтиОтличныеОт(Создать = Истина)
    
    ГруппаНайтиОтличныеОт = Неопределено;
    
    Для Каждого ТекЭлемент Из Компоновщик.Настройки.Отбор.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекЭлемент.ИдентификаторПользовательскойНастройки = "b1c27381-4a1c-4dc2-9aea-3dc9b02baa72" Тогда
            ГруппаНайтиОтличныеОт = ТекЭлемент;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Если ГруппаНайтиОтличныеОт = Неопределено И Создать Тогда
        
        ГруппаНайтиОтличныеОт = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        ГруппаНайтиОтличныеОт.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
        ГруппаНайтиОтличныеОт.Использование = Истина;
        ГруппаНайтиОтличныеОт.ИдентификаторПользовательскойНастройки = "b1c27381-4a1c-4dc2-9aea-3dc9b02baa72";
        
    КонецЕсли;
    
    Возврат ГруппаНайтиОтличныеОт;
    
КонецФункции

&НаКлиенте
Процедура УстановитьОтборПоПараметру(Параметр, ПараметрЗначение)
    
    ГруппаНайтиОтличныеОт = ГруппаНайтиОтличныеОт();
        
    ЭлементОтбора = Неопределено;
    
    Для Каждого ТекЭлемент Из ГруппаНайтиОтличныеОт.Элементы Цикл
        Если Строка(ТекЭлемент.ЛевоеЗначение) = Параметр Тогда
            ЭлементОтбора = ТекЭлемент;
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    Если ЭлементОтбора = Неопределено Тогда
        ЭлементОтбора = ГруппаНайтиОтличныеОт.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    КонецЕсли;
    
    ЭлементОтбора.Использование = Истина;
    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Параметр);
    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементОтбора.ПравоеЗначение = ПараметрЗначение;
    
    Элементы.КомпоновщикНастройкиОтбор.ОбновитьТекстРедактирования();
    
    КомпоновщикНастройкиОтборПриИзмененииНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтборПоПараметру(Параметр)
    
    ГруппаНайтиОтличныеОт = ГруппаНайтиОтличныеОт(Ложь);
    
    Если ГруппаНайтиОтличныеОт <> Неопределено Тогда
                
        ЭлементОтбора = Неопределено;
        
        Для Каждого ТекЭлемент Из ГруппаНайтиОтличныеОт.Элементы Цикл
            Если Строка(ТекЭлемент.ЛевоеЗначение) = Параметр Тогда
                ЭлементОтбора = ТекЭлемент;
                Прервать;
            КонецЕсли;
        КонецЦикла;
        
        Если ЭлементОтбора = Неопределено Тогда
            ЭлементОтбора = ГруппаНайтиОтличныеОт.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        КонецЕсли;
        
        Если ЭлементОтбора <> Неопределено Тогда
            
            ГруппаНайтиОтличныеОт.Элементы.Удалить(ЭлементОтбора);
            Элементы.КомпоновщикНастройкиОтбор.ОбновитьТекстРедактирования();
            
            Если ГруппаНайтиОтличныеОт.Элементы.Количество() = 0 Тогда
                Компоновщик.Настройки.Отбор.Элементы.Удалить(ГруппаНайтиОтличныеОт);
            КонецЕсли;
            
            КомпоновщикНастройкиОтборПриИзмененииНаСервере();
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементОтбора(ГруппаЭлементов, ИмяЭлемента)
    
    ЭлементыУдалить = Новый Массив;
    
    Для Каждого ТекЭлемент Из ГруппаЭлементов.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
            УдалитьЭлементОтбора(ТекЭлемент, ИмяЭлемента);
        Иначе
            Если Строка(ТекЭлемент.ЛевоеЗначение) = ИмяЭлемента Тогда
                ЭлементыУдалить.Добавить(ТекЭлемент);
            КонецЕсли;
        КонецЕсли;
                
    КонецЦикла;
    
    Для Каждого ТекЭлемент Из ЭлементыУдалить Цикл
        ГруппаЭлементов.Элементы.Удалить(ТекЭлемент);
    КонецЦикла;
            
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
    
    Если НЕ Компоновщик.ПолучитьНастройки().НаличиеОтбораУЭлемента(Компоновщик.ПолучитьНастройки()) Тогда
        Для Каждого ТекСтрока Из ПараметрыЗаписи Цикл
            ТекСтрока.ЕстьОтбор = Ложь;
        КонецЦикла;
    КонецЕсли;
    
    КомпоновщикЗапрос = Новый КомпоновщикНастроекКомпоновкиДанных();
    СКД = Новый СхемаКомпоновкиДанных();
    
    ИсточникСКД = СКД.ИсточникиДанных.Добавить();
    ИсточникСКД.Имя = "ИсточникДанных1";
    ИсточникСКД.ТипИсточникаДанных = "local";
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанных.Запрос = ТекстЗапроса(); 
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
    КомпоновщикЗапрос.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    КомпоновщикЗапрос.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
    УдалитьИзВременногоХранилища(URLСхемы);
    
    УдалитьЭлементОтбора(КомпоновщикЗапрос.Настройки.Отбор, "АдминистраторКластера");
    УдалитьЭлементОтбора(КомпоновщикЗапрос.Настройки.Отбор, "ПарольАдминистратораКластера");
        
    ГруппировкаНастроек = КомпоновщикЗапрос.Настройки.Структура[0];
    
    Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле = КомпоновщикЗапрос.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Использование = Истина;
    ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ДанныеХранилища");
    
    УстановитьПривилегированныйРежим(Истина);
    
    ТЗнБуфер = Новый ТаблицаЗначений;
   
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
        СКД, 
        КомпоновщикЗапрос.Настройки,,,
        Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
    );
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
    ПроцессорВывода.УстановитьОбъект(ТЗнБуфер);
        
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
    
    УстановитьПривилегированныйРежим(Ложь);
    
    Для Каждого ТекСтрока Из ТЗнБуфер Цикл
        
        Если ТекСтрока.ДанныеХранилища <> Неопределено Тогда
            ДанныеХранилища = ТекСтрока.ДанныеХранилища.Получить();
            Если ДанныеХранилища <> Неопределено Тогда
                ТекСтрока.АдминистраторКластера = ДанныеХранилища.АдминистраторКластера;
                ТекСтрока.ПарольАдминистратораКластера = ДанныеХранилища.ПарольАдминистратораКластера;
            Иначе
                ТекСтрока.АдминистраторКластера = "";
                ТекСтрока.ПарольАдминистратораКластера = "";
            КонецЕсли;
        Иначе
            ТекСтрока.АдминистраторКластера = "";
            ТекСтрока.ПарольАдминистратораКластера = "";
        КонецЕсли;
                
    КонецЦикла;
    
    СписокБуфер = Новый ТаблицаЗначений;
    
    СКД = Новый СхемаКомпоновкиДанных();
    ИсточникСКД = СКД.ИсточникиДанных.Добавить();
    ИсточникСКД.Имя = "ИсточникДанных1";
    ИсточникСКД.ТипИсточникаДанных = "local";
    
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    НаборДанных.ИмяОбъекта = "НаборДанных1";
    
    Для Каждого Колонка Из ТЗнБуфер.Колонки Цикл
        Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
        Поле.Поле = Колонка.Имя;
        Поле.ПутьКДанным = Колонка.Имя;
        Поле.Заголовок = Колонка.Заголовок;
        Поле.ТипЗначения = Колонка.ТипЗначения;
    КонецЦикла;
    
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
    
    КомпоновщикБуфер = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикБуфер.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    КомпоновщикБуфер.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
        
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
        СКД, 
        КомпоновщикБуфер.Настройки,,,
        Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
    );
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, Новый Структура("НаборДанных1", ТЗнБуфер));
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
    ПроцессорВывода.УстановитьОбъект(СписокБуфер);
    
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
    
    ЗначениеВРеквизитФормы(СписокБуфер, "Список");
        
КонецПроцедуры

&НаСервере
Функция ТекстЗапроса()
    
    ТекстЗапроса = "
    |ВЫБРАТЬ
    |   ПараметрыКластеров.ОбъектКонтроля КАК Ссылка,
    |   ПараметрыКластеров.ОбъектКонтроля.Наименование КАК Наименование,
    |   ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК АдминистраторКластера,
    |   ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ПарольАдминистратораКластера,
    |   БезопасноеХранилище.ДанныеХранилища КАК ДанныеХранилища,
    |";
    
    Для Каждого ТекПараметр Из ПараметрыЗаписи Цикл
        
        Если ТекПараметр.Параметр <> "АдминистраторКластера" И ТекПараметр.Параметр <> "ПарольАдминистратораКластера" Тогда
            ТекстЗапроса = ТекстЗапроса + " ПараметрыКластеров." + ТекПараметр.Параметр + ",";
        КонецЕсли;
        
    КонецЦикла;
    
    ИндексЗапятая = СтрНайти(ТекстЗапроса, ",", НаправлениеПоиска.СКонца) - 1;
        
    ТекстЗапроса = Лев(ТекстЗапроса, ИндексЗапятая) + "
    |ИЗ
    |   РегистрСведений.ПараметрыКластеров КАК ПараметрыКластеров
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ОбъектыКонтроля КАК ОбъектыКонтроля
    |ПО
    |   ОбъектыКонтроля.Ссылка = ПараметрыКластеров.ОбъектКонтроля 
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.БезопасноеХранилище КАК БезопасноеХранилище
    |ПО
    |   БезопасноеХранилище.ВладелецХранилища = ПараметрыКластеров.ОбъектКонтроля
    |";
    
    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
    
    УстановитьПривилегированныйРежим(Истина);
    Результат = Запрос.Выполнить();
    УстановитьПривилегированныйРежим(Ложь);
    
    Возврат ТекстЗапроса;
    
КонецФункции

#КонецОбласти

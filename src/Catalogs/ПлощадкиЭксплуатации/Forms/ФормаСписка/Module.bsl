&НаКлиенте
Перем ТекРодитель, ТекЕдиницаКонтроля;

// Параметры опроса фонового задания
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Если НЕ ЗначениеЗаполнено(Справочники.ПлощадкиЭксплуатации.НайтиПоНаименованию("Корзина", Истина, Неопределено)) Тогда
        Корзина = Справочники.ПлощадкиЭксплуатации.СоздатьЭлемент();
        Корзина.Наименование = "Корзина";
        Корзина.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.Корзина;
        Корзина.Записать();
    КонецЕсли;
    
    КорзинаСсылка = Справочники.ПлощадкиЭксплуатации.Корзина();
    
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.Кластер1С);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.КонтрольПотребленияПамяти);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.КонтрольНагрузочныхТестов);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.КонтрольРегламентныхЗаданий);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.КонтрольПодключений);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.КонтрольПроизводительности);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.ОценкаПользователей);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверыКластера1С);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.АнализВызововКластера1С);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.КонтрольУстойчивости);
    ТипыЭлементовКластера.Добавить(Перечисления.ТипЭлементаПлощадки.МониторингСистемныхОшибок);
    
    ЗаполнитьМетодикиПоПлощадкеСервер();
    
    ИнициализироватьКомпоновщик();
    
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
    
    Если ЗначениеЗаполнено(Настройки["КомпоновщикНастройки"]) Тогда
        
        Поток = Новый ЧтениеXML();
        Поток.УстановитьСтроку(Настройки["КомпоновщикНастройки"]);
        СохраненныеНастройки = СериализаторXDTO.ПрочитатьXML(Поток);
        Поток.Закрыть();
        
        ЭтотОбъект.Список.КомпоновщикНастроек.ЗагрузитьНастройки(СохраненныеНастройки);
                
    КонецЕсли;
    
    УстановкаОтбораСписка(Настройки["СтрокаПоиска"]);
    
    Компоновщик.ЗагрузитьНастройки(Список.КомпоновщикНастроек.ПолучитьНастройки());
    УдалитьСлужебныеОтборы(Компоновщик);
    
    УстановитьПометкиБыстрогоОтбора();
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    ЗначенияПоискаМассив = СтрРазделить(ЗначенияПоиска, "♂♂♂", Ложь);
    Элементы.СтрокаПоиска.СписокВыбора.Очистить();
    Для Каждого ТекЗначение Из ЗначенияПоискаМассив Цикл
        Элементы.СтрокаПоиска.СписокВыбора.Добавить(ТекЗначение);
    КонецЦикла;
    
    ПоказатьМетодикиДействие();
    РаскраситьДеревоМетодикРекурсивно(Методики);
    	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиНода(Команда)
    
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаЕдиницаМасштабирования");
    
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПлощадку(Команда)
    
    ПараметрыОткрытия = Новый Структура;
    ЗначенияЗаполнения = Новый Структура("ТипЭлемента", ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Площадка"));
    ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаЭлемента", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОборудование(Команда)
    
    ПлощадкаЭксплуатации = ПолучитьТекущуюПлощадкуЭксплуатации(); 
    
    Если ПлощадкаЭксплуатации.Тип <> ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Корзина") Тогда
        ПараметрыОткрытия = Новый Структура;
        ЗначенияЗаполнения = Новый Структура("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации.Площадка);
        ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
        
        ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОЗакрытииЭлемента", ЭтотОбъект, "Обновить");
        ОткрытьФорму("Справочник.Оборудование.Форма.ФормаЭлемента", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
    Иначе
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Добавление в ""Корзину"" запрещено!", "Список", ЭтотОбъект);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКластер1С(Команда)
    
    ПлощадкаЭксплуатации = ПолучитьТекущуюПлощадкуЭксплуатации();
    
    ПараметрыОткрытия = Новый Структура;
    ПараметрыОткрытия.Вставить("ВладелецПриОткрытии", ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.КластерСерверов1С"));
    ЗначенияЗаполнения = Новый Структура("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации.Площадка);
    ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
    
    ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОЗакрытииЭлемента", ЭтотОбъект, "Обновить");
    ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаКластер1С", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
    
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРабочийСервер1С(Команда)
    
    ПлощадкаЭксплуатации = ПолучитьТекущуюПлощадкуЭксплуатации();
    
    Кластер1С = ПолучитьКластер(Элементы.Список.ТекущиеДанные);
    
    ПараметрыОткрытия = Новый Структура;
    ПараметрыОткрытия.Вставить("ВладелецПриОткрытии", ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.РабочийСервер"));
    ЗначенияЗаполнения = Новый Структура("ПлощадкаЭксплуатации, Кластер1С", ПлощадкаЭксплуатации.Площадка, Кластер1С);
    ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
    
    ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОЗакрытииЭлемента", ЭтотОбъект, "Обновить");
    ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаРабочийСервер", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
    
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКластер(ДанныеФормыСтруктура)
    
    Кластер1С = Неопределено;
    
    Если ДанныеФормыСтруктура.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Кластер1С") Тогда
        Кластер1С = ДанныеФормыСтруктура.ЕдиницаКонтроля;
    Иначе
        Кластер1С = ПолучитьКластерНаСервере(ДанныеФормыСтруктура.Родитель);
    КонецЕсли;
    
    Возврат Кластер1С;
    
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКластерНаСервере(ЭлементПлощадки)
    
    Кластер1С = Неопределено;
    
    Если ЭлементПлощадки.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.Кластер1С Тогда
        Кластер1С = ЭлементПлощадки.ЕдиницаКонтроля;
    Иначе
        Кластер1С = ПолучитьКластерНаСервере(ЭлементПлощадки.Родитель);
    КонецЕсли;
    
    Возврат Кластер1С;
    
КонецФункции

&НаКлиенте
Процедура ДобавитьИнформационнуюБазу(Команда)
    
    ПлощадкаЭксплуатации = ПолучитьТекущуюПлощадкуЭксплуатации();
    
    Кластер1С = ПолучитьКластер(Элементы.Список.ТекущиеДанные);
        
    ПараметрыОткрытия = Новый Структура;
    ПараметрыОткрытия.Вставить("ВладелецПриОткрытии", ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.ИнформационнаяБаза"));
    ЗначенияЗаполнения = Новый Структура("ПлощадкаЭксплуатации, Кластер1С", ПлощадкаЭксплуатации.Площадка, Кластер1С);
    ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
    
    ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОЗакрытииЭлемента", ЭтотОбъект, "Обновить");
    ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаИнформационнаяБаза", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
    
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПубликацию(Команда)
    
    ПлощадкаЭксплуатации = ПолучитьТекущуюПлощадкуЭксплуатации();
    
    ПараметрыОткрытия = Новый Структура;
    ЗначенияЗаполнения = Новый Структура("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации.Площадка);
    ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
    
    ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОЗакрытииЭлемента", ЭтотОбъект, "Обновить");
    ОткрытьФорму("Справочник.Публикации.Форма.ФормаЭлемента", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
    
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМетодики(Команда)
	
	ОтображатьМетодики = НЕ ОтображатьМетодики;
	ПоказатьМетодикиДействие();
	
КонецПроцедуры

&НаКлиенте
Процедура Проверена(Команда)
	
	ТекущиеДанные = Элементы.Методики.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ОбъектКонтроля) ИЛИ ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ПровереноНаСервере(ОбъектКонтроля, ТекущиеДанные.Ссылка, НЕ ТекущиеДанные.Проверена);
	
	Элементы.Проверена.Пометка = НЕ Элементы.Проверена.Пометка;
	ТекущиеДанные.Проверена = НЕ ТекущиеДанные.Проверена;
	
	Элементы.Список.Обновить();
	
	РаскраситьДеревоМетодикРекурсивно(Методики);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	ОткрытьФорму("Справочник.Методики.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
    
    Если ОтображатьМетодики Тогда
        ЗаполнитьМетодикиПоПлощадкеСервер();
        РаскраситьДеревоМетодикРекурсивно(Методики);
    КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСДиска(Команда)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    ДиалогВыбора.Заголовок = "Выберите архив методик";
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.Фильтр = "Архивы zip(*.zip)|*.zip|Все файлы(*.*)|*.*";
    
    ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьСДискаЗавершение", ЭтаФорма, Неопределено);
	ДиалогВыбора.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИзИнтернет(Команда)
	
	Результат = ОбновитьИзИнтернетСервер();
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		
		АдресХранилища       = Результат.АдресХранилища;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;

		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		
	Иначе
		
		ОписаниеОшибки = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		Иначе
			ПоказатьОповещениеПользователя("Обновление методик завершено");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
				ОписаниеОшибки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				Иначе
					ПоказатьОповещениеПользователя("Обновление методик завершено");
				КонецЕсли;
				
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Сообщить(ПредставлениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьВсе(Команда)
    
    ТекДанные = ЭтотОбъект.Элементы.Список.ТекущиеДанные;
    ВосстановитьВсеНаСервере(ТекДанные.Ссылка);
    
    Элементы.Список.Обновить();
    
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчаниюОборудование(Команда)
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыОборудование");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчаниюКластер1С(Команда)
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыКластера1С");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчаниюПубликации(Команда)
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыПубликации");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчаниюКонтрольПамяти(Команда)
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыКонтрольПотребленияПамяти");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчаниюРабочийСервер1С(Команда)
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыРабочийСервер1С");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчаниюКонтрольУстойчивости(Команда)
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыКонтрольУстойчивости");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчаниюАнализВызововКластера1С(Команда)
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыАнализВызововКластера1С");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчаниюМониторингСистемныхОшибок(Команда)
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыМониторингСистемныхОшибок");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчаниюКонтрольПроизводительности(Команда)
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыКонтрольПроизводительности");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчаниюКонтрольПодключений(Команда)
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыКонтрольПодключений");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчаниюКонтрольРегламентныхЗаданий(Команда)
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыКонтрольРегламентныхЗаданий");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор(Команда)
    
    ПараметрыОткрытия = Новый Структура("Компоновщик", Список.КомпоновщикНастроек);   
    ОписаниеОповещенияОтбор = Новый ОписаниеОповещения("УстановитьОтборЗакрытие", ЭтотОбъект);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаОтбораПлощадки", ПараметрыОткрытия,,,,,ОписаниеОповещенияОтбор);
    
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтбор(Команда)
    СнятьОтборНаСервере(ЭтотОбъект.СтрокаПоиска);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНесколькоОборудование(Команда)
    
    ПараметрыОткрытия = Новый Структура("ЭлементыПлощадки", Элементы.Список.ВыделенныеСтроки);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаИзменитьНесколькоОборудование", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНесколькоКластеры1С(Команда)
    
    ПараметрыОткрытия = Новый Структура("ЭлементыПлощадки", Элементы.Список.ВыделенныеСтроки);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаИзменитьНесколькоКластеры1С", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПараметровКластер1С(Команда)
    
    ПараметрыОткрытия = Новый Структура("ЭлементыПлощадки", Элементы.Список.ВыделенныеСтроки);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаКонтрольПараметровКластеры1С", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПараметровРабочийСервер1С(Команда)
    
    ПараметрыОткрытия = Новый Структура("ЭлементыПлощадки", Элементы.Список.ВыделенныеСтроки);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаКонтрольПараметровРабочиеСерверы1С", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПараметровИнформационнаяБаза(Команда)
    
    ПараметрыОткрытия = Новый Структура("ЭлементыПлощадки", Элементы.Список.ВыделенныеСтроки);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаКонтрольПараметровИнформационныеБазы", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНесколькоРабочийСервер1С(Команда)
    
    ПараметрыОткрытия = Новый Структура("ЭлементыПлощадки", Элементы.Список.ВыделенныеСтроки);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаИзменитьНесколькоРабочиеСерверы1С", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНесколькоПубликации(Команда)
    
    ПараметрыОткрытия = Новый Структура("ЭлементыПлощадки", Элементы.Список.ВыделенныеСтроки);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаИзменитьНесколькоПубликации", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНесколькоКонтрольПодключений(Команда)
    
    ПараметрыОткрытия = Новый Структура("ЭлементыПлощадки", Элементы.Список.ВыделенныеСтроки);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаИзменитьНесколькоКонтрольПодключений", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНесколькоКонтрольПотребленияПамяти(Команда)
    
    ПараметрыОткрытия = Новый Структура("ЭлементыПлощадки", Элементы.Список.ВыделенныеСтроки);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаИзменитьНесколькоКонтрольПотребленияПамяти", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНесколькоКонтрольПроизводительности(Команда)
    
    ПараметрыОткрытия = Новый Структура("ЭлементыПлощадки", Элементы.Список.ВыделенныеСтроки);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаИзменитьНесколькоКонтрольПроизводительности", ПараметрыОткрытия);
        
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНесколькоКонтрольРегламентныхЗаданий(Команда)
    
    ПараметрыОткрытия = Новый Структура("ЭлементыПлощадки", Элементы.Список.ВыделенныеСтроки);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаИзменитьНесколькоКонтрольРегламентныхЗаданий", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНесколькоКонтрольУстойчивости(Команда)
    
    ПараметрыОткрытия = Новый Структура("ЭлементыПлощадки", Элементы.Список.ВыделенныеСтроки);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаИзменитьНесколькоКонтрольУстойчивости", ПараметрыОткрытия);
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборОборудование(Команда)
    
    Элементы.УстановитьОтборОборудование.Пометка = НЕ Элементы.УстановитьОтборОборудование.Пометка;
    ТипОборудование = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Оборудование");
    УстановитьБыстрыйОтборПоТипу(ТипОборудование, Элементы.УстановитьОтборОборудование.Пометка);
                
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКластеры1С(Команда)
    
    Элементы.УстановитьОтборКластеры1С.Пометка = НЕ Элементы.УстановитьОтборКластеры1С.Пометка;
    ТипОборудование = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Кластер1С");
    УстановитьБыстрыйОтборПоТипу(ТипОборудование, Элементы.УстановитьОтборКластеры1С.Пометка);
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборРабочийСервер1С(Команда)
    
    Элементы.УстановитьОтборРабочийСервер1С.Пометка = НЕ Элементы.УстановитьОтборРабочийСервер1С.Пометка;
    ТипОборудование = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.РабочийСерверКластера1С");
    УстановитьБыстрыйОтборПоТипу(ТипОборудование, Элементы.УстановитьОтборРабочийСервер1С.Пометка);
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборИнформационныеБазы(Команда)
    
    Элементы.УстановитьОтборИнформационныеБазы.Пометка = НЕ Элементы.УстановитьОтборИнформационныеБазы.Пометка;
    ТипОборудование = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ИнформационнаяБаза");
    УстановитьБыстрыйОтборПоТипу(ТипОборудование, Элементы.УстановитьОтборИнформационныеБазы.Пометка);
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПубликации(Команда)
    
    Элементы.УстановитьОтборПубликации.Пометка = НЕ Элементы.УстановитьОтборПубликации.Пометка;
    ТипОборудование = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Публикация");
    УстановитьБыстрыйОтборПоТипу(ТипОборудование, Элементы.УстановитьОтборПубликации.Пометка);
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКонтрольПодключений(Команда)
    
    Элементы.УстановитьОтборКонтрольПодключений.Пометка = НЕ Элементы.УстановитьОтборКонтрольПодключений.Пометка;
    ТипОборудование = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.КонтрольПодключений");
    УстановитьБыстрыйОтборПоТипу(ТипОборудование, Элементы.УстановитьОтборКонтрольПодключений.Пометка);
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКонтрольПотребленияПамяти(Команда)
    
    Элементы.УстановитьОтборКонтрольПотребленияПамяти.Пометка = НЕ Элементы.УстановитьОтборКонтрольПотребленияПамяти.Пометка;
    ТипОборудование = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.КонтрольПотребленияПамяти");
    УстановитьБыстрыйОтборПоТипу(ТипОборудование, Элементы.УстановитьОтборКонтрольПотребленияПамяти.Пометка);
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКонтрольПроизводительности(Команда)
    
    Элементы.УстановитьОтборКонтрольПроизводительности.Пометка = НЕ Элементы.УстановитьОтборКонтрольПроизводительности.Пометка;
    ТипОборудование = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.КонтрольПроизводительности");
    УстановитьБыстрыйОтборПоТипу(ТипОборудование, Элементы.УстановитьОтборКонтрольПроизводительности.Пометка);
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКонтрольУстойчивости(Команда)
    
    Элементы.УстановитьОтборКонтрольУстойчивости.Пометка = НЕ Элементы.УстановитьОтборКонтрольУстойчивости.Пометка;
    ТипОборудование = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.КонтрольУстойчивости");
    УстановитьБыстрыйОтборПоТипу(ТипОборудование, Элементы.УстановитьОтборКонтрольУстойчивости.Пометка);
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКонтрольРегламентныхЗаданий(Команда)
    
    Элементы.УстановитьОтборКонтрольРегламентныхЗаданий.Пометка = НЕ Элементы.УстановитьОтборКонтрольРегламентныхЗаданий.Пометка;
    ТипОборудование = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.КонтрольРегламентныхЗаданий");
    УстановитьБыстрыйОтборПоТипу(ТипОборудование, Элементы.УстановитьОтборКонтрольРегламентныхЗаданий.Пометка);
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ПроверкаСуществованияЗавершить(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найден файл: " + ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ОбновитьСДискаСервер(АдресВременногоХранилища);
	
	ПоказатьОповещениеПользователя("Обновление методик завершено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСДискаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено ИЛИ ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлМетодикСтрока = ВыбранныеФайлы[0];
	
	ОписаниеПроверкаСуществования = Новый ОписаниеОповещения("ПроверкаСуществованияЗавершить", ЭтаФорма, ФайлМетодикСтрока);
	
	ФайлМетодик = Новый Файл(ФайлМетодикСтрока);
	ФайлМетодик.НачатьПроверкуСуществования(ОписаниеПроверкаСуществования);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодикиПриАктивизацииСтроки_Подключаемый()
	
	ТекущиеДанные = Элементы.Методики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьФайлыКлиент(ТекущиеДанные.Ссылка);
	ОбновитьТекстМетодикиСервер(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    СтандартнаяОбработка = ОткрытьЭлемент(Элемент);
    
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
    
    Отказ = НЕ ОткрытьЭлемент(Элемент);
    
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
    ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиПодключаемая", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
    
    ТекущиеДанные = Элемент.ДанныеСтроки(Элемент.ТекущаяСтрока);
    Если ТекущиеДанные <> Неопределено Тогда
        
        Если ТекущиеДанные.ПометкаУдаления И ТекущиеДанные.Родитель <> ТекРодитель Тогда
            
            Если СтрНачинаетсяС(Строка(ТекРодитель), "<Объект не найден") Тогда
                Если
                    ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.MSSQL")
                    ИЛИ ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.PostgreSQL")
                    ИЛИ ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.VMware")
                    ИЛИ ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ВебСерверApache")
                    ИЛИ ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ВебСерверIIS")
                    ИЛИ ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.РабочийСервер1С")
                    ИЛИ ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ТерминальныйСервер")
                    ИЛИ ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Шлюз")
                Тогда
                    Элемент.ТекущаяСтрока = ПолучитьПлощадкуЕдиницыКонтроля(ТекЕдиницаКонтроля, "ПлощадкаЭксплуатации");
                Иначе
                    Элемент.ТекущаяСтрока = ПолучитьПлощадкуЕдиницыКонтроля(ТекЕдиницаКонтроля, "ПлощадкаДляВосстановления");
                КонецЕсли;
            Иначе
                Элемент.ТекущаяСтрока = ТекРодитель;
            КонецЕсли;
            
        КонецЕсли;
        
        ТекРодитель = ТекущиеДанные.Родитель;
        
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура МетодикиРолейРабочихСерверовПриАктивизацииСтроки(Элемент)
	
	Элементы.Проверена.Пометка = Ложь;
	
	ТекущиеДанные = Элементы.Методики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Проверена.Пометка = ТекущиеДанные.Проверена;
	
	ПодключитьОбработчикОжидания("МетодикиПриАктивизацииСтроки_Подключаемый", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    
    Если Копирование Тогда
        
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Копирование запрещено!", "Список", ЭтотОбъект);
        Отказ = Истина;
        Возврат;
        
    КонецЕсли;
    
    Если Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Площадка") Тогда
        ДобавитьПлощадку(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаОборудования") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаСУБД") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаВебСерверы") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаВиртуальныеМашины") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаРабочиеСерверы1С") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаТерминальныеСервера") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Оборудование") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.MSSQL") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.PostgreSQL") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ВебСерверApache") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ВебСерверIIS") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.VMware") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.РабочийСервер1С") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    ИначеЕсли Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ТерминальныйСервер") Тогда
        ДобавитьОборудование(Неопределено);
        Отказ = Истина;
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
    УстановкаОтбораСписка(Элементы.СтрокаПоиска.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    ПараметрыОткрытия = Новый Структура("Компоновщик", Список.КомпоновщикНастроек);   
    ОписаниеОповещенияОтбор = Новый ОписаниеОповещения("УстановитьОтборЗакрытие", ЭтотОбъект);
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаОтбораПлощадки", ПараметрыОткрытия,,,,,ОписаниеОповещенияОтбор);
    
    СтандартнаяОбработка = Ложь;
    
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
    
    Элементы.УстановитьОтборОборудование.Пометка = Ложь;
    Элементы.УстановитьОтборКластеры1С.Пометка = Ложь;
    Элементы.УстановитьОтборРабочийСервер1С.Пометка = Ложь;
    Элементы.УстановитьОтборКонтрольПодключений.Пометка = Ложь;
    Элементы.УстановитьОтборКонтрольПотребленияПамяти.Пометка = Ложь;
    Элементы.УстановитьОтборКонтрольПроизводительности.Пометка = Ложь;
    Элементы.УстановитьОтборКонтрольУстойчивости.Пометка = Ложь;
    Элементы.УстановитьОтборКонтрольРегламентныхЗаданий.Пометка = Ложь;
    
    СнятьОтборНаСервере(СтрокаПоиска);
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СписокПриАктивизацииСтрокиПодключаемая() Экспорт
    
    ТекДанные = Элементы.Список.ТекущиеДанные;
    Если ТекДанные = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если
        ТекДанные.Ссылка = КорзинаСсылка
        ИЛИ ТекДанные.Родитель = КорзинаСсылка
        ИЛИ ТекДанные.ТипЭлементаРодитель = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаИнформационныеБазы")
        ИЛИ ТекДанные.ТипЭлементаРодитель = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаРабочиеСерверы1С")
    Тогда
        УстановитьДоступностьКоманд(Ложь, ТекДанные.ТипЭлемента);
    Иначе
        УстановитьДоступностьКоманд(Истина, ТекДанные.ТипЭлемента);
    КонецЕсли;
    
    Если ОтображатьМетодики Тогда
        
        МетодикаПолеHTML = "about:blank";
        
        ТекРодитель = ТекДанные.Родитель;
        ТекЕдиницаКонтроля = ТекДанные.ЕдиницаКонтроля;
        
        ОбъектПрименения = ТекДанные.ТипЭлемента;
        ОбъектКонтроля = ТекДанные.Ссылка;
        
        ЗаполнитьМетодикиПоПлощадкеСервер();
        РаскраситьДеревоМетодикРекурсивно(Методики);
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСлужебныеОтборы(КомпоновщикПользователя)
    
    ГруппаБыстрыйОтбор = Неопределено;
    ГруппаТипЭлементаРодитель = Неопределено;
    ГруппаСкрыть = Неопределено;
    ТипЭлементаРодитель = Неопределено;
    
    Для Каждого ТекЭлемент Из КомпоновщикПользователя.Настройки.Отбор.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекЭлемент.ИдентификаторПользовательскойНастройки = "ae910bb6-39eb-457c-bdba-f5ac90e667f0" Тогда
            ГруппаБыстрыйОтбор = ТекЭлемент;
        КонецЕсли;
        
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекЭлемент.ИдентификаторПользовательскойНастройки = "2600e275-da18-4ffc-9852-33f2797f33db" Тогда
            ГруппаТипЭлементаРодитель = ТекЭлемент;
        КонецЕсли;
        
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекЭлемент.ИдентификаторПользовательскойНастройки = "06e1652e-9a24-4b37-a095-4791eb237706" Тогда
            ГруппаСкрыть = ТекЭлемент;
        КонецЕсли;
        
        Если ТипЗнч(ТекЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных") И ТекЭлемент.ИдентификаторПользовательскойНастройки = "2cd901a5-e06f-481d-bd2e-9b1cb8873e61" Тогда
            ТипЭлементаРодитель = ТекЭлемент;
        КонецЕсли;
        
    КонецЦикла;
    
    Если ГруппаБыстрыйОтбор <> Неопределено Тогда
        КомпоновщикПользователя.Настройки.Отбор.Элементы.Удалить(ГруппаБыстрыйОтбор);
    КонецЕсли;
    
    Если ГруппаТипЭлементаРодитель <> Неопределено Тогда
        КомпоновщикПользователя.Настройки.Отбор.Элементы.Удалить(ГруппаТипЭлементаРодитель);
    КонецЕсли;
    
    Если ГруппаСкрыть <> Неопределено Тогда
        КомпоновщикПользователя.Настройки.Отбор.Элементы.Удалить(ГруппаСкрыть);
    КонецЕсли;
    
    Если ТипЭлементаРодитель <> Неопределено Тогда
        КомпоновщикПользователя.Настройки.Отбор.Элементы.Удалить(ТипЭлементаРодитель);
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Функция СписокГрупп()
    
    СписокГрупп = Новый СписокЗначений;
    
    СписокГрупп.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПотребленияПамяти);
    СписокГрупп.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаАнализВызововКластера1С);
    СписокГрупп.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольНагрузочныхТестов);
    СписокГрупп.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПодключений);
    СписокГрупп.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПроизводительности);
    СписокГрупп.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольРегламентныхЗаданий);
    СписокГрупп.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольУстойчивости);
    СписокГрупп.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаМониторингСистемныхОшибок);
    СписокГрупп.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаОценкаПользователей);
    СписокГрупп.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверы1С);
    СписокГрупп.Добавить(Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазы);
        
    Возврат СписокГрупп;
    
КонецФункции

&НаСервере
Функция СписокЭлементов()
   
    СписокЭлементов = Новый СписокЗначений;
    
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.MSSQL);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.PostgreSQL);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.VMware);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.АнализВызововКластера1С);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.ВебСерверApache);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.ВебСерверIIS);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.Кластер1С);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.КонтрольНагрузочныхТестов);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.КонтрольПодключений);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.КонтрольПотребленияПамяти);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.КонтрольПроизводительности);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.КонтрольРегламентныхЗаданий);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.КонтрольУстойчивости);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.МониторингСистемныхОшибок);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.Оборудование);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.Площадка);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.Публикация);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.РабочийСервер1С);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.ТерминальныйСервер);
    СписокЭлементов.Добавить(Перечисления.ТипЭлементаПлощадки.Шлюз);
    
    Возврат СписокЭлементов;
    
КонецФункции

&НаСервере
Процедура УстановкаОтбораСписка(ТекстРедактирования)
    
    ГруппаБыстрогоОтбора = ГруппаБыстрогоОтбора();
    ГруппаБыстрогоОтбора.Элементы.Очистить();    
        
    Если ЗначениеЗаполнено(ТекстРедактирования) Тогда
        
        НовЭлемент = ГруппаБыстрогоОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипЭлемента");
        НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
        НовЭлемент.ПравоеЗначение = СписокЭлементов();
                                
        ЗначенияПоискаМассив = СтрРазделить(ЗначенияПоиска, "♂♂♂", Ложь);
        ИндексЭлемента = ЗначенияПоискаМассив.Найти(СтрокаПоиска);
        Если ИндексЭлемента <> Неопределено Тогда
            ЗначенияПоискаМассив.Удалить(ИндексЭлемента);
        КонецЕсли;
                           
        ЗначенияПоискаМассив.Вставить(0, СтрокаПоиска);
        Если ЗначенияПоискаМассив.ВГраница() > 6 Тогда
            ЗначенияПоискаМассив.Удалить(7);
        КонецЕсли;
        
        Элементы.СтрокаПоиска.СписокВыбора.Очистить();
        Для Каждого ТекЗначение Из ЗначенияПоискаМассив Цикл
            Элементы.СтрокаПоиска.СписокВыбора.Добавить(ТекЗначение);
        КонецЦикла;
        ЗначенияПоиска = СтрСоединить(ЗначенияПоискаМассив, "♂♂♂");
                
        СтрокаПоискаМассив = СтрРазделить(СтрокаПоиска,"&", Ложь);
        
        Для Каждого ТекЗначение Из СтрокаПоискаМассив Цикл
            НовЭлемент = ГруппаБыстрогоОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
            НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Наименование");
            НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
            НовЭлемент.ПравоеЗначение = ТекЗначение;
        КонецЦикла;
        
    Иначе
        
        ГруппаБыстрогоОтбора = ГруппаБыстрогоОтбора();
        Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ГруппаБыстрогоОтбора);
                    
    КонецЕсли;
    
    ГруппаТипЭлементаРодитель = ОтборТипЭлементаРодитель(Ложь);
    Если ГруппаТипЭлементаРодитель <> Неопределено Тогда
        Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ГруппаТипЭлементаРодитель);
    КонецЕсли;
    
    ГруппаСкрыть = ОтборСкрыть();
    Если ГруппаСкрыть <> Неопределено Тогда
        Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ГруппаСкрыть);
    КонецЕсли;
            
    Если Список.КомпоновщикНастроек.Настройки.НаличиеОтбораУЭлемента(Список.КомпоновщикНастроек.Настройки) ИЛИ ЗначениеЗаполнено(ТекстРедактирования) Тогда
        
        ГруппаТипЭлементаРодитель = ОтборТипЭлементаРодитель();
        
        НовЭлемент = ГруппаТипЭлементаРодитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));;
        НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипЭлементаРодитель");
        НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
        НовЭлемент.ПравоеЗначение = СписокГрупп();
        
        НовЭлемент = ГруппаТипЭлементаРодитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));;
        НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипЭлемента");
        НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
        НовЭлемент.ПравоеЗначение = СписокЭлементов();
       
        Элементы.Список.Отображение = ОтображениеТаблицы.Список;
        Элементы.ИндексПометкаУдаления.Видимость = Истина;
        Элементы.Площадка.Видимость = Истина;
        
    Иначе
        
        Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
        Элементы.ИндексПометкаУдаления.Видимость = Ложь;
        Элементы.Площадка.Видимость = Ложь;
        
    КонецЕсли;
    
    ОтборСкрыть();
    
    Список.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
    Список.КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить();
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ФлагДоступности, ТипЭлемента)
    
    ЭтоСтруктураКластера = ТипыЭлементовКластера.НайтиПоЗначению(ТипЭлемента) <> Неопределено;
    
    Элементы.ФормаДобавитьПлощадку.Доступность = ФлагДоступности;
    Элементы.СписокКонтекстноеМенюДобавитьПлощадку.Доступность = ФлагДоступности;
    
    Элементы.ФормаДобавитьОборудование.Доступность = ФлагДоступности;
    Элементы.СписокКонтекстноеМенюДобавитьОборудование.Доступность = ФлагДоступности;
    
    Элементы.ФормаДобавитьКластер1С.Доступность = ФлагДоступности;
    Элементы.СписокКонтекстноеМенюДобавитьКластер1С.Доступность = ФлагДоступности;
    
    Элементы.ФормаДобавитьРабочийСервер1С.Доступность = ФлагДоступности;
    Элементы.СписокКонтекстноеМенюДобавитьРабочийСервер1С.Доступность = ФлагДоступности И ЭтоСтруктураКластера;
    
    Элементы.ФормаДобавитьИнформационнуюБазу.Доступность = ФлагДоступности;
    Элементы.СписокКонтекстноеМенюДобавитьИнформационнуюБазу.Доступность = ФлагДоступности И ЭтоСтруктураКластера;
    
    Элементы.ФормаДобавитьПубликацию.Доступность = ФлагДоступности;
    Элементы.СписокКонтекстноеМенюДобавитьПубликацию.Доступность = ФлагДоступности;
    
    Элементы.ФормаПакетныйВводОборудования.Доступность = ФлагДоступности;
    Элементы.СписокКонтекстноеМенюПакетныйВводОборудования.Доступность = ФлагДоступности;
    
    Элементы.СписокКонтекстноеМенюВосстановитьВсе.Доступность = НЕ ФлагДоступности;
    
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюПлощадкуЭксплуатации()
    
    ПлощадкаЭксплуатации = Новый Структура("Площадка, Тип");
    
    Если ЭтотОбъект.Элементы.Список.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Площадка") Тогда
        ПлощадкаЭксплуатации = Новый Структура("Площадка, Тип", ЭтотОбъект.Элементы.Список.ТекущаяСтрока, ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Площадка"));
    ИначеЕсли ЭтотОбъект.Элементы.Список.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Корзина") Тогда
        ПлощадкаЭксплуатации = Новый Структура("Площадка, Тип", ЭтотОбъект.Элементы.Список.ТекущаяСтрока, ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Корзина"));    
    Иначе
        ПлощадкаЭксплуатации = Новый Структура("Площадка, Тип", ЭтотОбъект.Элементы.Список.ТекущаяСтрока, ЭтотОбъект.Элементы.Список.ТекущиеДанные.ТипЭлемента);
        ПлощадкаЭксплуатации = ПолучитьТекущуюПлощадкуЭксплуатацииНаСервере(ПлощадкаЭксплуатации);
    КонецЕсли;
    
    Возврат ПлощадкаЭксплуатации;
    
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекущуюПлощадкуЭксплуатацииНаСервере(ПлощадкаЭксплуатации)
    
    Площадка = Новый Структура("Площадка, Тип");
    
    Если ПлощадкаЭксплуатации.Тип = Перечисления.ТипЭлементаПлощадки.Площадка Тогда
        Площадка = Новый Структура("Площадка, Тип", ПлощадкаЭксплуатации.Площадка, ПлощадкаЭксплуатации.Тип);
    ИначеЕсли ПлощадкаЭксплуатации.Тип = Перечисления.ТипЭлементаПлощадки.Корзина Тогда
        Площадка = Новый Структура("Площадка, Тип", ПлощадкаЭксплуатации.Площадка, ПлощадкаЭксплуатации.Тип);
    Иначе
        Площадка = Новый Структура("Площадка, Тип", ПлощадкаЭксплуатации.Площадка.Родитель, ПлощадкаЭксплуатации.Площадка.Родитель.ТипЭлемента);
        Площадка = ПолучитьТекущуюПлощадкуЭксплуатацииНаСервере(Площадка);
    КонецЕсли;
    
    Возврат Площадка;
        
КонецФункции

&НаКлиенте
Процедура ОповещениеОЗакрытииЭлемента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    
    Если ДополнительныеПараметры = "Обновить" Тогда
        ЭтотОбъект.Элементы.Список.Обновить();    
    КонецЕсли;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПлощадкуЕдиницыКонтроля(ЕдиницаКонтроля, ИмяРеквизита)
    
    Если ТипЗнч(ЕдиницаКонтроля) = Тип("СправочникСсылка.КонтрольныеПроцедуры") Тогда
        Возврат ЕдиницаКонтроля.ОбъектКонтроля[ИмяРеквизита];
    Иначе
        Возврат ЕдиницаКонтроля[ИмяРеквизита];
    КонецЕсли;
        
КонецФункции

&НаКлиенте
Процедура ПоказатьМетодикиДействие()
	
	Элементы.ГруппаМетодики.Видимость = ОтображатьМетодики;
	Элементы.ГруппаТекстМетодик.Видимость = ОтображатьМетодики;
	Элементы.ФормаПоказатьМетодики.Пометка = ОтображатьМетодики;
	Элементы.ОбновитьСДиска.Видимость = ОтображатьМетодики;
	Элементы.ОбновитьИзИнтернет.Видимость = ОтображатьМетодики;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПровереноНаСервере(ОбъектКонтроля, Методика, Проверена)
	
	Запись = РегистрыСведений.КонтрольМетодик.СоздатьМенеджерЗаписи();
	Запись.ПлощадкаЭксплуатации = ОбъектКонтроля;
	Запись.Методика = Методика;
	Запись.Проверена = Проверена;
	Запись.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Функция РаскраситьДеревоМетодикРекурсивно(КоллекцияСтрок)
	
	ИндексКартинкиВыполнена = 4;
	
	Для Каждого СтрокаРаскраска Из КоллекцияСтрок.ПолучитьЭлементы() Цикл
		
		Если СтрокаРаскраска.ЭтоГруппа Тогда
			ИндексКартинкиВыполнена = РаскраситьДеревоМетодикРекурсивно(СтрокаРаскраска);
			СтрокаРаскраска.ИндексКартинкиВыполнена = ИндексКартинкиВыполнена;
			Продолжить;
		КонецЕсли;
		
		СтрокаРаскраска.ИндексКартинкиВыполнена = ?(СтрокаРаскраска.Проверена, 0, 3);
		
		Если ИндексКартинкиВыполнена <> СтрокаРаскраска.ИндексКартинкиВыполнена Тогда
			Если ИндексКартинкиВыполнена = 4 Тогда
				ИндексКартинкиВыполнена = СтрокаРаскраска.ИндексКартинкиВыполнена;
			Иначе
				ИндексКартинкиВыполнена = 2;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ИндексКартинкиВыполнена;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМетодикиПоПлощадкеСервер()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОбъектПрименения", ОбъектПрименения);
	Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектКонтроля);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СправочникМетодики.Ссылка КАК Ссылка,
	|	СправочникМетодики.Наименование КАК Представление,
	|	СправочникМетодики.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникМетодики.ЭтоГруппа КАК ЭтоГруппа,
	|	ВЫБОР КОГДА СправочникМетодики.ПометкаУдаления ТОГДА 4 ИНАЧЕ 3 КОНЕЦ КАК ИндексКартинки,
	|	0 КАК ИндексКартинкиВыполнена,
	|	ЕСТЬNULL(КонтрольМетодик.Проверена, Ложь) КАК Проверена
	|
	|ИЗ
	|	Справочник.Методики КАК СправочникМетодики
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольМетодик КАК КонтрольМетодик
	|	ПО КонтрольМетодик.ПлощадкаЭксплуатации = &ОбъектКонтроля
	|	И КонтрольМетодик.Методика = СправочникМетодики.Ссылка
	|	
	|ГДЕ
	|	НЕ ЭтоГруппа
	|	И СправочникМетодики.Ссылка В (ВЫБРАТЬ МетодикиПрименение.Ссылка ИЗ Справочник.Методики.Применение КАК МетодикиПрименение ГДЕ МетодикиПрименение.ОбъектПрименения = &ОбъектПрименения)
	|	
	|ИТОГИ 
	|	ВЫБОР КОГДА ЭтоГруппа ТОГДА МАКСИМУМ(0) ИНАЧЕ МАКСИМУМ(3) КОНЕЦ КАК ИндексКартинки
	|ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ
	|";
	
	ДеревоМетодики = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	МассивСтрокКУдалению = Новый Массив();
	МассивСтрокКДобавлению = Новый Массив();
	СтрокаРодитель = Неопределено;
	
	Для Каждого СтрокаМетодика Из ДеревоМетодики.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаМетодика.Ссылка) Тогда
			Для Каждого СтрокаМетодикаПеренести Из СтрокаМетодика.Строки Цикл
				
				Если СтрокаМетодикаПеренести.Ссылка = СтрокаМетодика.Ссылка Тогда
					
					Для Каждого СтрокаМетодикаПеренестиЭлемент Из СтрокаМетодикаПеренести.Строки Цикл
						МассивСтрокКДобавлению.Добавить(СтрокаМетодикаПеренестиЭлемент);
					КонецЦикла;
					МассивСтрокКУдалению.Добавить(СтрокаМетодикаПеренести);
					СтрокаРодитель = СтрокаМетодика;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого ДобавляемаяСтрока Из МассивСтрокКДобавлению Цикл
		
		СтрокиДляДобавления = ?(СтрокаРодитель = Неопределено, ДеревоМетодики.Строки, СтрокаРодитель);
			
		НоваяСтрока = СтрокиДляДобавления.Строки.Добавить();
		НоваяСтрока.Ссылка = ДобавляемаяСтрока.Ссылка;
		НоваяСтрока.Представление = ДобавляемаяСтрока.Представление;
		НоваяСтрока.ЭтоГруппа = ДобавляемаяСтрока.ЭтоГруппа;
		НоваяСтрока.ИндексКартинки = ДобавляемаяСтрока.ИндексКартинки;
		НоваяСтрока.Проверена = ДобавляемаяСтрока.Проверена;
		НоваяСтрока.ИндексКартинкиВыполнена = ДобавляемаяСтрока.ИндексКартинкиВыполнена;
		
	КонецЦикла;

	Для Каждого УдаляемаяСтрока Из МассивСтрокКУдалению Цикл
		Родитель = УдаляемаяСтрока.Родитель;
		Родитель.Строки.Удалить(УдаляемаяСтрока);
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоМетодики, "Методики");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФайлыСервер(Методика)

	МассивФайлов = Новый Массив();
	
	ОбъектМетодика = Методика.ПолучитьОбъект();
	Для Каждого СтрокаФайл Из ОбъектМетодика.Файлы Цикл
		
		ДвоичныеДанные = СтрокаФайл.Файл.Получить();
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор(СтрокаФайл.Идентификатор));

		СтруктураФайла = Новый Структура();
		СтруктураФайла.Вставить("Идентификатор", СтрокаФайл.Идентификатор);
		СтруктураФайла.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
		СтруктураФайла.Вставить("ИмяФайла", СтрокаФайл.ИмяФайла);
		МассивФайлов.Добавить(СтруктураФайла);
		
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции
	
&НаКлиенте
Процедура ОбновитьФайлыКлиент(Методика)
	
	МассивФайлов = ПолучитьФайлыСервер(Методика);
	ЛокальныеФайлы.Очистить();
	
	Для Каждого СтруктураФайла Из МассивФайлов Цикл
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураФайла.АдресВременногоХранилища);
		Если ДвоичныеДанные <> Неопределено Тогда
			
			СтрокаФайл = ЛокальныеФайлы.Добавить();
			СтрокаФайл.Идентификатор = СтруктураФайла.Идентификатор;
			СтрокаФайл.ПутьКФайлу = КаталогВременныхФайлов() + СтруктураФайла.ИмяФайла;
			ДвоичныеДанные.Записать(СтрокаФайл.ПутьКФайлу);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстМетодикиСервер(Методика)
	
	Если Методика.ЭтоГруппа Тогда
		ТекстHTML = "about:blank";
	Иначе
		ТекстHTML = ПолучитьТекстHTML(Методика);
	КонецЕсли;
	
	Для Каждого СтрокаФайл Из ЛокальныеФайлы Цикл
		ТекстHTML = СтрЗаменить(ТекстHTML, "[" + СтрокаФайл.Идентификатор + "]", "file:///" + СтрЗаменить(СтрокаФайл.ПутьКФайлу, "\", "/"));
	КонецЦикла;
	
	МетодикаПолеHTML = ТекстHTML;

КонецПроцедуры

&НаСервере
Функция ПолучитьТекстHTML(Методика)
	
	ТекстHTML = Методика.ТекстМетодикиHTML;
	
	Если НЕ ЗначениеЗаполнено(ТекстHTML) Тогда
		МакетПустойМетодики = Справочники.Методики.ПолучитьМакет("ОписаниеСозданияМетодик");
		ТекстHTML = МакетПустойМетодики.ПолучитьТекст();
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьСДискаСервер(АдресВременногоХранилища)
	
	Справочники.Методики.ОбновитьСДиска(АдресВременногоХранилища);
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьЭлемент(Элемент)
    
    СтандартнаяОбработка = Истина;
    
    ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОЗакрытииЭлемента", ЭтотОбъект, "Обновить");
    
    Если
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Оборудование")
        ИЛИ Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Шлюз")
        ИЛИ Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ВебСерверApache")
        ИЛИ Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ВебСерверIIS")
        ИЛИ Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.MSSQL")
        ИЛИ Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.PostgreSQL")
        ИЛИ Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.РабочийСервер1С")
        ИЛИ Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ТерминальныйСервер")
        ИЛИ Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.VMware")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.Оборудование.Форма.ФормаЭлемента", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Кластер1С")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаКластер1С", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.РабочийСерверКластера1С")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаРабочийСервер", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ИнформационнаяБаза")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаИнформационнаяБаза", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.КонтрольПотребленияПамяти")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.КонтрольныеПроцедуры.Форма.ФормаЭлементаКонтрольПамяти", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.КонтрольПодключений")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.КонтрольныеПроцедуры.Форма.ФормаЭлементаКонтрольПодключений", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.КонтрольПроизводительности")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.КонтрольныеПроцедуры.Форма.ФормаЭлементаКонтрольПроизводительности", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.КонтрольРегламентныхЗаданий")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.КонтрольныеПроцедуры.Форма.ФормаЭлементаКонтрольРегламентныхЗаданий", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.КонтрольУстойчивости")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.КонтрольныеПроцедуры.Форма.ФормаЭлементаСборДампов", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.АнализВызововКластера1С")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.КонтрольныеПроцедуры.Форма.ФормаЭлементаАнализВызововКластера1С", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.МониторингСистемныхОшибок")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.КонтрольныеПроцедуры.Форма.ФормаЭлементаКонтрольЧислаИсключений", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.КонтрольНагрузочныхТестов")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.КонтрольныеПроцедуры.Форма.ФормаЭлементаКонтрольНагрузочныхТестов", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;    
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ОценкаПользователей")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.КонтрольныеПроцедуры.Форма.ФормаЭлемента", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;    
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.Публикация")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.ЕдиницаКонтроля);
        ОткрытьФорму("Справочник.Публикации.Форма.ФормаЭлемента", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаКластеры1С")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка);
        ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыКластера1С", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаКонтрольПотребленияПамяти")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка);
        ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыКонтрольПотребленияПамяти", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаРабочиеСерверыКластера1С")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка);
        ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыРабочийСервер1С", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаКонтрольУстойчивости")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка);
        ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыКонтрольУстойчивости", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаКонтрольПроизводительности")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка);
        ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыКонтрольПроизводительности", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаКонтрольПодключений")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка);
        ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыКонтрольПодключений", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаКонтрольРегламентныхЗаданий")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка);
        ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыКонтрольРегламентныхЗаданий", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаАнализВызововКластера1С")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка);
        ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыАнализВызововКластера1С", ПараметрыОткрытия, ЭтотОбъект,,,,ОписаниеОповещения);
        СтандартнаяОбработка = Ложь;
    ИначеЕсли
        Элемент.ТекущиеДанные.ТипЭлемента = ПредопределенноеЗначение("Перечисление.ТипЭлементаПлощадки.ГруппаМониторингСистемныхОшибок")
    Тогда
        ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка);
        ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаГруппыМониторингСистемныхОшибок");
        СтандартнаяОбработка = Ложь;
    КонецЕсли;
    
    Возврат СтандартнаяОбработка;
    
КонецФункции    

&НаСервереБезКонтекста
Процедура ВосстановитьВсеНаСервере(Ссылка)
    
    НачатьТранзакцию();
    
    Если Ссылка.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.Кластер1С Тогда
        ВосстановитьВсеКластер1С(Ссылка);
    ИначеЕсли Ссылка.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза Тогда
        ВосстановитьВсеИнформационнаяБаза(Ссылка);
    ИначеЕсли Ссылка.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С Тогда
        ВосстановитьВсеРабочийСервер1С(Ссылка);
    ИначеЕсли Ссылка.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.Площадка Тогда
        ВосстановитьВсеПлощадка(Ссылка);
    КонецЕсли;
    
    Попытка
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        ЗаписьЖурналаРегистрации("ВосстановитьВсеНаСервере", УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки
               
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьВсеКластер1С(Ссылка)
   
    Корзина = Справочники.ПлощадкиЭксплуатации.Корзина();
    
    СпрОбъект = Ссылка.ПолучитьОбъект();
    СпрОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
    
    ВосстановитьКонтрольнуюПроцедуру(СпрОбъект.ЕдиницаКонтроля,Перечисления.ТипЭлементаПлощадки.КонтрольПотребленияПамяти, Корзина); 
    
    ИнформационныеБазыМассив = Справочники.ОбъектыКонтроля.ИнформационныеБазыКластера(СпрОбъект.ЕдиницаКонтроля);
    Для Каждого ИнформационнаяБаза Из ИнформационныеБазыМассив Цикл
        ИнформационнаяБазаПлощадка = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(Корзина, ИнформационнаяБаза, Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза);
        ВосстановитьВсеИнформационнаяБаза(ИнформационнаяБазаПлощадка);
    КонецЦикла;
    
    РабочиеСерверы1СМассив = Справочники.ОбъектыКонтроля.РабочиеСерверыКластера(СпрОбъект.ЕдиницаКонтроля);
    Для Каждого РабочийСервер1С  Из РабочиеСерверы1СМассив Цикл
        РабочийСервер1СПлощадка = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(Корзина, РабочийСервер1С, Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С);
        ВосстановитьВсеРабочийСервер1С(РабочийСервер1СПлощадка);
    КонецЦикла;
            
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьВсеИнформационнаяБаза(Ссылка)
    
    Корзина = Справочники.ПлощадкиЭксплуатации.Корзина();
    
    СпрОбъект = Ссылка.ПолучитьОбъект();
    СпрОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
    
    ВосстановитьКонтрольнуюПроцедуру(СпрОбъект.ЕдиницаКонтроля, Перечисления.ТипЭлементаПлощадки.КонтрольРегламентныхЗаданий, Корзина);
    ВосстановитьКонтрольнуюПроцедуру(СпрОбъект.ЕдиницаКонтроля, Перечисления.ТипЭлементаПлощадки.КонтрольНагрузочныхТестов, Корзина);
    ВосстановитьКонтрольнуюПроцедуру(СпрОбъект.ЕдиницаКонтроля, Перечисления.ТипЭлементаПлощадки.КонтрольПодключений, Корзина);
    ВосстановитьКонтрольнуюПроцедуру(СпрОбъект.ЕдиницаКонтроля, Перечисления.ТипЭлементаПлощадки.КонтрольПроизводительности, Корзина);
    ВосстановитьКонтрольнуюПроцедуру(СпрОбъект.ЕдиницаКонтроля, Перечисления.ТипЭлементаПлощадки.ОценкаПользователей, Корзина);
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьВсеРабочийСервер1С(Ссылка)
    
    Корзина = Справочники.ПлощадкиЭксплуатации.Корзина();
    
    СпрОбъект = Ссылка.ПолучитьОбъект();
    СпрОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
    
    ВосстановитьКонтрольнуюПроцедуру(СпрОбъект.ЕдиницаКонтроля, Перечисления.ТипЭлементаПлощадки.АнализВызововКластера1С, Корзина);
    ВосстановитьКонтрольнуюПроцедуру(СпрОбъект.ЕдиницаКонтроля, Перечисления.ТипЭлементаПлощадки.КонтрольУстойчивости, Корзина);
    ВосстановитьКонтрольнуюПроцедуру(СпрОбъект.ЕдиницаКонтроля, Перечисления.ТипЭлементаПлощадки.МониторингСистемныхОшибок, Корзина);
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьВсеПлощадка(Ссылка)
    
    Корзина = Справочники.ПлощадкиЭксплуатации.Корзина();
    
    СпрОбъект = Ссылка.ПолучитьОбъект();
    СпрОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
    
    // Восстанавливаем кластеры 1С
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
	|   Площадки.Ссылка
    |ИЗ
	|   Справочник.ПлощадкиЭксплуатации КАК Площадки
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|   Справочник.ОбъектыКонтроля КАК ОбъектыКонтроля
    |ПО
	|   ОбъектыКонтроля.Ссылка = Площадки.ЕдиницаКонтроля
    |ГДЕ
	|   Площадки.Родитель = &Корзина
	|   И Площадки.ТипЭлемента = &ТипЭлемента
	|   И ОбъектыКонтроля.ПлощадкаЭксплуатации = &ПлощадкаЭксплуатации
    |";
    
    Запрос.УстановитьПараметр("Корзина", Корзина);
    Запрос.УстановитьПараметр("ТипЭлемента", Перечисления.ТипЭлементаПлощадки.Кластер1С);
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", Ссылка);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ВосстановитьВсеКластер1С(Выборка.Ссылка);    
    КонецЦикла;
    
    // Восстанавливаем оборудование
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
	|   Площадки.Ссылка
    |ИЗ
	|   Справочник.ПлощадкиЭксплуатации КАК Площадки
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|   Справочник.Оборудование КАК Оборудование
    |ПО
	|   Оборудование.Ссылка = Площадки.ЕдиницаКонтроля
    |ГДЕ
	|   Площадки.Родитель = &Корзина
	|   И Площадки.ТипЭлемента = &ТипЭлемента
	|   И Оборудование.ПлощадкаДляВосстановления = &ПлощадкаЭксплуатации
    |";
    
    Запрос.УстановитьПараметр("Корзина", Корзина);
    Запрос.УстановитьПараметр("ТипЭлемента", Перечисления.ТипЭлементаПлощадки.Оборудование);
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", Ссылка);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ПлощадкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
        ПлощадкаОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
    КонецЦикла;
    
    // Восстанавливаем публикации
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
	|   Площадки.Ссылка
    |ИЗ
	|   Справочник.ПлощадкиЭксплуатации КАК Площадки
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|   Справочник.Публикации КАК Публикации
    |ПО
	|   Публикации.Ссылка = Площадки.ЕдиницаКонтроля
    |ГДЕ
	|   Площадки.Родитель = &Корзина
	|   И Площадки.ТипЭлемента = &ТипЭлемента
	|   И Публикации.ПлощадкаДляВосстановления = &ПлощадкаЭксплуатации
    |";
    
    Запрос.УстановитьПараметр("Корзина", Корзина);
    Запрос.УстановитьПараметр("ТипЭлемента", Перечисления.ТипЭлементаПлощадки.Публикация);
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", Ссылка);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ПлощадкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
        ПлощадкаОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
    КонецЦикла;
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьКонтрольнуюПроцедуру(ОбъектКонтроля, ТипЭлементаПлощадки, Корзина)
    
    Если ТипЭлементаПлощадки = Перечисления.ТипЭлементаПлощадки.КонтрольПотребленияПамяти Тогда
        ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти();
    ИначеЕсли ТипЭлементаПлощадки = Перечисления.ТипЭлементаПлощадки.КонтрольРегламентныхЗаданий Тогда
        ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий();
    ИначеЕсли ТипЭлементаПлощадки = Перечисления.ТипЭлементаПлощадки.КонтрольНагрузочныхТестов Тогда
        ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.КонтрольНагрузочныхТестов();
    ИначеЕсли ТипЭлементаПлощадки = Перечисления.ТипЭлементаПлощадки.КонтрольПодключений Тогда
        ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений();
    ИначеЕсли ТипЭлементаПлощадки = Перечисления.ТипЭлементаПлощадки.КонтрольПроизводительности Тогда
        ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.КонтрольПроизводительности();
    ИначеЕсли ТипЭлементаПлощадки = Перечисления.ТипЭлементаПлощадки.ОценкаПользователей Тогда
        ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.ОценкаПользователей();
    ИначеЕсли ТипЭлементаПлощадки = Перечисления.ТипЭлементаПлощадки.АнализВызововКластера1С Тогда
        ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.АнализВызововКластера1С();
    ИначеЕсли ТипЭлементаПлощадки = Перечисления.ТипЭлементаПлощадки.КонтрольУстойчивости Тогда
        ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы();
    ИначеЕсли ТипЭлементаПлощадки = Перечисления.ТипЭлементаПлощадки.МониторингСистемныхОшибок Тогда
        ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.МониторингСистемныхОшибок();
    КонецЕсли;
    
    КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ОбъектКонтроля, ВидКонтрольнойПроцедуры);
    Если КонтрольнаяПроцедура <> Неопределено Тогда
        КонтрольнаяПроцедураПлощадка = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(Корзина, КонтрольнаяПроцедура, ТипЭлементаПлощадки);
        КонтрольнаяПроцедураПлощадкаОбъект = КонтрольнаяПроцедураПлощадка.ПолучитьОбъект();
        
        Если КонтрольнаяПроцедураПлощадкаОбъект <> Неопределено Тогда
            КонтрольнаяПроцедураПлощадкаОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
        КонецЕсли;
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Функция ОбновитьИзИнтернетСервер()
	
	ПараметрыЗадания = Новый Структура;
	
	Если Общий.ИнформационнаяБазаФайловая() Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Справочники.Методики.ОбновитьИзИнтернет(Неопределено, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
		
	Иначе
		
		НаименованиеЗадания = НСтр("ru = 'Выгрузка пользователей ИБ'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Справочники.Методики.ОбновитьИзИнтернет", 
			ПараметрыЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПакетныйВводОборудования(Команда)
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаПакетныйВводОборудования");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	МассивПлощадок = Новый Массив();
	Для Каждого СтрокаСписка Из Строки Цикл
		МассивПлощадок.Добавить(СтрокаСписка.Значение.Данные.Ссылка);
	КонецЦикла;
	
	ПроцентИсполненияМетодик = Новый Соответствие();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивПлощадок", МассивПлощадок);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПлощадкиЭксплуатации.Ссылка КАК ПлощадкаЭксплуатации,
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(*) = 0 ТОГДА 0 ИНАЧЕ 100 * (КОЛИЧЕСТВО(КонтрольМетодик.Методика) / КОЛИЧЕСТВО(*)) КОНЕЦ КАК Процент
	|	
	|ИЗ
	|	Справочник.ПлощадкиЭксплуатации КАК ПлощадкиЭксплуатации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Методики.Применение КАК МетодикиПрименение
	|	ПО МетодикиПрименение.ОбъектПрименения = ПлощадкиЭксплуатации.ТипЭлемента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольМетодик КАК КонтрольМетодик
	|	ПО КонтрольМетодик.ПлощадкаЭксплуатации = ПлощадкиЭксплуатации.Ссылка
	|	И КонтрольМетодик.Методика = МетодикиПрименение.Ссылка
	|	И КонтрольМетодик.Проверена
	|	
	|ГДЕ
	|	НЕ МетодикиПрименение.Ссылка.ЭтоГруппа
	|	И ПлощадкиЭксплуатации.Ссылка В(&МассивПлощадок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлощадкиЭксплуатации.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) > 0
	|	И КОЛИЧЕСТВО(КонтрольМетодик.Методика) > 0
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПроцентИсполненияМетодик[Выборка.ПлощадкаЭксплуатации] = Выборка.Процент;
	КонецЦикла;
	
	Если ПроцентИсполненияМетодик.Количество() > 0 Тогда
		
		Для Каждого СтрокаСписка Из Строки Цикл
			
			Процент = 0;
			Если ПроцентИсполненияМетодик[СтрокаСписка.Значение.Данные.Ссылка] <> Неопределено Тогда
				Процент = ПроцентИсполненияМетодик[СтрокаСписка.Значение.Данные.Ссылка];
			КонецЕсли;
			
			 СтрокаСписка.Значение.Оформление["ПроцентПроцентИсполненияМетодик"].УстановитьЗначениеПараметра("Текст", Формат(Процент, "ЧДЦ="));
			
		 КонецЦикла;
		 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(РезультатЗакрытия) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
        
        УстановитьОтборЗакрытиеНаСервере(РезультатЗакрытия, ЭтотОбъект.СтрокаПоиска);
                            
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЗакрытиеНаСервере(КомпоновщикНовый, ТекстРедактировния)
    
    Если КомпоновщикНовый <> Неопределено Тогда
        
        Список.КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНовый.ПолучитьНастройки());
                
    КонецЕсли;
    
    Элементы.ИндексПометкаУдаления.Видимость = Истина;
    Элементы.Площадка.Видимость = Истина;
    Элементы.Список.Отображение = ОтображениеТаблицы.Список;
    
    УстановкаОтбораСписка(ТекстРедактировния);
    
    Компоновщик.ЗагрузитьНастройки(Список.КомпоновщикНастроек.ПолучитьНастройки());
    УдалитьСлужебныеОтборы(Компоновщик);
    ЭтотОбъект.КомпоновщикНастройки = СериализоватьНастройки();
    
КонецПроцедуры

&НаСервере
Процедура СнятьОтборНаСервере(ТекстРедактирования)
    
    Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
    ОтборСкрыть();
    
    Компоновщик.ЗагрузитьНастройки(Список.КомпоновщикНастроек.ПолучитьНастройки());
    УдалитьСлужебныеОтборы(Компоновщик);
    
    Если ЗначениеЗаполнено(ТекстРедактирования) Тогда
        УстановкаОтбораСписка(ТекстРедактирования);
    Иначе
        Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
        Элементы.ИндексПометкаУдаления.Видимость = Ложь;
        Элементы.Площадка.Видимость = Ложь;
    КонецЕсли;
    
    ЭтотОбъект.КомпоновщикНастройки = СериализоватьНастройки();
    
КонецПроцедуры

&НаСервере
Функция ОтборТипЭлементаРодитель(Создать = Истина)
    
    ГруппаТипЭлементаРодитель = Неопределено;
    ИдентификаторПользовательскойНастройки = "2600e275-da18-4ffc-9852-33f2797f33db";
    
    Для Каждого ТекЭлемент Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
            ГруппаТипЭлементаРодитель = ТекЭлемент;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Если Создать И ГруппаТипЭлементаРодитель = Неопределено Тогда
        ГруппаТипЭлементаРодитель = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        ГруппаТипЭлементаРодитель.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
        ГруппаТипЭлементаРодитель.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
    КонецЕсли;
        
    Возврат ГруппаТипЭлементаРодитель;
    
КонецФункции

&НаСервере
Функция ОтборСкрыть()
    
    ГруппаСкрыть = Неопределено;
    ИдентификаторПользовательскойНастройки = "06e1652e-9a24-4b37-a095-4791eb237706";
    
    Для Каждого ТекЭлемент Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
            ГруппаСкрыть = ТекЭлемент;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Если ГруппаСкрыть = Неопределено Тогда
        
        ГруппаСкрыть = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        ГруппаСкрыть.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
        ГруппаСкрыть.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
        
        НовЭлемент = ГруппаСкрыть.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));;
        НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Скрыть");
        НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
        НовЭлемент.ПравоеЗначение = Ложь;
        
    КонецЕсли;
    
    Возврат ГруппаСкрыть;
        
КонецФункции

&НаСервере
Функция ГруппаБыстрогоОтбора()
    
    ГруппаБыстрогоОтбора = Неопределено;
    ИдентификаторПользовательскойНастройки = "ae910bb6-39eb-457c-bdba-f5ac90e667f0";
    
    Для Каждого ТекЭлемент Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
            ГруппаБыстрогоОтбора = ТекЭлемент;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Если ГруппаБыстрогоОтбора = Неопределено Тогда
        
        ГруппаБыстрогоОтбора = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        ГруппаБыстрогоОтбора.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
        ГруппаБыстрогоОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
        
    КонецЕсли;
    
    Возврат ГруппаБыстрогоОтбора;
    
КонецФункции

&НаСервере
Процедура ИнициализироватьКомпоновщик()
    
    Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
    
    СКД = Новый СхемаКомпоновкиДанных();
	ИсточникСКД = СКД.ИсточникиДанных.Добавить();
	ИсточникСКД.Имя = "ИсточникДанных1";
	ИсточникСКД.ТипИсточникаДанных = "local";
    
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    НаборДанных.ИмяОбъекта = "НаборДанных1";
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Наименование";
    Поле.ПутьКДанным = "Наименование";
    Поле.Заголовок = "Наименование";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ТипЭлемента";
    Поле.ПутьКДанным = "ТипЭлемента";
    Поле.Заголовок = "Тип элемента";
    Поле.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.ТипЭлементаПлощадки");
    Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Площадка";
    Поле.ПутьКДанным = "Площадка";
    Поле.Заголовок = "Площадка";
    Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПлощадкиЭксплуатации");
    Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Выполняется";
    Поле.ПутьКДанным = "Выполняется";
    Поле.Заголовок = "Выполняется";
    Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
    
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    
    Список.КомпоновщикНастроек.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
    
КонецПроцедуры

&НаСервере
Функция СериализоватьНастройки()
    
    Поток = Новый ЗаписьXML();
 	Поток.УстановитьСтроку();
 	СериализаторXDTO.ЗаписатьXML(Поток, Список.КомпоновщикНастроек.ПолучитьНастройки());
    
 	Возврат Поток.Закрыть();
    
КонецФункции

&НаКлиенте
Процедура УстановитьБыстрыйОтборПоТипу(ТипОборудование, Пометка)
    
    ЭлементТипыОборудования = Неопределено;
    Для Каждого ТекЭлемент Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Строка(ТекЭлемент.ЛевоеЗначение) = "ТипЭлемента" И ТекЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
            ЭлементТипыОборудования = ТекЭлемент;
            Прервать;
        КонецЕсли;
                
    КонецЦикла;
    
    Если ЭлементТипыОборудования = Неопределено Тогда
        
        ЭлементТипыОборудования =Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        ЭлементТипыОборудования.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипЭлемента");
        ЭлементТипыОборудования.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
        ЭлементТипыОборудования.ПравоеЗначение = Новый СписокЗначений; 
        
    КонецЕсли;
    
    СЗн = ЭлементТипыОборудования.ПравоеЗначение;
    
    Если Пометка Тогда
        
        ТипОборудованиеЭлемент =  СЗн.НайтиПоЗначению(ТипОборудование);
        Если ТипОборудованиеЭлемент = Неопределено Тогда
            СЗн.Добавить(ТипОборудование);
        КонецЕсли;
                
    Иначе
        
        ТипОборудованиеЭлемент =  СЗн.НайтиПоЗначению(ТипОборудование);
        Если ТипОборудованиеЭлемент <> Неопределено Тогда
            СЗн.Удалить(ТипОборудованиеЭлемент);
        КонецЕсли;
        
        Если СЗн.Количество() = 0 Тогда
            Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементТипыОборудования);
        КонецЕсли;
        
    КонецЕсли;
    
    УстановитьОтборЗакрытиеНаСервере(Неопределено, СтрокаПоиска);
        
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкиБыстрогоОтбора()
    
    ЭлементТипыОборудования = Неопределено;
    Для Каждого ТекЭлемент Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Строка(ТекЭлемент.ЛевоеЗначение) = "ТипЭлемента" И ТекЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
            ЭлементТипыОборудования = ТекЭлемент;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Если ЭлементТипыОборудования <> Неопределено Тогда
        
        Для Каждого ТекЭлемент Из ЭлементТипыОборудования.ПравоеЗначение Цикл
            
            Если ТекЭлемент.Значение = Перечисления.ТипЭлементаПлощадки.Оборудование Тогда
                Элементы.УстановитьОтборОборудование.Пометка = Истина;
            ИначеЕсли ТекЭлемент.Значение = Перечисления.ТипЭлементаПлощадки.Кластер1С Тогда
                Элементы.УстановитьОтборКластеры1С.Пометка = Истина;
            ИначеЕсли ТекЭлемент.Значение = Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С Тогда
                Элементы.УстановитьОтборРабочийСервер1С.Пометка = Истина;
            ИначеЕсли ТекЭлемент.Значение = Перечисления.ТипЭлементаПлощадки.КонтрольПодключений Тогда
                Элементы.УстановитьОтборКонтрольПодключений.Пометка = Истина;
            ИначеЕсли ТекЭлемент.Значение = Перечисления.ТипЭлементаПлощадки.КонтрольПотребленияПамяти Тогда
                Элементы.УстановитьОтборКонтрольПотребленияПамяти.Пометка = Истина;
            ИначеЕсли ТекЭлемент.Значение = Перечисления.ТипЭлементаПлощадки.КонтрольПроизводительности Тогда
                Элементы.УстановитьОтборКонтрольПроизводительности.Пометка = Истина;
            ИначеЕсли ТекЭлемент.Значение = Перечисления.ТипЭлементаПлощадки.КонтрольУстойчивости Тогда
                Элементы.УстановитьОтборКонтрольУстойчивости.Пометка = Истина;
            ИначеЕсли ТекЭлемент.Значение = Перечисления.ТипЭлементаПлощадки.КонтрольРегламентныхЗаданий Тогда
                Элементы.УстановитьОтборКонтрольРегламентныхЗаданий.Пометка = Истина;
            КонецЕсли;
                        
        КонецЦикла;
        
    КонецЕсли;
    
КонецПроцедуры;

#КонецОбласти



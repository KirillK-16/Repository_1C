
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    ИнициализироватьКомпоновщик();
    
    Если ЭтотОбъект.Параметры.Свойство("ЭлементыПлощадки") Тогда
        
        МассивОборудования = ПолучитьОборудование(ЭтотОбъект.Параметры.ЭлементыПлощадки);
        Оборудование = Новый СписокЗначений;
        Оборудование.ЗагрузитьЗначения(МассивОборудования);
        
        //Если Оборудование.Количество() > 0 Тогда 
            
            НовЭлемент = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
            НовЭлемент.Использование = Истина;
            НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
            НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
            НовЭлемент.ПравоеЗначение = Оборудование;
            
            Список.КомпоновщикНастроек.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
            
        //КонецЕсли;
        
    КонецЕсли;
    
    ЗаполнитьПараметрыЗаписи();
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьВсе(Команда)
    
    Для Каждого ТекСтрока Из ЭтотОбъект.ПараметрыЗаписи Цикл
        ТекСтрока.Изменить = Истина;
        Элементы["Список" + ТекСтрока.Параметр].Видимость = Истина; 
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
    
    Для Каждого ТекСтрока Из ЭтотОбъект.ПараметрыЗаписи Цикл
        ТекСтрока.Изменить = Ложь;
        Элементы["Список" + ТекСтрока.Параметр].Видимость = Ложь; 
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
    
    ЗаписатьИзменения();
    ЭтотОбъект.Закрыть();
    
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
    ЗаписатьИзменения();
КонецПроцедуры

&НаКлиенте
Процедура НайтиОтличныеОт(Команда)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные;
    ТекДанные.ЕстьОтбор = Истина;
    УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
    
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтличныеОт(Команда)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные;
    ТекДанные.ЕстьОтбор = Ложь;
    СнятьОтборПоПараметру(ТекДанные.Параметр);
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПараметрыЗаписиПараметрЗначениеПриИзменении(Элемент)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные; 
    ЭтотОбъект[ТекДанные.Параметр] = ТекДанные.ПараметрЗначение; 
    
    Если ТекДанные.ЕстьОтбор = Истина Тогда
        УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиИзменитьПриИзменении(Элемент)
    
    Элементы["Список" + Элемент.Родитель.ТекущиеДанные.Параметр].Видимость = Элемент.Родитель.ТекущиеДанные.Изменить; 
    
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
    КомпоновщикНастройкиОтборПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиЕстьОтборПриИзменении(Элемент)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные;
    
    Если ТекДанные.ЕстьОтбор Тогда
        УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
    Иначе
        СнятьОтборПоПараметру(ТекДанные.Параметр);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиПриАктивизацииСтроки(Элемент)
    ПодключитьОбработчикОжидания("ПараметрыЗаписиПриАктивизацииСтрокиПодключаемый", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьОборудование(ЭлементыПлощадкиМассив)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ВЫРАЗИТЬ(ЕдиницаКонтроля КАК Справочник.Оборудование) КАК Оборудование
    |ИЗ
    |   Справочник.ПлощадкиЭксплуатации
    |ГДЕ
    |   Ссылка В (&МассивСсылок)
    |   И ТипЭлемента = &ТипЭлемента
    |";
    
    Запрос.УстановитьПараметр("МассивСсылок", ЭлементыПлощадкиМассив);
    Запрос.УстановитьПараметр("ТипЭлемента", Перечисления.ТипЭлементаПлощадки.Оборудование);
    
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Оборудование");
    
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыЗаписи()
    
    Настройки = Справочники.Оборудование.ПрочитатьНастройкиПоУмолчанию();
    
    ДобавитьПараметр("СобиратьДанныеПроизводительности", "Cбор счетчиков", Настройки.СобиратьДанныеПроизводительности);
    ДобавитьПараметр("ПериодЗаписи", "Период записи тек. значений, сек.", Настройки.ПериодЗаписи);
    ДобавитьПараметр("ПроверятьДоступность", "Проверять доступность", Настройки.ПроверятьДоступность);
    ДобавитьПараметр("Таймаут", "Таймаут, сек.", Настройки.Таймаут);
    ДобавитьПараметр("ПериодКонтроля", "Период контроля, сек.", Настройки.ПериодКонтроля);
    ДобавитьПараметр("МинимальныйПроцентДоступности", "Минимальная доступность, %", Настройки.МинимальныйПроцентДоступности);
    ДобавитьПараметр("ДопустимоНетДанных", "Допустимо нет данных, сек.", Настройки.ДопустимоНетДанных);
    ДобавитьПараметр("ИспользоватьВнешнегоАгента", "Использовать внешнего агента", Настройки.ИспользоватьВнешнегоАгента);
    ДобавитьПараметр("РегистрироватьДампы", "Регистрировать дампы", Настройки.РегистрироватьДампы);
   
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметр(Параметр, ПараметрПредставление, ПараметрЗначение)
    
    ЭтотОбъект[Параметр] = ПараметрЗначение;
    НовСтрока = ЭтотОбъект.ПараметрыЗаписи.Добавить();
    НовСтрока.Изменить = Истина;
    НовСтрока.Параметр = Параметр;
    НовСтрока.ПараметрПредставление = ПараметрПредставление;
    НовСтрока.ПараметрЗначение = ПараметрЗначение;
    НовСтрока.ЕстьОтбор = Ложь;
    
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзменения()
        
    ДополнительныеПоля = Новый Массив;
    ДополнительныеПоля.Добавить("Ссылка");
    ТЗнДинСписка = ФункцииСКД.ПолучитьТаблицуЗначенийЭлементаДинамическогоСписка(ЭтотОбъект.Элементы.Список, ДополнительныеПоля);
    Оборудование = ТЗнДинСписка.ВыгрузитьКолонку("Ссылка");
        
    РеквизитыДляЗаписи = Новый Соответствие;
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка,";
    
    Для Каждого ТекСтрока Из ПараметрыЗаписи Цикл
        Если ТекСтрока.Изменить Тогда
            
            Если ТекСтрока.Параметр <> "СобиратьДанныеПроизводительности" Тогда
                РеквизитыДляЗаписи.Вставить(ТекСтрока.Параметр, ТекСтрока.ПараметрЗначение);
            Иначе
                
                Если ТекСтрока.ПараметрЗначение = "Отключить" Тогда
                    РеквизитыДляЗаписи.Вставить(ТекСтрока.Параметр, 0);
                ИначеЕсли ТекСтрока.ПараметрЗначение = "PDH" Тогда
                    РеквизитыДляЗаписи.Вставить(ТекСтрока.Параметр, 1);
                ИначеЕсли ТекСтрока.ПараметрЗначение = "Агент КИП" Тогда
                    РеквизитыДляЗаписи.Вставить(ТекСтрока.Параметр, 2);
                КонецЕсли;
                                    
            КонецЕсли;
            
            Запрос.Текст = Запрос.Текст + " " + ТекСтрока.Параметр + ",";
            
        КонецЕсли;
    КонецЦикла;
    
    Запрос.Текст = ЛЕВ(Запрос.Текст, СтрДлина(Запрос.Текст) - 1);
    Запрос.Текст = Запрос.Текст + " 
    |ИЗ
    |   Справочник.Оборудование
    |ГДЕ
    |   Ссылка В (&Оборудование);
    |";
    
    Запрос.УстановитьПараметр("Оборудование", Оборудование);
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        НужнаЗапись = Ложь;
        
        Для Каждого ТекРеквизит Из РеквизитыДляЗаписи Цикл
            
            Если Выборка[ТекРеквизит.Ключ] <> ТекРеквизит.Значение Тогда
                НужнаЗапись = Истина;
                Прервать;
            КонецЕсли;
            
        КонецЦикла;
        
        Если НужнаЗапись Тогда
            
            СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
            Для Каждого ТекРеквизит Из РеквизитыДляЗаписи Цикл
                СпрОбъект[ТекРеквизит.Ключ] = ТекРеквизит.Значение;
            КонецЦикла;
            СпрОбъект.ДополнительныеСвойства.Вставить("ПериодПоЧислу", Истина);
            СпрОбъект.Записать();
                        
        КонецЕсли;
                
    КонецЦикла;
    
    Компоновщик.Настройки.Отбор.Элементы.Очистить();
    
    Для Каждого ТекПараметр Из ПараметрыЗаписи Цикл
        ТекПараметр.ЕстьОтбор = Ложь;
    КонецЦикла;
        
    НовЭлемент = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовЭлемент.Использование = Истина;
    НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
    НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
    
    ОборудованиеСписок = Новый СписокЗначений;
    ОборудованиеСписок.ЗагрузитьЗначения(Оборудование);
    НовЭлемент.ПравоеЗначение = ОборудованиеСписок;
    
    Список.КомпоновщикНастроек.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
    
    ЭтотОбъект.Элементы.Список.Обновить();
    
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщик()
    
    СКД = Новый СхемаКомпоновкиДанных();
	ИсточникСКД = СКД.ИсточникиДанных.Добавить();
	ИсточникСКД.Имя = "ИсточникДанных1";
	ИсточникСКД.ТипИсточникаДанных = "local";
    
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    НаборДанных.ИмяОбъекта = "НаборДанных1";
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Ссылка";
    Поле.ПутьКДанным = "Ссылка";
    Поле.Заголовок = "Ссылка";
    Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Оборудование");
    Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Наименование";
    Поле.ПутьКДанным = "Наименование";
    Поле.Заголовок = "Наименование";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "СобиратьДанныеПроизводительности";
    Поле.ПутьКДанным = "СобиратьДанныеПроизводительности";
    Поле.Заголовок = "Вкл. сбор счетчиков";
    Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ПериодЗаписи";
    Поле.ПутьКДанным = "ПериодЗаписи";
    Поле.Заголовок = "Период записи тек. значений, сек.";
    Поле.ТипЗначения = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(2,0));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ПроверятьДоступность";
    Поле.ПутьКДанным = "ПроверятьДоступность";
    Поле.Заголовок = "Проверять доступность";
    Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Таймаут";
    Поле.ПутьКДанным = "Таймаут";
    Поле.Заголовок = "Таймаут, сек.";
    Поле.ТипЗначения = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(2,0));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ПериодКонтроля";
    Поле.ПутьКДанным = "ПериодКонтроля";
    Поле.Заголовок = "Период контроля, сек.";
    Поле.ТипЗначения = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "МинимальныйПроцентДоступности";
    Поле.ПутьКДанным = "МинимальныйПроцентДоступности";
    Поле.Заголовок = "Минимальная доступность, %";
    Поле.ТипЗначения = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3,0));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ДопустимоНетДанных";
    Поле.ПутьКДанным = "ДопустимоНетДанных";
    Поле.Заголовок = "Допустимо нет данных, сек.";
    Поле.ТипЗначения = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ИспользоватьВнешнегоАгента";
    Поле.ПутьКДанным = "ИспользоватьВнешнегоАгента";
    Поле.Заголовок = "Использовать внешнего агента";
    Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "РегистрироватьДампы";
    Поле.ПутьКДанным = "РегистрироватьДампы";
    Поле.Заголовок = "Регистрировать дампы";
    Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
            
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    
КонецПроцедуры

&НаСервере
Процедура КомпоновщикНастройкиОтборПриИзмененииНаСервере()
    
    Список.КомпоновщикНастроек.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
    Элементы.Список.Обновить();
    
КонецПроцедуры

&НаСервере
Процедура СписокПриЗагрузкеПользовательскихНастроекНаСервере(Элемент, Настройки)
    Список.КомпоновщикНастроек.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
КонецПроцедуры

&НаКлиенте
Функция ГруппаНайтиОтличныеОт(Создать = Истина)
    
    ГруппаНайтиОтличныеОт = Неопределено;
    
    Для Каждого ТекЭлемент Из Компоновщик.Настройки.Отбор.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекЭлемент.ИдентификаторПользовательскойНастройки = "b1c27381-4a1c-4dc2-9aea-3dc9b02baa72" Тогда
            ГруппаНайтиОтличныеОт = ТекЭлемент;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Если ГруппаНайтиОтличныеОт = Неопределено И Создать Тогда
        
        ГруппаНайтиОтличныеОт = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        ГруппаНайтиОтличныеОт.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
        ГруппаНайтиОтличныеОт.Использование = Истина;
        ГруппаНайтиОтличныеОт.ИдентификаторПользовательскойНастройки = "b1c27381-4a1c-4dc2-9aea-3dc9b02baa72";
        
    КонецЕсли;
    
    Возврат ГруппаНайтиОтличныеОт;
    
КонецФункции

&НаКлиенте
Процедура УстановитьОтборПоПараметру(Параметр, ПараметрЗначение)
    
    ГруппаНайтиОтличныеОт = ГруппаНайтиОтличныеОт();
        
    ЭлементОтбора = Неопределено;
    
    Для Каждого ТекЭлемент Из ГруппаНайтиОтличныеОт.Элементы Цикл
        Если Строка(ТекЭлемент.ЛевоеЗначение) = Параметр Тогда
            ЭлементОтбора = ТекЭлемент;
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    Если ЭлементОтбора = Неопределено Тогда
        ЭлементОтбора = ГруппаНайтиОтличныеОт.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    КонецЕсли;
    
    ЭлементОтбора.Использование = Истина;
    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Параметр);
    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементОтбора.ПравоеЗначение = ПараметрЗначение;
    
    Элементы.КомпоновщикНастройкиОтбор.ОбновитьТекстРедактирования();
    
    КомпоновщикНастройкиОтборПриИзмененииНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтборПоПараметру(Параметр)
    
    ГруппаНайтиОтличныеОт = ГруппаНайтиОтличныеОт(Ложь);
    
    Если ГруппаНайтиОтличныеОт <> Неопределено Тогда
                
        ЭлементОтбора = Неопределено;
        
        Для Каждого ТекЭлемент Из ГруппаНайтиОтличныеОт.Элементы Цикл
            Если Строка(ТекЭлемент.ЛевоеЗначение) = Параметр Тогда
                ЭлементОтбора = ТекЭлемент;
                Прервать;
            КонецЕсли;
        КонецЦикла;
        
        Если ЭлементОтбора = Неопределено Тогда
            ЭлементОтбора = ГруппаНайтиОтличныеОт.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        КонецЕсли;
        
        Если ЭлементОтбора <> Неопределено Тогда
            
            ГруппаНайтиОтличныеОт.Элементы.Удалить(ЭлементОтбора);
            Элементы.КомпоновщикНастройкиОтбор.ОбновитьТекстРедактирования();
            
            Если ГруппаНайтиОтличныеОт.Элементы.Количество() = 0 Тогда
                Компоновщик.Настройки.Отбор.Элементы.Удалить(ГруппаНайтиОтличныеОт);
            КонецЕсли;
            
            КомпоновщикНастройкиОтборПриИзмененииНаСервере();
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиПриАктивизацииСтрокиПодключаемый() Экспорт
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные;
    Если ТекДанные.Параметр = "СобиратьДанныеПроизводительности" Тогда
        
        Элементы.ПараметрыЗаписиПараметрЗначение.РежимВыбораИзСписка = Истина;
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Добавить("Отключить", "Отключить");
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Добавить("PDH", "PDH");
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Добавить("Агент КИП", "Агент КИП");
        
    Иначе
        
        Элементы.ПараметрыЗаписиПараметрЗначение.РежимВыбораИзСписка = Ложь;
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Очистить();
        
    КонецЕсли;
        
КонецПроцедуры

#КонецОбласти

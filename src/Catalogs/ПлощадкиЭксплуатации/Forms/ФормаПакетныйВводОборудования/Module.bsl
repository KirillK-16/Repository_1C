
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    ЗаполнитьПараметрыОборудование();
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    #Если ТонкийКлиент Тогда
        СистемнаяИнформация = Новый СистемнаяИнформация;
        Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
            ЭтотОбъект.Элементы.ГруппаСтраницаОбозревательОборудования.Видимость = Истина;
        Иначе
            ЭтотОбъект.Элементы.ГруппаСтраницаОбозревательОборудования.Видимость = Ложь;
        КонецЕсли;
    #Иначе
        ЭтотОбъект.Элементы.ГруппаСтраницаОбозревательОборудования.Видимость = Ложь;
    #КонецЕсли
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтборОбозреватель(Команда)
    
    ОписаниеОповещенияОтборОбозреватель = Новый ОписаниеОповещения("ОтборОбозревательЗакрытие", ЭтотОбъект);
    
    Если ВидОтбора = "СКД" Тогда
        ПараметрыОткрытия = Новый Структура("Компоновщик", ЭтотОбъект.Компоновщик);
    ИначеЕсли ВидОтбора = "РегВыражение" Тогда
        ПараметрыОткрытия = Новый Структура("РегулярноеВыражение", ЭтотОбъект.РегулярноеВыражение);
    КонецЕсли;
    
    ОткрытьФорму("Справочник.ПлощадкиЭксплуатации.Форма.ФормаОтбораОборудование",ПараметрыОткрытия,,,,,ОписаниеОповещенияОтборОбозреватель);
    
КонецПроцедуры

&НаКлиенте
Процедура ОтборОбозревательСнять(Команда)
       
    СнятьОтбор();
    
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеОбновить(Команда)
    
    ОборудованиеОбновитьНаСервере();
        
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройки(Команда)
    УстановитьНастройкиНаСервере();
КонецПроцедуры

#Если ТонкийКлиент Тогда
    
&НаКлиенте
Процедура ПоискОборудования(Команда)
    
    ЭтотОбъект.ОборудованиеБуфер.Очистить();
    
    Если ЗначениеЗаполнено(ЭтотОбъект.Домен) Тогда
        КоманднаяСтрока = "net view /domain:" + ЭтотОбъект.Домен;
    Иначе
        КоманднаяСтрока = "net view";    
    КонецЕсли;
    
    Результат = ВыполнитьКоманду(КоманднаяСтрока);
    
    Если ЗначениеЗаполнено(Результат.ПотокВывода) Тогда
        
        Разделитель = Символы.ПС + Символы.ВК;
        ДанныеМассив = СтрРазделить(Результат.ПотокВывода, Разделитель, Ложь);
        
        МассивНаименований = Новый Массив;
        
        Если ДанныеМассив.ВГраница() > 2 Тогда
            Для Индекс = 2 По ДанныеМассив.ВГраница() - 1 Цикл
                МассивНаименований.Добавить(СтрЗаменить(СтрРазделить(ДанныеМассив[Индекс], " ", Ложь)[0], "\\", ""));
            КонецЦикла;
        КонецЕсли;
        
        ОборудованиеОбновитьНаСервере(МассивНаименований);
        
    ИначеЕсли ЗначениеЗаполнено(Результат.ПотокОшибок) Тогда
        
        Сообщить(Результат.ПотокОшибок);
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДомены(Команда)
    
    ЭтотОбъект.Элементы.Домен.СписокВыбора.Очистить();
    
    КоманднаяСтрока = "net view /domain";
    
    Результат = ВыполнитьКоманду(КоманднаяСтрока);
    
    Если ЗначениеЗаполнено(Результат.ПотокВывода) Тогда
        
        Разделитель = Символы.ПС + Символы.ВК;
        ДанныеМассив = СтрРазделить(Результат.ПотокВывода, Разделитель, Ложь);
        
        Если ДанныеМассив.ВГраница() > 2 Тогда
            Для Индекс = 2 По ДанныеМассив.ВГраница() - 1 Цикл
                ЭтотОбъект.Элементы.Домен.СписокВыбора.Добавить(СокрЛП(ДанныеМассив[Индекс]));
            КонецЦикла;
        КонецЕсли;
        
    ИначеЕсли ЗначениеЗаполнено(Результат.ПотокОшибок) Тогда
        
        Сообщить(Результат.ПотокОшибок);        
        
    КонецЕсли;
    
    Если ЭтотОбъект.Элементы.Домен.СписокВыбора.Количество() > 0 Тогда
        ЭтотОбъект.Домен = ЭтотОбъект.Элементы.Домен.СписокВыбора[0];
    КонецЕсли;
            
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОборудованиеФорматЧислаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    КонструкторФорматнойСтроки = Новый КонструкторФорматнойСтроки(ЭтотОбъект.ОборудованиеФорматЧисла);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеВводаФорматнойСтроки", ЭтотОбъект, "ОборудованиеФорматЧисла");
	КонструкторФорматнойСтроки.Показать(ОписаниеОповещения);
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтборНажатие(Элемент)
    ОтборОбозреватель(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтбор1Нажатие(Элемент)
    ОтборОбозреватель(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Если ТонкийКлиент Тогда
    
&НаКлиенте
Функция ВыполнитьКоманду(Знач КоманднаяСтрока)
    
    // Перенаправление stdout и stderr.
	ФайлПотокаВывода = ПолучитьИмяВременногоФайла("out");
	ФайлПотокаОшибок = ПолучитьИмяВременногоФайла("err");
    
    КоманднаяСтрока = "cmd /c " +  """chcp 437&" + КоманднаяСтрока + " > ^""" + ФайлПотокаВывода + "^"" 2>^""" + ФайлПотокаОшибок + "^""""";
        
    Оболочка = Новый COMОбъект("Wscript.Shell");
    Оболочка.Run(КоманднаяСтрока, 0, Истина);
    
    Результат = Новый Структура("ПотокВывода, ПотокОшибок", "", "");
    
    ЧтениеПотокаОшибок = Новый ЧтениеТекста(ФайлПотокаОшибок, ПолучитьКодировкуСтандартныхПотоков());
    ПотокОшибок = ЧтениеПотокаОшибок.Прочитать();
    ЧтениеПотокаОшибок.Закрыть();
    
    Если ЗначениеЗаполнено(ПотокОшибок) Тогда
        
        УдалитьВременныйФайл(ФайлПотокаОшибок);
        УдалитьВременныйФайл(ФайлПотокаВывода);
    	Результат.ПотокОшибок = ПотокОшибок;
    	
    Иначе
    	ЧтениеПотокаВывода = Новый ЧтениеТекста(ФайлПотокаВывода, ПолучитьКодировкуСтандартныхПотоков()); 
    	ПотокВывода = ЧтениеПотокаВывода.Прочитать();
    	Если ПотокВывода = Неопределено Тогда
    		ПотокВывода = "";
    	КонецЕсли;
    	ЧтениеПотокаВывода.Закрыть();
    	
    	УдалитьВременныйФайл(ФайлПотокаОшибок);
        УдалитьВременныйФайл(ФайлПотокаВывода);
        
        Результат.ПотокВывода = ПотокВывода;
    	    	
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

&НаКлиенте
Процедура УдалитьВременныйФайл(ИмяФайла)
    
    ФайлУдалить = Новый Файл(ИмяФайла);
    ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьПроверкуСуществования", ЭтотОбъект, ИмяФайла);
    ФайлУдалить.НачатьПроверкуСуществования(ОписаниеОповещения);
    
    
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверкуСуществования(Существует, ДополнительныеПараметры) Экспорт
    
    ИмяФайла = ДополнительныеПараметры;
    
    Если Существует Тогда
        ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьУдалениеФайлов", ЭтотОбъект); 
        НачатьУдалениеФайлов(ОписаниеОповещения, ИмяФайла);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьУдалениеФайлов(ДополнительныеПараметры) Экспорт
    ДополнительныеПараметры = Неопределено;
КонецПроцедуры

// Возвращает кодировку стандартных поток вывода и ошибок, используемую в текущей ОС.
//
// Возвращаемое значение:
//  КодировкаТекста, кодировка стандартных потоков вывода и ошибок.
//
&НаКлиенте
Функция ПолучитьКодировкуСтандартныхПотоков() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация();
	Если (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86) Или (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
		//Кодировка = КодировкаТекста.OEM;
		Кодировка = "cp866"; // консоль выводить данные в текстовик в 866 кодировке
	Иначе
		Кодировка = КодировкаТекста.Системная;
	КонецЕсли;
	
	Возврат Кодировка;
	
КонецФункции

#КонецЕсли

&НаКлиенте
Процедура ОтборОбозревательЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(РезультатЗакрытия) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
        
        Компоновщик.ЗагрузитьФиксированныеНастройки(РезультатЗакрытия.ФиксированныеНастройки);
        ЭтотОбъект.ВидОтбора = "СКД";
        УстановитьОтбор();
        
    ИначеЕсли ТипЗнч(РезультатЗакрытия) = Тип("Строка") Тогда
        
        РегулярноеВыражение = РезультатЗакрытия;
        ЭтотОбъект.ВидОтбора = "РегВыражение";
        УстановитьОтбор();
        
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Процедура СнятьОтбор()
    
    КомпоновщикНовый = Новый КомпоновщикНастроекКомпоновкиДанных;
    Компоновщик.ЗагрузитьФиксированныеНастройки(КомпоновщикНовый.ПолучитьНастройки());
    ЭтотОбъект.РегулярноеВыражение = "";
    ВидОтбора = "";
    УстановитьОтбор();
    
    ЭтотОбъект.Элементы.ДекорацияОтбор.Заголовок = "";
    ЭтотОбъект.Элементы.ДекорацияОтбор1.Заголовок = "";
    
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
    
    ТЗнФильтр = РеквизитФормыВЗначение("ОборудованиеБуфер");
    
    Если ВидОтбора = "СКД" Тогда
        
        #Область СКД
        
        КомпоновщикБуфер = Новый КомпоновщикНастроекКомпоновкиДанных();
        
        СКД = Новый СхемаКомпоновкиДанных();
        ИсточникСКД = СКД.ИсточникиДанных.Добавить();
        ИсточникСКД.Имя = "ИсточникДанных1";
        ИсточникСКД.ТипИсточникаДанных = "local";
        
        НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
        НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
        НаборДанных.Имя = "НаборДанных1";
        НаборДанных.ИмяОбъекта = "НаборДанных1";
        Для Каждого Колонка Из ТЗнФильтр.Колонки Цикл
            Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
            Поле.Поле = Колонка.Имя;
            Поле.ПутьКДанным = Колонка.Имя;
            Поле.Заголовок = Колонка.Заголовок;
            Поле.ТипЗначения = Колонка.ТипЗначения;
        КонецЦикла;
        
        URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
        КомпоновщикБуфер.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
        
        КомпоновщикБуфер.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
        
        ГруппировкаНастроек = КомпоновщикБуфер.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
        
        Для Каждого Колонка Из ТЗнФильтр.Колонки Цикл
            
            Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
            ВыбранноеПоле = КомпоновщикБуфер.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
            ВыбранноеПоле.Использование = Истина;
            ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя);
            
        КонецЦикла;
        
        ТЗнБуфер = Новый ТаблицаЗначений;
        
        КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
        МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
        СКД, 
        КомпоновщикБуфер.Настройки,,,
        Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
        );
        
        ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
        ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, Новый Структура("НаборДанных1", ТЗнФильтр));
        
        ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
        ПроцессорВывода.УстановитьОбъект(ТЗнБуфер);
        
        ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
        
        ТЗнБуфер.Сортировать("Наименование");
        
        ЗначениеВРеквизитФормы(ТЗнБуфер, "Оборудование");
        
        ЭтотОбъект.Элементы.ДекорацияОтбор.Заголовок = Строка(Компоновщик.ФиксированныеНастройки.Отбор);
        ЭтотОбъект.Элементы.ДекорацияОтбор1.Заголовок = Строка(Компоновщик.ФиксированныеНастройки.Отбор);
        
        #КонецОбласти
        
    ИначеЕсли ВидОтбора = "РегВыражение" Тогда
        
        Если ТЗнФильтр.Количество() = 0 Тогда
            ТЗнБуфер = ТЗнФильтр.Скопировать();
        Иначе
            МассивСтрок = Новый Массив;
            МассивСтрок.Добавить(ТЗнФильтр[0]);
            ТЗнБуфер = ТЗнФильтр.Скопировать(МассивСтрок);
            ТЗнБуфер.Очистить();
        КонецЕсли;
        
        Для Каждого ТекСтрока Из ТЗнФильтр Цикл
            
            Если РегулярныеВыраженияКлиентСервер.СоответствуетШаблонуПоиска(ТекСтрока.Наименование, РегулярноеВыражение) Тогда
                
                НовСтрока = ТЗнБуфер.Добавить();
                Для Каждого ТекКолонка ИЗ ТЗнФильтр.Колонки Цикл
                    НовСтрока[ТекКолонка.Имя] = ТекСтрока[ТекКолонка.Имя];
                КонецЦикла;
                
            КонецЕсли;
                        
        КонецЦикла;
        
        ЗначениеВРеквизитФормы(ТЗнБуфер, "Оборудование");
        
        ЭтотОбъект.Элементы.ДекорацияОтбор.Заголовок = "Наименование соответсвует " + РегулярноеВыражение;
        ЭтотОбъект.Элементы.ДекорацияОтбор1.Заголовок = "Наименование соответсвует " + РегулярноеВыражение;
        
    ИначеЕсли ВидОтбора = "" Тогда
        
        ЗначениеВРеквизитФормы(ТЗнФильтр, "Оборудование");        
        
    КонецЕсли;
    
КонецПроцедуры


&НаКлиенте
Процедура ОкончаниеВводаФорматнойСтроки(Текст, ДополнительныеПараметры) Экспорт
    
    ЭтотОбъект[ДополнительныеПараметры] = Текст;
    	
КонецПроцедуры

&НаСервере
Процедура ОборудованиеОбновитьНаСервере(МассивНаименований = Неопределено)
    
    Если МассивНаименований = Неопределено ТОгда
        
        МассивНаименований = МассивНаименований(ЭтотОбъект.ОборудованиеШаблонНаименования, ЭтотОбъект.ОборудованиеФорматЧисла);
        
    КонецЕсли;
    
    ТаблицаНаименований = Новый ТаблицаЗначений();
    Для Индекс = 1 По МассивНаименований.Количество() Цикл
        ТаблицаНаименований.Добавить();
    КонецЦикла;
    ТаблицаНаименований.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
    
    ТаблицаНаименований.ЗагрузитьКолонку(МассивНаименований, "Наименование");
        
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ТаблицаНаименований.Наименование
    |ПОМЕСТИТЬ
    |   ТаблицаНаименований
    |ИЗ
    |   &ТаблицаНаименований КАК ТаблицаНаименований
    |;
    |ВЫБРАТЬ
    |   ВЫБОР
    |       КОГДА ISNULL(Оборудование.Ссылка, ИСТИНА) = ИСТИНА ТОГДА ЛОЖЬ
    |       ИНАЧЕ ИСТИНА
    |   КОНЕЦ КАК ЕстьСсылка,
    |   Оборудование.Ссылка КАК Ссылка,
    |   ТаблицаНаименований.Наименование
    |ИЗ
    |   ТаблицаНаименований
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   Справочник.Оборудование КАК Оборудование
    |ПО
    |   Оборудование.Наименование = ТаблицаНаименований.Наименование
    |";
    
    Запрос.УстановитьПараметр("ТаблицаНаименований", ТаблицаНаименований);
    
    Результат = Запрос.Выполнить();
    
    ЭтотОбъект.ОборудованиеБуфер.Загрузить(Запрос.Выполнить().Выгрузить());
    
    УстановитьОтбор();
    
    ЭтотОбъект.Оборудование.Сортировать("Наименование");
    
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивНаименований(ШаблонНаименования, ФорматнаяСтрока)
    
    Если НЕ ЗначениеЗаполнено(ФорматнаяСтрока) Тогда
        ФорматнаяСтрока = "ЧН=0; ЧГ=0";
    КонецЕсли;
        
    МассивБуфер = Новый Массив;
    МассивНаименований = Новый Массив;
    
    ТекущееСостояние  = "Чтение";
    
    Для Индекс = 1 По СтрДлина(ШаблонНаименования) Цикл
        
        Символ = Сред(ШаблонНаименования, Индекс, 1);
        
        Если Символ = "[" Тогда
            ТекущееСостояние = "НачалоДиапазона";
        ИначеЕсли Символ = "]" Тогда
            ТекущееСостояние = "КонецДиапазона";
        Иначе
            ТекущееСостояние = "Чтение";
        КонецЕсли;
        
        Если ТекущееСостояние = "Чтение" Тогда
            
            МассивБуфер.Добавить(Символ);
            
        ИначеЕсли ТекущееСостояние = "НачалоДиапазона" Тогда
            
            Если МассивБуфер.Количество() > 0 Тогда
                
                Если МассивНаименований.Количество() > 0 Тогда
                    
                    МассивНаименованийБуфер = Новый Массив;
                    
                    Постфикс = СтрСоединить(МассивБуфер, "");
                    МассивБуфер.Очистить();
                    
                    Для Каждого ТекЭлемент Из МассивНаименований Цикл
                        МассивНаименованийБуфер.Добавить(ТекЭлемент + Постфикс);
                    КонецЦикла;
                    
                    МассивНаименований = МассивНаименованийБуфер; 
                    
                Иначе
                    
                    МассивНаименований.Добавить(СтрСоединить(МассивБуфер, ""));
                    МассивБуфер.Очистить();
                    
                КонецЕсли;
                
            КонецЕсли;
                   
        ИначеЕсли ТекущееСостояние = "КонецДиапазона" Тогда
            
            Диапазон = СтрСоединить(МассивБуфер, "");
            МассивБуфер.Очистить();
            ДиапазонМассив = СтрРазделить(Диапазон, "-", Ложь);
            
            МассивНаименованийБуфер = Новый Массив;
            Для Каждого ТекЭлемент Из МассивНаименований Цикл
                Для ИндексДиапазона = Число(ДиапазонМассив[0]) По Число(ДиапазонМассив[1]) Цикл
                    МассивНаименованийБуфер.Добавить(ТекЭлемент + Формат(ИндексДиапазона, ФорматнаяСтрока));
                КонецЦикла;
            КонецЦикла;
            
            МассивНаименований = МассивНаименованийБуфер;
            
        КонецЕсли;
                
    КонецЦикла;
    
    Если МассивБуфер.Количество() > 0 Тогда
        
        Если МассивНаименований.Количество() > 0 Тогда
            
            МассивНаименованийБуфер = Новый Массив;
            
            Постфикс = СтрСоединить(МассивБуфер, "");
            МассивБуфер.Очистить();
            
            Для Каждого ТекЭлемент Из МассивНаименований Цикл
                МассивНаименованийБуфер.Добавить(ТекЭлемент + Постфикс);
            КонецЦикла;
            
            МассивНаименований = МассивНаименованийБуфер; 
            
        Иначе
            
            МассивНаименований.Добавить(СтрСоединить(МассивБуфер, ""));
            МассивБуфер.Очистить();
            
        КонецЕсли; 
        
    КонецЕсли;
        
    Возврат МассивНаименований;
    
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыОборудование()
    
    ДобавитьСтроку(ЭтотОбъект.ОборудованиеПараметры, Истина, "СобиратьДанныеПроизводительности", "Включить сбор счетчиков", Истина);
    ДобавитьСтроку(ЭтотОбъект.ОборудованиеПараметры, Истина, "ЯзыкОС", "Язык ОС", Перечисления.ЯзыкиСистемы.Английский);
    ДобавитьСтроку(ЭтотОбъект.ОборудованиеПараметры, Истина, "ПроверятьДоступность", "Проверять доступность", Истина);
    ДобавитьСтроку(ЭтотОбъект.ОборудованиеПараметры, Истина, "Таймаут", "Таймаут, сек.", 3);
    ДобавитьСтроку(ЭтотОбъект.ОборудованиеПараметры, Истина, "ПериодКонтроля", "Период контроля, сек.", 120);
    ДобавитьСтроку(ЭтотОбъект.ОборудованиеПараметры, Истина, "МинимальныйПроцентДоступности", "Минимальная доступность, %", 90);
    ДобавитьСтроку(ЭтотОбъект.ОборудованиеПараметры, Истина, "ДопустимоНетДанных", "Допустимо нет данных, сек.", 120);
       
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтроку(ТабличнаяЧасть, Использовать, Параметр, ПараметрПредставление, ЗначениеПараметра)
    
    НовСтрока = ТабличнаяЧасть.Добавить();
    НовСтрока.Использовать = Использовать;
    НовСтрока.Параметр = Параметр;
    НовСтрока.ПараметрПредставление = ПараметрПредставление;
    НовСтрока.ЗначениеПараметра = ЗначениеПараметра;
    
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиНаСервере()
    
    ПараметрыКоманды = Новый Соответствие;
    ПараметрыКоманды.Вставить("equipmentLocation", Строка(ЭтотОбъект.ПлощадкаЭксплуатации));
    
    УстановитьНастройкиОборудование(ПараметрыКоманды);
    
    ЗаписьJSON = Новый ЗаписьJSON();
    ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
    ЗаписатьJSON(ЗаписьJSON, ПараметрыКоманды);
    ДанныеСтрока = ЗаписьJSON.Закрыть();
    
    ЕдиницаМасштабирования.ЗагрузитьЕдиницуМасштабирования(ПараметрыКоманды);
    
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиОборудование(ПараметрыКоманды)
    
    Настройки = Новый Соответствие;
    Для Каждого ТекНастройка Из ЭтотОбъект.ОборудованиеПараметры Цикл
        
        Если ТекНастройка.Использовать Тогда
            Настройки.Вставить(ТекНастройка.Параметр, ТекНастройка.ЗначениеПараметра);
        КонецЕсли;
        
    КонецЦикла;
    
    
    ОборудованиеДляЗаписи = Новый Массив;
       
    Для Каждого ТекОборудование Из ЭтотОбъект.Оборудование Цикл
        
        ЕдиницаОборудования = Новый Соответствие;
        ЕдиницаОборудования.Вставить("description", ТекОборудование.Наименование);
        ЕдиницаОборудования.Вставить("host", ТекОборудование.Наименование);
        
        ДобавитьПараметр("collectPerformanceData", "СобиратьДанныеПроизводительности", Настройки, ЕдиницаОборудования);
        ДобавитьПараметр("languageOS", "ЯзыкОС", Настройки, ЕдиницаОборудования);
        ДобавитьПараметр("checkAvailability", "ПроверятьДоступность", Настройки, ЕдиницаОборудования);
        ДобавитьПараметр("timeout", "Таймаут", Настройки, ЕдиницаОборудования);
        ДобавитьПараметр("сontrolPeriod", "ПериодКонтроля", Настройки, ЕдиницаОборудования);
        ДобавитьПараметр("мinPercentageAvailability", "МинимальныйПроцентДоступности", Настройки, ЕдиницаОборудования);
        ДобавитьПараметр("noDataAllowed", "ДопустимоНетДанных", Настройки, ЕдиницаОборудования);
        
        РолиОборудования = Новый Массив;
        Если ЭтотОбъект.ОборудованиеРолиОборудования.Количество() > 0 Тогда
            Для Каждого ТекРоль Из ЭтотОбъект.ОборудованиеРолиОборудования Цикл
                РолиОборудования.Добавить(Строка(ТекРоль.Роль));
            КонецЦикла;
        КонецЕсли;
        
        ЕдиницаОборудования.Вставить("role", РолиОборудования);
                
        ОборудованиеДляЗаписи.Добавить(ЕдиницаОборудования);
        
    КонецЦикла;
    
    ПараметрыКоманды.Вставить("equipment", ОборудованиеДляЗаписи);
        
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьПараметр(Ключ, КлючНастройки, Настройки, Параметры)
    
    ЗначениеПараметра = Настройки[КлючНастройки];
    Если ЗначениеПараметра <> Неопределено Тогда
        Параметры.Вставить(Ключ, Строка(ЗначениеПараметра));
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеРолиОборудованияРольОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    
    ПараметрыОтбора = Новый Структура("Роль", ВыбранноеЗначение);
    МассивСтрок = ОборудованиеРолиОборудования.НайтиСтроки(ПараметрыОтбора);
    
    Если МассивСтрок.Количество() > 0 И МассивСтрок[0].ПолучитьИдентификатор() <> Элемент.Родитель.ТекущиеДанные.ПолучитьИдентификатор() Тогда
        
        Элементы.ОборудованиеРолиОборудования.ЗакончитьРедактированиеСтроки(Истина);
        СтандартнаяОбработка = Ложь;
        
        Сообщение = Новый СообщениеПользователю;
	    Сообщение.Текст = "Значение " + ВыбранноеЗначение + " уже выбрано!";
	    Сообщение.Поле = "ОборудованиеРолиОборудования";
	    Сообщение.Сообщить();
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти
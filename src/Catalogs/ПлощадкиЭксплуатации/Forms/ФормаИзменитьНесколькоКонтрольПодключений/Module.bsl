
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    ЗаполнитьПараметрыЗаписи();
    
    Если ЭтотОбъект.Параметры.Свойство("ЭлементыПлощадки") Тогда
        
        МассивКонтрольПодключений = ПолучитьКонтрольПодключений(ЭтотОбъект.Параметры.ЭлементыПлощадки);
        КонтрольПодключений = Новый СписокЗначений;
        КонтрольПодключений.ЗагрузитьЗначения(МассивКонтрольПодключений);
        
        //Если КонтрольПодключений.Количество() > 0 Тогда
            НовЭлемент = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
            НовЭлемент.Использование = Истина;
            НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтрольПодключений");
            НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
            НовЭлемент.ПравоеЗначение = КонтрольПодключений;
        //КонецЕсли;
                    
    КонецЕсли;
    
    ИнициализироватьКомпоновщик();
    УстановитьОтбор();
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьВсе(Команда)
    
    Для Каждого ТекСтрока Из ЭтотОбъект.ПараметрыЗаписи Цикл
        ТекСтрока.Изменить = Истина;
        Элементы["Список" + ТекСтрока.Параметр].Видимость = Истина; 
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
    
    Для Каждого ТекСтрока Из ЭтотОбъект.ПараметрыЗаписи Цикл
        ТекСтрока.Изменить = Ложь;
        Элементы["Список" + ТекСтрока.Параметр].Видимость = Ложь; 
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
    
    ЗаписатьИзменения();
    ЭтотОбъект.Закрыть();
    
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
    ЗаписатьИзменения();
КонецПроцедуры

&НаКлиенте
Процедура НайтиОтличныеОт(Команда)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные;
    ТекДанные.ЕстьОтбор = Истина;
    УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
    
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтличныеОт(Команда)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные;
    ТекДанные.ЕстьОтбор = Ложь;
    СнятьОтборПоПараметру(ТекДанные.Параметр);
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПараметрыЗаписиПараметрЗначениеПриИзменении(Элемент)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные; 
    ЭтотОбъект[ТекДанные.Параметр] = ТекДанные.ПараметрЗначение; 
    
    Если ТекДанные.ЕстьОтбор Тогда
        УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиПараметрЗначениеПарольПриИзменении(Элемент)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные;
    
    Если ТекДанные.Параметр = "ПарольПриПодключении" Тогда
        
        ТекДанные.ПараметрЗначение = ТекДанные.ПараметрЗначениеПароль;
        ЭтотОбъект[ТекДанные.Параметр] = ТекДанные.ПараметрЗначение; 
        
        Если ТекДанные.ЕстьОтбор Тогда
            УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
        КонецЕсли;
    
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиИзменитьПриИзменении(Элемент)
    
    Элементы["Список" + Элемент.Родитель.ТекущиеДанные.Параметр].Видимость = Элемент.Родитель.ТекущиеДанные.Изменить; 
    
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастройкиОтборПриИзменении(Элемент)
    УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    ТекДанные = Элемент.ТекущиеДанные;
        
    Если Поле.Имя = "ПараметрыЗаписиЕстьОтбор" Тогда
        
        Если Элемент.ТекущиеДанные.ЕстьОтбор Тогда
            УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
        Иначе
            СнятьОтборПоПараметру(ТекДанные.Параметр);
        КонецЕсли;
        
        СтандартнаяОбработка = Ложь;
        
        Элементы.КомпоновщикНастройкиОтбор.ОбновитьТекстРедактирования();
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиПриАктивизацииСтроки(Элемент)
    
    ТекДанные = Элемент.ТекущиеДанные;
    
    Если ТекДанные.Параметр = "ТипПодключения" Тогда
        
        Элементы.ПараметрыЗаписиПараметрЗначение.РежимВыбораИзСписка = Истина;
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Очистить();
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Добавить("RAS");
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Добавить("COM");
        Элементы.ПараметрыЗаписиПараметрЗначение.РедактированиеТекста = Ложь;
           
    Иначе
        
        Элементы.ПараметрыЗаписиПараметрЗначение.РежимВыбораИзСписка = Ложь;
        Элементы.ПараметрыЗаписиПараметрЗначение.СписокВыбора.Очистить();
        Элементы.ПараметрыЗаписиПараметрЗначение.РедактированиеТекста = Истина;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиЕстьОтборПриИзменении(Элемент)
    
    ТекДанные = Элементы.ПараметрыЗаписи.ТекущиеДанные;
    
    Если ТекДанные.ЕстьОтбор Тогда
        УстановитьОтборПоПараметру(ТекДанные.Параметр, ТекДанные.ПараметрЗначение);
    Иначе
        СнятьОтборПоПараметру(ТекДанные.Параметр);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьКонтрольПодключений(ЭлементыПлощадкиМассив)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   ВЫРАЗИТЬ(ЕдиницаКонтроля КАК Справочник.КонтрольныеПроцедуры) КАК КонтрольПодключений
    |ИЗ
    |   Справочник.ПлощадкиЭксплуатации
    |ГДЕ
    |   Ссылка В (&МассивСсылок)
    |   И ТипЭлемента = &ТипЭлемента
    |";
    
    Запрос.УстановитьПараметр("МассивСсылок", ЭлементыПлощадкиМассив);
    Запрос.УстановитьПараметр("ТипЭлемента", Перечисления.ТипЭлементаПлощадки.КонтрольПодключений);
    
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КонтрольПодключений");
    
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыЗаписи()
    
    НастройкиПоУмолчанию = РегистрыСведений.НастройкиКонтрольПодключений.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений());
        
    ДобавитьПараметр("МеханизмПроверкиОбрабатыватьИзменения", "Способ подключения", НастройкиПоУмолчанию["МеханизмПроверкиОбрабатыватьИзменения"]);
    ДобавитьПараметр("ЛогинПриПодключении", "Пользователь", НастройкиПоУмолчанию["ЛогинПриПодключении"]);
    ДобавитьПараметр("ПарольПриПодключении", "Пароль", НастройкиПоУмолчанию["ПарольПриПодключении"]);
    Если НастройкиПоУмолчанию["МеханизмПроверкиОбрабатыватьИзменения"] = Перечисления.МеханизмыПроверкиПодключения.WEBСервис Тогда
        ДобавитьПараметр("СтрокаСоединения", "Строка соединения", НастройкиПоУмолчанию["URLОпубликованнойИнформационнойБазы"]);
    ИначеЕсли НастройкиПоУмолчанию["МеханизмПроверкиОбрабатыватьИзменения"] = Перечисления.МеханизмыПроверкиПодключения.COMСоединитель Тогда
        ДобавитьПараметр("СтрокаСоединения", "Строка соединения", НастройкиПоУмолчанию["СтрокаСоединения"]);
    Иначе
        ДобавитьПараметр("СтрокаСоединения", "Строка соединения", НастройкиПоУмолчанию["URLОпубликованнойИнформационнойБазы"]);
    КонецЕсли;
    ДобавитьПараметр("Таймаут", "Таймаут, сек.", НастройкиПоУмолчанию["Таймаут"]);
    ДобавитьПараметр("ПериодКонтроля", "Период контроля, сек.", НастройкиПоУмолчанию["ПериодКонтроля"]);
    ДобавитьПараметр("МинимальныйПроцентДоступности", "Минимальная доступность, %", НастройкиПоУмолчанию["МинимальныйПроцентДоступности"]);
    ДобавитьПараметр("ДопустимоНетДанных", "Допустимо нет данных, сек.", НастройкиПоУмолчанию["ДопустимоНетДанных"]);
    ДобавитьПараметр("ИспользоватьПрокси", "Использовать прокси", НастройкиПоУмолчанию["ИспользоватьПрокси"]);
    ДобавитьПараметр("ПроксиСервер", "Сервер прокси", НастройкиПоУмолчанию["ПроксиСервер"]);
    ДобавитьПараметр("ПроксиПорт", "Порт прокси сервера", НастройкиПоУмолчанию["ПроксиПорт"]);
    
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметр(Параметр, ПараметрПредставление, ПараметрЗначение)
    
    ЭтотОбъект[Параметр] = ПараметрЗначение;
    
    НовСтрока = ЭтотОбъект.ПараметрыЗаписи.Добавить();
    НовСтрока.Изменить = Истина;
    НовСтрока.Параметр = Параметр;
    НовСтрока.ПараметрПредставление = ПараметрПредставление;
    НовСтрока.ПараметрЗначение = ПараметрЗначение;
    НовСтрока.ПараметрЗначениеПароль = ПараметрЗначение;
    НовСтрока.ЕстьОтбор = Ложь;
    
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзменения()
    
    НастройкиДляЗаписи = Новый Структура;
    
    МеханизмПроверкиОбрабатыватьИзменения = Неопределено;
    Для Каждого ТекСтрока Из ПараметрыЗаписи Цикл
        
        Если ТекСтрока.Параметр = "МеханизмПроверкиОбрабатыватьИзменения" Тогда
            МеханизмПроверкиОбрабатыватьИзменения = ТекСтрока.ПараметрЗначение;
        КонецЕсли;
        
        Если ТекСтрока.Изменить Тогда
            
            Если ТекСтрока.Параметр <> "СтрокаСоединения" Тогда
                НастройкиДляЗаписи.Вставить(ТекСтрока.Параметр, ТекСтрока.ПараметрЗначение);
            Иначе
                Если МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.WEBСервис Тогда
                    НастройкиДляЗаписи.Вставить("URLОпубликованнойИнформационнойБазы", ТекСтрока.ПараметрЗначение);
                Иначе
                    НастройкиДляЗаписи.Вставить("СтрокаСоединения", ТекСтрока.ПараметрЗначение);
                КонецЕсли;
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
    КонтрольПодключенийСписок = Новый СписокЗначений;
    Для Каждого ТекСтрока Из Список Цикл
        РегистрыСведений.НастройкиКонтрольПодключений.ЗаписатьНастройки(ТекСтрока.КонтрольПодключений, НастройкиДляЗаписи);
        КонтрольПодключенийСписок.Добавить(ТекСтрока.КонтрольПодключений);
    КонецЦикла;
    
    Компоновщик.Настройки.Отбор.Элементы.Очистить();
    
    Для Каждого ТекПараметр Из ПараметрыЗаписи Цикл
        ТекПараметр.ЕстьОтбор = Ложь;
    КонецЦикла;
    
    НовЭлемент = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    НовЭлемент.Использование = Истина;
    НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтрольПодключений");
    НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
    НовЭлемент.ПравоеЗначение = КонтрольПодключенийСписок;
    
    УстановитьОтбор();
    
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщик()
    
    СКД = Новый СхемаКомпоновкиДанных();
	ИсточникСКД = СКД.ИсточникиДанных.Добавить();
	ИсточникСКД.Имя = "ИсточникДанных1";
	ИсточникСКД.ТипИсточникаДанных = "local";
    
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    НаборДанных.ИмяОбъекта = "НаборДанных1";
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "КонтрольПодключений";
    Поле.ПутьКДанным = "КонтрольПодключений";
    Поле.Заголовок = "Контроль подключений";
    Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.КонтрольныеПроцедуры");
    Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Наименование";
    Поле.ПутьКДанным = "Наименование";
    Поле.Заголовок = "Наименование";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "МеханизмПроверкиОбрабатыватьИзменения";
    Поле.ПутьКДанным = "МеханизмПроверкиОбрабатыватьИзменения";
    Поле.Заголовок = "Способ подключения";
    Поле.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.МеханизмыПроверкиПодключения");
    Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ЛогинПриПодключении";
    Поле.ПутьКДанным = "ЛогинПриПодключении";
    Поле.Заголовок = "Пользователь";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ПарольПриПодключении";
    Поле.ПутьКДанным = "ПарольПриПодключении";
    Поле.Заголовок = "Пароль";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "СтрокаСоединения";
    Поле.ПутьКДанным = "СтрокаСоединения";
    Поле.Заголовок = "Строка соединения";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ИспользоватьПрокси";
    Поле.ПутьКДанным = "ИспользоватьПрокси";
    Поле.Заголовок = "Использовать прокси";
    Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "СерверПрокси";
    Поле.ПутьКДанным = "СерверПрокси";
    Поле.Заголовок = "Сервер прокси";
    Поле.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ПортПрокси";
    Поле.ПутьКДанным = "ПортПрокси";
    Поле.Заголовок = "Порт сервера прокси";
    Поле.ТипЗначения = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "Таймаут";
    Поле.ПутьКДанным = "Таймаут";
    Поле.Заголовок = "Таймаут, сек.";
    Поле.ТипЗначения = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ПериодКонтроля";
    Поле.ПутьКДанным = "ПериодКонтроля";
    Поле.Заголовок = "Период контроля, сек.";
    Поле.ТипЗначения = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "МинимальныйПроцентДоступности";
    Поле.ПутьКДанным = "МинимальныйПроцентДоступности";
    Поле.Заголовок = "Минимальная доступность, %";
    Поле.ТипЗначения = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3,0));
    
    Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    Поле.Поле = "ДопустимоНетДанных";
    Поле.ПутьКДанным = "ДопустимоНетДанных";
    Поле.Заголовок = "Допустимо нет данных, сек.";
    Поле.ТипЗначения = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0));
                
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    
    ГруппировкаНастроек = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
        
    Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Использование = Истина;
    ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("КонтрольПодключений");
    
    Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Использование = Истина;
    ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
    
    Для Каждого ТекПараметр Из ПараметрыЗаписи Цикл
        
        Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле.Использование = Истина;
        ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ТекПараметр.Параметр);
                
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура КомпоновщикНастройкиОтборПриИзмененииНаСервере()
    
    УстановитьОтбор();
    
КонецПроцедуры

&НаКлиенте
Функция ГруппаНайтиОтличныеОт(Создать = Истина)
    
    ГруппаНайтиОтличныеОт = Неопределено;
    
    Для Каждого ТекЭлемент Из Компоновщик.Настройки.Отбор.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ТекЭлемент.ИдентификаторПользовательскойНастройки = "b1c27381-4a1c-4dc2-9aea-3dc9b02baa72" Тогда
            ГруппаНайтиОтличныеОт = ТекЭлемент;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Если ГруппаНайтиОтличныеОт = Неопределено И Создать Тогда
        
        ГруппаНайтиОтличныеОт = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        ГруппаНайтиОтличныеОт.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
        ГруппаНайтиОтличныеОт.Использование = Истина;
        ГруппаНайтиОтличныеОт.ИдентификаторПользовательскойНастройки = "b1c27381-4a1c-4dc2-9aea-3dc9b02baa72";
        
    КонецЕсли;
    
    Возврат ГруппаНайтиОтличныеОт;
    
КонецФункции

&НаКлиенте
Процедура УстановитьОтборПоПараметру(Параметр, ПараметрЗначение)
    
    ГруппаНайтиОтличныеОт = ГруппаНайтиОтличныеОт();
        
    ЭлементОтбора = Неопределено;
    
    Для Каждого ТекЭлемент Из ГруппаНайтиОтличныеОт.Элементы Цикл
        Если Строка(ТекЭлемент.ЛевоеЗначение) = Параметр Тогда
            ЭлементОтбора = ТекЭлемент;
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    Если ЭлементОтбора = Неопределено Тогда
        ЭлементОтбора = ГруппаНайтиОтличныеОт.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    КонецЕсли;
    
    ЭлементОтбора.Использование = Истина;
    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Параметр);
    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементОтбора.ПравоеЗначение = ПараметрЗначение;
    
    Элементы.КомпоновщикНастройкиОтбор.ОбновитьТекстРедактирования();
    
    КомпоновщикНастройкиОтборПриИзмененииНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтборПоПараметру(Параметр)
    
    ГруппаНайтиОтличныеОт = ГруппаНайтиОтличныеОт(Ложь);
    
    Если ГруппаНайтиОтличныеОт <> Неопределено Тогда
                
        ЭлементОтбора = Неопределено;
        
        Для Каждого ТекЭлемент Из ГруппаНайтиОтличныеОт.Элементы Цикл
            Если Строка(ТекЭлемент.ЛевоеЗначение) = Параметр Тогда
                ЭлементОтбора = ТекЭлемент;
                Прервать;
            КонецЕсли;
        КонецЦикла;
        
        Если ЭлементОтбора = Неопределено Тогда
            ЭлементОтбора = ГруппаНайтиОтличныеОт.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        КонецЕсли;
        
        Если ЭлементОтбора <> Неопределено Тогда
            
            ГруппаНайтиОтличныеОт.Элементы.Удалить(ЭлементОтбора);
            Элементы.КомпоновщикНастройкиОтбор.ОбновитьТекстРедактирования();
            
            Если ГруппаНайтиОтличныеОт.Элементы.Количество() = 0 Тогда
                Компоновщик.Настройки.Отбор.Элементы.Удалить(ГруппаНайтиОтличныеОт);
            КонецЕсли;
            
            КомпоновщикНастройкиОтборПриИзмененииНаСервере();
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементОтбора(ГруппаЭлементов, ИмяЭлемента)
    
    ЭлементыУдалить = Новый Массив;
    
    Для Каждого ТекЭлемент Из ГруппаЭлементов.Элементы Цикл
        
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
            УдалитьЭлементОтбора(ТекЭлемент, ИмяЭлемента);
        Иначе
            Если Строка(ТекЭлемент.ЛевоеЗначение) = ИмяЭлемента Тогда
                ЭлементыУдалить.Добавить(ТекЭлемент);
            КонецЕсли;
        КонецЕсли;
                
    КонецЦикла;
    
    Для Каждого ТекЭлемент Из ЭлементыУдалить Цикл
        ГруппаЭлементов.Элементы.Удалить(ТекЭлемент);
    КонецЦикла;
            
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
    
    Если НЕ Компоновщик.ПолучитьНастройки().НаличиеОтбораУЭлемента(Компоновщик.ПолучитьНастройки()) Тогда
        Для Каждого ТекСтрока Из ПараметрыЗаписи Цикл
            ТекСтрока.ЕстьОтбор = Ложь;
        КонецЦикла;
    КонецЕсли;
        
    КомпоновщикЗапрос = Новый КомпоновщикНастроекКомпоновкиДанных();
    СКД = Новый СхемаКомпоновкиДанных();
    
    ИсточникСКД = СКД.ИсточникиДанных.Добавить();
    ИсточникСКД.Имя = "ИсточникДанных1";
    ИсточникСКД.ТипИсточникаДанных = "local";
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанных.Запрос = ТекстЗапроса(); 
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
    КомпоновщикЗапрос.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    КомпоновщикЗапрос.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
    УдалитьИзВременногоХранилища(URLСхемы);
    
    УдалитьЭлементОтбора(КомпоновщикЗапрос.Настройки.Отбор, "ЛогинПриПодключении");
    УдалитьЭлементОтбора(КомпоновщикЗапрос.Настройки.Отбор, "ПарольПриПодключении");
        
    ГруппировкаНастроек = КомпоновщикЗапрос.Настройки.Структура[0];
    
    Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле = КомпоновщикЗапрос.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Использование = Истина;
    ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ДанныеХранилища");
    
    УстановитьПривилегированныйРежим(Истина);
    
    ТЗнБуфер = Новый ТаблицаЗначений;
   
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
        СКД, 
        КомпоновщикЗапрос.Настройки,,,
        Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
    );
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
    ПроцессорВывода.УстановитьОбъект(ТЗнБуфер);
        
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
    
    УстановитьПривилегированныйРежим(Ложь);
    
    Для Каждого ТекСтрока Из ТЗнБуфер Цикл
        
        Если ТекСтрока.ДанныеХранилища <> Неопределено Тогда
            ДанныеХранилища = ТекСтрока.ДанныеХранилища.Получить();
            Если ДанныеХранилища <> Неопределено Тогда
                ТекСтрока.ЛогинПриПодключении = ДанныеХранилища.ЛогинПриПодключении;
                ТекСтрока.ПарольПриПодключении = ДанныеХранилища.ПарольПриПодключении;
            Иначе
                ТекСтрока.ЛогинПриПодключении = "";
                ТекСтрока.ПарольПриПодключении = "";
            КонецЕсли;
        Иначе
            ТекСтрока.ЛогинПриПодключении = "";
            ТекСтрока.ПарольПриПодключении = "";
        КонецЕсли;
                
    КонецЦикла;
    
    СписокБуфер = Новый ТаблицаЗначений;
    
    СКД = Новый СхемаКомпоновкиДанных();
    ИсточникСКД = СКД.ИсточникиДанных.Добавить();
    ИсточникСКД.Имя = "ИсточникДанных1";
    ИсточникСКД.ТипИсточникаДанных = "local";
    
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    НаборДанных.ИмяОбъекта = "НаборДанных1";
    
    Для Каждого Колонка Из ТЗнБуфер.Колонки Цикл
        Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
        Поле.Поле = Колонка.Имя;
        Поле.ПутьКДанным = Колонка.Имя;
        Поле.Заголовок = Колонка.Заголовок;
        Поле.ТипЗначения = Колонка.ТипЗначения;
    КонецЦикла;
    
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
    
    КомпоновщикБуфер = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикБуфер.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    КомпоновщикБуфер.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
        СКД, 
        КомпоновщикБуфер.Настройки,,,
        Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
    );
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, Новый Структура("НаборДанных1", ТЗнБуфер));
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
    ПроцессорВывода.УстановитьОбъект(СписокБуфер);
    
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
    ЭтотОбъект.Список.Загрузить(СписокБуфер);
            
КонецПроцедуры

&НаСервере
Функция ТекстЗапроса()
    
    ТекстЗапроса = "
    |ВЫБРАТЬ
    |   НастройкиКонтрольПодключений.КонтрольнаяПроцедура КАК КонтрольПодключений,
    |   КонтрольныеПроцедуры.Наименование КАК Наименование,
    |   ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ЛогинПриПодключении,
    |   ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ПарольПриПодключении,
    |   БезопасноеХранилище.ДанныеХранилища КАК ДанныеХранилища,
    |   НастройкиКонтрольПодключений.URLОпубликованнойИнформационнойБазы,
    |   ВЫБОР
    |       КОГДА
    |           НастройкиКонтрольПодключений.МеханизмПроверкиОбрабатыватьИзменения = Значение(Перечисление.МеханизмыПроверкиПодключения.WEBСервис)
    |       ТОГДА
    |           НастройкиКонтрольПодключений.URLОпубликованнойИнформационнойБазы
    |       КОГДА
    |           НастройкиКонтрольПодключений.МеханизмПроверкиОбрабатыватьИзменения = Значение(Перечисление.МеханизмыПроверкиПодключения.COMСоединитель)
    |       ТОГДА
    |           НастройкиКонтрольПодключений.СтрокаСоединения
    |       ИНАЧЕ
    |           НастройкиКонтрольПодключений.URLОпубликованнойИнформационнойБазы 
    |   КОНЕЦ КАК СтрокаСоединения,
    |";
    
    Для Каждого ТекПараметр Из ПараметрыЗаписи Цикл
        
        Если
            ТекПараметр.Параметр <> "ЛогинПриПодключении"
            И ТекПараметр.Параметр <> "ПарольПриПодключении"
            И ТекПараметр.Параметр <> "URLОпубликованнойИнформационнойБазы"
            И ТекПараметр.Параметр <> "СтрокаСоединения"
        Тогда
            ТекстЗапроса = ТекстЗапроса + " НастройкиКонтрольПодключений." + ТекПараметр.Параметр + ",";
        КонецЕсли;
        
    КонецЦикла;
    
    ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1) + "
    |ИЗ
    |   РегистрСведений.НастройкиКонтрольПодключений КАК НастройкиКонтрольПодключений
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.КонтрольныеПроцедуры КАК КонтрольныеПроцедуры
    |ПО
    |   КонтрольныеПроцедуры.Ссылка = НастройкиКонтрольПодключений.КонтрольнаяПроцедура 
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.БезопасноеХранилище КАК БезопасноеХранилище
    |ПО
    |   БезопасноеХранилище.ВладелецХранилища = НастройкиКонтрольПодключений.КонтрольнаяПроцедура
    |";
           
    Возврат ТекстЗапроса;
    
КонецФункции

#КонецОбласти

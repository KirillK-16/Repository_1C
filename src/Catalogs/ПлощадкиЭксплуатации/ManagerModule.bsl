#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция НайтиЭлементПоЕдиницеКонтроля(ЕдиницаКонтроля, ТипЭлемента) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.ПлощадкиЭксплуатации
    |ГДЕ
    |   ЕдиницаКонтроля = &ЕдиницаКонтроля
    |   И ТипЭлемента = &ТипЭлемента
    |";
    
    Запрос.УстановитьПараметр("ЕдиницаКонтроля", ЕдиницаКонтроля);
    Запрос.УстановитьПараметр("ТипЭлемента", ТипЭлемента);
    
    Результат = Запрос.Выполнить();
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Возврат Выборка.Ссылка;
    Иначе
        Возврат Справочники.ПлощадкиЭксплуатации.ПустаяСсылка();
    КонецЕсли;
        
КонецФункции

// Добавляет в площадку единицу контроля.
//
// Параметры:
//  ПлощадкаЭксплуатации - СправочникСсылка.ПлощадкиЭксплуатации - площадка, в которую добавляется единица контроля.
//  ЕдиницаКонтроля      - СправочникСсылка.Оборудование, СправочникСсылка.ОбъектыКонтроля, Справочникссылка.КонтрольныеПроцедуры, СправочникСсылка.Публикации - единица контроля для добавления.
//  ТипГруппы   - Перечисление.ТипЭлементаПлощадки               - тип группы площадки эксплуатации.
//  ТипЭлемента - Перечисление.ТипЭлементаПлощадки               - тип элемента площадки эксплуатации.
//  ЭтоГруппа   - Булево                                         - тип добавляемой единицы, значение по умолчанию Ложь.
// 
// Возвращаемое значение:
//  Ссылка - СправочникСсылка.ПлощадкиЭксплуатации
//
Процедура ДобавитьВПлощадку(ПлощадкаЭксплуатации, ЕдиницаКонтроля, ТипГруппы, ТипЭлемента, ЭтоГруппа = Ложь, РодительДляВосстановления = Неопределено) Экспорт
    
    Корзина = Справочники.ПлощадкиЭксплуатации.Корзина(); 
    Если НЕ ПлощадкаЭксплуатации = Корзина Тогда
        
        ГруппаПлощадки = ПолучитьГруппуПлощадки(ПлощадкаЭксплуатации, ТипГруппы);
        Если ГруппаПлощадки = Неопределено Тогда
            ГруппаПлощадки = СоздатьГруппуПлощадки(ПлощадкаЭксплуатации, ТипГруппы);
        Иначе
            Если ГруппаПлощадки.Скрыть Тогда
                ГруппаПлощадкиОбъект = ГруппаПлощадки.ПолучитьОбъект();
                ГруппаПлощадкиОбъект.Скрыть = Ложь;
                ГруппаПлощадкиОбъект.Записать();
            КонецЕсли;
        КонецЕсли;
        
        ЭлементГруппы = ПолучитьЭлементГруппы(ГруппаПлощадки, ЕдиницаКонтроля, ТипЭлемента);
        Если ЭлементГруппы = Неопределено Тогда
            ЭлементГруппы = СоздатьЭлементГруппы(ГруппаПлощадки, ЕдиницаКонтроля, ТипЭлемента, ЭтоГруппа);
        КонецЕсли;
        
    КонецЕсли;
        
КонецПроцедуры

// Удаляет из площадки
//
// Параметры:
//  ПлощадкаЭксплуатации - СправочникСсылка.ПлощадкиЭксплуатации - родитель, в котором ищется площадка по значению ТипГруппы
//  ЕдиницаКонтроля      - СправочникСсылка.Оборудование, СправочникСсылка.КонтрольныеПроцедуры - единица контроля
//  ТипГруппы            - Перечисления.ТипЭлементаПлощадки - тип группы для поиска группы
//  ТипЭлемента          - Перечисления.ТипЭлементаПлощадки - тип элемента для удаления
//
Процедура УдалитьИзПлощадки(ПлощадкаЭксплуатации, ЕдиницаКонтроля, ТипГруппы, ТипЭлемента) Экспорт
    
    ГруппаПлощадки = ПолучитьГруппуПлощадки(ПлощадкаЭксплуатации, ТипГруппы);
    ЭлементГруппы = ПолучитьЭлементГруппы(ГруппаПлощадки, ЕдиницаКонтроля, ТипЭлемента);
    ЭлементГруппыОбъект = ЭлементГруппы.ПолучитьОбъект();
    Если ЭлементГруппыОбъект <> Неопределено Тогда
        ЭлементГруппыОбъект.Родитель = Неопределено;
        ЭлементГруппыОбъект.Записать();
        ЭлементГруппыОбъект.ДополнительныеСвойства.Вставить("РазрешитьУдалить", Истина);
        ЭлементГруппыОбъект.Удалить();
    КонецЕсли;
            
КонецПроцедуры

// Перенести единицу контроля в новую площадку.
//
// Параметры:
//  Ссылка                 - СправочникСсылка.КонтрольныеПроцедуры, СправочникСсылка.ОбъектыКонтроля, СправочникСсылка.Публикации, СправочникСсылка.Оборудование - единица контроля, которую небходимо перенести.
//  ПлощадкаЭксплуатацииВ  - СправочникСсылка.ПлощадкиЭксплуатации - родитель куда переносим.
//  ПлощадкаЭксплуатацииИз - СправочникСсылка.ПлощадкиЭксплуатации - родитель откуда переносим.
//  ТипГруппы              - Перечисления.ТипЭЛементаПлощадки      - тип группы переноса
//  ТипЭлемента            - Перечисления.ТипЭЛементаПлощадки      - тип элемента переноса
//
Процедура ПеренестиВНовуюПлощадку(Ссылка, ПлощадкаЭксплуатацииВ, ПлощадкаЭксплуатацииИз, ТипГруппы, ТипЭлемента) Экспорт
    
    Если ПлощадкаЭксплуатацииВ <> ПлощадкаЭксплуатацииИз Тогда   
        ГруппаПлощадки = ПолучитьГруппуПлощадки(ПлощадкаЭксплуатацииИз, ТипГруппы);
        ЭлементПлощадки = ПолучитьЭлементГруппы(ГруппаПлощадки, Ссылка, ТипЭлемента);
        
        ГруппаПлощадкиНовая = ПолучитьГруппуПлощадки(ПлощадкаЭксплуатацииВ, ТипГруппы);
        Если ГруппаПлощадкиНовая = Неопределено Тогда
            ГруппаПлощадкиНовая = СоздатьГруппуПлощадки(ПлощадкаЭксплуатацииВ, ТипГруппы);
        Иначе
            Если ГруппаПлощадкиНовая.Скрыть Тогда
                ГруппаПлощадкиНоваяОбъект = ГруппаПлощадкиНовая.ПолучитьОбъект();
                ГруппаПлощадкиНоваяОбъект.Скрыть = Ложь;
                ГруппаПлощадкиНоваяОбъект.Записать();
            КонецЕсли;
        КонецЕсли;
        
        Если ЭлементПлощадки <> Неопределено Тогда
            ЭлементПлощадкиОбъект = ЭлементПлощадки.ПолучитьОбъект();
            ЭлементПлощадкиОбъект.Родитель = ГруппаПлощадкиНовая;
            
            Корзина = Справочники.ПлощадкиЭксплуатации.Корзина();
            Если ПлощадкаЭксплуатацииВ = Корзина Тогда
                ЭлементПлощадкиОбъект.ПометкаУдаления = Истина;
            КонецЕсли;
            Если ПлощадкаЭксплуатацииИз = Корзина Тогда
                ЭлементПлощадкиОбъект.ПометкаУдаления = Ложь;
            КонецЕсли;
            
            ЭлементПлощадкиОбъект.Записать();
        КонецЕсли;
    КонецЕсли;
    
КонецПроцедуры

// Добавить в площадку группу
//
// Параметры:
//  ПлощадкаЭксплуатации - СправочникСсылка.ПлощадкиЭксплуатации - площадка, в которую будем добавлять.
//  ТипГруппы            - Перечисления.ТипЭлементаПлощадки - тип группы, которую добавляем. 
// 
// Возвращаемое значение:
//   СправочникСсылка.ПлощадкиЭксплуатации - новая добавленная группа площадки 
//
Функция ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатации, ТипГруппы) Экспорт
    
    ГруппаПлощадки = ПолучитьГруппуПлощадки(ПлощадкаЭксплуатации, ТипГруппы);
    Если ГруппаПлощадки = Неопределено Тогда
        ГруппаПлощадки = СоздатьГруппуПлощадки(ПлощадкаЭксплуатации, ТипГруппы);
    Иначе
        Если ГруппаПлощадки.Скрыть Тогда
            ГруппаПлощадкиОбъект = ГруппаПлощадки.ПолучитьОбъект();
            ГруппаПлощадкиОбъект.Скрыть = Ложь;
            ГруппаПлощадкиОбъект.Записать();
        КонецЕсли;
    КонецЕсли;
    
    Возврат ГруппаПлощадки;
    
КонецФункции

// Получает элемент группы площадки эксплуатации.
//
// Параметры:
//  Ссылка          - СправочникСсылка.ПлощадкиЭксплуатации - родитель, в котором осуществляется поиск элемента.
//  ЕдиницаКонтроля - СправочникСсылка.Оборудование, СправочникСсылка.ОбъектыКонтроля, СправочникСсылка.КонтрольныеПроцедуры - единица контроля группы площадки, для которой осуществляется поиск.
//  ТипЭлемента     - Перечисление.ТипЭлементаПлощадки      - тип элемента единицы контроля, для которой осуществляется поиск.
// 
// Возвращаемое значение:
//  Ссылка - СправочникСсылка.ПлощадкиЭксплуатации
//
Функция ПолучитьЭлементГруппы(Ссылка, ЕдиницаКонтроля, ТипЭлемента) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.ПлощадкиЭксплуатации
    |ГДЕ
    |   Родитель = &Родитель
    |   И ЕдиницаКонтроля = &ЕдиницаКонтроля
    |   И ТипЭлемента = &ТипЭлемента
    |";
    
    Запрос.УстановитьПараметр("Родитель", Ссылка);
    Запрос.УстановитьПараметр("ЕдиницаКонтроля", ЕдиницаКонтроля);
    Запрос.УстановитьПараметр("ТипЭлемента", ТипЭлемента);
    
    Результат = Запрос.Выполнить();
    
    ЭлементГруппы = Неопределено;
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        ЭлементГруппы = Выборка.Ссылка;
    КонецЕсли;
    
    Возврат ЭлементГруппы;
    
КонецФункции

// Создает элемент группы площадки эксплуатации.
//
// Параметры:
//  Ссылка          - СправочникСсылка.ПлощадкиЭксплуатации - родитель, в котором создается элемент группы.
//  ЕдиницаКонтроля - СправочникСсылка.Оборудование         - единица контроля группы площадки, для которой создается элемент.
//  ТипЭлемента     - Перечисление.ТипЭлементаПлощадки      - тип элемента площадки единицы контроля, для которой создается элемент.
//  ЭтоГруппа       - Булево                                - тип добавляемой единицы.
// 
// Возвращаемое значение:
//  Ссылка - СправочникСсылка.ПлощадкиЭксплуатации
//
Функция СоздатьЭлементГруппы(Ссылка, ЕдиницаКонтроля, ТипЭлемента, ЭтоГруппа) Экспорт
    
    НовыйЭлемент = Справочники.ПлощадкиЭксплуатации.СоздатьЭлемент();
        
    НовыйЭлемент.Родитель = Ссылка;
    НовыйЭлемент.ЕдиницаКонтроля = ЕдиницаКонтроля;
    НовыйЭлемент.ТипЭлемента = ТипЭлемента;
    НовыйЭлемент.Записать();
    
    Возврат НовыйЭлемент.Ссылка;
    
КонецФункции

// Получает группу площадки эксплуатации.
//
// Параметры:
//  Ссылка      - СправочникСсылка.ПлощадкиЭксплуатации - родитель, в котором осуществляется поиск площадки.
//  ТипЭлемента - Перечисление.ТипЭлементаПлощадки      - тип элемента площадки по которому осуществляется поиск.
// 
// Возвращаемое значение:
//  Ссылка - СправочникСсылка.ПлощадкиЭксплуатации
//
Функция ПолучитьГруппуПлощадки(Ссылка, ТипЭлемента) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.ПлощадкиЭксплуатации
    |ГДЕ
    |   Родитель = &Родитель
    |   И ТипЭлемента = &ТипЭлемента
    |";
    
    Запрос.УстановитьПараметр("Родитель", Ссылка);
    Запрос.УстановитьПараметр("ТипЭлемента", ТипЭлемента);
    
    Результат = Запрос.Выполнить();
    
    ГруппаПлощадки = Неопределено;
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        ГруппаПлощадки = Выборка.Ссылка;
    КонецЕсли;
    
    Возврат ГруппаПлощадки;
    
КонецФункции

// Возвращает ссылку на элемент с наименованием "Основная".
//
// Возвращаемое значение:
//  Ссылка - СправочникСсылка.ПлощадкиЭксплуатации
//
Функция Основная() Экспорт
    
    Возврат НайтиИлиСоздатьПоНаименованию("Основная", Перечисления.ТипЭлементаПлощадки.Площадка); 
    
КонецФункции

// Возвращает ссылку на элемент с наименованием "Корзина".
//
// Возвращаемое значение:
//  Ссылка - СправочникСсылка.ПлощадкиЭксплуатации
//
Функция Корзина() Экспорт
    
    Возврат НайтиИлиСоздатьПоНаименованию("Корзина", Перечисления.ТипЭлементаПлощадки.Корзина); 
    
КонецФункции

Функция ПолучитьПлощадкуКорень(Ссылка) Экспорт
    
    ПлощадкаКорень = Неопределено;
    
    Если НЕ ЗначениеЗаполнено(Ссылка.Родитель) Тогда
        ПлощадкаКорень = Ссылка;
    Иначе
        ПлощадкаКорень = ПолучитьПлощадкуКорень(Ссылка.Родитель);
    КонецЕсли;
    
    Возврат ПлощадкаКорень;
    
КонецФункции

Функция ПолучитьКластеры1С(ЭлементыПлощадкиМассив) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ВЫРАЗИТЬ(ЕдиницаКонтроля КАК Справочник.ОбъектыКонтроля) КАК Кластер1С
    |ИЗ
    |   Справочник.ПлощадкиЭксплуатации
    |ГДЕ
    |   Ссылка В (&МассивСсылок)
    |   И ТипЭлемента = &ТипЭлемента
    |";
    
    Запрос.УстановитьПараметр("МассивСсылок", ЭлементыПлощадкиМассив);
    Запрос.УстановитьПараметр("ТипЭлемента", Перечисления.ТипЭлементаПлощадки.Кластер1С);
    
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Кластер1С");
    
КонецФункции

&НаСервере
Функция ПолучитьРабочиеСерверы1С(ЭлементыПлощадкиМассив) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ВЫРАЗИТЬ(ЕдиницаКонтроля КАК Справочник.ОбъектыКонтроля) КАК РабочийСервер1С
    |ИЗ
    |   Справочник.ПлощадкиЭксплуатации
    |ГДЕ
    |   Ссылка В (&МассивСсылок)
    |   И ТипЭлемента = &ТипЭлемента
    |";
    
    Запрос.УстановитьПараметр("МассивСсылок", ЭлементыПлощадкиМассив);
    Запрос.УстановитьПараметр("ТипЭлемента", Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С);
    
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РабочийСервер1С");
    
КонецФункции

&НаСервере
Функция ПолучитьИнформационныеБазы(ЭлементыПлощадкиМассив) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ВЫРАЗИТЬ(ЕдиницаКонтроля КАК Справочник.ОбъектыКонтроля) КАК ИнформационнаяБаза
    |ИЗ
    |   Справочник.ПлощадкиЭксплуатации
    |ГДЕ
    |   Ссылка В (&МассивСсылок)
    |   И ТипЭлемента = &ТипЭлемента
    |";
    
    Запрос.УстановитьПараметр("МассивСсылок", ЭлементыПлощадкиМассив);
    Запрос.УстановитьПараметр("ТипЭлемента", Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза);
    
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИнформационнаяБаза");
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиИлиСоздатьПоНаименованию(Наименование, ТипПлощадки)
    
    Ссылка = Справочники.ПлощадкиЭксплуатации.НайтиПоНаименованию(Наименование, Истина, Неопределено); 
    
    Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
        
        НачатьТранзакцию();
        
        Попытка
            
            Блокировка = Новый БлокировкаДанных;
            ЭлементБлокировки = Блокировка.Добавить("Справочник.ПлощадкиЭксплуатации");
            ЭлементБлокировки.УстановитьЗначение("Наименование", Наименование);
            Блокировка.Заблокировать();
            
            Ссылка = Справочники.ПлощадкиЭксплуатации.НайтиПоНаименованию(Наименование, Истина, Неопределено); 
            Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
                СсылкаОбъект = Справочники.ПлощадкиЭксплуатации.СоздатьЭлемент();
                СсылкаОбъект.Наименование = Наименование;
                СсылкаОбъект.ТипЭлемента = ТипПлощадки;
                СсылкаОбъект.Записать();
                
                Ссылка = СсылкаОбъект.Ссылка;
            КонецЕсли;
            
            ЗафиксироватьТранзакцию();
            
        Исключение
            
            ОтменитьТранзакцию();
            ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
            
        КонецПопытки;
        
    КонецЕсли;
    
    Возврат Ссылка;
    
КонецФункции

// Создает группу площадки эксплуатации.
//
// Параметры:
//  Ссылка      - СправочникСсылка.ПлощадкиЭксплуатации - родитель, в котором создается группа площадки.
//  ТипЭлемента - Перечисление.ТипЭлементаПлощадки      - тип элемента создаваемой площадки.
// 
// Возвращаемое значение:
//  Ссылка - СправочникСсылка.ПлощадкиЭксплуатации
//
Функция СоздатьГруппуПлощадки(Ссылка, ТипЭлемента)
    
    НоваяЭлемент = Справочники.ПлощадкиЭксплуатации.СоздатьЭлемент();
    Если ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаОборудования Тогда
        НоваяЭлемент.Наименование = "Оборудование";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаШлюзы Тогда
        НоваяЭлемент.Наименование = "Шлюзы";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаВебСерверы Тогда
        НоваяЭлемент.Наименование = "Веб-серверы";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаСУБД Тогда
        НоваяЭлемент.Наименование = "СУБД";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверы1С ИЛИ ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверыКластера1С Тогда
        НоваяЭлемент.Наименование = "Рабочие серверы 1С";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаТерминальныеСервера Тогда
        НоваяЭлемент.Наименование = "Терминальные сервера";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаВиртуальныеМашины Тогда
        НоваяЭлемент.Наименование = "Виртуальные машины";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКластеры1С Тогда
        НоваяЭлемент.Наименование = "Кластеры 1С";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры Тогда
        НоваяЭлемент.Наименование = "Контрольные процедуры базовые";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры Тогда
        НоваяЭлемент.Наименование = "Контрольные процедуры расширенные";    
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПотребленияПамяти Тогда
        НоваяЭлемент.Наименование = "Мониторинг кластера";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазы ИЛИ ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С Тогда
        НоваяЭлемент.Наименование = "Информационные базы";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПодключений Тогда
        НоваяЭлемент.Наименование = "Контроль подключений";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПроизводительности Тогда
        НоваяЭлемент.Наименование = "Контроль производительности";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольРегламентныхЗаданий Тогда
        НоваяЭлемент.Наименование = "Контроль регламентных заданий";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольУстойчивости Тогда
        НоваяЭлемент.Наименование = "Контроль устойчивости";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаАнализВызововКластера1С Тогда
        НоваяЭлемент.Наименование = "Анализ вызовов кластера 1С";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаМониторингСистемныхОшибок Тогда
        НоваяЭлемент.Наименование = "Мониторинг системных ошибок";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольНагрузочныхТестов Тогда
        НоваяЭлемент.Наименование = "Контроль нагрузочных тестов";
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаОценкаПользователей Тогда
        НоваяЭлемент.Наименование = "Оценка пользователей";    
    ИначеЕсли ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаПубликации Тогда
        НоваяЭлемент.Наименование = "Публикации";
    КонецЕсли;
    
    НоваяЭлемент.Родитель = Ссылка;
    НоваяЭлемент.ТипЭлемента = ТипЭлемента;
    НоваяЭлемент.Записать();
        
    Возврат НоваяЭлемент.Ссылка;
    
КонецФункции

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
    
    Поля.Добавить("Наименование");
    Поля.Добавить("ЕдиницаКонтроля");
    
    СтандартнаяОбработка = Ложь;
    
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
    
    Если ЗначениеЗаполнено(Данные.ЕдиницаКонтроля) Тогда
        Представление = Данные.ЕдиницаКонтроля;
    Иначе
        Представление = Данные.Наименование;
    КонецЕсли;
    
    СтандартнаяОбработка = Ложь;
    
КонецПроцедуры

#КонецОбласти

#Область ПредопределенныеПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
    
    Если ВидФормы = "ФормаОбъекта" Тогда
        
        Если Параметры.Свойство("Ключ") Тогда
            
            Если Параметры.Ключ.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКластеры1С Тогда
                ВыбраннаяФорма = "ФормаГруппыКластера1С";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПотребленияПамяти Тогда
                ВыбраннаяФорма = "ФормаГруппыКонтрольПотребленияПамяти";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверыКластера1С Тогда
                ВыбраннаяФорма = "ФормаГруппыРабочийСервер1С";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольУстойчивости Тогда
                ВыбраннаяФорма = "ФормаГруппыКонтрольУстойчивости";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПроизводительности Тогда
                ВыбраннаяФорма = "ФормаГруппыКонтрольПроизводительности";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПодключений Тогда
                ВыбраннаяФорма = "ФормаГруппыКонтрольПодключений";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.ТипЭлемента = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольРегламентныхЗаданий Тогда
                ВыбраннаяФорма = "ФормаГруппыКонтрольРегламентныхЗаданий";
                СтандартнаяОбработка = Ложь;
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#КонецЕсли

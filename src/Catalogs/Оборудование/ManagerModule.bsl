#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Выполняет поиск оборудования не помеченного на удаление по уникальному идентификатору агента.
//
// Параметры:
//  Ссылка - СправочникСсылка.АгентыЦКК - агент КИП для поиска оборудования.
//  ПоВсем - Булево - условие выборки и из помеченных на удаление, значение по умолчанию Ложь.
// 
// Возвращаемое значение:
//   СправочникСсылка.Оборудование 
//
Функция НайтиПоАгенту(Ссылка, ПоВсем = Ложь) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.Оборудование
    |ГДЕ
    |   АгентКИП = &АгентКИП
    |   {И НЕ ПометкаУдаления}
    |";
    
    Запрос.УстановитьПараметр("АгентКИП", Ссылка);
    Если ПоВсем Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И НЕ ПометкаУдаления}", "");
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И НЕ ПометкаУдаления}", "И НЕ ПометкаУдаления");
    КонецЕсли;
        
    Оборудование = Неопределено;
    
    Результат = Запрос.Выполнить();
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Оборудование = Выборка.Ссылка;
    КонецЕсли;
    
    Возврат Оборудование;
    
КонецФункции

// Получает параметры агента.
//
// Параметры:
//  Ссылка - СправочникСсылка.АгентыЦКК - агент КИП для получения параметров. 
// 
// Возвращаемое значение:
//   Структура - ключ, наименование параметра 
//
Функция ПолучитьПараметры(Ссылка) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   СпрОборудование.Ссылка КАК Оборудование,
    |   СпрОборудование.Хост КАК Хост,
    |   СпрОборудование.ИспользоватьВнешнегоАгента И
    |   ВЫБОР
    |       КОГДА ПлощадкиЭксплуатации.ТипЭлемента = &ТипКорзина ТОГДА ЛОЖЬ
    |       ИНАЧЕ ИСТИНА
    |   КОНЕЦ КАК ИспользоватьВнешнегоАгента,
    |   СпрОборудование.СобиратьДанныеПроизводительности,
    |   СпрОборудование.ПроверятьДоступность КАК ПроверятьДоступность,
    |   СпрОборудование.РегистрироватьДампы КАК РегистрироватьДампы,
    |   СпрОборудование.ДатаОбновленияИнформацииОСистеме КАК ДатаОбновленияИнформацииОСистеме,
    |   СпрОборудование.ПериодКонтроля КАК ПериодКонтроля,
    |   СпрОборудование.МинимальныйПроцентДоступности КАК МинимальныйПроцентДоступности,
    |   ВЫБОР
    |       КОГДА РегСвОборудованиеОперативныеНастройки.Оборудование IS NULL Тогда Ложь
    |       ИНАЧЕ РегСвОборудованиеОперативныеНастройки.ОперативныйРежим
    |   КОНЕЦ КАК ОперативныйРежим,
    |   СпрОборудование.СобиратьДанныеЛицензий1С КАК СобиратьДанныеЛицензий1С
    |ИЗ
    |   Справочник.Оборудование КАК СпрОборудование
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ПлощадкиЭксплуатации КАК ПлощадкиЭксплуатации
    |ПО
    |   ПлощадкиЭксплуатации.Ссылка = СпрОборудование.ПлощадкаЭксплуатации
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ОборудованиеОперативныеНастройки КАК РегСвОборудованиеОперативныеНастройки
    |ПО
    |   РегСвОборудованиеОперативныеНастройки.Оборудование = СпрОборудование.Ссылка
    |   И РегСвОборудованиеОперативныеНастройки.ДатаЗаписиUTC >= &ДатаЗаписиUTC
    |ГДЕ
    |   СпрОборудование.АгентКИП = &АгентКИП
    |";
    
    Запрос.УстановитьПараметр("АгентКИП", Ссылка);
    Запрос.УстановитьПараметр("ТипКорзина", Перечисления.ТипЭлементаПлощадки.Корзина);
    Запрос.УстановитьПараметр("ДатаЗаписиUTC", ТекущаяУниверсальнаяДата() - 300);
    
    ПараметрыАгента = Неопределено;
    
    УстановитьПривилегированныйРежим(Истина);
    Результат = Запрос.Выполнить();
    УстановитьПривилегированныйРежим(Ложь);
    
    Если НЕ Результат.Пустой() Тогда
        
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        
        ПараметрыАгента = Новый Структура("Оборудование, Хост, ИспользоватьВнешнегоАгента, СобиратьДанныеПроизводительности, ОперативныйРежим,
            |ПроверятьДоступность, РегистрироватьДампы, ДатаОбновленияИнформацииОСистеме, ПериодКонтроля, МинимальныйПроцентДоступности, СобиратьДанныеЛицензий1С");
        ЗаполнитьЗначенияСвойств(ПараметрыАгента, Выборка);
            
    КонецЕсли;
    
    Возврат ПараметрыАгента;
    
КонецФункции

// Синхронизирует счетчики производительности выбранной роли. Удаляет все не зафиксированные счетчки
// и добавляет переданные. Зафиксированные счетчики остается без изменений.
//
// Параметры:
//  Роль                       - СправочникСсылка.РолиОборудования - роль оборудования для синхронизации.
//  Ссылка                     - СправочникСсылка.Оборудование     - оборудование синхронизации счетчиков.
//  СчетчикиПроизводительности - Массив                            - массив элементов СправочникСсылка.СчетчикиПроизводительности,
//                                                                   по которым происходит синхронизация.
//
Процедура СинхронизироватьСчетчикиПроизводительности(Роль, Ссылка, СчетчикиПроизводительности) Экспорт
    
    ОборудованиеОбъект = Ссылка.ПолучитьОбъект();
    
    // Ищем все счетчики данной роли
    ПараметрыОтбора = Новый Структура;
    ПараметрыОтбора.Вставить("Роль", Роль);
    СтрокиМассив = ОборудованиеОбъект.СчетчикиПроизводительностиРолей.НайтиСтроки(ПараметрыОтбора);
    
    // Удаляем все счетчики данной роли, запоминаем удаленные
    УдаленныеСчетчикиРоли = Новый Массив;
    Для Каждого ТекСтрока Из СтрокиМассив Цикл
        УдаленныеСчетчикиРоли.Добавить(ТекСтрока.СчетчикПроизводительности);
        ОборудованиеОбъект.СчетчикиПроизводительностиРолей.Удалить(ТекСтрока);    
    КонецЦикла;
    
    // Если удаленных счетчиков нет в других ролях, то если счетчик не зафиксирован,
    // удаляем из основной табличной части счетчиков.
    Для Каждого ТекСчетчик Из УдаленныеСчетчикиРоли Цикл
        ПараметрыОтбора = Новый Структура;
        ПараметрыОтбора.Вставить("СчетчикПроизводительности", ТекСчетчик);
        СтрокиМассив = ОборудованиеОбъект.СчетчикиПроизводительностиРолей.НайтиСтроки(ПараметрыОтбора);
        Если СтрокиМассив.Количество() = 0 Тогда
            ПараметрыОтбора = Новый Структура;
            ПараметрыОтбора.Вставить("СчетчикПроизводительности", ТекСчетчик);
            ПараметрыОтбора.Вставить("Зафиксировать", 0);
            СтрокиМассив = ОборудованиеОбъект.СчетчикиПроизводительности.НайтиСтроки(ПараметрыОтбора);
            Для Каждого ТекСтрока Из СтрокиМассив Цикл
                ОборудованиеОбъект.СчетчикиПроизводительности.Удалить(ТекСтрока);
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;
        
    Для Каждого СчетчикПроизводительности Из СчетчикиПроизводительности Цикл
        
        НовСтрока = ОборудованиеОбъект.СчетчикиПроизводительностиРолей.Добавить();
        НовСтрока.СчетчикПроизводительности = СчетчикПроизводительности;
        НовСтрока.Роль = Роль;
        
        ПараметрыОтбора = Новый Структура("СчетчикПроизводительности", СчетчикПроизводительности);
        Если ОборудованиеОбъект.СчетчикиПроизводительности.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
            НовСтрока = ОборудованиеОбъект.СчетчикиПроизводительности.Добавить();
            НовСтрока.СобиратьДанные = Истина;
            НовСтрока.СчетчикПроизводительности = СчетчикПроизводительности;
        КонецЕсли;
        
    КонецЦикла;
    
    ОборудованиеОбъект.СчетчикиПроизводительности.Сортировать("СчетчикПроизводительности");
    ОборудованиеОбъект.Записать();
    
КонецПроцедуры

Функция НайтиПоХостуВПлощадке(Хост, ПлощадкаЭксплуатации) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.Оборудование
    |ГДЕ
    |   Хост = &Хост
    |   И ПлощадкаЭксплуатации = &ПлощадкаЭксплуатации
    |";
    
    Запрос.УстановитьПараметр("Хост", Хост);
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    
    Результат = Запрос.Выполнить();
    
    Если НЕ Результат.Пустой() Тогда
        Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
    Иначе
        Возврат РегистрыСведений.ОборудованиеСетевыеАдаптеры.НайтиОборудование(Хост, ПлощадкаЭксплуатации);
    КонецЕсли;
        
КонецФункции

// Проверяет наличие роли оборудования.
//
// Параметры:
//  Ссылка    - СправочникСсылка.Оборудование     - оборудование проверки наличия роли.
//  Роль      - СправочникСсылка.РолиОборудования - роль оборудования для синхронизации.
//  ИскатьВсе - Булево                            - признак поиска, значение по умолчанию Ложь.
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьРоль(Ссылка, Роль, ИскатьВсе = Ложь) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |   Роль
    |ИЗ
    |   Справочник.Оборудование.РолиОборудования
    |ГДЕ
    |   Ссылка = &Ссылка
    |   И Роль = &Роль
    |   {И Использовать}
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    Запрос.УстановитьПараметр("Роль", Роль);
    Если ИскатьВсе Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И Использовать}", "");
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И Использовать}", "И Использовать");
    КонецЕсли;
    
    
    Результат = Запрос.Выполнить();
    
    Возврат НЕ Результат.Пустой();
    
КонецФункции

// Добавляет роль оборудования. Если роль отключена, включает использование роли.
//
// Параметры:
//  Ссылка    - СправочникСсылка.Оборудование     - оборудование проверки наличия роли.
//  Роль      - СправочникСсылка.РолиОборудования - роль оборудования для синхронизации.
//
Процедура ДобавитьРоль(Ссылка, Роль) Экспорт
    
    СпрОбъект = Ссылка.ПолучитьОбъект();
    
    ПараметрыОтбора = Новый Структура("Роль", Роль);
    РолиОборудованияСтроки = СпрОбъект.РолиОборудования.НайтиСтроки(ПараметрыОтбора);
    Если РолиОборудованияСтроки.Количество() > 0 Тогда
        ТекущаяРоль = РолиОборудованияСтроки[0];
    Иначе
        НоваяРоль = СпрОбъект.РолиОборудования.Добавить();
        НоваяРоль.Роль = Роль;
    КонецЕсли;
    
    СпрОбъект.Записать();
        
КонецПроцедуры

// Создает элемент оборудование по имени хоста.
//
// Параметры:
//  Хост                    - Строка - имя хоста.
//  ДополнительныеПараметры - Структура - ключ структуры содержит реквизит при создании,
//                                        значение ключа содержит значение реквизита,
//                                        значение по умолчанию Неопределено.
//
// Возвращаемое значение:
//  Ссылка - СправочникСсылка.Оборудование
//
Функция СоздатьЭлементПоИмениХоста(Хост, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Хост) = Тип("Строка") Тогда
		ХостИмя = Хост;
        ХостОбратныйКанонический = Неопределено;
	ИначеЕсли ТипЗнч(Хост) = Тип("Соответствие") Тогда
		ХостИмя = Хост["host"];
	КонецЕсли;
	
	Ссылка = ПолучитьСсылкуПоИмениХоста(ХостИмя);
		
	Если Ссылка = Неопределено Тогда
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Оборудование");
		ЭлементБлокировки.УстановитьЗначение("Хост", ХостИмя);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Ссылка = ПолучитьСсылкуПоИмениХоста(ХостИмя);
			
		Если Ссылка = Неопределено Тогда
			Ссылка = СоздатьЭлементПоИмениХостаСлужебный(Хост, ДополнительныеПараметры);
		КонецЕсли;
			
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	Возврат Ссылка;
	
КонецФункции

// Создает элемент оборудование агента КИП.
//
// Параметры:
//  АгентКИП                - СправочникСсылка.АгентыКИП - имя хоста.
//  ДополнительныеПараметры - Структура - ключ структуры содержит реквизит при создании,
//                                        значение ключа содержит значение реквизита,
//                                        значение по умолчанию Неопределено.
//
// Возвращаемое значение:
//  Ссылка - СправочникСсылка.Оборудование
//
Функция СоздатьОборудованиеАгента(АгентКИП, ДополнительныеПараметры) Экспорт
    
    НовЭлемент = СоздатьЭлемент();
    НовЭлемент.Заполнить(Неопределено);
    НовЭлемент.Наименование = АгентКИП.Наименование;
    НовЭлемент.Хост = АгентКИП.Хост;
    НовЭлемент.АгентКИП = АгентКИП;
    НовЭлемент.ИспользоватьВнешнегоАгента = Истина;
    
    НовЭлемент.РегистрироватьДампы = ДополнительныеПараметры.РегистрироватьДампы;
    НовЭлемент.ПлощадкаЭксплуатации = ДополнительныеПараметры.ПлощадкаЭксплуатации;
    
    Если ДополнительныеПараметры.Свойство("ТипОС") Тогда
        НовЭлемент.ТипОС = ДополнительныеПараметры.ТипОС;
    КонецЕсли;
            
    Для Каждого Роль Из ДополнительныеПараметры.РолиОборудования Цикл
        
        НовРоль = НовЭлемент.РолиОборудования.Добавить();
        НовРоль.Роль = Роль;
        
    КонецЦикла;
    
    СобиратьДанныеСоответсвие = Новый Соответствие;
    СобиратьДанныеСоответсвие.Вставить("Отключить", 0);
    СобиратьДанныеСоответсвие.Вставить("PDH", 1);
    СобиратьДанныеСоответсвие.Вставить("Агент КИП", 2);
    
    Если ДополнительныеПараметры.Свойство("НастройкиПоУмолчанию") Тогда
        
        НастройкиПоУмолчанию = ДополнительныеПараметры.НастройкиПоУмолчанию;
        НовЭлемент.СобиратьДанныеПроизводительности = СобиратьДанныеСоответсвие[НастройкиПоУмолчанию.СобиратьДанныеПроизводительности];
        НовЭлемент.ПериодЗаписи = НастройкиПоУмолчанию.ПериодЗаписи;
        НовЭлемент.ПроверятьДоступность = НастройкиПоУмолчанию.ПроверятьДоступность;
        НовЭлемент.Таймаут = НастройкиПоУмолчанию.Таймаут;
        НовЭлемент.ПериодКонтроля = НастройкиПоУмолчанию.ПериодКонтроля;
        НовЭлемент.МинимальныйПроцентДоступности = НастройкиПоУмолчанию.МинимальныйПроцентДоступности;
        НовЭлемент.ДопустимоНетДанных = НастройкиПоУмолчанию.ДопустимоНетДанных;
        НовЭлемент.ЯзыкОС = НастройкиПоУмолчанию.ЯзыкОС;
            
    КонецЕсли;
    
    Если ДополнительныеПараметры.Свойство("ТипОС") Тогда
        Счетчики = Справочники.РолиОборудования.ПолучитьСчетчикиПроизводительности(ДополнительныеПараметры.РолиОборудования, ДополнительныеПараметры.ТипОС);
    Иначе
        Счетчики = Новый Массив;
    КонецЕсли;
        
    // Заполняем счетчики производительности ролей и собираем различные
    СчетчикиРазличные = Новый Соответствие;
    Для Каждого ТекСчетчик Из Счетчики Цикл
        
        НовСтрока = НовЭлемент.СчетчикиПроизводительностиРолей.Добавить();
        НовСтрока.СчетчикПроизводительности = ТекСчетчик.СчетчикПроизводительности;
        НовСтрока.Роль = ТекСчетчик.РольОборудования;
        
        Если СчетчикиРазличные[ТекСчетчик.СчетчикПроизводительности] = Неопределено Тогда
            СчетчикиРазличные.Вставить(ТекСчетчик.СчетчикПроизводительности, Истина);
        КонецЕсли;
        
    КонецЦикла;
    
    Для Каждого ТекСчетчик Из СчетчикиРазличные Цикл
        
        НовСтрока = НовЭлемент.СчетчикиПроизводительности.Добавить();
        НовСтрока.СобиратьДанные = Истина;
        НовСтрока.СчетчикПроизводительности = ТекСчетчик.Ключ;
        
    КонецЦикла;
    
    НовЭлемент.СчетчикиПроизводительности.Сортировать("СчетчикПроизводительности");
    НовЭлемент.ДополнительныеСвойства.Вставить("ПериодПоЧислу", Истина);
    НовЭлемент.ДополнительныеСвойства.Вставить("ИзменитьКонтрольПоступленияСчетчиков", Истина);
    НовЭлемент.ДополнительныеСвойства.Вставить("ДопустимоеВремяОтсутствияДанных", 10);
    НовЭлемент.Записать();
        
    Возврат НовЭлемент.Ссылка;
    
КонецФункции

Функция ПрочитатьНастройкиПоУмолчанию() Экспорт
    
    НастройкиПоУмолчаниюОбщие = Константы.НастройкиПоУмолчаниюОбщие.Получить().Получить();
    
    Если НастройкиПоУмолчаниюОбщие <> Неопределено И НастройкиПоУмолчаниюОбщие.Свойство("Оборудование") Тогда
                
        НастройкиОборудование = НастройкиПоУмолчаниюОбщие.Оборудование;
        
    Иначе
        
        НастройкиОборудование = Новый Структура;
        НастройкиОборудование.Вставить("СобиратьДанныеПроизводительности", "Агент КИП");
        НастройкиОборудование.Вставить("ПериодЗаписи", 0);
        НастройкиОборудование.Вставить("ПроверятьДоступность", Истина);
        НастройкиОборудование.Вставить("Таймаут", 3);
        НастройкиОборудование.Вставить("ПериодКонтроля", 120);
        НастройкиОборудование.Вставить("МинимальныйПроцентДоступности", 90);
        НастройкиОборудование.Вставить("ДопустимоНетДанных", 120);
        НастройкиОборудование.Вставить("ИспользоватьВнешнегоАгента", Ложь);
        НастройкиОборудование.Вставить("РегистрироватьДампы", Ложь);
        НастройкиОборудование.Вставить("ЯзыкОС", Перечисления.ЯзыкиСистемы.Английский);        
        
    КонецЕсли;
    
    Если ТипЗнч(НастройкиОборудование.СобиратьДанныеПроизводительности) = Тип("Булево") Тогда
        
        Если НастройкиОборудование.СобиратьДанныеПроизводительности Тогда
            НастройкиОборудование.СобиратьДанныеПроизводительности = "PDH";
        Иначе
            НастройкиОборудование.СобиратьДанныеПроизводительности = "Отключить";
        КонецЕсли;
        
    КонецЕсли;
        
    Возврат НастройкиОборудование;
           
КонецФункции

Процедура ЗаписатьНастройкиПоУмолчанию(Настройки) Экспорт
    
    НастройкиПоУмолчаниюОбщие = Константы.НастройкиПоУмолчаниюОбщие.Получить().Получить();
    
    Если НастройкиПоУмолчаниюОбщие = Неопределено Тогда
        НастройкиПоУмолчаниюОбщие = Новый Структура;
    КонецЕсли;
    
    НастройкиПоУмолчаниюОбщие.Вставить("Оборудование", Настройки);
    
    Константы.НастройкиПоУмолчаниюОбщие.Установить(Новый ХранилищеЗначения(НастройкиПоУмолчаниюОбщие));
    
КонецПроцедуры

Функция НастройкиАгентаМониторПроизводительности(Ссылка) Экспорт
    
    НастройкиАгента = Новый Соответствие;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   СобиратьДанныеПроизводительности,
    |   СобиратьДанныеЛицензий1С
    |ИЗ
    |   Справочник.Оборудование
    |ГДЕ
    |   Ссылка = &Ссылка 
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    Результат = Запрос.Выполнить();
    Если Результат.Пустой() Тогда
        
        НастройкиАгента.Вставить("enable", Ложь);
        НастройкиАгента.Вставить("СобиратьДанныеЛицензий1С", Ложь);
        
    Иначе
        
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        
        Если Выборка.СобиратьДанныеПроизводительности = 2 Тогда
            НастройкиАгента.Вставить("enable", Истина);
        Иначе
            НастройкиАгента.Вставить("enable", Ложь);
        КонецЕсли;
        
        НастройкиАгента.Вставить("СобиратьДанныеЛицензий1С", Выборка.СобиратьДанныеЛицензий1С);
                    
    КонецЕсли;
        
    Запрос.Текст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   Счетчики.Наименование КАК Счетчик
    |ИЗ
    |   Справочник.Оборудование.СчетчикиПроизводительности КАК СчетчикиОборудования
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.СчетчикиПроизводительности КАК Счетчики
    |ПО
    |   Счетчики.Ссылка = СчетчикиОборудования.СчетчикПроизводительности
    |ГДЕ
    |   СчетчикиОборудования.Ссылка = &Ссылка
    |   И СчетчикиОборудования.СобиратьДанные
    |УПОРЯДОЧИТЬ ПО
    |   Счетчики.Наименование
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    
    НастройкиАгента.Вставить("counters", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счетчик"));
    
    Возврат НастройкиАгента;
    
КонецФункции

Функция НастройкиАгентаМониторПроизводительностиРавны(СтарыеНастройки, НовыеНастройки) Экспорт
    
    Равны = Истина;
    
    Если СтарыеНастройки["enable"] <> НовыеНастройки["enable"] Тогда
        Равны = Ложь;
        Возврат Равны;
    КонецЕсли;
    
    СтарыеСчетчики = СтарыеНастройки["counters"];
    НовыеСчетчики = НовыеНастройки["counters"];
    
    Если СтарыеСчетчики.Количество() <> НовыеСчетчики.Количество() Тогда
        Равны = Ложь;
        Возврат Равны;
    КонецЕсли;
    
    Для Индекс = 0 По СтарыеСчетчики.ВГраница() Цикл
        
        Если СтарыеСчетчики[Индекс] <> НовыеСчетчики[Индекс] Тогда
            Равны = Ложь;
            Возврат Равны;
        КонецЕсли;
        
    КонецЦикла;
        
    Возврат Равны;
    
КонецФункции

Функция ПолучитьСетевыеАдаптеры(Хост = Неопределено, Пользователь = Неопределено, Пароль = Неопределено) Экспорт
    
    Команда = "nic get Caption,Name,Description,MACAddress,Speed,NetEnabled";
    Данные = КипВнешнийКомпонент.ВыполнитьКомандуWMIC(Команда, Хост, Пользователь, Пароль);
        
    ДанныеМассив = СтрРазделить(Данные, Символы.ПС);
    
    КолонкиМассив = СтрРазделить(ДанныеМассив[1], ",");
    
    СетевыеАдаптеры = Новый Массив;
    
    Для Индекс = 2 По ДанныеМассив.ВГраница() Цикл
        
        СетевойАдаптер = Новый Структура();
        
        СетевойАдаптерМассив = СтрРазделить(ДанныеМассив[Индекс], ",");
        Для ИндексСА = 0 По СетевойАдаптерМассив.ВГраница() Цикл
            СетевойАдаптер.Вставить(КолонкиМассив[ИндексСА], СетевойАдаптерМассив[ИндексСА]);
        КонецЦикла;
        
        СетевыеАдаптеры.Добавить(СетевойАдаптер);
                
    КонецЦикла;
    
    Команда = "nicconfig get Caption,IPAddress";
    Данные = КипВнешнийКомпонент.ВыполнитьКомандуWMIC(Команда, Хост, Пользователь, Пароль);
    
    ДанныеМассив = СтрРазделить(Данные, Символы.ПС);
    
    КолонкиМассив = СтрРазделить(ДанныеМассив[1], ",");
    
    СетевыеАдаптерыАдреса = Новый Соответствие;
    
    Для Индекс = 2 По ДанныеМассив.ВГраница() Цикл
        
        ДанныеСтрока = СтрЗаменить(ДанныеМассив[Индекс], "{", ""); 
        ДанныеСтрока = СтрЗаменить(ДанныеСтрока, "}", "");
        
        СетевойАдаптер = Новый Структура();
        СетевойАдаптерМассив = СтрРазделить(ДанныеСтрока, ",");
        
        Для ИндексСА = 0 По СетевойАдаптерМассив.ВГраница() Цикл
            СетевойАдаптер.Вставить(КолонкиМассив[ИндексСА], СетевойАдаптерМассив[ИндексСА]);
        КонецЦикла;
        
        IPAddress = СтрРазделить(СетевойАдаптер.IPAddress, ";");
        
        СетевыеАдаптерыАдреса.Вставить(СетевойАдаптер.Caption, IPAddress[0]);
        
    КонецЦикла;
    
    Для Каждого СетевойАдаптер Из СетевыеАдаптеры Цикл
        
        IPAddress =  СетевыеАдаптерыАдреса[СетевойАдаптер.Caption]; 
        СетевойАдаптер.Вставить("IPAddress", IPAddress); 
        
        Если ЗначениеЗаполнено(IPAddress) Тогда
            Команда = "nslookup " + IPAddress;
            
            Попытка
                Данные = КипВнешнийКомпонент.ВыполнитьКомандуКонсоли(Команда);
                
                ДанныеМассив = СтрРазделить(Данные, Символы.ПС);
                Для Индекс = 0 По ДанныеМассив.ВГраница() Цикл
                    
                    ДанныеЭлемента = ДанныеМассив[Индекс];
                    Если ЗначениеЗаполнено(ДанныеЭлемента) Тогда
                        
                        ДанныеЭлементаМассив = СтрРазделить(ДанныеЭлемента, ":");
                        
                        Если ДанныеЭлементаМассив[0] = "Name" Тогда
                            
                            ПолноеИмя = СокрЛП(ДанныеЭлементаМассив[1]);
                            СетевойАдаптер.Вставить("FullNameNsLookUp", ПолноеИмя);
                            
                            ПолноеИмяМассив = СтрРазделить(ПолноеИмя, ".");
                            СетевойАдаптер.Вставить("NameNsLookUp", ПолноеИмяМассив[0]);
                            
                        КонецЕсли;
                        
                    КонецЕсли;
                    
                КонецЦикла;
            Исключение
                СетевойАдаптер.Вставить("FullNameNsLookUp", "");
                СетевойАдаптер.Вставить("NameNsLookUp", "");
            КонецПопытки;
            
        Иначе
            СетевойАдаптер.Вставить("FullNameNsLookUp", "");
            СетевойАдаптер.Вставить("NameNsLookUp", "");
        КонецЕсли;
        
    КонецЦикла;
        
    Возврат СетевыеАдаптеры;        
    
КонецФункции

Функция ВсеАдреса(Ссылка) Экспорт
    
    ВсеАдреса = Новый Соответствие;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   СпрОборудование.Хост,
    |   СетевыеАдаптеры.ИмяКомпьютера,
    |   СетевыеАдаптеры.ИмяКомпьютераПолное,
    |   СетевыеАдаптеры.IPAddress КАК Адрес
    |ИЗ
    |   Справочник.Оборудование КАК СпрОборудование
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ОборудованиеСетевыеАдаптеры КАК СетевыеАдаптеры
    |ПО
    |   СетевыеАдаптеры.Оборудование = СпрОборудование.Ссылка
    |ГДЕ
    |   Ссылка = &Ссылка
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        
        ВсеАдреса.Вставить(ВРЕГ(Выборка.Хост), 0);
        
        Если ЗначениеЗаполнено(Выборка.ИмяКомпьютера) Тогда
            ВсеАдреса.Вставить(ВРЕГ(Выборка.ИмяКомпьютера), 0);
        КонецЕсли;
        
        Если ЗначениеЗаполнено(Выборка.ИмяКомпьютераПолное) Тогда
            ВсеАдреса.Вставить(ВРЕГ(Выборка.ИмяКомпьютераПолное), 0);
        КонецЕсли;
        
        Если ЗначениеЗаполнено(Выборка.Адрес) Тогда
            ВсеАдреса.Вставить(ВРЕГ(Выборка.Адрес), 0);
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат ВсеАдреса;
        
КонецФункции

Функция СчетчикиПроизводительности(Ссылка) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   СчетчикПроизводительности
    |ИЗ
    |   Справочник.Оборудование.СчетчикиПроизводительности
    |ГДЕ
    |   Ссылка = &Ссылка
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетчикПроизводительности");    
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСервераСбораПроизводительности() Экспорт
    
    Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Оборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Оборудование КАК Оборудование
	|ГДЕ
	|	Оборудование.СобиратьДанныеПроизводительности > 0
    |   И НЕ Оборудование.ПометкаУдаления
	|";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СервераСбораПроизводительности = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СервераСбораПроизводительности.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СервераСбораПроизводительности;
    
КонецФункции

Функция ПолучитьСчетчикиПроизводительности(Сервер) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СпрРабочиеСервера.Ссылка КАК СерверСсылка,
	|	СпрРабочиеСервера.Хост КАК Хост,
	|	СпрРабочиеСервера.ЯзыкОС КАК ЯзыкОС,
	|	СпрСчетчикиПроизводительности.Ссылка КАК СчетчикСсылка,
	|	СпрСчетчикиПроизводительности.Наименование КАК Наименование,
	|	ВЫБОР СпрРабочиеСервера.ЯзыкОС
	|		КОГДА &Англ ТОГДА СпрСчетчикиПроизводительности.Наименование
	|		ИНАЧЕ ТчНациональноеПредставление.НаименованиеНациональное
	|	КОНЕЦ КАК НаименованиеНациональное,
	|	&ДвойнойСлэш + СпрРабочиеСервера.Хост +
	|	ВЫБОР СпрРабочиеСервера.ЯзыкОС
	|		КОГДА &Англ ТОГДА СпрСчетчикиПроизводительности.Наименование
	|		ИНАЧЕ ТчНациональноеПредставление.НаименованиеНациональное
	|	КОНЕЦ КАК НаименованиеПолное
	|ИЗ
	|	Справочник.Оборудование КАК СпрРабочиеСервера
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.Оборудование.СчетчикиПроизводительности КАК ТчСчетчикиПроизводительности
	|ПО
	|	ТчСчетчикиПроизводительности.Ссылка = СпрРабочиеСервера.Ссылка
	|	И ТчСчетчикиПроизводительности.СобиратьДанные = ИСТИНА
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СчетчикиПроизводительности КАК СпрСчетчикиПроизводительности
	|ПО
	|	СпрСчетчикиПроизводительности.Ссылка = ТчСчетчикиПроизводительности.СчетчикПроизводительности
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.СчетчикиПроизводительности.НациональноеПредставление КАК ТчНациональноеПредставление
	|ПО
	|	ТчНациональноеПредставление.Ссылка = СпрСчетчикиПроизводительности.Ссылка
	|	И ТчНациональноеПредставление.Язык = СпрРабочиеСервера.ЯзыкОС
	|ГДЕ
	|	СпрРабочиеСервера.Ссылка = &Сервер
	|УПОРЯДОЧИТЬ ПО
	|	СпрСчетчикиПроизводительности.Наименование
	|";
	
	Запрос.УстановитьПараметр("Сервер", Сервер);
	Запрос.УстановитьПараметр("Англ", Перечисления.ЯзыкиСистемы.Английский);
	Запрос.УстановитьПараметр("ДвойнойСлэш", "\\");
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	СерверСоответствие = Новый Соответствие;
	Счетчики = Новый Соответствие;
	СерверСоответствие.Вставить(Сервер, Счетчики);
	Пока Выборка.Следующий() Цикл
		Счетчик = Новый Соответствие;
		Счетчик.Вставить("Хост", Выборка.Хост);
		Счетчик.Вставить("ЯзыкОС", Выборка.ЯзыкОС);
		Счетчик.Вставить("Наименование", Выборка.Наименование);
		Счетчик.Вставить("НаименованиеНациональное", Выборка.НаименованиеНациональное);
		Счетчик.Вставить("НаименованиеПолное", Выборка.НаименованиеПолное);
		
		СерверСоответствие[Сервер].Вставить(Выборка.СчетчикСсылка, Счетчик);
	КонецЦикла;
	
	Возврат СерверСоответствие;
КонецФункции

Функция ПолучитьСчетчикиПроизводительностиСЭкспортомВЦКК(Сервер) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СпрРабочиеСервера.Ссылка КАК СерверСсылка,
	|	СпрРабочиеСервера.Хост КАК Хост,
	|	СпрРабочиеСервера.ЯзыкОС КАК ЯзыкОС,
    |   ВЫБОР
    |       КОГДА ОборудованиеОперативныеНастройки.Оборудование IS NULL ТОГДА СпрРабочиеСервера.ПериодЗаписи
    |       ИНАЧЕ 1
    |   КОНЕЦ КАК ПериодЗаписи,
	|	СпрСчетчикиПроизводительности.Ссылка КАК СчетчикСсылка,
	|	СпрСчетчикиПроизводительности.Наименование КАК Наименование,
	|	ВЫБОР &ЯзыкРабСервера
	|		КОГДА &Англ ТОГДА СпрСчетчикиПроизводительности.Наименование
	|		ИНАЧЕ ТчНациональноеПредставление.НаименованиеНациональное
	|	КОНЕЦ КАК НаименованиеНациональное,
	|	&ДвойнойСлэш + СпрРабочиеСервера.Хост +
	|	ВЫБОР &ЯзыкРабСервера
	|		КОГДА &Англ ТОГДА СпрСчетчикиПроизводительности.Наименование
	|		ИНАЧЕ ТчНациональноеПредставление.НаименованиеНациональное
	|	КОНЕЦ КАК НаименованиеПолное,
    |	ТчВнешниеЦКК.ВнешнийЦКК КАК ВнешнийЦКК
	|ИЗ
	|	Справочник.Оборудование КАК СпрРабочиеСервера
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ОборудованиеОперативныеНастройки КАК ОборудованиеОперативныеНастройки
    |ПО
    |   ОборудованиеОперативныеНастройки.Оборудование = СпрРабочиеСервера.Ссылка
    |   И ОборудованиеОперативныеНастройки.ДатаЗаписиUTC >= &ДатаЗаписиUTC
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Оборудование.ВнешниеЦКК КАК ТчВнешниеЦКК
	|ПО
	|	ТчВнешниеЦКК.Ссылка = СпрРабочиеСервера.Ссылка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.Оборудование.СчетчикиПроизводительности КАК ТчСчетчикиПроизводительности
	|ПО
	|	ТчСчетчикиПроизводительности.Ссылка = СпрРабочиеСервера.Ссылка
	|	И ТчСчетчикиПроизводительности.СобиратьДанные = ИСТИНА
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.СчетчикиПроизводительности КАК СпрСчетчикиПроизводительности
	|ПО
	|	СпрСчетчикиПроизводительности.Ссылка = ТчСчетчикиПроизводительности.СчетчикПроизводительности
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.СчетчикиПроизводительности.НациональноеПредставление КАК ТчНациональноеПредставление
	|ПО
	|	ТчНациональноеПредставление.Ссылка = СпрСчетчикиПроизводительности.Ссылка
	|	И ТчНациональноеПредставление.Язык = &ЯзыкРабСервера
	|ГДЕ
	|	СпрРабочиеСервера.Ссылка = &Сервер
	|УПОРЯДОЧИТЬ ПО
	|	СпрСчетчикиПроизводительности.Наименование,
	|	ТчВнешниеЦКК.ВнешнийЦКК
	|";
	
	Запрос.УстановитьПараметр("Сервер", Сервер);
	Запрос.УстановитьПараметр("Англ", Перечисления.ЯзыкиСистемы.Английский);
	Запрос.УстановитьПараметр("ЯзыкРабСервера", ?(ЗначениеЗаполнено(Сервер.ЯзыкОС), Сервер.ЯзыкОС, Перечисления.ЯзыкиСистемы.Английский)); 
	Запрос.УстановитьПараметр("ДвойнойСлэш", "\\");
    Запрос.УстановитьПараметр("ДатаЗаписиUTC", ТекущаяУниверсальнаяДата() - 300);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	СерверСоответствие = Новый Соответствие;
	ПараметрыСервера = Новый Соответствие;
	ПараметрыСервера.Вставить("Счетчики", Новый Соответствие);
	ПараметрыСервера.Вставить("ВнешниеЦКК", Новый Соответствие);
	//Счетчики = Новый Соответствие;
	СерверСоответствие = Новый Соответствие;
	СерверСоответствие.Вставить(Сервер, ПараметрыСервера);
	
	//ВнешниеЦКК = Новый Соответствие;
	ТекСчетчик = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если СерверСоответствие[Сервер]["ПериодЗаписи"] = Неопределено Тогда
			СерверСоответствие[Сервер].Вставить("ПериодЗаписи", Выборка.ПериодЗаписи);
		КонецЕсли;
		
		Если ТекСчетчик <> Выборка.СчетчикСсылка Тогда
			Счетчик = Новый Соответствие;
			Счетчик.Вставить("Хост", Выборка.Хост);
			Счетчик.Вставить("ЯзыкОС", Выборка.ЯзыкОС);
			Счетчик.Вставить("Наименование", Выборка.Наименование);
			Счетчик.Вставить("НаименованиеНациональное", Выборка.НаименованиеНациональное);
			Счетчик.Вставить("НаименованиеПолное", Выборка.НаименованиеПолное);
            Счетчик.Вставить("УникальныйИдентификатор", Строка(Выборка.СчетчикСсылка.УникальныйИдентификатор()));
            Счетчик.Вставить("Инициализирован", Ложь);
			
			СерверСоответствие[Сервер]["Счетчики"].Вставить(Выборка.СчетчикСсылка, Счетчик);
		КонецЕсли;
		
		Если Выборка.ВнешнийЦКК <> Неопределено И СерверСоответствие[Сервер]["ВнешниеЦКК"][Выборка.ВнешнийЦКК] = Неопределено Тогда
			СерверСоответствие[Сервер]["ВнешниеЦКК"].Вставить(Выборка.ВнешнийЦКК, Истина);
		КонецЕсли;
				
		ТекСчетчик = Выборка.СчетчикСсылка;
	КонецЦикла;
	
	Возврат СерверСоответствие;
КонецФункции

Функция СобиратьДанные(Сервер) Экспорт
    
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(*) > 0 ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СобиратьДанныеПроизводительности
	|ИЗ
	|	Справочник.Оборудование КАК Оборудование
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.Оборудование.СчетчикиПроизводительности КАК СчетчикиОборудования
	|ПО
	|	СчетчикиОборудования.Ссылка = Оборудование.Ссылка
	|	И СчетчикиОборудования.СобиратьДанные
	|ГДЕ
	|	Оборудование.Ссылка = &Сервер
	|	И Оборудование.СобиратьДанныеПроизводительности = 1
    |   И НЕ Оборудование.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("Сервер", Сервер);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СобиратьДанныеПроизводительности;
    
КонецФункции

Процедура ИзменитьПериодЗаписи(ПериодЗаписиПредставление) Экспорт
	Выборка = Справочники.Оборудование.Выбрать();	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.ПолучитьОбъект();
		СпрОбъект.ПериодЗаписиПредставление = ПериодЗаписиПредставление;
		СпрОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Функция СоздатьЭлементПоИмениХостаСлужебный(Хост, ДополнительныеПараметры = Неопределено)
	
	Если ТипЗнч(Хост) = Тип("Строка") Тогда
		НовыйЭлемент = Справочники.Оборудование.СоздатьЭлемент();
        
        НовыйЭлемент.Наименование = Хост;
        НовыйЭлемент.Хост = Хост;
				        
	ИначеЕсли ТипЗнч(Хост) = Тип("Соответствие") Тогда
        
        НовыйЭлемент = Справочники.Оборудование.СоздатьЭлемент();
		НовыйЭлемент.Наименование = Хост["hostCanonicalRevert"];
		НовыйЭлемент.Хост = Хост["host"];
				
		НовыйЭлемент.Адрес = Хост["adress"];
		НовыйЭлемент.МакАдрес = Хост["mac"];
		НовыйЭлемент.ОперационнаяСистема = Хост["osName"];
		НовыйЭлемент.Архитектура = Хост["osArch"];
		НовыйЭлемент.ОперационнаяСистемаВерсия = Хост["osVersion"];
		
		Если ВРЕГ(Хост["userLanguage"]) = "RU" Тогда
			НовыйЭлемент.ЯзыкОС = Перечисления.ЯзыкиСистемы.Русский;
		ИначеЕсли ВРЕГ(Хост["userLanguage"]) = "ENG" Тогда
			НовыйЭлемент.ЯзыкОС = Перечисления.ЯзыкиСистемы.Английский;
		Иначе
			НовыйЭлемент.ЯзыкОС = Перечисления.ЯзыкиСистемы.Английский;
		КонецЕсли;
				
	КонецЕсли;
    
    Если ДополнительныеПараметры = Неопределено Тогда
        НовыйЭлемент.ИспользоватьВнешнегоАгента = Истина;
        НовыйЭлемент.ПроверятьДоступность = Истина;
        НовыйЭлемент.РегистрироватьДампы = Истина;
        
        НовыйЭлемент.ПериодЗаписи = 10;
        НовыйЭлемент.ПериодЗаписиПредставление = "10 сек";
        НовыйЭлемент.МинимальныйПроцентДоступности = 90;
        НовыйЭлемент.ПериодКонтроля = 120;
        НовыйЭлемент.ДопустимоНетДанных = 240;
    Иначе
        
        Для Каждого ТекПараметр Из ДополнительныеПараметры Цикл
            Если ТекПараметр.Ключ = "РолиОборудования" Тогда
                НоваяРоль = НовыйЭлемент.РолиОборудования.Добавить();
                НоваяРоль.Использовать = Истина;
                НоваяРоль.Роль = ТекПараметр.Значение;
            Иначе
                
            КонецЕсли;
        КонецЦикла;
        
    КонецЕсли;
	
	НовыйЭлемент.Записать();
    
    Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

Функция ПолучитьСсылкуПоИмениХоста(Хост)
	
	Ссылка = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.Оборудование
	|ГДЕ
	|	Хост = &Хост
    |УПОРЯДОЧИТЬ ПО
    |   Наименование
	|";
	
	Запрос.УстановитьПараметр("Хост", Хост);
	
	Результат = Запрос.Выполнить();
    
    Ссылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    Если Ссылки.Количество() > 0 Тогда
        Ссылка = Ссылки[0];
    КонецЕсли;
    	
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти

#КонецЕсли

&НаКлиенте
Перем ЕстьТестированиеСчетчиков, УникальныйИдентификаторКоманды, УникальныйИдентификаторФЗ, ХостПриОткрытии;

&НаКлиенте
Перем УникальныйИдентификаторКомандыЛицензии1С, ФормаДлительнойОперации, КоличествоПроверок;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    ЭтотОбъект.Элементы.СтраницаЭкспортДанных.Видимость = Константы.ОтправлятьДанныеВнешнимЦКК.Получить();
    ЭтотОбъект.ИнформацияОРеестре.Параметры.УстановитьЗначениеПараметра("Оборудование", Объект.Ссылка);
    ЭтотОбъект.ПеременныеСреды.Параметры.УстановитьЗначениеПараметра("Оборудование", Объект.Ссылка);
    ЭтотОбъект.УстановленныеОбновления.Параметры.УстановитьЗначениеПараметра("Оборудование", Объект.Ссылка);
    ЭтотОбъект.ЛогическиеДиски.Параметры.УстановитьЗначениеПараметра("Оборудование", Объект.Ссылка);
    ЭтотОбъект.Процессоры.Параметры.УстановитьЗначениеПараметра("Оборудование", Объект.Ссылка);
    ЭтотОбъект.Прочее.Параметры.УстановитьЗначениеПараметра("Оборудование", Объект.Ссылка);
    
    ЭтотОбъект.Лицензии1С.Параметры.УстановитьЗначениеПараметра("Оборудование", Объект.Ссылка);
    ЭтотОбъект.Лицензии1С.Параметры.УстановитьЗначениеПараметра("ТипЛицензииПрограммная", "Программная");
    ЭтотОбъект.Лицензии1С.Параметры.УстановитьЗначениеПараметра("ТипЛицензииАппаратная", "Аппаратная");
    ЭтотОбъект.Лицензии1С.Параметры.УстановитьЗначениеПараметра("ТипЛицензииНеИзвестно", "Не известно");
    
    ЭтотОбъект.Лицензии1С.Параметры.УстановитьЗначениеПараметра("Активная", "Активная");
    ЭтотОбъект.Лицензии1С.Параметры.УстановитьЗначениеПараметра("НеАктивная", "Не активная");
    ЭтотОбъект.Лицензии1С.Параметры.УстановитьЗначениеПараметра("НеИзвестноАктивная", "Не известно");
    
    ЭтотОбъект.Лицензии1С.Параметры.УстановитьЗначениеПараметра("Клиентская", "Клиентская");
    ЭтотОбъект.Лицензии1С.Параметры.УстановитьЗначениеПараметра("Серверная", "Серверная");
    ЭтотОбъект.Лицензии1С.Параметры.УстановитьЗначениеПараметра("НеИзвестноВидЛицензии", "Не известно");
    
    МенеджерЗаписи = РегистрыСведений.ОборудованиеИнформацияОПамяти.СоздатьМенеджерЗаписи();
    МенеджерЗаписи.Оборудование = Объект.Ссылка;
    МенеджерЗаписи.Прочитать();
    
    ЭтотОбъект.ВсегоПамяти = МенеджерЗаписи.ВсегоПамяти;
    ЭтотОбъект.ПамятиСвободно = МенеджерЗаписи.ПамятиСвободно;
    
    Если Объект.ПлощадкаЭксплуатации = Справочники.ПлощадкиЭксплуатации.Корзина() Тогда
        
        ЭтотОбъект.ТолькоПросмотр = Истина;
        ЭтотОбъект.Элементы.СчетчикиПроизводительности.ТолькоПросмотр = Истина;
        ЭтотОбъект.Элементы.ГруппаПроцессоры.ТолькоПросмотр = Истина;
        ЭтотОбъект.Элементы.ГруппаЛогическиеДиски.ТолькоПросмотр = Истина;
        ЭтотОбъект.Элементы.ГруппаСетевыеАдаптеры.ТолькоПросмотр = Истина;
        ЭтотОбъект.Элементы.ГруппаПеременныеСреды.ТолькоПросмотр = Истина;
        ЭтотОбъект.Элементы.ГруппаИнформацияОРеестре.ТолькоПросмотр = Истина;
        ЭтотОбъект.Элементы.ГруппаУстановленныеОбновления.ТолькоПросмотр = Истина;
        ЭтотОбъект.Элементы.ГруппаПрочее.ТолькоПросмотр = Истина;
        ЭтотОбъект.Элементы.СчетчикиПроизводительностиУстановитьОтметкуСчетчики.Доступность = Ложь;
        ЭтотОбъект.Элементы.СчетчикиПроизводительностиСнятьОтметкуСчетчики.Доступность = Ложь;
        ЭтотОбъект.Элементы.СчетчикиПроизводительностиИзменитьЭлементы.Доступность = Ложь;
        ЭтотОбъект.Элементы.ФормаЗаполнитьСчетчикиПоРоли.Доступность = Ложь;
        ЭтотОбъект.Элементы.СчетчикиПроизводительностиПроверитьСчетчикиПроизводительности.Доступность = Ложь;
        ЭтотОбъект.Элементы.СчетчикиПроизводительностиВсеСчетчики.Доступность = Ложь;
        
    КонецЕсли;
    
    Если НЕ (НЕ ЗначениеЗаполнено(Объект.ОперационнаяСистема) ИЛИ СтрНайти(ВРЕГ(Объект.ОперационнаяСистема), "WINDOWS") > 0) Тогда
        ЭтотОбъект.Элементы.ГруппаИнформацияОРеестре.Видимость = Ложь;
        ЭтотОбъект.Элементы.ГруппаУстановленныеОбновления.Видимость = Ложь;        
    КонецЕсли;
    
    Элементы.СчетчикиПроизводительностиКонтрольПоступленияДанных.Доступность = Объект.СобиратьДанныеПроизводительности; 
    
    Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ТипОС) Тогда
        
        Если Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипОС.Windows") Тогда
            РольТипаОС = ПредопределенноеЗначение("Справочник.РолиОборудования.СерверWindows");
        ИначеЕсли Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипОС.Linux") Тогда
            РольТипаОС = ПредопределенноеЗначение("Справочник.РолиОборудования.СерверLinux");
        КонецЕсли;
                
        ПараметрыПоиска = Новый Структура("Роль", РольТипаОС);
        СтрокиМассив = Объект.РолиОборудования.НайтиСтроки(ПараметрыПоиска);
        
        Если СтрокиМассив.Количество() = 0 Тогда
            НовСтрока = Объект.РолиОборудования.Добавить();
            НовСтрока.Роль = РольТипаОС;
        КонецЕсли;
                
    КонецЕсли;
    
    СетевыеАдаптеры();
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    ХостПриОткрытии = Объект.Хост;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
    
    Если ЗначениеЗаполнено(ЕстьТестированиеСчетчиков) И ЕстьТестированиеСчетчиков И НЕ ЗавершениеРаботы Тогда
        ПриЗакрытииНаСервере(Объект.Ссылка);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    
    Если НЕ ПараметрыЗаписи.Свойство("Программно") Тогда
        
        Если Объект.ФормироватьСчетчикПоНаименованию И Объект.СобиратьДанныеПроизводительности = 2 Тогда
            
            Объект.ФормироватьСчетчикПоНаименованию = Ложь;
            
            ПараметрыЗаписи.Вставить("ТипВопроса", "НаименованиеХост");
            ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ФормироватьСчетчикПоНаименованиюВопрос", ЭтотОбъект, ПараметрыЗаписи);
            ПоказатьВопрос(ОписаниеОповещенияВопрос, Нстр("ru = 'При формировании полного имени счетчиков производительности
            |будет использоваться реквизит ""Host"" вместо реквизита ""Наименование""!
            |Обратное изменение не возможно! Конвертировать счетчики в новый формат?'"), РежимДиалогаВопрос.ДаНет);
            
            Отказ = Истина;
            
            Возврат;
            
        КонецЕсли;
        
        Если ЗначениеЗаполнено(ХостПриОткрытии) И ХостПриОткрытии <> Объект.Хост Тогда
            
            ПараметрыЗаписи.Вставить("ТипВопроса", "ХостХост");
            ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ФормироватьСчетчикПоНаименованиюВопрос", ЭтотОбъект, ПараметрыЗаписи);
            ПоказатьВопрос(ОписаниеОповещенияВопрос, Нстр("ru = 'Изменился Host оборудования!
            |Конвертировать наименование в текущих счетчиках?
            |При конвертации собранные данные привязываются к новому наименованию.'"), РежимДиалогаВопрос.ДаНет);
            
            Отказ = Истина;
            
            Возврат;            
            
        КонецЕсли;
        
        Для Каждого ТекСтрока Из Объект.СчетчикиПроизводительности Цикл
            Если ТекСтрока.КонтрольПоступленияДанных И НЕ ЗначениеЗаполнено(ТекСтрока.ДопустимоеВремяОтсутствияДанных) Тогда
                Сообщение = Новый СообщениеПользователю();
                Сообщение.Текст = "Не заполнена колонка ""Допустимо нет данных"" в строке "
                + ТекСтрока.НомерСтроки + " списка ""Счетчики производительности""";
                Сообщение.Поле = "Объект.СчетчикиПроизводительности[" + ТекСтрока.НомерСтроки + "].ДопустимоеВремяОтсутствияДанных";
                Сообщение.Сообщить();
                Отказ = Истина;
            КонецЕсли;
        КонецЦикла;
        
        Для Каждого ТекСтрока Из ЭтотОбъект.СетевыеАдаптеры Цикл
            Если НЕ ЗначениеЗаполнено(ТекСтрока.СетевойАдаптер) Тогда
                Сообщение = Новый СообщениеПользователю();
                Сообщение.Текст = "Не заполнена колонка ""Сетевой адаптер"" в строке "
                + ТекСтрока.ПолучитьИдентификатор() + " списка ""Сетевые адаптеры""";
                Сообщение.Поле = "СетевыеАдаптеры[" + ТекСтрока.ПолучитьИдентификатор() + "].СетевойАдаптер";
                Сообщение.Сообщить();
                Отказ = Истина;
            КонецЕсли;
        КонецЦикла;
                           
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    СчетчикиБыли = Справочники.Оборудование.СчетчикиПроизводительности(Объект.Ссылка);
    ПараметрыЗаписи.Вставить("СчетчикиБыли", СчетчикиБыли);
    ПараметрыЗаписи.Вставить("ПлощадкаЭксплуатацииБыла", ПлощадкаЭксплуатации(Объект.Ссылка));
    
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    ЕстьКонвертация = Ложь;
    КонвертацияВозможна = Истина;
    
    // Необходимо отключить контроль поступления данных по счетчикам, которые удалены из табличной части.
    ОтключитьКонтрольУдаленнныхСчетчиков(ПараметрыЗаписи.СчетчикиБыли, ТекущийОбъект.СчетчикиПроизводительности); 
    
    Для Каждого ТекСтрока Из Объект.СчетчикиПроизводительности Цикл
        
        Если НЕ ЗначениеЗаполнено(ТекСтрока.СсылкаГруппыСчетчиков) ИЛИ ТекущийОбъект.ПлощадкаЭксплуатации <> ПараметрыЗаписи.ПлощадкаЭксплуатацииБыла Тогда
            ПолныйКодДляПоиска = Новый Массив;
            ПолныйКодДляПоиска.Добавить("Производительность оборудования");
            ПолныйКодДляПоиска.Добавить(ТекущийОбъект.ПлощадкаЭксплуатации.Наименование);
            Если ТекущийОбъект.ФормироватьСчетчикПоНаименованию Тогда
                ПолныйКодДляПоиска.Добавить(ТекущийОбъект.Наименование);
            Иначе
                ПолныйКодДляПоиска.Добавить(ВРЕГ(ТекущийОбъект.Хост));
            КонецЕсли;
            ПолныйКодДляПоиска.Добавить(ТекСтрока.СчетчикПроизводительности);
            ТекСтрока.СсылкаГруппыСчетчиков = СтатистикаГруппыСчетчиков.СоздатьНовуюГруппуСчетчиков(ПолныйКодДляПоиска);
        КонецЕсли;
        
        НеобходимаЗапись = Ложь;
        
        СпрОбъект = ТекСтрока.СсылкаГруппыСчетчиков.ПолучитьОбъект();
        Если ПараметрыЗаписи.Свойство("Конвертировать") Тогда
            
            Если ПараметрыЗаписи.Конвертировать = "КонвертацияНаименованиеХост" И Объект.Наименование <> ВРЕГ(ТекущийОбъект.Хост) Тогда
                
                НовыйРодитель = Новый Массив;
                НовыйРодитель.Добавить("Производительность оборудования");
                НовыйРодитель.Добавить(ТекущийОбъект.ПлощадкаЭксплуатации.Наименование);
                НовыйРодитель.Добавить(ВРЕГ(ТекущийОбъект.Хост));
                НовыйРодительСсылка = СтатистикаГруппыСчетчиков.СоздатьНовуюГруппуСчетчиков(НовыйРодитель);
                СпрОбъект.Родитель = НовыйРодительСсылка;
                НеобходимаЗапись = НеобходимаЗапись ИЛИ Истина;
                
            ИначеЕсли ПараметрыЗаписи.Конвертировать = "НеКонвертацияНаименованиеХост"  И Объект.Наименование <> ВРЕГ(ТекущийОбъект.Хост) Тогда
                
                СпрОбъект.КонтрольПоступленияДанных = Ложь;
                СпрОбъект.Записать();
                
                ПолныйКодДляПоискаНовый = Новый Массив;
                ПолныйКодДляПоискаНовый.Добавить("Производительность оборудования");
                ПолныйКодДляПоискаНовый.Добавить(ТекущийОбъект.ПлощадкаЭксплуатации.Наименование);
                ПолныйКодДляПоискаНовый.Добавить(ВРЕГ(ТекущийОбъект.Хост));
                ПолныйКодДляПоискаНовый.Добавить(ТекСтрока.СчетчикПроизводительности);
                ТекСтрока.СсылкаГруппыСчетчиков = СтатистикаГруппыСчетчиков.СоздатьНовуюГруппуСчетчиков(ПолныйКодДляПоискаНовый);
                СпрОбъект = ТекСтрока.СсылкаГруппыСчетчиков.ПолучитьОбъект();
                
            ИначеЕсли ПараметрыЗаписи.Конвертировать = "КонвертацияХостХост" Тогда
                
                ЕстьКонвертация = Истина;
                
                НовыйРодитель = Новый Массив;
                НовыйРодитель.Добавить("Производительность оборудования");
                НовыйРодитель.Добавить(ТекущийОбъект.ПлощадкаЭксплуатации.Наименование);
                НовыйРодитель.Добавить(ВРЕГ(ТекущийОбъект.Хост));
                НовыйРодительСсылка = СтатистикаГруппыСчетчиков.СоздатьНовуюГруппуСчетчиков(НовыйРодитель);
                
                Если Справочники.ГруппыСчетчиков.НайтиПоКоду(СпрОбъект.Код, Ложь, НовыйРодительСсылка) = Справочники.ГруппыСчетчиков.ПустаяСсылка() Тогда                
                    СпрОбъект.Родитель = НовыйРодительСсылка;
                    НеобходимаЗапись = НеобходимаЗапись ИЛИ Истина;
                    КонвертацияВозможна = КонвертацияВозможна И Истина;
                Иначе
                    КонвертацияВозможна = КонвертацияВозможна И Ложь;                    
                КонецЕсли;
            
                
            ИначеЕсли ПараметрыЗаписи.Конвертировать = "НеКонвертацияХостХост" Тогда
                
                СпрОбъект.КонтрольПоступленияДанных = Ложь;
                СпрОбъект.Записать();
                
                ПолныйКодДляПоискаНовый = Новый Массив;
                ПолныйКодДляПоискаНовый.Добавить("Производительность оборудования");
                ПолныйКодДляПоискаНовый.Добавить(ТекущийОбъект.ПлощадкаЭксплуатации.Наименование);
                ПолныйКодДляПоискаНовый.Добавить(ВРЕГ(ТекущийОбъект.Хост));
                ПолныйКодДляПоискаНовый.Добавить(ТекСтрока.СчетчикПроизводительности);
                ТекСтрока.СсылкаГруппыСчетчиков = СтатистикаГруппыСчетчиков.СоздатьНовуюГруппуСчетчиков(ПолныйКодДляПоискаНовый);
                СпрОбъект = ТекСтрока.СсылкаГруппыСчетчиков.ПолучитьОбъект();
                
            КонецЕсли;
            
        КонецЕсли;
        
        КонтрольПоступленияДанных = ТекСтрока.СобиратьДанные И ТекСтрока.КонтрольПоступленияДанных И ТекущийОбъект.СобиратьДанныеПроизводительности > 0; 
        Если СпрОбъект.КонтрольПоступленияДанных <> КонтрольПоступленияДанных Тогда
            СпрОбъект.КонтрольПоступленияДанных = КонтрольПоступленияДанных;
            НеобходимаЗапись = НеобходимаЗапись ИЛИ Истина;
        КонецЕсли;
        
        Если СпрОбъект.ДопустимоеВремяОтсутствияДанных <> ТекСтрока.ДопустимоеВремяОтсутствияДанных Тогда
            СпрОбъект.ДопустимоеВремяОтсутствияДанных = ТекСтрока.ДопустимоеВремяОтсутствияДанных;
            НеобходимаЗапись = НеобходимаЗапись ИЛИ Истина;
        КонецЕсли;
                
        Если НеобходимаЗапись Тогда
            СпрОбъект.Записать();
        КонецЕсли;
                        
    КонецЦикла;
    
    Если ЕстьКонвертация И НЕ КонвертацияВозможна Тогда
        
        СообщениеПользователю = Новый СообщениеПользователю;
        СообщениеПользователю.Текст = "У хоста """ + ТекущийОбъект.Хост + """ обнаружены аналогичные счетчики! Конвертация не возможна!";
        СообщениеПользователю.Сообщить();        
        
        Отказ = Истина;
        
    КонецЕсли;
    
    ЗаписатьСетевыеАдаптеры();
        
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрытьМоя(Команда)
    ПараметрыЗаписи = Новый Структура("Закрыть", Истина);
    Записать(ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетчикиПоРоли(Команда)
    
    Если Объект.РолиОборудования.Количество() > 0 Тогда
        
        Если Объект.СчетчикиПроизводительности.Количество() > 0 Тогда
            
            ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьСчетчикиПоРолиЗавершение", ЭтотОбъект);
            ТекстВопроса = НСтр("ru = 'Будут удалены все не зафиксированные счетчики производительности!
            |Вы уверены, что желаете продолжить?'");
            ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);
            
        Иначе    
            
            ЗаполнитьСчетчикиПоРолиЗавершение(КодВозвратаДиалога.Да, Неопределено);
            
        КонецЕсли;
        
    Иначе
        
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не выбраны роли сервера!
        |Синхронизация не возможна!", "Объект.РолиОборудования", ЭтотОбъект);
        
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСчетчикиПроизводительности(Команда)
    
    Если Объект.СчетчикиПроизводительности.Количество() = 0 Тогда
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Нет счетчиков производительности. Тест не возможен!", "Объект.СчетчикиПроизводительности", ЭтотОбъект);
        Возврат;
    КонецЕсли;
        
    Если Объект.СобиратьДанныеПроизводительности = 2 И НЕ ЗначениеЗаполнено(Объект.АгентКИП) Тогда
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не выбран агент КИП. Тест не возможен!", "Объект.АгентКИП", ЭтотОбъект);
        Возврат;
    ИначеЕсли Объект.СобиратьДанныеПроизводительности = 1 И Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипОС.Linux") Тогда
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Сбор счетчиков с помощью pdh.dll возможен только для ОС семейства Windows.
        |Тест не возможен!", "Объект.ТипОС", ЭтотОбъект);
        Возврат;
    ИначеЕсли Объект.СобиратьДанныеПроизводительности = 0 Тогда
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Сбор счетчиков отключен. Тест не возможен!", "Объект.СобиратьДанныеПроизводительности", ЭтотОбъект);
        Возврат;
    КонецЕсли;
    
    ЕстьТестированиеСчетчиков = Истина;
    
    СчетчикиПроверить = Новый Массив;
    Для Каждого ТекСтрока Из Объект.СчетчикиПроизводительности Цикл
        Если ТекСтрока.СобиратьДанные Тогда
            СчетчикиПроверить.Добавить(ТекСтрока.СчетчикПроизводительности);
        КонецЕсли;
    КонецЦикла;
        
    ДополнительныеПараметры = Новый Соответствие;
    ДополнительныеПараметры.Вставить("Оборудование", Объект.Ссылка);
    ДополнительныеПараметры.Вставить("Хост", Объект.Хост); 
    ДополнительныеПараметры.Вставить("ЯзыкОС", Объект.ЯзыкОС);
    ДополнительныеПараметры.Вставить("Счетчики", СчетчикиПроверить);
    ДополнительныеПараметры.Вставить("ТипОС", Объект.ТипОС);
    ДополнительныеПараметры.Вставить("СобиратьДанныеПроизводительности", Объект.СобиратьДанныеПроизводительности);
    
    ПараметрыЗапуска = ДлительныеОперацииКлиент.ПодготовитьЗапускВыполненияВФоне(ДополнительныеПараметры);
    
         
    ПроверитьСчетчикиПроизводительностиНаСервере(Объект.Ссылка, Объект.СобиратьДанныеПроизводительности, ПараметрыЗапуска);
            
    Для Каждого ТекСтрока Из Объект.СчетчикиПроизводительности Цикл
        
        Если ТекСтрока.СобиратьДанные Тогда
            ТекСтрока.ТекущееЗначениеСчетчика = "Подключение...";
        Иначе
            ТекСтрока.ТекущееЗначениеСчетчика = "Отключен";
        КонецЕсли;
                
    КонецЦикла;
    
    ПодключитьОбработчикОжидания("ПроверитьСчетчикиПроизводительностиОбработчикОжидания", 1);
        
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСчетчики(Команда)
	ИзменитьОтметкуСчетчиков(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуСчетчики(Команда)
	ИзменитьОтметкуСчетчиков(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЭлементы(Команда)
    
    ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьЭлементыЗакрытие", ЭтотОбъект);
    ПараметрыОткрытия = Неопределено;
    
    Если ЭтотОбъект.Элементы.СчетчикиПроизводительности.ТекущиеДанные <> Неопределено Тогда
        ПараметрыОткрытия = Новый Структура("СобиратьДанные, Зафиксировать, КонтрольПоступленияДанных, ДопустимоеВремяОтсутствияДанных");
        ПараметрыОткрытия.СобиратьДанные = ЭтотОбъект.Элементы.СчетчикиПроизводительности.ТекущиеДанные.СобиратьДанные;
        ПараметрыОткрытия.Зафиксировать = ЭтотОбъект.Элементы.СчетчикиПроизводительности.ТекущиеДанные.Зафиксировать;
        ПараметрыОткрытия.КонтрольПоступленияДанных = ЭтотОбъект.Элементы.СчетчикиПроизводительности.ТекущиеДанные.КонтрольПоступленияДанных;
        ПараметрыОткрытия.ДопустимоеВремяОтсутствияДанных = ЭтотОбъект.Элементы.СчетчикиПроизводительности.ТекущиеДанные.ДопустимоеВремяОтсутствияДанных;
    КонецЕсли;
    
    ОткрытьФорму("Справочник.Оборудование.Форма.ФормаИзменитьЭлементы", ПараметрыОткрытия, ЭтотОбъект,,,,ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    
КонецПроцедуры

&НаКлиенте
Процедура ВсеСчетчики(Команда)
    
    Если Объект.СобиратьДанныеПроизводительности = 2 И НЕ ЗначениеЗаполнено(Объект.АгентКИП) Тогда
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не выбран агент КИП. Получение данных не возможно!", "Объект.АгентКИП", ЭтотОбъект);
        Возврат;
    ИначеЕсли Объект.СобиратьДанныеПроизводительности = 0 Тогда
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Сбор счетчиков отключен. Получение данных не возможно!", "Объект.СобиратьДанныеПроизводительности", ЭтотОбъект);
        Возврат;
    КонецЕсли;
    
    ЭтотОбъект.Элементы.СтраницаТестНастроек.Видимость = Истина;
    ЭтотОбъект.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтотОбъект.Элементы.СтраницаТестНастроек;
    ЭтотОбъект.РезультатПроверки = "Подключение...";
        
    Если Объект.СобиратьДанныеПроизводительности = 0 Тогда
        ЭтотОбъект.РезультатПроверки = "Сбор счетчиков производительности отключен.
        |Получение данных не возможно.";
    ИначеЕсли Объект.СобиратьДанныеПроизводительности = 1 Тогда
        
        Если Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипОС.Windows") Тогда
            
            ДополнительныеПараметры = Новый Соответствие;
            ДополнительныеПараметры.Вставить("Хост", Объект.Хост); 
            ДополнительныеПараметры.Вставить("ЯзыкОС", Объект.ЯзыкОС);
            ПараметрыЗапуска = ДлительныеОперацииКлиент.ПодготовитьЗапускВыполненияВФоне(ДополнительныеПараметры);
            УникальныйИдентификаторФЗ = ВсеСчетчикиНаСервереPDH(ПараметрыЗапуска);
            
            ПодключитьОбработчикОжидания("ПроверкаВсеСчетчикиPDH", 1, Истина);
            
        ИначеЕсли Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипОС.Linux") Тогда
            ЭтотОбъект.РезультатПроверки = "Сбор счетчиков производительности на ОС Linux возможен только с помощью агента КИП.
            |Получение данных не возможно.";
        КонецЕсли;
                
    ИначеЕсли Объект.СобиратьДанныеПроизводительности = 2 Тогда
        
        Если Объект.ИспользоватьВнешнегоАгента Тогда 
            УникальныйИдентификаторКоманды = ВсеСчетчикиНаСервере(Объект.АгентКИП);
            ПодключитьОбработчикОжидания("ПроверкаВыполненияКомандыАгента", 1, Истина);
        Иначе
            ЭтотОбъект.РезультатПроверки = "Агент КИП отключен.
            |Получение данных не возможно.";
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаСчетчиков(Команда)
    
    Ссылки = Новый Массив;
    Для Каждого ТекСтрока Из Объект.СчетчикиПроизводительности Цикл
        Ссылки.Добавить(ТекСтрока.СсылкаГруппыСчетчиков);
    КонецЦикла;
    
    ТекДата = НачалоМинуты(ТекущаяДата());
    ОбщийКлиент.ДиаграммаОбщаяСчетчикиПроизводительности(Ссылки, ТекДата - 86400, ТекДата, ЭтотОбъект.УникальныйИдентификатор);
            
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    
    Если РезультатЗакрытия <> Неопределено Тогда
        
        Модифицированность = Истина;
        
        ЭтотОбъект.СетевыеАдаптеры.Очистить();
        
        СетевыеАдаптерыНовые = ЗаполнитьСетевыеАдаптерыНаСервере(Объект.Хост, РезультатЗакрытия.Пользователь, РезультатЗакрытия.Пароль);
        
        ТекущаяДата = Дата(1,1,1) + ТекущаяУниверсальнаяДатаВМиллисекундах()/1000;
        
        Для Каждого СетевойАдаптер Из СетевыеАдаптерыНовые Цикл
            
            НовСтрока = ЭтотОбъект.СетевыеАдаптеры.Добавить();
            НовСтрока.ИмяКомпьютера = СетевойАдаптер.NameNsLookUp;
            НовСтрока.ИмяКомпьютераПолное = СетевойАдаптер.FullNameNsLookUp;
            НовСтрока.IPAddress = СетевойАдаптер.IPAddress;
            НовСтрока.MACAddress = СетевойАдаптер.MACAddress;
            НовСтрока.Наименование = СетевойАдаптер.Description;
            НовСтрока.СетевойАдаптер = СетевойАдаптер.Caption;
            НовСтрока.Подключено = СетевойАдаптер.NetEnabled;
            НовСтрока.Скорость = СетевойАдаптер.Speed;
            НовСтрока.ДатаЗаписи = ТекущаяДата;
            
        КонецЦикла;
        
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЛицензии(Команда)
    
    Если ЗначениеЗаполнено(Объект.АгентКИП) Тогда
        
        КоличествоПроверок = 0;
        
        ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, Неопределено);
        УникальныйИдентификаторКомандыЛицензии1С = ПолучитьЛицензииНаСервере(Объект.АгентКИП);
        ПодключитьОбработчикОжидания("ПроверкаВыполненияКомандыАгентаЛицензии1С", 1, Истина);
        
    Иначе
        
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не выбран Агент КИП!
        |Получение лицензий 1С не возможно!", "Объект.АгентКИП", ЭтотОбъект);
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВнешниеЦККПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ПередаватьДанные = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтметкуСчетчиков(Отметка)
    ЭлСчетчики = ЭтотОбъект.Элементы.СчетчикиПроизводительности;
    Если ЭлСчетчики.ВыделенныеСтроки.Количество() > 1 Тогда
        Для Каждого ИндексСчетчика Из ЭлСчетчики.ВыделенныеСтроки Цикл
            ЭлСтрока = Объект.СчетчикиПроизводительности.НайтиПоИдентификатору(ИндексСчетчика);
            ЭлСтрока.СобиратьДанные = Отметка;
            ЭлСтрока.КонтрольПоступленияДанных = Отметка;
            Если НЕ ЗначениеЗаполнено(ЭлСтрока.ДопустимоеВремяОтсутствияДанных) Тогда
                ЭлСтрока.ДопустимоеВремяОтсутствияДанных = 10;
            КонецЕсли;
        КонецЦикла;
    Иначе
        Для Каждого ТекСчетчик Из Объект.СчетчикиПроизводительности Цикл
            ТекСчетчик.СобиратьДанные = Отметка;
            ТекСчетчик.КонтрольПоступленияДанных = Отметка;
            Если НЕ ЗначениеЗаполнено(ТекСчетчик.ДопустимоеВремяОтсутствияДанных) Тогда
                ТекСчетчик.ДопустимоеВремяОтсутствияДанных = 10;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СчетчикиПроизводительностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    Если Поле.Имя = "СчетчикиПроизводительностиЗафиксировать" Тогда
        
        Элемент.ТекущиеДанные.Зафиксировать = ?(Элемент.ТекущиеДанные.Зафиксировать = 1, 0, 1);
        Модифицированность = Истина;
        СтандартнаяОбработка = Ложь;
        
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура УстановленныеОбновленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    Если Поле.Имя = "УстановленныеОбновленияОписание" Тогда
        
        ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеНачатьЗапускПриложения", ЭтотОбъект);
        НачатьЗапускПриложения(ОписаниеОповещения, Элемент.ТекущиеДанные.Описание);
        СтандартнаяОбработка = Ложь;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СобиратьДанныеПроизводительностиПриИзменении(Элемент)
    
    Если Объект.СобиратьДанныеПроизводительности > 0 Тогда
        
        НужноЗадатьВопрос = Ложь;
        Для Каждого ТекСтрока Из Объект.СчетчикиПроизводительности Цикл
            НужноЗадатьВопрос = НужноЗадатьВопрос ИЛИ (ТекСтрока.СобиратьДанные И НЕ ТекСтрока.КонтрольПоступленияДанных);
        КонецЦикла;
        
        Если НужноЗадатьВопрос Тогда
            ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СобиратьДанныеПроизводительностиПриИзмененииВопрос", ЭтотОбъект);
            ПоказатьВопрос(ОписаниеОповещенияВопрос, Нстр("ru = 'Включить контроль поступления данных для всех счетчиков?'"), РежимДиалогаВопрос.ДаНет);
        КонецЕсли;
    Иначе
        
        Для Каждого ТекСтрока Из Объект.СчетчикиПроизводительности Цикл
            ТекСтрока.КонтрольПоступленияДанных = Ложь;
        КонецЦикла;
        
    КонецЕсли;
    
    Элементы.СчетчикиПроизводительностиКонтрольПоступленияДанных.Доступность = Объект.СобиратьДанныеПроизводительности; 
    
КонецПроцедуры

&НаКлиенте
Процедура СчетчикиПроизводительностиСобиратьДанныеПриИзменении(Элемент)
    
    ТекДанные = Элемент.Родитель.ТекущиеДанные;
    Если НЕ ТекДанные.СобиратьДанные Тогда
        ТекДанные.КонтрольПоступленияДанных = ТекДанные.СобиратьДанные;
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура СобиратьДанныеПроизводительностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    
    Если ВыбранноеЗначение = 1 Тогда
        ПолеВвода = "Объект.ТипОС";
    ИначеЕсли ВыбранноеЗначение = 2 Тогда
        ПолеВвода = "Объект.АгентКИП";
    КонецЕсли;
    
    ПроверитьВыборСобиратьДанныеПроизводительности(ВыбранноеЗначение, ПолеВвода); 
    
КонецПроцедуры

&НаКлиенте
Процедура ТипОСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    
    Если ВыбранноеЗначение <> Объект.ТипОС Тогда
        
        Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипОС.Windows") Тогда
            РольТипаОС = ПредопределенноеЗначение("Справочник.РолиОборудования.СерверWindows");
            НЕРольТипаОС = ПредопределенноеЗначение("Справочник.РолиОборудования.СерверLinux");
        ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипОС.Linux") Тогда
            РольТипаОС = ПредопределенноеЗначение("Справочник.РолиОборудования.СерверLinux");
            НЕРольТипаОС = ПредопределенноеЗначение("Справочник.РолиОборудования.СерверWindows");
        КонецЕсли;
        
        ПараметрыПоиска = Новый Структура("Роль", НЕРольТипаОС);
        СтрокиМассив = Объект.РолиОборудования.НайтиСтроки(ПараметрыПоиска);
        
        Если СтрокиМассив.Количество() > 0 Тогда
            
            Для Каждого ТекСтрока Из СтрокиМассив Цикл
                ТекСтрока.Роль = РольТипаОС;
            КонецЦикла;
            
        Иначе
            
            НовСтрока = Объект.РолиОборудования.Добавить();
            НовСтрока.Роль = РольТипаОС;        
            
        КонецЕсли;
        
    КонецЕсли;
    
    ПроверитьТипОСВыбор(ВыбранноеЗначение, "Объект.СобиратьДанныеПроизводительности");
    
КонецПроцедуры

&НаКлиенте
Процедура СчетчикиПроизводительностиКонтрольПоступленияДанныхПриИзменении(Элемент)
    
    ТекущиеДанные = Элементы.СчетчикиПроизводительности.ТекущиеДанные;
    Если ТекущиеДанные.КонтрольПоступленияДанных И НЕ ЗначениеЗаполнено(ТекущиеДанные.ДопустимоеВремяОтсутствияДанных) Тогда
        ТекущиеДанные.ДопустимоеВремяОтсутствияДанных = 10;
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура СчетчикиПроизводительностиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    
    Если НоваяСтрока Тогда
        ТекущиеДанные = Элемент.ТекущиеДанные;
        ТекущиеДанные.ДопустимоеВремяОтсутствияДанных = 10;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СобиратьДанныеЛицензий1СПриИзменении(Элемент)
    
    Если НЕ ЗначениеЗаполнено(Объект.АгентКИП) Тогда
        
        Если Объект.СобиратьДанныеЛицензий1С Тогда
            ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не выбран Агент КИП!
            |Включить сбор информации о лицензиях не возможено!", "Объект.АгентКИП", ЭтотОбъект);
        Иначе
            ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не выбран Агент КИП!
            |Отключить сбор информации о лицензиях не возможено!", "Объект.АгентКИП", ЭтотОбъект);
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьЛицензииНаСервере(АгентКИП)
    
    КомандаАгенту = Новый Соответствие;
    КомандаАгенту.Вставить("instruction", "getLicenses");
    
    Возврат РегистрыСведений.КомандыАгентаКИП.ДобавитьКоманду(АгентКИП, Перечисления.ТипыКомандАгентаКИП.Ring, КомандаАгенту);
    
КонецФункции

&НаКлиенте
Процедура ПроверкаВыполненияКомандыАгентаЛицензии1С() Экспорт
    
    КоличествоПроверок = КоличествоПроверок + 1;
    
    РезультатВыполнения = ОбщийВызовСервера.ПроверкаВыполненияКомандыАгентаПолучитьЛицензии1С(Объект.Ссылка, УникальныйИдентификаторКомандыЛицензии1С);
    
    Если РезультатВыполнения = Неопределено Тогда
        
        Если КоличествоПроверок < 60 Тогда
            ПодключитьОбработчикОжидания("ПроверкаВыполненияКомандыАгентаЛицензии1С", 1, Истина);
        Иначе
            ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
            Сообщить("Не удалось получить ответ от агента за 60 секунд.");
        КонецЕсли;
        
    Иначе
        
        ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
        Если ЗначениеЗаполнено(РезультатВыполнения["error"]) Тогда
            Сообщить(РезультатВыполнения["error"]);
        Иначе
            Объект.ВерсияRing = РезультатВыполнения["ringVersion"];
            Объект.ДатаUTCОбновленияЛицензий1С = Дата(РезультатВыполнения["dateUTC"]);
            Модифицированность = Истина;
        КонецЕсли;        
        Элементы.Лицензии1С.Обновить();
        
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ОтключитьКонтрольУдаленнныхСчетчиков(СчетчикиБыли, СчетчикиПроизводительности)
    
    ПолныйКодДляПоиска = Новый Массив;
    ПолныйКодДляПоиска.Добавить("Производительность оборудования");
    ПолныйКодДляПоиска.Добавить(Объект.ПлощадкаЭксплуатации.Наименование);
    Если Объект.ФормироватьСчетчикПоНаименованию Тогда
        ПолныйКодДляПоиска.Добавить(Объект.Наименование);
    Иначе
        ПолныйКодДляПоиска.Добавить(Объект.Хост);
    КонецЕсли;
    ПолныйКодДляПоиска.Добавить("");
            
    Для Каждого Счетчик Из СчетчикиБыли Цикл
        Если СчетчикиПроизводительности.Найти(Счетчик, "СчетчикПроизводительности") = Неопределено Тогда
            
            ПолныйКодДляПоиска[3] = Счетчик.Наименование;
            
            ПолныйКодДляПоискаСтр = СтрСоединить(ПолныйКодДляПоиска, "/");
            
            СчетчикСсылка = Справочники.ГруппыСчетчиков.НайтиПоПолномуКоду(ПолныйКодДляПоискаСтр);
            СчетчикОбъект = СчетчикСсылка.ПолучитьОбъект();
            СчетчикОбъект.КонтрольПоступленияДанных = Ложь;
            СчетчикОбъект.Записать();
            
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура СетевыеАдаптеры()
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
	|   РегистрСведенийОборудованиеСетевыеАдаптеры.Оборудование,
	|   РегистрСведенийОборудованиеСетевыеАдаптеры.СетевойАдаптер,
	|   РегистрСведенийОборудованиеСетевыеАдаптеры.Скорость,
	|   РегистрСведенийОборудованиеСетевыеАдаптеры.Наименование,
	|   РегистрСведенийОборудованиеСетевыеАдаптеры.MACAddress,
	|   РегистрСведенийОборудованиеСетевыеАдаптеры.IPAddress,
	|   РегистрСведенийОборудованиеСетевыеАдаптеры.Подключено,
	|   РегистрСведенийОборудованиеСетевыеАдаптеры.ИмяКомпьютера,
    |   РегистрСведенийОборудованиеСетевыеАдаптеры.ИмяКомпьютераПолное
    |ИЗ
	|   РегистрСведений.ОборудованиеСетевыеАдаптеры КАК РегистрСведенийОборудованиеСетевыеАдаптеры
    |ГДЕ
	|   РегистрСведенийОборудованиеСетевыеАдаптеры.Оборудование = &Оборудование
    |";
    
    Запрос.УстановитьПараметр("Оборудование", Объект.Ссылка);
    
    ЭтотОбъект.СетевыеАдаптеры.Загрузить(Запрос.Выполнить().Выгрузить());
    
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСетевыеАдаптеры()
    
    НаборЗаписей = РегистрыСведений.ОборудованиеСетевыеАдаптеры.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Оборудование.Установить(Объект.Ссылка);
    
    Для Каждого СетевойАдаптер Из ЭтотОбъект.СетевыеАдаптеры Цикл
        
        НовЗапись = НаборЗаписей.Добавить();
        НовЗапись.Оборудование = Объект.Ссылка;
        НовЗапись.СетевойАдаптер = СетевойАдаптер.СетевойАдаптер;
        НовЗапись.Скорость = СетевойАдаптер.Скорость;
        НовЗапись.Наименование = СетевойАдаптер.Наименование;
        НовЗапись.MACAddress = СетевойАдаптер.MACAddress;
        НовЗапись.IPAddress = СетевойАдаптер.IPAddress;
        НовЗапись.ДатаЗаписи = СетевойАдаптер.ДатаЗаписи;
        НовЗапись.Подключено = СетевойАдаптер.Подключено;
        НовЗапись.ИмяКомпьютера = СетевойАдаптер.ИмяКомпьютера;
        НовЗапись.ИмяКомпьютераПолное = СетевойАдаптер.ИмяКомпьютераПолное;
                
    КонецЦикла;
    
    НаборЗаписей.Записать(Истина);
        
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСетевыеАдаптерыНаСервере(Хост, Пользователь, Пароль)
    Возврат Справочники.Оборудование.ПолучитьСетевыеАдаптеры(Хост, Пользователь, Пароль);
КонецФункции

&НаКлиенте
Функция ПроверитьВыборСобиратьДанныеПроизводительности(ВыбранноеЗначение, ПолеВвода = Неопределено)
    
    Результат = Истина;
    
    Если ВыбранноеЗначение = 1 И Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипОС.Linux") Тогда
        
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Сбор счетчиков ""PDH"" не поддерживается для ОС семейства Linux!
        |Установите тип ОС Windows или измените способ сбора счетчиков!", ПолеВвода, ЭтотОбъект);
        
        Результат = Ложь;
        
    ИначеЕсли ВыбранноеЗначение = 2 И НЕ ЗначениеЗаполнено(Объект.АгентКИП) Тогда
        
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не выбран Агент КИП!
        |Сбор счетчиков не возможен!", ПолеВвода, ЭтотОбъект);
        
        Результат = Ложь;
        
    КонецЕсли;
    
    
    
    Возврат Результат;
    
КонецФункции

&НаКлиенте
Функция ПроверитьТипОСВыбор(ВыбранноеЗначение, ПолеВвода = Неопределено)
    
    Результат = Истина;
    
    Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипОС.Linux") И Объект.СобиратьДанныеПроизводительности = 1 Тогда
        
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Сбор счетчиков ""PDH"" не поддерживается для ОС семейства Linux!
        |Измените способ сбора счетчиков или установите тип ОС Windows!", ПолеВвода, ЭтотОбъект);
        
        Результат = Ложь;
        
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

&НаКлиенте
Процедура ПроверкаВыполненияКомандыАгента() Экспорт
    
    РезультатВыполнения = ПроверкаВыполненияКомандыАгентаНаСервере(УникальныйИдентификаторКоманды);
    
    Если РезультатВыполнения = Неопределено Тогда
        ПодключитьОбработчикОжидания("ПроверкаВыполненияКомандыАгента", 1, Истина);
    Иначе
        
        ТипРезультата = ТипЗнч(РезультатВыполнения);
        
        Если ТипРезультата = Тип("Соответствие") Тогда
            ЭтотОбъект.РезультатПроверки = СтрСоединить(РезультатВыполнения["supportedCounters"], Символы.ПС);
        ИначеЕсли ТипРезультата = Тип("Массив") Тогда
            ЭтотОбъект.РезультатПроверки = СтрСоединить(РезультатВыполнения, Символы.ПС);
        Иначе
            ЭтотОбъект.РезультатПроверки = "Ошибка в формате ответа агента.";
        КонецЕсли;
        
    КонецЕсли;
        
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаВыполненияКомандыАгентаНаСервере(УникальныйИдентификаторКоманды)
    
    Возврат РегистрыСведений.КомандыАгентаКИП.РезультатВыполнения(УникальныйИдентификаторКоманды);
    
КонецФункции

&НаКлиенте
Процедура ПроверкаВсеСчетчикиPDH() Экспорт
    
    РезультатВыполнения = ПроверкаВсеСчетчикиPDHНаСервере(УникальныйИдентификаторФЗ, ЭтотОбъект.АдресХранилищаЗадания);
    
    Если РезультатВыполнения = Неопределено Тогда
        ПодключитьОбработчикОжидания("ПроверкаВсеСчетчикиPDH", 1, Истина);
    Иначе
        ЭтотОбъект.РезультатПроверки = РезультатВыполнения;
    КонецЕсли;
        
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаВсеСчетчикиPDHНаСервере(УникальныйИдентификаторФЗ, АдресХранилища)
    
    Результат = Неопределено;
    
    ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторФЗ);
    
    Если ФЗ.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
        Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
    ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
        Результат = "Ошибка получения данных.
        |" + ПодробноеПредставлениеОшибки(ФЗ.ИнформацияОбОшибке);
    ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
        Результат = "Получение данных отменено пользователем.";
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(Оборудование)
    РегистрыСведений.ОборудованиеОперативныеНастройки.ОчиститьНастройки(Оборудование);    
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЭлементыЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
        
        Для Каждого ТекСтрокаИдентификатор Из ЭтотОбъект.Элементы.СчетчикиПроизводительности.ВыделенныеСтроки Цикл
            
            ТекСтрока = Объект.СчетчикиПроизводительности.НайтиПоИдентификатору(ТекСтрокаИдентификатор);
            Если ТекСтрока <> Неопределено Тогда
                
                Для Каждого ТекЗначение Из РезультатЗакрытия Цикл
                    Если ТекЗначение.Ключ = "СобиратьДанные" Тогда
                        ТекСтрока.СобиратьДанные = ТекЗначение.Значение;
                    ИначеЕсли ТекЗначение.Ключ = "Зафиксировать" Тогда
                        ТекСтрока.Зафиксировать = ТекЗначение.Значение;
                    ИначеЕсли ТекЗначение.Ключ = "КонтрольПоступленияДанных" Тогда
                        ТекСтрока.КонтрольПоступленияДанных = ТекЗначение.Значение;
                    ИначеЕсли ТекЗначение.Ключ = "ДопустимоеВремяОтсутствияДанных" Тогда
                        ТекСтрока.ДопустимоеВремяОтсутствияДанных = ТекЗначение.Значение;
                    КонецЕсли;
                КонецЦикла;
                
            КонецЕсли;
            
        КонецЦикла;
               
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура СобиратьДанныеПроизводительностиПриИзмененииВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Для Каждого ТекСтрока Из Объект.СчетчикиПроизводительности Цикл
            ТекСтрока.КонтрольПоступленияДанных = Истина И ТекСтрока.СобиратьДанные;
            Если НЕ ЗначениеЗаполнено(ТекСтрока.ДопустимоеВремяОтсутствияДанных) Тогда
                ТекСтрока.ДопустимоеВремяОтсутствияДанных = 10;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСчетчикиПоРолиНаСервере(РолиОборудования, ТипОС)
	Возврат Справочники.РолиОборудования.ПолучитьСчетчикиПроизводительности(РолиОборудования, ТипОС);
КонецФункции

&НаСервере
Процедура ПроверитьСчетчикиПроизводительностиНаСервере(Оборудование, СобиратьДанныеПроизводительности, ПараметрыЗапуска)
    
    Настройки = РегистрыСведений.ОборудованиеОперативныеНастройки.ПрочитатьНастройки(Оборудование);
    Настройки.ДатаЗаписиUTC = ТекущаяУниверсальнаяДата();
    Настройки.ОперативныйРежим = Истина;
    Настройки.ЯзыкОС = ПараметрыЗапуска[0].ДополнительныеПараметры["ЯзыкОС"]; 
    
    РегистрыСведений.ТекущиеЗначенияПроизводительности.Очистить(Оборудование);
    РегистрыСведений.ОборудованиеОперативныеНастройки.ЗаписатьНастройки(Оборудование, Настройки);
    
    Если СобиратьДанныеПроизводительности = 1 Тогда
        ПараметрыЗапуска[0].Вставить("Контекст", "Справочники.Оборудование.СоздатьЭлемент()");
        ПараметрыЗапуска[0].Вставить("ИмяПроцедуры", "ТестСчетчиковWindows");
        
        ОтборФЗ = Новый Структура("Ключ, Состояние", ЭтотОбъект.УникальныйИдентификатор, СостояниеФоновогоЗадания.Активно); 
        ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФЗ);
        
        Выполнять = Истина;
        Пока Выполнять Цикл
                    
            Для Каждого ТекФЗ Из ФЗ Цикл
                ТекФЗ.Отменить();
            КонецЦикла;
            
            ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФЗ);
            Выполнять = ФЗ.Количество() > 0;
            
        КонецЦикла;
                
        ФЗ = ФоновыеЗадания.Выполнить("ДлительныеОперации.ВыполнитьВФоне", ПараметрыЗапуска, ЭтотОбъект.УникальныйИдентификатор, ПараметрыЗапуска[0]["ДополнительныеПараметры"]["Хост"] + ": Тест счетчиков производительности");
        
    КонецЕсли;
            	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеНачатьЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
    
    // Данный код нужен для обхода поиска пустых обработчиков при проверке конфигурации
    Если Истина = Ложь Тогда
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетчикиПоРолиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        // Очищаем счетчики производительнсоти ролей
        Объект.СчетчикиПроизводительностиРолей.Очистить();
        
        // Очищаем основную таблицу счетчиков производительности
        ПараметрыОтбора = Новый Структура("Зафиксировать", 0);
        СтрокиМассив = Объект.СчетчикиПроизводительности.НайтиСтроки(ПараметрыОтбора);
        Для Каждого ТекСтрока Из СтрокиМассив Цикл
            Объект.СчетчикиПроизводительности.Удалить(ТекСтрока);
        КонецЦикла;
        
        // Получаем включенные назначенные роли
        Роли = Новый Массив;
        Для Каждого ТекСтрока Из Объект.РолиОборудования Цикл
            Роли.Добавить(ТекСтрока.Роль);
        КонецЦикла;
        
        // Получаем счетчики ролей
        Счетчики = ЗаполнитьСчетчикиПоРолиНаСервере(Роли, Объект.ТипОС);
        
        // Заполняем счетчики производительности ролей и собираем различные
        СчетчикиРазличные = Новый Соответствие;
        Для Каждого ТекСчетчик Из Счетчики Цикл
            
            НовСтрока = Объект.СчетчикиПроизводительностиРолей.Добавить();
            НовСтрока.СчетчикПроизводительности = ТекСчетчик.СчетчикПроизводительности;
            НовСтрока.Роль = ТекСчетчик.РольОборудования;
                        
            Если СчетчикиРазличные[ТекСчетчик.СчетчикПроизводительности] = Неопределено Тогда
                СчетчикиРазличные.Вставить(ТекСчетчик.СчетчикПроизводительности, Истина);
            КонецЕсли;
            
        КонецЦикла;
        
        Для Каждого ТекСчетчик Из СчетчикиРазличные Цикл
            
            НовСтрока = Объект.СчетчикиПроизводительности.Добавить();
            НовСтрока.СобиратьДанные = Истина;
            НовСтрока.СчетчикПроизводительности = ТекСчетчик.Ключ;
            НовСтрока.КонтрольПоступленияДанных = Истина;
            НовСтрока.ДопустимоеВремяОтсутствияДанных = 10;
            
        КонецЦикла;
        
        Объект.СчетчикиПроизводительности.Сортировать("СчетчикПроизводительности");
        
        Модифицированность = Истина;
        
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
    ЗаполнитьДополнительныеРеквизитыТЧ(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
    
    Если ПараметрыЗаписи.Свойство("Закрыть") И ПараметрыЗаписи.Закрыть Тогда
    Иначе
        ЗаполнитьДополнительныеРеквизитыТЧ(ТекущийОбъект);    
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыТЧ(ТекущийОбъект)
    
    ТЗн = Новый ТаблицаЗначений;
    ТЗн.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
    ТЗн.Колонки.Добавить("ПолныйКодДляПоиска", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(620)));
    
    Для Каждого ТекСтрока Из Объект.СчетчикиПроизводительности Цикл
        НовСтрока = ТЗн.Добавить();
        НовСтрока.Идентификатор = ТекСтрока.ПолучитьИдентификатор();
        
        ПолныйКодДляПоискаМассив = Новый Массив;
        ПолныйКодДляПоискаМассив.Добавить("Производительность оборудования");
        ПолныйКодДляПоискаМассив.Добавить(ТекущийОбъект.ПлощадкаЭксплуатации.Наименование);
        Если ТекущийОбъект.ФормироватьСчетчикПоНаименованию Тогда
            ПолныйКодДляПоискаМассив.Добавить(ТекущийОбъект.Наименование);
        Иначе
            ПолныйКодДляПоискаМассив.Добавить(ВРЕГ(ТекущийОбъект.Хост));
        КонецЕсли;
        ПолныйКодДляПоискаМассив.Добавить(Строка(ТекСтрока.СчетчикПроизводительности));
        НовСтрока.ПолныйКодДляПоиска = СтрСоединить(ПолныйКодДляПоискаМассив, "/");
        
    КонецЦикла;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ТабличнаяЧасть.Идентификатор,
    |   ТабличнаяЧасть.ПолныйКодДляПоиска
    |ПОМЕСТИТЬ
    |   ТабличнаяЧасть
    |ИЗ
    |   &ТабличнаяЧасть КАК ТабличнаяЧасть
    |ИНДЕКСИРОВАТЬ ПО
    |   ТабличнаяЧасть.ПолныйКодДляПоиска,
    |   ТабличнаяЧасть.Идентификатор
    |;
    |
    |ВЫБРАТЬ
    |   ТабличнаяЧасть.Идентификатор,
    |   Счетчики.Ссылка КАК СсылкаГруппыСчетчиков,
    |   Счетчики.КонтрольПоступленияДанных,
    |   Счетчики.ДопустимоеВремяОтсутствияДанных
    |ИЗ
    |   ТабличнаяЧасть
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   Справочник.ГруппыСчетчиков КАК Счетчики
    |ПО
    |   Счетчики.ПолныйКодДляПоиска = ТабличнаяЧасть.ПолныйКодДляПоиска
    |";
    
    Запрос.УстановитьПараметр("ТабличнаяЧасть", ТЗн);
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        Строка = Объект.СчетчикиПроизводительности.НайтиПоИдентификатору(Выборка.Идентификатор);
        Если Строка <> Неопределено Тогда
            Строка.СсылкаГруппыСчетчиков = Выборка.СсылкаГруппыСчетчиков;
            Строка.КонтрольПоступленияДанных = Выборка.КонтрольПоступленияДанных;
            Строка.ДопустимоеВремяОтсутствияДанных = Выборка.ДопустимоеВремяОтсутствияДанных;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСчетчикиПроизводительностиОбработчикОжидания() Экспорт
    
    РезультатПроверкиСчетчиков = ОбщийВызовСервера.ПроверитьСчетчикиПроизводительностиОбработчикОжиданияНаСервере(Объект.Ссылка);
    ЗначенияСчетчиков = РезультатПроверкиСчетчиков.Счетчики;
    
    Если РезультатПроверкиСчетчиков.ОперативныеНастройки.ЯзыкОС <> Неопределено И Объект.ЯзыкОС <> РезультатПроверкиСчетчиков.ОперативныеНастройки.ЯзыкОС Тогда
        
        Объект.ЯзыкОС = РезультатПроверкиСчетчиков.ОперативныеНастройки.ЯзыкОС;
        Модифицированность = Истина;
        
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("При тестирование обнаружено несоответсвие языка ОС!
        |Язык ОС изменен на " + Объект.ЯзыкОС, "Объект.ЯзыкОС", ЭтотОбъект);
        
    КонецЕсли;
        
    Для Каждого ТекСтрока Из Объект.СчетчикиПроизводительности Цикл
        
        ТекущийСчетчик = ЗначенияСчетчиков[ТекСтрока.СчетчикПроизводительности];
        Если ТекущийСчетчик <> Неопределено Тогда
            
            Если НЕ ЗначениеЗаполнено(ТекущийСчетчик.ОписаниеОшибки) Тогда
                ТекСтрока.ТекущееЗначениеСчетчика = Формат(ТекущийСчетчик.Значение, "ЧДЦ=5; ЧН=0");
            Иначе
                ТекСтрока.ТекущееЗначениеСчетчика = ТекущийСчетчик.ОписаниеОшибки;
            КонецЕсли;
            
        КонецЕсли;
                
    КонецЦикла;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВсеСчетчикиНаСервере(АгентКИП)
    
    КомандаАгенту = Новый Соответствие;
    КомандаАгенту.Вставить("instruction", "getSupportedCounters");
    
    Возврат РегистрыСведений.КомандыАгентаКИП.ДобавитьКоманду(АгентКИП, Перечисления.ТипыКомандАгентаКИП.PerformanceMonitor, КомандаАгенту);
    
КонецФункции

&НаСервере
Функция ВсеСчетчикиНаСервереPDH(ПараметрыЗапуска)
    
    ЭтотОбъект.АдресХранилищаЗадания = ПоместитьВоВременноеХранилище(Неопределено, ЭтотОбъект.УникальныйИдентификатор);
    ПараметрыЗапуска[0].Вставить("АдресХранилищаЗадания", ЭтотОбъект.АдресХранилищаЗадания);
    ПараметрыЗапуска[0].Вставить("Контекст", "Справочники.Оборудование.СоздатьЭлемент()");
    ПараметрыЗапуска[0].Вставить("ИмяПроцедуры", "ПолучитьВсеСчетчикиWindows");
    
    ОтборФЗ = Новый Структура("Ключ, Состояние", ЭтотОбъект.УникальныйИдентификатор, СостояниеФоновогоЗадания.Активно); 
    ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФЗ);
    
    Выполнять = Истина;
    Пока Выполнять Цикл
        
        Для Каждого ТекФЗ Из ФЗ Цикл
            ТекФЗ.Отменить();
        КонецЦикла;
        
        ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФЗ);
        Выполнять = ФЗ.Количество() > 0;
        
    КонецЦикла;
    
    ФЗ = ФоновыеЗадания.Выполнить("ДлительныеОперации.ВыполнитьВФоне", ПараметрыЗапуска, ЭтотОбъект.УникальныйИдентификатор, ПараметрыЗапуска[0]["ДополнительныеПараметры"]["Хост"] + ": Получение счетчиков производительности");
    
    Возврат ФЗ.УникальныйИдентификатор;
    
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    
    Если ПараметрыЗаписи.Свойство("Закрыть") И ПараметрыЗаписи.Закрыть Тогда
        Закрыть();
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСчетчикПоНаименованиюВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если ДополнительныеПараметры.ТипВопроса = "НаименованиеХост" Тогда
        
        Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
            ПараметрыЗаписи = Новый Структура();
            ПараметрыЗаписи.Вставить("Программно", Истина);
            ПараметрыЗаписи.Вставить("Конвертировать", "КонвертацияНаименованиеХост");
        Иначе
            ПараметрыЗаписи = Новый Структура();
            ПараметрыЗаписи.Вставить("Программно", Истина);
            ПараметрыЗаписи.Вставить("Конвертировать", "НеКонвертацияНаименованиеХост");
        КонецЕсли;
        
    ИначеЕсли ДополнительныеПараметры.ТипВопроса = "ХостХост" Тогда
        
        Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
            ПараметрыЗаписи = Новый Структура();
            ПараметрыЗаписи.Вставить("Программно", Истина);
            ПараметрыЗаписи.Вставить("Конвертировать", "КонвертацияХостХост");
        Иначе
            ПараметрыЗаписи = Новый Структура();
            ПараметрыЗаписи.Вставить("Программно", Истина);
            ПараметрыЗаписи.Вставить("Конвертировать", "НеКонвертацияХостХост");
        КонецЕсли;
        
    КонецЕсли;
    
    Если ДополнительныеПараметры.Свойство("Закрыть") И ДополнительныеПараметры.Закрыть Тогда
        ПараметрыЗаписи.Вставить("Закрыть", ДополнительныеПараметры.Закрыть);
    КонецЕсли;
        
    Записать(ПараметрыЗаписи);
    
КонецПроцедуры

&НаСервере
Функция ПлощадкаЭксплуатации(Ссылка)
    
    ПлощадкаЭксплуатации = Справочники.ПлощадкиЭксплуатации.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ПлощадкаЭксплуатации
    |ИЗ
    |   Справочник.Оборудование
    |ГДЕ
    |   Ссылка = &Ссылка
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    
    Результат = Запрос.Выполнить();
    
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        ПлощадкаЭксплуатации = Выборка.ПлощадкаЭксплуатации;
    КонецЕсли;
    
    Возврат ПлощадкаЭксплуатации;
    
КонецФункции

#КонецОбласти











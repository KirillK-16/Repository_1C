
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РеквизитыЗадачи = Новый Массив;
	
	Если Параметры.Свойство("ЭтоИсправленныйДамп") Тогда 
		РеквизитыЗадачи.Добавить(Новый РеквизитФормы("ЭтоИсправленныйДамп", Новый ОписаниеТипов("Булево"), , , Ложь));
	КонецЕсли;
	
	ИзменитьРеквизиты(РеквизитыЗадачи);
	ЭтотОбъект["ЭтоИсправленныйДамп"] = Параметры.ЭтоИсправленныйДамп;
	Элементы.ФормаВыполнитьЗадачу.Видимость = НЕ Параметры.ТолькоПросмотр;
	
	Если Объект.СохранятьВсеДампы Тогда
		СпособОбработкиНовыхДампов = "СобиратьВсе";
	ИначеЕсли Объект.КоличествоДополнительноСохраняемыхДампов = 0 Тогда
		СпособОбработкиНовыхДампов = "Удалять";
	Иначе
		СпособОбработкиНовыхДампов = "СобратьСледующие";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.ОткрытьКаталогДампа.Доступность = Ложь;
	#КонецЕсли
	
	УправлениеДоступностьюЭлементовГруппыДополнительныеДампы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Изменение.Задачи");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	
	ПометитьДампКакИсправленный();
	Если ЭтотОбъект.ПроверитьЗаполнение() Тогда
		ЭтотОбъект.Записать();
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлДампа(Команда)
		
	Попытка
		КоличествоФайлов = КоличествоФайловДампа(Объект.Ссылка);		
	Исключение
		ПоказатьПредупреждение(,НСтр("ru = 'Файл дампа недоступен.
			|Попробуйте повторить действие через некоторое время.'"));
		Возврат;
	КонецПопытки;
	
	Если КоличествоФайлов = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Файл дампа отсутствует.'"));
		Возврат;
	КонецЕсли;
		
	Состояние(НСтр("ru = 'Обработка файла...'"));
	
	АдресВХранилище = ПоместитьВоВременноеХранилище("", ЭтотОбъект.УникальныйИдентификатор);
	
	ПоместитьФайлДампаВоВременноеХранилище(Объект.Ссылка, АдресВХранилище);	
	ПолучитьФайл(АдресВХранилище, Строка(Объект.Ссылка) + ".zip");
	
	Состояние(НСтр("ru = 'Выгрузка выполнена.'"));
	
КонецПроцедуры

// Проверяет загружен ли файл дампа
//
// Параметры:
//  ВариантДампа - СправочникСсылка.ВариантыДампа, вариант для которого необходимо проверить наличие файла
//
// Возвращаемое значение:
//  Число - количество на сколько разбит файл дампа
//
&НаСервереБезКонтекста
Функция КоличествоФайловДампа(ВариантДампа)
	
	НачатьТранзакцию();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ФайлыДампов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ВариантДампа", ВариантДампа);
	БлокировкаДанных.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантДампа", ВариантДампа);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ФайлыДампов.НомерПорцииДанных) КАК КоличествоПорций
	|ИЗ
	|	РегистрСведений.ФайлыДампов КАК ФайлыДампов
	|ГДЕ
	|	ФайлыДампов.ВариантДампа = &ВариантДампа";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗафиксироватьТранзакцию();
	
	Количество = 0;
	Если Выборка.Следующий() Тогда
		Количество = Выборка.КоличествоПорций;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Получает порцию файла дампа с сервера
//
// Параметры:
//  ВариантДампа - СправочникСсылка.ВариантыДампов, вариант дампа, для которого необходимо получить порцию
//  АдресВХранилище - Строка, адрес во временном хранилище формы куда будет помещена порция данных
//
// Возвращаемое значение:
//  Булево - 
//  	Истина, порция данных получена
//  	Ложь, порция данных не получена
//
&НаСервереБезКонтекста
Функция ПоместитьФайлДампаВоВременноеХранилище(ВариантДампа, АдресВХранилище)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантДампа", ВариантДампа);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФайлыДампов.ФайлДампа КАК ФайлДампа
	|ИЗ
	|	РегистрСведений.ФайлыДампов КАК ФайлыДампов
	|ГДЕ
	|	ФайлыДампов.ВариантДампа = &ВариантДампа";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Ложь;
	Если Выборка.Следующий() Тогда
		ПоместитьВоВременноеХранилище(Выборка.ФайлДампа.Получить(), АдресВХранилище);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПометитьДампКакИсправленный()
	Объект.Состояние = Перечисления.СостоянияВариантаДампа.Исправлен;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеДампов(Команда)
	Если ИдетПроверка Тогда
		Возврат;
	КонецЕсли;
	
	ИдетПроверка = Истина;
	Если Объект.СохраненныеДампы.Количество() > 0 Тогда
		НайтиКнопка = Элементы.Найти("СохраненныеДампыПроверитьНаличиеДампов");
		Если НайтиКнопка <> Неопределено Тогда
			НайтиКнопка.Заголовок = "Идет проверка";
			НайтиКнопка.Картинка = БиблиотекаКартинок.РегламентноеЗадание;
		КонецЕсли;
		
		ДанныеПроверки = Новый Массив;
		Для Каждого СтрокаДампа Из Объект.СохраненныеДампы Цикл
			СтруктураПроверки = Новый Структура;
			СтруктураПроверки.Вставить("ИдентификаторСтроки", СтрокаДампа.ПолучитьИдентификатор());
			СтруктураПроверки.Вставить("ИмяФайла", СтрокаДампа.ИмяФайла);
			СтруктураПроверки.Вставить("НаличиеФайла", СтрокаДампа.НаличиеФайла);
			
			ДанныеПроверки.Добавить(СтруктураПроверки);
		КонецЦикла;
		
		Результат = ПроверитьНаличиеДамповНаСервере(ДанныеПроверки, ЭтотОбъект.УникальныйИдентификатор);
		АдресХранилища = Результат.АдресХранилища;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
		Если Результат.ЗаданиеВыполнено Тогда
			ЗагрузитьРезультатПроверкиНаличияДампов();
			НайтиКнопка = Элементы.Найти("СохраненныеДампыПроверитьНаличиеДампов");
			Если НайтиКнопка <> Неопределено Тогда
				НайтиКнопка.Заголовок = "Проверить наличие дампов";
				НайтиКнопка.Картинка = БиблиотекаКартинок.Найти;
			КонецЕсли;
			
			ИдетПроверка = Ложь;
		Иначе
			ПодключитьОбработчикОжидания("ПроверитьВыполнениеПроверкиНаличияДампов", 1, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеПроверкиНаличияДампов()
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		ЗагрузитьРезультатПроверкиНаличияДампов();
		НайтиКнопка = Элементы.Найти("СохраненныеДампыПроверитьНаличиеДампов");
		Если НайтиКнопка <> Неопределено Тогда
			НайтиКнопка.Заголовок = "Проверить наличие дампов";
			НайтиКнопка.Картинка = БиблиотекаКартинок.Найти;
		КонецЕсли;
		
		ИдетПроверка = Ложь;
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеПроверкиНаличияДампов", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатПроверкиНаличияДампов()
	ДанныеПроверки = ПолучитьИзВременногоХранилища(АдресХранилища);
	Для ТекДанные = 0 По ДанныеПроверки.Количество() - 1 Цикл
		ТекущаяСтрока = Объект.СохраненныеДампы.НайтиПоИдентификатору(ДанныеПроверки[ТекДанные].ИдентификаторСтроки);
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСтрока.НаличиеФайла = ДанныеПроверки[ТекДанные].НаличиеФайла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ПроверитьНаличиеДамповНаСервере(ДанныеПроверки, УникальныйИдентификатор)
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ПроверяемыеДампы", ДанныеПроверки);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.ВариантыДампов.ПроверитьНаличиеФайловДампов",
		ПараметрыЗадания
		);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СпособОбработкиНовыхДамповПриИзменении(Элемент)
	
	Если СпособОбработкиНовыхДампов = "СобиратьВсе" Тогда
		Объект.СохранятьВсеДампы = Истина;
		Объект.КоличествоДополнительноСохраняемыхДампов = 0;
	ИначеЕсли СпособОбработкиНовыхДампов = "Удалять" Тогда
		Объект.СохранятьВсеДампы = Ложь;
		Объект.КоличествоДополнительноСохраняемыхДампов = 0;
	ИначеЕсли СпособОбработкиНовыхДампов = "СобратьСледующие" Тогда
		Объект.СохранятьВсеДампы = Ложь;
		Объект.КоличествоДополнительноСохраняемыхДампов = 1;
	КонецЕсли;
	ЭтотОбъект.Модифицированность = Истина;
	
	УправлениеДоступностьюЭлементовГруппыДополнительныеДампы()
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюЭлементовГруппыДополнительныеДампы()
	
	ДопПоляДоступны = (СпособОбработкиНовыхДампов = "СобратьСледующие");
	Элементы.КоличествоДополнительноСохраняемыхДампов.Доступность = ДопПоляДоступны;
	Элементы.ДекорацияNДампов.Доступность = ДопПоляДоступны;
	
КонецПроцедуры

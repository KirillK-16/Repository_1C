#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПредопределенныеПроцедуры

Процедура ПередЗаписью(Отказ)
    
    ПлощадкаЭксплуатацияСохраненная = ПолучитьСохранненнуюПлощадкуЭксплуатации();
    ЭтотОбъект.ДополнительныеСвойства.Вставить("ПлощадкаЭксплуатацияСохраненная", ПлощадкаЭксплуатацияСохраненная);
    
    Если Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
        КластерСохраненный = ПолучитьСохраненныйКластер();
    ИначеЕсли Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза Тогда
        КластерСохраненный = ПолучитьСохраненныйКластер();
    КонецЕсли;
    
    ЭтотОбъект.ДополнительныеСвойства.Вставить("КластерСохраненный", КластерСохраненный);
           
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
    
    Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.ПометкаУдаления Тогда
		ОстановитьКонтрольныеПроцедуры();
    КонецЕсли;
    
    ПлощадкаЭксплуатацияСохраненная = ЭтотОбъект.ДополнительныеСвойства.ПлощадкаЭксплуатацияСохраненная;
    ТекущаяПлощадка = ЭтотОбъект.ПлощадкаЭксплуатации;
           
    Если НЕ ЗначениеЗаполнено(ПлощадкаЭксплуатацияСохраненная) ИЛИ ПлощадкаЭксплуатацияСохраненная = ТекущаяПлощадка Тогда
        Если Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С Тогда
            
            ДобавитьВПлощадку(Перечисления.ТипЭлементаПлощадки.ГруппаКластеры1С, Перечисления.ТипЭлементаПлощадки.Кластер1С);
            ИзменитьАвтозаполениеСтруктурыКластера();
            
            Если ДополнительныеСвойства.Свойство("Мониторинг") Тогда
                ИзменитьМониторингКластераАгентом(ДополнительныеСвойства.Мониторинг);
            КонецЕсли;
                        
        ИначеЕсли Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
            
            Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ПараметрыЗаписи") Тогда
                КластерСохраненный = ЭтотОбъект.ДополнительныеСвойства.КластерСохраненный;
                КластерТекущий = ЭтотОбъект.ДополнительныеСвойства.ПараметрыЗаписи.ПараметрыРабочихСерверов.Кластер;
                
                Если НЕ ЗначениеЗаполнено(КластерСохраненный) ИЛИ КластерСохраненный = КластерТекущий Тогда
                    
                    Если ЗначениеЗаполнено(КластерТекущий) Тогда
                        ДобавитьВПлощадку(Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверыКластера1С, Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С);
                    КонецЕсли;
                    ДобавитьВПлощадку(Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверы1С, Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С);
                    
                Иначе
                    
                    ПлощадкаКластеры = Справочники.ПлощадкиЭксплуатации.ПолучитьГруппуПлощадки(ТекущаяПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаКластеры1С);
                    
                    КластерСохраненныйПлощадка = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ПлощадкаКластеры, КластерСохраненный, Перечисления.ТипЭлементаПлощадки.Кластер1С);
                    КластерТекущийПлощадка = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ПлощадкаКластеры, КластерТекущий, Перечисления.ТипЭлементаПлощадки.Кластер1С);
                    
                    РабочиеСерверыСохраненныйПлощадка = Справочники.ПлощадкиЭксплуатации.ПолучитьГруппуПлощадки(КластерСохраненныйПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверыКластера1С);
                    РабочиеСерверыТекущийПлощадка = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(КластерТекущийПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверыКластера1С);
                    
                    РабочийСерверЭлементПлощадки = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(РабочиеСерверыСохраненныйПлощадка, ЭтотОбъект.Ссылка, Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С);
                    РабочийСерверЭлементПлощадкиОбъект = РабочийСерверЭлементПлощадки.ПолучитьОбъект(); 
                    РабочийСерверЭлементПлощадкиОбъект.Родитель = РабочиеСерверыТекущийПлощадка; 
                    РабочийСерверЭлементПлощадкиОбъект.Записать();
                                   
                КонецЕсли;
            КонецЕсли;
            
        ИначеЕсли Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза Тогда
            
            Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ПараметрыЗаписи") Тогда
                КластерСохраненный = ЭтотОбъект.ДополнительныеСвойства.КластерСохраненный;
                КластерТекущий = ЭтотОбъект.ДополнительныеСвойства.ПараметрыЗаписи.ПараметрыИнформационнойБазы.Кластер;
                
                Если НЕ ЗначениеЗаполнено(КластерСохраненный) ИЛИ КластерСохраненный = КластерТекущий Тогда
                    
                    ДобавитьВПлощадку(Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С, Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза);
                    
                    ГруппаИнформационныеБазы = Справочники.ПлощадкиЭксплуатации.ПолучитьГруппуПлощадки(ПлощадкаЭксплуатации, Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазы);
                    Если ГруппаИнформационныеБазы = Неопределено Тогда
                        ГруппаИнформационныеБазы = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатации, Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазы);
                    КонецЕсли;
                    
                    ЭлементИнформационнаяБаза = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ГруппаИнформационныеБазы, Ссылка, Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза);
                    Если ЭлементИнформационнаяБаза = Неопределено Тогда
                        Справочники.ПлощадкиЭксплуатации.СоздатьЭлементГруппы(ГруппаИнформационныеБазы, Ссылка, Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза, Ложь);
                    КонецЕсли;
        
                Иначе
                    
                    ПлощадкаКластеры = Справочники.ПлощадкиЭксплуатации.ПолучитьГруппуПлощадки(ТекущаяПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаКластеры1С);
                    
                    КластерСохраненныйПлощадка = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ПлощадкаКластеры, КластерСохраненный, Перечисления.ТипЭлементаПлощадки.Кластер1С);
                    КластерТекущийПлощадка = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ПлощадкаКластеры, КластерТекущий, Перечисления.ТипЭлементаПлощадки.Кластер1С);
                    
                    ИнформационныеБазыСохраненныйПлощадка = Справочники.ПлощадкиЭксплуатации.ПолучитьГруппуПлощадки(КластерСохраненныйПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С);
                    ИнформационныеБазыТекущийПлощадка = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(КластерТекущийПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С);
                    
                    ИнформационнаяБазаЭлементПлощадки = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ИнформационныеБазыСохраненныйПлощадка, ЭтотОбъект.Ссылка, Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза);
                    ИнформационнаяБазаЭлементОбъект = ИнформационнаяБазаЭлементПлощадки.ПолучитьОбъект(); 
                    ИнформационнаяБазаЭлементОбъект.Родитель = ИнформационныеБазыТекущийПлощадка; 
                    ИнформационнаяБазаЭлементОбъект.Записать();
                    
                КонецЕсли;
            КонецЕсли;
            
        КонецЕсли;
        
    ИначеЕсли ЗначениеЗаполнено(ПлощадкаЭксплуатацияСохраненная) И ПлощадкаЭксплуатацияСохраненная <> ТекущаяПлощадка Тогда
        Если Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С Тогда
            
            Справочники.ПлощадкиЭксплуатации.ПеренестиВНовуюПлощадку(ЭтотОбъект.Ссылка, ТекущаяПлощадка, ПлощадкаЭксплуатацияСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаКластеры1С, Перечисления.ТипЭлементаПлощадки.Кластер1С); 
            
            РабочиеСерверы1С = Справочники.ОбъектыКонтроля.РабочиеСерверыКластера(ЭтотОбъект.Ссылка);
            Для Каждого РабочийСервер1С Из РабочиеСерверы1С Цикл
                Если НЕ РабочийСервер1С.ПометкаУдаления Тогда
                    РабочийСервер1СОбъект = РабочийСервер1С.ПолучитьОбъект();
                    РабочийСервер1СОбъект.ПлощадкаЭксплуатации = ТекущаяПлощадка;
                    РабочийСервер1СОбъект.Записать();
                КонецЕсли;
            КонецЦикла;
            
            ИнформационныеБазы = Справочники.ОбъектыКонтроля.ИнформационныеБазыКластера(ЭтотОбъект.Ссылка);
            Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
                Если НЕ ИнформационнаяБаза.ПометкаУдаления Тогда
                    ИнформационнаяБазаОбъект = ИнформационнаяБаза.ПолучитьОбъект();
                    ИнформационнаяБазаОбъект.ПлощадкаЭксплуатации = ТекущаяПлощадка;
                    ИнформационнаяБазаОбъект.Записать();
                КонецЕсли;
            КонецЦикла;
                        
            КонтрольПотребленияПамяти = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ЭтотОбъект.Ссылка, Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти());
            ГруппаКонтрольныеПроцедурыСохраненная = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатацияСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры);
            ГруппаКонтрольныеПроцедурыТекущая = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ТекущаяПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры);
            Справочники.ПлощадкиЭксплуатации.ПеренестиВНовуюПлощадку(КонтрольПотребленияПамяти, ГруппаКонтрольныеПроцедурыТекущая, ГруппаКонтрольныеПроцедурыСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПотребленияПамяти, Перечисления.ТипЭлементаПлощадки.КонтрольПотребленияПамяти); 
                        
        ИначеЕсли Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
            
            АнализВызововКластера1С = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ЭтотОбъект.Ссылка, Справочники.ВидыКонтрольныхПроцедур.АнализВызововКластера1С());
            ГруппаКонтрольныеПроцедурыСохраненная = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатацияСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры);
            ГруппаКонтрольныеПроцедурыТекущая = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ТекущаяПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры);
            Справочники.ПлощадкиЭксплуатации.ПеренестиВНовуюПлощадку(АнализВызововКластера1С, ГруппаКонтрольныеПроцедурыТекущая, ГруппаКонтрольныеПроцедурыСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаАнализВызововКластера1С, Перечисления.ТипЭлементаПлощадки.АнализВызововКластера1С); 
            
            КонтрольУстойчивостиСистемы = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ЭтотОбъект.Ссылка, Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы());
            ГруппаКонтрольныеПроцедурыСохраненная = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатацияСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры);
            ГруппаКонтрольныеПроцедурыТекущая = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ТекущаяПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры);
            Справочники.ПлощадкиЭксплуатации.ПеренестиВНовуюПлощадку(КонтрольУстойчивостиСистемы, ГруппаКонтрольныеПроцедурыТекущая, ГруппаКонтрольныеПроцедурыСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольУстойчивости, Перечисления.ТипЭлементаПлощадки.КонтрольУстойчивости); 
            
            МониторингСистемныхОшибок = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ЭтотОбъект.Ссылка, Справочники.ВидыКонтрольныхПроцедур.МониторингСистемныхОшибок());
            ГруппаКонтрольныеПроцедурыСохраненная = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатацияСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры);
            ГруппаКонтрольныеПроцедурыТекущая = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ТекущаяПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры);
            Справочники.ПлощадкиЭксплуатации.ПеренестиВНовуюПлощадку(МониторингСистемныхОшибок, ГруппаКонтрольныеПроцедурыТекущая, ГруппаКонтрольныеПроцедурыСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаМониторингСистемныхОшибок, Перечисления.ТипЭлементаПлощадки.МониторингСистемныхОшибок);
            
            
            // Переносим в общую группу рабочие сервера новой площадки
            Справочники.ПлощадкиЭксплуатации.ПеренестиВНовуюПлощадку(Ссылка, ПлощадкаЭксплуатации, ПлощадкаЭксплуатацияСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверы1С, Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С);  
            
        ИначеЕсли Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза Тогда
            
            КонтрольВыполненияРегламентныхЗаданий = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ЭтотОбъект.Ссылка, Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий());
            ГруппаКонтрольныеПроцедурыСохраненная = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатацияСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры);
            ГруппаКонтрольныеПроцедурыТекущая = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ТекущаяПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры);
            Справочники.ПлощадкиЭксплуатации.ПеренестиВНовуюПлощадку(КонтрольВыполненияРегламентныхЗаданий, ГруппаКонтрольныеПроцедурыТекущая, ГруппаКонтрольныеПроцедурыСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольРегламентныхЗаданий, Перечисления.ТипЭлементаПлощадки.КонтрольРегламентныхЗаданий);
            
            КонтрольНагрузочныхТестов = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ЭтотОбъект.Ссылка, Справочники.ВидыКонтрольныхПроцедур.КонтрольНагрузочныхТестов());
            ГруппаКонтрольныеПроцедурыСохраненная = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатацияСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры);
            ГруппаКонтрольныеПроцедурыТекущая = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ТекущаяПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры);
            Справочники.ПлощадкиЭксплуатации.ПеренестиВНовуюПлощадку(КонтрольНагрузочныхТестов, ГруппаКонтрольныеПроцедурыТекущая, ГруппаКонтрольныеПроцедурыСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольНагрузочныхТестов, Перечисления.ТипЭлементаПлощадки.КонтрольНагрузочныхТестов);
            
            КонтрольПодключений = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ЭтотОбъект.Ссылка, Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений());
            ГруппаКонтрольныеПроцедурыСохраненная = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатацияСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры);
            ГруппаКонтрольныеПроцедурыТекущая = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ТекущаяПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры);
            Справочники.ПлощадкиЭксплуатации.ПеренестиВНовуюПлощадку(КонтрольПодключений, ГруппаКонтрольныеПроцедурыТекущая, ГруппаКонтрольныеПроцедурыСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПодключений, Перечисления.ТипЭлементаПлощадки.КонтрольПодключений);
            
            КонтрольПроизводительностиСсылка = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ЭтотОбъект.Ссылка, Справочники.ВидыКонтрольныхПроцедур.КонтрольПроизводительности());
            ГруппаКонтрольныеПроцедурыСохраненная = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатацияСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры);
            ГруппаКонтрольныеПроцедурыТекущая = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ТекущаяПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры);
            Справочники.ПлощадкиЭксплуатации.ПеренестиВНовуюПлощадку(КонтрольПроизводительностиСсылка, ГруппаКонтрольныеПроцедурыТекущая, ГруппаКонтрольныеПроцедурыСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПроизводительности, Перечисления.ТипЭлементаПлощадки.КонтрольПроизводительности);
            
            ОценкаПользователей = Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ЭтотОбъект.Ссылка, Справочники.ВидыКонтрольныхПроцедур.ОценкаПользователей());
            ГруппаКонтрольныеПроцедурыСохраненная = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатацияСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры);
            ГруппаКонтрольныеПроцедурыТекущая = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ТекущаяПлощадка, Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры);
            Справочники.ПлощадкиЭксплуатации.ПеренестиВНовуюПлощадку(ОценкаПользователей, ГруппаКонтрольныеПроцедурыТекущая, ГруппаКонтрольныеПроцедурыСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаОценкаПользователей, Перечисления.ТипЭлементаПлощадки.ОценкаПользователей);
            
            // Переносим в общую группу рабочие сервера новой площадки
            Справочники.ПлощадкиЭксплуатации.ПеренестиВНовуюПлощадку(Ссылка, ПлощадкаЭксплуатации, ПлощадкаЭксплуатацияСохраненная, Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С, Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза);  
            
        КонецЕсли;    
    КонецЕсли;
            
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	ВыборкаПроцедур = Справочники.КонтрольныеПроцедуры.Выбрать(
		,
		,
		Новый Структура("ОбъектКонтроля", ЭтотОбъект.Ссылка)
	);
	Процедуры = Новый Массив;
	Пока ВыборкаПроцедур.Следующий() Цикл
		Процедуры.Добавить(ВыборкаПроцедур.Ссылка);			
	КонецЦикла;	
	
    Для Каждого ПроцедураСсылка Из Процедуры Цикл
        Если ПроцедураСсылка.ПолучитьОбъект() <> Неопределено Тогда
            ПроцедураСсылка.ПолучитьОбъект().Удалить();
        КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОстановитьКонтрольныеПроцедуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка,
	|	КлючРегламентногоЗадания
	|ИЗ
	|	Справочник.КонтрольныеПроцедуры
	|ГДЕ
	|	ОбъектКонтроля = &ОбъектКонтроля
	|";
	Запрос.УстановитьПараметр("ОбъектКонтроля", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Останавливаем контрольные процедуры
		ПроцедураОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		ПроцедураОбъект.Выполнять = Ложь;
		ПроцедураОбъект.Пауза = Ложь;
		ПроцедураОбъект.Записать();

	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВПлощадку(ТипГруппы, ТипЭлемента)
    
    Если ТипГруппы = Перечисления.ТипЭлементаПлощадки.ГруппаКластеры1С Тогда
        
        Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадку(ПлощадкаЭксплуатации, Ссылка, ТипГруппы, ТипЭлемента, Истина);
        
    ИначеЕсли ТипГруппы = Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверыКластера1С Тогда
        
        Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ПараметрыЗаписи") Тогда
            Кластер1С = ЭтотОбъект.ДополнительныеСвойства.ПараметрыЗаписи.ПараметрыРабочихСерверов.Кластер;
            
            ПлощадкаКластеры1С = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатации, Перечисления.ТипЭлементаПлощадки.ГруппаКластеры1С);
            ПлощадкаКластер1С = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ПлощадкаКластеры1С, Кластер1С, Перечисления.ТипЭлементаПлощадки.Кластер1С);
            Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадку(ПлощадкаКластер1С, Ссылка, Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверыКластера1С, Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С, Истина);
        КонецЕсли;
        
    ИначеЕсли ТипГруппы = Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С Тогда
        
        Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ПараметрыЗаписи") Тогда
            Кластер1С = ЭтотОбъект.ДополнительныеСвойства.ПараметрыЗаписи.ПараметрыИнформационнойБазы.Кластер;
            ПлощадкаКластеры1С = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатации, Перечисления.ТипЭлементаПлощадки.ГруппаКластеры1С);
            ПлощадкаКластер1С = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ПлощадкаКластеры1С, Кластер1С, Перечисления.ТипЭлементаПлощадки.Кластер1С);
            Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадку(ПлощадкаКластер1С, Ссылка, Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С, Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза, Истина);
        КонецЕсли;
        
    ИначеЕсли ТипГруппы = Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверы1С Тогда
        
        ГруппаРабочиеСервера1С = Справочники.ПлощадкиЭксплуатации.ПолучитьГруппуПлощадки(ПлощадкаЭксплуатации, Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверы1С);
        Если ГруппаРабочиеСервера1С = Неопределено Тогда
            ГруппаРабочиеСервера1С = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатации, Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверы1С);
        КонецЕсли;
                
        ЭлементРабочийСервер1С = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ГруппаРабочиеСервера1С, Ссылка, Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С);
        Если ЭлементРабочийСервер1С = Неопределено Тогда
            Справочники.ПлощадкиЭксплуатации.СоздатьЭлементГруппы(ГруппаРабочиеСервера1С, Ссылка, Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С, Ложь);
        КонецЕсли;
                
    КонецЕсли;
    
КонецПроцедуры

Функция ПолучитьСохранненнуюПлощадкуЭксплуатации()
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ПлощадкаЭксплуатации
    |ИЗ
    |   Справочник.ОбъектыКонтроля
    |ГДЕ
    |   Ссылка = &Ссылка
    |";
    
    Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
    
    Результат = Запрос.Выполнить();
    
    Площадка = Неопределено;
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Площадка = Выборка.ПлощадкаЭксплуатации;
    КонецЕсли;
    
    Возврат Площадка;
    
КонецФункции

Функция ПолучитьСохраненныйКластер()
    
    Возврат Справочники.ОбъектыКонтроля.Свойство(ЭтотОбъект.Ссылка, "Кластер");
    
КонецФункции

Процедура ИзменитьАвтозаполениеСтруктурыКластера()
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |   Ссылка
    |ИЗ
    |   Справочник.ОбъектыКонтроля
    |ГДЕ
    |   Владелец = &ВидОбъектаКонтроля
    |   И АвтоматическоеОбновление = ИСТИНА
    |";
    
    Запрос.УстановитьПараметр("ВидОбъектаКонтроля", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
    
    Результат = Запрос.Выполнить();
    
    НужноРегЗадание = НЕ Результат.Пустой();
    
    УстановитьПривилегированныйРежим(Истина);
    
    Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.АвтозаполнениеСтруктурыКластеров);
	РегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
    Если РегЗадания.Количество() = 0 Тогда
        ЕстьРегЗадание = Ложь;
    Иначе
        ЕстьРегЗадание = Истина;
    КонецЕсли;
    
    Если НужноРегЗадание И НЕ ЕстьРегЗадание Тогда
        
        РегЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.АвтозаполнениеСтруктурыКластеров);
        РегЗадание.Ключ = Новый УникальныйИдентификатор("c98910d9-5969-405a-9231-f6d2e9ce6f8f");
        РегЗадание.Наименование = "Автоматическое заполнение структуры кластеров 1С";
        РегЗадание.Расписание = Новый РасписаниеРегламентногоЗадания;
        РегЗадание.Расписание.ПериодПовтораДней = 1;
        РегЗадание.Расписание.ПериодПовтораВТечениеДня = 600;
        РегЗадание.Использование = Истина;
        РегЗадание.Записать();
        
    ИначеЕсли НЕ НужноРегЗадание И ЕстьРегЗадание Тогда
        
        Если РегЗадания.Количество() = 1 Тогда
			РегЗадание = РегЗадания[0];
			РегЗадание.Использование = Ложь;
			РегЗадание.Записать();
			РегЗадание.Удалить();
		КонецЕсли
        
    КонецЕсли;
    
    УстановитьПривилегированныйРежим(Ложь);
    
КонецПроцедуры

Процедура ИзменитьМониторингКластераАгентом(Мониторинг)
    
    Если Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        
        Для Каждого ТекСтрока Из Подключение.АгентКИППараметры Цикл
            Справочники.АгентыКИПДополнительныеРеквизиты.ЗаписатьРеквизит(ТекСТрока.АгентКИП, "МониторингКластеров", Мониторинг);
        КонецЦикла;
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#КонецЕсли

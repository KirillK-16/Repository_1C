#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПрограммныйИнтерфейс

#Область Кластер

// Функция - Найти по уникальному идентификатору кластер.
//
// Параметры:
//  УникальныйИдентификаторОбъекта - Строка - Уникальный идентификатор объекта по которому осуществляется поиск.
// 
// Возвращаемое значение:
//   СправочникСсылка.ОбъектыКонтроля. 
//
Функция НайтиПоУникальномуИдентификаторуКластер(УникальныйИдентификаторОбъекта) Экспорт
    Возврат НайтиПоУникальномуИдентификатору(УникальныйИдентификаторОбъекта, Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
КонецФункции

// Функция - Найти кластер1 С
//
// Параметры:
//  ПлощадкаЭксплуатации - СправочникСсылка.ПлощадкиЭксплуатации - Площадка, в которой осуществляется поиск.
//  АдресКластера        - Строка - Адрес кластера.
//  ПортКластера         - Число - Порт кластера (1541).
// 
// Возвращаемое значение:
//   - Массив 
//
Функция НайтиКластер1С(ПлощадкаЭксплуатации, АдресКластера, ПортКластера) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Кластер.Ссылка
    |ИЗ
    |   Справочник.ОбъектыКонтроля КАК Кластер
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ПараметрыКластеров КАК Параметры
    |ПО
    |   Параметры.ОбъектКонтроля = Кластер.Ссылка
    |   И Параметры.АдресКластера = &АдресКластера
    |   И Параметры.ПортКластера = &ПортКластера
    |ГДЕ
    |   Кластер.ПлощадкаЭксплуатации = &ПлощадкаЭксплуатации
    |   И Кластер.Владелец = &ВидОбъектаКонтроляКластер1С
    |";
    
    Запрос.УстановитьПараметр("АдресКластера", АдресКластера);
    Запрос.УстановитьПараметр("ПортКластера", ПортКластера);
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    Запрос.УстановитьПараметр("ВидОбъектаКонтроляКластер1С", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
    
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    
КонецФункции

// Функция - Оборудование активного агента кластера1 С
//
// Параметры:
//  Ссылка     - Справочник.ОбъектыКонтроля - кластер 1С.
// 
// Возвращаемое значение:
//   - СправочникСсылка.Оборудование
//
Функция ОборудованиеАктивногоАгентаКластера1С(Ссылка) Экспорт
    
    Оборудование = Справочники.Оборудование.ПустаяСсылка();
    
    АгентКИП = Справочники.ПараметрыПодключенияКластер1С.АктивноеПодключение(Ссылка.Подключение);
    Если ЗначениеЗаполнено(АгентКИП) Тогда
        Оборудование = Справочники.Оборудование.НайтиПоАгенту(АгентКИП);
    КонецЕсли;
    
    Возврат Оборудование;
        
КонецФункции

// Процедура - Оперативный режим
//
// Параметры:
//  Ссылка           - СправочникСсылка.ОбъектыКонтроля - Ссылка на кластер 1С, для активного агента которого устанавливается
//                                                        признак оперативный режима
//  ОперативныйРежим - Булево - Признак оперативного режима.
//
Процедура АгентОперативныйРежим(Ссылка, ОперативныйРежим) Экспорт
    
    Если Ссылка.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        
        Оборудование = Справочники.ОбъектыКонтроля.ОборудованиеАктивногоАгентаКластера1С(Ссылка);
        
        Если ОперативныйРежим Тогда
            Настройки = РегистрыСведений.ОборудованиеОперативныеНастройки.ПрочитатьНастройки(Оборудование);
            Настройки.ДатаЗаписиUTC = ТекущаяУниверсальнаяДата();
            Настройки.ОперативныйРежим = Истина;
            РегистрыСведений.ОборудованиеОперативныеНастройки.ЗаписатьНастройки(Оборудование, Настройки);
        Иначе
            РегистрыСведений.ОборудованиеОперативныеНастройки.ОчиститьНастройки(Оборудование);
        КонецЕсли;    
        
    КонецЕсли;
    
КонецПроцедуры

Функция СчетчикиПроизводительностиКластер(Ссылка) Экспорт
    
    Счетчики = Новый Массив;
    
    НастройкиКластера = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Ссылка);
    
    ПолныйКодДляПоискаМассив = Новый Массив;
    ПолныйКодДляПоискаМассив.Добавить("Производительность кластеров 1С/");
    ПолныйКодДляПоискаМассив.Добавить(Ссылка.ПлощадкаЭксплуатации.Наименование);
    ПолныйКодДляПоискаМассив.Добавить("/");
    ПолныйКодДляПоискаМассив.Добавить(НастройкиКластера.ИмяКластера);
    ПолныйКодДляПоискаМассив.Добавить("(");
    
    РабочиеСервера = РабочиеСерверыКластера(Ссылка);
    Для Каждого РабочийСервер Из РабочиеСервера Цикл
        
        НастройкиРабочийСервер = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(РабочийСервер);
        
        Если НастройкиРабочийСервер.ЦентральныйСервер Тогда
            ПолныйКодДляПоискаМассив.Добавить(НастройкиРабочийСервер.Оборудование.Хост);
            Если НастройкиРабочийСервер.ПортГлавногоМенеджераКластера <> 1541 Тогда
                ПолныйКодДляПоискаМассив.Добавить(":");
                ПолныйКодДляПоискаМассив.Добавить(Формат(НастройкиРабочийСервер.ПортГлавногоМенеджераКластера, "ЧН=0; ЧГ=0"));
            КонецЕсли;
            ПолныйКодДляПоискаМассив.Добавить(",");
        КонецЕсли;
        
    КонецЦикла;
    
    ПолныйКодДляПоискаМассив.Удалить(ПолныйКодДляПоискаМассив.ВГраница());
    ПолныйКодДляПоискаМассив.Добавить(")");
            
    КластерСчетчик = Справочники.ГруппыСчетчиков.НайтиПоПолномуКоду(СтрСоединить(ПолныйКодДляПоискаМассив, ""));
    
    Если КластерСчетчик <> Неопределено Тогда
        
        Сеансов = Справочники.ГруппыСчетчиков.НайтиПоКодуДляПоиска("Сеансов", КластерСчетчик);
        Счетчики.Добавить(Сеансов);
        
        СеансовПоТипу = Справочники.ГруппыСчетчиков.СчетчикиРодителя(Сеансов);
        Для Каждого СеансПоТипу Из СеансовПоТипу Цикл
            Счетчики.Добавить(СеансПоТипу);
        КонецЦикла;
        
        ИнформационныхБаз = Справочники.ГруппыСчетчиков.НайтиПоКодуДляПоиска("Информационных баз", КластерСчетчик);
        ИнформационныеБазы = Справочники.ГруппыСчетчиков.СчетчикиРодителя(ИнформационныхБаз);
        Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
            СчетчикиИнформационнойБазы = Справочники.ГруппыСчетчиков.СчетчикиРодителя(ИнформационнаяБаза);
            Для Каждого СчетчикИнформационнойБазы Из СчетчикиИнформационнойБазы Цикл
                Счетчики.Добавить(СчетчикИнформационнойБазы);
            КонецЦикла;
        КонецЦикла;
        
    КонецЕсли;
            
    Возврат Счетчики;
    
КонецФункции

#КонецОбласти

#Область РабочийСервер

// Функция - Найти по уникальному идентификатору рабочий сервер.
//
// Параметры:
//  УникальныйИдентификаторОбъекта - Строка - Уникальный идентификатор объекта по которому осуществляется поиск.
// 
// Возвращаемое значение:
//   СправочникСсылка.ОбъектыКонтроля. 
//
Функция НайтиПоУникальномуИдентификаторуРабочийСервер(УникальныйИдентификаторОбъекта) Экспорт
    Возврат НайтиПоУникальномуИдентификатору(УникальныйИдентификаторОбъекта, Справочники.ВидыОбъектовКонтроля.РабочийСервер);
КонецФункции

#КонецОбласти

#Область ИнформационнаяБаза

// Функция - Найти по уникальному идентификатору информационную базу.
//
// Параметры:
//  УникальныйИдентификаторОбъекта - УникальныйИдентификатор - Уникальный идентификатор объекта по которому осуществляется поиск.
// 
// Возвращаемое значение:
//   СправочникСсылка.ОбъектыКонтроля. 
//
Функция НайтиПоУникальномуИдентификаторуИнформационнаяБаза(УникальныйИдентификаторОбъекта) Экспорт
    Возврат НайтиПоУникальномуИдентификатору(УникальныйИдентификаторОбъекта, Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
КонецФункции

#КонецОбласти

// Поиск по оборудованию рабочего сервера 1С.
//
// Параметры:
//  Ссылка - СправочникСсылка.Оборудование - оборудование для поиска рабочего сервера 1С. 
//  ПоВсем - Булево - условие выборки и из помеченных на удаление, значение по умолчанию Ложь.
// 
// Возвращаемое значение:
//   Ссылка - СправочникСсылка.ОбъектКонтроля.
// 
Функция НайтиРабочийСервер1сОборудования(Ссылка, ПоВсем = Ложь) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ПараметрыРабочихСерверов.ОбъектКонтроля
    |ИЗ
    |   РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ОбъектыКонтроля КАК РабочийСервер
    |ПО
    |   РабочийСервер.Ссылка = ПараметрыРабочихСерверов.ОбъектКонтроля
    |   {И НЕ РабочийСервер.ПометкаУдаления}
    |ГДЕ
    |   Оборудование = &Оборудование
    |";
    
    Запрос.УстановитьПараметр("Оборудование", Ссылка);
    Если ПоВсем Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И НЕ РабочийСервер.ПометкаУдаления}", "");
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{И НЕ РабочийСервер.ПометкаУдаления}", "И НЕ РабочийСервер.ПометкаУдаления");
    КонецЕсли;
    
    Результат = Запрос.Выполнить();
    
    РабочийСервер1С = Неопределено;
    
    Если НЕ Результат.Пустой() Тогда
        
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        РабочийСервер1С = Выборка.ОбъектКонтроля;
        
    КонецЕсли;
    
    Возврат РабочийСервер1С;
    
КонецФункции

// Создает рабочий сервер 1С по указанному оборудованию.
//
// Параметры:
//  Ссылка                  - СправочникСсылка.Оборудование - оборудование для создания рабочего сервера 1С.
//  ДополнительныеПараметры - Структура                     - структура создания с ключами:
//                                                            — Наименование                - Строка - максимальная длина 100
//                                                            — Ответственный               - СправочникСсылка.Пользователи
//                                                            — Кластер                     - СправочникСсылка.ОбъектКонтроля
//                                                            — КаталогНастроекТЖ           - Строка - максимальная длина 256
//                                                            — КаталогНастроекТЖСетевой    - Строка - максимальная длина 256
//                                                            — КаталогОбменаДанными        - Строка - максимальная длина 256
//                                                            — КаталогОбменаДаннымиСетевой - Строка - максимальная длина 256
//                                                            — КаталогВременный            - Строка - максимальная длина 256
// 
// Возвращаемое значение:
//   Ссылка - СправочникСсылка.ОбъектКонтроля.
//
Функция СоздатьРабочийСервер1С(Ссылка, ДополнительныеПараметры = Неопределено) Экспорт
    
    РабочийСервер1С = НайтиРабочийСервер1сОборудования(Ссылка);
    
    Если РабочийСервер1С = Неопределено Тогда
        
        НачатьТранзакцию();
        Попытка
            Блокировка = Новый БлокировкаДанных;
            ЭлементБлокировки = Блокировка.Добавить("Справочник.Оборудование");
            ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
            ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
            Блокировка.Заблокировать();
            
            РабочийСервер1С = НайтиРабочийСервер1сОборудования(Ссылка);
            Если РабочийСервер1С = Неопределено Тогда
                
                НовЭлемент = Справочники.ОбъектыКонтроля.СоздатьЭлемент();
                НовЭлемент.Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер;
                НовЭлемент.Наименование = Ссылка.Наименование;
                НовЭлемент.НастройкаВыполнена = Истина;
                НовЭлемент.ПлощадкаЭксплуатации = Ссылка.ПлощадкаЭксплуатации;
                
                Если ДополнительныеПараметры <> Неопределено Тогда
                    
                    Если ДополнительныеПараметры.Свойство("Наименование") Тогда
                        НовЭлемент.Наименование = ДополнительныеПараметры.Наименование;
                    КонецЕсли;
                    
                    Если ДополнительныеПараметры.Свойство("Ответственный") Тогда
                        НовЭлемент.Ответственный = ДополнительныеПараметры.Ответственный;
                    КонецЕсли;
                    
                    Если ДополнительныеПараметры.Свойство("ПлощадкаЭксплуатации") Тогда
                        НовЭлемент.ПлощадкаЭксплуатации = ДополнительныеПараметры.ПлощадкаЭксплуатации;
                    КонецЕсли;
                                        
                КонецЕсли;
                
                ПараметрыЗаписи = Новый Структура("ПараметрыРабочихСерверов", Новый Структура);
                ПараметрыЗаписи.ПараметрыРабочихСерверов.Вставить("Кластер", Неопределено);
                НовЭлемент.ДополнительныеСвойства.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
                НовЭлемент.Записать();
                
                МенеджерЗаписи = РегистрыСведений.ПараметрыРабочихСерверов.СоздатьМенеджерЗаписи();
                МенеджерЗаписи.ОбъектКонтроля = НовЭлемент.Ссылка;
                МенеджерЗаписи.Оборудование = Ссылка;
                
                Если ДополнительныеПараметры <> Неопределено Тогда
                    Если ДополнительныеПараметры.Свойство("Кластер") Тогда
                        МенеджерЗаписи.Кластер = ДополнительныеПараметры.Кластер;
                    КонецЕсли;
                    
                    Если ДополнительныеПараметры.Свойство("КаталогНастроекТЖ") Тогда
                        МенеджерЗаписи.КаталогНастроекТЖ = ДополнительныеПараметры.КаталогНастроекТЖ;
                    КонецЕсли;
                    
                    Если ДополнительныеПараметры.Свойство("КаталогНастроекТЖСетевой") Тогда
                        МенеджерЗаписи.КаталогНастроекТЖСетевой = ДополнительныеПараметры.КаталогНастроекТЖСетевой;
                    КонецЕсли;
                    
                    Если ДополнительныеПараметры.Свойство("КаталогОбменаДанными") Тогда
                        МенеджерЗаписи.КаталогОбменаДанными = ДополнительныеПараметры.КаталогОбменаДанными;
                    КонецЕсли;
                    
                    Если ДополнительныеПараметры.Свойство("КаталогОбменаДаннымиСетевой") Тогда
                        МенеджерЗаписи.КаталогОбменаДаннымиСетевой = ДополнительныеПараметры.КаталогОбменаДаннымиСетевой;
                    КонецЕсли;
                    
                    Если ДополнительныеПараметры.Свойство("КаталогВременный") Тогда
                        МенеджерЗаписи.КаталогВременный = ДополнительныеПараметры.КаталогВременный;
                    КонецЕсли;
                КонецЕсли;
                
                МенеджерЗаписи.Записать(Ложь);
                
            КонецЕсли;
            ЗафиксироватьТранзакцию();
            РабочийСервер1С = НовЭлемент.Ссылка; 
        Исключение
            ОтменитьТранзакцию();
            ВызватьИсключение;
        КонецПопытки;
        
    КонецЕсли;
    
    Возврат РабочийСервер1С
    
КонецФункции

// Возвращает рабочие серверы 1С кластера
//
// Параметры:
//  Кластер - СправочникСсылка.ОбъектыКонтроля - кластер 1С для отбора рабочих серверов.
// 
// Возвращаемое значение:
//  Массив - массив элементов СправочникСсылка.ОбъектыКонтроля.
//
Функция РабочиеСерверыКластера(Кластер) Экспорт
	
	РабочиеСерверы = Новый Массив;
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбъектКонтроля
	|ИЗ
	|	РегистрСведений.ПараметрыРабочихСерверов
	|ГДЕ
	|	Кластер = &Кластер
	|";
	
	Запрос.УстановитьПараметр("Кластер", Кластер);
	
	Результат = Запрос.Выполнить();
    
    Если НЕ Результат.Пустой() Тогда
        РабочиеСерверы = Результат.Выгрузить().ВыгрузитьКолонку("ОбъектКонтроля");
	КонецЕсли;
	
	Возврат РабочиеСерверы;
	
КонецФункции

// Возвращает информационные базы кластера
//
// Параметры:
//  Кластер - СправочникСсылка.ОбъектыКонтроля - кластер 1С для отбора информационных баз.
// 
// Возвращаемое значение:
//  Массив - массив элементов СправочникСсылка.ОбъектыКонтроля.
//
Функция ИнформационныеБазыКластера(Знач Кластер) Экспорт
	
	ИнформационныеБазы = Новый Массив;
	
	Если ТипЗнч(Кластер) = Тип("Строка") Тогда
		Кластер = СсылкаКластерПоНаименованию(Кластер);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбъектКонтроля
	|ИЗ
	|	РегистрСведений.ПараметрыИнформационныхБаз
	|ГДЕ
	|	Кластер = &Кластер
	|";
	
	Запрос.УстановитьПараметр("Кластер", Кластер);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ИнформационныеБазы.Добавить(Выборка.ОбъектКонтроля);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИнформационныеБазы;
	
КонецФункции

// Получает свойство объекта контроля.
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка.ОбъектыКонтроля - объект контроля для получения свойства. 
//  Свойство     - Строка - имя свойства, которое необходимо получить
// 
// Возвращаемое значение:
//   Произвольный - значение найденного свойства.
//
Функция Свойство(ОбъектСсылка, Свойство, Владелец = Неопределено) Экспорт
    
    Значение = Неопределено;
	
	Если Владелец = Неопределено Тогда
		Владелец = ОбъектСсылка.Владелец;
	КонецЕсли;
	
	Если Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С Тогда
		Если Свойство = "Оборудование" Тогда
			Значение = ПолучитьРабочиеСервераКластера(ОбъектСсылка);
		ИначеЕсли Свойство = "Базы" Тогда
			Значение = ПолучитьБазыКластера(ОбъектСсылка);
		Иначе
			Значение = ПолучитьСвойствоКластера(ОбъектСсылка, Свойство);
		КонецЕсли;
	ИначеЕсли Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
		Если Свойство = "КаталогВременный" Тогда
			Значение = ПолучитьВременныйКаталог(ОбъектСсылка);
		Иначе
			Значение = ПолучитьСвойствоРабочегоСервера(ОбъектСсылка, Свойство);
		КонецЕсли;
	ИначеЕсли Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза Тогда
		Значение = ПолучитьСвойствоИнформационнойБазы(ОбъектСсылка, Свойство);
	КонецЕсли;
	
	Возврат Значение;
    
КонецФункции

// Получает ссылку на элемент с наименованием "Центр контроля качества".
// В случае отсутсвия создает новый.
// 
// Возвращаемое значение:
//  Ссылка - СправочникСсылка.ОбъектыКонтроля
//
Функция ЦентрКонтроляКачества() Экспорт
    
    Наименование = "Центр Контроля Качества";
    ЦентрКонтроляКачества = Справочники.ОбъектыКонтроля.НайтиПоНаименованию(Наименование);
    
    Если НЕ ЗначениеЗаполнено(ЦентрКонтроляКачества) Тогда
        
        НачатьТранзакцию();
        Попытка
            
            Блокировка = Новый БлокировкаДанных;
            ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыКонтроля");
            ЭлементБлокировки.УстановитьЗначение("Наименование", Наименование);
            ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
            Блокировка.Заблокировать();
            
            ЦентрКонтроляКачества = Справочники.ОбъектыКонтроля.НайтиПоНаименованию(Наименование);
            
            Если НЕ ЗначениеЗаполнено(ЦентрКонтроляКачества) Тогда
                
                ЦентрКонтроляКачестваОбъект = Справочники.ОбъектыКонтроля.СоздатьЭлемент();
                ЦентрКонтроляКачестваОбъект.Наименование = Наименование;
                ЦентрКонтроляКачестваОбъект.Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза;
                ЦентрКонтроляКачестваОбъект.Записать();
                
                ЗафиксироватьТранзакцию();
                
                ЦентрКонтроляКачества = ЦентрКонтроляКачестваОбъект.Ссылка;
                
            КонецЕсли;
                        
        Исключение
            
            ОтменитьТранзакцию();
            ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
            
        КонецПопытки;
    
    КонецЕсли;
    
    Возврат ЦентрКонтроляКачества;
    
КонецФункции

// Найти по наименованию кластер 1С
//
// Параметры:
//  ПлощадкаЭксплуатации - СправочникСсылка.ПлощадкиЭксплуатации - площадка эксплуатации для поиска кластера. 
//  Наименование         - Строка - наименование для поиска.
// 
// Возвращаемое значение:
//  Массив - массив СправочникСсылка.ОбъектыКонтроля.
//
Функция НайтиПоНаименованиюКластер1С(ПлощадкаЭксплуатации, Наименование) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.ОбъектыКонтроля
    |ГДЕ
    |   ПлощадкаЭксплуатации = &ПлощадкаЭксплуатации
    |   И Наименование = &Наименование
    |   И Владелец = &ВидОбъектаКонтроляКластер1С
    |";
    
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    Запрос.УстановитьПараметр("Наименование", Наименование);
    Запрос.УстановитьПараметр("ВидОбъектаКонтроляКластер1С", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
    
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    
КонецФункции

// Найти по наименованию рабочий сервер 1С
//
// Параметры:
//  ПлощадкаЭксплуатации - СправочникСсылка.ПлощадкиЭксплуатации - площадка эксплуатации для поиска рабочего сервера. 
//  Наименование         - Строка - наименование для поиска.
// 
// Возвращаемое значение:
//  Массив - массив СправочникСсылка.ОбъектыКонтроля.
//
Функция НайтиПоНаименованиюРабочийСервер1С(ПлощадкаЭксплуатации, Наименование) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.ОбъектыКонтроля
    |ГДЕ
    |   ПлощадкаЭксплуатации = &ПлощадкаЭксплуатации
    |   И Наименование = &Наименование
    |   И Владелец = &ВидОбъектаКонтроляРабочийСервер1С
    |";
    
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    Запрос.УстановитьПараметр("Наименование", Наименование);
    Запрос.УстановитьПараметр("ВидОбъектаКонтроляРабочийСервер1С", Справочники.ВидыОбъектовКонтроля.РабочийСервер);
    
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    
КонецФункции

// Найти по наименованию информационную базу
//
// Параметры:
//  ПлощадкаЭксплуатации - СправочникСсылка.ПлощадкиЭксплуатации - площадка эксплуатации для поиска информационной базы. 
//  Наименование         - Строка - наименование для поиска.
// 
// Возвращаемое значение:
//  Массив - массив СправочникСсылка.ОбъектыКонтроля.
//
Функция НайтиПоНаименованиюИнформационнуюБазу(ПлощадкаЭксплуатации, Наименование) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.ОбъектыКонтроля
    |ГДЕ
    |   ПлощадкаЭксплуатации = &ПлощадкаЭксплуатации
    |   И Наименование = &Наименование
    |   И Владелец = &ВидОбъектаКонтроляИнформационнаяБаза
    |";
    
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    Запрос.УстановитьПараметр("Наименование", Наименование);
    Запрос.УстановитьПараметр("ВидОбъектаКонтроляИнформационнаяБаза", Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
    
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    
КонецФункции

Функция НайтиПоНаименованиюИнформационнуюБазуВКластере(ПлощадкаЭксплуатации, Кластер, Наименование) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ИнформационнаяБаза.Ссылка
    |ИЗ
    |   Справочник.ОбъектыКонтроля КАК ИнформационнаяБаза
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ПараметрыИнформационныхБаз КАК Параметры
    |ПО
    |   Параметры.ОбъектКонтроля = ИнформационнаяБаза.Ссылка
    |   И Параметры.Кластер = &Кластер
    |ГДЕ
    |   ИнформационнаяБаза.ПлощадкаЭксплуатации = &ПлощадкаЭксплуатации
    |   И ИнформационнаяБаза.Наименование = &Наименование
    |   И ИнформационнаяБаза.Владелец = &ВидОбъектаКонтроляИнформационнаяБаза
    |";
    
    Запрос.УстановитьПараметр("Кластер", Кластер);
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    Запрос.УстановитьПараметр("Наименование", Наименование);
    Запрос.УстановитьПараметр("ВидОбъектаКонтроляИнформационнаяБаза", Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
    
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    
КонецФункции

Функция НайтиИнформационнуюБазуПоИмениВКластере(ПлощадкаЭксплуатации, Кластер, ИмяВКластере) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ИнформационнаяБаза.Ссылка
    |ИЗ
    |   Справочник.ОбъектыКонтроля КАК ИнформационнаяБаза
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ПараметрыИнформационныхБаз КАК Параметры
    |ПО
    |   Параметры.ОбъектКонтроля = ИнформационнаяБаза.Ссылка
    |   И Параметры.Кластер = &Кластер
    |   И Параметры.ИмяБазыВКластере = &ИмяВКластере
    |ГДЕ
    |   ИнформационнаяБаза.ПлощадкаЭксплуатации = &ПлощадкаЭксплуатации
    |   И ИнформационнаяБаза.Владелец = &ВидОбъектаКонтроляИнформационнаяБаза
    |";
    
    Запрос.УстановитьПараметр("Кластер", Кластер);
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    Запрос.УстановитьПараметр("ИмяВКластере", ИмяВКластере);
    Запрос.УстановитьПараметр("ВидОбъектаКонтроляИнформационнаяБаза", Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
    
    Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    
КонецФункции

// Создать элемент кластер 1С
//
// Параметры:
//  ПараметрыСоздания - Структура - структура создания с ключами:
//                                                            - ПлощадкаЭксплуатации          - СправочникСсылка.ПлощадкиЭксплуатации.
//                                                            - Наименование                  - Строка, максимальная длина 100.
//                                                            — ТипПодключения                - Строка, возможные значения RAS, COM.
//                                                            — АдминистраторКластера         - Строка.
//                                                            — ПарольАдминистратораКластера  - Строка.
//                                                            — АдресСервераАдминистрирования - Строка.
//                                                            — КаталогЗапускаСервераАдминистрирования - Строка.
//                                                            — ВерсияПлатформы               - Строка.
// 
// Возвращаемое значение:
//  СправочникСсылка.ОбъектыКонтроля - ссылка на созданный элемент. 
//
Функция СоздатьЭлементКластер1С(ПараметрыСоздания) Экспорт
    
    ПредставлениеКластера = ПараметрыСоздания["АдресКластера"] + ":" + Формат(ПараметрыСоздания["ПортКластера"], "ЧН=0; ЧГ=0");
    
    Кластеры1С = Справочники.ОбъектыКонтроля.НайтиПоНаименованиюКластер1С(ПараметрыСоздания["ПлощадкаЭксплуатации"], ПредставлениеКластера);
    Если Кластеры1С.Количество() <> 0 Тогда
        
        Для Каждого Кластер1С Из Кластеры1С Цикл
            Если Кластер1С.УникальныйИдентификаторОбъекта = ПараметрыСоздания["УникальныйИдентификаторОбъекта"] Тогда
                ВызватьИсключение "Найдены кластеры с наименованием """ + ПредставлениеКластера
                + ", идентификатором """ + ПараметрыСоздания["УникальныйИдентификаторОбъекта"] + """. Создание не возможно!"; 
            КонецЕсли;
        КонецЦикла;
        
    КонецЕсли;
        
    НачатьТранзакцию();
    
    Попытка
        
        Блокировка = Новый БлокировкаДанных;
        ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыКонтроля");
        ЭлементБлокировки.УстановитьЗначение("ПлощадкаЭксплуатации", ПараметрыСоздания["ПлощадкаЭксплуатации"]);
        ЭлементБлокировки.УстановитьЗначение("Наименование", ПредставлениеКластера);
        ЭлементБлокировки.УстановитьЗначение("Владелец", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
        ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
        Блокировка.Заблокировать();
        
        Кластеры1С = Справочники.ОбъектыКонтроля.НайтиПоНаименованиюКластер1С(ПараметрыСоздания["ПлощадкаЭксплуатации"], ПредставлениеКластера);
        Если Кластеры1С.Количество() <> 0 Тогда
            
            Для Каждого Кластер1С Из Кластеры1С Цикл
                Если Кластер1С.УникальныйИдентификаторОбъекта = ПараметрыСоздания["УникальныйИдентификаторОбъекта"] Тогда
                    ВызватьИсключение "Найдены кластеры с наименованием """ + ПредставлениеКластера
                    + ", идентификатором """ + ПараметрыСоздания["УникальныйИдентификаторОбъекта"] + """. Создание не возможно!"; 
                КонецЕсли;
            КонецЦикла;
            
        КонецЕсли;
        
        ПараметрыПоиска = Новый Структура;
        ПараметрыПоиска.Вставить("ТипПодключения", Перечисления.ТипПодключенияКластер1С.АгентКИП);
        ПараметрыПоиска.Вставить("УникальныйИдентификаторАгента", ПараметрыСоздания["УникальныйИдентификаторАгента"]);
        ПараметрыПоиска.Вставить("ПортСервераАдминистрирования", ПараметрыСоздания["ПортRAS"]);
        Подключение = Справочники.ПараметрыПодключенияКластер1С.НайтиПодключение(ПараметрыПоиска);
        
        Если Подключение = Справочники.ПараметрыПодключенияКластер1С.ПустаяСсылка() Тогда
            
            ПараметрыПодключения = Новый Структура;
            ПараметрыПодключения.Вставить("ТипПодключения", ПараметрыСоздания["ТипПодключения"]);
            ПараметрыПодключения.Вставить("УникальныйИдентификаторАгента", ПараметрыСоздания["УникальныйИдентификаторАгента"]);
            ПараметрыПодключения.Вставить("Активный", Истина);
            ПараметрыПодключения.Вставить("ИмяКластера", ПредставлениеКластера); 
            ПараметрыПодключения.Вставить("ПортRAS", ПараметрыСоздания["ПортRAS"]);
            Подключение = Справочники.ПараметрыПодключенияКластер1С.СоздатьПодключение(ПараметрыПодключения);
            
        КонецЕсли;
        
        ОбъектКонтроля = Справочники.ОбъектыКонтроля.СоздатьЭлемент();
        ОбъектКонтроля.Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С;
        ОбъектКонтроля.Наименование = ПредставлениеКластера;
        ОбъектКонтроля.УникальныйИдентификаторОбъекта = ПараметрыСоздания["УникальныйИдентификаторОбъекта"];
        ОбъектКонтроля.ПлощадкаЭксплуатации = ПараметрыСоздания["ПлощадкаЭксплуатации"];
        ОбъектКонтроля.Подключение = Подключение;
        ОбъектКонтроля.Записать();
        
        НастройкиКластера1С = Новый Структура;
        Для Каждого ПараметрСоздания Из ПараметрыСоздания Цикл
            НастройкиКластера1С.Вставить(ПараметрСоздания.Ключ, ПараметрСоздания.Значение);
        КонецЦикла;
        НастройкиКластера1С.АдресКластера = НастройкиКластера1С.АдресКластера + ":" + Формат(НастройкиКластера1С.ПортКластера,"ЧН=0; ЧГ=0");
                
        РегистрыСведений.ПараметрыКластеров.ЗаписатьНастройки(ОбъектКонтроля.Ссылка, НастройкиКластера1С);
                
        ЗафиксироватьТранзакцию();
        
    Исключение
        
        ОтменитьТранзакцию();
        ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        
    КонецПопытки;
    
    Возврат ОбъектКонтроля.Ссылка;
    
КонецФункции

// Создать элемент рабочий сервер 1С
//
// Параметры:
//  ПараметрыСоздания - Соответствие - Соответствие с ключами:
//                                                   — ПлощадкаЭксплуатации - СправочникСсылка.ПлощадкиЭксплуатации.
//                                                   — Наименование         - Строка, максимальная длина 100.
//                                                   — Оборудование         - СправочникСсылка.Оборудование.
//                                                   — Кластер1С            - СправочникСсылка.ОбъектыКонтроля.
// 
// Возвращаемое значение:
//  СправочникСсылка.ОбъектыКонтроля - ссылка на созданный элемент. 
//
Функция СоздатьЭлементРабочийСервер1С(ПараметрыСоздания) Экспорт
    
    РабочиеСерверы1С = Справочники.ОбъектыКонтроля.НайтиПоНаименованиюРабочийСервер1С(ПараметрыСоздания["ПлощадкаЭксплуатации"], ПараметрыСоздания["Наименование"]);
    РабочийСервер1С = Неопределено;
    Для Каждого ТекРабочийСервер Из РабочиеСерверы1С Цикл
        Если ТекРабочийСервер.УникальныйИдентификаторОбъекта = ПараметрыСоздания["УникальныйИдентификаторОбъекта"] Тогда
            РабочийСервер1С = ТекРабочийСервер;
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    Если РабочийСервер1С <> Неопределено Тогда
         ВызватьИсключение "Найден рабочий сервер 1С с наименованием """ + ПараметрыСоздания["Наименование"]
         + """, идентификатор """ + ПараметрыСоздания["УникальныйИдентификаторОбъекта"] + """. Создание не возможно!"; 
    КонецЕсли;
        
    НачатьТранзакцию();
    
    Попытка
        
        Блокировка = Новый БлокировкаДанных;
        ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыКонтроля");
        ЭлементБлокировки.УстановитьЗначение("ПлощадкаЭксплуатации", ПараметрыСоздания["ПлощадкаЭксплуатации"]);
        ЭлементБлокировки.УстановитьЗначение("Наименование", ПараметрыСоздания["Наименование"]);
        ЭлементБлокировки.УстановитьЗначение("Владелец", Справочники.ВидыОбъектовКонтроля.РабочийСервер);
        ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
        Блокировка.Заблокировать();
        
        РабочиеСерверы1С = Справочники.ОбъектыКонтроля.НайтиПоНаименованиюРабочийСервер1С(ПараметрыСоздания["ПлощадкаЭксплуатации"], ПараметрыСоздания["Наименование"]);
        РабочийСервер1С = Неопределено;
        Для Каждого ТекРабочийСервер Из РабочиеСерверы1С Цикл
            Если ТекРабочийСервер.УникальныйИдентификаторОбъекта = ПараметрыСоздания["УникальныйИдентификаторОбъекта"] Тогда
                РабочийСервер1С = ТекРабочийСервер;
                Прервать;
            КонецЕсли;
        КонецЦикла;
        
        Если РабочийСервер1С <> Неопределено Тогда
            ВызватьИсключение "Найден рабочий сервер 1С с наименованием """ + ПараметрыСоздания["Наименование"]
            + """, идентификатор """ + ПараметрыСоздания["УникальныйИдентификаторОбъекта"] + """. Создание не возможно!"; 
        КонецЕсли;
        
        ОбъектКонтроля = Справочники.ОбъектыКонтроля.СоздатьЭлемент();
        ОбъектКонтроля.УникальныйИдентификаторОбъекта = ПараметрыСоздания["УникальныйИдентификаторОбъекта"];
        ОбъектКонтроля.Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер;
        ОбъектКонтроля.Наименование = ПараметрыСоздания["Наименование"];
        ОбъектКонтроля.ПлощадкаЭксплуатации = ПараметрыСоздания["ПлощадкаЭксплуатации"];
        
        ПараметрыРабочихСерверов = Новый Структура;
        ПараметрыРабочихСерверов.Вставить("Кластер", ПараметрыСоздания["Кластер"]);
        ПараметрыРабочихСерверов.Вставить("ДиапазоныПортов", ПараметрыСоздания["ДиапазоныПортов"]);
                
        ПараметрыЗаписи = Новый Структура("ПараметрыРабочихСерверов", ПараметрыРабочихСерверов);
        ОбъектКонтроля.ДополнительныеСвойства.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
        
        ОбъектКонтроля.Записать();
        
        НастройкиРабочегоСервера1С = Новый Структура;
        Для Каждого ТекПараметр Из ПараметрыСоздания Цикл
            НастройкиРабочегоСервера1С.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);            
        КонецЦикла;
        РегистрыСведений.ПараметрыРабочихСерверов.ЗаписатьНастройки(ОбъектКонтроля.Ссылка, НастройкиРабочегоСервера1С);
        
        ЗафиксироватьТранзакцию();
        
    Исключение
        
        ОтменитьТранзакцию();
        ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        
    КонецПопытки;
    
    Возврат ОбъектКонтроля.Ссылка;
    
КонецФункции

Функция СоздатьЭлементИнформационнуюБазу(ПараметрыСоздания) Экспорт
    
    ИнформационныеБазы = Справочники.ОбъектыКонтроля.НайтиПоНаименованиюИнформационнуюБазуВКластере(ПараметрыСоздания["ПлощадкаЭксплуатации"], ПараметрыСоздания["Кластер"], ПараметрыСоздания["Наименование"]);
    Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
        Если ИнформационнаяБаза.УникальныйИдентификаторОбъекта = ПараметрыСоздания["УникальныйИдентификаторОбъекта"] Тогда
            ВызватьИсключение "Найдена информационная база с наименованием """ + ПараметрыСоздания["Наименование"]
            + """, уникальным идентификатором """ + ПараметрыСоздания["УникальныйИдентификаторОбъекта"] + """. Создание не возможно!";
        КонецЕсли;
    КонецЦикла;
        
    НачатьТранзакцию();
        
    Попытка
        
        Блокировка = Новый БлокировкаДанных;
        ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыКонтроля");
        ЭлементБлокировки.УстановитьЗначение("ПлощадкаЭксплуатации", ПараметрыСоздания["ПлощадкаЭксплуатации"]);
        ЭлементБлокировки.УстановитьЗначение("Наименование", ПараметрыСоздания["Наименование"]);
        ЭлементБлокировки.УстановитьЗначение("Владелец", Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
        ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
        Блокировка.Заблокировать();
        
        ИнформационныеБазы = Справочники.ОбъектыКонтроля.НайтиПоНаименованиюИнформационнуюБазуВКластере(ПараметрыСоздания["ПлощадкаЭксплуатации"], ПараметрыСоздания["Кластер"], ПараметрыСоздания["Наименование"]);
        Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
            Если ИнформационнаяБаза.УникальныйИдентификаторОбъекта = ПараметрыСоздания["УникальныйИдентификаторОбъекта"] Тогда
                ВызватьИсключение "Найдена информационная база с наименованием """ + ПараметрыСоздания["Наименование"]
                + """, уникальным идентификатором """ + ПараметрыСоздания["УникальныйИдентификаторОбъекта"] + """. Создание не возможно!";
            КонецЕсли;
        КонецЦикла;
    
        ОбъектКонтроля = Справочники.ОбъектыКонтроля.СоздатьЭлемент();
        ОбъектКонтроля.УникальныйИдентификаторОбъекта = ПараметрыСоздания["УникальныйИдентификаторОбъекта"];
	    ОбъектКонтроля.Наименование = ПараметрыСоздания["Наименование"];
	    ОбъектКонтроля.Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза;
        ОбъектКонтроля.ПлощадкаЭксплуатации = ПараметрыСоздания["ПлощадкаЭксплуатации"];
                
        ПараметрыИнформационнойБазы = Новый Структура;
        ПараметрыИнформационнойБазы.Вставить("Кластер", ПараметрыСоздания["Кластер"]);
        
        ПараметрыЗаписи = Новый Структура("ПараметрыИнформационнойБазы", ПараметрыИнформационнойБазы);
        ОбъектКонтроля.ДополнительныеСвойства.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
        
	    ОбъектКонтроля.Записать();
        
        НастройкиИнформационнойБазы = Новый Структура;
        Для Каждого ТекПараметр Из ПараметрыСоздания Цикл
            НастройкиИнформационнойБазы.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);            
        КонецЦикла;
        РегистрыСведений.ПараметрыИнформационныхБаз.ЗаписатьНастройки(ОбъектКонтроля.Ссылка, НастройкиИнформационнойБазы);
        
        ЗафиксироватьТранзакцию();
        
    Исключение
        
        ОтменитьТранзакцию();
        ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        
    КонецПопытки;
    
	
	Если ПараметрыСоздания["СоздатьКонтрольВыполненияРегламентрыхЗаданий"] <> Неопределено И ПараметрыСоздания["СоздатьКонтрольВыполненияРегламентрыхЗаданий"] Тогда
		ПараметрыКП = Новый Структура;
		ПараметрыКП.Вставить("Наименование", "Контроль выполнения регламентрых заданий для " + ПараметрыСоздания["Наименование"]);
		ПараметрыКП.Вставить("Владелец", Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий());
		ПараметрыКП.Вставить("ОбъектКонтроля", ОбъектКонтроля.Ссылка);
		
		Справочники.КонтрольныеПроцедуры.СоздатьЭлементКонтрольВыполненияРегламентныхЗадания(ПараметрыКП);
	КонецЕсли;
	
	Если ПараметрыСоздания["СоздатьКонтрольНагрузочныхТестов"] <> Неопределено И ПараметрыСоздания["СоздатьКонтрольНагрузочныхТестов"] Тогда
		ПараметрыКП = Новый Структура;
		ПараметрыКП.Вставить("Наименование", "Контроль нагрузочных тестов для " + ПараметрыСоздания["Наименование"]);
		ПараметрыКП.Вставить("Владелец", Справочники.ВидыКонтрольныхПроцедур.КонтрольНагрузочныхТестов());
		ПараметрыКП.Вставить("ОбъектКонтроля", ОбъектКонтроля.Ссылка);
		
		Справочники.КонтрольныеПроцедуры.СоздатьЭлементКонтрольНагрузочныхТестов(ПараметрыКП);
	КонецЕсли;
	
	Если ПараметрыСоздания["СоздатьКонтрольПодключений"] <> Неопределено И ПараметрыСоздания["СоздатьКонтрольПодключений"] Тогда
		ПараметрыКП = Новый Структура;
		ПараметрыКП.Вставить("Наименование", "Контроль подключений для " + ПараметрыСоздания["Наименование"]);
		ПараметрыКП.Вставить("Владелец", Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений());
		ПараметрыКП.Вставить("ОбъектКонтроля", ОбъектКонтроля.Ссылка);
		
		Справочники.КонтрольныеПроцедуры.СоздатьЭлементКонтрольПодключений(ПараметрыКП);
	КонецЕсли;
	
	Если ПараметрыСоздания["СоздатьКонтрольПроизводительности"] <> Неопределено И ПараметрыСоздания["СоздатьКонтрольПроизводительности"] Тогда
		ПараметрыКП = Новый Структура;
		ПараметрыКП.Вставить("Наименование", "Контроль производительности для " + ПараметрыСоздания["Наименование"]);
		ПараметрыКП.Вставить("Владелец", Справочники.ВидыКонтрольныхПроцедур.КонтрольПроизводительности());
		ПараметрыКП.Вставить("ОбъектКонтроля", ОбъектКонтроля.Ссылка);
		
		Справочники.КонтрольныеПроцедуры.СоздатьЭлементКонтрольОценкиПроизводительности(ПараметрыКП);
	КонецЕсли;
	
	Если ПараметрыСоздания["СоздатьОценкаПользователей"] <> Неопределено И ПараметрыСоздания["СоздатьОценкаПользователей"] Тогда
		ПараметрыКП = Новый Структура;
		ПараметрыКП.Вставить("Наименование", "Оценка пользователей для " + ПараметрыСоздания["Наименование"]);
		ПараметрыКП.Вставить("Владелец", Справочники.ВидыКонтрольныхПроцедур.ОценкаПользователей());
		ПараметрыКП.Вставить("ОбъектКонтроля", ОбъектКонтроля.Ссылка);
		
		Справочники.КонтрольныеПроцедуры.СоздатьЭлементОценкаПользователей(ПараметрыКП);
	КонецЕсли;
	
	Возврат ОбъектКонтроля.Ссылка;
    
КонецФункции

Функция ИзменитьИнформационнуюБазу(ИнформационнаяБаза, Параметры) Экспорт
    
    ОбъектКонтроля = ИнформационнаяБаза.ПолучитьОбъект();
    
    ЕстьИзменение = Ложь;
    ЕстьИзменение = УстановитьСвойство(ОбъектКонтроля, Параметры, "Наименование") ИЛИ ЕстьИзменение;
    
    Если ЕстьИзменение Тогда
        ОбъектКонтроля.Записать();
    КонецЕсли;
    
    НастройкиИнформационнойБазы = Новый Структура;
    Для Каждого ТекПараметр Из Параметры Цикл
        НастройкиИнформационнойБазы.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);            
    КонецЦикла;
    РегистрыСведений.ПараметрыИнформационныхБаз.ЗаписатьНастройки(ИнформационнаяБаза, НастройкиИнформационнойБазы);
    
КонецФункции

#КонецОбласти
    
#Область Экспортные_Процедуры_и_функции

Функция ПолучитьКонтрольПодключений(ОбъектСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КонтрольныеПроцедуры.Ссылка КАК КонтрольнаяПроцедураСсылка
	|ИЗ
	|	Справочник.КонтрольныеПроцедуры КАК КонтрольныеПроцедуры
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.ВидыКонтрольныхПроцедур КАК ВидыКонтрольныхПроцедур
	|ПО
	|	КонтрольныеПроцедуры.Владелец = ВидыКонтрольныхПроцедур.Ссылка
	|	И ВидыКонтрольныхПроцедур.Наименование = &КонтрольПодключений
	|ГДЕ
	|	КонтрольныеПроцедуры.ОбъектКонтроля = &ОбъектКонтроля
	|";
	Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектСсылка);
	Запрос.УстановитьПараметр("КонтрольПодключений", "Контроль подключений");
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.КонтрольнаяПроцедураСсылка;
		КонецЦикла;
	КонецЕсли;
КонецФункции

Функция ПолучитьКонтрольУстойчивости(ОбъектСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КонтрольныеПроцедуры.Ссылка КАК КонтрольнаяПроцедураСсылка
	|ИЗ
	|	Справочник.КонтрольныеПроцедуры КАК КонтрольныеПроцедуры
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.ВидыКонтрольныхПроцедур КАК ВидыКонтрольныхПроцедур
	|ПО
	|	КонтрольныеПроцедуры.Владелец = ВидыКонтрольныхПроцедур.Ссылка
	|	И ВидыКонтрольныхПроцедур.Наименование = &КонтрольПодключений
	|ГДЕ
	|	КонтрольныеПроцедуры.ОбъектКонтроля = &ОбъектКонтроля
	|";
	Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектСсылка);
	Запрос.УстановитьПараметр("КонтрольПодключений", "Контроль устойчивости системы");
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.КонтрольнаяПроцедураСсылка;
		КонецЦикла;
	КонецЕсли;
КонецФункции

Функция ПолучитьКластеры(ТипПодключения, АдресКластера, ПортАгентаКластера, АдресСервераАдминистрирования, ПортСервераАдминистрирования, ВерсияПлатформы, КаталогЗапускаСервераАдминистрирования) Экспорт
	
	КластерыМассив = Новый Массив;
	
	Если ТипПодключения = "COM" Тогда  
		МенеджерСоединений = Общий.ПолучитьComСоединитель();
		Попытка
			СоединениеСЦентральнымСервером = МенеджерСоединений.ConnectAgent(АдресКластера + ":" + Формат(ПортАгентаКластера, "ЧГ=0"));
			Кластеры = СоединениеСЦентральнымСервером.GetClusters();
			Для Каждого Кластер Из Кластеры Цикл
				КластерСтруктура = Новый Структура;
				Если Общий.ВерсияПлатформы() > 8000300000000000 Тогда
					ИмяКластера = "ClusterName";
				Иначе
					ИмяКластера = "Name";
				КонецЕсли;
				КластерСтруктура.Вставить("ClusterName", Кластер[ИмяКластера]);
				КластерСтруктура.Вставить("MainPort", Кластер["MainPort"]);
				КластерСтруктура.Вставить("HostName", Кластер["HostName"]);
				
				КластерыМассив.Добавить(КластерСтруктура);
			КонецЦикла;
		Исключение
			Ошибка = ИнформацияОбОшибке();
			Если Ошибка.Причина <> Неопределено Тогда
				ВызватьИсключение Ошибка.Причина.Описание + "." + НСтр("ru = 'Заполните поле ""Кластер"" руками.'");
			Иначе
				ВызватьИсключение Ошибка.Описание + "." + НСтр("ru = 'Заполните поле ""Кластер"" руками.'");
			КонецЕсли;
		КонецПопытки;
	ИначеЕсли ТипПодключения = "RAS" Тогда
		Попытка
			ПараметрыАдминистрированияКластера = ОбщийКлиентСервер.СформироватьПараметрыАдминистрированияКластера(ТипПодключения, АдресКластера, ПортАгентаКластера,
			АдресСервераАдминистрирования, ПортСервераАдминистрирования, Неопределено, Неопределено, Неопределено, ВерсияПлатформы, КаталогЗапускаСервераАдминистрирования);
			
			ИдентификаторКластера = АдминистрированиеКластераRAS.ПолучитьКластеры(ПараметрыАдминистрированияКластера);
			
			Для Каждого ЭлементМассива Из ИдентификаторКластера Цикл 
				КластерСтруктура = Новый Структура;
				
				КластерСтруктура.Вставить("ClusterName", ЭлементМассива["name"]);
				КластерСтруктура.Вставить("MainPort", ЭлементМассива["port"]);
				КластерСтруктура.Вставить("HostName", ЭлементМассива["host"]);
				
				КластерыМассив.Добавить(КластерСтруктура);	
			КонецЦикла;
			
		Исключение
			Ошибка = ИнформацияОбОшибке();
			Если Ошибка.Причина <> Неопределено Тогда
				ВызватьИсключение Ошибка.Причина.Описание + "." + НСтр("ru = 'Заполните поле ""Кластер"" руками.'");
			Иначе
				ВызватьИсключение Ошибка.Описание + "." + НСтр("ru = 'Заполните поле ""Кластер"" руками.'");
			КонецЕсли;
		КонецПопытки;		
	КонецЕсли;
	
	Возврат КластерыМассив;
	
КонецФункции

Функция ПолучитьСсылкуПоНаименованию(Наименование) Экспорт
	Ссылка = ПолучитьСсылкуПоНаименованиюСлужебный(Наименование);
	
	Если Ссылка = Неопределено Тогда
		НачатьТранзакцию();
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.ОбъектыКонтроля");
		ЭлементБлокировки.УстановитьЗначение("Наименование", Наименование);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Попытка
			БлокировкаДанных.Заблокировать();
			
			Ссылка = ПолучитьСсылкуПоНаименованиюСлужебный(Наименование);
			Если Ссылка = Неопределено Тогда
				Ссылка = СоздатьЭлементПоНаименованию(Наименование);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

Функция СсылкаКластерПоНаименованию(Наименование) Экспорт
	
	Ссылка = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка
	|ИЗ
	|	Справочник.ОбъектыКонтроля
	|ГДЕ
	|	Наименование = &Наименование
	|	И Владелец = &Владелец
	|";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Владелец", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ШаблонОповещенийКластер() Экспорт
	
	ШаблонОповещения = Новый Структура("Тема, ТелоПисьма, ТелоСМС");
	
	ШаблонОповещения.Тема = "<Шапка>PROBLEM:Доступность публикация</Шапка><Тело>[СтрокаПодключения]</Тело>";
	ШаблонОповещения.ТелоПисьма = "<Шапка>PROBLEM:Доступность</Шапка>
	|<Тело>[ВремяВСтатусе];[ДатаОткрытияИнцидента=дд.ММ ЧЧ:мм:сс]: [СтрокаПодключения]
	|</Тело>";
	ШаблонОповещения.ТелоСМС = "<Шапка>PROBLEM:Доступность</Шапка>
	|<Тело>[ВремяВСтатусе];[ДатаОткрытияИнцидента=дд.ММ ЧЧ:мм:сс]: [СтрокаПодключения]
	|</Тело>";
	
	Возврат ШаблонОповещения;
	
КонецФункции

Процедура СоздатьНастройкиПоУмолчанию() Экспорт
    
    // Настройки по умолчанию кластера 1С
    НастройкиКластер = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
    
    НастройкиКластер.ТипПодключения = "RAS";
    НастройкиКластер.АдресСервераАдминистрирования = "localhost";
    НастройкиКластер.ПортСервераАдминистрирования = 1545;
    НастройкиКластер.ПортКластера = 1541;
    
    РегистрыСведений.ПараметрыКластеров.ЗаписатьНастройки(Справочники.ВидыОбъектовКонтроля.КластерСерверов1С, НастройкиКластер);
    
    // Настройки по умолчанию рабочего сервера 1С
    НастройкиРабочийСервер = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.РабочийСервер);
    
    НастройкиРабочийСервер.ДиапазонПортовОт = 1560;
    НастройкиРабочийСервер.ДиапазонПортовДо = 1591;
    
    РегистрыСведений.ПараметрыРабочихСерверов.ЗаписатьНастройки(Справочники.ВидыОбъектовКонтроля.РабочийСервер, НастройкиРабочийСервер);
    
КонецПроцедуры

#КонецОбласти

#Область Служебные_Процедуры_и_функции

Функция НайтиПоУникальномуИдентификатору(УникальныйИдентификаторОбъекта, ВидОбъектаКонтроля)
    
    Ссылка = Справочники.ОбъектыКонтроля.ПустаяСсылка();
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.ОбъектыКонтроля
    |ГДЕ
    |   УникальныйИдентификаторОбъекта = &УникальныйИдентификаторОбъекта
    |   И Владелец = &ВидОбъектаКонтроля
    |";
    
    Запрос.УстановитьПараметр("УникальныйИдентификаторОбъекта", УникальныйИдентификаторОбъекта);
    Запрос.УстановитьПараметр("ВидОбъектаКонтроля", ВидОбъектаКонтроля);
    
    Результат = Запрос.Выполнить();
    
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Ссылка =  Выборка.Ссылка;
    КонецЕсли;
    
    Возврат Ссылка;
    
КонецФункции

Функция УстановитьСвойство(ОбъектКонтроля, Параметры, ИмяСвойства)
    
    ЕстьИзменение = Ложь;
    
    Если Параметры[ИмяСвойства] <> Неопределено И ОбъектКонтроля[ИмяСвойства] <> Параметры[ИмяСвойства] Тогда
        ОбъектКонтроля[ИмяСвойства] = Параметры[ИмяСвойства];
        ЕстьИзменение = Истина;
    КонецЕсли;
    
    Возврат ЕстьИзменение;
    
КонецФункции

Функция ПолучитьСвойствоКластера(КластерСсылка, Свойство)
	
	Значение = Неопределено;
	
	Если Свойство = "АдминистраторКластера" ИЛИ Свойство = "ПарольАдминистратораКластера" Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеХранилища = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(КластерСсылка);
		УстановитьПривилегированныйРежим(Ложь);
		Значение = ДанныеХранилища[Свойство];
	Иначе
		Запрос = Новый Запрос;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПараметрыКластеров.%Свойство% КАК Значение
		|ИЗ
		|	РегистрСведений.ПараметрыКластеров КАК ПараметрыКластеров
		|ГДЕ
		|	ПараметрыКластеров.ОбъектКонтроля = &ОбъектКонтроля
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Свойство%", Свойство);
		Запрос.УстановитьПараметр("ОбъектКонтроля", КластерСсылка);
		Запрос.Текст = ТекстЗапроса;
		
		Попытка
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Значение = РезультатЗапроса.Выгрузить()[0].Значение;
			КонецЕсли;
		Исключение
			Инфо = ИнформацияОбОшибке();
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("ПолучитьСвойствоКластера", УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.ОбъектыКонтроля.МодульМенеджера,,Комментарий);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

Функция ПолучитьСвойствоРабочегоСервера(РабочийСерверСсылка, Свойство)
	Значение = Неопределено;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыРабочихСерверов.%Свойство% КАК Значение
	|ИЗ
	|	РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
	|ГДЕ
	|	ПараметрыРабочихСерверов.ОбъектКонтроля = &ОбъектКонтроля
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Свойство%", Свойство);
	Запрос.УстановитьПараметр("ОбъектКонтроля", РабочийСерверСсылка);
	Запрос.Текст = ТекстЗапроса;
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Значение = РезультатЗапроса.Выгрузить()[0].Значение;
		КонецЕсли;
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
		ЗаписьЖурналаРегистрации(
		    "ПолучитьСвойствоРабочегоСервера(РабочийСерверСсылка, Свойство)",
		    УровеньЖурналаРегистрации.Ошибка,
		    Метаданные.Справочники.ОбъектыКонтроля.МодульМенеджера,
		    ,
		    Комментарий);
	КонецПопытки;
	
	Возврат Значение;
КонецФункции

Функция ПолучитьСвойствоИнформационнойБазы(ИнформационнаяБазаСсылка, Свойство)
	Значение = Неопределено;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыИнформационныхБаз.%Свойство% КАК Значение
	|ИЗ
	|	РегистрСведений.ПараметрыИнформационныхБаз КАК ПараметрыИнформационныхБаз
	|ГДЕ
	|	ПараметрыИнформационныхБаз.ОбъектКонтроля = &ОбъектКонтроля
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Свойство%", Свойство);
	Запрос.УстановитьПараметр("ОбъектКонтроля", ИнформационнаяБазаСсылка);
	Запрос.Текст = ТекстЗапроса;
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Значение = РезультатЗапроса.Выгрузить()[0].Значение;
		КонецЕсли;
	Исключение
		Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
		ЗаписьЖурналаРегистрации(
			"Функция ПолучитьСвойствоИнформационнойБазы(ИнформационнаяБазаСсылка, Свойство)",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ОбъектыКонтроля.МодульМенеджера,
			,
			Комментарий);
	КонецПопытки;
	
	Возврат Значение;
КонецФункции

Функция ПолучитьСоединение(ОбъектСсылка)
	ВерсияПлатформы = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ВерсияПлатформы");
	МенеджерСоединений = Общий.ПолучитьComСоединитель(ВерсияПлатформы);
	
	АдресКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "АдресКластера");
	ПортАгентаКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ПортАгентаКластера");
	
	Попытка
        
        СоединениеСЦентральнымСервером = МенеджерСоединений.ConnectAgent(АдресКластера + ":" + Формат(ПортАгентаКластера, "ЧГ=0"));
        
	Исключение
        
        Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        ВызватьИсключение Ошибка + "." + Символы.ПС + НСтр("ru = 'Заполните поле ""Имя компьютера или IP адрес"" руками.'");
        
	КонецПопытки;
	
	Возврат СоединениеСЦентральнымСервером;
КонецФункции

Функция ПолучитьКластер(ОбъектСсылка, Соединение)
	КластерОбъектаКонтроля = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "КластерОбъектаКонтроля");
	ПортКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ПортКластера");
	АдресКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "АдресКластера");
	
	Кластеры = Соединение.GetClusters();
	НужныйКластер = Неопределено;
	Для Каждого Кластер Из Кластеры Цикл
		//Если Кластер.ClusterName = КластерОбъектаКонтроля И Кластер.MainPort = ПортКластера  И Кластер.HostName = АдресКластера Тогда
		//Если Кластер.MainPort = ПортКластера  И ВРег(Кластер.HostName) = ВРег(АдресКластера) Тогда
		// Приняли решение, что нужный кластер ищется именно по порту,
		// т.к. соединение идет с сервером (не важно, как указан сервер - localhost, ip или доменное имя)
		// на одном сервере не может быть разных кластеров на одном и том же порту
		Если Кластер.MainPort = ПортКластера Тогда
			НужныйКластер = Кластер;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НужныйКластер;
КонецФункции

Функция ПолучитьРабочиеСервераКластера(ОбъектСсылка)
	
	РабочиеСервераМассив = Новый Массив;
    
	ТипПодключения = ОбъектСсылка.Подключение.ТипПодключения;
    
	АдресКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "АдресКластера");
	ПортАгентаКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ПортАгентаКластера");
	АдресСервераАдминистрирования = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "АдресСервераАдминистрирования");
	ПортСервераАдминистрирования =  Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ПортСервераАдминистрирования");
	ПортКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ПортКластера");
	АдминистраторКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "АдминистраторКластера");
	ПарольАдминистратораКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ПарольАдминистратораКластера");
	ВерсияПлатформы = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ВерсияПлатформы");
	КаталогЗапускаСервераАдминистрирования = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "КаталогЗапускаСервераАдминистрирования"); 
	
	Если ТипПодключения = "COM" Тогда
		СоединениеСЦентральнымСервером = ПолучитьСоединение(ОбъектСсылка);
		НужныйКластер = ПолучитьКластер(ОбъектСсылка, СоединениеСЦентральнымСервером); 
		
		СоединениеСЦентральнымСервером.Authenticate(НужныйКластер, АдминистраторКластера, ПарольАдминистратораКластера);
		РабочиеСервера = СоединениеСЦентральнымСервером.GetWorkingServers(НужныйКластер);
		
		Для Каждого РабочийСервер Из РабочиеСервера Цикл
            
            РабочийСерверСтруктура = Новый Структура;
			РабочийСерверСтруктура.Вставить("Name", РабочийСервер["Name"]);
			РабочийСерверСтруктура.Вставить("HostName", РабочийСервер["HostName"]);
			РабочийСерверСтруктура.Вставить("MainServer", РабочийСервер["MainServer"]);
            РабочийСерверСтруктура.Вставить("PortRange", "0:0");
			РабочиеСервераМассив.Добавить(РабочийСерверСтруктура);	
            
		КонецЦикла;
		
    ИначеЕсли ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда
        
        АдминистрированиеСервера = Кластер_1С.АдминистрированиеСервера(ОбъектСсылка.Подключение);
        АдминистрированиеКластер = Кластер_1С.АдминистрированиеКластер(ТипПодключения, АдминистрированиеСервера, ОбъектСсылка.УникальныйИдентификаторОбъекта);
        Кластер_1С.АутентификацияКластера(ТипПодключения, АдминистрированиеКластер, АдминистраторКластера, ПарольАдминистратораКластера);
        РабочиеСервера = Кластер_1С.РабочиеСерверы(ТипПодключения, АдминистрированиеКластер);
        
		Для Каждого РабочийСервер Из РабочиеСервера Цикл
            
            РабочийСерверСтруктура = Новый Структура;
			РабочийСерверСтруктура.Вставить("Name", РабочийСервер["Компьютер"]);
			РабочийСерверСтруктура.Вставить("HostName",  РабочийСервер["Компьютер"]);
			РабочийСерверСтруктура.Вставить("MainServer", РабочийСервер["ЦентральныйСервер"]);
            //TODO ошибка 10196566 У объекта АдминистированиеРабочийСервер нет свойства
            //РабочийСерверСтруктура.Вставить("PortRange", РабочийСервер["port-range"]);
            РабочиеСервераМассив.Добавить(РабочийСерверСтруктура);	
            
        КонецЦикла;
        
	КонецЕсли;
	
	Возврат РабочиеСервераМассив;
	
КонецФункции

Функция ПолучитьБазыКластера(ОбъектСсылка)
    
    БазыКластераМассив = Новый Массив;
	
	ТипПодключения = ОбъектСсылка.Подключение.ТипПодключения;
    
	АдресКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "АдресКластера");
	ПортАгентаКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ПортАгентаКластера");
	АдресСервераАдминистрирования = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "АдресСервераАдминистрирования");
	ПортСервераАдминистрирования =  Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ПортСервераАдминистрирования");
	ПортКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ПортКластера");
	АдминистраторКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "АдминистраторКластера");
	ПарольАдминистратораКластера = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ПарольАдминистратораКластера");
	ВерсияПлатформы = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "ВерсияПлатформы");
	КаталогЗапускаСервераАдминистрирования = Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "КаталогЗапускаСервераАдминистрирования"); 
	
	Если ТипПодключения = "COM" Тогда 
		СоединениеСЦентральнымСервером = ПолучитьСоединение(ОбъектСсылка);
		НужныйКластер = ПолучитьКластер(ОбъектСсылка, СоединениеСЦентральнымСервером); 
		
		СоединениеСЦентральнымСервером.Authenticate(НужныйКластер, АдминистраторКластера, ПарольАдминистратораКластера);
		
		БазыКластера = СоединениеСЦентральнымСервером.GetInfoBases(НужныйКластер);
		
		Для Каждого БазаКластера Из БазыКластера Цикл
			БазаКластераСтруктура = Новый Структура;
			БазаКластераСтруктура.Вставить("Name", БазаКластера["Name"]);
			БазаКластераСтруктура.Вставить("Descr", БазаКластера["Descr"]);
			
			БазыКластераМассив.Добавить(БазаКластераСтруктура);
		КонецЦикла;
	ИначеЕсли ТипПодключения = Перечисления.ТипПодключенияКластер1С.RAS Тогда 
        
        АдминистрированиеСервера = Кластер_1С.АдминистрированиеСервера(ОбъектСсылка.Подключение);
        АдминистрированиеКластер = Кластер_1С.АдминистрированиеКластер(ТипПодключения, АдминистрированиеСервера, ОбъектСсылка.УникальныйИдентификаторОбъекта);
        Кластер_1С.АутентификацияКластера(ТипПодключения, АдминистрированиеКластер, АдминистраторКластера, ПарольАдминистратораКластера); 
        ИнформационныеБазы = Кластер_1С.ИнформационныеБазы(ТипПодключения, АдминистрированиеКластер);
  	
		Для Каждого БазаКластера Из ИнформационныеБазы Цикл
			БазаКластераСтруктура = Новый Структура;
			БазаКластераСтруктура.Вставить("Name", БазаКластера["Имя"]);
			БазаКластераСтруктура.Вставить("Descr", БазаКластера["Описание"]);
			
			БазыКластераМассив.Добавить(БазаКластераСтруктура);
        КонецЦикла;
        
	КонецЕсли;
	
	Возврат БазыКластераМассив;
	
КонецФункции

Функция ПолучитьВременныйКаталог(ОбъектСсылка)
	Если ОбъектСсылка.УникальныйИдентификатор() = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		ВременныйКаталог = КаталогВременныхФайлов() + Новый УникальныйИдентификатор() + ПолучитьРазделительПутиСервера();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыРабочихСерверов.КаталогВременный КАК КаталогВременный
		|ИЗ
		|	РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
		|ГДЕ
		|	ПараметрыРабочихСерверов.ОбъектКонтроля = &ОбъектКонтроля";
		
		Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектСсылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВременныйКаталог = Неопределено;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВременныйКаталог = ВыборкаДетальныеЗаписи.КаталогВременный;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВременныйКаталог;
КонецФункции

Функция ПолучитьСсылкуПоНаименованиюСлужебный(Наименование)
	Ссылка = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка
	|ИЗ
	|	Справочник.ОбъектыКонтроля
	|ГДЕ
	|	Наименование = &Наименование
	|";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

Функция СоздатьЭлементПоНаименованию(Наименование)
	ОбъектКонтроля = Справочники.ОбъектыКонтроля.СоздатьЭлемент();
	ОбъектКонтроля.Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза;
	ОбъектКонтроля.Наименование = Наименование;
	ОбъектКонтроля.Записать();
	
	Возврат ОбъектКонтроля.Ссылка;
КонецФункции

#КонецОбласти

#Область ПредопределенныеПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
    
    Если ВидФормы = "ФормаОбъекта" Тогда
        
        Если Параметры.Свойство("Ключ") Тогда
            
            Если Параметры.Ключ.Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С Тогда
                ВыбраннаяФорма = "ФормаКластер1С";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
                ВыбраннаяФорма = "ФормаРабочийСервер";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза Тогда
                ВыбраннаяФорма = "ФормаИнформационнаяБаза";
                СтандартнаяОбработка = Ложь;
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        Настройки = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(Объект.Ссылка);
        НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(Объект.Ссылка);
    Иначе
        Объект.Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер;
        Настройки = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.РабочийСервер);
        НастройкиКонтроля = Новый Соответствие;
    КонецЕсли;
    
    Если ЭтотОбъект.Параметры.Свойство("ЗначенияЗаполнения") И ЭтотОбъект.Параметры.ЗначенияЗаполнения.Свойство("Кластер1С") Тогда
        ЭтотОбъект.Кластер1С = ЭтотОбъект.Параметры.ЗначенияЗаполнения.Кластер1С;
    Иначе
        ЭтотОбъект.Кластер1С = Настройки.Кластер;
    КонецЕсли;
    
    ЗаполнитьПараметры(Настройки, НастройкиКонтроля);
    
    Если ЗначениеЗаполнено(ЭтотОбъект.Кластер1С) И ЭтотОбъект.Кластер1С.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        АгентОперативныйРежим(ЭтотОбъект.Кластер1С, Истина);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    
    ПараметрыРабочихСерверов = Новый Структура;
    ПараметрыРабочихСерверов.Вставить("Кластер", ЭтотОбъект.Кластер1С);
    ПараметрыРабочихСерверов.Вставить("Компьютер", ЭтотОбъект.Компьютер);
    ПараметрыЗаписи.Вставить("ПараметрыРабочихСерверов", ПараметрыРабочихСерверов);
    
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    ТекущийОбъект.ДополнительныеСвойства.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
    
    Настройки = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(ТекущийОбъект.Ссылка);
    НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(ТекущийОбъект.Ссылка);
    ПараметрыЗаписи.Вставить("НастройкиКонтроляБыли", НастройкиКонтроля);
    ПараметрыЗаписи.Вставить("НастройкиБыли", Настройки);
    
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    Кластер = ПараметрыЗаписи.ПараметрыРабочихСерверов.Кластер;
    
    Настройки = Новый Структура;
    Настройки.Вставить("Кластер", Кластер);
    Настройки.Вставить("Оборудование", ПараметрыЗаписи.ПараметрыРабочихСерверов.Компьютер);
    Настройки.Вставить("КаталогНастроекТЖСетевой", ЭтотОбъект.КаталогТЖСетевой); 
    Настройки.Вставить("КаталогНастроекТЖ", ЭтотОбъект.КаталогТЖЛокальный); 
    Настройки.Вставить("КаталогОбменаДаннымиСетевой", ЭтотОбъект.КаталогДанныхТЖСетевой); 
    Настройки.Вставить("КаталогОбменаДанными", ЭтотОбъект.КаталогДанныхТЖЛокальный); 
    
    НастройкиКонтроля = Новый Соответствие;
    
    Для Каждого ТекПараметр Из ЭтотОбъект.ПараметрыОбъекта Цикл
        
        Настройки.Вставить(ТекПараметр.Параметр, ТекПараметр.Значение);
        НастройкиКонтроля.Вставить(ТекПараметр.Параметр, ТекПараметр.Контроль);
                
    КонецЦикла;
    
    РегистрыСведений.ПараметрыРабочихСерверов.ЗаписатьНастройки(ТекущийОбъект.Ссылка, Настройки);
    РегистрыСведений.КонтрольПараметровОбъектов.ЗаписатьНастройки(ТекущийОбъект.Ссылка, НастройкиКонтроля);
    
    ЗаписатьКонтрольныеПроцедуры(ТекущийОбъект.Ссылка);
    
    Если НастройкиКонтроляИзменены(НастройкиКонтроля, ПараметрыЗаписи.НастройкиКонтроляБыли, Настройки, ПараметрыЗаписи.НастройкиБыли) Тогда
        
        Команда = Новый Соответствие;
        Команда.Вставить("cluster", Кластер.УникальныйИдентификаторОбъекта);
        
        РабочийСерверСоответствие = Новый Соответствие;
        РабочийСерверСоответствие.Вставить("workingServer", Объект.УникальныйИдентификаторОбъекта);
        РабочийСерверСоответствие.Вставить("сontrolParametrs", АгентКИПвЦКК.КомандаНастройкиКонтроляРабочийСервер(НастройкиКонтроля, Настройки)); 
        Команда.Вставить("workingServerCommand", РабочийСерверСоответствие);
                
        Для Каждого АгентКИП Из Кластер.Подключение.АгентКИППараметры Цикл
            РегистрыСведений.КомандыАгентаКИП.ДобавитьКоманду(АгентКИП.АгентКИП, Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
        КонецЦикла;
                
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
    
    Если НЕ ЗавершениеРаботы Тогда
        АгентОперативныйРежим(ЭтотОбъект.Кластер1С, Ложь);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьПараметры(Команда)
    
    ПараметрыРабочегоСервера = ПолучитьПараметрыНаСервере();
    
    Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
        
        Объект.Наименование = ПараметрыРабочегоСервера["КомпьютерХост"] + " (" + ПараметрыРабочегоСервера["ДиапазоныПортов"] + ")";
        
    КонецЕсли;
        
    Для Каждого ТекПараметр Из ЭтотОбъект.ПараметрыОбъекта Цикл
        
        ТекПараметр.Значение = ПараметрыРабочегоСервера[ТекПараметр.Параметр];
                        
    КонецЦикла;
    
    Модифицированность = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеПараметры(Команда)
    
    Для Каждого ТекСтрока Из ЭтотОбъект.ПараметрыОбъекта Цикл
        ТекСтрока.Контроль = Истина;
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеПараметры(Команда)
    
    Для Каждого ТекСтрока Из ЭтотОбъект.ПараметрыОбъекта Цикл
        ТекСтрока.Контроль = Ложь;
    КонецЦикла;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КомпьютерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаКомпьютерНачалоВыбораЗавершение", ЭтотОбъект, Элемент.Имя);
    
    ПараметрыОткрытия = Новый Структура("ПлощадкаЭксплуатации", Объект.ПлощадкаЭксплуатации);
	ОткрытьФорму("Справочник.Оборудование.Форма.ФормаВыбораОборудованияПлощадки",ПараметрыОткрытия,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	СтандартнаяОбработка = Ложь;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбъектаПриАктивизацииСтроки(Элемент)
    
    ТекДанные = Элемент.ТекущиеДанные;
            
    Если
        ТекДанные.Параметр = "ОписаниеСервера"
        ИЛИ ТекДанные.Параметр = "IPПорт"
        ИЛИ ТекДанные.Параметр = "ПортГлавногоМенеджераКластера"
    Тогда
        Элементы.ПараметрыОбъектаЗначение.ТолькоПросмотр = Истина;
    Иначе
        Элементы.ПараметрыОбъектаЗначение.ТолькоПросмотр = Ложь;
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура АгентОперативныйРежим(Ссылка, ОперативныйРежим)
    
    Справочники.ОбъектыКонтроля.АгентОперативныйРежим(Ссылка, ОперативныйРежим);
        
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(Настройки, НастройкиКонтроля)
    
    ЭтотОбъект.Компьютер = Настройки.Оборудование;
    
    ЭтотОбъект.КаталогТЖСетевой = Настройки.КаталогНастроекТЖСетевой;
    ЭтотОбъект.КаталогТЖЛокальный = Настройки.КаталогНастроекТЖ;
    ЭтотОбъект.КаталогДанныхТЖСетевой = Настройки.КаталогОбменаДаннымиСетевой;
    ЭтотОбъект.КаталогДанныхТЖЛокальный = Настройки.КаталогОбменаДанными;
    
    ДобавитьПараметр("ОписаниеСервера", "Описание сервера", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("IPПорт", "IP Порт", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("ДиапазоныПортов", "Диапазоны IP портов", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("МаксимальныйОбъемПамятиРабочихПроцессов", "Максимальный объем памяти рабочих процессов", Настройки, НастройкиКонтроля, "байт");
    ДобавитьПараметр("БезопасныйРасходПамятиЗаОдинВызов", "Безопасный расход памяти за один вызов", Настройки, НастройкиКонтроля, "байт");
    ДобавитьПараметр("ОбъемПамятиРабочихПроцессовДоКоторогоСерверСчитаетсяПроизводительным", "Объем памяти рабочих процессов, до которого сервер считается производительным", Настройки, НастройкиКонтроля, "байт");
    ДобавитьПараметр("КоличествоИбНаПроцесс", "Количество ИБ на процесс", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("КоличествоСоединенийНаПроцесс", "Количество соединений на процесс", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("ПортГлавногоМенеджераКластера", "Порт главного мендежера кластера", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("МенеджерНаКаждыйСервис", "Менеджер на каждый сервис", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("ЦентральныйСервер", "Центральный сервер", Настройки, НастройкиКонтроля);
    
КонецПроцедуры

&НаСервере
Функция ДобавитьПараметр(Параметр, Представление, Настройки, НастройкиКонтроля, Постфикс = Неопределено, ЗначениеПоУмолчанию = Неопределено)
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = Параметр;
    НовСтрока.Представление = Представление;
    НовСтрока.Значение = Кластер_1СКлиентСервер.ПредставлениеПараметра(Параметр, Настройки[Параметр]);
    НовСтрока.Постфикс = Постфикс;
    
    Если НЕ ЗначениеЗаполнено(НовСтрока.Постфикс) Тогда
        ЭтотОбъект.УсловноеОформление.Элементы[0].Отбор.Элементы[0].ПравоеЗначение.Добавить(Параметр);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(НастройкиКонтроля[Параметр]) Тогда
        НовСтрока.Контроль = НастройкиКонтроля[Параметр];
    КонецЕсли;
        
    Возврат НовСтрока;
    
КонецФункции

&НаКлиенте
Процедура ОбработкаКомпьютерНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
        ЭтотОбъект.Компьютер = РезультатЗакрытия;
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыНаСервере()
    
    Подключение = ЭтотОбъект.Кластер1С.Подключение;
    НастройкиКластера = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(ЭтотОбъект.Кластер1С);
    
    АдминистрированиеСервера = Кластер_1С.АдминистрированиеСервера(Подключение);
    
    УникальныйИдентификаторКластера = ЭтотОбъект.Кластер1С.УникальныйИдентификаторОбъекта; 
    Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Кластер1С.УникальныйИдентификаторОбъекта) Тогда
        УникальныйИдентификаторКластера = Кластер_1С.УникальныйИдентификаторКластера(Подключение.ТипПодключения, АдминистрированиеСервера, НастройкиКластера.ПортКластера);
    КонецЕсли;
    
    АдминистрированиеКластер = Кластер_1С.АдминистрированиеКластер(Подключение.ТипПодключения, АдминистрированиеСервера, УникальныйИдентификаторКластера);
    
    Кластер_1С.АутентификацияКластера(Подключение.ТипПодключения, АдминистрированиеКластер, НастройкиКластера.АдминистраторКластера, НастройкиКластера.ПарольАдминистратораКластера);
    
    Если НЕ ЗначениеЗаполнено(Объект.УникальныйИдентификаторОбъекта) Тогда
        Объект.УникальныйИдентификаторОбъекта = Кластер_1С.УникальныйИдентификаторРабочегоСервера(Подключение.ТипПодключения, АдминистрированиеКластер, ЭтотОбъект.Компьютер.Хост);
        Модифицированность = Истина;
    КонецЕсли;
        
    АдминистрированиеРабочийСервер = Кластер_1С.АдминистрированиеРабочийСервер(Подключение.ТипПодключения, АдминистрированиеКластер, Объект.УникальныйИдентификаторОбъекта);
    СвойстваРабочегоСервера = Кластер_1С.СвойстваРабочийСервер(Подключение.ТипПодключения, АдминистрированиеРабочийСервер, Истина);
            
    Возврат СвойстваРабочегоСервера;
    
КонецФункции

&НаСервере
Процедура ЗаписатьКонтрольныеПроцедуры(Ссылка)
    
    АнализВызововКластера1С = Справочники.ВидыКонтрольныхПроцедур.АнализВызововКластера1С();
    Если НЕ ЗначениеЗаполнено(Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(Ссылка, АнализВызововКластера1С)) Тогда
        НаименованиеКП = Строка(АнализВызововКластера1С) + " для " + Строка(Объект.Наименование);
        ЗаписатьАнализВызововКластера1С(Ссылка, НаименованиеКП, АнализВызововКластера1С);
    КонецЕсли;
    
    КонтрольУстойчивостиСистемы = Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы();
    Если НЕ ЗначениеЗаполнено(Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(Ссылка, КонтрольУстойчивостиСистемы)) Тогда
        НаименованиеКП = Строка(КонтрольУстойчивостиСистемы) + " для " + Строка(Объект.Наименование);
        ЗаписатьКонтрольУстойчивостиСистемы(Ссылка, НаименованиеКП, КонтрольУстойчивостиСистемы);
    КонецЕсли;
    
    МониторингСистемныхОшибок = Справочники.ВидыКонтрольныхПроцедур.МониторингСистемныхОшибок();
    Если НЕ ЗначениеЗаполнено(Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(Ссылка, МониторингСистемныхОшибок)) Тогда
        НаименованиеКП = Строка(МониторингСистемныхОшибок) + " для " + Строка(Объект.Наименование);
        ЗаписатьМониторингСистемныхОшибок(Ссылка, НаименованиеКП, МониторингСистемныхОшибок);
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Процедура ЗаписатьАнализВызововКластера1С(Ссылка, Наименование, ВидКонтрольнойПроцедуры)
    
    НастройкиПоУмолчаниюРабочийСервер = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.РабочийСервер);
    НастройкиПоУмолчанию = РегистрыСведений.НастройкиАнализВызововКластера1С.ПрочитатьНастройки(ВидКонтрольнойПроцедуры);
    
    ПараметрыСоздания = Новый Структура;
    ПараметрыСоздания.Вставить("Наименование", Наименование);
    ПараметрыСоздания.Вставить("ОбъектКонтроля", Ссылка);
     ПараметрыСоздания.Вставить("КаталогВременныхФайлов", НастройкиПоУмолчаниюРабочийСервер.КаталогВременный);
    ПараметрыСоздания.Вставить("КаталогТЖЛокальный", НастройкиПоУмолчаниюРабочийСервер.КаталогНастроекТЖСетевой);
    ПараметрыСоздания.Вставить("КаталогТЖСетевой", НастройкиПоУмолчаниюРабочийСервер.КаталогНастроекТЖ);
    ПараметрыСоздания.Вставить("ДлительностьХраненияФайловТЖ", НастройкиПоУмолчанию.ДлительностьХраненияФайловТЖ);
    ПараметрыСоздания.Вставить("СрокХраненияТЖ", НастройкиПоУмолчанию.СрокХраненияТЖ);
    ПараметрыСоздания.Вставить("АвтоматическиУдалятьЗаписиТЖ", НастройкиПоУмолчанию.АвтоматическиУдалятьЗаписиТЖ);
    
    Расписание = НастройкиПоУмолчанию.Расписание;
    Если Расписание <> Неопределено Тогда
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", Расписание.ПериодПовтораДней, Расписание.ПериодПовтораВТечениеДня);
    Иначе
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 600);
    КонецЕсли;
    
    ПараметрыСоздания.Вставить("Расписание", РасписаниеПараметры);
    
    КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлементАнализВызововКластера1С(ПараметрыСоздания);
    
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтрольУстойчивостиСистемы(Ссылка, Наименование, ВидКонтрольнойПроцедуры)
    
    КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
	КонтрольнаяПроцедура.СоздатьПоУмолчаниюКонтрольУстойчивостиСистемы(
	    ВидКонтрольнойПроцедуры,
		Истина,
		Ссылка,
		Ложь,
		Наименование,
		"",
		"",
		"",
		"",
		"");
                    
КонецПроцедуры

&НаСервере
Процедура ЗаписатьМониторингСистемныхОшибок(Ссылка, Наименование, ВидКонтрольнойПроцедуры)
    
    НастройкиПоУмолчаниюРабочийСервер = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.РабочийСервер);
    НастройкиПоУмолчанию = РегистрыСведений.НастройкиКонтрольЧислаИсключений.ПрочитатьНастройки(ВидКонтрольнойПроцедуры);
    
    ПараметрыСоздания = Новый Структура;
    ПараметрыСоздания.Вставить("Наименование", Наименование);
    ПараметрыСоздания.Вставить("ОбъектКонтроля", Ссылка);
    ПараметрыСоздания.Вставить("КаталогВременныхФайлов", НастройкиПоУмолчаниюРабочийСервер.КаталогВременный);
    ПараметрыСоздания.Вставить("КаталогТЖЛокальный", НастройкиПоУмолчаниюРабочийСервер.КаталогНастроекТЖСетевой);
    ПараметрыСоздания.Вставить("КаталогТЖСетевой", НастройкиПоУмолчаниюРабочийСервер.КаталогНастроекТЖ);
    ПараметрыСоздания.Вставить("ДлительностьХраненияФайловТЖ", НастройкиПоУмолчанию.ДлительностьХраненияФайловТЖ);
    ПараметрыСоздания.Вставить("СрокХраненияТЖ", НастройкиПоУмолчанию.СрокХраненияТЖ);
    ПараметрыСоздания.Вставить("АвтоматическиУдалятьЗаписиТЖ", НастройкиПоУмолчанию.АвтоматическиУдалятьЗаписиТЖ);
    
    Расписание = НастройкиПоУмолчанию.Расписание;
    Если Расписание <> Неопределено Тогда
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", Расписание.ПериодПовтораДней, Расписание.ПериодПовтораВТечениеДня);
    Иначе
        РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 600);
    КонецЕсли;
    
    ПараметрыСоздания.Вставить("Расписание", РасписаниеПараметры);
    
    КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлементМониторингСистемныхОшибок(ПараметрыСоздания);
    
КонецПроцедуры

&НаСервере
Функция НастройкиКонтроляИзменены(НастройкиКонтроля, БылиНастройкиКонтроля, Настройки, НастройкиБыли)
    
    ЕстьИзменение = Ложь;
    
    Если НастройкиКонтроля.Количество() <> БылиНастройкиКонтроля.Количество() Тогда
        ЕстьИзменение = Истина;
    Иначе
        Для Каждого Настройка Из НастройкиКонтроля Цикл
            Если Настройка.Значение <> БылиНастройкиКонтроля[Настройка.Ключ] ИЛИ Настройки[Настройка.Ключ] <> НастройкиБыли[Настройка.Ключ] Тогда
                ЕстьИзменение = Истина;
                Прервать
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
    Возврат ЕстьИзменение;
    
КонецФункции

#КонецОбласти

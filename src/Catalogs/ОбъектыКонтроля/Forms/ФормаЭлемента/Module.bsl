&НаКлиенте
Перем ОбновитьРекомендации, ПараметрыЗаписиСтруктурыКластера, ЗакрытьПослеОбновленияСтруктурыКластера, ЗаписатьСтруктуруКластера;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    ЭтотОбъект.РазделительПути = ПолучитьРазделительПутиСервера();
    ЭтотОбъект.Корзина = Справочники.ПлощадкиЭксплуатации.Корзина();
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТипПлатформыСервер = Строка(СистемнаяИнформация.ТипПлатформы);
	
	Если (ЭтотОбъект.Параметры.Свойство("ВладелецПриОткрытии") И ЭтотОбъект.Параметры.ВладелецПриОткрытии = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С) ИЛИ Объект.Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С Тогда
        
        ПриСозданииНаСервереКластер1С();
        ЭтотОбъект.Заголовок = "Кластер 1С";
		ЭтотОбъект.Элементы.СтраницаНастройкиКластер1С.Видимость = Истина;
        ЭтотОбъект.Элементы.СтраницаСтруктураКластера.Видимость = Истина;
		ЭтотОбъект.Элементы.СтраницаНастройкиРабочийСервер.Видимость = Ложь;
		ЭтотОбъект.Элементы.СтраницаНастройкиИнформационнаяБаза.Видимость = Ложь;
		ЭтотОбъект.Элементы.СтраницаНастройки.Видимость = Ложь;
        ЭтотОбъект.Элементы.ФормаЗаписатьИЗакрытьМоя.Видимость = Истина;
        ЭтотОбъект.Элементы.ФормаЗаписатьИЗакрытьМоя.КнопкаПоУмолчанию = Истина;
        ЭтотОбъект.Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
        
        Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
            Объект.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
        КонецЕсли;
                
	ИначеЕсли (ЭтотОбъект.Параметры.Свойство("ВладелецПриОткрытии") И ЭтотОбъект.Параметры.ВладелецПриОткрытии = Справочники.ВидыОбъектовКонтроля.РабочийСервер) ИЛИ Объект.Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
        
        ПриСозданииНаСервереРабочийСервер();
        ЭтотОбъект.Заголовок = "Рабочий сервер 1С";
		ЭтотОбъект.Элементы.СтраницаНастройкиКластер1С.Видимость = Ложь;
        ЭтотОбъект.Элементы.СтраницаСтруктураКластера.Видимость = Ложь;
		ЭтотОбъект.Элементы.СтраницаНастройкиРабочийСервер.Видимость = Истина;
		ЭтотОбъект.Элементы.СтраницаНастройкиИнформационнаяБаза.Видимость = Ложь;
		ЭтотОбъект.Элементы.СтраницаНастройки.Видимость = Ложь;
        
        Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
            Объект.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
        КонецЕсли;
        
	ИначеЕсли (ЭтотОбъект.Параметры.Свойство("ВладелецПриОткрытии") И ЭтотОбъект.Параметры.ВладелецПриОткрытии = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза) ИЛИ Объект.Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза Тогда
        
        ПриСозданииНаСервереИнформационнаяБаза();
        ЭтотОбъект.Заголовок = "Информационная база";
		ЭтотОбъект.Элементы.СтраницаНастройкиКластер1С.Видимость = Ложь;
        ЭтотОбъект.Элементы.СтраницаСтруктураКластера.Видимость = Ложь;
		ЭтотОбъект.Элементы.СтраницаНастройкиРабочийСервер.Видимость = Ложь;
		ЭтотОбъект.Элементы.СтраницаНастройкиИнформационнаяБаза.Видимость = Истина;
		ЭтотОбъект.Элементы.СтраницаНастройки.Видимость = Ложь;
        ЭтотОбъект.Элементы.ФормаПроверитьДоступ.Видимость = Ложь;        
        
        Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
            Объект.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
        КонецЕсли;
        
    Иначе
        
		ЭтотОбъект.Элементы.СтраницаНастройкиКластер1С.Видимость = Ложь;
		ЭтотОбъект.Элементы.СтраницаНастройкиРабочийСервер.Видимость = Ложь;
		ЭтотОбъект.Элементы.СтраницаНастройкиИнформационнаяБаза.Видимость = Ложь;
		ЭтотОбъект.Элементы.СтраницаНастройки.Видимость = Истина;
        
        Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
            Объект.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
        КонецЕсли;
        
	КонецЕсли;
    
    Если Объект.ПлощадкаЭксплуатации.ПометкаУдаления ИЛИ Объект.ПлощадкаЭксплуатации = Справочники.ПлощадкиЭксплуатации.Корзина() Тогда
        ЭтотОбъект.ТолькоПросмотр = Истина;
        ЭтотОбъект.Элементы.СтраницаКонтрольныеПроцедуры.ТолькоПросмотр = Истина;
        ЭтотОбъект.Элементы.ВыставитьНастройкиПоУмолчанию.Доступность = Ложь;
        ЭтотОбъект.Элементы.ФормаЗаписатьНастройкиПоУмолчанию.Доступность = Ложь;
        ЭтотОбъект.Элементы.ФормаПроверитьДоступ.Доступность = Ложь;
    КонецЕсли;
                
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    Если Объект.Владелец = ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.КластерСерверов1С") Тогда
        
        ЗакрытьПослеОбновленияСтруктурыКластера = Ложь;
        ЗаписатьСтруктуруКластера = Ложь;
        
        Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
            
            Элементы.СтруктураКластераОбновитьСтруктуруКластера.Доступность = Ложь;
            Элементы.СтруктураКластераЗаписатьСтруктуру.Доступность = Ложь;
                
            Если ИдетЗаписьСтруктурыКластера Тогда
                
                Элементы.ЛегендаДерева.Видимость = Ложь;
                Элементы.ГруппаСостояниеЗаписиСтруктурыКластера.Видимость = Истина;
                
                ПараметрыЗаписиСтруктурыКластера = Новый Структура("КлючОбъекта, КлючНастроек, Пользователь", "378e4dc6-5457-4c70-8011-a221d6eb9d09", Строка(Объект.Ссылка), "DefUser");
                
                Корень = ЭтотОбъект.СтруктураКластера.ПолучитьЭлементы();
                Корень.Очистить();
                Кластер1С = Корень.Добавить();
                Кластер1С.ИндексКартинки = 18;
                Кластер1С.Наименование = "Запись структуры кластера...";
                
                ПодключитьОбработчикОжидания("ЗаписатьСтруктуруКластераЗавершение", 1, Истина);
                
            Иначе
                
                Элементы.ЛегендаДерева.Видимость = Истина;
                Элементы.ГруппаСостояниеЗаписиСтруктурыКластера.Видимость = Ложь;
                
                ПодключитьОбработчикОжидания("СтруктураКластераЗавершение", 1 ,Истина);
                
            КонецЕсли;
            
        КонецЕсли;
        
	ИначеЕсли Объект.Владелец = ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.РабочийСервер") Тогда
	ИначеЕсли Объект.Владелец = ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.ИнформационнаяБаза") Тогда
	Иначе
		ПриОткрытииСервер(Отказ);
		ЭлТипПодключения = ЭтотОбъект.Элементы.Найти("ТипПодключения");
		Если ЭлТипПодключения <> Неопределено Тогда 
			ИзменитьДоступностьЭлементовДляКластера(ЭтотОбъект.ТипПодключения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.НастройкаВыполнена = Истина;
	
	Если Объект.Владелец = ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.КластерСерверов1С") Тогда
        
        Если ЗначениеЗаполнено(Объект.Ссылка) ИЛИ (ПараметрыЗаписи.Свойство("НеПроверятьЗаполнениеСтруктурыКластера") И ПараметрыЗаписи.НеПроверятьЗаполнениеСтруктурыКластера) Тогда
            ПараметрыЗаписи.Вставить("ПараметрыКластеров", ПараметрыКластеров());
        Иначе
            ЗадатьВопросЗаполнитьСтруктуруКластера(ПараметрыЗаписи);
            Отказ = Истина;
        КонецЕсли;
        
    ИначеЕсли Объект.Владелец = ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.РабочийСервер") Тогда
        
        ЭтотОбъект.НаименованиеНового = Объект.Наименование;
        
        ПараметрыРабочихСерверов = Новый Структура;
		ПараметрыРабочихСерверов.Вставить("Кластер", ЭтотОбъект.Кластер1СРабочийСервер);
		ПараметрыРабочихСерверов.Вставить("Оборудование", ЭтотОбъект.Оборудование);
		ПараметрыРабочихСерверов.Вставить("КаталогНастроекТЖ", ЭтотОбъект.КаталогНастроекТЖРабочийСервер);
		ПараметрыРабочихСерверов.Вставить("КаталогНастроекТЖСетевой", ЭтотОбъект.КаталогНастроекТЖСетевойРабочийСервер);
		ПараметрыРабочихСерверов.Вставить("КаталогВременный", ЭтотОбъект.КаталогВременныйРабочийСервер);
		ПараметрыРабочихСерверов.Вставить("КаталогОбменаДаннымиСетевой", ЭтотОбъект.КаталогОбменаДаннымиСетевойРабочийСервер);
		ПараметрыРабочихСерверов.Вставить("КаталогОбменаДанными", ЭтотОбъект.КаталогОбменаДаннымиРабочийСервер);
        ПараметрыРабочихСерверов.Вставить("ДиапазонПортовОт", ЭтотОбъект.ДиапазонПортовОтРабочийСервер);
        ПараметрыРабочихСерверов.Вставить("ДиапазонПортовДо", ЭтотОбъект.ДиапазонПортовДоРабочийСервер);
		
		ПараметрыЗаписи.Вставить("ПараметрыРабочихСерверов", ПараметрыРабочихСерверов);
	ИначеЕсли Объект.Владелец = ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.ИнформационнаяБаза") Тогда
		ПараметрыИнформационнойБазы = Новый Структура;
		ПараметрыИнформационнойБазы.Вставить("Кластер", ЭтотОбъект.Кластер1СИнформационнаяБаза);
		ПараметрыИнформационнойБазы.Вставить("ИмяБазыВКластере", ЭтотОбъект.ИмяБазыВКластереИнформационнаяБаза);
		ПараметрыИнформационнойБазы.Вставить("ЧислоПользователей", ЭтотОбъект.ЧислоПользователейИнформационнаяБаза);
		ПараметрыИнформационнойБазы.Вставить("КаталогЖурналРегистрации", ЭтотОбъект.КаталогЖурналаРегистрацииИнформационнаяБаза);
		
		ПараметрыЗаписи.Вставить("ПараметрыИнформационнойБазы", ПараметрыИнформационнойБазы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    Если НЕ Объект.Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С Тогда
        ТекущийОбъект.ДополнительныеСвойства.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросЗаполнитьСтруктуруКластера(ПараметрыЗаписи)
    
    ОписаниеОповещения = Новый ОписаниеОповещения("ЗадатьВопросЗаполнитьСтруктуруКластераЗавершение", ЭтотОбъект, ПараметрыЗаписи);
    ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Не заполнена структура кластера. Заполнить?'"), РежимДиалогаВопрос.ДаНет);
    
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросЗаполнитьСтруктуруКластераЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        Записать(Новый Структура("НеПроверятьЗаполнениеСтруктурыКластера", Истина));
        ЗаписатьСтруктуруКластера = Истина;
        Если ДополнительныеПараметры.Свойство("Закрыть") И ДополнительныеПараметры.Закрыть Тогда
            ЗакрытьПослеОбновленияСтруктурыКластера = Истина;
        Иначе
            ЗакрытьПослеОбновленияСтруктурыКластера = Ложь;
        КонецЕсли;
        ОбновитьСтруктуруКластераОбщая();
        ЭтотОбъект.Элементы.СтраницыФормы.ТекущаяСтраница = ЭтотОбъект.Элементы.СтраницаСтруктураКластера;
        
    Иначе
        
        ЗаписатьСтруктуруКластера = Ложь;
        Записать(Новый Структура("НеПроверятьЗаполнениеСтруктурыКластера", Истина));
        Если ДополнительныеПараметры.Свойство("Закрыть") И ДополнительныеПараметры.Закрыть Тогда
            Закрыть();
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С Тогда
        
        ПриЗаписиНаСервереКластер1С(ТекущийОбъект, ПараметрыЗаписи);
		ОбновитьКонтрольныеПроцедуры(ТекущийОбъект.Ссылка);
        
    ИначеЕсли Объект.Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
        
		ПриЗаписиНаСервереРабочийСервер(ТекущийОбъект, ПараметрыЗаписи);
		ОбновитьКонтрольныеПроцедуры(ТекущийОбъект.Ссылка);
        
	ИначеЕсли Объект.Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза Тогда
        
        ПриЗаписиНаСервереИнформационнаяБаза(ТекущийОбъект, ПараметрыЗаписи);
		ОбновитьКонтрольныеПроцедуры(ТекущийОбъект.Ссылка);
        
	Иначе
        
        НастройкиСервер.РазобратьИСохранитьДинамическиеНастройки(ТекущийОбъект.Ссылка, ЭтотОбъект, "ДинамическиеНастройкиГруппа");
		ЗаполнитьРабочиеСервера(ТекущийОбъект.Ссылка);
		ОбновитьКонтрольныеПроцедуры(ТекущийОбъект.Ссылка);	
		Если ЭтотОбъект.ВидОбъектаКонтроля = "РабочийСервер" Тогда
			СоздатьЛокальныйКаталогВременныхФайловНаСервере(ЭтотОбъект.КаталогВременный);
        КонецЕсли;	
        
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОповеститьОбИзменениях();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С Тогда
        
        ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("Объект");
                
    ИначеЕсли Объект.Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза Тогда
        
        ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("Объект");
        ПроверяемыеРеквизиты.Добавить("Кластер1СИнформационнаяБаза");
        
        Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Кластер1СИнформационнаяБаза.ПлощадкаЭксплуатации) Тогда
            Отказ = Истина;
            ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("У кластера 1С не заполнена площадка эксплуатации!", "Кластер1СИнформационнаяБаза", Объект); 
        КонецЕсли;
        
    ИначеЕсли Объект.Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер Тогда
        
        ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("Объект");
        ПроверяемыеРеквизиты.Добавить("Кластер1СРабочийСервер");
        ПроверяемыеРеквизиты.Добавить("Оборудование");
        
        Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Кластер1СРабочийСервер.ПлощадкаЭксплуатации) Тогда
            Отказ = Истина;
            ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("У кластера 1С не заполнена площадка эксплуатации!", "Кластер1СРабочийСервер", Объект); 
        КонецЕсли;
        
	ИначеЕсли Объект.Владелец = Справочники.ВидыОбъектовКонтроля.ЦентрКонтроляКачества Тогда
        
        ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("Объект");
        
	КонецЕсли;
		
	ИменаОбязательныхРеквизитов = РеквизитФормыВЗначение("ИменаОбязательныхДинамическихНастроек");
	Для Каждого СтрокаТаблицы Из ИменаОбязательныхРеквизитов Цикл
		ПроверяемыеРеквизиты.Добавить(СтрокаТаблицы.ИмяРеквизита);
	КонецЦикла;	
	
	НомерСтроки = 0;
	Для Каждого СтрокаДанных Из КонтрольныеПроцедуры Цикл
		
		Ответственный = СтрокаДанных.ОтветственныйЗаНастройку;		
		Если Ответственный.Пустая() Тогда
			Отказ = Истина;
			
			ОбщийКлиентСервер.СгенерироватьСообщениеПользователю(
				"Необходимо выбрать ответственного за настройку контрольной процедуры!",
				"КонтрольныеПроцедуры[" + НомерСтроки  +"].ОтветственныйЗаНастройку",
				Объект
			);
         
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыставитьНастройкиПоУмолчанию(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = НСтр("ru = 'Текущие настройки будут удалены! Продолжить выполнение операции?';en = 'Do you want to continue?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыставитьНастройкиПоУмолчаниюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступ(Команда)
    
    Если Объект.Владелец = ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.РабочийСервер") Тогда
        ПроверитьДоступРабочегоСервера();
    ИначеЕсли Объект.Владелец = ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.КластерСерверов1С") Тогда
        ПараметрыКластера = ПараметрыКластеров();
        Результат = ПроверитьНастройкиКластер1С(ПараметрыКластера);
        
        Если Результат.РезультатВыполнения Тогда
            ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Тест прошел успешно!", "ФормаПроверитьДоступ", Объект); 
        Иначе
            ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Ошибка!" + Символы.ПС + Результат.ОписаниеОшибки, "ФормаПроверитьДоступ", Объект); 
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиПоУмолчанию(Команда)
    
    Если Объект.Владелец = ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.КластерСерверов1С") Тогда
        ПараметрыКластеров = ПараметрыКластеров();
        ЗаписатьНастройкиПоУмолчаниюКластер1С(ПараметрыКластеров);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСтруктуру(Команда)
    
    Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
        
        ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьСтруктуруЗавершение", ЭтотОбъект);
        ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать изменения. 
        |Продолжить?'");
        ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);
        
    Иначе
        
        ЗаписатьСтруктуруОбщая();
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСтруктуруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Записать();
        ЗаписатьСтруктуруОбщая();
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСтруктуруОбщая()
    
    Элементы.ЛегендаДерева.Видимость = Ложь;
    Элементы.ГруппаСостояниеЗаписиСтруктурыКластера.Видимость = Истина;
    
    Элементы.СтруктураКластераОбновитьСтруктуруКластера.Доступность = Ложь;
    Элементы.СтруктураКластераЗаписатьСтруктуру.Доступность = Ложь;
    
    ПараметрыЗаписиСтруктурыКластера = Новый Структура("КлючОбъекта, КлючНастроек, Пользователь", "378e4dc6-5457-4c70-8011-a221d6eb9d09", Строка(Объект.Ссылка), "DefUser");
    
    ЗаписатьСтруктуруНаСервере(ПараметрыЗаписиСтруктурыКластера);
    
    Корень = ЭтотОбъект.СтруктураКластера.ПолучитьЭлементы();
    Корень.Очистить();
    Кластер1С = Корень.Добавить();
    Кластер1С.ИндексКартинки = 18;
    Кластер1С.Наименование = "Запись структуры кластера...";
        
    ПодключитьОбработчикОжидания("ЗаписатьСтруктуруКластераЗавершение", 1, Истина);
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтруктураКластераРедактироватьПриИзменении(Элемент)
    
    ТекущийЭлементДерева = Элемент.Родитель.ТекущиеДанные;
    Если ТекущийЭлементДерева.Редактировать = 2 Тогда
        ТекущийЭлементДерева.Редактировать = 0;
    КонецЕсли;
    
    УстановитьФлагРедактироватьПодчиненным(ТекущийЭлементДерева, ТекущийЭлементДерева.Редактировать);
    УстановитьФлагРедактироватьРодителю(ТекущийЭлементДерева, ТекущийЭлементДерева.Редактировать);
    
КонецПроцедуры

&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ОбновитьРекомендации <> Истина И ТекущаяСтраница = ЭтотОбъект.Элементы.Рекомендации Тогда
		ОбновитьРекомендации();
		ОбновитьРекомендации = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПодключенияКластер1СПриИзменении(Элемент)
	Если ЭтотОбъект.ТипПодключенияКластер1С = "RAS" Тогда
		ЭтотОбъект.Элементы.ГруппаНастройкиRAS.Видимость = Истина;
		ЭтотОбъект.Элементы.ГруппаНастройкиCOM.Видимость = Ложь;
	ИначеЕсли ЭтотОбъект.ТипПодключенияКластер1С = "COM" Тогда
		ЭтотОбъект.Элементы.ГруппаНастройкиRAS.Видимость = Ложь;
		ЭтотОбъект.Элементы.ГруппаНастройкиCOM.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КаталогЗапускаКлиентаАдминистрированияКластер1СНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещениеЗавершение = Новый ОписаниеОповещения("ОбработкаНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
	ОбщийКлиент.ВыбратьКаталог(ЭтотОбъект[Элемент.Имя], ОписаниеОповещениеЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНачалоВыбораКластераДляСервера(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
    ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаНачалоВыбораКластераДляСервераЗавершение", ЭтотОбъект, Элемент.Имя);
    ПараметрыОткрытия = Новый Структура("ПлощадкаЭксплуатации", Объект.ПлощадкаЭксплуатации);
    ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаВыбораКластера", ПараметрыОткрытия,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    	
    СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    //РабочиеСервера1С = ПолучитьРабочиеСервера(Кластер1СРабочийСервер);
    
    ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаНачалоВыбораОборудованияРабочегоСервераЗавершение", ЭтотОбъект, Элемент.Имя);
    
    ПараметрыОткрытия = Новый Структура("ПлощадкаЭксплуатации", Объект.ПлощадкаЭксплуатации);
	ОткрытьФорму("Справочник.Оборудование.Форма.ФормаВыбораОборудованияПлощадки",ПараметрыОткрытия,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	СтандартнаяОбработка = Ложь;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИнформационныеБазы(Ссылка, ПлощадкаЭксплуатации, ИнформационныеБазы)
    
    ТЗнБуфер = Новый ТаблицаЗначений();
    ТЗнБуфер.Колонки.Добавить("ИндексМассива", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0)));
    ТЗнБуфер.Колонки.ДОбавить("ИнформационнаяБаза", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
    ТЗнБуфер.Колонки.Добавить("КоличествоОдинаковых", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0)));
    
    Для ИндексМассива = 0 По ИнформационныеБазы.ВГраница() Цикл
        
        НовСтрока = ТЗнБуфер.Добавить();
        НовСтрока.ИндексМассива = ИндексМассива;
        НовСтрока.ИнформационнаяБаза = ИнформационныеБазы[ИндексМассива]["Name"];
        НовСтрока.КоличествоОдинаковых = 1;
        
    КонецЦикла;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ИндексМассива,
    |   ИнформационнаяБаза,
    |   КоличествоОдинаковых
    |ПОМЕСТИТЬ
    |   ТЗнБуфер
    |ИЗ
    |   &ТЗнБуфер КАК ТЗнБуфер
    |ИНДЕКСИРОВАТЬ ПО
    |   ИнформационнаяБаза
    |;
    |ВЫБРАТЬ
    |   ТЗнБуфер.ИндексМассива,
    |   ПараметрыИнформационныхБаз.ИмяБазыВКластере,
    |   ПараметрыИнформационныхБаз.ОбъектКонтроля КАК ИнформационнаяБаза
    |ИЗ
    |   ТЗнБуфер
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ПараметрыИнформационныхБаз КАК ПараметрыИнформационныхБаз
    |ПО
    |   ПараметрыИнформационныхБаз.ИмяБазыВКластере = ТЗнБуфер.ИнформационнаяБаза
    |   И ПараметрыИнформационныхБаз.Кластер = &Кластер
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   Справочник.ОбъектыКонтроля КАК ИнформационныеБазы
    |ПО
    |   ИнформационныеБазы.Ссылка = ПараметрыИнформационныхБаз.ОбъектКонтроля
    |   И ИнформационныеБазы.ПлощадкаЭксплуатации В (&ПлощадкиЭксплуатации)
    |";
    
    Запрос.УстановитьПараметр("ТЗнБуфер", ТЗнБуфер);
    Запрос.УстановитьПараметр("Кластер", Ссылка);
    
    ПлощадкиЭксплуатации = Новый Массив;
    ПлощадкиЭксплуатации.Добавить(ПлощадкаЭксплуатации);
    ПлощадкиЭксплуатации.Добавить(Справочники.ПлощадкиЭксплуатации.Корзина());
    Запрос.УстановитьПараметр("ПлощадкиЭксплуатации", ПлощадкиЭксплуатации);
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ИнформационнаяБаза = ИнформационныеБазы[Выборка.ИндексМассива];    
        ИнформационнаяБаза.Вставить("Ссылка", Выборка.ИнформационнаяБаза);
    КонецЦикла;
    
    Возврат ИнформационныеБазы;
    
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРабочиеСервера(Ссылка, ПлощадкаЭксплуатации, РабочиеСервера1С)
    
    ТЗнБуфер = Новый ТаблицаЗначений();
    ТЗнБуфер.Колонки.Добавить("ИндексМассива", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0)));
    ТЗнБуфер.Колонки.ДОбавить("Хост", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
    ТЗнБуфер.Колонки.Добавить("КоличествоОдинаковых", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0)));
    
    Для ИндексМассива = 0 По РабочиеСервера1С.ВГраница() Цикл
        
        НовСтрока = ТЗнБуфер.Добавить();
        НовСтрока.ИндексМассива = ИндексМассива;
        НовСтрока.Хост = РабочиеСервера1С[ИндексМассива]["HostName"];
        НовСтрока.КоличествоОдинаковых = 1;
        
    КонецЦикла;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ИндексМассива,
    |   Хост,
    |   КоличествоОдинаковых
    |ПОМЕСТИТЬ
    |   ТЗнБуфер
    |ИЗ
    |   &ТЗнБуфер КАК ТЗнБуфер
    |ИНДЕКСИРОВАТЬ ПО
    |   Хост
    |;
    |ВЫБРАТЬ
    |   ВыборкаОборудование.ИндексМассива,
    |   ВыборкаОборудование.Оборудование КАК Оборудование,
    |   ПараметрыРабочихСерверов.ОбъектКонтроля КАК РабочийСервер1С,
    |   СУММА(ВыборкаОборудование.КоличествоОдинаковых) КАК КоличествоОдинаковых
    |ИЗ
    |   (ВЫБРАТЬ
    |       ТЗнБуфер.ИндексМассива,
    |       СпрОборудование.Ссылка КАК Оборудование,
    |       СУММА(ТЗнБуфер.КоличествоОдинаковых) КАК КоличествоОдинаковых
    |   ИЗ
    |       ТЗнБуфер
    |   ЛЕВОЕ СОЕДИНЕНИЕ
    |       Справочник.Оборудование КАК СпрОборудование
    |   ПО
    |       СпрОборудование.Хост = ТЗнБуфер.Хост
    |       И СпрОборудование.ПлощадкаЭксплуатации В (&ПлощадкиЭксплуатации)
    |   СГРУППИРОВАТЬ ПО
    |       ТЗнБуфер.ИндексМассива,
    |       СпрОборудование.Ссылка
    |   ) КАК ВыборкаОборудование
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
    |ПО
    |   ПараметрыРабочихСерверов.Оборудование = ВыборкаОборудование.Оборудование
    |   И ПараметрыРабочихСерверов.Кластер = &Кластер
    |СГРУППИРОВАТЬ ПО
    |   ВыборкаОборудование.ИндексМассива,
    |   ВыборкаОборудование.Оборудование,
    |   ПараметрыРабочихСерверов.ОбъектКонтроля
    |";
    
    Запрос.УстановитьПараметр("ТЗнБуфер", ТЗнБуфер);
    Запрос.УстановитьПараметр("Кластер", Ссылка);
    
    ПлощадкиЭксплуатации = Новый Массив;
    ПлощадкиЭксплуатации.Добавить(ПлощадкаЭксплуатации);
    ПлощадкиЭксплуатации.Добавить(Справочники.ПлощадкиЭксплуатации.Корзина());
    Запрос.УстановитьПараметр("ПлощадкиЭксплуатации", ПлощадкиЭксплуатации);
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        РабочийСервер1С = РабочиеСервера1С[Выборка.ИндексМассива];    
        РабочийСервер1С.Вставить("Ссылка", Выборка.РабочийСервер1С);
        РабочийСервер1С.Вставить("Оборудование", Выборка.Оборудование);
    КонецЦикла;
        
    Возврат РабочиеСервера1С;
    
КонецФункции

&НаКлиенте
Процедура ОбработкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещениеЗавершение = Новый ОписаниеОповещения("ОбработкаНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
	ОбщийКлиент.ВыбратьКаталог(ЭтотОбъект[Элемент.Имя], ОписаниеОповещениеЗавершение);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНачалоВыбораКластераДляИнформационнойБазы(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаНачалоВыбораКластераДляИнформационнойБазыЗавершение", ЭтотОбъект, Элемент.Имя);
    ПараметрыОткрытия = Новый Структура("ПлощадкаЭксплуатации", Объект.ПлощадкаЭксплуатации);
	ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаВыбораКластера", ПараметрыОткрытия,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяБазыВКластереНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Попытка
		БазыКластераМассив = ПолучитьСвойство(ЭтотОбъект.Кластер1СИнформационнаяБаза, "Базы");
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеПользователю.Поле = Элемент.Имя;
		СообщениеПользователю.Сообщить();
	КонецПопытки;
	
	
	ДанныеВыбора = Новый СписокЗначений;
	Если БазыКластераМассив <> Неопределено Тогда
		Для Каждого БазаКластера Из БазыКластераМассив Цикл
			ДанныеВыбора.Добавить(БазаКластера, БазаКластера.Name);
		КонецЦикла;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяБазыВКластереОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = ВыбранноеЗначение.Name + " на " + ЭтотОбъект.Кластер1СИнформационнаяБаза;
	КонецЕсли;

	ЭтотОбъект.ИмяБазыВКластереИнформационнаяБаза = ВыбранноеЗначение.Name;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогЖурналаРегистрацииИнформационнаяБазаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещениеЗавершение = Новый ОписаниеОповещения("ОбработкаНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
	ОбщийКлиент.ВыбратьКаталог(ЭтотОбъект[Элемент.Имя], ОписаниеОповещениеЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиапазонПортовОтРабочийСерверПриИзменении(Элемент)
    СформироватьНаименование();
КонецПроцедуры

&НаКлиенте
Процедура ДиапазонПортовДоРабочийСерверПриИзменении(Элемент)
    СформироватьНаименование();
КонецПроцедуры

&НаКлиенте
Процедура Кластер1СИнформационнаяБазаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    Если СтрДлина(Текст) > 0 Тогда
        ДанныеВыбора = Кластер1САвтоПодборНаСервере(Текст, Объект.ПлощадкаЭксплуатации, Корзина);
        СтандартнаяОбработка = Ложь;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура Кластер1СРабочийСерверАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    Если СтрДлина(Текст) > 0 Тогда
        ДанныеВыбора = Кластер1САвтоПодборНаСервере(Текст, Объект.ПлощадкаЭксплуатации, Корзина);
        СтандартнаяОбработка = Ложь;
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОбработатьПараметрыРабочихСерверовКластера(РабочиеСервераКластера1С)
    
    ПараметрыКоманды = Новый Соответствие;
    ПараметрыКоманды.Вставить("equipmentLocation", Объект.ПлощадкаЭксплуатации.Наименование);
    ПараметрыКоманды.Вставить("equipmentLocationRef", Объект.ПлощадкаЭксплуатации);
    
    РабочиеСерверы1С = Новый Массив;
    ОборудованиеРабочихСерверов = Новый Массив;
    
    НастройкиПоУмолчанию = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.РабочийСервер);
    НастройкиПоУмолчаниюКонтрольУстойчивости = РегистрыСведений.НастройкиСборДампов.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы());
    НастройкиПоУмолчаниюАнализВызововКластера1С = РегистрыСведений.НастройкиАнализВызововКластера1С.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.АнализВызововКластера1С());
    НастройкиПоУмолчаниюМониторингСистемныхОшибок = РегистрыСведений.НастройкиКонтрольЧислаИсключений.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.МониторингСистемныхОшибок());
    
    Для Каждого РабочийСерверКластера1С Из РабочиеСервераКластера1С Цикл
        
        Если РабочийСерверКластера1С.Редактировать = 1 Тогда
            
            ЕдиницаОборудования = Новый Соответствие;
            ЕдиницаОборудования.Вставить("ref", РабочийСерверКластера1С.ОборудованиеСсылка);
            ЕдиницаОборудования.Вставить("description", ?(ЗначениеЗаполнено(РабочийСерверКластера1С.Оборудование), РабочийСерверКластера1С.Оборудование, РабочийСерверКластера1С.Хост));
            ЕдиницаОборудования.Вставить("host", РабочийСерверКластера1С.Хост);
            Если НЕ ЗначениеЗаполнено(РабочийСерверКластера1С.ОборудованиеСсылка) Тогда
                
                ЕдиницаОборудования.Вставить("languageOS", "Английский");
                
                Роли = Новый Массив;
                Роли.Добавить("Рабочий сервер 1С");
                ЕдиницаОборудования.Вставить("role", Роли);
                
            КонецЕсли;
            
            ОборудованиеРабочихСерверов.Добавить(ЕдиницаОборудования);
            
            ПараметрыРабочегоСервера1С = Новый Соответствие;
            ПараметрыРабочегоСервера1С.Вставить("ref", РабочийСерверКластера1С.Ссылка);
            ПараметрыРабочегоСервера1С.Вставить("description", РабочийСерверКластера1С.Наименование);
            ПараметрыРабочегоСервера1С.Вставить("equipmentRef", РабочийСерверКластера1С.ОборудованиеСсылка);
            ПараметрыРабочегоСервера1С.Вставить("equipment", РабочийСерверКластера1С.Хост);
            ПараметрыРабочегоСервера1С.Вставить("equipmentDescr", РабочийСерверКластера1С.Оборудование);
            ПараметрыРабочегоСервера1С.Вставить("cluster1CRef", Объект.Ссылка);
            ПараметрыРабочегоСервера1С.Вставить("cluster1C", Объект.Наименование);
            ПараметрыРабочегоСервера1С.Вставить("portRange", РабочийСерверКластера1С.ДиапазонПортов);
                        
            Если НЕ ЗначениеЗаполнено(РабочийСерверКластера1С.Ссылка) Тогда
                
                ПараметрыРабочегоСервера1С.Вставить("settingsDirectory", НастройкиПоУмолчанию.КаталогНастроекТЖ);
                ПараметрыРабочегоСервера1С.Вставить("settingsDirectoryNetwork", НастройкиПоУмолчанию.КаталогНастроекТЖСетевой);
                ПараметрыРабочегоСервера1С.Вставить("dataDirectory", НастройкиПоУмолчанию.КаталогОбменаДанными);
                ПараметрыРабочегоСервера1С.Вставить("dataDirectoryNetwork", НастройкиПоУмолчанию.КаталогОбменаДаннымиСетевой);
                ПараметрыРабочегоСервера1С.Вставить("tempDirectory", НастройкиПоУмолчанию.КаталогВременный);
                
                КонтрольУстойчивости = Новый Соответствие;
                КонтрольУстойчивости.Вставить("description", "Контроль устойчивости для " + РабочийСерверКластера1С.Наименование);
                КонтрольУстойчивости.Вставить("folderTjNetwork", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогТЖСетевой);
                КонтрольУстойчивости.Вставить("folderTjLocal", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогТЖЛокальный);
                КонтрольУстойчивости.Вставить("durationFileTj", НастройкиПоУмолчаниюКонтрольУстойчивости.ДлительностьХраненияФайловТЖ);
                КонтрольУстойчивости.Вставить("folderDumpNetwork", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВыгрузкиДамповСетевой);
                КонтрольУстойчивости.Вставить("folderDumpLocal", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВыгрузкиДампов);
                КонтрольУстойчивости.Вставить("folderTemp", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВременныхФайлов);
                КонтрольУстойчивости.Вставить("levelDetailDump", НастройкиПоУмолчаниюКонтрольУстойчивости.УровеньДетализацииДампов);
                КонтрольУстойчивости.Вставить("autoSettingsTj", НастройкиПоУмолчаниюКонтрольУстойчивости.АвтоматическаяНастройка);
                КонтрольУстойчивости.Вставить("agentEnable", НастройкиПоУмолчаниюКонтрольУстойчивости.ИспользоватьАгента);
                КонтрольУстойчивости.Вставить("folderExportDumps", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогЭкспортаДампов);
                
                Если НастройкиПоУмолчаниюКонтрольУстойчивости.Расписание <> Неопределено Тогда
                    Расписание = Новый Соответствие;
                    Расписание.Вставить("repeatDays", НастройкиПоУмолчаниюКонтрольУстойчивости.Расписание.ПериодПовтораДней);
                    Расписание.Вставить("repeatSeconds", НастройкиПоУмолчаниюКонтрольУстойчивости.Расписание.ПериодПовтораВТечениеДня);
                    КонтрольУстойчивости.Вставить("schedule", Расписание);
                КонецЕсли;
                
                КонтрольУстойчивости.Вставить("start", Ложь);
                                
                ПараметрыРабочегоСервера1С.Вставить("controlCollectionDumps", КонтрольУстойчивости);
                
                АнализВызововКластера1С = Новый Соответствие;
                АнализВызововКластера1С.Вставить("description", "Анализ вызовов кластера 1С для " + РабочийСерверКластера1С.Наименование);
                АнализВызововКластера1С.Вставить("folderTemp", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВременныхФайлов);
                АнализВызововКластера1С.Вставить("dataDirectory", НастройкиПоУмолчанию.КаталогОбменаДанными);
                АнализВызововКластера1С.Вставить("dataDirectoryNetwork", НастройкиПоУмолчанию.КаталогОбменаДаннымиСетевой);
                Если НастройкиПоУмолчаниюАнализВызововКластера1С.Расписание <> Неопределено Тогда
                    Расписание = Новый Соответствие;
                    Расписание.Вставить("repeatDays", НастройкиПоУмолчаниюАнализВызововКластера1С.Расписание.ПериодПовтораДней);
                    Расписание.Вставить("repeatSeconds", НастройкиПоУмолчаниюАнализВызововКластера1С.Расписание.ПериодПовтораВТечениеДня);
                    АнализВызововКластера1С.Вставить("schedule", Расписание);    
                КонецЕсли;
                АнализВызововКластера1С.Вставить("storageTimeTJ", НастройкиПоУмолчаниюАнализВызововКластера1С.ДлительностьХраненияФайловТЖ);
                АнализВызововКластера1С.Вставить("storageTimeQMC", НастройкиПоУмолчаниюАнализВызововКластера1С.СрокХраненияТЖ);
                АнализВызововКластера1С.Вставить("autoDelete", НастройкиПоУмолчаниюАнализВызововКластера1С.АвтоматическиУдалятьЗаписиТЖ);
                                
                АнализВызововКластера1С.Вставить("start", Ложь);
                
                ПараметрыРабочегоСервера1С.Вставить("callAnalysisCluster1C", АнализВызововКластера1С);
                
                МониторингСистемныхОшибок = Новый Соответствие;
                МониторингСистемныхОшибок.Вставить("description", "Мониторинг системных ошибок для " + РабочийСерверКластера1С.Наименование);
                МониторингСистемныхОшибок.Вставить("folderTemp", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВременныхФайлов);
                МониторингСистемныхОшибок.Вставить("dataDirectory", НастройкиПоУмолчанию.КаталогОбменаДанными);
                МониторингСистемныхОшибок.Вставить("dataDirectoryNetwork", НастройкиПоУмолчанию.КаталогОбменаДаннымиСетевой);
                Если НастройкиПоУмолчаниюМониторингСистемныхОшибок.Расписание <> Неопределено Тогда
                    Расписание = Новый Соответствие;
                    Расписание.Вставить("repeatDays", НастройкиПоУмолчаниюМониторингСистемныхОшибок.Расписание.ПериодПовтораДней);
                    Расписание.Вставить("repeatSeconds", НастройкиПоУмолчаниюМониторингСистемныхОшибок.Расписание.ПериодПовтораВТечениеДня);
                    МониторингСистемныхОшибок.Вставить("schedule", Расписание);    
                КонецЕсли;
                МониторингСистемныхОшибок.Вставить("storageTimeTJ", НастройкиПоУмолчаниюМониторингСистемныхОшибок.ДлительностьХраненияФайловТЖ);
                МониторингСистемныхОшибок.Вставить("storageTimeQMC", НастройкиПоУмолчаниюМониторингСистемныхОшибок.СрокХраненияТЖ);
                МониторингСистемныхОшибок.Вставить("autoDelete", НастройкиПоУмолчаниюМониторингСистемныхОшибок.АвтоматическиУдалятьЗаписиТЖ);
                                
                МониторингСистемныхОшибок.Вставить("start", Ложь);
                
                ПараметрыРабочегоСервера1С.Вставить("monitoringSystemErrors", МониторингСистемныхОшибок);
                
            КонецЕсли;
            
            РабочиеСерверы1С.Добавить(ПараметрыРабочегоСервера1С);
            
        КонецЕсли;
        
    КонецЦикла;
    
    ПараметрыКоманды.Вставить("equipment", ОборудованиеРабочихСерверов);
    ПараметрыКоманды.Вставить("workingServer1C", РабочиеСерверы1С);
    
    Возврат ПараметрыКоманды;
        
КонецФункции

&НаСервере
Функция ОбработатьПараметрыИнформационныхБазКластера(ИнформационныеБазыКластера1С)
    
    ПараметрыКоманды = Новый Соответствие;
    ПараметрыКоманды.Вставить("equipmentLocation", Объект.ПлощадкаЭксплуатации.Наименование);
    ПараметрыКоманды.Вставить("equipmentLocationRef", Объект.ПлощадкаЭксплуатации);
    
    НастройкиПоУмолчаниюКонтрольПроизводительности = РегистрыСведений.НастройкиКонтрольПроизводительности.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПроизводительности());
    НастройкиПоУмолчаниюКонтрольПодключений = РегистрыСведений.НастройкиКонтрольПодключений.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений());
    НастройкиПоУмолчанияКонтрольРегЗаданий = РегистрыСведений.НастройкиКонтрольРегламентныхЗаданий.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий());
    
    ИнформационныеБазы = Новый Массив;
    
    Для Каждого ИнформационнаяБазаКластера1С Из ИнформационныеБазыКластера1С Цикл
        
        Если ИнформационнаяБазаКластера1С.Редактировать = 1 Тогда
            
            ПараметрыИнформационнойБазы = Новый Соответствие;
            ПараметрыИнформационнойБазы.Вставить("ref", ИнформационнаяБазаКластера1С.Ссылка);
            ПараметрыИнформационнойБазы.Вставить("description", ИнформационнаяБазаКластера1С.Наименование);
            ПараметрыИнформационнойБазы.Вставить("cluster1CRef", Объект.Ссылка);
            ПараметрыИнформационнойБазы.Вставить("cluster1C", Объект.Наименование);
            ПараметрыИнформационнойБазы.Вставить("infoBase", ИнформационнаяБазаКластера1С.Наименование);
            
            Если НЕ ЗначениеЗаполнено(ИнформационнаяБазаКластера1С.Ссылка) Тогда
                
                КаталогИБ = СтрЗаменить(ИнформационнаяБазаКластера1С.Наименование, "\", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, "/", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, ":", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, "*", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, "?", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, """", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, "<", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, ">", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, "|", "_");
                                
                КонтрольПроизводительностиНастройки = Новый Соответствие;
                КонтрольПроизводительностиНастройки.Вставить("description", "Контроль производительности для " + ИнформационнаяБазаКластера1С.Наименование);
                КонтрольПроизводительностиНастройки.Вставить("directoryOfApdexFiles", НастройкиПоУмолчаниюКонтрольПроизводительности.КаталогФайловОценкиПроизводительности + КаталогИБ);
                КонтрольПроизводительностиНастройки.Вставить("start", Ложь);
                
                Если НастройкиПоУмолчаниюКонтрольПроизводительности.Расписание <> Неопределено Тогда
                    Расписание = Новый Соответствие;
                    Расписание.Вставить("repeatDays", НастройкиПоУмолчаниюКонтрольПроизводительности.Расписание.ПериодПовтораДней);
                    Расписание.Вставить("repeatSeconds", НастройкиПоУмолчаниюКонтрольПроизводительности.Расписание.ПериодПовтораВТечениеДня);
                    КонтрольПроизводительностиНастройки.Вставить("schedule", Расписание);
                КонецЕсли;
                
                ПараметрыИнформационнойБазы.Вставить("apdexMonitoring", КонтрольПроизводительностиНастройки);
                
                КонтрольПодключенийНастройки = Новый Соответствие;
                КонтрольПодключенийНастройки.Вставить("description", "Контроль подключений для " + ИнформационнаяБазаКластера1С.Наименование);
                Если НастройкиПоУмолчаниюКонтрольПодключений.МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.WEBСервис Тогда
                    КонтрольПодключенийНастройки.Вставить("connectionType", "WEB");
                    КонтрольПодключенийНастройки.Вставить("connectionString", НастройкиПоУмолчаниюКонтрольПодключений.URLОпубликованнойИнформационнойБазы + ИнформационнаяБазаКластера1С.Наименование);
                ИначеЕсли НастройкиПоУмолчаниюКонтрольПодключений.МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.COMСоединитель Тогда
                    КонтрольПодключенийНастройки.Вставить("connectionType", "COM");
                    КонтрольПодключенийНастройки.Вставить("connectionString", НастройкиПоУмолчаниюКонтрольПодключений.СтрокаСоединения);
                КонецЕсли;
                КонтрольПодключенийНастройки.Вставить("connectionTimeout", НастройкиПоУмолчаниюКонтрольПодключений.Таймаут);
                КонтрольПодключенийНастройки.Вставить("login", НастройкиПоУмолчаниюКонтрольПодключений.ЛогинПриПодключении);
                КонтрольПодключенийНастройки.Вставить("password", НастройкиПоУмолчаниюКонтрольПодключений.ПарольПриПодключении);
                КонтрольПодключенийНастройки.Вставить("proxyEnable", НастройкиПоУмолчаниюКонтрольПодключений.ИспользоватьПрокси);
                КонтрольПодключенийНастройки.Вставить("proxyServer", НастройкиПоУмолчаниюКонтрольПодключений.ПроксиСервер);
                КонтрольПодключенийНастройки.Вставить("proxyPort", НастройкиПоУмолчаниюКонтрольПодключений.ПроксиПорт);
                КонтрольПодключенийНастройки.Вставить("controlPeriod", НастройкиПоУмолчаниюКонтрольПодключений.ПериодКонтроля);
                КонтрольПодключенийНастройки.Вставить("minimumAvailability", НастройкиПоУмолчаниюКонтрольПодключений.МинимальныйПроцентДоступности);
                КонтрольПодключенийНастройки.Вставить("noDataAllowed", НастройкиПоУмолчаниюКонтрольПодключений.ДопустимоНетДанных);
                КонтрольПодключенийНастройки.Вставить("start", Ложь);
                          
                ПараметрыИнформационнойБазы.Вставить("connectionMonitoring", КонтрольПодключенийНастройки);
                
                КонтрольРегламентныхЗаданий = Новый Соответствие;
                КонтрольРегламентныхЗаданий.Вставить("description", "Контроль выполнения регламентных заданий для " + ИнформационнаяБазаКластера1С.Наименование);
                КонтрольРегламентныхЗаданий.Вставить("allowableDuration", НастройкиПоУмолчанияКонтрольРегЗаданий.ДопустимаяДлительностьВыполнения);
                КонтрольРегламентныхЗаданий.Вставить("clientDirectory", НастройкиПоУмолчанияКонтрольРегЗаданий.КаталогЗапускаКлиента);
                КонтрольРегламентныхЗаданий.Вставить("start", Ложь);
                
                Если НастройкиПоУмолчанияКонтрольРегЗаданий.Расписание <> Неопределено Тогда
                    Расписание = Новый Соответствие;
                    Расписание.Вставить("repeatDays", НастройкиПоУмолчанияКонтрольРегЗаданий.Расписание.ПериодПовтораДней);
                    Расписание.Вставить("repeatSeconds", НастройкиПоУмолчанияКонтрольРегЗаданий.Расписание.ПериодПовтораВТечениеДня);
                    КонтрольРегламентныхЗаданий.Вставить("schedule", Расписание);
                КонецЕсли;
                
                ПараметрыИнформационнойБазы.Вставить("controlRoutineTasks", КонтрольРегламентныхЗаданий);
                
            КонецЕсли;
                        
            ИнформационныеБазы.Добавить(ПараметрыИнформационнойБазы);
            
        КонецЕсли;
        
    КонецЦикла;
    
    ПараметрыКоманды.Вставить("infoBases", ИнформационныеБазы);
    
    Возврат ПараметрыКоманды;
    
КонецФункции

&НаКлиенте
Процедура УстановитьФлагРедактироватьПодчиненным(ТекЭлемент, ФлагРедактировать)
    
    ПотомкиТекущегоЭлемента = ТекЭлемент.ПолучитьЭлементы();
    Для Каждого ЭлементДерева Из ПотомкиТекущегоЭлемента Цикл
        
        ЭлементДерева.Редактировать = ФлагРедактировать;
        УстановитьФлагРедактироватьПодчиненным(ЭлементДерева, ФлагРедактировать);
        
    КонецЦикла;
        
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагРедактироватьРодителю(ТекЭлемент, ФлагРедактировать)
    
    Родитель = ТекЭлемент.ПолучитьРодителя();
    
    Если Родитель <> Неопределено Тогда
        
        Если ФлагРедактировать <> 2 Тогда
            ЭлементыРодителя = Родитель.ПолучитьЭлементы();
            ВсегоЭлементов = 0;
            ВсегоЭлементовВкл = 0;
            Для Каждого ТекЭлемент Из ЭлементыРодителя Цикл
                
                ВсегоЭлементов = ВсегоЭлементов + 1;
                
                Если ТекЭлемент.Редактировать Тогда
                    ВсегоЭлементовВкл = ВсегоЭлементовВкл + 1;
                КонецЕсли;
                
            КонецЦикла;
            
            Если ВсегоЭлементовВкл = 0 Тогда
                Родитель.Редактировать = 0;
            ИначеЕсли ВсегоЭлементовВкл = ВсегоЭлементов Тогда
                Родитель.Редактировать = 1;
            Иначе
                Родитель.Редактировать = 2;
            КонецЕсли;
        Иначе
            Родитель.Редактировать = 2;
        КонецЕсли;
        
        УстановитьФлагРедактироватьРодителю(Родитель, Родитель.Редактировать);
        
    КонецЕсли;
    
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоКластера()
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        Корень = ЭтотОбъект.СтруктураКластера.ПолучитьЭлементы();
        Корень.Очистить();
        
        Если ИдетЗаписьСтруктурыКластера Тогда
            
            Кластер1С = Корень.Добавить();
            Кластер1С.ИндексКартинки = 18;
            Кластер1С.Наименование = "Запись структуры кластера...";
            
        Иначе
            
            Кластер1С = Корень.Добавить();
            Кластер1С.ИндексКартинки = 18;
            Кластер1С.Наименование = "Получение данных...";
            
            
            ЗаполнитьСтруктуруКластера();
            
        КонецЕсли;
        
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервереИнформационнаяБаза(ТекущийОбъект, ПараметрыЗаписи)
	
	МенеджерЗаписи = РегистрыСведений.ПараметрыИнформационныхБаз.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектКонтроля = ТекущийОбъект.Ссылка;
	Для Каждого ТекПараметр Из ПараметрыЗаписи.ПараметрыИнформационнойБазы Цикл
        
        МенеджерЗаписи[ТекПараметр.Ключ] = ТекПараметр.Значение;
        
        Если ТекПараметр.Ключ = "Кластер" Тогда
            РегистрыСведений.ПараметрыКластеровКеш.ОчиститьКеш(ТекПараметр.Значение);
        КонецЕсли;
        
	КонецЦикла;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ОтветственныеЗаНастройкуПроцедур.СоздатьМенеджерЗаписи();
	Для Каждого ТекСтрока Из ЭтотОбъект.КонтрольныеПроцедуры Цикл
		МенеджерЗаписи.ОбъектКонтроля = ТекущийОбъект;
		МенеджерЗаписи.ВидКонтрольнойПроцедуры = ТекСтрока.ВидКонтрольнойПроцедуры;
		МенеджерЗаписи.РольПользователя = ТекСтрока.ОтветственныйЗаНастройку;
	КонецЦикла;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервереКластер1С(ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеХранилища = Новый Структура("АдминистраторКластера, ПарольАдминистратораКластера");
	ДанныеХранилища.АдминистраторКластера = ПараметрыЗаписи.ПараметрыКластеров.АдминистраторКластера;
	ДанныеХранилища.ПарольАдминистратораКластера = ПараметрыЗаписи.ПараметрыКластеров.ПарольАдминистратораКластера;
	
	ПараметрыЗаписи.ПараметрыКластеров.Удалить("АдминистраторКластера");
	ПараметрыЗаписи.ПараметрыКластеров.Удалить("ПарольАдминистратораКластера");
	
	МенеджерЗаписи = РегистрыСведений.ПараметрыКластеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектКонтроля = ТекущийОбъект.Ссылка;
    Для Каждого ТекПараметр Из ПараметрыЗаписи.ПараметрыКластеров Цикл
        МенеджерЗаписи[ТекПараметр.Ключ] = ТекПараметр.Значение;
    КонецЦикла;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ОтветственныеЗаНастройкуПроцедур.СоздатьМенеджерЗаписи();
	Для Каждого ТекСтрока Из ЭтотОбъект.КонтрольныеПроцедуры Цикл
		МенеджерЗаписи.ОбъектКонтроля = ТекущийОбъект;
		МенеджерЗаписи.ВидКонтрольнойПроцедуры = ТекСтрока.ВидКонтрольнойПроцедуры;
		МенеджерЗаписи.РольПользователя = ТекСтрока.ОтветственныйЗаНастройку;
	КонецЦикла;
	МенеджерЗаписи.Записать(Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.БезопасноеХранилище.ЗаписатьДанные(ТекущийОбъект.Ссылка, ДанныеХранилища);
	УстановитьПривилегированныйРежим(Ложь);
    
    РегистрыСведений.ПараметрыКластеровКеш.ОчиститьКеш(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервереРабочийСервер(ТекущийОбъект, ПараметрыЗаписи)
	
	МенеджерЗаписи = РегистрыСведений.ПараметрыРабочихСерверов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектКонтроля = ТекущийОбъект.Ссылка;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.ОбъектКонтроля = ТекущийОбъект.Ссылка;
	Для Каждого ТекПараметр Из ПараметрыЗаписи.ПараметрыРабочихСерверов Цикл
        
        МенеджерЗаписи[ТекПараметр.Ключ] = ТекПараметр.Значение;
        
        Если ТекПараметр.Ключ = "Кластер" Тогда
            РегистрыСведений.ПараметрыКластеровКеш.ОчиститьКеш(ТекПараметр.Значение);
        КонецЕсли;
        
	КонецЦикла;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ОтветственныеЗаНастройкуПроцедур.СоздатьМенеджерЗаписи();
	Для Каждого ТекСтрока Из ЭтотОбъект.КонтрольныеПроцедуры Цикл
		МенеджерЗаписи.ОбъектКонтроля = ТекущийОбъект;
		МенеджерЗаписи.ВидКонтрольнойПроцедуры = ТекСтрока.ВидКонтрольнойПроцедуры;
		МенеджерЗаписи.РольПользователя = ТекСтрока.ОтветственныйЗаНастройку;
	КонецЦикла;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРабочиеСервера(ОбъектСсылка = Неопределено)
	Если ОбъектСсылка = Неопределено Тогда 
		Справочники.ОбъектыКонтроля.Свойство(Объект.Ссылка, "Оборудование");
	Иначе 
		Справочники.ОбъектыКонтроля.Свойство(ОбъектСсылка, "Оборудование");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ЭтотОбъект[ДополнительныеПараметры.Имя] = ВыбранныеФайлы[0];
		Если ДополнительныеПараметры.Имя = "КаталогНастроекТЖСетевой" Тогда
			Если НЕ ПустаяСтрока(ЭтотОбъект[ДополнительныеПараметры.Имя]) Тогда
				Если Прав(ЭтотОбъект[ДополнительныеПараметры.Имя], 1) <> РазделительПути Тогда
					ЭтотОбъект[ДополнительныеПараметры.Имя] = ЭтотОбъект[ДополнительныеПараметры.Имя] + РазделительПути;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ДополнительныеПараметры.Имя = "КаталогОбменаДаннымиСетевой" Тогда
			Если НЕ ПустаяСтрока(ЭтотОбъект[ДополнительныеПараметры.Имя]) Тогда
				Если Прав(ЭтотОбъект[ДополнительныеПараметры.Имя], 1) <> РазделительПути Тогда
					ЭтотОбъект[ДополнительныеПараметры.Имя] = ЭтотОбъект[ДополнительныеПараметры.Имя] + РазделительПути;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНачалоВыбораКластера(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаНачалоВыбораКластераДляСервераЗавершение", ЭтотОбъект, Элемент.Имя);
	ОткрытьФорму("Справочник.ОбъектыКонтроля.Форма.ФормаВыбораКластера",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНачалоВыбораКластераДляСервераЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
    Если РезультатЗакрытия <> Неопределено Тогда
        Если ДополнительныеПараметры = "Кластер1СРабочийСервер" Тогда
            ЭтотОбъект[ДополнительныеПараметры] = РезультатЗакрытия.Ссылка;
            Объект.ПлощадкаЭксплуатации = РезультатЗакрытия.ПлощадкаЭксплуатации;
        Иначе
            ЭтотОбъект[ДополнительныеПараметры] = РезультатЗакрытия;
        КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНачалоВыбораОборудованияРабочегоСервераЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
        ЭтотОбъект.Оборудование = РезультатЗакрытия;
        СформироватьНаименование();
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНачалоВыбораКластераДляИнформационнойБазыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
    Если РезультатЗакрытия <> Неопределено Тогда
        Если ДополнительныеПараметры = "Кластер1СИнформационнаяБаза" Тогда
            ЭтотОбъект[ДополнительныеПараметры] = РезультатЗакрытия.Ссылка;
            Объект.ПлощадкаЭксплуатации = РезультатЗакрытия.ПлощадкаЭксплуатации;
        Иначе
            ЭтотОбъект[ДополнительныеПараметры] = РезультатЗакрытия;
            Если ПустаяСтрока(ЭтотОбъект.КаталогЖурналаРегистрацииИнформационнаяБаза) Тогда
                ЭтотОбъект.КаталогЖурналаРегистрацииИнформационнаяБаза = "\\" + ПолучитьИмяКомпьютераКластера(РезультатЗакрытия);
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяКомпьютераКластера(Кластер)
	Возврат Справочники.ОбъектыКонтроля.Свойство(Кластер, "АдресКластера");
КонецФункции

&НаКлиенте
Процедура ОбработкаНачалоВыбораКластераОбъектаКонтроля(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	КластерыМассив = ПолучитьКластеры(ЭтотОбъект.ТипПодключения , ЭтотОбъект.АдресКластера, ЭтотОбъект.ПортАгентаКластера, ЭтотОбъект.АдресСервераАдминистрирования, ЭтотОбъект.ПортСервераАдминистрирования, ЭтотОбъект.ВерсияПлатформы, ЭтотОбъект.КаталогЗапускаСервераАдминистрирования);
	
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого Кластер Из КластерыМассив Цикл
		ДанныеВыбора.Добавить(Кластер, Кластер.ClusterName);
	КонецЦикла;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Функция НастройкиСервераАдминистрирования(Настройки)
	
	Результат = Новый Структура;
	
	НастройкиМассив = СтрРазделить(Настройки, ":", Ложь);
	Если НастройкиМассив.Количество() = 1 Тогда
		Результат.Вставить("Сервер", НастройкиМассив[0]);
		Результат.Вставить("Порт", 1545);
	ИначеЕсли НастройкиМассив.Количество() = 2 Тогда
		Результат.Вставить("Сервер", НастройкиМассив[0]);
		Результат.Вставить("Порт", Число(НастройкиМассив[1]));
	Иначе
		Результат.Вставить("Сервер", Неопределено);
		Результат.Вставить("Порт", Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НастройкиАгентаКластера(Настройки)
	
	Результат = Новый Структура;
	
	НастройкиМассив = СтрРазделить(Настройки, ":", Истина);
	Если НастройкиМассив.Количество() = 1 Тогда
		Результат.Вставить("Сервер", НастройкиМассив[0]);
		Результат.Вставить("Порт", 1540);
	ИначеЕсли НастройкиМассив.Количество() = 2 Тогда
		Результат.Вставить("Сервер", НастройкиМассив[0]);
		Результат.Вставить("Порт", Число(НастройкиМассив[1]));
	Иначе
		Результат.Вставить("Сервер", Неопределено);
		Результат.Вставить("Порт", Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура КластерОбъектаКонтроляОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = ВыбранноеЗначение.ClusterName + " на " +  ВыбранноеЗначение.HostName;
	КонецЕсли;
	ЭтотОбъект.ПортКластера = ВыбранноеЗначение.MainPort;
	ЭтотОбъект.КластерОбъектаКонтроля = ВыбранноеЗначение.ClusterName;
	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИмяКомпьютераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РабочиеСервераМассив = ПолучитьСвойство(ЭтотОбъект.Кластер, "Оборудование");
	
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого РабочийСервер Из РабочиеСервераМассив Цикл
		ДанныеВыбора.Добавить(РабочийСервер, РабочийСервер.HostName + " (" + РабочийСервер.Name + ")");
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИмяКомпьютераОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = ВыбранноеЗначение.HostName + " (" + ВыбранноеЗначение.Name + ")";
	КонецЕсли;

	ЭтотОбъект.ИмяКомпьютера = ВыбранноеЗначение.HostName;
	
	ЭтотОбъект.Элементы.КаталогНастроекТЖ.Заголовок = "Локальный каталог технологического журнала (logcfg.xml) на " + ВыбранноеЗначение.HostName;
	ЭтотОбъект.Элементы.КаталогНастроекТЖСетевой.Заголовок = "Сетевой каталог технологического журнала (logcfg.xml) на " + ВыбранноеЗначение.HostName;
	ЭтотОбъект.Элементы.КаталогОбменаДанными.Заголовок = "Локальный каталог обмена данными на " + ВыбранноеЗначение.HostName;
	ЭтотОбъект.Элементы.КаталогОбменаДаннымиСетевой.Заголовок = "Сетевой каталог обмена данными на " + ВыбранноеЗначение.HostName;
	
	Если ТипПлатформыСервер = Строка(ТипПлатформы.Windows_x86) ИЛИ ТипПлатформыСервер = Строка(ТипПлатформы.Windows_x86_64) Тогда
		Если ПустаяСтрока(ЭтотОбъект.КаталогНастроекТЖСетевой) Тогда
			ЭтотОбъект.КаталогНастроекТЖСетевой = "\\" + ВыбранноеЗначение.HostName + РазделительПути;
		КонецЕсли;
		
		Если ПустаяСтрока(ЭтотОбъект.КаталогОбменаДаннымиСетевой) Тогда
			ЭтотОбъект.КаталогОбменаДаннымиСетевой = "\\" + ВыбранноеЗначение.HostName + РазделительПути;
		КонецЕсли;
	КонецЕсли;
		
	Если ПустаяСтрока(ЭтотОбъект.КаталогВременный) Тогда
		ЭтотОбъект.КаталогВременный = ПолучитьСвойство(Объект.Ссылка, "КаталогВременный", Объект.Владелец);
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКластеры(ТипПодключения, АдресКомпьютера, ПортАгентаКластера, АдресСервераАдминистрирования, ПортСервераАдминистрирования, ВерсияПлатформы, КаталогЗапускаСервераАдминистрирования)
	Если ТипПодключения = "COM" И ВерсияПлатформы.Пустая() Тогда 
		ВызватьИсключение("Не заполнена версия платформы. Необходимо заполнить реквизит ""Версия платформы"".");	
	Иначе 
		Возврат Справочники.ОбъектыКонтроля.ПолучитьКластеры(ТипПодключения, АдресКомпьютера, ПортАгентаКластера, АдресСервераАдминистрирования, ПортСервераАдминистрирования, ВерсияПлатформы, КаталогЗапускаСервераАдминистрирования);	
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвойство(ОбъектКонтроляСсылка, Свойство, Владелец = Неопределено)
	Возврат Справочники.ОбъектыКонтроля.Свойство(ОбъектКонтроляСсылка, Свойство, Владелец);
КонецФункции

&НаКлиенте
Процедура ВыставитьНастройкиПоУмолчаниюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Если Объект.Владелец = ПредопределенноеЗначение("Справочник.ВидыОбъектовКонтроля.КластерСерверов1С") Тогда
            ПриСозданииНаСервереКластер1С(Объект.Владелец);    
        Иначе
            ЗаполнитьПоляНастроек(Истина);
            ЗаполнитьФормуКонтрольныхПроцедур(Истина);
        КонецЕсли;
        
        ЭтотОбъект.Модифицированность = Истина;
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииСервер(Отказ)
	
	ЭтотОбъект.Заголовок = ТекущийВидОбъекта();
	ЗаполнитьПоляНастроек();			
	ЗаполнитьФормуКонтрольныхПроцедур(НЕ Объект.НастройкаВыполнена);	
	ОбновитьРекомендации();
	
КонецПроцедуры

&НаСервере
Функция ТекущийВидОбъекта()
	Возврат Объект.Владелец;	
КонецФункции	

&НаСервере
Процедура ЗаполнитьПоляНастроек(НастройкиПоУмолчанию = Ложь)
	ТекущийВид = ТекущийВидОбъекта();
	Если ТекущийВид = Справочники.ВидыОбъектовКонтроля.ПустаяСсылка() Тогда
		Элементы.СтраницаНастройки.Видимость = Ложь;
		Возврат;
	КонецЕсли;	
	Элементы.СтраницаНастройки.Видимость = Истина;
	
	Если Общий.ЭтоНовыйОбъект(Объект) ИЛИ НастройкиПоУмолчанию ИЛИ НЕ Объект.НастройкаВыполнена Тогда
		// заполняем значениями по умолчанию
		ВладелецНастроек = Объект.Владелец;
		УстановитьПоУмолчаниюВспомогательныеНастройки();
	Иначе
		// находим сохраненную запись в соответствующем регистре сведений и выводим её
		ВладелецНастроек = Объект.Ссылка;
	КонецЕсли;
	
	ИменаОбязательныхРеквизитов = РеквизитФормыВЗначение("ИменаОбязательныхДинамическихНастроек");
	ИменаОбязательныхРеквизитов.Очистить();	
	НастройкиСервер.ЗаполнитьПоляДинамическихНастроекНаФорме(
		ВладелецНастроек, 
		ЭтотОбъект, 
		"ДинамическиеНастройкиГруппа", 
		ИменаОбязательныхРеквизитов
	);
	ЗначениеВРеквизитФормы(ИменаОбязательныхРеквизитов, "ИменаОбязательныхДинамическихНастроек");		
КонецПроцедуры	

&НаСервере
Процедура УстановитьПоУмолчаниюВспомогательныеНастройки()
	//
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьФормуКонтрольныхПроцедур(ПоУмолчанию = Ложь)
			
	ТекущийВид = ТекущийВидОбъекта();
			
	Элементы.КонтрольныеПроцедуры.Видимость = Истина;
	
	КонтрольныеПроцедурыДанные = РеквизитФормыВЗначение("КонтрольныеПроцедуры");
	КонтрольныеПроцедурыДанные.Очистить();
	
	Если ТекущийВид = Справочники.ВидыОбъектовКонтроля.ПустаяСсылка() Тогда
		Элементы.КонтрольныеПроцедуры.Видимость = Ложь;
	Иначе	
		НастройкиСервер.ЗаполнитьФормуКонтрольныхПроцедур(
			?(ПоУмолчанию, ТекущийВид, Объект.Ссылка), 
			ТекущийВид, 
			КонтрольныеПроцедурыДанные
		);
		Если ПоУмолчанию И (НЕ Объект.Ссылка.Пустая()) Тогда
			СозданныеПроцедуры = Новый Соответствие;
			ВыборкаПроцедур = Справочники.КонтрольныеПроцедуры.Выбрать(,,Новый Структура("ОбъектКонтроля", Объект.Ссылка));
			Пока ВыборкаПроцедур.Следующий() Цикл
				ПроцедураСсылка = ВыборкаПроцедур.Ссылка;
				СозданныеПроцедуры.Вставить(ПроцедураСсылка.Владелец,ПроцедураСсылка); 
			КонецЦикла;
			Для Каждого СтрокаДанных Из КонтрольныеПроцедурыДанные Цикл
				СуществующаяКонтрольнаяПроцедура = СозданныеПроцедуры.Получить(СтрокаДанных.ВидКонтрольнойПроцедуры);
				Если СуществующаяКонтрольнаяПроцедура <> Неопределено Тогда
					СтрокаДанных.КонтрольнаяПроцедура = СуществующаяКонтрольнаяПроцедура;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(КонтрольныеПроцедурыДанные, "КонтрольныеПроцедуры");	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьКонтрольныеПроцедуры(ТекущийОбъектСсылка)
	
	// актуализировать использование контрольных процедур
	КонтрольныеПроцедурыДанные = РеквизитФормыВЗначение("КонтрольныеПроцедуры");
	Для Каждого СтрокаДанных Из КонтрольныеПроцедурыДанные Цикл
		НачатьТранзакцию();
			
		ВидКонтрольнойПроцедуры = СтрокаДанных.ВидКонтрольнойПроцедуры;
		ПроцедураСсылка = СтрокаДанных.КонтрольнаяПроцедура;
		
		// Если  галка стоит, а процедуры нет, то создать заготовку процедуры и сгенерировать 
		// задачу по настройке процедуры
		Если ПроцедураСсылка.Пустая() Тогда
			НачатьТранзакцию();
			
			УникальныйКаталогОбменаДанными = Новый УникальныйИдентификатор();
            
            Если ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.ПолучитьСсылкуПоНаименованию("Анализ вызовов кластера 1С")
                ИЛИ ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.ПолучитьСсылкуПоНаименованию("Контроль устойчивости системы") 
                ИЛИ ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.ПолучитьСсылкуПоНаименованию("Мониторинг системных ошибок")
            Тогда
                
                КаталогОбменаДаннымиСетевой = ПолучитьКаталогСРазделителем(Справочники.ОбъектыКонтроля.Свойство(ТекущийОбъектСсылка, "КаталогОбменаДаннымиСетевой"), ЭтотОбъект.РазделительПути); 
                Если ЗначениеЗаполнено(КаталогОбменаДаннымиСетевой) И КаталогОбменаДаннымиСетевой <> ЭтотОбъект.РазделительПути   Тогда
                    КаталогОбменаДаннымиСетевой = КаталогОбменаДаннымиСетевой + УникальныйКаталогОбменаДанными + ЭтотОбъект.РазделительПути;
                КонецЕсли;
                
                КаталогВременный = ПолучитьКаталогСРазделителем(Справочники.ОбъектыКонтроля.Свойство(ТекущийОбъектСсылка, "КаталогВременный"), ЭтотОбъект.РазделительПути);
                Если ЗначениеЗаполнено(КаталогВременный) Тогда
                    КаталогВременный = КаталогВременный + Новый УникальныйИдентификатор() + ЭтотОбъект.РазделительПути;
                КонецЕсли;
                                
                КаталогОбменаДанными = ПолучитьКаталогСРазделителем(Справочники.ОбъектыКонтроля.Свойство(ТекущийОбъектСсылка, "КаталогОбменаДанными"));
                РазделительТам = ПолучитьРазделительИзИмени(КаталогОбменаДанными);
                Если ЗначениеЗаполнено(КаталогОбменаДанными) Тогда
                    КаталогОбменаДанными = "" + КаталогОбменаДанными + УникальныйКаталогОбменаДанными + РазделительТам;
                КонецЕсли;
                                
                УникальныйИдентификаторКаталогаВыгрузкиДампов = Новый УникальныйИдентификатор();
                Если ЗначениеЗаполнено(КаталогОбменаДаннымиСетевой) И КаталогОбменаДаннымиСетевой <> ЭтотОбъект.РазделительПути Тогда
                    УникальныйКаталогВыгрузкиДамповСетевой = КаталогОбменаДаннымиСетевой + УникальныйИдентификаторКаталогаВыгрузкиДампов + ЭтотОбъект.РазделительПути;
                КонецЕсли;
                
                Если ЗначениеЗаполнено(КаталогОбменаДанными) Тогда
                    УникальныйКаталогВыгрузкиДампов = КаталогОбменаДанными + УникальныйИдентификаторКаталогаВыгрузкиДампов + РазделительТам;
                КонецЕсли;
                                
            КонецЕсли;
            
			Если ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.ПолучитьСсылкуПоНаименованию("Анализ вызовов кластера 1С") Тогда
				                
                НастройкиПоУмолчаниюРабочийСервер = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.РабочийСервер);
                НастройкиПоУмолчанию = РегистрыСведений.НастройкиАнализВызововКластера1С.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.АнализВызововКластера1С());
                           
                ПараметрыСоздания = Новый Структура;
                ПараметрыСоздания.Вставить("Наименование", Строка(ВидКонтрольнойПроцедуры) + " для " + Строка(ТекущийОбъектСсылка));
                ПараметрыСоздания.Вставить("ОбъектКонтроля", ТекущийОбъектСсылка);
                ПараметрыСоздания.Вставить("Ответственный", Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля);
                ПараметрыСоздания.Вставить("КаталогВременныхФайлов", НастройкиПоУмолчаниюРабочийСервер.КаталогВременный);
                ПараметрыСоздания.Вставить("КаталогТЖЛокальный", НастройкиПоУмолчаниюРабочийСервер.КаталогНастроекТЖСетевой);
                ПараметрыСоздания.Вставить("КаталогТЖСетевой", НастройкиПоУмолчаниюРабочийСервер.КаталогНастроекТЖ);
                ПараметрыСоздания.Вставить("ДлительностьХраненияФайловТЖ", НастройкиПоУмолчанию.ДлительностьХраненияФайловТЖ);
                ПараметрыСоздания.Вставить("СрокХраненияТЖ", НастройкиПоУмолчанию.СрокХраненияТЖ);
                ПараметрыСоздания.Вставить("АвтоматическиУдалятьЗаписиТЖ", НастройкиПоУмолчанию.АвтоматическиУдалятьЗаписиТЖ);
                
                Расписание = НастройкиПоУмолчанию.Расписание;
                Если Расписание <> Неопределено Тогда
                    РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", Расписание.ПериодПовтораДней, Расписание.ПериодПовтораВТечениеДня);
                Иначе
                    РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 600);
                КонецЕсли;
                
                ПараметрыСоздания.Вставить("Расписание", РасписаниеПараметры);
                
                КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлементАнализВызововКластера1С(ПараметрыСоздания);
                        
			ИначеЕсли ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.ПолучитьСсылкуПоНаименованию("Контроль устойчивости системы") Тогда
                
                КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
				КонтрольнаяПроцедура.СоздатьПоУмолчаниюКонтрольУстойчивостиСистемы(
					ВидКонтрольнойПроцедуры,
					Истина,
					ТекущийОбъектСсылка,
					Ложь,
					Строка(ВидКонтрольнойПроцедуры) + " для " + Строка(ТекущийОбъектСсылка),
					КаталогОбменаДаннымиСетевой,
					КаталогОбменаДанными,
					КаталогВременный,
					УникальныйКаталогВыгрузкиДамповСетевой,
					УникальныйКаталогВыгрузкиДампов
					);
			ИначеЕсли ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.ПолучитьСсылкуПоНаименованию("Мониторинг системных ошибок") Тогда
				
                НастройкиПоУмолчаниюРабочийСервер = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.РабочийСервер);
                НастройкиПоУмолчанию = РегистрыСведений.НастройкиКонтрольЧислаИсключений.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.МониторингСистемныхОшибок());
                           
                ПараметрыСоздания = Новый Структура;
                ПараметрыСоздания.Вставить("Наименование", Строка(ВидКонтрольнойПроцедуры) + " для " + Строка(ТекущийОбъектСсылка));
                ПараметрыСоздания.Вставить("ОбъектКонтроля", ТекущийОбъектСсылка);
                ПараметрыСоздания.Вставить("Ответственный", Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля);
                ПараметрыСоздания.Вставить("КаталогВременныхФайлов", НастройкиПоУмолчаниюРабочийСервер.КаталогВременный);
                ПараметрыСоздания.Вставить("КаталогТЖЛокальный", НастройкиПоУмолчаниюРабочийСервер.КаталогНастроекТЖСетевой);
                ПараметрыСоздания.Вставить("КаталогТЖСетевой", НастройкиПоУмолчаниюРабочийСервер.КаталогНастроекТЖ);
                ПараметрыСоздания.Вставить("ДлительностьХраненияФайловТЖ", НастройкиПоУмолчанию.ДлительностьХраненияФайловТЖ);
                ПараметрыСоздания.Вставить("СрокХраненияТЖ", НастройкиПоУмолчанию.СрокХраненияТЖ);
                ПараметрыСоздания.Вставить("АвтоматическиУдалятьЗаписиТЖ", НастройкиПоУмолчанию.АвтоматическиУдалятьЗаписиТЖ);
                
                Расписание = НастройкиПоУмолчанию.Расписание;
                Если Расписание <> Неопределено Тогда
                    РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", Расписание.ПериодПовтораДней, Расписание.ПериодПовтораВТечениеДня);
                Иначе
                    РасписаниеПараметры = Новый Структура("ПериодПовтораДней, ПериодПовтораВТечениеДня", 1, 600);
                КонецЕсли;
                
                ПараметрыСоздания.Вставить("Расписание", РасписаниеПараметры);
                
                КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлементМониторингСистемныхОшибок(ПараметрыСоздания);
                
			ИначеЕсли ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.ПолучитьСсылкуПоНаименованию("Контроль потребления памяти") Тогда
				КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
				НаименованиеКП = Строка(ВидКонтрольнойПроцедуры) + " для " + Строка(ТекущийОбъектСсылка);
				КонтрольнаяПроцедура.СоздатьПоУмолчаниюКонтрольПотребленияПамяти(НаименованиеКП, ВидКонтрольнойПроцедуры, Ложь, ТекущийОбъектСсылка, Ложь);
            ИначеЕсли ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.ПолучитьСсылкуПоНаименованию("Контроль подключений") Тогда
                КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
                НаименованиеКП = Строка(ВидКонтрольнойПроцедуры) + " для " + Строка(ТекущийОбъектСсылка);
				КонтрольнаяПроцедура.СоздатьПоУмолчаниюКонтрольПодключений(НаименованиеКП, ВидКонтрольнойПроцедуры, ТекущийОбъектСсылка, Ложь);
            ИначеЕсли ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.ПолучитьСсылкуПоНаименованию("Контроль производительности") Тогда
                КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
                НаименованиеКП = Строка(ВидКонтрольнойПроцедуры) + " для " + Строка(ТекущийОбъектСсылка);
                КонтрольнаяПроцедура.СоздатьПоУмолчаниюКонтрольПроизводительности(НаименованиеКП, ВидКонтрольнойПроцедуры, ТекущийОбъектСсылка, Ложь);
            ИначеЕсли ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.ПолучитьСсылкуПоНаименованию("Контроль выполнения регламентных заданий") Тогда
                КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
                НаименованиеКП = Строка(ВидКонтрольнойПроцедуры) + " для " + Строка(ТекущийОбъектСсылка);
                КонтрольнаяПроцедура.СоздатьПоУмолчаниюКонтрольРегламентныхЗаданий(НаименованиеКП, ВидКонтрольнойПроцедуры, ТекущийОбъектСсылка, Ложь); 
			Иначе
				КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
				КонтрольнаяПроцедура.Владелец = ВидКонтрольнойПроцедуры;
				КонтрольнаяПроцедура.НастройкаВыполнена = Ложь;
				КонтрольнаяПроцедура.ОбъектКонтроля = ТекущийОбъектСсылка;
				КонтрольнаяПроцедура.Выполнять = Ложь;
				КонтрольнаяПроцедура.Наименование = Строка(ВидКонтрольнойПроцедуры) + " для " + Строка(ТекущийОбъектСсылка);
				КонтрольнаяПроцедура.Записать();
			КонецЕсли;
			ПроцедураСсылка = КонтрольнаяПроцедура.Ссылка;
			ЗафиксироватьТранзакцию();
			
			СтрокаДанных.КонтрольнаяПроцедура = ПроцедураСсылка;
		Иначе 
			НовоеНазвание = Строка(ВидКонтрольнойПроцедуры) + " для " + Строка(ТекущийОбъектСсылка);
			Если НовоеНазвание <> ПроцедураСсылка.Наименование Тогда
				КонтрольнаяПроцедураОбъект = ПроцедураСсылка.ПолучитьОбъект();
				КонтрольнаяПроцедураОбъект.Наименование = НовоеНазвание;
				КонтрольнаяПроцедураОбъект.Записать();
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ СтрокаДанных.ОтветственныйЗаНастройку.Пустая() Тогда
			УправлениеЗадачами.НазначитьОтветственногоЗаНастройкуПроцедуры(
				ТекущийОбъектСсылка.Ссылка,
				СтрокаДанных.ВидКонтрольнойПроцедуры,
				СтрокаДанных.ОтветственныйЗаНастройку
			);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	ЗначениеВРеквизитФормы(КонтрольныеПроцедурыДанные, "КонтрольныеПроцедуры");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКаталогСРазделителем(Каталог, Знач Разделитель = Неопределено)
    
    Если ЗначениеЗаполнено(Каталог) Тогда
        Если Разделитель = Неопределено Тогда
            Разделитель = ПолучитьРазделительИзИмени(Каталог);
        КонецЕсли;
        
        Если Прав(Каталог, 1) <> Разделитель Тогда
            Каталог = "" + Каталог + Разделитель;
        КонецЕсли;
        
        Возврат Каталог;
    Иначе
        Возврат "";
    КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРазделительИзИмени(Каталог)
	
	Разделитель = "";
	
	ДлинаПути = СтрДлина(Каталог);
	Пока ДлинаПути > 0 Цикл
		Симв = Сред(Каталог, ДлинаПути, 1);
		
		Если Симв = "/" ИЛИ Симв = "\" Тогда
			Разделитель = Симв;
			ДлинаПути = 0;
		КонецЕсли;
		
		ДлинаПути = ДлинаПути - 1;
	КонецЦикла;
	
	Возврат Разделитель;
	
КонецФункции
	
&НаКлиенте
Процедура ОповеститьОбИзменениях()
	Оповестить("Изменение.Справочник.ОбъектыКонтроля", Объект.Ссылка);	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьРекомендации()
	ИмяМакета = НазваниеСтраницыСправки();
	Если ИмяМакета <> Неопределено Тогда
		Справка = Общий.ТекстHTMLМакета(НазваниеСтраницыСправки()); 	
	Иначе
		Элементы.Рекомендации.Видимость = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры	

&НаСервере
Функция НазваниеСтраницыСправки()
	
	Возврат РасширяемыеПараметрыЯдра.СписокМакетовРекомендацийВидыОбъектов(Ложь).Получить(Объект.Владелец);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьДоступРабочегоСервера()
	Попытка
		ПроверитьДоступККаталогу(ЭтотОбъект.КаталогНастроекТЖСетевойРабочийСервер, Истина, Истина, РазделительПути);
		Сообщить(НСтр("ru = 'Успешно. Сетевой каталог технологического журнала'") + ": " + ЭтотОбъект.КаталогНастроекТЖСетевойРабочийСервер + " - " + НСтр("ru = 'Чтение, Запись, Удаление'"));
	Исключение                                           
		Сообщить(НСтр("ru = 'Ошибка! Сетевой каталог технологического журнала'") + ": " + ИнформацияОбОшибке().Описание, СтатусСообщения.ОченьВажное);
	КонецПопытки;
	
	Попытка
		ПроверитьДоступККаталогу(ЭтотОбъект.КаталогОбменаДаннымиСетевойРабочийСервер, Истина, Истина, РазделительПути);
		Сообщить(НСтр("ru = 'Успешно. Сетевой каталог сбора данных'") + ": " + ЭтотОбъект.КаталогОбменаДаннымиСетевойРабочийСервер + " - " + НСтр("ru = 'Чтение, Запись, Удаление'"));
	Исключение
		Сообщить(НСтр("ru = 'Ошибка! Сетевой каталог сбора данных'") + ": " + ИнформацияОбОшибке().Описание, СтатусСообщения.ОченьВажное);
	КонецПопытки;
	
	Попытка
		ПроверитьДоступККаталогу(ЭтотОбъект.КаталогВременныйРабочийСервер, Истина, Истина, РазделительПути);
		Сообщить(НСтр("ru = 'Успешно. Локальный каталог временных файлов'") + ": " + ЭтотОбъект.КаталогВременныйРабочийСервер + " - " + НСтр("ru = 'Чтение, Запись, Удаление'"));
	Исключение
		Сообщить(НСтр("ru = 'Ошибка! Локальный каталог временных файлов'") + ": " + ИнформацияОбОшибке().Описание, СтатусСообщения.ОченьВажное);
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьДоступККаталогу(Знач Путь, Запись, Удаление, РазделительПути)
	Если Прав(Путь, "1") <> РазделительПути Тогда
		Путь = Путь + РазделительПути;
	КонецЕсли;
		
	Каталог = Новый Файл(Путь);
	Если Каталог.Существует() Тогда
		ИмяФайла = Новый УникальныйИдентификатор();
		Попытка
			Если Запись Тогда
				Текст = Новый ЗаписьТекста(Каталог.ПолноеИмя + РазделительПути + ИмяФайла);
				Текст.Записать("Тестовый файл");
				Текст.Закрыть();
			КонецЕсли;
		Исключение
			ВызватьИсключение НСтр("ru = 'Нет прав на запись в ""'") + Каталог.Путь + """";
		КонецПопытки;
		
		Попытка
			Если Удаление Тогда
				УдалитьФайлы(Каталог.ПолноеИмя + РазделительПути + ИмяФайла);
			КонецЕсли;
		Исключение
			ВызватьИсключение НСтр("ru = 'Нет прав на удаление в ""'") + Каталог.ПолноеИмя + """";
		КонецПопытки;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не существует каталог ""'") + Каталог.ПолноеИмя + """";
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервереИнформационнаяБаза()
	
	Объект.Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза;
	
	ПараметрыОтбора = Новый Структура("ОбъектКонтроля");
	ПараметрыОтбора.ОбъектКонтроля = Объект.Ссылка;
	НастройкиИнформационнойБазы = РегистрыСведений.ПараметрыИнформационныхБаз.Получить(ПараметрыОтбора);
    
    Если ЭтотОбъект.Параметры.Свойство("ЗначенияЗаполнения") И ЭтотОбъект.Параметры.ЗначенияЗаполнения.Свойство("Кластер1С") Тогда
        ЭтотОбъект.Кластер1СИнформационнаяБаза = ЭтотОбъект.Параметры.ЗначенияЗаполнения.Кластер1С;
    Иначе
        ЭтотОбъект.Кластер1СИнформационнаяБаза = НастройкиИнформационнойБазы.Кластер;
    КонецЕсли;
    ЭтотОбъект.ИмяБазыВКластереИнформационнаяБаза = НастройкиИнформационнойБазы.ИмяБазыВКластере;
	ЭтотОбъект.ЧислоПользователейИнформационнаяБаза = НастройкиИнформационнойБазы.ЧислоПользователей;
	ЭтотОбъект.КаталогЖурналаРегистрацииИнформационнаяБаза = НастройкиИнформационнойБазы.КаталогЖурналРегистрации;
	
	ЗаполнитьФормуКонтрольныхПроцедур(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереРабочийСервер()
	
	Объект.Владелец = Справочники.ВидыОбъектовКонтроля.РабочийСервер;
	
	ПараметрыОтбора = Новый Структура("ОбъектКонтроля");
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        ПараметрыОтбора.ОбъектКонтроля = Объект.Ссылка;
    Иначе
        ПараметрыОтбора.ОбъектКонтроля = Справочники.ВидыОбъектовКонтроля.РабочийСервер;
    КонецЕсли;
    НастройкиРабочегоСервера = РегистрыСведений.ПараметрыРабочихСерверов.Получить(ПараметрыОтбора);
    
    Если ЭтотОбъект.Параметры.Свойство("ЗначенияЗаполнения") И ЭтотОбъект.Параметры.ЗначенияЗаполнения.Свойство("Кластер1С") Тогда
        ЭтотОбъект.Кластер1СРабочийСервер = ЭтотОбъект.Параметры.ЗначенияЗаполнения.Кластер1С;
    Иначе
        ЭтотОбъект.Кластер1СРабочийСервер = НастройкиРабочегоСервера.Кластер;
    КонецЕсли;
    
	ЭтотОбъект.Оборудование = НастройкиРабочегоСервера.Оборудование;
	ЭтотОбъект.КаталогНастроекТЖСетевойРабочийСервер = НастройкиРабочегоСервера.КаталогНастроекТЖСетевой;
	ЭтотОбъект.КаталогНастроекТЖРабочийСервер = НастройкиРабочегоСервера.КаталогНастроекТЖ;
	ЭтотОбъект.КаталогВременныйРабочийСервер = НастройкиРабочегоСервера.КаталогВременный;
	ЭтотОбъект.КаталогОбменаДаннымиСетевойРабочийСервер = НастройкиРабочегоСервера.КаталогОбменаДаннымиСетевой;
	ЭтотОбъект.КаталогОбменаДаннымиРабочийСервер = НастройкиРабочегоСервера.КаталогОбменаДанными;
    ЭтотОбъект.ДиапазонПортовОтРабочийСервер = НастройкиРабочегоСервера.ДиапазонПортовОт;
    ЭтотОбъект.ДиапазонПортовДоРабочийСервер = НастройкиРабочегоСервера.ДиапазонПортовДо;
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        ЭтотОбъект.Элементы.НаименованиеРабочийСервер.Видимость = Истина;
        ЭтотОбъект.Элементы.НаименованиеНового.Видимость = Ложь;
    Иначе
        ЭтотОбъект.Элементы.НаименованиеРабочийСервер.Видимость = Ложь;
        ЭтотОбъект.Элементы.НаименованиеНового.Видимость = Истина;
    КонецЕсли;
    	
	ЗаполнитьФормуКонтрольныхПроцедур(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереКластер1С(ВидОбъектаКонтроля = Неопределено)
    
    Если ВидОбъектаКонтроля = Неопределено Тогда
        Объект.Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С;
    Иначе
        Объект.Владелец = ВидОбъектаКонтроля;
    КонецЕсли;
    	
	ПараметрыОтбора = Новый Структура("ОбъектКонтроля");
	ПараметрыОтбора.ОбъектКонтроля = Объект.Ссылка;
	НастройкиКластера = РегистрыСведений.ПараметрыКластеров.Получить(ПараметрыОтбора);
    
    // Заполняем параметры кластера на форме
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = "ИмяКластера";
    НовСтрока.Представление = "Имя кластера";
    НовСтрока.Значение = НастройкиКластера[НовСтрока.Параметр];
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = "АдресКластера";
    НовСтрока.Представление = "Компьютер";
    НовСтрока.Значение = НастройкиКластера[НовСтрока.Параметр];
    
    Если ЗначениеЗаполнено(НастройкиКластера.ПортАгентаКластера) Тогда
        НовСтрока.Значение = НовСтрока.Значение + ":" + Формат(НастройкиКластера.ПортАгентаКластера, "ЧГ=0");
    КонецЕсли;
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = "ПортКластера";
    НовСтрока.Представление = "IP порт";
    НовСтрока.Значение = НастройкиКластера[НовСтрока.Параметр];
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = "ЗащищенноеСоединение";
    НовСтрока.Представление = "Защищенное соединение";
    Если НастройкиКластера[НовСтрока.Параметр] =  0 Тогда
        НовСтрока.Значение = "выключено";
    ИначеЕсли НастройкиКластера[НовСтрока.Параметр] Тогда
        НовСтрока.Значение = "только соединение";
    ИначеЕсли НастройкиКластера[НовСтрока.Параметр] Тогда
        НовСтрока.Значение = "постоянно";
    КонецЕсли;
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = "ИнтервалПерезапускаРабочихПроцессов";
    НовСтрока.Представление = "Интервал перезапуска рабочих процессов";
    НовСтрока.Значение = НастройкиКластера[НовСтрока.Параметр];
    НовСтрока.Постфикс = "секунд";
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = "ДопустимыйОбъемПамяти";
    НовСтрока.Представление = "Допустимый объем памяти";
    НовСтрока.Значение = НастройкиКластера[НовСтрока.Параметр];
    НовСтрока.Постфикс = "KB";
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = "ИнтервалДопустимогоПревышенияОбъемаПамяти";
    НовСтрока.Представление = "Интервал допустимого превышения объема памяти";
    НовСтрока.Значение = НастройкиКластера[НовСтрока.Параметр];
    НовСтрока.Постфикс = "секунд";
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = "ДопустимоеОтклонениеОшибокСервера";
    НовСтрока.Представление = "Допустимое отклонение ошибок сервера";
    НовСтрока.Значение = НастройкиКластера[НовСтрока.Параметр];
    НовСтрока.Постфикс = "%";
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = "ПринудительноЗавершатьПроблемныеПроцессы";
    НовСтрока.Представление = "Принудительно завершать проблемные процессы";
    НовСтрока.Значение = НастройкиКластера[НовСтрока.Параметр];
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = "ВыключенныеПроцессыОстанавливатьЧерез";
    НовСтрока.Представление = "Выключенные процессы останавливать через";
    НовСтрока.Значение = НастройкиКластера[НовСтрока.Параметр];
    НовСтрока.Постфикс = "секунд";
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = "УровеньОтказоустойчивости";
    НовСтрока.Представление = "Уровень отказоустойчивости";
    НовСтрока.Значение = НастройкиКластера[НовСтрока.Параметр];
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = "РежимРаспределенияНагрузки";
    НовСтрока.Представление = "Режим распределения нагрузки";
    Если НастройкиКластера[НовСтрока.Параметр] = 0 Тогда
        НовСтрока.Значение = "Приоритет по производительности";
    ИначеЕсли НастройкиКластера[НовСтрока.Параметр] = 1 Тогда
        НовСтрока.Значение = "Приоритет по памяти";
    КонецЕсли;
            	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеХранилища = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(Объект.Ссылка);
		Если ДанныеХранилища = Неопределено Тогда
			ДанныеХранилища = Новый Структура("АдминистраторКластера, ПарольАдминистратораКластера", "", "");
		КонецЕсли;
		НастройкиКластера.Вставить("АдминистраторКластера", ДанныеХранилища.АдминистраторКластера);
		НастройкиКластера.Вставить("ПарольАдминистратораКластера", ДанныеХранилища.ПарольАдминистратораКластера);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		НастройкиКластера.Вставить("АдминистраторКластера", "");
		НастройкиКластера.Вставить("ПарольАдминистратораКластера", "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкиКластера.ТипПодключения) Тогда
		НастройкиПоУмолчанию = НастройкиСервер.НастройкиПоУмолчанию(Справочники.ВидыОбъектовКонтроля.КластерСерверов1С.Ссылка);
		Для Каждого ТекНастройка Из НастройкиПоУмолчанию Цикл
			НастройкиКластера[ТекНастройка.Имя] = ТекНастройка.Значение;
        КонецЦикла;
        
        НастройкиПоУмолчанию = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
        
        НастройкиКластера.Вставить("АдминистраторКластера", НастройкиПоУмолчанию.АдминистраторКластера);
		НастройкиКластера.Вставить("ПарольАдминистратораКластера", НастройкиПоУмолчанию.ПарольАдминистратораКластера);
		
		Если НЕ ЗначениеЗаполнено(НастройкиКластера.АдресКластера) Тогда
			НастройкиКластера.АдресКластера = "localhost";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НастройкиКластера.АдресСервераАдминистрирования) Тогда
			НастройкиКластера.АдресСервераАдминистрирования = "localhost";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НастройкиКластера.ПортАгентаКластера) ИЛИ НастройкиКластера.ПортАгентаКластера = 0 Тогда
			НастройкиКластера.ПортАгентаКластера = 1540;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НастройкиКластера.ПортКластера) ИЛИ НастройкиКластера.ПортКластера = 0 Тогда
			НастройкиКластера.ПортКластера = 1541;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НастройкиКластера.ПортСервераАдминистрирования) ИЛИ НастройкиКластера.ПортСервераАдминистрирования = 0 Тогда
			НастройкиКластера.ПортСервераАдминистрирования = 1545;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НастройкиКластера.ТипПодключения) Тогда
			НастройкиКластера.ТипПодключения = "RAS";
		КонецЕсли;
		
		ЗаполнитьФормуКонтрольныхПроцедур(Истина);
	Иначе
		ЗаполнитьФормуКонтрольныхПроцедур(Ложь);
	КонецЕсли;
	
	
	ЭтотОбъект.ТипПодключенияКластер1С = НастройкиКластера.ТипПодключения;
	ЭтотОбъект.АдминистраторКластераКластер1С = НастройкиКластера.АдминистраторКластера;
	ЭтотОбъект.ПарольАдминистратораКластераКластер1С = НастройкиКластера.ПарольАдминистратораКластера;
	
	ЭтотОбъект.АдресСервераАдминистрированияКластер1С = НастройкиКластера.АдресСервераАдминистрирования + ":" + Формат(НастройкиКластера.ПортСервераАдминистрирования, "ЧГ=0");
	ЭтотОбъект.КаталогЗапускаКлиентаАдминистрированияКластер1С = НастройкиКластера.КаталогЗапускаСервераАдминистрирования;
	
	ЭтотОбъект.АдресКластераКластер1С = НастройкиКластера.АдресКластера + ":" + Формат(НастройкиКластера.ПортАгентаКластера, "ЧГ=0");
	ЭтотОбъект.ПортКластераКластер1С = НастройкиКластера.ПортКластера;
	ЭтотОбъект.ВерсияПлатформыКластер1С = НастройкиКластера.ВерсияПлатформы;
	
	ЭтотОбъект.КластерОбъектаКонтроляКластер1С = НастройкиКластера.КластерОбъектаКонтроля;
	
	Если ЭтотОбъект.ТипПодключенияКластер1С = "RAS" Тогда
		ЭтотОбъект.Элементы.ГруппаНастройкиRAS.Видимость = Истина;
		ЭтотОбъект.Элементы.ГруппаНастройкиCOM.Видимость = Ложь;
	ИначеЕсли ЭтотОбъект.ТипПодключенияКластер1С = "COM" Тогда
		ЭтотОбъект.Элементы.ГруппаНастройкиRAS.Видимость = Ложь;
		ЭтотОбъект.Элементы.ГруппаНастройкиCOM.Видимость = Истина;
	КонецЕсли;
	
	ОбновитьРекомендации();
    
    // Поиск активного фонового задания записи структуры кластера
    ИдетЗаписьСтруктурыКластера = Ложь;
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        ОтборФЗ = Новый Структура("Ключ, Состояние", Объект.Ссылка.УникальныйИдентификатор(), СостояниеФоновогоЗадания.Активно);
        ФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФЗ);
        
        Если ФЗ.Количество() > 0 Тогда
            УникальныйИдентификаторЗаписиСтруктурыКластера = ФЗ[0].УникальныйИдентификатор;
            ИдетЗаписьСтруктурыКластера = Истина;
        КонецЕсли;
            
    КонецЕсли;
    
    Если НЕ ИдетЗаписьСтруктурыКластера Тогда
        ЗаполнитьДеревоКластера();
    КонецЕсли;
        
    ЛегендаДерева.ОтображатьЗаголовок = Ложь;
    ЛегендаДерева.ОтображатьЛегенду = Истина;
    
    ЛегендаДерева.ОбластьПостроения.Лево = 0;
    ЛегендаДерева.ОбластьПостроения.Верх = 0;
    ЛегендаДерева.ОбластьПостроения.Низ = 0;
    ЛегендаДерева.ОбластьПостроения.Право = 0;
    
    ЛегендаДерева.ОбластьЛегенды.Лево = 0.05;
    ЛегендаДерева.ОбластьЛегенды.Верх = 0;
    ЛегендаДерева.ОбластьЛегенды.Низ = 1;
    ЛегендаДерева.ОбластьЛегенды.Право = 1;
    
    Серия = ЛегендаДерева.Серии.Добавить("Существующий объект");
    Серия.Цвет = Новый Цвет(0,0,0);
    
    Серия = ЛегендаДерева.Серии.Добавить("Новый объект");
    Серия.Цвет = Новый Цвет(0,128,0);
    
    Серия = ЛегендаДерева.Серии.Добавить("Удаленный объект");
    Серия.Цвет = Новый Цвет(255,0,0);
    
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛокальныйКаталогВременныхФайлов(Команда)
	Попытка
		СоздатьЛокальныйКаталогВременныхФайловНаСервере(ЭтотОбъект.КаталогВременный);
	Исключение
		Сообщить(НСтр("ru = 'Ошибка! Локальный каталог временных файлов'") + ": " + ИнформацияОбОшибке().Описание);
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьЛокальныйКаталогВременныхФайловНаСервере(Путь)
	Каталог = Новый Файл(Путь);
	Если НЕ Каталог.Существует() Тогда
		ПутьДляПроверки = СтрЗаменить(Путь, "\", Символы.ПС);
		ПутьПроверка = "";
		
		Для НомерТекСтроки = 1 По СтрЧислоСтрок(ПутьДляПроверки) Цикл
			ПутьПроверка = ПутьПроверка + СтрПолучитьСтроку(ПутьДляПроверки, НомерТекСтроки) + "\";
			
			Каталог = Новый Файл(ПутьПроверка);
			Если НЕ Каталог.Существует() Тогда
				Попытка
					СоздатьКаталог(ПутьПроверка);
				Исключение
					ВызватьИсключение НСтр("ru = 'Не смог создать каталог ""'") + ПутьПроверка + """";
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ИзменитьДоступностьЭлементовДляКластера(ТипПодключения_Значение)
	
	Попытка
		Если ТипПодключения_Значение = "COM" Тогда 
			Элементы.АдресСервераАдминистрирования.Доступность				= Ложь;
			Элементы.ПортСервераАдминистрирования.Доступность 				= Ложь;
			Элементы.КаталогЗапускаСервераАдминистрирования.Доступность		= Ложь;
			Элементы.АдресКластера.Доступность 								= Истина;
			Элементы.ПортАгентаКластера.Доступность 						= Истина;						
		ИначеЕсли ТипПодключения_Значение = "RAS" Тогда                                  	
			Элементы.АдресСервераАдминистрирования.Доступность				= Истина;
			Элементы.ПортСервераАдминистрирования.Доступность 				= Истина;
			Элементы.КаталогЗапускаСервераАдминистрирования.Доступность		= Истина;
			Элементы.АдресКластера.Доступность 								= Ложь;
			Элементы.ПортАгентаКластера.Доступность 						= Ложь;			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.КаталогЗапускаСервераАдминистрирования) Тогда
			ПараметрыАдминистрированияКластера = ОбщийКлиентСервер.СформироватьПараметрыАдминистрированияКластера(
			ЭтотОбъект.ТипПодключения, ЭтотОбъект.АдресКластера, ЭтотОбъект.ПортАгентаКластера,
			ЭтотОбъект.АдресСервераАдминистрирования, ЭтотОбъект.ПортСервераАдминистрирования, 
			ЭтотОбъект.ПортКластера, ЭтотОбъект.АдминистраторКластера, ЭтотОбъект.ПарольАдминистратораКластера, 
			ЭтотОбъект.ВерсияПлатформы, "");
			
			ЭтотОбъект.КаталогЗапускаСервераАдминистрирования = СформироватьКаталогЗапускаRASНАСервере(ПараметрыАдминистрированияКластера);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.АдресКластера) Тогда			
			ЭтотОбъект.АдресКластера = "localhost";
		КонецЕсли;	
	Исключение
		// значит не объект контроля
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьКаталогЗапускаRASНАСервере(ПараметрыАдминистрированияКластера)
	Возврат АдминистрированиеКластераRAS.СформироватьКаталогЗапускаRAS(ПараметрыАдминистрированияКластера);	
КонецФункции

&НаКлиенте
Процедура ТипПодключенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ИзменитьДоступностьЭлементовДляКластера(ВыбранноеЗначение);	
КонецПроцедуры

&НаКлиенте
// Необходима для прохождения проверки конфигурации по поиску
// неиспользуемых процедур и функций.
// Процедуры и функции подключаются программно, см. НастройкиСервер.ЗаполнитьПоляДинамическихНастроекНаФорме.
//
Процедура ЗаглушкаПроверкиКонфигурацииНеиспользуемыеПроцедурыИФункции() Экспорт
	Если Истина = Ложь Тогда
		ИмяБазыВКластереНачалоВыбора(,,);
		ИмяБазыВКластереОбработкаВыбора(,,);
		ИмяКомпьютераНачалоВыбора(,,);
		ИмяКомпьютераОбработкаВыбора(,,);
		КластерОбъектаКонтроляОбработкаВыбора(,,);
		ОбработкаНачалоВыбора(,,);
		ОбработкаНачалоВыбораКластера(,,);
		ОбработкаНачалоВыбораКластераДляИнформационнойБазы(,,);
		ОбработкаНачалоВыбораКластераДляСервера(,,);
		ОбработкаНачалоВыбораКластераОбъектаКонтроля(,,);
		ТипПодключенияОбработкаВыбора(,,);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыКластеров()
    
    ПараметрыКластеров = Новый Структура;
    ПараметрыКластеров.Вставить("ТипПодключения", ЭтотОбъект.ТипПодключенияКластер1С);
    
    НастройкиАгентаКластера = НастройкиАгентаКластера(ЭтотОбъект.АдресСервераАдминистрированияКластер1С);
    ПараметрыКластеров.Вставить("АдресСервераАдминистрирования", НастройкиАгентаКластера.Сервер);
    ПараметрыКластеров.Вставить("ПортСервераАдминистрирования", Число(НастройкиАгентаКластера.Порт));
    
    ПараметрыКластеров.Вставить("КаталогЗапускаСервераАдминистрирования", ЭтотОбъект.КаталогЗапускаКлиентаАдминистрированияКластер1С);
    
    НастройкиСервераАдминистрирования = НастройкиСервераАдминистрирования(ЭтотОбъект.АдресКластераКластер1С);
    ПараметрыКластеров.Вставить("АдресКластера", НастройкиСервераАдминистрирования.Сервер);
    ПараметрыКластеров.Вставить("ПортАгентаКластера", НастройкиСервераАдминистрирования.Порт);
    
    ПараметрыКластеров.Вставить("КластерОбъектаКонтроля", ЭтотОбъект.КластерОбъектаКонтроляКластер1С);
    ПараметрыКластеров.Вставить("ПортКластера", ЭтотОбъект.ПортКластераКластер1С);
    ПараметрыКластеров.Вставить("АдминистраторКластера", ЭтотОбъект.АдминистраторКластераКластер1С);
    ПараметрыКластеров.Вставить("ПарольАдминистратораКластера", ЭтотОбъект.ПарольАдминистратораКластераКластер1С);
    ПараметрыКластеров.Вставить("ВерсияПлатформы", ЭтотОбъект.ВерсияПлатформыКластер1С);
            
    Возврат ПараметрыКластеров;
    
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьНастройкиПоУмолчаниюКластер1С(ПараметрыЗаписи)
    
    ДанныеХранилища = Новый Структура("АдминистраторКластера, ПарольАдминистратораКластера");
	ДанныеХранилища.АдминистраторКластера = ПараметрыЗаписи.АдминистраторКластера;
	ДанныеХранилища.ПарольАдминистратораКластера = ПараметрыЗаписи.ПарольАдминистратораКластера;
	
	ПараметрыЗаписи.Удалить("АдминистраторКластера");
	ПараметрыЗаписи.Удалить("ПарольАдминистратораКластера");
    
    МенеджерЗаписи = РегистрыСведений.ПараметрыКластеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектКонтроля = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С;
	Для Каждого ТекПараметр Из ПараметрыЗаписи Цикл
		МенеджерЗаписи[ТекПараметр.Ключ] = ТекПараметр.Значение;
	КонецЦикла;
	МенеджерЗаписи.Записать(Истина);
    
    УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.БезопасноеХранилище.ЗаписатьДанные(Справочники.ВидыОбъектовКонтроля.КластерСерверов1С, ДанныеХранилища);
	УстановитьПривилегированныйРежим(Ложь);
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНастройкиКластер1С(Настройки)
    
    Результат = Новый Структура("РезультатВыполнения, ОписаниеОшибки", Ложь, "");
    
    Попытка
        ПараметрыАдминистрированияКластера = ОбщийКлиентСервер.СформироватьПараметрыАдминистрированияКластера(
        Настройки.ТипПодключения,
        Настройки.АдресКластера,
        Настройки.ПортАгентаКластера,
        Настройки.АдресСервераАдминистрирования,
        Настройки.ПортСервераАдминистрирования,
        Настройки.ПортКластера,
        Настройки.АдминистраторКластера,
        Настройки.ПарольАдминистратораКластера,
        Настройки.ВерсияПлатформы,
        Настройки.КаталогЗапускаСервераАдминистрирования);
        
        Если Настройки.ТипПодключения = "RAS" Тогда
            
            Если ЗначениеЗаполнено(Настройки.КаталогЗапускаСервераАдминистрирования) Тогда
                
                ИдентификаторКластера = АдминистрированиеКластераRAS.ПолучитьКластер(ПараметрыАдминистрированияКластера);
                СписокИБRAS = АдминистрированиеКластераRAS.ПолучитьИнформационныеБазы(ИдентификаторКластера, ПараметрыАдминистрированияКластера);
                
            Иначе
                
                ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не заполнен каталог клиента администрирования!", "КаталогЗапускаКлиентаАдминистрированияКластер1С", Неопределено);
                Результат.РезультатВыполнения = Ложь;
                Возврат Результат;
                
            КонецЕсли;
            
        ИначеЕсли Настройки.ТипПодключения = "COM" Тогда
            Если ЗначениеЗаполнено(Настройки.ПортАгентаКластера) Тогда
                АдресКластераПолный = Настройки.АдресКластера + ":" + Формат(Настройки.ПортАгентаКластера, "ЧГ=0");
            Иначе
                АдресКластераПолный = Настройки.АдресКластера;
            КонецЕсли;
            РезультатCOM = КонтрольПамятиСервер.ПроверитьСоединениеСКластером(АдресКластераПолный, Настройки.ПортКластера, Настройки.АдминистраторКластера, Настройки.ПарольАдминистратораКластера, Настройки.ВерсияПлатформы);
                        
        КонецЕсли;
        
        Результат.РезультатВыполнения = Истина;
        
    Исключение
        
        Результат.ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        
    КонецПопытки;
    
    Возврат Результат;
        
КонецФункции

&НаКлиенте
Процедура СформироватьНаименование()
    
    Если
        НЕ ЗначениеЗаполнено(Объект.Наименование)
        И ЗначениеЗаполнено(ЭтотОбъект.Оборудование)
        И ЗначениеЗаполнено(ЭтотОбъект.ДиапазонПортовОтРабочийСервер)
        И ЗначениеЗаполнено(ЭтотОбъект.ДиапазонПортовДоРабочийСервер) 
    Тогда
        Объект.Наименование = Строка(ЭтотОбъект.Оборудование) + ":" + Формат(ЭтотОбъект.ДиапазонПортовОтРабочийСервер, "ЧН=0; ЧГ=0") + "-" + Формат(ЭтотОбъект.ДиапазонПортовДоРабочийСервер, "ЧН=0; ЧГ=0"); 
        ЭтотОбъект.НаименованиеНового = Объект.Наименование;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНовогоПриИзменении(Элемент)
    Объект.Наименование = ЭтотОбъект.НаименованиеНового;
КонецПроцедуры

&НаСервереБезКонтекста
Функция Кластер1САвтоПодборНаСервере(Наименование, ПлощадкаЭксплуатации, Корзина)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 10
    |	СправочникОбъектыКонтроля.Ссылка
    |ИЗ
    |	Справочник.ОбъектыКонтроля КАК СправочникОбъектыКонтроля
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |	Справочник.ПлощадкиЭксплуатации КАК СправочникПлощадкиЭксплуатации
    |ПО
    |	СправочникПлощадкиЭксплуатации.ЕдиницаКонтроля = СправочникОбъектыКонтроля.Ссылка
    |	И СправочникПлощадкиЭксплуатации.Родитель <> &Корзина
    |ГДЕ
    |	СправочникОбъектыКонтроля.ПлощадкаЭксплуатации = &ПлощадкаЭксплуатации
    |	И СправочникОбъектыКонтроля.Владелец = &Кластер1С
    |   И СправочникОбъектыКонтроля.Наименование ПОДОБНО &Наименование
    |";
    
    Запрос.УстановитьПараметр("ПлощадкаЭксплуатации", ПлощадкаЭксплуатации);
    Запрос.УстановитьПараметр("Корзина", Корзина);
    Запрос.УстановитьПараметр("Кластер1С", Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
    Запрос.УстановитьПараметр("Наименование", Наименование + "%");
    
    Результат = Запрос.Выполнить();
    
    ДанныеВыбора = Новый СписокЗначений;
    ДанныеВыбора.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
    
    Возврат ДанныеВыбора;
    
КонецФункции

&НаКлиенте
Процедура ОбновитьСтруктуруКластера(Команда)
    
    Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
        
        ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьСтруктуруКластераВопросЗавершение", ЭтотОбъект);
        ТекстВопроса = НСтр("ru = 'Для обновления необходимо записать изменения. 
        |Продолжить?'");
        ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);
        
    Иначе
        
        ОбновитьСтруктуруКластераОбщая();
                        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруКластераВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Записать();
        ОбновитьСтруктуруКластераОбщая();
    КонецЕсли;
            
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруКластераОбщая()
    
    Элементы.ЛегендаДерева.Видимость = Истина;
    Элементы.ГруппаСостояниеЗаписиСтруктурыКластера.Видимость = Ложь;
    
    Элементы.СтруктураКластераОбновитьСтруктуруКластера.Доступность = Ложь;
    Элементы.СтруктураКластераЗаписатьСтруктуру.Доступность = Ложь;
    ЗаполнитьДеревоКластера();
    
    ПодключитьОбработчикОжидания("СтруктураКластераЗавершение", 1 ,Истина);
            
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКластера()
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        АдресХранилищаПолученияСтруктурыКластера = ПоместитьВоВременноеХранилище(Неопределено, ЭтотОбъект.УникальныйИдентификатор);
        
        ПараметрыЗапуска = Новый Массив;
        ПараметрыЗапуска.Добавить(Объект.Ссылка);
        ПараметрыЗапуска.Добавить(АдресХранилищаПолученияСтруктурыКластера);
        
        ФЗ = ФоновыеЗадания.Выполнить("АдминистрированиеКластераRAS.СтруктураКластера", ПараметрыЗапуска, ЭтотОбъект.УникальныйИдентификатор, "Кластер 1С """ + Объект.Наименование +""". Получение структуры.");
        УникальныйИдентификаторПолученияСтруктурыКластера = ФЗ.УникальныйИдентификатор;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СтруктураКластераЗавершение() Экспорт
    
    СостояниеФЗ = СтруктураКластераЗавершениеНаСервере(УникальныйИдентификаторПолученияСтруктурыКластера, АдресХранилищаПолученияСтруктурыКластера);
    
    Если СостояниеФЗ = "Активно" Тогда
        ПодключитьОбработчикОжидания("СтруктураКластераЗавершение", 1 ,Истина);
    ИначеЕсли СостояниеФЗ = "Завершено" Тогда
        Элементы.СтруктураКластераОбновитьСтруктуруКластера.Доступность = Истина;
        Элементы.СтруктураКластераЗаписатьСтруктуру.Доступность = Истина;
        СтруктураКластераПолучена();
        
        Если ЗаписатьСтруктуруКластера Тогда
            ЗаписатьСтруктуруКластера = Ложь;
            ЗаписатьСтруктуруОбщая();
            Записать();
        КонецЕсли;
        
        Если ЗакрытьПослеОбновленияСтруктурыКластера Тогда
            Закрыть();
        КонецЕсли;
    
    Иначе
        Элементы.СтруктураКластераОбновитьСтруктуруКластера.Доступность = Истина;
        Элементы.СтруктураКластераЗаписатьСтруктуру.Доступность = Истина;
        СтруктураКластераНеПолучена();
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Процедура СтруктураКластераНеПолучена()
    
    ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторПолученияСтруктурыКластера);
    Если ФЗ <> Неопределено Тогда
        Кластер1С = ЭтотОбъект.СтруктураКластера.ПолучитьЭлементы()[0];
        Кластер1С.Наименование = Строка(ФЗ.Состояние);
        Кластер1С.ПараметрЗначение = ПодробноеПредставлениеОшибки(ФЗ.ИнформацияОбОшибке);
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура СтруктураКластераПолучена(Редактировать = Истина)
    
    СтруктураКластераРезультат = ПолучитьИзВременногоХранилища(АдресХранилищаПолученияСтруктурыКластера);
    
    ИнформационныеБазы = ПолучитьИнформационныеБазы(Объект.Ссылка, Объект.ПлощадкаЭксплуатации, СтруктураКластераРезультат.ИнформационныеБазы);
    РабочиеСервера1С = ПолучитьРабочиеСервера(Объект.Ссылка, Объект.ПлощадкаЭксплуатации, СтруктураКластераРезультат.РабочиеСервера1С);
    
    Кластер1С = ЭтотОбъект.СтруктураКластера.ПолучитьЭлементы()[0];
    Кластер1С.Редактировать = Редактировать;
    Кластер1С.Наименование = Объект.Наименование;
    ЭлементыКластера = Кластер1С.ПолучитьЭлементы();
    
    Если ЭлементыКластера.Количество() > 0 Тогда
        
        ИнформационныеБазыКластера = ЭлементыКластера[0].ПолучитьЭлементы();
        ИнформационныеБазыКластера.Очистить();
        
        РабочиеСерверы1СКластера = ЭлементыКластера[1].ПолучитьЭлементы();
        РабочиеСерверы1СКластера.Очистить();
        
    Иначе
        
        ИнформационныеБазыКластера = ЭлементыКластера.Добавить();
        ИнформационныеБазыКластера.Редактировать = Редактировать;
        ИнформационныеБазыКластера.ИндексКартинки = 22;
        ИнформационныеБазыКластера.Наименование = "Информационные базы";
        
        РабочиеСерверы1СКластера = ЭлементыКластера.Добавить();
        РабочиеСерверы1СКластера.Редактировать = Редактировать;
        РабочиеСерверы1СКластера.ИндексКартинки = 9;
        РабочиеСерверы1СКластера.Наименование = "Рабочие серверы 1С";
        
        ИнформационныеБазыКластера = ИнформационныеБазыКластера.ПолучитьЭлементы();
        РабочиеСерверы1СКластера = РабочиеСерверы1СКластера.ПолучитьЭлементы();
        
    КонецЕсли;
        
    Для Каждого ТекИБ Из ИнформационныеБазы Цикл
        
        ИнформационнаяБаза = ИнформационныеБазыКластера.Добавить();
        ИнформационнаяБаза.Редактировать = Редактировать;
        ИнформационнаяБаза.ИндексКартинки = 23;
        ИнформационнаяБаза.Наименование = ТекИБ["Name"];
        ИнформационнаяБаза.Ссылка = ТекИБ["Ссылка"];
        Если ЗначениеЗаполнено(ТекИБ["Ссылка"]) И ЗначениеЗаполнено(ТекИБ["Name"]) Тогда
            ИнформационнаяБаза.ЦветНаименования = 0; // Черный
        ИначеЕсли НЕ ЗначениеЗаполнено(ТекИБ["Ссылка"]) И ЗначениеЗаполнено(ТекИБ["Name"]) Тогда
            ИнформационнаяБаза.ЦветНаименования = 1; // Зеленый
        ИначеЕсли ЗначениеЗаполнено(ТекИБ["Ссылка"]) И НЕ ЗначениеЗаполнено(ТекИБ["Name"]) Тогда
            ИнформационнаяБаза.ЦветНаименования = 2; // Красный
        КонецЕсли;
        
    КонецЦикла;
        
    Для Каждого ТекРабочийСервер Из РабочиеСервера1С Цикл
        
        РабочийСервер1С = РабочиеСерверы1СКластера.Добавить();
        РабочийСервер1С.Редактировать = Редактировать;
        РабочийСервер1С.ИндексКартинки = 10;
        РабочийСервер1С.Наименование = ТекРабочийСервер["HostName"];
        РабочийСервер1С.Ссылка = ТекРабочийСервер["Ссылка"];
        Если ЗначениеЗаполнено(ТекРабочийСервер["Ссылка"]) И ЗначениеЗаполнено(ТекРабочийСервер["HostName"]) Тогда
            РабочийСервер1С.ЦветНаименования = 0; // Черный
        ИначеЕсли НЕ ЗначениеЗаполнено(ТекРабочийСервер["Ссылка"]) И ЗначениеЗаполнено(ТекРабочийСервер["HostName"]) Тогда
            РабочийСервер1С.ЦветНаименования = 1; // Зеленый
        ИначеЕсли ЗначениеЗаполнено(ТекРабочийСервер["Ссылка"]) И НЕ ЗначениеЗаполнено(ТекРабочийСервер["HostName"]) Тогда
            РабочийСервер1С.ЦветНаименования = 2; // Красный
        КонецЕсли;
        
        РабочийСервер1СПараметры = РабочийСервер1С.ПолучитьЭлементы();
        
        РабочийСервер1СПараметр = РабочийСервер1СПараметры.Добавить();
        РабочийСервер1СПараметр.ИндексКартинки = -1;
        РабочийСервер1СПараметр.Наименование = "Оборудование";
        РабочийСервер1СПараметр.ПараметрЗначение = ТекРабочийСервер["Оборудование"];
        РабочийСервер1СПараметр.Редактировать = Истина;
        
        РабочийСервер1СПараметр = РабочийСервер1СПараметры.Добавить();
        РабочийСервер1СПараметр.ИндексКартинки = -1;
        РабочийСервер1СПараметр.Наименование = "Хост";
        РабочийСервер1СПараметр.ПараметрЗначение = ТекРабочийСервер["HostName"];
        РабочийСервер1СПараметр.Редактировать = Истина;
                
        РабочийСервер1СПараметр = РабочийСервер1СПараметры.Добавить();
        РабочийСервер1СПараметр.ИндексКартинки = -1;
        РабочийСервер1СПараметр.Наименование = "Диапазон IP портов";
        РабочийСервер1СПараметр.ПараметрЗначение = ТекРабочийСервер["PortRange"];
        РабочийСервер1СПараметр.Редактировать = Истина;
                
    КонецЦикла;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураКластераЗавершениеНаСервере(УникальныйИдентификаторФоновогоЗадания, АдресХранилища) Экспорт
    
    СостоянияФЗ = Новый Соответствие;
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.Активно, "Активно");
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.Завершено, "Завершено");
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.ЗавершеноАварийно, "ЗавершеноАварийно");
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.Отменено, "Отменено");
    
    
    СостояниеФЗ = Неопределено;
    
    ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторФоновогоЗадания);
    Если ФЗ <> Неопределено Тогда
        СостояниеФЗ = СостоянияФЗ[ФЗ.Состояние];
    КонецЕсли;
    
    Возврат СостояниеФЗ;
    
КонецФункции

&НаСервере
Процедура ЗаписатьСтруктуруНаСервере(ПараметрыЗаписиСтруктурыКластера)
    
    ПараметрыЗаписи = СтруктураЗаписиКластера();
    
    ПараметрыСерверов = ОбработатьПараметрыРабочихСерверовКластера(ПараметрыЗаписи.ПараметрыРабочихСерверов);
    ПараметрыИБ = ОбработатьПараметрыИнформационныхБазКластера(ПараметрыЗаписи.ПараметрыИнформационныхБаз);
    
    ПараметрыЗаписиСтруктурыКластера.Вставить("ПараметрыСерверов", ПараметрыСерверов);
    ПараметрыЗаписиСтруктурыКластера.Вставить("ПараметрыИБ", ПараметрыИБ);
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить(ПараметрыЗаписиСтруктурыКластера);
    
    ФЗ = ФоновыеЗадания.Выполнить("АдминистрированиеКластераRAS.СтруктураКластераЗаписать", ПараметрыЗапуска, Объект.Ссылка.УникальныйИдентификатор(), "Кластер 1С """ + Объект.Наименование +""". Запись структуры.");
    УникальныйИдентификаторЗаписиСтруктурыКластера = ФЗ.УникальныйИдентификатор;
    
КонецПроцедуры

&НаСервере
Функция СтруктураЗаписиКластера()
    
    ПараметрыЗаписи = Новый Структура;
    
    Если Объект.Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С Тогда
        
        ЭлементКластера = ЭтотОбъект.СтруктураКластера.ПолучитьЭлементы();
        
        Если ЭлементКластера.Количество() > 0 Тогда
            ЭлементыКластера = ЭлементКластера[0].ПолучитьЭлементы();
            
            #Область ИнформационныеБазыКластера
            
            Если ЭлементыКластера.Количество() > 0 Тогда
                
                ИнформационныеБазыКластера = ЭлементыКластера[0].ПолучитьЭлементы(); 
                
                ИнформационныеБазыПараметрыЗаписи = Новый Массив;
                
                Для Каждого ИнформационнаяБазаКластера Из ИнформационныеБазыКластера Цикл
                    
                    ИнформационнаяБазаПараметрЗаписи = Новый Структура;
                    ИнформационнаяБазаПараметрЗаписи.Вставить("Наименование", ИнформационнаяБазаКластера.Наименование);
                    ИнформационнаяБазаПараметрЗаписи.Вставить("Ссылка", ИнформационнаяБазаКластера.Ссылка);
                    ИнформационнаяБазаПараметрЗаписи.Вставить("Редактировать", ИнформационнаяБазаКластера.Редактировать);
                    
                    ИнформационныеБазыПараметрыЗаписи.Добавить(ИнформационнаяБазаПараметрЗаписи);
                    
                КонецЦикла;
                
                ПараметрыЗаписи.Вставить("ПараметрыИнформационныхБаз", ИнформационныеБазыПараметрыЗаписи);
                
            КонецЕсли;
            
            #КонецОбласти
            
            #Область РабочиеСервераКластера
            
            Если ЭлементыКластера.Количество() > 1 Тогда
                
                РабочиеСервераКластера = ЭлементыКластера[1].ПолучитьЭлементы();
                
                РабочиеСервераПараметрыЗаписи = Новый Массив;
                
                Для Каждого РабочийСерверКластера Из РабочиеСервераКластера Цикл
                    
                    РабочийСерверПараметрыЗаписи = Новый Структура;
                    РабочийСерверПараметрыЗаписи.Вставить("Наименование", РабочийСерверКластера.Наименование);
                    РабочийСерверПараметрыЗаписи.Вставить("Ссылка", РабочийСерверКластера.Ссылка);
                    РабочийСерверПараметрыЗаписи.Вставить("Редактировать", РабочийСерверКластера.Редактировать);
                    
                    ПараметрыРабочегоСервераКластера = РабочийСерверКластера.ПолучитьЭлементы();
                    Для Каждого ТекПараметр Из ПараметрыРабочегоСервераКластера Цикл
                        
                        Если ТекПараметр.Наименование = "Оборудование" Тогда
                            РабочийСерверПараметрыЗаписи.Вставить("Оборудование", ТекПараметр.ПараметрЗначение);
                            РабочийСерверПараметрыЗаписи.Вставить("ОборудованиеСсылка", ТекПараметр.Ссылка);
                        ИначеЕсли ТекПараметр.Наименование = "Хост" Тогда
                            РабочийСерверПараметрыЗаписи.Вставить("Хост", ТекПараметр.ПараметрЗначение);
                        ИначеЕсли ТекПараметр.Наименование = "Диапазон IP портов" Тогда
                            РабочийСерверПараметрыЗаписи.Вставить("ДиапазонПортов", ТекПараметр.ПараметрЗначение);
                        КонецЕсли;
                        
                    КонецЦикла;
                    
                    РабочиеСервераПараметрыЗаписи.Добавить(РабочийСерверПараметрыЗаписи);
                    
                КонецЦикла;
                
                ПараметрыЗаписи.Вставить("ПараметрыРабочихСерверов", РабочиеСервераПараметрыЗаписи); 
                
            КонецЕсли;
            
            #КонецОбласти
            
        КонецЕсли;
        
    КонецЕсли;
    
    Возврат ПараметрыЗаписи;
    
КонецФункции

&НаКлиенте
Процедура ЗаписатьСтруктуруКластераЗавершение() Экспорт
    
    РезультатПроверки = ЗаписатьСтруктуруКластераЗавершениеНаСервере(ПараметрыЗаписиСтруктурыКластера, УникальныйИдентификаторЗаписиСтруктурыКластера);
    
    Если РезультатПроверки.Состояние = "Активно" Тогда
        
        Если РезультатПроверки.Настройки <> Неопределено Тогда
            СостояниеЗаписиСтруктурыКластера = РезультатПроверки.Настройки.Значение;
            СостояниеЗаписиСтруктурыКластераСтрока = РезультатПроверки.Настройки.Описание;
        КонецЕсли;
        
        ПодключитьОбработчикОжидания("ЗаписатьСтруктуруКластераЗавершение", 1, Истина);
        
    ИначеЕсли РезультатПроверки.Состояние = "Завершено" Тогда
        
        Если РезультатПроверки.Настройки <> Неопределено Тогда
            СостояниеЗаписиСтруктурыКластера = РезультатПроверки.Настройки.Значение;
            СостояниеЗаписиСтруктурыКластераСтрока = РезультатПроверки.Настройки.Описание;
        КонецЕсли;
        
        ИдетЗаписьСтруктурыКластера = Ложь;
        ОбновитьСтруктуруКластера(Неопределено);
                    
    Иначе
        
        ИдетЗаписьСтруктурыКластера = Ложь;
        ОбновитьСтруктуруКластера(Неопределено);
        
    КонецЕсли;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьСтруктуруКластераЗавершениеНаСервере(ПараметрыЗаписиСтруктурыКластера, УникальныйИдентификаторЗаписиСтруктурыКластера)
    
    Результат = Новый Структура("Состояние, Настройки", Неопределено, Неопределено);
    
    СостоянияФЗ = Новый Соответствие;
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.Активно, "Активно");
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.Завершено, "Завершено");
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.ЗавершеноАварийно, "ЗавершеноАварийно");
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.Отменено, "Отменено");
        
    СостояниеФЗ = Неопределено;
    
    ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗаписиСтруктурыКластера);
    Если ФЗ <> Неопределено Тогда
        Результат.Состояние = СостоянияФЗ[ФЗ.Состояние];
    КонецЕсли;
    
    Если ФЗ <> Неопределено И ФЗ.Состояние = СостояниеФоновогоЗадания.Активно ИЛИ ФЗ.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
        
        ПараметрыОтбора = Новый Структура("КлючОбъекта, КлючНастроек, Пользователь",
            ПараметрыЗаписиСтруктурыКластера.КлючОбъекта,
            ПараметрыЗаписиСтруктурыКластера.КлючНастроек,
            ПараметрыЗаписиСтруктурыКластера.Пользователь);
        
        УстановитьПривилегированныйРежим(Истина);
        НастройкиВыборка = ХранилищеОбщихНастроек.Выбрать(ПараметрыОтбора);
        УстановитьПривилегированныйРежим(Ложь);
        
        Пока НастройкиВыборка.Следующий() Цикл
            
            Если ЗначениеЗаполнено(НастройкиВыборка.Настройки) Тогда
                Результат.Настройки = НастройкиВыборка.Настройки;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрытьМоя(Команда)
    
    Записать(Новый Структура("Закрыть", Истина));
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        Закрыть();
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти







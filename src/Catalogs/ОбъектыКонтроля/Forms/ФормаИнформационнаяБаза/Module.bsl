
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        Настройки = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(Объект.Ссылка);
        НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(Объект.Ссылка);
    Иначе
        Объект.Владелец = Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза;
        Настройки = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.ИнформационнаяБаза);
        НастройкиКонтроля = Новый Соответствие;
    КонецЕсли;
    
    Если ЭтотОбъект.Параметры.Свойство("ЗначенияЗаполнения") И ЭтотОбъект.Параметры.ЗначенияЗаполнения.Свойство("Кластер1С") Тогда
        ЭтотОбъект.Кластер1С = ЭтотОбъект.Параметры.ЗначенияЗаполнения.Кластер1С;
    Иначе
        ЭтотОбъект.Кластер1С = Настройки.Кластер;
    КонецЕсли;
    
    ЗаполнитьПараметры(Настройки, НастройкиКонтроля);
    
    Если ЗначениеЗаполнено(ЭтотОбъект.Кластер1С) И ЭтотОбъект.Кластер1С.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        АгентОперативныйРежим(ЭтотОбъект.Кластер1С, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    
    ПараметрыИнформационнойБазы = Новый Структура;
    ПараметрыИнформационнойБазы.Вставить("Кластер", ЭтотОбъект.Кластер1С);
    ПараметрыИнформационнойБазы.Вставить("ИмяБазыВКластере", ЭтотОбъект.ИнформационнаяБаза);
    ПараметрыИнформационнойБазы.Вставить("Пользователь", ЭтотОбъект.Пользователь);
    ПараметрыИнформационнойБазы.Вставить("Пароль", ЭтотОбъект.Пароль);
    ПараметрыЗаписи.Вставить("ПараметрыИнформационнойБазы", ПараметрыИнформационнойБазы);
    
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    ТекущийОбъект.ДополнительныеСвойства.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
    
    Настройки = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(ТекущийОбъект.Ссылка);
    ПараметрыЗаписи.Вставить("ПользовательБыл", Настройки.Пользователь);
    ПараметрыЗаписи.Вставить("ПарольБыл", Настройки.Пароль);
    
    НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(ТекущийОбъект.Ссылка);
    ПараметрыЗаписи.Вставить("НастройкиКонтроляБыли", НастройкиКонтроля);
    ПараметрыЗаписи.Вставить("НастройкиБыли", Настройки);
    
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    Кластер = ПараметрыЗаписи.ПараметрыИнформационнойБазы.Кластер;
    
    Настройки = Новый Структура;
    Настройки.Вставить("Кластер", Кластер);
    Настройки.Вставить("ИмяБазыВКластере", ПараметрыЗаписи.ПараметрыИнформационнойБазы.ИмяБазыВКластере);
    Настройки.Вставить("Пользователь", ПараметрыЗаписи.ПараметрыИнформационнойБазы.Пользователь);
    Настройки.Вставить("Пароль", ПараметрыЗаписи.ПараметрыИнформационнойБазы.Пароль);
    
    НастройкиКонтроля = Новый Соответствие;
    
    Для Каждого ТекПараметр Из ЭтотОбъект.ПараметрыОбъекта Цикл
        
        Если ТекПараметр.Параметр = "ЗащищенноеСоединение" Тогда
            Настройки.Вставить(ТекПараметр.Параметр, ?(ТекПараметр.Значение = "выключено", 0, 1));
        Иначе
            Настройки.Вставить(ТекПараметр.Параметр, ТекПараметр.Значение);
        КонецЕсли;
        НастройкиКонтроля.Вставить(ТекПараметр.Параметр, ТекПараметр.Контроль);
                
    КонецЦикла;
    
    РегистрыСведений.ПараметрыИнформационныхБаз.ЗаписатьНастройки(ТекущийОбъект.Ссылка, Настройки);
    РегистрыСведений.КонтрольПараметровОбъектов.ЗаписатьНастройки(ТекущийОбъект.Ссылка, НастройкиКонтроля);
    
    ЗаписатьКонтрольныеПроцедуры(ТекущийОбъект.Ссылка);
    
    Если
        Кластер.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП
        И 
        (
            ПараметрыЗаписи.ПользовательБыл <> ПараметрыЗаписи.ПараметрыИнформационнойБазы.Пользователь
            ИЛИ ПараметрыЗаписи.ПарольБыл <> ПараметрыЗаписи.ПараметрыИнформационнойБазы.Пароль
        )
    Тогда
    
        Команда = Новый Соответствие;
        Команда.Вставить("cluster", Кластер.УникальныйИдентификаторОбъекта);
        
        
        ИнформационнаяБазаСоответствие = Новый Соответствие;
        ИнформационнаяБазаСоответствие.Вставить("infoBase", Объект.УникальныйИдентификаторОбъекта);
                                
        Аутентификация = Новый Соответствие;
        Аутентификация.Вставить("prm1", "*****");
        Аутентификация.Вставить("prm2", "*****");
        ИнформационнаяБазаСоответствие.Вставить("prm", Аутентификация);
        
        Команда.Вставить("infoBaseCommand", ИнформационнаяБазаСоответствие);
        
        Для Каждого АгентКИП Из Кластер.Подключение.АгентКИППараметры Цикл 
            РегистрыСведений.КомандыАгентаКИП.ДобавитьКоманду(АгентКИП.АгентКИП, Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
        КонецЦикла;
        
    КонецЕсли;
    
    Если НастройкиКонтроляИзменены(НастройкиКонтроля, ПараметрыЗаписи.НастройкиКонтроляБыли, Настройки, ПараметрыЗаписи.НастройкиБыли) Тогда
        
        Команда = Новый Соответствие;
        Команда.Вставить("cluster", Кластер.УникальныйИдентификаторОбъекта);
        
        ИнформационнаяБазаСоответствие = Новый Соответствие;
        ИнформационнаяБазаСоответствие.Вставить("infoBase", Объект.УникальныйИдентификаторОбъекта);
        ИнформационнаяБазаСоответствие.Вставить("сontrolParametrs", АгентКИПвЦКК.КомандаНастройкиКонтроляИнфоБаза(НастройкиКонтроля, Настройки)); 
        Команда.Вставить("infoBaseCommand", ИнформационнаяБазаСоответствие);
                
        Для Каждого АгентКИП Из Кластер.Подключение.АгентКИППараметры Цикл
            РегистрыСведений.КомандыАгентаКИП.ДобавитьКоманду(АгентКИП.АгентКИП, Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
        КонецЦикла;
                
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
    
    Если НЕ ЗавершениеРаботы Тогда
        АгентОперативныйРежим(ЭтотОбъект.Кластер1С, Ложь);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбъектаЗначениеПриИзменении(Элемент)
    Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеПараметры(Команда)
    
    Для Каждого ТекСтрока Из ЭтотОбъект.ПараметрыОбъекта Цикл
        ТекСтрока.Контроль = Истина;
    КонецЦикла;
    
    Модифицированность = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеПараметры(Команда)
    
    Для Каждого ТекСтрока Из ЭтотОбъект.ПараметрыОбъекта Цикл
        ТекСтрока.Контроль = Ложь;
    КонецЦикла;
    
    Модифицированность = Истина;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИнформационнаяБазаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    Попытка
        
        ИнформационныеБазы = ИнформационныеБазыНачалоВыбораНаСервере(ЭтотОбъект.Кластер1С);
        
        ДанныеВыбора = Новый СписокЗначений;
        Для Каждого ТекИнформационнаяБаза Из ИнформационныеБазы Цикл
            ДанныеВыбора.Добавить(ТекИнформационнаяБаза, ТекИнформационнаяБаза["ИмяБазыВКластере"]);
        КонецЦикла;
        
    Исключение
        
        Сообщить(ИнформацияОбОшибке().Описание);
        
    КонецПопытки;
	
	СтандартнаяОбработка = Ложь;
    
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    
    Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
        Объект.Наименование = ВыбранноеЗначение["ИмяБазыВКластере"];
    КонецЕсли;
    
    ЭтотОбъект.ИнформационнаяБаза = ВыбранноеЗначение["ИмяБазыВКластере"];
    Объект.УникальныйИдентификаторОбъекта = ВыбранноеЗначение["УникальныйИдентификаторОбъекта"];
        
    СтандартнаяОбработка = Ложь;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбъектаПриАктивизацииСтроки(Элемент)
    
    ТекДанные = Элемент.ТекущиеДанные;
        
    Если ТекДанные.Параметр = "ЗащищенноеСоединение" Тогда
        Элементы.ПараметрыОбъектаЗначение.ТолькоПросмотр = Истина;
    Иначе
        Элементы.ПараметрыОбъектаЗначение.ТолькоПросмотр = Ложь;
    КонецЕсли;
        
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьПараметры(Команда)
    
    ПараметрыИнформационнойБазы = ПолучитьПараметрыНаСервере();
    
    Объект.УникальныйИдентификаторОбъекта = ПараметрыИнформационнойБазы["УникальныйИдентификаторОбъекта"];
    
    Для Каждого ТекПараметр Из ЭтотОбъект.ПараметрыОбъекта Цикл
        
        ТекПараметр.Значение = Кластер_1СКлиентСервер.ПредставлениеПараметра(ТекПараметр.Параметр, ПараметрыИнформационнойБазы[ТекПараметр.Параметр]);
                       
    КонецЦикла;
    
    Модифицированность = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройки(Команда)
    
    Попытка
        
        ПроверитьНастройкиНаСервере();
        Сообщить(Объект.Наименование + ". Успешно.");
        
    Исключение
        
        ИнформацияОбОшибке = ИнформацияОбОшибке();
        Описание = ИнформацияОбОшибке.Описание;
        
        Если ИнформацияОбОшибке().Причина <> Неопределено Тогда
            Описание = ИнформацияОбОшибке().Причина.Описание;
        КонецЕсли;
        
        Сообщить(Объект.Наименование + ". " + Описание + ".");
        
    КонецПопытки;
        
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура АгентОперативныйРежим(Ссылка, ОперативныйРежим)
    
    Справочники.ОбъектыКонтроля.АгентОперативныйРежим(Ссылка, ОперативныйРежим);
        
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметры(Настройки, НастройкиКонтроля)
    
    ЭтотОбъект.ИнформационнаяБаза = Настройки.ИмяБазыВКластере;
    ЭтотОбъект.Пользователь = Настройки.Пользователь;
    ЭтотОбъект.Пароль = Настройки.Пароль;
    
    ДобавитьПараметр("Описание", "Описание", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("ЗащищенноеСоединение", "ЗащищенноеСоединение", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("СерверБазыДанных", "Сервер базы данных", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("ТипСУБД", "Тип СУБД", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("БазаДанных", "База данных", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("РазрешитьВыдачуЛицензийСервером1СПредприятия", "Разрешить выдачу лицензий сервером 1С:Предприятия", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("БлокировкаНачалаСеансовВключена", "Блокировка начала сеансов включена", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("БлокировкаНачалаСеансовНачало", "Блокировка сеансов начало", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("БлокировкаНачалаСеансовКонец", "Блокировка сеансов конец", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("БлокировкаРегламентныхЗаданийВключена", "Блокировка регламентных заданий включена", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("ВнешнееУправлениеСеансами", "Внешнее управление сеансами", Настройки, НастройкиКонтроля);
    ДобавитьПараметр("ОбязательноеИспользованиеВнешнегоУправления", "Обязательное использование внешнего управления", Настройки, НастройкиКонтроля);
    
КонецПроцедуры

&НаСервере
Функция ДобавитьПараметр(Параметр, Представление, Настройки, НастройкиКонтроля, Постфикс = Неопределено, ЗначениеПоУмолчанию = Неопределено)
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = Параметр;
    НовСтрока.Представление = Представление;
    НовСтрока.Значение = Кластер_1СКлиентСервер.ПредставлениеПараметра(Параметр, Настройки[Параметр]);
    НовСтрока.Постфикс = Постфикс;
    
    Если НЕ ЗначениеЗаполнено(НовСтрока.Постфикс) Тогда
        ЭтотОбъект.УсловноеОформление.Элементы[0].Отбор.Элементы[0].ПравоеЗначение.Добавить(Параметр);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(НастройкиКонтроля[Параметр]) Тогда
        НовСтрока.Контроль = НастройкиКонтроля[Параметр];
    КонецЕсли;
        
    Возврат НовСтрока;
    
КонецФункции

&НаСервереБезКонтекста
Функция ИнформационныеБазыНачалоВыбораНаСервере(Кластер1С)
    
    Подключение = Кластер1С.Подключение;
    
    АдминистрированиеСервера = Кластер_1С.АдминистрированиеСервера(Подключение);
    АдминистрированиеКластер = Кластер_1С.АдминистрированиеКластер(Подключение.ТипПодключения, АдминистрированиеСервера, Кластер1С.УникальныйИдентификаторОбъекта);
    
    НастройкиКластера = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Кластер1С);
    Кластер_1С.АутентификацияКластера(Подключение.ТипПодключения, АдминистрированиеКластер, НастройкиКластера.АдминистраторКластера, НастройкиКластера.ПарольАдминистратораКластера, Истина);
    
    Возврат Кластер_1С.ИнформационныеБазы(Подключение.ТипПодключения, АдминистрированиеКластер, Истина);
    
КонецФункции

&НаСервере
Функция ПроверитьНастройкиНаСервере()
    
    Подключение = ЭтотОбъект.Кластер1С.Подключение;
    НастройкиКластера = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(ЭтотОбъект.Кластер1С);
        
    АдминистрированиеСервера = Кластер_1С.АдминистрированиеСервера(Подключение);
    
    УникальныйИдентификаторКластера = ЭтотОбъект.Кластер1С.УникальныйИдентификаторОбъекта; 
    Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Кластер1С.УникальныйИдентификаторОбъекта) Тогда
        УникальныйИдентификаторКластера = Кластер_1С.УникальныйИдентификаторКластера(Подключение.ТипПодключения, АдминистрированиеСервера, НастройкиКластера.ПортКластера);
    КонецЕсли;
        
    АдминистрированиеКластер = Кластер_1С.АдминистрированиеКластер(Подключение.ТипПодключения, АдминистрированиеСервера, УникальныйИдентификаторКластера);
    Кластер_1С.АутентификацияКластера(Подключение.ТипПодключения, АдминистрированиеКластер, НастройкиКластера.АдминистраторКластера, НастройкиКластера.ПарольАдминистратораКластера);
    
    Если НЕ ЗначениеЗаполнено(Объект.УникальныйИдентификаторОбъекта) Тогда
       Объект.УникальныйИдентификаторОбъекта = Кластер_1С.УникальныйИдентификаторИнформационнойБазы(Подключение.ТипПодключения, АдминистрированиеКластер, ЭтотОбъект.ИнформационнаяБаза);        
       Модифицированность = Истина;
    КонецЕсли;
        
    АдминистрированиеИнформационнаяБаза = Кластер_1С.АдминистрированиеИнформационнаяБазаКратко(Подключение.ТипПодключения, АдминистрированиеКластер, Объект.УникальныйИдентификаторОбъекта);
    Кластер_1С.АутентификацияИнформационнаяБаза(Подключение.ТипПодключения, АдминистрированиеИнформационнаяБаза, ЭтотОбъект.Пользователь, ЭтотОбъект.Пароль, Истина); 
    
КонецФункции

&НаСервере
Функция ПолучитьПараметрыНаСервере()
    
    Подключение = ЭтотОбъект.Кластер1С.Подключение;
    НастройкиКластера = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(ЭтотОбъект.Кластер1С);
        
    АдминистрированиеСервера = Кластер_1С.АдминистрированиеСервера(Подключение);
    
    УникальныйИдентификаторКластера = ЭтотОбъект.Кластер1С.УникальныйИдентификаторОбъекта; 
    Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Кластер1С.УникальныйИдентификаторОбъекта) Тогда
        УникальныйИдентификаторКластера = Кластер_1С.УникальныйИдентификаторКластера(Подключение.ТипПодключения, АдминистрированиеСервера, НастройкиКластера.ПортКластера);
    КонецЕсли;
    
    АдминистрированиеКластер = Кластер_1С.АдминистрированиеКластер(Подключение.ТипПодключения, АдминистрированиеСервера, УникальныйИдентификаторКластера);
    Кластер_1С.АутентификацияКластера(Подключение.ТипПодключения, АдминистрированиеКластер, НастройкиКластера.АдминистраторКластера, НастройкиКластера.ПарольАдминистратораКластера);
    
    Если НЕ ЗначениеЗаполнено(Объект.УникальныйИдентификаторОбъекта) Тогда
       Объект.УникальныйИдентификаторОбъекта = Кластер_1С.УникальныйИдентификаторИнформационнойБазы(Подключение.ТипПодключения, АдминистрированиеКластер, ЭтотОбъект.ИнформационнаяБаза);        
       Модифицированность = Истина;
   КонецЕсли;
   
    АдминистрированиеИнформационнаяБаза = Кластер_1С.АдминистрированиеИнформационнаяБазаКратко(Подключение.ТипПодключения, АдминистрированиеКластер, Объект.УникальныйИдентификаторОбъекта);
    Кластер_1С.АутентификацияИнформационнаяБаза(Подключение.ТипПодключения, АдминистрированиеИнформационнаяБаза, ЭтотОбъект.Пользователь, ЭтотОбъект.Пароль); 
    СвойстваИнформационнойБазы = Кластер_1С.СвойстваИнформационнаяБаза(Подключение.ТипПодключения, АдминистрированиеИнформационнаяБаза, Истина, Истина);
    
    Возврат СвойстваИнформационнойБазы;
            
КонецФункции

&НаСервере
Процедура ЗаписатьКонтрольныеПроцедуры(Ссылка)
    
    КонтрольПодключений = Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений();
    Если НЕ ЗначениеЗаполнено(Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(Ссылка, КонтрольПодключений)) Тогда
        НаименованиеКП = Строка(КонтрольПодключений) + " для " + Строка(Объект.Наименование);
        ЗаписатьКонтрольПодключений(Ссылка, НаименованиеКП, КонтрольПодключений);
    КонецЕсли;
    
    КонтрольПроизводительностиКП = Справочники.ВидыКонтрольныхПроцедур.КонтрольПроизводительности();
    Если НЕ ЗначениеЗаполнено(Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(Ссылка, КонтрольПроизводительностиКП)) Тогда
        НаименованиеКП = Строка(КонтрольПроизводительностиКП) + " для " + Строка(Объект.Наименование);
        ЗаписатьКонтрольПроизводительности(Ссылка, НаименованиеКП, КонтрольПроизводительностиКП);
    КонецЕсли;
    
    КонтрольВыполненияРегламентныхЗаданий = Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий();
    Если НЕ ЗначениеЗаполнено(Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(Ссылка, КонтрольВыполненияРегламентныхЗаданий)) Тогда
        НаименованиеКП = Строка(КонтрольВыполненияРегламентныхЗаданий) + " для " + Строка(Объект.Наименование);
        ЗаписатьКонтрольВыполненияРегламентныхЗаданий(Ссылка, НаименованиеКП, КонтрольВыполненияРегламентныхЗаданий);
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтрольПодключений(Ссылка, Наименование, ВидКонтрольнойПроцедуры)
    КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
    НаименованиеКП = Строка(ВидКонтрольнойПроцедуры) + " для " + Строка(Ссылка);
    КонтрольнаяПроцедура.СоздатьПоУмолчаниюКонтрольПотребленияПамяти(Наименование, ВидКонтрольнойПроцедуры, Ложь, Ссылка, Ложь);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтрольПроизводительности(Ссылка, Наименование, ВидКонтрольнойПроцедуры)
    КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
    НаименованиеКП = Строка(ВидКонтрольнойПроцедуры) + " для " + Строка(Ссылка);
    КонтрольнаяПроцедура.СоздатьПоУмолчаниюКонтрольПроизводительности(Наименование, ВидКонтрольнойПроцедуры, Ссылка, Ложь);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтрольВыполненияРегламентныхЗаданий(Ссылка, Наименование, ВидКонтрольнойПроцедуры)
    КонтрольнаяПроцедура = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
    НаименованиеКП = Строка(ВидКонтрольнойПроцедуры) + " для " + Строка(Ссылка);
    КонтрольнаяПроцедура.СоздатьПоУмолчаниюКонтрольРегламентныхЗаданий(Наименование, ВидКонтрольнойПроцедуры, Ссылка, Ложь);
КонецПроцедуры

&НаСервере
Функция НастройкиКонтроляИзменены(НастройкиКонтроля, БылиНастройкиКонтроля, Настройки, НастройкиБыли)
    
    ЕстьИзменение = Ложь;
    
    Если НастройкиКонтроля.Количество() <> БылиНастройкиКонтроля.Количество() Тогда
        ЕстьИзменение = Истина;
    Иначе
        Для Каждого Настройка Из НастройкиКонтроля Цикл
            Если Настройка.Значение <> БылиНастройкиКонтроля[Настройка.Ключ] ИЛИ Настройки[Настройка.Ключ] <> НастройкиБыли[Настройка.Ключ] Тогда
                ЕстьИзменение = Истина;
                Прервать
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
    Возврат ЕстьИзменение;
    
КонецФункции

#КонецОбласти

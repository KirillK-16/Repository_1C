
#Область Переменные

&НаКлиенте
Перем ЗакрытьПослеОбновленияСтруктурыКластера, ЗаписатьСтруктуруКластера, ПараметрыЗаписиСтруктурыКластера, СписокКластеров;

&НаКлиенте
Перем ТекущаяСтраницаБуфер;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        НастройкиКластера = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Объект.Ссылка);
        НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(Объект.Ссылка);
    Иначе
        Объект.Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С;
        НастройкиКластера = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.КластерСерверов1С);
        Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПодключение;
        НастройкиКонтроля = Новый Соответствие;
    КонецЕсли;
        
    ЗаполнитьПараметры(НастройкиКластера, НастройкиКонтроля);
    ЗаполнитьНастройкиПодключения(НастройкиКластера);
    ФорматЛегенды();
    
    Если ЗначениеЗаполнено(Объект.Ссылка) И Объект.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        АгентОперативныйРежим(Объект.Ссылка, Истина);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    СписокКластеров = Новый СписокЗначений;
    
    ЗакрытьПослеОбновленияСтруктурыКластера = Ложь;
    ЗаписатьСтруктуруКластера = Ложь;
    ЗаполнитьЛегендуКластера();
    
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    Настройки = РегистрыСведений.ПараметрыКластеров.ПрочитатьНастройки(ТекущийОбъект.Ссылка);
    ПараметрыЗаписи.Вставить("АдминистраторКластераБыл", Настройки.АдминистраторКластера);
    ПараметрыЗаписи.Вставить("ПарольАдминистратораКластераБыл", Настройки.ПарольАдминистратораКластера);
    
    НастройкиКонтроля = РегистрыСведений.КонтрольПараметровОбъектов.ПрочитатьНастройки(ТекущийОбъект.Ссылка);
    ПараметрыЗаписи.Вставить("НастройкиКонтроляБыли", НастройкиКонтроля);
    ПараметрыЗаписи.Вставить("НастройкиБыли", Настройки);
    ПараметрыЗаписи.Вставить("ЭтоНовый", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
    
    ТекущийОбъект.ДополнительныеСвойства.Вставить("Мониторинг", ЭтотОбъект.Мониторинг = "Включить");
    
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    НастройкиКластера = Новый Структура;
    НастройкиКонтроля = Новый Соответствие;
        
    НастройкиКластера.Вставить("АдресКластера", ЭтотОбъект.Компьютер);
    НастройкиКластера.Вставить("АдминистраторКластера", ЭтотОбъект.АдминистраторКластера);
    НастройкиКластера.Вставить("ПарольАдминистратораКластера", ЭтотОбъект.ПарольАдминистратораКластера);
    НастройкиКластера.Вставить("Мониторинг", ЭтотОбъект.Мониторинг = "Включить");
                
    Для Каждого ТекПараметр Из ЭтотОбъект.ПараметрыОбъекта Цикл
        
        НастройкиКластера.Вставить(ТекПараметр.Параметр, Кластер_1СКлиентСервер.ПараметрПоПредставлению(ТекПараметр.Параметр, ТекПараметр.Значение));
        НастройкиКонтроля.Вставить(ТекПараметр.Параметр, ТекПараметр.Контроль);
        
                
    КонецЦикла;
    
    РегистрыСведений.ПараметрыКластеров.ЗаписатьНастройки(ТекущийОбъект.Ссылка, НастройкиКластера);
    РегистрыСведений.КонтрольПараметровОбъектов.ЗаписатьНастройки(ТекущийОбъект.Ссылка, НастройкиКонтроля);
    
    ЗаписатьКонтрольныеПроцедуры(ТекущийОбъект.Ссылка);
            
    Если
        Объект.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП
        И
        (
            ПараметрыЗаписи.АдминистраторКластераБыл <> ЭтотОбъект.АдминистраторКластера
            ИЛИ ПараметрыЗаписи.ПарольАдминистратораКластераБыл <> ЭтотОбъект.ПарольАдминистратораКластера
        )
    Тогда
    
        Если ЗначениеЗаполнено(Объект.УникальныйИдентификаторОбъекта) Тогда
            
            Команда = Новый Соответствие;
            Команда.Вставить("cluster", Объект.УникальныйИдентификаторОбъекта);
            
            Аутентификация = Новый Соответствие;
            Аутентификация.Вставить("prm1", "*****"); 
            Аутентификация.Вставить("prm2", "*****");
            Команда.Вставить("prm", Аутентификация);
            
            Для Каждого АгентКИП Из Объект.Подключение.АгентКИППараметры Цикл 
                РегистрыСведений.КомандыАгентаКИП.ДобавитьКоманду(АгентКИП.АгентКИП, Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
            КонецЦикла;
            
        КонецЕсли;
        
    КонецЕсли;
    
    Если НастройкиКонтроляИзменены(НастройкиКонтроля, ПараметрыЗаписи.НастройкиКонтроляБыли, НастройкиКластера, ПараметрыЗаписи.НастройкиБыли) Тогда
        
        Если ЗначениеЗаполнено(Объект.УникальныйИдентификаторОбъекта) Тогда
            
            Команда = Новый Соответствие;
            Команда.Вставить("cluster", Объект.УникальныйИдентификаторОбъекта);
            Команда.Вставить("сontrolParametrs", АгентКИПвЦКК.КомандаНастройкиКонтроляКластер(НастройкиКонтроля, НастройкиКластера));
            
            Для Каждого АгентКИП Из Объект.Подключение.АгентКИППараметры Цикл
                РегистрыСведений.КомандыАгентаКИП.ДобавитьКоманду(АгентКИП.АгентКИП, Перечисления.ТипыКомандАгентаКИП.Cluster1C, Команда);
            КонецЦикла;
            
        КонецЕсли;
                
    КонецЕсли;
            
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
    
    Если ПараметрыЗаписи.ЭтоНовый Тогда
        
        ПараметрыЗаписиКластера = Новый Массив;
        ПараметрыЗаписиКластера.Добавить(ТекущийОбъект.Ссылка);
        ПараметрыЗаписиКластера.Добавить(Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ТекущийОбъект.Ссылка, Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти()));
        ПараметрыЗаписиКластера.Добавить(Истина);
        ФЗ = ФоновыеЗадания.Выполнить("КонтрольПамятиСервер.МониторингКластера1С", ПараметрыЗаписиКластера);
        ФЗ.ОжидатьЗавершенияВыполнения(3);
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
    
    Если НЕ ЗавершениеРаботы Тогда
        АгентОперативныйРежим(Объект.Ссылка, Ложь);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьНастройкиПодключения(Команда)
    
    Если НЕ ЗначениеЗаполнено(Объект.Подключение) Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрано подключение!", Объект.Ссылка, "Объект.Подключение");
        Возврат;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Компьютер) Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран кластер!", Объект.Ссылка, "Компьютер");
        Возврат;
    КонецЕсли;
                
    Попытка
        ПроверитьНастройкиПодключенияНаСервере();
        Сообщить(ЭтотОбъект.Компьютер + ". Успешно.")
    Исключение
        Сообщить(ЭтотОбъект.Компьютер + ". Ошибка. " + ИнформацияОбОшибке().Описание);
    КонецПопытки;
        
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметры(Команда)
    
    Если НЕ ЗначениеЗаполнено(Объект.Подключение) Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрано подключение!", Объект.Ссылка, "Объект.Подключение");
        Возврат;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Компьютер) Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран кластер!", Объект.Ссылка, "Компьютер");
        Возврат;
    КонецЕсли;
    
    ПараметрыКластера = ПолучитьПараметрыНаСервере();
    
    Объект.УникальныйИдентификаторОбъекта = ПараметрыКластера["УникальныйИдентификаторОбъекта"];
    
    Для Каждого ТекПараметр Из ЭтотОбъект.ПараметрыОбъекта Цикл
        
        ТекПараметр.Значение = Кластер_1СКлиентСервер.ПредставлениеПараметра(ТекПараметр.Параметр, ПараметрыКластера[ТекПараметр.Параметр]);
        
        Если ТекПараметр.Параметр = "АдресКластера" И ЗначениеЗаполнено(ПараметрыКластера["ПортКластера"]) Тогда
            ТекПараметр.Значение = ТекПараметр.Значение + ":" + Формат(ПараметрыКластера["ПортКластера"], "ЧН=0; ЧГ=0");
            Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
                Объект.Наименование = ТекПараметр.Значение;
            КонецЕсли;
            
        ИначеЕсли ТекПараметр.Параметр = "ПортАгентаКластера" И ЗначениеЗаполнено(ПараметрыКластера["ПортКластера"]) Тогда
            ТекПараметр.Значение = ПараметрыКластера["ПортКластера"] - 1;
        КонецЕсли;
                
    КонецЦикла;    
        
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеПараметры(Команда)
    ИзменитьКонтрольПараметров(Истина);    
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеПараметры(Команда)
    ИзменитьКонтрольПараметров(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруКластера(Команда)
    
    Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
        
        ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьСтруктуруКластераВопросЗавершение", ЭтотОбъект);
        ТекстВопроса = НСтр("ru = 'Для обновления необходимо записать изменения. 
        |Продолжить?'");
        ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);
        
    Иначе
        
        ОбновитьСтруктуруКластераОбщая();
                        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСтруктуру(Команда)
    
    Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
        
        ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьСтруктуруЗавершение", ЭтотОбъект);
        ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать изменения. 
        |Продолжить?'");
        ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);
        
    Иначе
        
        ЗаписатьСтруктуруОбщая();
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура МастерНастройки(Команда)
    
    Элементы.ГруппаШапка.Видимость = Ложь;
    Элементы.ГруппаСтраницы.Видимость = Ложь;
    Элементы.МастерНастройки.Видимость = Истина;
    
    Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиПодключение;
    ТекущаяСтраницаБуфер = Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница;
    
    
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
    
    Элементы.ГруппаШапка.Видимость = Истина;
    Элементы.ГруппаСтраницы.Видимость = Истина;
    Элементы.МастерНастройки.Видимость = Ложь;
    Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПараметры;
    
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
    ДалееОбщая();
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
    НазадОбщая();
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаСчетчики(Команда)
    СчетчикиКластера = СчетчикиКластера(Объект.Ссылка);
    ДатаОкончания = НачалоМинуты(ТекущаяДата());
    ДатаНачала = ДатаОкончания - 86400;
    ОбщийКлиент.ДиаграммаОбщаяСчетчикиПроизводительности(СчетчикиКластера, ДатаНачала, ДатаОкончания, ЭтотОбъект.УникальныйИдентификатор);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СчетчикиКластера(Ссылка)
    Возврат Справочники.ОбъектыКонтроля.СчетчикиПроизводительностиКластер(Ссылка);
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АдминистраторКластераПриИзменении(Элемент)
    Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарольАдминистратораКластераПриИзменении(Элемент)
    Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбъектаКонтрольПриИзменении(Элемент)
    Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МониторингПриИзменении(Элемент)
    Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбъектаПриАктивизацииСтроки(Элемент)
    
    ТекДанные = Элемент.ТекущиеДанные;
        
    Если
        ТекДанные.Параметр = "ИмяКластера"
        ИЛИ ТекДанные.Параметр = "АдресКластера"
        ИЛИ ТекДанные.Параметр = "ПортКластера"
        ИЛИ ТекДанные.Параметр = "ИнтервалПерезапускаРабочихПроцессов"
        ИЛИ ТекДанные.Параметр = "ДопустимыйОбъемПамяти"
        ИЛИ ТекДанные.Параметр = "ИнтервалДопустимогоПревышенияОбъемаПамяти"
        ИЛИ ТекДанные.Параметр = "ДопустимоеОтклонениеОшибокСервера"
        ИЛИ ТекДанные.Параметр = "ВыключенныеПроцессыОстанавливатьЧерез"
        ИЛИ ТекДанные.Параметр = "УровеньОтказоустойчивости"
   Тогда
        
        Элементы.ПараметрыОбъектаЗначение.РедактированиеТекста = Истина;
        Элементы.ПараметрыОбъектаЗначение.РежимВыбораИзСписка = Ложь;
        Элементы.ПараметрыОбъектаЗначение.СписокВыбора.Очистить();
        
    ИначеЕсли ТекДанные.Параметр = "ЗащищенноеСоединение" Тогда
        
        Элементы.ПараметрыОбъектаЗначение.РедактированиеТекста = Ложь;
        Элементы.ПараметрыОбъектаЗначение.РежимВыбораИзСписка = Истина;
        Элементы.ПараметрыОбъектаЗначение.СписокВыбора.Очистить();
        
        Элементы.ПараметрыОбъектаЗначение.СписокВыбора.Добавить("выключено");
        Элементы.ПараметрыОбъектаЗначение.СписокВыбора.Добавить("только соединение");
        Элементы.ПараметрыОбъектаЗначение.СписокВыбора.Добавить("постоянно");
        
    ИначеЕсли ТекДанные.Параметр = "ПринудительноЗавершатьПроблемныеПроцессы" Тогда
        
        Элементы.ПараметрыОбъектаЗначение.РедактированиеТекста = Ложь;
        Элементы.ПараметрыОбъектаЗначение.РежимВыбораИзСписка = Истина;
        Элементы.ПараметрыОбъектаЗначение.СписокВыбора.Очистить();
        
        Элементы.ПараметрыОбъектаЗначение.СписокВыбора.Добавить(Истина);
        Элементы.ПараметрыОбъектаЗначение.СписокВыбора.Добавить(Ложь);
                
    ИначеЕсли ТекДанные.Параметр = "РежимРаспределенияНагрузки" Тогда
        
        Элементы.ПараметрыОбъектаЗначение.РедактированиеТекста = Ложь;
        Элементы.ПараметрыОбъектаЗначение.РежимВыбораИзСписка = Истина;
        Элементы.ПараметрыОбъектаЗначение.СписокВыбора.Очистить();
        
        Элементы.ПараметрыОбъектаЗначение.СписокВыбора.Добавить("Приоритет по производительности");
        Элементы.ПараметрыОбъектаЗначение.СписокВыбора.Добавить("Приоритет по памяти");
        
    КонецЕсли;
    
    
КонецПроцедуры

&НаКлиенте
Процедура КомпьютерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    Если ЗначениеЗаполнено(Объект.Подключение) Тогда
        ЗаполнитьДоступныеКластеры();
    Иначе
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрано подключение!", Объект.Ссылка, "Объект.Подключение");
    КонецЕсли;
    
    СтандартнаяОбработка = Ложь;
        
КонецПроцедуры

&НаКлиенте
Процедура КомпьютерПриИзменении(Элемент)
    
    КомпьютерПриИзмененииОбщая();
            
КонецПроцедуры

&НаКлиенте
Процедура КомпьютерМастерНастройкиПриИзменении(Элемент)
    
    Объект.Наименование = ЭтотОбъект.Компьютер;
    КомпьютерПриИзмененииОбщая();
    
КонецПроцедуры

&НаКлиенте
Процедура ГруппаМастерНастройкиСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
    Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = ТекущаяСтраницаБуфер;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура АгентОперативныйРежим(Ссылка, ОперативныйРежим)
    
    Если Ссылка.Подключение.ТипПодключения = Перечисления.ТипПодключенияКластер1С.АгентКИП Тогда
        Справочники.ОбъектыКонтроля.АгентОперативныйРежим(Ссылка, ОперативныйРежим);
    КонецЕсли;
            
КонецПроцедуры

&НаСервере
Функция НастройкиКонтроляИзменены(НастройкиКонтроля, БылиНастройкиКонтроля, Настройки, НастройкиБыли)
    
    ЕстьИзменение = Ложь;
    
    Если НастройкиКонтроля.Количество() <> БылиНастройкиКонтроля.Количество() Тогда
        ЕстьИзменение = Истина;
    Иначе
        Для Каждого Настройка Из НастройкиКонтроля Цикл
            Если Настройка.Значение <> БылиНастройкиКонтроля[Настройка.Ключ] ИЛИ Настройки[Настройка.Ключ] <> НастройкиБыли[Настройка.Ключ] Тогда
                ЕстьИзменение = Истина;
                Прервать
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
    Возврат ЕстьИзменение;
    
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметры(НастройкиКластера, НастройкиКонтроля)
    
    ЭтотОбъект.Компьютер = НастройкиКластера.АдресКластера;
        
    ДобавитьПараметр("ИмяКластера", "Имя кластера", НастройкиКластера, НастройкиКонтроля);
    ДобавитьПараметр("ПортКластера", "IP Порт", НастройкиКластера, НастройкиКонтроля);
    ДобавитьПараметр("ЗащищенноеСоединение", "Защищенное соединение", НастройкиКластера, НастройкиКонтроля);
    ДобавитьПараметр("ИнтервалПерезапускаРабочихПроцессов", "Интервал перезапуска рабочих процессов", НастройкиКластера, НастройкиКонтроля, "секунд");
    ДобавитьПараметр("ДопустимыйОбъемПамяти", "Допустимый объем памяти", НастройкиКластера, НастройкиКонтроля, "KB");
    ДобавитьПараметр("ИнтервалДопустимогоПревышенияОбъемаПамяти", "Интервал допустимого превышения объема памяти", НастройкиКластера, НастройкиКонтроля, "секунд");
    ДобавитьПараметр("ДопустимоеОтклонениеОшибокСервера", "Допустимое отклонение ошибок сервера", НастройкиКластера, НастройкиКонтроля, "%");
    ДобавитьПараметр("ПринудительноЗавершатьПроблемныеПроцессы", "Принудительно завершать проблемные процессы", НастройкиКластера, НастройкиКонтроля);
    ДобавитьПараметр("ВыключенныеПроцессыОстанавливатьЧерез", "Выключенные процессы останавливать через", НастройкиКластера, НастройкиКонтроля, "секунд");
    ДобавитьПараметр("УровеньОтказоустойчивости", "Уровень отказоустойчивости", НастройкиКластера, НастройкиКонтроля);
    ДобавитьПараметр("РежимРаспределенияНагрузки", "Режим распределения нагрузки", НастройкиКластера, НастройкиКонтроля);
    
    Если НастройкиКластера["Мониторинг"] Тогда
        ЭтотОбъект.Мониторинг = "Включить";
    Иначе
        ЭтотОбъект.Мониторинг = "Отключить";
    КонецЕсли;    
        
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПодключения(НастройкиКластера)
    
    ЗаполнитьНастройку(НастройкиКластера, "АдминистраторКластера", "АдминистраторКластера");
    ЗаполнитьНастройку(НастройкиКластера, "ПарольАдминистратораКластера", "ПарольАдминистратораКластера");
            
КонецПроцедуры

&НаСервере
Функция ДобавитьПараметр(Параметр, Представление, Настройки, НастройкиКонтроля, Постфикс = Неопределено, ЗначениеПоУмолчанию = Неопределено)
    
    НовСтрока = ЭтотОбъект.ПараметрыОбъекта.Добавить();
    НовСтрока.Параметр = Параметр;
    НовСтрока.Представление = Представление;
    НовСтрока.Значение = Кластер_1СКлиентСервер.ПредставлениеПараметра(Параметр, Настройки[Параметр]);
    НовСтрока.Постфикс = Постфикс;
    
    Если НЕ ЗначениеЗаполнено(НовСтрока.Постфикс) Тогда
        ЭтотОбъект.УсловноеОформление.Элементы[0].Отбор.Элементы[0].ПравоеЗначение.Добавить(Параметр);
    КонецЕсли;
    
    Если ЗначениеЗаполнено(НастройкиКонтроля[Параметр]) Тогда
        НовСтрока.Контроль = НастройкиКонтроля[Параметр];
    КонецЕсли;    
        
    Возврат НовСтрока;
    
КонецФункции

&НаСервере
Процедура ЗаполнитьНастройку(Настройки, Реквизит, КлючНастройки, ЗначениеПоУмолчанию = Неопределено)
    
    ЭтотОбъект[Реквизит] = Настройки[КлючНастройки];
    Если НЕ ЗначениеЗаполнено(ЭтотОбъект[Реквизит]) Тогда
        ЭтотОбъект[Реквизит] = ЗначениеПоУмолчанию;
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Функция ПроверитьНастройкиПодключенияНаСервере()
    
    Подключение = Объект.Подключение;
    
    АдминистрированиеСервера = Кластер_1С.АдминистрированиеСервера(Подключение);
    
    Если НЕ ЗначениеЗаполнено(Объект.УникальныйИдентификаторОбъекта) Тогда
        ЗаполнитьУникальныйИдентификаторОбъекта(АдминистрированиеСервера);
    КонецЕсли;
        
    АдминистрированиеКластер = Кластер_1С.АдминистрированиеКластер(Подключение.ТипПодключения, АдминистрированиеСервера, Объект.УникальныйИдентификаторОбъекта);
    Кластер_1С.АутентификацияКластера(Подключение.ТипПодключения, АдминистрированиеКластер, ЭтотОбъект.АдминистраторКластера, ЭтотОбъект.ПарольАдминистратораКластера, Истина);
        
КонецФункции

&НаСервере
Процедура ЗаполнитьУникальныйИдентификаторОбъекта(АдминистрированиеСервера)
    
    КомпьютерМассив = СтрРазделить(ЭтотОбъект.Компьютер, ":", Истина);
    Если КомпьютерМассив.Количество() = 2 Тогда
        ПортКластера = Число(КомпьютерМассив[1]);
    КонецЕсли;
    
    Объект.УникальныйИдентификаторОбъекта = Кластер_1С.УникальныйИдентификаторКластера(Объект.Подключение.ТипПодключения, АдминистрированиеСервера, ПортКластера);
    Модифицированность = Истина;
    
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыНаСервере()
    
    Подключение = Объект.Подключение;
       
    АдминистрированиеСервера = Кластер_1С.АдминистрированиеСервера(Подключение);
    
    Если НЕ ЗначениеЗаполнено(Объект.УникальныйИдентификаторОбъекта) Тогда
        ЗаполнитьУникальныйИдентификаторОбъекта(АдминистрированиеСервера);
    КонецЕсли;
    
    АдминистрированиеКластер = Кластер_1С.АдминистрированиеКластер(Подключение.ТипПодключения, АдминистрированиеСервера, Объект.УникальныйИдентификаторОбъекта);
    СвойстваКластера = Кластер_1С.СвойстваКластер(Подключение.ТипПодключения, АдминистрированиеКластер, Истина); 
        
    Возврат СвойстваКластера;
    
КонецФункции

&НаСервере
Процедура ЗаписатьКонтрольныеПроцедуры(Ссылка)
    
    ВидКонтрольнойПроцедуры = Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти();
    
    Если НЕ ЗначениеЗаполнено(Справочники.КонтрольныеПроцедуры.ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(Ссылка, ВидКонтрольнойПроцедуры)) Тогда
        НаименованиеКП = "Мониторинг кластера " + Строка(Объект.Наименование);
        Справочники.КонтрольныеПроцедуры.СоздатьЭлемент().СоздатьПоУмолчаниюКонтрольПотребленияПамяти(НаименованиеКП, ВидКонтрольнойПроцедуры, Истина, Ссылка, Истина);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКонтрольПараметров(Контроль)
    
    Для Каждого ПараметрОбъекта Из ПараметрыОбъекта Цикл
        ПараметрОбъекта.Контроль = Контроль;
    КонецЦикла;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКластеры(Подключение)
    
    АдминистрированиеСервера = Кластер_1С.АдминистрированиеСервера(Подключение);
    Возврат Кластер_1С.Кластеры(Подключение.ТипПодключения, АдминистрированиеСервера, Истина);
    
КонецФункции

&НаКлиенте
Процедура ОбновитьСтруктуруКластераВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Записать();
        ОбновитьСтруктуруКластераОбщая();
    КонецЕсли;
            
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруКластераОбщая()
    
    Элементы.ЛегендаДерева.Видимость = Истина;
    Элементы.ГруппаСостояниеЗаписиСтруктурыКластера.Видимость = Ложь;
    
    Элементы.СтруктураКластераОбновитьСтруктуруКластера.Доступность = Ложь;
    Элементы.СтруктураКластераЗаписатьСтруктуру.Доступность = Ложь;
    ЗаполнитьДеревоКластера();
    
    ПодключитьОбработчикОжидания("СтруктураКластераЗавершение", 1 ,Истина);
            
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоКластера()
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        Корень = ЭтотОбъект.СтруктураКластера.ПолучитьЭлементы();
        Корень.Очистить();
        
        Если ИдетЗаписьСтруктурыКластера Тогда
            
            Кластер1С = Корень.Добавить();
            Кластер1С.ИндексКартинки = 18;
            Кластер1С.Наименование = "Запись структуры кластера...";
            
        Иначе
            
            Кластер1С = Корень.Добавить();
            Кластер1С.ИндексКартинки = 18;
            Кластер1С.Наименование = "Получение данных...";
            
            
            ЗаполнитьСтруктуруКластера();
            
        КонецЕсли;
        
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруКластера()
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        АдресХранилищаПолученияСтруктурыКластера = ПоместитьВоВременноеХранилище(Неопределено, ЭтотОбъект.УникальныйИдентификатор);
        
        ПараметрыЗапуска = Новый Массив;
        ПараметрыЗапуска.Добавить(Объект.Ссылка);
        ПараметрыЗапуска.Добавить(Истина);
        ПараметрыЗапуска.Добавить(АдресХранилищаПолученияСтруктурыКластера);
        
        ФЗ = ФоновыеЗадания.Выполнить("Кластер_1С.СтруктураКластера", ПараметрыЗапуска, ЭтотОбъект.УникальныйИдентификатор, "Кластер 1С """ + Объект.Наименование +""". Получение структуры.");
        УникальныйИдентификаторПолученияСтруктурыКластера = ФЗ.УникальныйИдентификатор;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЛегендуКластера()
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        Элементы.СтруктураКластераОбновитьСтруктуруКластера.Доступность = Ложь;
        Элементы.СтруктураКластераЗаписатьСтруктуру.Доступность = Ложь;
        
        Если ИдетЗаписьСтруктурыКластера Тогда
            
            Элементы.ЛегендаДерева.Видимость = Ложь;
            Элементы.ГруппаСостояниеЗаписиСтруктурыКластера.Видимость = Истина;
            
            ПараметрыЗаписиСтруктурыКластера = Новый Структура("КлючОбъекта, КлючНастроек, Пользователь", "378e4dc6-5457-4c70-8011-a221d6eb9d09", Строка(Объект.Ссылка), "DefUser");
            
            Корень = ЭтотОбъект.СтруктураКластера.ПолучитьЭлементы();
            Корень.Очистить();
            Кластер1С = Корень.Добавить();
            Кластер1С.ИндексКартинки = 18;
            Кластер1С.Наименование = "Запись структуры кластера...";
            
            ПодключитьОбработчикОжидания("ЗаписатьСтруктуруКластераЗавершение", 1, Истина);
            
        Иначе
            
            Элементы.ЛегендаДерева.Видимость = Истина;
            Элементы.ГруппаСостояниеЗаписиСтруктурыКластера.Видимость = Ложь;
            
            ПодключитьОбработчикОжидания("СтруктураКластераЗавершение", 1 ,Истина);
            
        КонецЕсли;
        
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктураКластераЗавершение() Экспорт
    
    СостояниеФЗ = СтруктураКластераЗавершениеНаСервере(УникальныйИдентификаторПолученияСтруктурыКластера, АдресХранилищаПолученияСтруктурыКластера);
    
    Если СостояниеФЗ = "Активно" Тогда
        ПодключитьОбработчикОжидания("СтруктураКластераЗавершение", 1 ,Истина);
    ИначеЕсли СостояниеФЗ = "Завершено" Тогда
        Элементы.СтруктураКластераОбновитьСтруктуруКластера.Доступность = Истина;
        Элементы.СтруктураКластераЗаписатьСтруктуру.Доступность = Истина;
        СтруктураКластераПолучена();
        
        Если ЗаписатьСтруктуруКластера Тогда
            ЗаписатьСтруктуруКластера = Ложь;
            ЗаписатьСтруктуруОбщая();
            Записать();
        КонецЕсли;
        
        Если ЗакрытьПослеОбновленияСтруктурыКластера Тогда
            Закрыть();
        КонецЕсли;
    
    Иначе
        Элементы.СтруктураКластераОбновитьСтруктуруКластера.Доступность = Истина;
        Элементы.СтруктураКластераЗаписатьСтруктуру.Доступность = Истина;
        СтруктураКластераНеПолучена();
    КонецЕсли;
        
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураКластераЗавершениеНаСервере(УникальныйИдентификаторФоновогоЗадания, АдресХранилища) Экспорт
    
    СостоянияФЗ = Новый Соответствие;
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.Активно, "Активно");
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.Завершено, "Завершено");
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.ЗавершеноАварийно, "ЗавершеноАварийно");
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.Отменено, "Отменено");
    
    
    СостояниеФЗ = Неопределено;
    
    ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторФоновогоЗадания);
    Если ФЗ <> Неопределено Тогда
        СостояниеФЗ = СостоянияФЗ[ФЗ.Состояние];
    КонецЕсли;
    
    Возврат СостояниеФЗ;
    
КонецФункции

&НаСервере
Процедура СтруктураКластераПолучена(Редактировать = Истина)
    
    СтруктураКластераРезультат = ПолучитьИзВременногоХранилища(АдресХранилищаПолученияСтруктурыКластера);
    
    ИнформационныеБазы = ПолучитьИнформационныеБазы(Объект.Ссылка, Объект.ПлощадкаЭксплуатации, СтруктураКластераРезультат.ИнформационныеБазы);
    РабочиеСервера1С = ПолучитьРабочиеСервера(Объект.Ссылка, Объект.ПлощадкаЭксплуатации, СтруктураКластераРезультат.РабочиеСервера1С);
    
    Кластер1С = ЭтотОбъект.СтруктураКластера.ПолучитьЭлементы()[0];
    Кластер1С.Редактировать = Редактировать;
    Кластер1С.Наименование = Объект.Наименование;
    ЭлементыКластера = Кластер1С.ПолучитьЭлементы();
    
    Если ЭлементыКластера.Количество() > 0 Тогда
        
        ИнформационныеБазыКластера = ЭлементыКластера[0].ПолучитьЭлементы();
        ИнформационныеБазыКластера.Очистить();
        
        РабочиеСерверы1СКластера = ЭлементыКластера[1].ПолучитьЭлементы();
        РабочиеСерверы1СКластера.Очистить();
        
    Иначе
        
        ИнформационныеБазыКластера = ЭлементыКластера.Добавить();
        ИнформационныеБазыКластера.Редактировать = Редактировать;
        ИнформационныеБазыКластера.ИндексКартинки = 22;
        ИнформационныеБазыКластера.Наименование = "Информационные базы";
        
        РабочиеСерверы1СКластера = ЭлементыКластера.Добавить();
        РабочиеСерверы1СКластера.Редактировать = Редактировать;
        РабочиеСерверы1СКластера.ИндексКартинки = 9;
        РабочиеСерверы1СКластера.Наименование = "Рабочие серверы 1С";
        
        ИнформационныеБазыКластера = ИнформационныеБазыКластера.ПолучитьЭлементы();
        РабочиеСерверы1СКластера = РабочиеСерверы1СКластера.ПолучитьЭлементы();
        
    КонецЕсли;
        
    Для Каждого ТекИБ Из ИнформационныеБазы Цикл
        
        ИнформационнаяБаза = ИнформационныеБазыКластера.Добавить();
        ИнформационнаяБаза.Редактировать = Редактировать;
        ИнформационнаяБаза.ИндексКартинки = 23;
        ИнформационнаяБаза.Наименование = ТекИБ["ИмяБазыВКластере"];
        ИнформационнаяБаза.Ссылка = ТекИБ["Ссылка"];
        Если ЗначениеЗаполнено(ТекИБ["Ссылка"]) И ЗначениеЗаполнено(ТекИБ["ИмяБазыВКластере"]) Тогда
            ИнформационнаяБаза.ЦветНаименования = 0; // Черный
        ИначеЕсли НЕ ЗначениеЗаполнено(ТекИБ["Ссылка"]) И ЗначениеЗаполнено(ТекИБ["ИмяБазыВКластере"]) Тогда
            ИнформационнаяБаза.ЦветНаименования = 1; // Зеленый
        ИначеЕсли ЗначениеЗаполнено(ТекИБ["Ссылка"]) И НЕ ЗначениеЗаполнено(ТекИБ["ИмяБазыВКластере"]) Тогда
            ИнформационнаяБаза.ЦветНаименования = 2; // Красный
        КонецЕсли;
        
        ИнформационнаяБазаПараметры = ИнформационнаяБаза.ПолучитьЭлементы();
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "Уникальный идентификатор", ТекИБ["УникальныйИдентификаторОбъекта"], Истина); 
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "Описание", ТекИБ["Описание"], Истина);
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "Защищенное соединение", ТекИБ["ЗащищенноеСоединение"], Истина);
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "Сервер базы данных", ТекИБ["СерверБазыДанных"], Истина);
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "Тип СУБД", ТекИБ["ТипСУБД"], Истина);
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "База данных", ТекИБ["БазаДанных"], Истина);
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "Разрешить выдачу лицензий сервером 1С:Предприятия", ТекИБ["РазрешитьВыдачуЛицензийСервером1СПредприятия"], Истина);
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "Блокировка начала сеансов включена", ТекИБ["БлокировкаНачалаСеансовВключена"], Истина);
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "Начало", ТекИБ["Начало"], Истина);
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "Конец", ТекИБ["Конец"], Истина);
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "Блокировка начала регламентных заданий включена", ТекИБ["БлокировкаРегламентныхЗаданийВключена"], Истина);
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "Внешнее управление сеансами", ТекИБ["ВнешнееУправлениеСеансами"], Истина);
        ДобавитьПараметрСтруктуры(ИнформационнаяБазаПараметры, -1, "Обязательное использование внешнего управления", ТекИБ["ОбязательноеИспользованиеВнешнегоУправления"], Истина);
        
    КонецЦикла;
        
    Для Каждого ТекРабочийСервер Из РабочиеСервера1С Цикл
        
        РабочийСервер1С = РабочиеСерверы1СКластера.Добавить();
        РабочийСервер1С.Редактировать = Редактировать;
        РабочийСервер1С.ИндексКартинки = 10;
        Если ЗначениеЗаполнено(ТекРабочийСервер["Оборудование"]) Тогда
            РабочийСервер1С.Наименование = ТекРабочийСервер["Оборудование"];
        Иначе
            РабочийСервер1С.Наименование = ТекРабочийСервер["Хост"];
        КонецЕсли;
        РабочийСервер1С.Ссылка = ТекРабочийСервер["Ссылка"];
        Если ЗначениеЗаполнено(ТекРабочийСервер["Ссылка"]) И ЗначениеЗаполнено(ТекРабочийСервер["Оборудование"]) Тогда
            РабочийСервер1С.ЦветНаименования = 0; // Черный
        ИначеЕсли НЕ ЗначениеЗаполнено(ТекРабочийСервер["Ссылка"]) И ЗначениеЗаполнено(ТекРабочийСервер["Оборудование"]) Тогда
            РабочийСервер1С.ЦветНаименования = 1; // Зеленый
        ИначеЕсли ЗначениеЗаполнено(ТекРабочийСервер["Ссылка"]) И НЕ ЗначениеЗаполнено(ТекРабочийСервер["Оборудование"]) Тогда
            РабочийСервер1С.ЦветНаименования = 2; // Красный
        КонецЕсли;
        
        РабочийСервер1СПараметры = РабочийСервер1С.ПолучитьЭлементы();
        Если ЗначениеЗаполнено(ТекРабочийСервер["Оборудование"]) Тогда
            ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Компьютер", ТекРабочийСервер["Оборудование"], Истина);
            ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Уникальный идентификатор", ТекРабочийСервер["УникальныйИдентификаторОбъекта"], Истина);
        Иначе
            ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Компьютер", ТекРабочийСервер["Хост"], Истина);
            ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Уникальный идентификатор", ТекРабочийСервер["УникальныйИдентификаторОбъекта"], Истина);
        КонецЕсли;        
        ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Описание сервера", ТекРабочийСервер["ОписаниеСервера"], Истина);
        ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "IP Порт", ТекРабочийСервер["IPПорт"], Истина);
        ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Диапазоны IP портов", "0:0", Истина);
        ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Максимальный объем памяти рабочих процессов", ТекРабочийСервер["МаксимальныйОбъемПамятиРабочихПроцессов"], Истина);
        ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Безопасный расход памяти за один вызов", ТекРабочийСервер["БезопасныйРасходПамятиЗаОдинВызов"], Истина);
        ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Объем памяти рабочих процессов, до которого сервер считается производительным", ТекРабочийСервер["ОбъемПамятиРабочихПроцессовДоКоторогоСерверСчитаетсяПроизводительным"], Истина);
        ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Количество ИБ на процесс", ТекРабочийСервер["КоличествоИбНаПроцесс"], Истина);
        ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Количество соединений на процесс", ТекРабочийСервер["КоличествоСоединенийНаПроцесс"], Истина);
        ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Порт главного менеджера кластера", ТекРабочийСервер["ПортГлавногоМенеджераКластера"], Истина);
        ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Менеджер на каждый сервис", ТекРабочийСервер["МенеджерНаКаждыйСервис"], Истина);
        ДобавитьПараметрСтруктуры(РабочийСервер1СПараметры, -1, "Центральный сервер", ТекРабочийСервер["ЦентральныйСервер"], Истина);
                        
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрСтруктуры(Корень, ИндексКартинки, Наименование, Значение, Редактировать)
    
    Параметр = Корень.Добавить();
    Параметр.ИндексКартинки = ИндексКартинки;
    Параметр.Наименование = Наименование;
    Параметр.ПараметрЗначение = Значение;
    Параметр.Редактировать = Редактировать;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИнформационныеБазы(Ссылка, ПлощадкаЭксплуатации, ИнформационныеБазы)
    
    ТЗнБуфер = Новый ТаблицаЗначений();
    ТЗнБуфер.Колонки.Добавить("ИндексМассива", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0)));
    ТЗнБуфер.Колонки.ДОбавить("ИнформационнаяБаза", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
    ТЗнБуфер.Колонки.Добавить("КоличествоОдинаковых", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0)));
    
    Для ИндексМассива = 0 По ИнформационныеБазы.ВГраница() Цикл
        
        НовСтрока = ТЗнБуфер.Добавить();
        НовСтрока.ИндексМассива = ИндексМассива;
        НовСтрока.ИнформационнаяБаза = ИнформационныеБазы[ИндексМассива]["Наименование"];
        НовСтрока.КоличествоОдинаковых = 1;
        
    КонецЦикла;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ИндексМассива,
    |   ИнформационнаяБаза,
    |   КоличествоОдинаковых
    |ПОМЕСТИТЬ
    |   ТЗнБуфер
    |ИЗ
    |   &ТЗнБуфер КАК ТЗнБуфер
    |ИНДЕКСИРОВАТЬ ПО
    |   ИнформационнаяБаза
    |;
    |ВЫБРАТЬ
    |   ТЗнБуфер.ИндексМассива,
    |   ПараметрыИнформационныхБаз.ИмяБазыВКластере,
    |   ПараметрыИнформационныхБаз.ОбъектКонтроля КАК ИнформационнаяБаза
    |ИЗ
    |   ТЗнБуфер
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ПараметрыИнформационныхБаз КАК ПараметрыИнформационныхБаз
    |ПО
    |   ПараметрыИнформационныхБаз.ИмяБазыВКластере = ТЗнБуфер.ИнформационнаяБаза
    |   И ПараметрыИнформационныхБаз.Кластер = &Кластер
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   Справочник.ОбъектыКонтроля КАК ИнформационныеБазы
    |ПО
    |   ИнформационныеБазы.Ссылка = ПараметрыИнформационныхБаз.ОбъектКонтроля
    |   И ИнформационныеБазы.ПлощадкаЭксплуатации В (&ПлощадкиЭксплуатации)
    |";
    
    Запрос.УстановитьПараметр("ТЗнБуфер", ТЗнБуфер);
    Запрос.УстановитьПараметр("Кластер", Ссылка);
    
    ПлощадкиЭксплуатации = Новый Массив;
    ПлощадкиЭксплуатации.Добавить(ПлощадкаЭксплуатации);
    ПлощадкиЭксплуатации.Добавить(Справочники.ПлощадкиЭксплуатации.Корзина());
    Запрос.УстановитьПараметр("ПлощадкиЭксплуатации", ПлощадкиЭксплуатации);
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ИнформационнаяБаза = ИнформационныеБазы[Выборка.ИндексМассива];    
        ИнформационнаяБаза.Вставить("Ссылка", Выборка.ИнформационнаяБаза);
    КонецЦикла;
    
    Возврат ИнформационныеБазы;
    
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРабочиеСервера(Ссылка, ПлощадкаЭксплуатации, РабочиеСервера1С)
    
    ТЗнБуфер = Новый ТаблицаЗначений();
    ТЗнБуфер.Колонки.Добавить("ИндексМассива", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0)));
    ТЗнБуфер.Колонки.Добавить("Хост", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
    ТЗнБуфер.Колонки.Добавить("КоличествоОдинаковых", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0)));
    
    Для ИндексМассива = 0 По РабочиеСервера1С.ВГраница() Цикл
        
        НовСтрока = ТЗнБуфер.Добавить();
        НовСтрока.ИндексМассива = ИндексМассива;
        НовСтрока.Хост = РабочиеСервера1С[ИндексМассива]["Оборудование"];
        НовСтрока.КоличествоОдинаковых = 1;
        
    КонецЦикла;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ИндексМассива,
    |   Хост,
    |   КоличествоОдинаковых
    |ПОМЕСТИТЬ
    |   ТЗнБуфер
    |ИЗ
    |   &ТЗнБуфер КАК ТЗнБуфер
    |ИНДЕКСИРОВАТЬ ПО
    |   Хост
    |;
    |ВЫБРАТЬ
    |   ВыборкаОборудование.ИндексМассива,
    |   ВыборкаОборудование.Оборудование КАК Оборудование,
    |   ПараметрыРабочихСерверов.ОбъектКонтроля КАК РабочийСервер1С,
    |   СУММА(ВыборкаОборудование.КоличествоОдинаковых) КАК КоличествоОдинаковых
    |ИЗ
    |   (ВЫБРАТЬ
    |       ТЗнБуфер.ИндексМассива,
    |       СпрОборудование.Ссылка КАК Оборудование,
    |       СУММА(ТЗнБуфер.КоличествоОдинаковых) КАК КоличествоОдинаковых
    |   ИЗ
    |       ТЗнБуфер
    |   ЛЕВОЕ СОЕДИНЕНИЕ
    |       Справочник.Оборудование КАК СпрОборудование
    |   ПО
    |       СпрОборудование.Хост = ТЗнБуфер.Хост
    |       И СпрОборудование.ПлощадкаЭксплуатации В (&ПлощадкиЭксплуатации)
    |   СГРУППИРОВАТЬ ПО
    |       ТЗнБуфер.ИндексМассива,
    |       СпрОборудование.Ссылка
    |   ) КАК ВыборкаОборудование
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
    |ПО
    |   ПараметрыРабочихСерверов.Оборудование = ВыборкаОборудование.Оборудование
    |   И ПараметрыРабочихСерверов.Кластер = &Кластер
    |СГРУППИРОВАТЬ ПО
    |   ВыборкаОборудование.ИндексМассива,
    |   ВыборкаОборудование.Оборудование,
    |   ПараметрыРабочихСерверов.ОбъектКонтроля
    |";
    
    Запрос.УстановитьПараметр("ТЗнБуфер", ТЗнБуфер);
    Запрос.УстановитьПараметр("Кластер", Ссылка);
    
    ПлощадкиЭксплуатации = Новый Массив;
    ПлощадкиЭксплуатации.Добавить(ПлощадкаЭксплуатации);
    ПлощадкиЭксплуатации.Добавить(Справочники.ПлощадкиЭксплуатации.Корзина());
    Запрос.УстановитьПараметр("ПлощадкиЭксплуатации", ПлощадкиЭксплуатации);
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        РабочийСервер1С = РабочиеСервера1С[Выборка.ИндексМассива];    
        РабочийСервер1С.Вставить("Ссылка", Выборка.РабочийСервер1С);
        РабочийСервер1С.Вставить("Оборудование", Выборка.Оборудование);
    КонецЦикла;
        
    Возврат РабочиеСервера1С;
    
КонецФункции

&НаКлиенте
Процедура ЗаписатьСтруктуруОбщая()
    
    Элементы.ЛегендаДерева.Видимость = Ложь;
    Элементы.ГруппаСостояниеЗаписиСтруктурыКластера.Видимость = Истина;
    
    Элементы.СтруктураКластераОбновитьСтруктуруКластера.Доступность = Ложь;
    Элементы.СтруктураКластераЗаписатьСтруктуру.Доступность = Ложь;
    
    ПараметрыЗаписиСтруктурыКластера = Новый Структура("КлючОбъекта, КлючНастроек, Пользователь", "378e4dc6-5457-4c70-8011-a221d6eb9d09", Строка(Объект.Ссылка), "DefUser");
    
    ЗаписатьСтруктуруНаСервере(ПараметрыЗаписиСтруктурыКластера);
    
    Корень = ЭтотОбъект.СтруктураКластера.ПолучитьЭлементы();
    Корень.Очистить();
    Кластер1С = Корень.Добавить();
    Кластер1С.ИндексКартинки = 18;
    Кластер1С.Наименование = "Запись структуры кластера...";
        
    ПодключитьОбработчикОжидания("ЗаписатьСтруктуруКластераЗавершение", 1, Истина);
    
КонецПроцедуры

&НаСервере
Процедура СтруктураКластераНеПолучена()
    
    ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторПолученияСтруктурыКластера);
    Если ФЗ <> Неопределено Тогда
        Кластер1С = ЭтотОбъект.СтруктураКластера.ПолучитьЭлементы()[0];
        Кластер1С.Наименование = Строка(ФЗ.Состояние);
        Кластер1С.ПараметрЗначение = ПодробноеПредставлениеОшибки(ФЗ.ИнформацияОбОшибке);
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтруктуруНаСервере(ПараметрыЗаписиСтруктурыКластера)
    
    ПараметрыЗаписи = СтруктураЗаписиКластера();
    
    ПараметрыСерверов = ОбработатьПараметрыРабочихСерверовКластера(ПараметрыЗаписи.ПараметрыРабочихСерверов);
    ПараметрыИБ = ОбработатьПараметрыИнформационныхБазКластера(ПараметрыЗаписи.ПараметрыИнформационныхБаз);
    
    ПараметрыЗаписиСтруктурыКластера.Вставить("ПараметрыСерверов", ПараметрыСерверов);
    ПараметрыЗаписиСтруктурыКластера.Вставить("ПараметрыИБ", ПараметрыИБ);
    
    ПараметрыЗапуска = Новый Массив;
    ПараметрыЗапуска.Добавить(ПараметрыЗаписиСтруктурыКластера);
    
    ФЗ = ФоновыеЗадания.Выполнить("АдминистрированиеКластераRAS.СтруктураКластераЗаписать", ПараметрыЗапуска, Объект.Ссылка.УникальныйИдентификатор(), "Кластер 1С """ + Объект.Наименование +""". Запись структуры.");
    УникальныйИдентификаторЗаписиСтруктурыКластера = ФЗ.УникальныйИдентификатор;
    
КонецПроцедуры

&НаСервере
Функция СтруктураЗаписиКластера()
    
    ПараметрыЗаписи = Новый Структура;
    
    Если Объект.Владелец = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С Тогда
        
        ЭлементКластера = ЭтотОбъект.СтруктураКластера.ПолучитьЭлементы();
        
        Если ЭлементКластера.Количество() > 0 Тогда
            ЭлементыКластера = ЭлементКластера[0].ПолучитьЭлементы();
            
            #Область ИнформационныеБазыКластера
            
            Если ЭлементыКластера.Количество() > 0 Тогда
                
                ИнформационныеБазыКластера = ЭлементыКластера[0].ПолучитьЭлементы(); 
                
                ИнформационныеБазыПараметрыЗаписи = Новый Массив;
                
                Для Каждого ИнформационнаяБазаКластера Из ИнформационныеБазыКластера Цикл
                    
                    ИнформационнаяБазаПараметрЗаписи = Новый Структура;
                    ИнформационнаяБазаПараметрЗаписи.Вставить("Наименование", ИнформационнаяБазаКластера.Наименование);
                    ИнформационнаяБазаПараметрЗаписи.Вставить("Ссылка", ИнформационнаяБазаКластера.Ссылка);
                    ИнформационнаяБазаПараметрЗаписи.Вставить("Редактировать", ИнформационнаяБазаКластера.Редактировать);
                    
                    ПараметрыИнформационнойБазы = ИнформационнаяБазаКластера.ПолучитьЭлементы();
                    Для Каждого ТекПараметр Из ПараметрыИнформационнойБазы Цикл
                        
                        КлючМассив = СтрРазделить(СтрЗаменить(ТекПараметр.Наименование, ":", ""), " ", Ложь);
                        Для Индекс = 0 По КлючМассив.ВГраница() Цикл
                            КлючМассив[Индекс] = ВРЕГ(Лев(КлючМассив[Индекс], 1)) + Прав(КлючМассив[Индекс], СтрДлина(КлючМассив[Индекс]) - 1);
                        КонецЦикла;                        
                        Ключ = СтрСоединить(КлючМассив, "");
                        
                        ИнформационнаяБазаПараметрЗаписи.Вставить(Ключ, ТекПараметр.ПараметрЗначение); 
                        
                    КонецЦикла;
                                        
                    ИнформационныеБазыПараметрыЗаписи.Добавить(ИнформационнаяБазаПараметрЗаписи);
                    
                КонецЦикла;
                
                ПараметрыЗаписи.Вставить("ПараметрыИнформационныхБаз", ИнформационныеБазыПараметрыЗаписи);
                
            КонецЕсли;
            
            #КонецОбласти
            
            #Область РабочиеСервераКластера
            
            Если ЭлементыКластера.Количество() > 1 Тогда
                
                РабочиеСервераКластера = ЭлементыКластера[1].ПолучитьЭлементы();
                
                РабочиеСервераПараметрыЗаписи = Новый Массив;
                
                Для Каждого РабочийСерверКластера Из РабочиеСервераКластера Цикл
                    
                    РабочийСерверПараметрыЗаписи = Новый Структура;
                    РабочийСерверПараметрыЗаписи.Вставить("Наименование", РабочийСерверКластера.Наименование);
                    РабочийСерверПараметрыЗаписи.Вставить("Ссылка", РабочийСерверКластера.Ссылка);
                    РабочийСерверПараметрыЗаписи.Вставить("Редактировать", РабочийСерверКластера.Редактировать);
                    
                    ПараметрыРабочегоСервераКластера = РабочийСерверКластера.ПолучитьЭлементы();
                    Для Каждого ТекПараметр Из ПараметрыРабочегоСервераКластера Цикл
                        
                        КлючМассив = СтрРазделить(СтрЗаменить(ТекПараметр.Наименование, ",", ""), " ", Ложь);
                        Для Индекс = 0 По КлючМассив.ВГраница() Цикл
                            КлючМассив[Индекс] = ВРЕГ(Лев(КлючМассив[Индекс], 1)) + Прав(КлючМассив[Индекс], СтрДлина(КлючМассив[Индекс]) - 1);
                        КонецЦикла;                        
                        Ключ = СтрСоединить(КлючМассив, "");
                        
                        РабочийСерверПараметрыЗаписи.Вставить(Ключ, ТекПараметр.ПараметрЗначение);
                        
                    КонецЦикла;
                    
                    РабочиеСервераПараметрыЗаписи.Добавить(РабочийСерверПараметрыЗаписи);
                    
                КонецЦикла;
                
                ПараметрыЗаписи.Вставить("ПараметрыРабочихСерверов", РабочиеСервераПараметрыЗаписи); 
                
            КонецЕсли;
            
            #КонецОбласти
            
        КонецЕсли;
        
    КонецЕсли;
    
    Возврат ПараметрыЗаписи;
    
КонецФункции

&НаСервере
Функция ОбработатьПараметрыРабочихСерверовКластера(РабочиеСервераКластера1С)
    
    ПараметрыКоманды = Новый Соответствие;
    ПараметрыКоманды.Вставить("equipmentLocation", Объект.ПлощадкаЭксплуатации.Наименование);
    ПараметрыКоманды.Вставить("equipmentLocationRef", Объект.ПлощадкаЭксплуатации);
    
    РабочиеСерверы1С = Новый Массив;
    ОборудованиеРабочихСерверов = Новый Массив;
    
    НастройкиПоУмолчанию = РегистрыСведений.ПараметрыРабочихСерверов.ПрочитатьНастройки(Справочники.ВидыОбъектовКонтроля.РабочийСервер);
    НастройкиПоУмолчаниюКонтрольУстойчивости = РегистрыСведений.НастройкиСборДампов.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы());
    НастройкиПоУмолчаниюАнализВызововКластера1С = РегистрыСведений.НастройкиАнализВызововКластера1С.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.АнализВызововКластера1С());
    НастройкиПоУмолчаниюМониторингСистемныхОшибок = РегистрыСведений.НастройкиКонтрольЧислаИсключений.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.МониторингСистемныхОшибок());
    
    Для Каждого РабочийСерверКластера1С Из РабочиеСервераКластера1С Цикл
        
        Если РабочийСерверКластера1С.Редактировать = 1 Тогда
            
            ЕдиницаОборудования = Новый Соответствие;
            ЕдиницаОборудования.Вставить("description", РабочийСерверКластера1С.Наименование);
            ЕдиницаОборудования.Вставить("host", РабочийСерверКластера1С.Компьютер);
            ЕдиницаОборудования.Вставить("languageOS", "Английский");
            
            Роли = Новый Массив;
            Роли.Добавить("Рабочий сервер 1С");
            ЕдиницаОборудования.Вставить("role", Роли);
            
            ОборудованиеРабочихСерверов.Добавить(ЕдиницаОборудования);
            
            ПараметрыРабочегоСервера1С = Новый Соответствие;
            ПараметрыРабочегоСервера1С.Вставить("uuid", РабочийСерверКластера1С.УникальныйИдентификатор);
            ПараметрыРабочегоСервера1С.Вставить("ref", РабочийСерверКластера1С.Ссылка);
            ПараметрыРабочегоСервера1С.Вставить("description", РабочийСерверКластера1С.Наименование);
            ПараметрыРабочегоСервера1С.Вставить("equipment", РабочийСерверКластера1С.Компьютер);
            ПараметрыРабочегоСервера1С.Вставить("equipmentDescr", РабочийСерверКластера1С.Наименование);
            ПараметрыРабочегоСервера1С.Вставить("cluster1CRef", Объект.Ссылка);
            ПараметрыРабочегоСервера1С.Вставить("cluster1C", Объект.Наименование);
            ПараметрыРабочегоСервера1С.Вставить("portRange", РабочийСерверКластера1С.ДиапазоныIPПортов);
            ПараметрыРабочегоСервера1С.Вставить("name", РабочийСерверКластера1С.ОписаниеСервера);
            ПараметрыРабочегоСервера1С.Вставить("mainPort", РабочийСерверКластера1С.IPПорт);
            ПараметрыРабочегоСервера1С.Вставить("workingProcessMemoryLimit", РабочийСерверКластера1С.МаксимальныйОбъемПамятиРабочихПроцессов);
            ПараметрыРабочегоСервера1С.Вставить("safeCallMemoryLimit", РабочийСерверКластера1С.БезопасныйРасходПамятиЗаОдинВызов);
            ПараметрыРабочегоСервера1С.Вставить("workingProcessMemoryLimit", РабочийСерверКластера1С.ОбъемПамятиРабочихПроцессовДоКоторогоСерверСчитаетсяПроизводительным);
            ПараметрыРабочегоСервера1С.Вставить("infoBasesPerWorkingProcessLimit", РабочийСерверКластера1С.КоличествоИБНаПроцесс);
            ПараметрыРабочегоСервера1С.Вставить("connectionsPerWorkingProcessLimit", РабочийСерверКластера1С.КоличествоСоединенийНаПроцесс);
            ПараметрыРабочегоСервера1С.Вставить("clusterMainPort", РабочийСерверКластера1С.ПортГлавногоМенеджераКластера);
            ПараметрыРабочегоСервера1С.Вставить("dedicatedManagers", РабочийСерверКластера1С.МенеджерНаКаждыйСервис);
            ПараметрыРабочегоСервера1С.Вставить("mainServer", РабочийСерверКластера1С.ЦентральныйСервер);
                        
            Если НЕ ЗначениеЗаполнено(РабочийСерверКластера1С.Ссылка) Тогда
                
                ПараметрыРабочегоСервера1С.Вставить("settingsDirectory", НастройкиПоУмолчанию.КаталогНастроекТЖ);
                ПараметрыРабочегоСервера1С.Вставить("settingsDirectoryNetwork", НастройкиПоУмолчанию.КаталогНастроекТЖСетевой);
                ПараметрыРабочегоСервера1С.Вставить("dataDirectory", НастройкиПоУмолчанию.КаталогОбменаДанными);
                ПараметрыРабочегоСервера1С.Вставить("dataDirectoryNetwork", НастройкиПоУмолчанию.КаталогОбменаДаннымиСетевой);
                ПараметрыРабочегоСервера1С.Вставить("tempDirectory", НастройкиПоУмолчанию.КаталогВременный);
                
                КонтрольУстойчивости = Новый Соответствие;
                КонтрольУстойчивости.Вставить("description", "Контроль устойчивости для " + РабочийСерверКластера1С.Наименование);
                КонтрольУстойчивости.Вставить("folderTjNetwork", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогТЖСетевой);
                КонтрольУстойчивости.Вставить("folderTjLocal", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогТЖЛокальный);
                КонтрольУстойчивости.Вставить("durationFileTj", НастройкиПоУмолчаниюКонтрольУстойчивости.ДлительностьХраненияФайловТЖ);
                КонтрольУстойчивости.Вставить("folderDumpNetwork", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВыгрузкиДамповСетевой);
                КонтрольУстойчивости.Вставить("folderDumpLocal", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВыгрузкиДампов);
                КонтрольУстойчивости.Вставить("folderTemp", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВременныхФайлов);
                КонтрольУстойчивости.Вставить("levelDetailDump", НастройкиПоУмолчаниюКонтрольУстойчивости.УровеньДетализацииДампов);
                КонтрольУстойчивости.Вставить("autoSettingsTj", НастройкиПоУмолчаниюКонтрольУстойчивости.АвтоматическаяНастройка);
                КонтрольУстойчивости.Вставить("agentEnable", НастройкиПоУмолчаниюКонтрольУстойчивости.ИспользоватьАгента);
                КонтрольУстойчивости.Вставить("folderExportDumps", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогЭкспортаДампов);
                
                Если НастройкиПоУмолчаниюКонтрольУстойчивости.Расписание <> Неопределено Тогда
                    Расписание = Новый Соответствие;
                    Расписание.Вставить("repeatDays", НастройкиПоУмолчаниюКонтрольУстойчивости.Расписание.ПериодПовтораДней);
                    Расписание.Вставить("repeatSeconds", НастройкиПоУмолчаниюКонтрольУстойчивости.Расписание.ПериодПовтораВТечениеДня);
                    КонтрольУстойчивости.Вставить("schedule", Расписание);
                КонецЕсли;
                
                КонтрольУстойчивости.Вставить("start", Ложь);
                                
                ПараметрыРабочегоСервера1С.Вставить("controlCollectionDumps", КонтрольУстойчивости);
                
                АнализВызововКластера1С = Новый Соответствие;
                АнализВызововКластера1С.Вставить("description", "Анализ вызовов кластера 1С для " + РабочийСерверКластера1С.Наименование);
                АнализВызововКластера1С.Вставить("folderTemp", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВременныхФайлов);
                АнализВызововКластера1С.Вставить("dataDirectory", НастройкиПоУмолчанию.КаталогОбменаДанными);
                АнализВызововКластера1С.Вставить("dataDirectoryNetwork", НастройкиПоУмолчанию.КаталогОбменаДаннымиСетевой);
                Если НастройкиПоУмолчаниюАнализВызововКластера1С.Расписание <> Неопределено Тогда
                    Расписание = Новый Соответствие;
                    Расписание.Вставить("repeatDays", НастройкиПоУмолчаниюАнализВызововКластера1С.Расписание.ПериодПовтораДней);
                    Расписание.Вставить("repeatSeconds", НастройкиПоУмолчаниюАнализВызововКластера1С.Расписание.ПериодПовтораВТечениеДня);
                    АнализВызововКластера1С.Вставить("schedule", Расписание);    
                КонецЕсли;
                АнализВызововКластера1С.Вставить("storageTimeTJ", НастройкиПоУмолчаниюАнализВызововКластера1С.ДлительностьХраненияФайловТЖ);
                АнализВызововКластера1С.Вставить("storageTimeQMC", НастройкиПоУмолчаниюАнализВызововКластера1С.СрокХраненияТЖ);
                АнализВызововКластера1С.Вставить("autoDelete", НастройкиПоУмолчаниюАнализВызововКластера1С.АвтоматическиУдалятьЗаписиТЖ);
                                
                АнализВызововКластера1С.Вставить("start", Ложь);
                
                ПараметрыРабочегоСервера1С.Вставить("callAnalysisCluster1C", АнализВызововКластера1С);
                
                МониторингСистемныхОшибок = Новый Соответствие;
                МониторингСистемныхОшибок.Вставить("description", "Мониторинг системных ошибок для " + РабочийСерверКластера1С.Наименование);
                МониторингСистемныхОшибок.Вставить("folderTemp", НастройкиПоУмолчаниюКонтрольУстойчивости.КаталогВременныхФайлов);
                МониторингСистемныхОшибок.Вставить("dataDirectory", НастройкиПоУмолчанию.КаталогОбменаДанными);
                МониторингСистемныхОшибок.Вставить("dataDirectoryNetwork", НастройкиПоУмолчанию.КаталогОбменаДаннымиСетевой);
                Если НастройкиПоУмолчаниюМониторингСистемныхОшибок.Расписание <> Неопределено Тогда
                    Расписание = Новый Соответствие;
                    Расписание.Вставить("repeatDays", НастройкиПоУмолчаниюМониторингСистемныхОшибок.Расписание.ПериодПовтораДней);
                    Расписание.Вставить("repeatSeconds", НастройкиПоУмолчаниюМониторингСистемныхОшибок.Расписание.ПериодПовтораВТечениеДня);
                    МониторингСистемныхОшибок.Вставить("schedule", Расписание);    
                КонецЕсли;
                МониторингСистемныхОшибок.Вставить("storageTimeTJ", НастройкиПоУмолчаниюМониторингСистемныхОшибок.ДлительностьХраненияФайловТЖ);
                МониторингСистемныхОшибок.Вставить("storageTimeQMC", НастройкиПоУмолчаниюМониторингСистемныхОшибок.СрокХраненияТЖ);
                МониторингСистемныхОшибок.Вставить("autoDelete", НастройкиПоУмолчаниюМониторингСистемныхОшибок.АвтоматическиУдалятьЗаписиТЖ);
                                
                МониторингСистемныхОшибок.Вставить("start", Ложь);
                
                ПараметрыРабочегоСервера1С.Вставить("monitoringSystemErrors", МониторингСистемныхОшибок);
                
            КонецЕсли;
            
            РабочиеСерверы1С.Добавить(ПараметрыРабочегоСервера1С);
            
        КонецЕсли;
        
    КонецЦикла;
    
    ПараметрыКоманды.Вставить("equipment", ОборудованиеРабочихСерверов);
    ПараметрыКоманды.Вставить("workingServer1C", РабочиеСерверы1С);
    
    Возврат ПараметрыКоманды;
        
КонецФункции

&НаСервере
Функция ОбработатьПараметрыИнформационныхБазКластера(ИнформационныеБазыКластера1С)
    
    ПараметрыКоманды = Новый Соответствие;
    ПараметрыКоманды.Вставить("equipmentLocation", Объект.ПлощадкаЭксплуатации.Наименование);
    ПараметрыКоманды.Вставить("equipmentLocationRef", Объект.ПлощадкаЭксплуатации);
    
    НастройкиПоУмолчаниюКонтрольПроизводительности = РегистрыСведений.НастройкиКонтрольПроизводительности.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПроизводительности());
    НастройкиПоУмолчаниюКонтрольПодключений = РегистрыСведений.НастройкиКонтрольПодключений.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений());
    НастройкиПоУмолчанияКонтрольРегЗаданий = РегистрыСведений.НастройкиКонтрольРегламентныхЗаданий.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий());
    
    ИнформационныеБазы = Новый Массив;
    
    Для Каждого ИнформационнаяБазаКластера1С Из ИнформационныеБазыКластера1С Цикл
        
        Если ИнформационнаяБазаКластера1С.Редактировать = 1 Тогда
            
            ПараметрыИнформационнойБазы = Новый Соответствие;
            ПараметрыИнформационнойБазы.Вставить("uuid", ИнформационнаяБазаКластера1С.УникальныйИдентификатор);
            ПараметрыИнформационнойБазы.Вставить("ref", ИнформационнаяБазаКластера1С.Ссылка);
            ПараметрыИнформационнойБазы.Вставить("descr", ИнформационнаяБазаКластера1С.Наименование);
            ПараметрыИнформационнойБазы.Вставить("cluster1CRef", Объект.Ссылка);
            ПараметрыИнформационнойБазы.Вставить("cluster1C", Объект.Наименование);
            ПараметрыИнформационнойБазы.Вставить("name", ИнформационнаяБазаКластера1С.Наименование);
            
            Если НЕ ЗначениеЗаполнено(ИнформационнаяБазаКластера1С.Ссылка) Тогда
                
                КаталогИБ = СтрЗаменить(ИнформационнаяБазаКластера1С.Наименование, "\", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, "/", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, ":", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, "*", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, "?", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, """", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, "<", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, ">", "_");
                КаталогИБ = СтрЗаменить(КаталогИБ, "|", "_");
                                
                КонтрольПроизводительностиНастройки = Новый Соответствие;
                КонтрольПроизводительностиНастройки.Вставить("description", "Контроль производительности для " + ИнформационнаяБазаКластера1С.Наименование);
                КонтрольПроизводительностиНастройки.Вставить("directoryOfApdexFiles", НастройкиПоУмолчаниюКонтрольПроизводительности.КаталогФайловОценкиПроизводительности + КаталогИБ);
                КонтрольПроизводительностиНастройки.Вставить("start", Ложь);
                
                Если НастройкиПоУмолчаниюКонтрольПроизводительности.Расписание <> Неопределено Тогда
                    Расписание = Новый Соответствие;
                    Расписание.Вставить("repeatDays", НастройкиПоУмолчаниюКонтрольПроизводительности.Расписание.ПериодПовтораДней);
                    Расписание.Вставить("repeatSeconds", НастройкиПоУмолчаниюКонтрольПроизводительности.Расписание.ПериодПовтораВТечениеДня);
                    КонтрольПроизводительностиНастройки.Вставить("schedule", Расписание);
                КонецЕсли;
                
                ПараметрыИнформационнойБазы.Вставить("apdexMonitoring", КонтрольПроизводительностиНастройки);
                
                КонтрольПодключенийНастройки = Новый Соответствие;
                КонтрольПодключенийНастройки.Вставить("description", "Контроль подключений для " + ИнформационнаяБазаКластера1С.Наименование);
                Если НастройкиПоУмолчаниюКонтрольПодключений.МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.WEBСервис Тогда
                    КонтрольПодключенийНастройки.Вставить("connectionType", "WEB");
                    КонтрольПодключенийНастройки.Вставить("connectionString", НастройкиПоУмолчаниюКонтрольПодключений.URLОпубликованнойИнформационнойБазы + ИнформационнаяБазаКластера1С.Наименование);
                ИначеЕсли НастройкиПоУмолчаниюКонтрольПодключений.МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.COMСоединитель Тогда
                    КонтрольПодключенийНастройки.Вставить("connectionType", "COM");
                    КонтрольПодключенийНастройки.Вставить("connectionString", НастройкиПоУмолчаниюКонтрольПодключений.СтрокаСоединения);
                КонецЕсли;
                КонтрольПодключенийНастройки.Вставить("connectionTimeout", НастройкиПоУмолчаниюКонтрольПодключений.Таймаут);
                КонтрольПодключенийНастройки.Вставить("login", НастройкиПоУмолчаниюКонтрольПодключений.ЛогинПриПодключении);
                КонтрольПодключенийНастройки.Вставить("password", НастройкиПоУмолчаниюКонтрольПодключений.ПарольПриПодключении);
                КонтрольПодключенийНастройки.Вставить("proxyEnable", НастройкиПоУмолчаниюКонтрольПодключений.ИспользоватьПрокси);
                КонтрольПодключенийНастройки.Вставить("proxyServer", НастройкиПоУмолчаниюКонтрольПодключений.ПроксиСервер);
                КонтрольПодключенийНастройки.Вставить("proxyPort", НастройкиПоУмолчаниюКонтрольПодключений.ПроксиПорт);
                КонтрольПодключенийНастройки.Вставить("controlPeriod", НастройкиПоУмолчаниюКонтрольПодключений.ПериодКонтроля);
                КонтрольПодключенийНастройки.Вставить("minimumAvailability", НастройкиПоУмолчаниюКонтрольПодключений.МинимальныйПроцентДоступности);
                КонтрольПодключенийНастройки.Вставить("noDataAllowed", НастройкиПоУмолчаниюКонтрольПодключений.ДопустимоНетДанных);
                КонтрольПодключенийНастройки.Вставить("start", Ложь);
                          
                ПараметрыИнформационнойБазы.Вставить("connectionMonitoring", КонтрольПодключенийНастройки);
                
                КонтрольРегламентныхЗаданий = Новый Соответствие;
                КонтрольРегламентныхЗаданий.Вставить("description", "Контроль выполнения регламентных заданий для " + ИнформационнаяБазаКластера1С.Наименование);
                КонтрольРегламентныхЗаданий.Вставить("allowableDuration", НастройкиПоУмолчанияКонтрольРегЗаданий.ДопустимаяДлительностьВыполнения);
                КонтрольРегламентныхЗаданий.Вставить("clientDirectory", НастройкиПоУмолчанияКонтрольРегЗаданий.КаталогЗапускаКлиента);
                КонтрольРегламентныхЗаданий.Вставить("start", Ложь);
                
                Если НастройкиПоУмолчанияКонтрольРегЗаданий.Расписание <> Неопределено Тогда
                    Расписание = Новый Соответствие;
                    Расписание.Вставить("repeatDays", НастройкиПоУмолчанияКонтрольРегЗаданий.Расписание.ПериодПовтораДней);
                    Расписание.Вставить("repeatSeconds", НастройкиПоУмолчанияКонтрольРегЗаданий.Расписание.ПериодПовтораВТечениеДня);
                    КонтрольРегламентныхЗаданий.Вставить("schedule", Расписание);
                КонецЕсли;
                
                ПараметрыИнформационнойБазы.Вставить("controlRoutineTasks", КонтрольРегламентныхЗаданий);
                
            КонецЕсли;
                        
            ИнформационныеБазы.Добавить(ПараметрыИнформационнойБазы);
            
        КонецЕсли;
        
    КонецЦикла;
    
    ПараметрыКоманды.Вставить("infoBases", ИнформационныеБазы);
    
    Возврат ПараметрыКоманды;
    
КонецФункции

&НаСервере
Процедура ФорматЛегенды()
    
    ЛегендаДерева.ОтображатьЗаголовок = Ложь;
    ЛегендаДерева.ОтображатьЛегенду = Истина;
        
    ЛегендаДерева.ОбластьПостроения.Лево = 0;
    ЛегендаДерева.ОбластьПостроения.Верх = 0;
    ЛегендаДерева.ОбластьПостроения.Низ = 0;
    ЛегендаДерева.ОбластьПостроения.Право = 0;
    ЛегендаДерева.ОбластьПостроения.Расположение = РасположениеОбластиПостроенияДиаграммы.УказываетсяРасположение;
    
    ЛегендаДерева.ОбластьЛегенды.Лево = 0.05;
    ЛегендаДерева.ОбластьЛегенды.Верх = 0;
    ЛегендаДерева.ОбластьЛегенды.Низ = 1;
    ЛегендаДерева.ОбластьЛегенды.Право = 1;
    ЛегендаДерева.ОбластьЛегенды.Расположение = РасположениеЛегендыДиаграммы.УказываетсяРасположение;
    
    Серия = ЛегендаДерева.Серии.Добавить("Существующий объект");
    Серия.Цвет = Новый Цвет(0,0,0);
    
    Серия = ЛегендаДерева.Серии.Добавить("Новый объект");
    Серия.Цвет = Новый Цвет(0,128,0);
    
    Серия = ЛегендаДерева.Серии.Добавить("Удаленный объект");
    Серия.Цвет = Новый Цвет(255,0,0);
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСтруктуруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Записать();
        ЗаписатьСтруктуруОбщая();
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСтруктуруКластераЗавершение() Экспорт
    
    РезультатПроверки = ЗаписатьСтруктуруКластераЗавершениеНаСервере(ПараметрыЗаписиСтруктурыКластера, УникальныйИдентификаторЗаписиСтруктурыКластера);
    
    Если РезультатПроверки.Состояние = "Активно" Тогда
        
        Если РезультатПроверки.Настройки <> Неопределено Тогда
            СостояниеЗаписиСтруктурыКластера = РезультатПроверки.Настройки.Значение;
            СостояниеЗаписиСтруктурыКластераСтрока = РезультатПроверки.Настройки.Описание;
        КонецЕсли;
        
        ПодключитьОбработчикОжидания("ЗаписатьСтруктуруКластераЗавершение", 1, Истина);
        
    ИначеЕсли РезультатПроверки.Состояние = "Завершено" Тогда
        
        Если РезультатПроверки.Настройки <> Неопределено Тогда
            СостояниеЗаписиСтруктурыКластера = РезультатПроверки.Настройки.Значение;
            СостояниеЗаписиСтруктурыКластераСтрока = РезультатПроверки.Настройки.Описание;
        КонецЕсли;
        
        ИдетЗаписьСтруктурыКластера = Ложь;
        ОбновитьСтруктуруКластера(Неопределено);
                    
    Иначе
        
        ИдетЗаписьСтруктурыКластера = Ложь;
        ОбновитьСтруктуруКластера(Неопределено);
        
    КонецЕсли;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьСтруктуруКластераЗавершениеНаСервере(ПараметрыЗаписиСтруктурыКластера, УникальныйИдентификаторЗаписиСтруктурыКластера)
    
    Результат = Новый Структура("Состояние, Настройки", Неопределено, Неопределено);
    
    СостоянияФЗ = Новый Соответствие;
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.Активно, "Активно");
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.Завершено, "Завершено");
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.ЗавершеноАварийно, "ЗавершеноАварийно");
    СостоянияФЗ.Вставить(СостояниеФоновогоЗадания.Отменено, "Отменено");
        
    СостояниеФЗ = Неопределено;
    
    ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗаписиСтруктурыКластера);
    Если ФЗ <> Неопределено Тогда
        Результат.Состояние = СостоянияФЗ[ФЗ.Состояние];
    КонецЕсли;
    
    Если ФЗ <> Неопределено И ФЗ.Состояние = СостояниеФоновогоЗадания.Активно ИЛИ ФЗ.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
        
        ПараметрыОтбора = Новый Структура("КлючОбъекта, КлючНастроек, Пользователь",
            ПараметрыЗаписиСтруктурыКластера.КлючОбъекта,
            ПараметрыЗаписиСтруктурыКластера.КлючНастроек,
            ПараметрыЗаписиСтруктурыКластера.Пользователь);
        
        УстановитьПривилегированныйРежим(Истина);
        НастройкиВыборка = ХранилищеОбщихНастроек.Выбрать(ПараметрыОтбора);
        УстановитьПривилегированныйРежим(Ложь);
        
        Пока НастройкиВыборка.Следующий() Цикл
            
            Если ЗначениеЗаполнено(НастройкиВыборка.Настройки) Тогда
                Результат.Настройки = НастройкиВыборка.Настройки;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

&НаКлиенте
Процедура ДалееОбщая()
    
    Если Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиПодключение Тогда
        ДалееПодключение();
    ИначеЕсли Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиКластер Тогда
        ДалееКластер();
    ИначеЕсли Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиАутентификация Тогда
        ДалееАутентификация();
    КонецЕсли;
    
    ТекущаяСтраницаБуфер = Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница;
    
КонецПроцедуры

&НаКлиенте
Процедура НазадОбщая()
    
    Если Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиКластер Тогда
        Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиПодключение;
    ИначеЕсли  Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиАутентификация Тогда
        Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиКластер;
    ИначеЕсли Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиНаименование Тогда
        Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиАутентификация;
    КонецЕсли;
    
    ТекущаяСтраницаБуфер = Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница;
    
КонецПроцедуры

&НаКлиенте
Процедура ДалееПодключение()
    
    Если НЕ ЗначениеЗаполнено(Объект.Подключение) Тогда
        СообщениеПользователю = Новый СообщениеПользователю();
        СообщениеПользователю.Текст = НСтр("ru='Не выбрано подключение!'");
        СообщениеПользователю.Поле = "Объект.Подключение";
        СообщениеПользователю.Сообщить();
        Возврат;
    КонецЕсли;
    
    Попытка
        ПроверитьПодключениеМастерНастройки(Объект.Подключение);
    Исключение
        СообщениеПользователю = Новый СообщениеПользователю();
        СообщениеПользователю.Текст = ИнформацияОбОшибке().Описание;
        СообщениеПользователю.Поле = "Объект.Подключение";
        СообщениеПользователю.Сообщить();
        Возврат;        
    КонецПопытки;
    
    ЗаполнитьДоступныеКластеры();
    
    Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиКластер;
    
КонецПроцедуры

&НаКлиенте
Процедура ДалееКластер()
    Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиАутентификация;
КонецПроцедуры

&НаКлиенте
Процедура ДалееАутентификация()
    
    Попытка
        ПроверитьНастройкиПодключенияНаСервере();
        ЭтотОбъект.Мониторинг = "Включить";
        ПолучитьПараметры(Неопределено);
    Исключение
        СообщениеПользователю = Новый СообщениеПользователю();
        СообщениеПользователю.Текст = ИнформацияОбОшибке().Описание;
        СообщениеПользователю.Поле = "АдминистраторКластера";
        СообщениеПользователю.Сообщить();
        Возврат;
    КонецПопытки;
    
    Элементы.ГруппаМастерНастройкиСтраницы.ТекущаяСтраница = Элементы.ГруппаМастерНастройкиНаименование;
    Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
        Объект.Наименование = ЭтотОбъект.Компьютер;
    КонецЕсли;
        
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьПодключениеМастерНастройки(Подключение)
    
    Кластер_1С.ПроверитьПодключение(Подключение);
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоступныеКластеры()
    
    СписокКластеров.Очистить();
    
    Попытка
        Кластеры = ПолучитьКластеры(Объект.Подключение);
    Исключение
        Сообщить(ИнформацияОбОшибке().Описание);
        Возврат;
    КонецПопытки;
    
    Элементы.Компьютер.СписокВыбора.Очистить();
    Элементы.КомпьютерМастерНастройки.СписокВыбора.Очистить();
    Если Кластеры.Количество() > 1 Тогда
        
        Элементы.Компьютер.КнопкаВыпадающегоСписка = Истина;
        Элементы.КомпьютерМастерНастройки.КнопкаВыпадающегоСписка = Истина;
        
        Для Каждого ТекКластер Из Кластеры Цикл
            
            ПредставлениеКластера = ТекКластер["АдресКластера"] + ":" + Формат(ТекКластер["ПортКластера"], "ЧН=0; ЧГ=0");
            
            Элементы.Компьютер.СписокВыбора.Добавить(ПредставлениеКластера);
            Элементы.КомпьютерМастерНастройки.СписокВыбора.Добавить(ПредставлениеКластера);
            СписокКластеров.Добавить(ПредставлениеКластера, ТекКластер["УникальныйИдентификаторОбъекта"]);
        КонецЦикла;
        
        ЭтотОбъект.Компьютер = Элементы.Компьютер.СписокВыбора.Получить(0);
        Объект.УникальныйИдентификаторОбъекта = Кластеры[0]["УникальныйИдентификаторОбъекта"];
        
    ИначеЕсли Кластеры.Количество() = 1 Тогда
        
        ТекКластер = Кластеры[0]; 
        ПредставлениеКластера = ТекКластер["АдресКластера"] + ":" + Формат(ТекКластер["ПортКластера"], "ЧН=0; ЧГ=0");
        
        Элементы.Компьютер.КнопкаВыпадающегоСписка = Ложь;
        Элементы.КомпьютерМастерНастройки.КнопкаВыпадающегоСписка = Ложь;
        ЭтотОбъект.Компьютер = ПредставлениеКластера;
        Объект.УникальныйИдентификаторОбъекта = Кластеры[0]["УникальныйИдентификаторОбъекта"];
        СписокКластеров.Добавить(ПредставлениеКластера, Кластеры[0]["УникальныйИдентификаторОбъекта"]);
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура КомпьютерПриИзмененииОбщая()
    
    ЭлементСписка = СписокКластеров.НайтиПоЗначению(ЭтотОбъект.Компьютер);
    Если ЭлементСписка <> Неопределено Тогда
        Объект.УникальныйИдентификаторОбъекта = ЭлементСписка.Представление;
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

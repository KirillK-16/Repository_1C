#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПредопределенныеПроцедуры

Процедура ПередЗаписью(Отказ)
    
    Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОбновлениеИБ") И ДополнительныеСвойства.ОбновлениеИБ Тогда
		Возврат;
	КонецЕсли;
		
    Если ЭтотОбъект.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений() Тогда
        Если ЗначениеЗаполнено(Ссылка) Тогда
            ДополнительныеСвойства.Вставить("СсылкаПометкаУдаления", Ссылка.ПометкаУдаления);
        Иначе
            ДополнительныеСвойства.Вставить("СсылкаПометкаУдаления", Неопределено);
        КонецЕсли;
        ДополнительныеСвойства.Вставить("СсылкаНастройки", Справочники.КонтрольныеПроцедуры.ПолучитьНастройкиКонтрольПодключений(Ссылка));
        ДополнительныеСвойства.Вставить("Ссылка", Ссылка);
        Возврат;
    КонецЕсли;
    
    ИспользоватьАгента = Ложь;
    Если ДополнительныеСвойства.Свойство("ИспользоватьАгента") Тогда
        ИспользоватьАгента = ДополнительныеСвойства.ИспользоватьАгента;
    КонецЕсли;
        
    Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
		НовоеРасписание = ЭтотОбъект.Расписание.Получить();
		Если НовоеРасписание <> Неопределено И ЭтотОбъект.Выполнять И НЕ ИспользоватьАгента Тогда
			ЭтотОбъект.КлючРегламентногоЗадания = ОбновитьРегламентноеЗадание(НовоеРасписание, НЕ ЭтотОбъект.Пауза);
		Иначе
			УдалитьРегламентноеЗадание();
			ЭтотОбъект.КлючРегламентногоЗадания = "";	
		КонецЕсли;
	КонецЕсли;
    
	МенеджерЗаписи = РегистрыСведений.ОбъектыБлокировок.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Ссылка;
	МенеджерЗаписи.Записать(Истина);
	
	ЭтоНовый = ЭтотОбъект.ЭтоНовый();
    
    ЭтотОбъект.СостояниеИзменилось = ЭтотОбъект.Выполнять <> ЭтотОбъект.Ссылка.Выполнять; 
    
    Если ЗначениеЗаполнено(Ссылка) Тогда
        ДополнительныеСвойства.Вставить("СсылкаПометкаУдаления", Ссылка.ПометкаУдаления);
    Иначе
        ДополнительныеСвойства.Вставить("СсылкаПометкаУдаления", Неопределено);
    КонецЕсли;
    ДополнительныеСвойства.Вставить("Ссылка", Ссылка);
    
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
    
    Если ОбменДанными.Загрузка Тогда
		Возврат;
    КонецЕсли;
    	
	ЗаписатьДанныеДляРаботыСИнцидентами();
    
    ПлощадкаЭксплуатации = ОбъектКонтроля.ПлощадкаЭксплуатации;
	Если ЭтотОбъект.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений() Тогда
        
        ПриЗаписиКонтрольПодключений(Отказ);
        ПриЗаписиКонтрольнойПроцедурыПлощадки(Перечисления.ТипЭлементаПлощадки.КонтрольПодключений);
                
		Возврат;
        
	КонецЕсли;
  
    Если Владелец = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль потребления памяти") Тогда
        
        ПриЗаписиКонтрольПотребленияПамятиПлощадки();
                
    ИначеЕсли Владелец = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль производительности") Тогда
        
        ПриЗаписиКонтрольнойПроцедурыПлощадки(Перечисления.ТипЭлементаПлощадки.КонтрольПроизводительности);
        
    ИначеЕсли Владелец = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль выполнения регламентных заданий") Тогда
        
        ПриЗаписиКонтрольнойПроцедурыПлощадки(Перечисления.ТипЭлементаПлощадки.КонтрольРегламентныхЗаданий);
        
    ИначеЕсли Владелец = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль устойчивости") Тогда
        
        ПриЗаписиКонтрольнойПроцедурыПлощадки(Перечисления.ТипЭлементаПлощадки.КонтрольУстойчивости);
        
    ИначеЕсли Владелец = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Анализ вызовов кластера 1С") Тогда
        
       ПриЗаписиКонтрольнойПроцедурыПлощадки(Перечисления.ТипЭлементаПлощадки.АнализВызововКластера1С);
        
    ИначеЕсли Владелец = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Мониторинг системных ошибок") Тогда
        
        ПриЗаписиКонтрольнойПроцедурыПлощадки(Перечисления.ТипЭлементаПлощадки.МониторингСистемныхОшибок);
        
    ИначеЕсли Владелец = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль нагрузочных тестов") Тогда
        
        ПриЗаписиКонтрольнойПроцедурыПлощадки(Перечисления.ТипЭлементаПлощадки.КонтрольНагрузочныхТестов);    
        
    ИначеЕсли Владелец = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Оценка пользователей") Тогда
        
        ПриЗаписиКонтрольнойПроцедурыПлощадки(Перечисления.ТипЭлементаПлощадки.ОценкаПользователей);
        
    КонецЕсли;
    	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	УдалитьРегламентноеЗадание();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриЗаписиКонтрольПотребленияПамятиПлощадки()
    
    ПлощадкаЭксплуатации = ОбъектКонтроля.ПлощадкаЭксплуатации;
    
    ДобавитьВПлощадку(ПлощадкаЭксплуатации, Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПотребленияПамяти, Перечисления.ТипЭлементаПлощадки.КонтрольПотребленияПамяти, Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры);
    
    ГруппаКластеры1С = Справочники.ПлощадкиЭксплуатации.ПолучитьГруппуПлощадки(ОбъектКонтроля.ПлощадкаЭксплуатации, Перечисления.ТипЭлементаПлощадки.ГруппаКластеры1С);
    ГруппаКластер1С = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ГруппаКластеры1С, ОбъектКонтроля, Перечисления.ТипЭлементаПлощадки.Кластер1С);
    ЭлементКонтрольПотребленияПамяти = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ГруппаКластер1С, Ссылка, Перечисления.ТипЭлементаПлощадки.КонтрольПотребленияПамяти); 
    Если ЭлементКонтрольПотребленияПамяти = Неопределено Тогда
        Справочники.ПлощадкиЭксплуатации.СоздатьЭлементГруппы(ГруппаКластер1С, Ссылка, Перечисления.ТипЭлементаПлощадки.КонтрольПотребленияПамяти, Ложь);
    КонецЕсли;
    
КонецПроцедуры

Процедура ПриЗаписиКонтрольнойПроцедурыПлощадки(ТипЭлементаПлощадкиКонтрольнойПроцедуры)
    
    Если ТипЭлементаПлощадкиКонтрольнойПроцедуры = Перечисления.ТипЭлементаПлощадки.КонтрольПодключений Тогда
        
        ТипПлощадкиГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПодключений; 
        ТипПлощадкиГруппаОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С;
        ТипПлощадкиОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза;
        
        ТипПлощадкиВидГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры;
        
    ИначеЕсли ТипЭлементаПлощадкиКонтрольнойПроцедуры = Перечисления.ТипЭлементаПлощадки.КонтрольУстойчивости Тогда
        
        ТипПлощадкиГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольУстойчивости; 
        ТипПлощадкиГруппаОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверыКластера1С;
        ТипПлощадкиОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С;
        
        ТипПлощадкиВидГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры;
        
    ИначеЕсли ТипЭлементаПлощадкиКонтрольнойПроцедуры = Перечисления.ТипЭлементаПлощадки.АнализВызововКластера1С Тогда
        
        ТипПлощадкиГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаАнализВызововКластера1С; 
        ТипПлощадкиГруппаОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверыКластера1С;
        ТипПлощадкиОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С;
        
        ТипПлощадкиВидГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры;    
        
    ИначеЕсли ТипЭлементаПлощадкиКонтрольнойПроцедуры = Перечисления.ТипЭлементаПлощадки.МониторингСистемныхОшибок Тогда
        
        ТипПлощадкиГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаМониторингСистемныхОшибок; 
        ТипПлощадкиГруппаОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ГруппаРабочиеСерверыКластера1С;
        ТипПлощадкиОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.РабочийСерверКластера1С;
        
        ТипПлощадкиВидГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры;
        
    ИначеЕсли ТипЭлементаПлощадкиКонтрольнойПроцедуры = Перечисления.ТипЭлементаПлощадки.КонтрольПроизводительности Тогда
        
        ТипПлощадкиГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПроизводительности; 
        ТипПлощадкиГруппаОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С;
        ТипПлощадкиОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза;
        
        ТипПлощадкиВидГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры;
        
    ИначеЕсли ТипЭлементаПлощадкиКонтрольнойПроцедуры = Перечисления.ТипЭлементаПлощадки.КонтрольРегламентныхЗаданий Тогда
        
        ТипПлощадкиГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольРегламентныхЗаданий; 
        ТипПлощадкиГруппаОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С;
        ТипПлощадкиОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза;
        
        ТипПлощадкиВидГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры;
        
    ИначеЕсли ТипЭлементаПлощадкиКонтрольнойПроцедуры = Перечисления.ТипЭлементаПлощадки.КонтрольНагрузочныхТестов Тогда
        
        ТипПлощадкиГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольНагрузочныхТестов; 
        ТипПлощадкиГруппаОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С;
        ТипПлощадкиОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза;
        
        ТипПлощадкиВидГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры;
    
    ИначеЕсли ТипЭлементаПлощадкиКонтрольнойПроцедуры = Перечисления.ТипЭлементаПлощадки.ОценкаПользователей Тогда
        
        ТипПлощадкиГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаОценкаПользователей; 
        ТипПлощадкиГруппаОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С;
        ТипПлощадкиОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза;
        
        ТипПлощадкиВидГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаРасширенныеКонтрольныеПроцедуры;
        
    ИначеЕсли ТипЭлементаПлощадкиКонтрольнойПроцедуры = Перечисления.ТипЭлементаПлощадки.КонтрольПотребленияПамяти Тогда
        
        ТипПлощадкиГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаКонтрольПотребленияПамяти; 
        ТипПлощадкиГруппаОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ГруппаИнформационныеБазыКластера1С;
        ТипПлощадкиОбъектаКонтроля = Перечисления.ТипЭлементаПлощадки.ИнформационнаяБаза;
        
        ТипПлощадкиВидГруппаОбщая = Перечисления.ТипЭлементаПлощадки.ГруппаБазовыеКонтрольныеПроцедуры;
        
    КонецЕсли;
       
    ПлощадкаЭксплуатации = ОбъектКонтроля.ПлощадкаЭксплуатации;
    
    ДобавитьВПлощадку(ПлощадкаЭксплуатации, ТипПлощадкиГруппаОбщая, ТипЭлементаПлощадкиКонтрольнойПроцедуры, ТипПлощадкиВидГруппаОбщая);
    
    Кластер = Справочники.ОбъектыКонтроля.Свойство(ОбъектКонтроля, "Кластер");
    Если ЗначениеЗаполнено(Кластер) Тогда
        ГруппаКластеры1С = Справочники.ПлощадкиЭксплуатации.ПолучитьГруппуПлощадки(ОбъектКонтроля.ПлощадкаЭксплуатации, Перечисления.ТипЭлементаПлощадки.ГруппаКластеры1С);
        ГруппаКластер1С = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ГруппаКластеры1С, Кластер, Перечисления.ТипЭлементаПлощадки.Кластер1С);
        
        ГруппаОбъекта = Справочники.ПлощадкиЭксплуатации.ПолучитьГруппуПлощадки(ГруппаКластер1С, ТипПлощадкиГруппаОбъектаКонтроля);
        ЭлементОбъектаКонтроля = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ГруппаОбъекта, ОбъектКонтроля, ТипПлощадкиОбъектаКонтроля);
        
        ЭлементКонтрольнойПроцедуры = Справочники.ПлощадкиЭксплуатации.ПолучитьЭлементГруппы(ЭлементОбъектаКонтроля, Ссылка, ТипЭлементаПлощадкиКонтрольнойПроцедуры);
        Если ЭлементКонтрольнойПроцедуры = Неопределено Тогда
            Справочники.ПлощадкиЭксплуатации.СоздатьЭлементГруппы(ЭлементОбъектаКонтроля, Ссылка, ТипЭлементаПлощадкиКонтрольнойПроцедуры, Ложь);
        КонецЕсли;
    КонецЕсли;
    
КонецПроцедуры

Процедура ДобавитьВПлощадку(ПлощадкаЭксплуатации, ТипГруппы, ТипЭлемента, ТипГруппыКонтрольнойПроцедуры)
    
    ГруппаКонтрольныйПроцедуры = Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадкуГруппу(ПлощадкаЭксплуатации, ТипГруппыКонтрольнойПроцедуры);
    Справочники.ПлощадкиЭксплуатации.ДобавитьВПлощадку(ГруппаКонтрольныйПроцедуры, Ссылка, ТипГруппы, ТипЭлемента);
    
КонецПроцедуры

Процедура ПриЗаписиКонтрольПодключений(Отказ)
	
	Настройки = Неопределено;
    СсылкаНастройки = Неопределено;
	ЭтотОбъект.ДополнительныеСвойства.Свойство("Настройки", Настройки);
    ЭтотОбъект.ДополнительныеСвойства.Свойство("СсылкаНастройки", СсылкаНастройки);
        	
	Если Настройки <> Неопределено Тогда
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировкиНКП = Блокировка.Добавить("РегистрСведений.НастройкиКонтрольПодключений");
		ЭлементБлокировкиНКП.УстановитьЗначение("КонтрольнаяПроцедура", ЭтотОбъект.Ссылка);
		ЭлементБлокировкиНКП.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировкиСАЗ = Блокировка.Добавить("РегистрСведений.СхемаАдресацииЗадач");
		ЭлементБлокировкиСАЗ.УстановитьЗначение("ТипИсполнителя", Справочники.ТипыИсполнителейКонтрольПодключений.ОтветственныйЗаВозможностьПодключения);
		ЭлементБлокировкиСАЗ.УстановитьЗначение("КонтрольнаяПроцедура", ЭтотОбъект.Ссылка);
		ЭлементБлокировкиСАЗ.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.НастройкиКонтрольПодключений.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
		
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
		МенеджерЗаписи.МеханизмПроверкиОбрабатыватьИзменения = Настройки.МеханизмПроверкиОбрабатыватьИзменения;
		МенеджерЗаписи.URLОпубликованнойИнформационнойБазы = Настройки.URLОпубликованнойИнформационнойБазы;
		
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСведений.БезопасноеХранилище.ЗаписатьДанные(ЭтотОбъект.Ссылка, Новый Структура("ЛогинПриПодключении, ПарольПриПодключении", Настройки.ЛогинПриПодключении, Настройки.ПарольПриПодключении));
		УстановитьПривилегированныйРежим(Ложь);
		МенеджерЗаписи.СтрокаСоединения = Настройки.СтрокаСоединения;
		МенеджерЗаписи.НеПроверятьПоЖурналуРегистрации = Настройки.НеПроверятьПоЖурналуРегистрации;
		МенеджерЗаписи.Таймаут = Настройки.Таймаут;
        МенеджерЗаписи.ПериодКонтроля = Настройки.ПериодКонтроля;
        МенеджерЗаписи.МинимальныйПроцентДоступности = Настройки.МинимальныйПроцентДоступности;
        МенеджерЗаписи.ДопустимоНетДанных = Настройки.ДопустимоНетДанных;
		МенеджерЗаписи.Записать(Истина);
		
		МенеджерЗаписи = РегистрыСведений.СхемаАдресацииЗадач.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТипИсполнителя = Справочники.ТипыИсполнителейКонтрольПодключений.ОтветственныйЗаВозможностьПодключения;
		МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
		
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ТипИсполнителя = Справочники.ТипыИсполнителейКонтрольПодключений.ОтветственныйЗаВозможностьПодключения;
		МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
		МенеджерЗаписи.РольПользователя = Настройки.Ответственный;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
    
    Если Настройки <> Неопределено И СсылкаНастройки <> Неопределено Тогда
        
        Если
            Настройки.URLОпубликованнойИнформационнойБазы <> СсылкаНастройки.URLОпубликованнойИнформационнойБазы
            ИЛИ Настройки.МеханизмПроверкиОбрабатыватьИзменения <> СсылкаНастройки.МеханизмПроверкиОбрабатыватьИзменения
            ИЛИ Настройки.ЛогинПриПодключении <> СсылкаНастройки.ЛогинПриПодключении
            ИЛИ Настройки.ПарольПриПодключении <> СсылкаНастройки.ПарольПриПодключении
        Тогда
            Справочники.АгентыКИПДополнительныеРеквизиты.ИзменитьИнформационныеБазыХеш(ЭтотОбъект.ОбъектКонтроля);
        КонецЕсли;
    
    КонецЕсли;
    
КонецПроцедуры

Функция ОбновитьРегламентноеЗадание(Расписание, Использование = Неопределено) Экспорт
    
    Если ЭтотОбъект.Владелец.Ссылка = Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти() Тогда
        Возврат "";
    КонецЕсли;
        
	Если КлючВыставлен() Тогда
		Ключ = ЭтотОбъект.КлючРегламентногоЗадания;
		Задания = УправлениеЗаданиямиСервер.ПолучитьРегламентныеЗадания(
			"Ключ",
			Ключ
		);
		
		Если Задания.Количество() = 0 Тогда
			Возврат "";
		Иначе
			Задание = Задания[0];
		КонецЕсли;
		
		Параметры = Новый Структура;		
		Если Строка(Расписание) <> Строка(Задание.Расписание) Тогда
			Параметры.Вставить("Расписание", Расписание);
		КонецЕсли;
		
		Если Использование <> Неопределено И Использование <> Задание.Использование Тогда
			Параметры.Вставить("Использование", Использование);
		КонецЕсли;
		
		Если Параметры.Количество() > 0 Тогда
			УправлениеЗаданиямиСервер.ОбновитьПараметрыЗадания("Ключ", Ключ, Параметры);
		КонецЕсли;	 
		
		Возврат Ключ;
	КонецЕсли;
		
	Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ЗапускКонтрольнойПроцедуры);
			
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ЭтотОбъект.Ссылка);
	
	Задание.Наименование = ЭтотОбъект.Наименование;
	Задание.Использование = Использование;
	Задание.Параметры = ПараметрыЗадания;
	Задание.Расписание = Расписание;
	Задание.Ключ = Строка(ЭтотОбъект.Владелец.Ссылка.УникальныйИдентификатор()) + "_" + Строка(ЭтотОбъект.Ссылка.УникальныйИдентификатор());	 
	Задание.Записать();
	
	Возврат Строка(Задание.Ключ);
	
КонецФункции

Процедура УдалитьРегламентноеЗадание()	
	
	Если НЕ КлючВыставлен() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЗаданиямиСервер.УдалитьРегламентныеЗадания("Ключ", ЭтотОбъект.КлючРегламентногоЗадания);
	ОчиститьСлужебныеДанные();	
	
КонецПроцедуры	

Процедура ОчиститьСлужебныеДанные()
	
	НаборЗаписей = РегистрыСведений.ВременаРегламентныхЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КонтрольнаяПроцедура.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция КлючВыставлен()
	Возврат НЕ ПустаяСтрока(ЭтотОбъект.КлючРегламентногоЗадания);		
КонецФункции	

Процедура ПриВыполненииЗадачи(ЗадачаСсылка) Экспорт
    
    Если ЭтотОбъект.Владелец.ИмяБизнесПроцесса = "КонтрольПроизводительности" Тогда
        // Ничего не делаем
    Иначе
        Выполнить(ЭтотОбъект.Владелец.ИмяБизнесПроцесса + "Сервер.ПриВыполненииЗадачи(ЗадачаСсылка)");
    КонецЕсли;
    	
КонецПроцедуры

Функция ПолучитьСвойствоСправочникаПоВидуКонтрольнойПроцедуры(Свойство) Экспорт
	Если ЭтотОбъект.Владелец.Наименование = "Контроль производительности" Тогда
		ТипСправочника = "ТипыЗадачКонтрольПроизводительности";
	ИначеЕсли ЭтотОбъект.Владелец.Наименование = "Контроль подключений" Тогда
		ТипСправочника = "ТипыЗадачКонтрольПодключений";
	ИначеЕсли ЭтотОбъект.Владелец.Наименование = "Контроль выполнения регламентных заданий" Тогда
		ТипСправочника = "ТипыЗадачКонтрольРегламентныхЗаданий";
	ИначеЕсли ЭтотОбъект.Владелец.Наименование = "Контроль нагрузочных тестов" Тогда
		ТипСправочника = "ТипыЗадачКонтрольНагрузочныхТестов";
	ИначеЕсли ЭтотОбъект.Владелец.Наименование = "Контроль потребления памяти" Тогда
		ТипСправочника = "ТипыЗадачКонтрольПамяти";
	ИначеЕсли ЭтотОбъект.Владелец.Наименование = "Анализ вызовов кластера 1С" Тогда
		ТипСправочника = "ТипыЗадачАнализВызововКластера1С";
	ИначеЕсли ЭтотОбъект.Владелец.Наименование = "Мониторинг системных ошибок" Тогда
		ТипСправочника = "ТипыЗадачКонтрольМониторингСистемныхОшибок";
	ИначеЕсли ЭтотОбъект.Владелец.Наименование = "Контроль устойчивости системы" Тогда
		ТипСправочника = "ТипыЗадачСборДампов";
	ИначеЕсли ЭтотОбъект.Владелец.Наименование = "Оценка пользователей" Тогда
		ТипСправочника = "ТипыЗадачОценкаПользователей";
	ИначеЕсли ЭтотОбъект.Владелец.Наименование = "Внешний контроль ЦКК" Тогда
  		ТипСправочника = "ТипыЗадачВнешнийКонтрольЦКК";
	КонецЕсли;
	
	Возврат Метаданные.Справочники[ТипСправочника][Свойство];
КонецФункции

Функция ПолучитьТипыЗадач(ВыбранныеТипы = Неопределено) Экспорт
	Если ВыбранныеТипы = Неопределено Тогда
		ВыбранныеТипы = Новый СписокЗначений;
	КонецЕсли;
	ВыбранныеТипы.Добавить(Справочники.ТипыЗадачКонтрольПроизводительности.ПадениеАпдекса);
	ВыбранныеТипы.Добавить(Справочники.ТипыЗадачКонтрольПроизводительности.НедостаточнаяПроизводительность);
	
	
	ТипыЗадач = Новый СписокЗначений;
	
	ТипСправочника = ПолучитьСвойствоСправочникаПоВидуКонтрольнойПроцедуры("Имя");
	
	Выборка = Справочники[ТипСправочника].Выбрать();
	КоличествоЭлементов = 0;
	Пока Выборка.Следующий() Цикл
		КоличествоЭлементов = КоличествоЭлементов + 1;
		Если ВыбранныеТипы <> Неопределено Тогда
			Если ВыбранныеТипы.НайтиПоЗначению(Выборка.Ссылка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ТипыЗадач.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если КоличествоЭлементов <> 0 Тогда
		Возврат ТипыЗадач;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ОбщиеНастройкиФормы(Объект, Форма) Экспорт
	Если Объект.ОповещатьОСбое = Неопределено Тогда
		Объект.ОповещатьОСбое = Ложь;
	КонецЕсли;
	
	Если Форма.ИмяФормы <> "Справочник.КонтрольныеПроцедуры.Форма.ФормаЭлементаКонтрольНагрузочныхТестов" Тогда
		ЭлементПараметрыОповещенияПриСбое = Форма.Элементы.Найти(ПараметрыОповещенияПриСбое);
		Если ЭлементПараметрыОповещенияПриСбое <> Неопределено Тогда
			ЭлементПараметрыОповещенияПриСбое.Доступность = Объект.ОповещатьОСбое;
		КонецЕсли;
	КонецЕсли;
		
	ТекРасписание = Объект.Ссылка.Расписание.Получить();
	Если ТекРасписание <> Неопределено Тогда
		ПериодПовтораСек = Объект.Ссылка.Расписание.Получить().ПериодПовтораВТечениеДня;
	Иначе
		ПериодПовтораСек = 0;
	КонецЕсли;
	
	Для Каждого ТекТипЗадачи Из Объект.ПараметрыОповещенияПриСбое Цикл
		ТекТипЗадачи.ПериодОповещенияСек = ПериодПовтораСек * ТекТипЗадачи.ПериодОповещения;
		Если ТекТипЗадачи.ПериодОповещения = 0 Тогда
			ТекТипЗадачи.РежимОповещения = "Однократно";
		Иначе
			ТекТипЗадачи.РежимОповещения = "Периодически";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьПоУмолчаниюАнализВызововКластера1С(
		Владелец,
		НастройкаВыполнена,
		ОбъектКонтроля,
		Выполнять,
		Наименование,
		КаталогТЖСетевой,
		КаталогТЖЛокальный,
		КаталогВременныхФайлов
	) Экспорт
	
	ЭтотОбъект.Владелец = Владелец;
	ЭтотОбъект.НастройкаВыполнена = НастройкаВыполнена;
	ЭтотОбъект.ОбъектКонтроля = ОбъектКонтроля;
	ЭтотОбъект.Выполнять = Выполнять;
	ЭтотОбъект.Наименование = Наименование;
    
    РасписаниеНовое = Новый РасписаниеРегламентногоЗадания;
    РасписаниеНовое.ПериодПовтораДней = 1;
    РасписаниеНовое.ПериодПовтораВТечениеДня = 600;
    
    ЭтотОбъект.Расписание = Новый ХранилищеЗначения(РасписаниеНовое);
    
	ЭтотОбъект.Записать();
	
	РегистрыСведений.НастройкиАнализВызововКластера1С.ДобавитьЗапись(
		ЭтотОбъект.Ссылка,
		КаталогТЖСетевой,
		КаталогТЖЛокальный,
		КаталогВременныхФайлов,
		1,
		Истина,
		12);
КонецПроцедуры
	
Процедура СоздатьПоУмолчаниюКонтрольУстойчивостиСистемы(
		Владелец,
		НастройкаВыполнена,
		ОбъектКонтроля,
		Выполнять,
		Наименование,
		КаталогТЖСетевой,
		КаталогТЖЛокальный,
		КаталогВременныхФайлов,
		КаталогВыгрузкиДамповСетевой,
		КаталогВыгрузкиДампов
	) Экспорт
    
    
    
        
	ЭтотОбъект.Владелец = Владелец;
	ЭтотОбъект.НастройкаВыполнена = НастройкаВыполнена;
	ЭтотОбъект.ОбъектКонтроля = ОбъектКонтроля;
	ЭтотОбъект.Выполнять = Выполнять;
	ЭтотОбъект.Наименование = Наименование;
    ЭтотОбъект.Сохранено = Истина;
	    
    НастройкиПоУмолчанию = РегистрыСведений.НастройкиСборДампов.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы());
    
    Если НастройкиПоУмолчанию.Расписание <> Неопределено Тогда
        ЭтотОбъект.Расписание = Новый ХранилищеЗначения(НастройкиПоУмолчанию.Расписание);
    Иначе
        РасписаниеНовое = Новый РасписаниеРегламентногоЗадания;
        РасписаниеНовое.ПериодПовтораДней = 1;
        РасписаниеНовое.ПериодПовтораВТечениеДня = 60;
    КонецЕсли;
    
    ЭтотОбъект.Записать();
    
    Если ЗначениеЗаполнено(КаталогТЖСетевой) Тогда
        НастройкиПоУмолчанию.КаталогТЖСетевой = КаталогТЖСетевой;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(КаталогТЖЛокальный) Тогда
        НастройкиПоУмолчанию.КаталогТЖЛокальный = КаталогТЖЛокальный;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(КаталогВременныхФайлов) Тогда
        НастройкиПоУмолчанию.КаталогВременныхФайлов = КаталогВременныхФайлов;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(КаталогВыгрузкиДамповСетевой) Тогда
        НастройкиПоУмолчанию.КаталогВыгрузкиДамповСетевой = КаталогВыгрузкиДамповСетевой;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(КаталогВыгрузкиДампов) Тогда
        НастройкиПоУмолчанию.КаталогВыгрузкиДампов = КаталогВыгрузкиДампов;
    КонецЕсли;
    
    РегистрыСведений.НастройкиСборДампов.ЗаписатьНастройки(ЭтотОбъект.Ссылка, НастройкиПоУмолчанию);
    
	МенеджерЗаписи = РегистрыСведений.СхемаАдресацииЗадач.СоздатьМенеджерЗаписи();
    МенеджерЗаписи.ТипИсполнителя = Справочники.ТипыИсполнителейСборДампов.ОтветственныйЗаРассмотрениеДампа;
    МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
    
    МенеджерЗаписи.Прочитать();
    МенеджерЗаписи.ТипИсполнителя = Справочники.ТипыИсполнителейСборДампов.ОтветственныйЗаРассмотрениеДампа;
    МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
    МенеджерЗаписи.РольПользователя = Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля;
    МенеджерЗаписи.Записать(Истина);
    
КонецПроцедуры

Процедура СоздатьПоУмолчаниюМониторингСистемныхОшибок(
		Владелец,
		НастройкаВыполнена,
		ОбъектКонтроля,
		Выполнять,
		Наименование,
		КаталогТЖСетевой,
		КаталогТЖЛокальный,
		КаталогВременныхФайлов
	) Экспорт
	
	ЭтотОбъект.Владелец = Владелец;
	ЭтотОбъект.НастройкаВыполнена = НастройкаВыполнена;
	ЭтотОбъект.ОбъектКонтроля = ОбъектКонтроля;
	ЭтотОбъект.Выполнять = Выполнять;
	ЭтотОбъект.Наименование = Наименование;
    
    РасписаниеНовое = Новый РасписаниеРегламентногоЗадания;
    РасписаниеНовое.ПериодПовтораДней = 1;
    РасписаниеНовое.ПериодПовтораВТечениеДня = 600;
    
    ЭтотОбъект.Расписание = Новый ХранилищеЗначения(РасписаниеНовое);
    
	ЭтотОбъект.Записать();
	
	РегистрыСведений.НастройкиКонтрольЧислаИсключений.ДобавитьЗапись(
		ЭтотОбъект.Ссылка,
		КаталогТЖСетевой,
		КаталогТЖЛокальный,
		КаталогВременныхФайлов,
		24,
		Истина,
		12);
КонецПроцедуры

Процедура СоздатьПоУмолчаниюКонтрольПотребленияПамяти(
		Наименование,
		Владелец,
		НастройкаВыполнена,
		ОбъектКонтроля,
		Выполнять
	) Экспорт
	
	ЭтотОбъект.Владелец = Владелец;
	ЭтотОбъект.НастройкаВыполнена = НастройкаВыполнена;
	ЭтотОбъект.ОбъектКонтроля = ОбъектКонтроля;
	ЭтотОбъект.Выполнять = Выполнять;
	ЭтотОбъект.Наименование = Наименование;
    ЭтотОбъект.Сохранено = Истина;
    	
	ПараметрыПоУмолчанию = 	РегистрыСведений.НастройкиКонтрольПамяти.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти());
    
    Если ПараметрыПоУмолчанию.Расписание <> Неопределено Тогда
        
        ЭтотОбъект.Расписание = Новый ХранилищеЗначения(ПараметрыПоУмолчанию.Расписание);
        
    Иначе
        
        РасписаниеНовое = Новый РасписаниеРегламентногоЗадания;
        РасписаниеНовое.ПериодПовтораДней = 1;
        РасписаниеНовое.ПериодПовтораВТечениеДня = 60;
        
        ЭтотОбъект.Расписание = Новый ХранилищеЗначения(РасписаниеНовое);
        
    КонецЕсли;
    
    ЭтотОбъект.Записать();
    
    МенеджерЗаписи = РегистрыСведений.НастройкиКонтрольПамяти.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
    МенеджерЗаписи.ПороговаяПамятьМБ = ПараметрыПоУмолчанию.ПороговаяПамятьМБ;
	МенеджерЗаписи.АвтоматическиУдалятьЗаписиСеансов = ПараметрыПоУмолчанию.АвтоматическиУдалятьЗаписиСеансов;
	МенеджерЗаписи.СрокХраненияДанных = ПараметрыПоУмолчанию.СрокХраненияДанных;
        	
	МенеджерЗаписи.Записать(Истина);
    
    МенеджерЗаписи = РегистрыСведений.СхемаАдресацииЗадач.СоздатьМенеджерЗаписи();
    МенеджерЗаписи.ТипИсполнителя = Справочники.ТипыИсполнителейКонтрольПамяти.ОтветственныйЗаРазборПроблемПотребленияПамяти;
    МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
    
    МенеджерЗаписи.Прочитать();
    МенеджерЗаписи.ТипИсполнителя = Справочники.ТипыИсполнителейКонтрольПамяти.ОтветственныйЗаРазборПроблемПотребленияПамяти;
    МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
    МенеджерЗаписи.РольПользователя = Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля;
    МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура СоздатьПоУмолчаниюКонтрольПодключений(Наименование, Владелец, ОбъектКонтроля, Выполнять) Экспорт
    
    ЭтотОбъект.Владелец = Владелец;
	ЭтотОбъект.НастройкаВыполнена = НастройкаВыполнена;
	ЭтотОбъект.ОбъектКонтроля = ОбъектКонтроля;
	ЭтотОбъект.Выполнять = Выполнять;
	ЭтотОбъект.Наименование = Наименование;
	ЭтотОбъект.Записать();
    
    МенеджерЗаписи = РегистрыСведений.НастройкиКонтрольПодключений.СоздатьМенеджерЗаписи();
    МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
    
    НастройкиПоУмолчанию = РегистрыСведений.НастройкиКонтрольПодключений.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений());
    
    Если НЕ ЗначениеЗаполнено(НастройкиПоУмолчанию.МеханизмПроверкиОбрабатыватьИзменения) Тогда
        НастройкиПоУмолчанию.МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.WEBСервис;
    КонецЕсли;
    
    Если НастройкиПоУмолчанию.МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.WEBСервис Тогда
        
        НастройкиИБ = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(ОбъектКонтроля);
        НастройкиПоУмолчанию.URLОпубликованнойИнформационнойБазы = НастройкиПоУмолчанию.URLОпубликованнойИнформационнойБазы + НастройкиИБ.ИмяБазыВКластере; 
        
        Если НЕ ЗначениеЗаполнено(НастройкиПоУмолчанию.Таймаут) Тогда
            НастройкиПоУмолчанию.Таймаут = 10;
        КонецЕсли;
        
    КонецЕсли;
                
    Если НЕ ЗначениеЗаполнено(НастройкиПоУмолчанию.ПериодКонтроля) Тогда
        НастройкиПоУмолчанию.ПериодКонтроля = 120;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(НастройкиПоУмолчанию.МинимальныйПроцентДоступности) Тогда
        НастройкиПоУмолчанию.МинимальныйПроцентДоступности = 90;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(НастройкиПоУмолчанию.ДопустимоНетДанных) Тогда
        НастройкиПоУмолчанию.ДопустимоНетДанных = 120;
    КонецЕсли;
        
    РегистрыСведений.НастройкиКонтрольПодключений.ЗаписатьНастройки(ЭтотОбъект.Ссылка, НастройкиПоУмолчанию);
    
    МенеджерЗаписи = РегистрыСведений.СхемаАдресацииЗадач.СоздатьМенеджерЗаписи();
    МенеджерЗаписи.ТипИсполнителя = Справочники.ТипыИсполнителейКонтрольПодключений.ОтветственныйЗаВозможностьПодключения;
    МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
    МенеджерЗаписи.Прочитать();
    
    МенеджерЗаписи.ТипИсполнителя = Справочники.ТипыИсполнителейКонтрольПодключений.ОтветственныйЗаВозможностьПодключения;
    МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
    МенеджерЗаписи.РольПользователя = Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля;
    МенеджерЗаписи.Записать(Истина);
    
КонецПроцедуры

Процедура СоздатьПоУмолчаниюКонтрольПроизводительности(Наименование, Владелец, ОбъектКонтроля, Выполнять) Экспорт
    
    ЭтотОбъект.Владелец = Владелец;
	ЭтотОбъект.НастройкаВыполнена = НастройкаВыполнена;
	ЭтотОбъект.ОбъектКонтроля = ОбъектКонтроля;
	ЭтотОбъект.Выполнять = Выполнять;
	ЭтотОбъект.Наименование = Наименование;
    ЭтотОбъект.Сохранено = Истина;
    
    НастройкиПоУмолчанию = РегистрыСведений.НастройкиКонтрольПроизводительности.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПроизводительности());
    НастройкиИнформационнойБазы = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(ОбъектКонтроля);
        
    Если НастройкиПоУмолчанию.Расписание <> Неопределено Тогда
        
        ЭтотОбъект.Расписание = Новый ХранилищеЗначения(НастройкиПоУмолчанию.Расписание);    
        
    Иначе
        
        РасписаниеНовое = Новый РасписаниеРегламентногоЗадания;
        РасписаниеНовое.ПериодПовтораДней = 1;
        РасписаниеНовое.ПериодПовтораВТечениеДня = 600;
        
        ЭтотОбъект.Расписание = Новый ХранилищеЗначения(РасписаниеНовое);
        
    КонецЕсли;
    
	ЭтотОбъект.Записать();
    
    Если ЗначениеЗаполнено(НастройкиПоУмолчанию.КаталогФайловОценкиПроизводительности) Тогда
        НастройкиПоУмолчанию.КаталогФайловОценкиПроизводительности = НастройкиПоУмолчанию.КаталогФайловОценкиПроизводительности + НастройкиИнформационнойБазы.ИмяБазыВКластере;
    КонецЕсли;
    РегистрыСведений.НастройкиКонтрольПроизводительности.ЗаписатьНастройки(ЭтотОбъект.Ссылка, НастройкиПоУмолчанию);
    
    МенеджерЗаписи = РегистрыСведений.СхемаАдресацииЗадач.СоздатьМенеджерЗаписи();
    МенеджерЗаписи.ТипИсполнителя = Справочники.ТипыИсполнителейКонтрольПроизводительности.ОтветственныйЗаРазборПроблемПроизводительности;
    МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
    
    МенеджерЗаписи.Прочитать();
    МенеджерЗаписи.ТипИсполнителя = Справочники.ТипыИсполнителейКонтрольПроизводительности.ОтветственныйЗаРазборПроблемПроизводительности;
    МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
    МенеджерЗаписи.РольПользователя = Справочники.РолиПользователей.ОтветственныйЗаПериметрКонтроля;
    МенеджерЗаписи.Записать(Истина);
    
КонецПроцедуры

Процедура СоздатьПоУмолчаниюКонтрольРегламентныхЗаданий(Наименование, Владелец, ОбъектКонтроля, Выполнять) Экспорт
    
    ЭтотОбъект.Владелец = Владелец;
	ЭтотОбъект.НастройкаВыполнена = НастройкаВыполнена;
	ЭтотОбъект.ОбъектКонтроля = ОбъектКонтроля;
	ЭтотОбъект.Выполнять = Выполнять;
	ЭтотОбъект.Наименование = Наименование;
    ЭтотОбъект.Сохранено = Истина;
    
    НастройкиПоУмолчанию = РегистрыСведений.НастройкиКонтрольРегламентныхЗаданий.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий());
    
    Если НастройкиПоУмолчанию.Расписание <> Неопределено Тогда
        
        ЭтотОбъект.Расписание = Новый ХранилищеЗначения(НастройкиПоУмолчанию.Расписание);
        
    Иначе
        
        РасписаниеНовое = Новый РасписаниеРегламентногоЗадания;
        РасписаниеНовое.ПериодПовтораДней = 1;
        РасписаниеНовое.ПериодПовтораВТечениеДня = 600;
        
        ЭтотОбъект.Расписание = Новый ХранилищеЗначения(РасписаниеНовое);
        
    КонецЕсли;
    
	ЭтотОбъект.Записать();
    
    НастройкиПоУмолчанию = РегистрыСведений.НастройкиКонтрольРегламентныхЗаданий.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий());
    
    МенеджерЗаписи = РегистрыСведений.НастройкиКонтрольРегламентныхЗаданий.СоздатьМенеджерЗаписи();
    МенеджерЗаписи.КонтрольнаяПроцедура = ЭтотОбъект.Ссылка;
    
    Если ЗначениеЗаполнено(НастройкиПоУмолчанию.ДопустимаяДлительностьВыполнения) Тогда
        МенеджерЗаписи.ДопустимаяДлительностьВыполнения = НастройкиПоУмолчанию.ДопустимаяДлительностьВыполнения;
    Иначе
        МенеджерЗаписи.ДопустимаяДлительностьВыполнения = 600;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(НастройкиПоУмолчанию.КаталогЗапускаКлиента) Тогда
        МенеджерЗаписи.КаталогЗапускаКлиента = НастройкиПоУмолчанию.КаталогЗапускаКлиента;
    Иначе
        СисИнфо = Новый СистемнаяИнформация;
        Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
            МенеджерЗаписи.КаталогЗапускаКлиента = "C:\Program Files (x86)\1cv8\common\1cestart.exe";
        ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда    
            МенеджерЗаписи.КаталогЗапускаКлиента = "C:\Program Files\1cv8\common\1cestart.exe";
        ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
            МенеджерЗаписи.КаталогЗапускаКлиента = "/opt/1C/v8.3/i386/1cestart";
        ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
            МенеджерЗаписи.КаталогЗапускаКлиента = "/opt/1C/v8.3/x86_64/1cestart";
        КонецЕсли;
    КонецЕсли;
    
    МенеджерЗаписи.Записать(Истина);
        
КонецПроцедуры

Процедура ЗаписатьДанныеДляРаботыСИнцидентами()
    
	ВидКонтрольПроизводительности = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль производительности");
	ВидКонтрольПотребленияПамяти = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль потребления памяти");
	ВидКонтрольПодключений = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль подключений");
    ВидКонтрольРегЗаданий = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль выполнения регламентных заданий");
	
	Если Владелец = ВидКонтрольПроизводительности Тогда
		ЗаписатьДанныеДляРаботыСИнцидентамиКонтрольПроизводительности();
	ИначеЕсли Владелец = ВидКонтрольПотребленияПамяти Тогда
		ЗаписатьДанныеДляРаботыСИнцидентамиКонтрольПамяти();
	ИначеЕсли Владелец = ВидКонтрольПодключений Тогда
		ЗаписатьДанныеДляРаботыСИнцидентамиКонтрольПодключений();
    ИначеЕсли Владелец = ВидКонтрольРегЗаданий Тогда
        ЗаписатьДанныеДляРаботыСИнцидентамиКонтрольРегЗаданий();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеДляРаботыСИнцидентамиКонтрольПроизводительности()
	
	ПараметрыИнцидентаНетФайлов = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольПроизводительности(ЭтотОбъект.Ссылка, Справочники.ТипыЗадачКонтрольПроизводительности.НетФайлов);
	ПараметрыИнцидентаНетФайлов.Вставить("ОбъектЦКК", Неопределено);
	ПараметрыИнцидентаНетФайлов.Вставить("Ответственный", Неопределено);
	ЗаписатьТипИнцидента(ПараметрыИнцидентаНетФайлов);
	
	ПараметрыИнцидентаНеверныйФорматФайлов = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольПроизводительности(ЭтотОбъект.Ссылка, Справочники.ТипыЗадачКонтрольПроизводительности.НеверныйФорматФайлов);
	ПараметрыИнцидентаНеверныйФорматФайлов.Вставить("ОбъектЦКК", Неопределено);
	ПараметрыИнцидентаНеверныйФорматФайлов.Вставить("Ответственный", Неопределено);
	ЗаписатьТипИнцидента(ПараметрыИнцидентаНеверныйФорматФайлов);
    
    ПараметрыИнцидентаНеверныйФорматФайлов = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольПроизводительности(ЭтотОбъект.Ссылка, Справочники.ТипыЗадачКонтрольПроизводительности.НеЗавершиласьПредыдущаяЗагрузкаФайлов);
	ПараметрыИнцидентаНеверныйФорматФайлов.Вставить("ОбъектЦКК", Неопределено);
	ПараметрыИнцидентаНеверныйФорматФайлов.Вставить("Ответственный", Неопределено);
	ЗаписатьТипИнцидента(ПараметрыИнцидентаНеверныйФорматФайлов);
    
    ПараметрыИнцидентаНеверныйФорматФайлов = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольПроизводительности(ЭтотОбъект.Ссылка, Справочники.ТипыЗадачКонтрольПроизводительности.ОшибкаЗагрузкиФайлов);
	ПараметрыИнцидентаНеверныйФорматФайлов.Вставить("ОбъектЦКК", Неопределено);
	ПараметрыИнцидентаНеверныйФорматФайлов.Вставить("Ответственный", Неопределено);
	ЗаписатьТипИнцидента(ПараметрыИнцидентаНеверныйФорматФайлов);
	
КонецПроцедуры

Процедура ЗаписатьДанныеДляРаботыСИнцидентамиКонтрольПамяти()
	
	ПараметрыИнцидентаПревышенПорогПотребленияПамяти = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольПотребленияПамяти(ЭтотОбъект.Ссылка, Справочники.ТипыЗадачКонтрольПамяти.ПревышенПорогПотребленияПамяти);
	ЗаписатьТипИнцидента(ПараметрыИнцидентаПревышенПорогПотребленияПамяти);
	
	ПараметрыИнцидентаНедоступенКластер = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольПотребленияПамяти(ЭтотОбъект.Ссылка, Справочники.ТипыЗадачКонтрольПамяти.НедоступенКластер);
	ЗаписатьТипИнцидента(ПараметрыИнцидентаНедоступенКластер);
	
	ПараметрыИнцидентаВосстановлениеРаботоспособоностиКонтрольнойПроцедуры = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольПотребленияПамяти(ЭтотОбъект.Ссылка, Справочники.ТипыЗадач.ВосстановлениеРаботоспособоностиКонтрольнойПроцедуры);
	ЗаписатьТипИнцидента(ПараметрыИнцидентаВосстановлениеРаботоспособоностиКонтрольнойПроцедуры);
	
КонецПроцедуры

Процедура ЗаписатьДанныеДляРаботыСИнцидентамиКонтрольПодключений()
	
	ПараметрыИнформационнойБазы = РегистрыСведений.ПараметрыИнформационныхБаз.ПрочитатьНастройки(ОбъектКонтроля);
	
	Если ПараметрыИнформационнойБазы.Кластер <> Неопределено Тогда
		ПараметрыИнцидентаНедоступностьКластер = КонтрольПодключенийСервер.ПолучитьПараметрыИнцидента(ПараметрыИнформационнойБазы.Кластер, "Кластер", Перечисления.УровниИнцидентов.КритическаяОшибка);
		ПараметрыИнцидентаНедоступностьКластер.Вставить("Ответственный", ПараметрыИнформационнойБазы.Кластер.Ответственный);
		ПараметрыИнцидентаНедоступностьКластер.Вставить("ОбъектЦКК", ПараметрыИнформационнойБазы.Кластер);
		ЗаписатьТипИнцидента(ПараметрыИнцидентаНедоступностьКластер);
		
		ПараметрыИнцидентаНедоступностьКластерНетДанных = КонтрольПодключенийСервер.ПолучитьПараметрыИнцидента(ПараметрыИнформационнойБазы.Кластер, "НетДанных", Перечисления.УровниИнцидентов.Предупреждение);
		ПараметрыИнцидентаНедоступностьКластерНетДанных.Вставить("Ответственный", ПараметрыИнформационнойБазы.Кластер.Ответственный);
		ПараметрыИнцидентаНедоступностьКластерНетДанных.Вставить("ОбъектЦКК", ПараметрыИнформационнойБазы.Кластер);
		ЗаписатьТипИнцидента(ПараметрыИнцидентаНедоступностьКластерНетДанных);
		
		ПараметрыИнцидентаНедоступностьИнфоБаза = КонтрольПодключенийСервер.ПолучитьПараметрыИнцидента(ЭтотОбъект.Ссылка.ОбъектКонтроля, "ИнфоБаза", Перечисления.УровниИнцидентов.Ошибка);
		ПараметрыИнцидентаНедоступностьИнфоБаза.Вставить("Ответственный", ЭтотОбъект.Ссылка.ОбъектКонтроля.Ответственный);
		ПараметрыИнцидентаНедоступностьИнфоБаза.Вставить("ОбъектЦКК", ПараметрыИнформационнойБазы.Кластер);
		ПараметрыИнцидентаНедоступностьИнфоБаза.Вставить("СтрокаПодключения", ЭтотОбъект.Ссылка.ОбъектКонтроля);
		ЗаписатьТипИнцидента(ПараметрыИнцидентаНедоступностьИнфоБаза);
		
		ПараметрыИнцидентаНедоступностьИнфоБазаНетДанных = КонтрольПодключенийСервер.ПолучитьПараметрыИнцидента(ЭтотОбъект.Ссылка.ОбъектКонтроля, "НетДанных", Перечисления.УровниИнцидентов.Предупреждение);
		ПараметрыИнцидентаНедоступностьИнфоБазаНетДанных.Вставить("Ответственный", ЭтотОбъект.Ссылка.ОбъектКонтроля.Ответственный);
		ПараметрыИнцидентаНедоступностьИнфоБазаНетДанных.Вставить("ОбъектЦКК", ПараметрыИнформационнойБазы.Кластер);
		ПараметрыИнцидентаНедоступностьИнфоБазаНетДанных.Вставить("СтрокаПодключения", ЭтотОбъект.Ссылка.ОбъектКонтроля);
		ЗаписатьТипИнцидента(ПараметрыИнцидентаНедоступностьИнфоБазаНетДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеДляРаботыСИнцидентамиКонтрольРегЗаданий()
    
    Настройки = Справочники.КонтрольныеПроцедуры.ПолучитьНастройкиКонтроляРегламентныхЗаданий(ЭтотОбъект.Ссылка);
    
    Если Настройки <> Неопределено Тогда
        
        ПараметрыИнцидентаСтоп = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольВыполненияРегламентныхЗаданий(ЭтотОбъект.Ссылка, Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийНетСобытий);
		ПараметрыИнцидентаСтоп.Вставить("Ответственный", Настройки.Ответственный);
        ПараметрыИнцидентаСтоп.Вставить("ОбъектЦКК", Неопределено);
		ЗаписатьТипИнцидента(ПараметрыИнцидентаСтоп);
        
        ПараметрыИнцидентаТаймаут = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольВыполненияРегламентныхЗаданий(ЭтотОбъект.Ссылка, Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийТаймаут);
		ПараметрыИнцидентаТаймаут.Вставить("Ответственный", Настройки.Ответственный);
        ПараметрыИнцидентаТаймаут.Вставить("ОбъектЦКК", Неопределено);
		ЗаписатьТипИнцидента(ПараметрыИнцидентаТаймаут);
        
        ПараметрыИнцидентаОшибка = Справочники.КонтрольныеПроцедуры.ПолучитьПараметрыИнцидентаКонтрольВыполненияРегламентныхЗаданий(ЭтотОбъект.Ссылка, Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийОшибка);
		ПараметрыИнцидентаОшибка.Вставить("Ответственный", Настройки.Ответственный);
        ПараметрыИнцидентаОшибка.Вставить("ОбъектЦКК", Неопределено);
		ЗаписатьТипИнцидента(ПараметрыИнцидентаОшибка);
        
    КонецЕсли;
        
КонецПроцедуры

Процедура ЗаписатьТипИнцидента(ПараметрыИнцидента)
    
    ТипИнцидента = ПараметрыИнцидента.НаименованиеТипаИнцидента;
	Инцидент = ПараметрыИнцидента.КодИнцидента;
	Сообщение = "Создан автоматически при записи контрольной процедуры";
    
    МенеджерЗаписиИнцидент = РегистрыСведений.Инциденты.ПолучитьМенеджерЗаписи(Инцидент, ТипИнцидента);
	Если НЕ МенеджерЗаписиИнцидент.Выбран() Тогда
		
		ОбъектЦКК = Неопределено;
		Если ПараметрыИнцидента.Свойство("ОбъектЦКК") Тогда
			ОбъектЦКК = ПараметрыИнцидента.ОбъектЦКК;
		КонецЕсли;
		
		СтрокаПодключения = Неопределено;
		Если ПараметрыИнцидента.Свойство("СтрокаПодключения") Тогда
			СтрокаПодключения = ПараметрыИнцидента.СтрокаПодключения;
		КонецЕсли;
		
		ИнцидентыСервер.ОткрытьИнцидент(ТипИнцидента, Инцидент, СтрокаПодключения, ОбъектЦКК, Сообщение, 1, Истина);
        ИнцидентыСервер.ЗакрытьИнцидент(ТипИнцидента, Инцидент, Ложь);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает контрольную процедуру "Контроль потребления памяти".
//
// Параметры:
//  ПараметрыСоздания - Структура - структура создания с ключами:
//                                   — Наименование                       - Строка - максимальная длина 100.
//                                   — ОбъектКонтроля                     - СправочникСсылка.ОбъектКонтроля - объект контроля для которого создается контрольная процедура.
//                                   — Ответсвенный                       - СправочникСсылка.РолиПользователей - ответственный за контрольную процедуру. 
//                                   — ПороговаяПамять                    - Число(10,0), в мегабайтах.
//                                   — СрокХраненияДанных                 - Число (10,0), часы.
//                                   — АвтоматическиУдалятьЗаписиСеансов  - Булево.
//                                   — НастройкаВыполнена                 - Булево.
//                                   — Сохранено                          - Булево.
//                                   — Выполнять                          - Булево.
//                                   — Пауза                              - Булево.
//
// Возвращаемое значение:
//   СправочникСсылка.КонтрольныеПроцедуры - ссылка на созданный элемент.
//
Функция СоздатьЭлементКонтрольПотребленияПамяти(ПараметрыСоздания) Экспорт
	
    ЭлементОбъект = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
    ЭлементОбъект.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти();
    ЭлементОбъект.Наименование = ПараметрыСоздания.Наименование;
	ЭлементОбъект.ОбъектКонтроля = ПараметрыСоздания.ОбъектКонтроля;
    
    Если ПараметрыСоздания.Свойство("Расписание") Тогда
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = ПараметрыСоздания.Расписание.ПериодПовтораДней;
        Расписание.ПериодПовтораВТечениеДня = ПараметрыСоздания.Расписание.ПериодПовтораВТечениеДня;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    Иначе
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = 1;
        Расписание.ПериодПовтораВТечениеДня = 30;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    КонецЕсли;
    
    ЭлементОбъект.НастройкаВыполнена = ПараметрыСоздания.НастройкаВыполнена;
    ЭлементОбъект.Сохранено = ПараметрыСоздания.Сохранено;
	ЭлементОбъект.Выполнять = ПараметрыСоздания.Выполнять;
	ЭлементОбъект.Пауза = ПараметрыСоздания.Пауза;
        
	ЭлементОбъект.Записать();
    РегистрыСведений.СхемаАдресацииЗадач.ЗаписатьОтветственного(ЭлементОбъект.Ссылка, ПараметрыСоздания.Ответственный);        
    РегистрыСведений.НастройкиКонтрольПамяти.ЗаписатьНастройки(ЭлементОбъект.Ссылка, ПараметрыСоздания);
    
    // Надо записывать второй раз, потому что по иному создать регламентное задание не получиться.
    // Так сложилось исторически.
    // Привилегированный режим нужен, иначе агенту необходимо будет давать права на администрирование.
    УстановитьПривилегированныйРежим(Истина);
    ЭлементОбъект.Записать();
    УстановитьПривилегированныйРежим(Ложь);
    
    
    
	Возврат ЭлементОбъект.Ссылка;
    
КонецФункции

// Создает контрольную процедуру "Анализ вызовов кластера 1С".
//
// Параметры:
//  ПараметрыСоздания - Структура - структура создания с ключами:
//                                   — Наименование                       - Строка - максимальная длина 100.
//                                   — ОбъектКонтроля                     - СправочникСсылка.ОбъектКонтроля - объект контроля для которого создается контрольная процедура.
//                                   — Ответсвенный                       - СправочникСсылка.РолиПользователей - ответственный за контрольную процедуру. 
//
// Возвращаемое значение:
//   СправочникСсылка.КонтрольныеПроцедуры - ссылка на созданный элемент.
//
Функция СоздатьЭлементАнализВызововКластера1С(ПараметрыСоздания) Экспорт
    
    ЭлементОбъект = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
    ЭлементОбъект.Владелец = Справочники.ВидыКонтрольныхПроцедур.АнализВызововКластера1С();
    ЭлементОбъект.Наименование = ПараметрыСоздания.Наименование;
	ЭлементОбъект.ОбъектКонтроля = ПараметрыСоздания.ОбъектКонтроля;
    
    Если ПараметрыСоздания.Свойство("Расписание") Тогда
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = ПараметрыСоздания.Расписание.ПериодПовтораДней;
        Расписание.ПериодПовтораВТечениеДня = ПараметрыСоздания.Расписание.ПериодПовтораВТечениеДня;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    Иначе
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = 1;
        Расписание.ПериодПовтораВТечениеДня = 600;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    КонецЕсли;
	
	ЭлементОбъект.НастройкаВыполнена = Ложь;
    ЭлементОбъект.Сохранено = Истина;
	ЭлементОбъект.Выполнять = Ложь;
	ЭлементОбъект.Пауза = Ложь;
    
    ЭлементОбъект.Записать();
        
    //Создаем динамические настройки
    НаборЗаписей = РегистрыСведений.НастройкиАнализВызововКластера1С.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.КонтрольнаяПроцедура.Установить(ЭлементОбъект.Ссылка);
    
    НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.КонтрольнаяПроцедура = ЭлементОбъект.Ссылка;
    
    Если ПараметрыСоздания.Свойство("КаталогВременныхФайлов") Тогда
        НовЗапись.КаталогВременныхФайлов = ПараметрыСоздания.КаталогВременныхФайлов + ПолучитьРазделительПутиСервера() + ЭлементОбъект.Ссылка.УникальныйИдентификатор();
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("КаталогТЖСетевой") Тогда
        НовЗапись.КаталогТЖСетевой = ПараметрыСоздания.КаталогТЖСетевой;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("КаталогТЖЛокальный") Тогда
        НовЗапись.КаталогТЖЛокальный = ПараметрыСоздания.КаталогТЖЛокальный;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("ДлительностьХраненияФайловТЖ") Тогда
        НовЗапись.ДлительностьХраненияФайловТЖ = ПараметрыСоздания.ДлительностьХраненияФайловТЖ;
    КонецЕсли;

    Если ПараметрыСоздания.Свойство("АвтоматическиУдалятьЗаписиТЖ") Тогда
        НовЗапись.АвтоматическиУдалятьЗаписиТЖ = ПараметрыСоздания.АвтоматическиУдалятьЗаписиТЖ;
    КонецЕсли;

    Если ПараметрыСоздания.Свойство("СрокХраненияТЖ") Тогда
        НовЗапись.СрокХраненияТЖ = ПараметрыСоздания.СрокХраненияТЖ;    
    КонецЕсли;
    
    НаборЗаписей.Записать(Истина);
    
	Возврат ЭлементОбъект.Ссылка;
    
КонецФункции

// Создает контрольную процедуру "Контроль устойчивости".
//
// Параметры:
//  ПараметрыСоздания - Структура - структура создания с ключами:
//                                   — Наименование                 - Строка - максимальная длина 100
//                                   — ОбъектКонтроля               - СправочникСсылка.ОбъектКонтроля - объект контроля для которого создается контрольная процедура
//                                   — Расписание                   - РасписаниеРегламентногоЗадания - необязательный
//                                   — КаталогЭкспортаДампов        - Строка - максимальная длина 256, необязательный
//                                   — КаталогТЖСетевой             - Строка - максимальная длина 256, необязательный
//                                   — КаталогТЖЛокальный           - Строка - максимальная длина 256, необязательный
//                                   — ДлительностьХраненияФайловТЖ - Число - Число(10,0) неотрицательное, необязательный
//                                   — КаталогВыгрузкиДамповСетевой - Строка - максимальная длина 256, необязательный
//                                   — КаталогВыгрузкиДампов        - Строка - неограниченная длина, необязательный
//                                   — КаталогВременныхФайлов       - Строка - максимальная длина 256, необязательный
//                                   — УровеньДетализацииДампов     - Число - Число(3,0) неотрицательное, необязательный
//                                   — АвтоматическаяНастройка      - Булево - необязательный
//                                   — ИспользоватьАгента           - Булево - необязательный
//                                   — Выполнять                    - Булево - необязательный
// 
// Возвращаемое значение:
//   СправочникСсылка.КонтрольныеПроцедуры - ссылка на созданный элемент.
//
Функция СоздатьЭлементКонтрольУстойчивости(ПараметрыСоздания) Экспорт
    
    //Создаем сам элемент
    Если ПараметрыСоздания.Свойство("Владелец") Тогда
        Владелец = ПараметрыСоздания.Владелец;
    Иначе
        Владелец = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль устойчивости системы");
    КонецЕсли;
        
	ЭлементСсылка = ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ПараметрыСоздания.ОбъектКонтроля, Владелец);
	Если ЭлементСсылка = Неопределено Тогда
		ЭлементОбъект = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
	Иначе
		ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЭлементОбъект.Наименование = ПараметрыСоздания.Наименование;
	ЭлементОбъект.Владелец = Владелец;
	ЭлементОбъект.ОбъектКонтроля = ПараметрыСоздания.ОбъектКонтроля;
	ЭлементОбъект.Сохранено = Истина;
    
    Если ПараметрыСоздания.Свойство("Расписание") Тогда
        Если ТипЗнч(ПараметрыСоздания.Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
            Расписание = ПараметрыСоздания.Расписание;
        Иначе
            Расписание = Новый РасписаниеРегламентногоЗадания;
            Расписание.ПериодПовтораДней = ПараметрыСоздания.Расписание.ПериодПовтораДней;
            Расписание.ПериодПовтораВТечениеДня = ПараметрыСоздания.Расписание.ПериодПовтораВТечениеДня;
        КонецЕсли;
    Иначе
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = 1;
        Расписание.ПериодПовтораВТечениеДня = 60;
    КонецЕсли;
    
	ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    
    Если ПараметрыСоздания.Свойство("ИспользоватьАгента") Тогда
	    ЭлементОбъект.ДополнительныеСвойства.Вставить("ИспользоватьАгента", ПараметрыСоздания.ИспользоватьАгента);
    КонецЕсли;
    
	ЭлементОбъект.Записать();
	
	//Создаем динамические настройки
	НаборЗаписей = РегистрыСведений.НастройкиСборДампов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КонтрольнаяПроцедура.Установить(ЭлементОбъект.Ссылка);
	
	НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.КонтрольнаяПроцедура = ЭлементОбъект.Ссылка;
		
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.БезопасноеХранилище.ЗаписатьДанные(ЭлементОбъект.Ссылка, Новый Структура("КаталогЭкспортаДампов", ПараметрыСоздания.КаталогЭкспортаДампов));
	УстановитьПривилегированныйРежим(Ложь);
    
    Если ПараметрыСоздания.Свойство("КаталогТЖСетевой") Тогда
        НовЗапись.КаталогТЖСетевой = ПараметрыСоздания.КаталогТЖСетевой;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("КаталогТЖЛокальный") Тогда
	    НовЗапись.КаталогТЖЛокальный = ПараметрыСоздания.КаталогТЖЛокальный;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("ДлительностьХраненияФайловТЖ") Тогда
	    НовЗапись.ДлительностьХраненияФайловТЖ = ПараметрыСоздания.ДлительностьХраненияФайловТЖ;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("КаталогВыгрузкиДамповСетевой") Тогда
        НовЗапись.КаталогВыгрузкиДамповСетевой = ПараметрыСоздания.КаталогВыгрузкиДамповСетевой;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("КаталогВыгрузкиДампов") Тогда
	    НовЗапись.КаталогВыгрузкиДампов = ПараметрыСоздания.КаталогВыгрузкиДампов;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("КаталогВременныхФайлов") Тогда
        НовЗапись.КаталогВременныхФайлов = ПараметрыСоздания.КаталогВременныхФайлов;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("УровеньДетализацииДампов") Тогда
	    НовЗапись.УровеньДетализацииДампов = ПараметрыСоздания.УровеньДетализацииДампов;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("АвтоматическаяНастройка") Тогда
        НовЗапись.АвтоматическаяНастройка = ПараметрыСоздания.АвтоматическаяНастройка;
    Иначе
        НовЗапись.АвтоматическаяНастройка = Истина;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("ИспользоватьАгента") Тогда
	    НовЗапись.ИспользоватьАгента = ПараметрыСоздания.ИспользоватьАгента;
    КонецЕсли;
    
	
	НаборЗаписей.Записать(Истина);
	
	//Включаем регзадание по контрольной процедуре на выполнение
	ЭлементОбъект.НастройкаВыполнена = Истина;
    
    Если ПараметрыСоздания.Свойство("Выполнять") Тогда
        ЭлементОбъект.Выполнять = ПараметрыСоздания.Выполнять;
    Иначе
        ЭлементОбъект.Выполнять = Истина;
    КонецЕсли;
        
	ЭлементОбъект.Пауза = Ложь;
    УстановитьПривилегированныйРежим(Истина);
	ЭлементОбъект.КлючРегламентногоЗадания = ЭлементОбъект.ОбновитьРегламентноеЗадание(ЭлементОбъект.Расписание, Истина);
    ЭлементОбъект.Записать();
    УстановитьПривилегированныйРежим(Ложь);
    
    Если ПараметрыСоздания.Свойство("Ответственный") Тогда
        РегистрыСведений.СхемаАдресацииЗадач.ЗаписатьОтветственного(ЭлементОбъект.Ссылка, ПараметрыСоздания.Ответственный);
    КонецЕсли;
        
	Возврат ЭлементОбъект.Ссылка;
    
КонецФункции

// Создает контрольную процедуру "Мониторинг системных ошибок".
//
// Параметры:
//  ПараметрыСоздания - Структура - структура создания с ключами:
//                                   — Наименование                       - Строка - максимальная длина 100.
//                                   — ОбъектКонтроля                     - СправочникСсылка.ОбъектКонтроля - объект контроля для которого создается контрольная процедура.
//                                   — Ответсвенный                       - СправочникСсылка.РолиПользователей - ответственный за контрольную процедуру. 
//
// Возвращаемое значение:
//   СправочникСсылка.КонтрольныеПроцедуры - ссылка на созданный элемент.
//
Функция СоздатьЭлементМониторингСистемныхОшибок(ПараметрыСоздания) Экспорт
	
    ЭлементОбъект = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
    ЭлементОбъект.Владелец = Справочники.ВидыКонтрольныхПроцедур.МониторингСистемныхОшибок();
    ЭлементОбъект.Наименование = ПараметрыСоздания.Наименование;
	ЭлементОбъект.ОбъектКонтроля = ПараметрыСоздания.ОбъектКонтроля;
    
    Если ПараметрыСоздания.Свойство("Расписание") Тогда
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = ПараметрыСоздания.Расписание.ПериодПовтораДней;
        Расписание.ПериодПовтораВТечениеДня = ПараметрыСоздания.Расписание.ПериодПовтораВТечениеДня;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    Иначе
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = 1;
        Расписание.ПериодПовтораВТечениеДня = 600;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    КонецЕсли;
	
	ЭлементОбъект.НастройкаВыполнена = Ложь;
    ЭлементОбъект.Сохранено = Истина;
	ЭлементОбъект.Выполнять = Ложь;
	ЭлементОбъект.Пауза = Ложь;
    
    ЭлементОбъект.Записать();
    
    //Создаем динамические настройки
    НаборЗаписей = РегистрыСведений.НастройкиКонтрольЧислаИсключений.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.КонтрольнаяПроцедура.Установить(ЭлементОбъект.Ссылка);
    
    НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.КонтрольнаяПроцедура = ЭлементОбъект.Ссылка;
    
    Если ПараметрыСоздания.Свойство("КаталогВременныхФайлов") Тогда
        НовЗапись.КаталогВременныхФайлов = ПараметрыСоздания.КаталогВременныхФайлов + ПолучитьРазделительПутиСервера() + ЭлементОбъект.Ссылка.УникальныйИдентификатор();
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("КаталогТЖСетевой") Тогда
        НовЗапись.КаталогТЖСетевой = ПараметрыСоздания.КаталогТЖСетевой; 
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("КаталогТЖЛокальный") Тогда
        НовЗапись.КаталогТЖЛокальный = ПараметрыСоздания.КаталогТЖЛокальный;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("ДлительностьХраненияФайловТЖ") Тогда
        НовЗапись.ДлительностьХраненияФайловТЖ = ПараметрыСоздания.ДлительностьХраненияФайловТЖ;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("АвтоматическиУдалятьЗаписиТЖ") Тогда
        НовЗапись.АвтоматическиУдалятьЗаписиТЖ = ПараметрыСоздания.АвтоматическиУдалятьЗаписиТЖ;
    КонецЕсли;
    
    Если ПараметрыСоздания.Свойство("СрокХраненияТЖ") Тогда
        НовЗапись.СрокХраненияТЖ = ПараметрыСоздания.СрокХраненияТЖ;    
    КонецЕсли;
    
    НаборЗаписей.Записать(Истина);
    
	Возврат ЭлементОбъект.Ссылка;
    
КонецФункции

// Создает контрольную процедуру "Контроль выполнения регламентных заданий".
//
// Параметры:
//  ПараметрыСоздания - Структура - структура создания с ключами:
//                                   — Наименование                       - Строка - максимальная длина 100.
//                                   — ОбъектКонтроля                     - СправочникСсылка.ОбъектКонтроля - объект контроля для которого создается контрольная процедура.
//                                   — Ответсвенный                       - СправочникСсылка.РолиПользователей - ответственный за контрольную процедуру. 
//
// Возвращаемое значение:
//   СправочникСсылка.КонтрольныеПроцедуры - ссылка на созданный элемент.
//
Функция СоздатьЭлементКонтрольВыполненияРегламентныхЗадания(Параметры) Экспорт
    
    //Создаем сам элемент
	ЭлементОбъект = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
	ЭлементОбъект.Наименование = Параметры.Наименование;
	ЭлементОбъект.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий();
	ЭлементОбъект.ОбъектКонтроля = Параметры.ОбъектКонтроля;
    
    Если Параметры.Свойство("Расписание") Тогда
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = Параметры.Расписание.ПериодПовтораДней;
        Расписание.ПериодПовтораВТечениеДня = Параметры.Расписание.ПериодПовтораВТечениеДня;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    Иначе
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = 1;
        Расписание.ПериодПовтораВТечениеДня = 600;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    КонецЕсли;
	
	ЭлементОбъект.НастройкаВыполнена = Истина;
    
    Если Параметры.Свойство("Выполнять") Тогда
        ЭлементОбъект.Выполнять = Параметры.Выполнять;
    Иначе
        ЭлементОбъект.Выполнять = Ложь;
    КонецЕсли;
    ЭлементОбъект.Пауза = Ложь;
		
	ЭлементОбъект.Записать();
    
    Настройки = РегистрыСведений.НастройкиКонтрольРегламентныхЗаданий.ПрочитатьНастройки(ЭлементОбъект.Ссылка);
    
    Если Параметры.Свойство("ДопустимаяДлительностьВыполнения") Тогда
        Настройки.ДопустимаяДлительностьВыполнения = Параметры.ДопустимаяДлительностьВыполнения;
    КонецЕсли;
    
    Если Параметры.Свойство("КаталогЗапускаКлиента") Тогда
        Настройки.КаталогЗапускаКлиента = Параметры.КаталогЗапускаКлиента;
    КонецЕсли;
    
    РегистрыСведений.НастройкиКонтрольРегламентныхЗаданий.ЗаписатьНастройки(ЭлементОбъект.Ссылка, Настройки);
    	
	Возврат ЭлементОбъект.Ссылка;
    
КонецФункции

// Создает контрольную процедуру "Контроль нагрузочных тестов".
//
// Параметры:
//  ПараметрыСоздания - Структура - структура создания с ключами:
//                                   — Наименование                       - Строка - максимальная длина 100.
//                                   — ОбъектКонтроля                     - СправочникСсылка.ОбъектКонтроля - объект контроля для которого создается контрольная процедура.
//                                   — Ответсвенный                       - СправочникСсылка.РолиПользователей - ответственный за контрольную процедуру. 
//
// Возвращаемое значение:
//   СправочникСсылка.КонтрольныеПроцедуры - ссылка на созданный элемент.
//
Функция СоздатьЭлементКонтрольНагрузочныхТестов(Параметры) Экспорт
    
    //Создаем сам элемент
	ЭлементОбъект = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
	ЭлементОбъект.Наименование = Параметры.Наименование;
	ЭлементОбъект.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольНагрузочныхТестов();
	ЭлементОбъект.ОбъектКонтроля = Параметры.ОбъектКонтроля;
	
	Если Параметры.Свойство("Расписание") Тогда
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = Параметры.Расписание.ПериодПовтораДней;
        Расписание.ПериодПовтораВТечениеДня = Параметры.Расписание.ПериодПовтораВТечениеДня;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    Иначе
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = 1;
        Расписание.ПериодПовтораВТечениеДня = 86400;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    КонецЕсли;
	
	ЭлементОбъект.НастройкаВыполнена = Истина;
	ЭлементОбъект.Выполнять = Ложь;
	ЭлементОбъект.Пауза = Ложь;
	
	ЭлементОбъект.Записать();
	
	Возврат ЭлементОбъект.Ссылка;
    
КонецФункции

// Создает контрольную процедуру "Контроль подключений".
//
// Параметры:
//  Параметры - Структура - структура создания с ключами:
//                                   — Наименование                          - Строка - максимальная длина 100.
//                                   — ОбъектКонтроля                        - СправочникСсылка.ОбъектКонтроля - объект контроля для которого создается контрольная процедура.
//                                   — Ответсвенный                          - СправочникСсылка.РолиПользователей - ответственный за контрольную процедуру. 
//                                   — НастройкаВыполнена                    - Булево.
//                                   — Сохранено                             - Булево.
//                                   — Выполнять                             - Булево.
//                                   — Пауза                                 - Булево.
//                                   — МеханизмПроверкиОбрабатыватьИзменения - ПеречислениеСсылка.МеханизмыПроверкиПодключения.
//                                   — URLОпубликованнойИнформационнойБазы   - Строка.
//                                   — Таймаут                               - Число, секунды.
//                                   — ЛогинПриПодключении                   - Строка.
//                                   — ПарольПриПодключении                  - Строка.
//                                   — ИспользоватьПрокси                    - Булево.
//                                   — ПроксиСервер                          - Строка, если ИспользоватьПрокси = Ложь, то необязателен.
//                                   — ПроксиПорт                            - Число, если ИспользоватьПрокси = Ложь, то необязателен.
//                                   — ПериодКонтроля                        - Число, секунды.
//                                   — МинимальныйПроцентДоступности         - Чилсо, %.
//                                   — ДопустимоНетДанных                    - Число, секунды
//
// Возвращаемое значение:
//   СправочникСсылка.КонтрольныеПроцедуры - ссылка на созданный элемент.
//
Функция СоздатьЭлементКонтрольПодключений(Параметры) Экспорт
    
    //Создаем сам элемент
	ЭлементОбъект = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
	ЭлементОбъект.Наименование = Параметры.Наименование;
	ЭлементОбъект.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений();
	ЭлементОбъект.ОбъектКонтроля = Параметры.ОбъектКонтроля;
    
    Если Параметры.Свойство("Расписание") Тогда
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = Параметры.Расписание.ПериодПовтораДней;
        Расписание.ПериодПовтораВТечениеДня = Параметры.Расписание.ПериодПовтораВТечениеДня;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    Иначе
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = 1;
        Расписание.ПериодПовтораВТечениеДня = 20;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    КонецЕсли;
	
	ЭлементОбъект.НастройкаВыполнена = Параметры.НастройкаВыполнена;
	ЭлементОбъект.Выполнять = Параметры.Выполнять;
	ЭлементОбъект.Пауза = Параметры.Пауза;
        
	ЭлементОбъект.Записать();
    
    РегистрыСведений.СхемаАдресацииЗадач.ЗаписатьОтветственного(ЭлементОбъект.Ссылка, Параметры.Ответственный);
    РегистрыСведений.НастройкиКонтрольПодключений.ЗаписатьНастройки(ЭлементОбъект.Ссылка, Параметры);
    
	Возврат ЭлементОбъект.Ссылка;
    
КонецФункции

// Создает контрольную процедуру "Контроль производительности".
//
// Параметры:
//  ПараметрыСоздания - Структура - структура создания с ключами:
//                                   — Наименование                          - Строка - максимальная длина 100.
//                                   — ОбъектКонтроля                        - СправочникСсылка.ОбъектКонтроля - объект контроля для которого создается контрольная процедура.
//                                   — Ответсвенный                          - СправочникСсылка.РолиПользователей - ответственный за контрольную процедуру. 
//                                   — КаталогФайловОценкиПроизводительности - Строка.
//
// Возвращаемое значение:
//   СправочникСсылка.КонтрольныеПроцедуры - ссылка на созданный элемент.
//
Функция СоздатьЭлементКонтрольОценкиПроизводительности(Параметры) Экспорт
    
    //Создаем сам элемент
	ЭлементОбъект = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
	ЭлементОбъект.Наименование = Параметры.Наименование;
	ЭлементОбъект.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольПроизводительности();
	ЭлементОбъект.ОбъектКонтроля = Параметры.ОбъектКонтроля;
	ЭлементОбъект.Сохранено = Истина;
	
	Если Параметры.Свойство("Расписание") Тогда
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = Параметры.Расписание.ПериодПовтораДней;
        Расписание.ПериодПовтораВТечениеДня = Параметры.Расписание.ПериодПовтораВТечениеДня;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    Иначе
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = 1;
        Расписание.ПериодПовтораВТечениеДня = 1200;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    КонецЕсли;
	
	ЭлементОбъект.Записать();
    
    РегистрыСведений.СхемаАдресацииЗадач.ЗаписатьОтветственного(ЭлементОбъект.Ссылка, Параметры.Ответственный);
    
	//Создаем динамические настройки
	НаборЗаписей = РегистрыСведений.НастройкиКонтрольПроизводительности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КонтрольнаяПроцедура.Установить(ЭлементОбъект.Ссылка);
	
	НовЗапись = НаборЗаписей.Добавить();
	
	НовЗапись.КонтрольнаяПроцедура = ЭлементОбъект.Ссылка;
	НовЗапись.ОповещатьПриУхудшенииАпдекса = Ложь;
	НовЗапись.ПороговоеЗначениеПадения = 0;
	НовЗапись.КаталогФайловОценкиПроизводительности = Параметры.КаталогФайловОценкиПроизводительности;
	
	НаборЗаписей.Записать(Истина);
	
	//Включаем регзадание по контрольной процедуре на выполнение
	ЭлементОбъект.НастройкаВыполнена = Параметры.НастройкаВыполнена;
	ЭлементОбъект.Выполнять = Параметры.Выполнять;
	ЭлементОбъект.Пауза = Параметры.Пауза;
    
    // Нужен привилегированный режим, иначе агенту необходимо давать права администрирования
    УстановитьПривилегированныйРежим(Истина);
	ЭлементОбъект.КлючРегламентногоЗадания = ЭлементОбъект.ОбновитьРегламентноеЗадание(ЭлементОбъект.Расписание, Истина);
    ЭлементОбъект.Записать();
    УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЭлементОбъект.Ссылка;	
    
КонецФункции

// Создает контрольную процедуру "Оценка пользователей".
//
// Параметры:
//  ПараметрыСоздания - Структура - структура создания с ключами:
//                                   — Наименование                       - Строка - максимальная длина 100.
//                                   — ОбъектКонтроля                     - СправочникСсылка.ОбъектКонтроля - объект контроля для которого создается контрольная процедура.
//                                   — Ответсвенный                       - СправочникСсылка.РолиПользователей - ответственный за контрольную процедуру. 
//
// Возвращаемое значение:
//   СправочникСсылка.КонтрольныеПроцедуры - ссылка на созданный элемент.
//
Функция СоздатьЭлементОценкаПользователей(Параметры) Экспорт
    
    //Создаем сам элемент
	ЭлементОбъект = Справочники.КонтрольныеПроцедуры.СоздатьЭлемент();
	ЭлементОбъект.Наименование = Параметры.Наименование;
	ЭлементОбъект.Владелец = Справочники.ВидыКонтрольныхПроцедур.ОценкаПользователей();
	ЭлементОбъект.ОбъектКонтроля = Параметры.ОбъектКонтроля;
	
	Если Параметры.Свойство("Расписание") Тогда
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = Параметры.Расписание.ПериодПовтораДней;
        Расписание.ПериодПовтораВТечениеДня = Параметры.Расписание.ПериодПовтораВТечениеДня;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    Иначе
        Расписание = Новый РасписаниеРегламентногоЗадания;
        Расписание.ПериодПовтораДней = 1;
        Расписание.ПериодПовтораВТечениеДня = 3600;
        ЭлементОбъект.Расписание = Новый ХранилищеЗначения(Расписание, Новый СжатиеДанных(9));
    КонецЕсли;
	
	ЭлементОбъект.НастройкаВыполнена = Истина;
	ЭлементОбъект.Выполнять = Ложь;
	ЭлементОбъект.Пауза = Ложь;
	
	ЭлементОбъект.Записать();
	
	Возврат ЭлементОбъект.Ссылка;
    
КонецФункции

// Предназначена для поиска элемента справочника "Контрольные процедуры" по объекту контроля и виду КП
// 
// Параметры:
//  ОбъектКонтроля - СправочникСсылка.ОбъектыКонтроля - Ссылка на объект контроля
//  ВидКонтрольнойПроцедуры - СправочникСсылка.ВидыКонтрольныхПроцедур - Ссылка на вид контрольной процедуры
//
// Возвращаемое значение:
//  СправочникСсылка.КонтрольныеПроцедуры - Ссылка на контрольную процедуру
//
Функция ПолучитьКонтрольнуюПроцедуруПоОбъектуКонтроля(ОбъектКонтроля, ВидКонтрольнойПроцедуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрольныеПроцедуры.Ссылка
	|ИЗ
	|	Справочник.КонтрольныеПроцедуры КАК КонтрольныеПроцедуры
	|ГДЕ
	|	КонтрольныеПроцедуры.Владелец = &ВидКонтрольнойПроцедуры
	|	И КонтрольныеПроцедуры.ОбъектКонтроля = &ОбъектКонтроля
	|";
	
	Запрос.УстановитьПараметр("ВидКонтрольнойПроцедуры", ВидКонтрольнойПроцедуры);
	Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектКонтроля);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		КонтрольнаяПроцедура = Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КонтрольнаяПроцедура = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат КонтрольнаяПроцедура;
	
КонецФункции

#КонецОбласти
    
#Область Экспортные_Процедуры_и_функции

// Функция - Получить настройки выгрузки журнала регистрации
//
// Параметры:
//  ОбъектСсылка -  СправочникСсылка.КонтрольныеПроцедуры    - контрольная процедура "Контроль выполнения регламентных заданий"
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьНастройкиВыгрузкиЖурналаРегистрации(ОбъектСсылка, ВнешняяОбработка = Неопределено, ПараметрыЗапуска = Неопределено) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Дополнительная.Ссылка
    |ИЗ
    |   Справочник.КонтрольныеПроцедуры КАК Основная
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.КонтрольныеПроцедуры КАК Дополнительная
    |ПО
    |   Дополнительная.ОбъектКонтроля = Основная.ОбъектКонтроля
    |   И Дополнительная.Владелец = &КонтрольПодключений
    |ГДЕ
    |   Основная.Ссылка = &КонтрольнаяПроцедура
    |";
    
    Запрос.УстановитьПараметр("КонтрольнаяПроцедура", ОбъектСсылка);
    Запрос.УстановитьПараметр("КонтрольПодключений", Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль подключений"));
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Выборка.Следующий();
    
    НастройкиПодключения = Справочники.КонтрольныеПроцедуры.ПолучитьНастройкиКонтрольПодключений(Выборка.Ссылка);
    НастройкиКонтроляРегЗаданий = Справочники.КонтрольныеПроцедуры.ПолучитьНастройкиКонтроляРегламентныхЗаданий(ОбъектСсылка);
    
    СтрокаЗапуска = """" + НастройкиКонтроляРегЗаданий.КаталогЗапускаКлиента + """";
    
    Если ЗначениеЗаполнено(НастройкиПодключения.ЛогинПриПодключении) Тогда
        СтрокаЗапуска = СтрокаЗапуска + " /N""" + НастройкиПодключения.ЛогинПриПодключении + """";
    КонецЕсли;
    
    Если ЗначениеЗаполнено(НастройкиПодключения.ПарольПриПодключении) Тогда
        СтрокаЗапуска = СтрокаЗапуска + " /P""" + НастройкиПодключения.ПарольПриПодключении + """";
    КонецЕсли;
    
    Если НастройкиПодключения.МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.WEBСервис Тогда
        СтрокаЗапуска = СтрокаЗапуска + " /WS """ + НастройкиПодключения.URLОпубликованнойИнформационнойБазы + """";
        
        Если НастройкиПодключения.ИспользоватьПрокси Тогда
            СтрокаЗапуска = СтрокаЗапуска + " /Proxy -PSrv " + НастройкиПодключения.ПроксиСервер + " -PPort " + НастройкиПодключения.ПроксиПорт;
        Иначе
            СтрокаЗапуска = СтрокаЗапуска + " /NoProxy";
        КонецЕсли;
        
    ИначеЕсли НастройкиПодключения.МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.COMСоединитель Тогда
        СтрокаЗапуска = СтрокаЗапуска + " /IBConnectionString """ + СтрЗаменить(НастройкиПодключения.СтрокаСоединения, """", """""") + """";
    Иначе
        ВызватьИсключение "Не настроены параметры подключения к информационной базе у " + ОбъектСсылка.ОбъектКонтроля;
    КонецЕсли;
    
    ФайлОшибок = ПолучитьИмяВременногоФайла("log");
    СтрокаЗапуска = СтрокаЗапуска + " /DisableStartupMessages /DisableStartupDialogs /Out " + ФайлОшибок;
            
    Если ВнешняяОбработка <> Неопределено Тогда
        СтрокаЗапуска = СтрокаЗапуска + " /Execute """ + ВнешняяОбработка + """";
    КонецЕсли;
     
    Если ПараметрыЗапуска <> Неопределено Тогда
        СтрокаЗапуска = СтрокаЗапуска + " /C """ + ПараметрыЗапуска + """";
    КонецЕсли;
    
    ФайлУдалить = Новый Файл(ФайлОшибок);
    Если ФайлУдалить.Существует() Тогда
        УдалитьФайлы(ФайлОшибок);
    КонецЕсли;
            
    Возврат СтрокаЗапуска;
    
КонецФункции

Процедура ЗаписатьВЖурналРегистрации(ПараметрыЖР) Экспорт
	ЗаписьЖурналаРегистрации(
		ПараметрыЖР.ИмяСобытия,
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.КонтрольныеПроцедуры,
		ПараметрыЖР.Ссылка,
		ПараметрыЖР.Комментарий);
КонецПроцедуры

Процедура ИзменитьЭлементКонтрольУстойчивости(Параметры) Экспорт
	//Изменяем динамические настройки
	НаборЗаписей = РегистрыСведений.НастройкиСборДампов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КонтрольнаяПроцедура.Установить(Параметры.Ссылка);
	
	НаборЗаписей.Прочитать();
	Для Каждого ТекЗапись Из НаборЗаписей Цикл
		Если Параметры.Свойство("КаталогЭкспортаДампов") Тогда
			ДанныеХранилища = Новый Структура("КаталогЭкспортаДампов", Параметры.КаталогЭкспортаДампов);
			УстановитьПривилегированныйРежим(Истина);
			РегистрыСведений.БезопасноеХранилище.ЗаписатьДанные(Параметры.Ссылка, ДанныеХранилища);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		Если Параметры.Свойство("КаталогВыгрузкиДамповСетевой") Тогда
			ТекЗапись.КаталогВыгрузкиДамповСетевой = Параметры.КаталогВыгрузкиДамповСетевой;
		КонецЕсли;
		Если Параметры.Свойство("КаталогВыгрузкиДампов") Тогда
			ТекЗапись.КаталогВыгрузкиДампов = Параметры.КаталогВыгрузкиДампов;
		КонецЕсли;
		Если Параметры.Свойство("КаталогВременныхФайлов") Тогда
			ТекЗапись.КаталогВременныхФайлов = Параметры.КаталогВременныхФайлов;
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

Процедура ИзменитьЭлементКонтрольОценкиПроизводительности(Параметры) Экспорт
	ЭлементОбъект = Параметры.Ссылка.ПолучитьОбъект();
	Если Параметры.Свойство("Наименование") Тогда
		ЭлементОбъект.Наименование = Параметры.Наименование;
	КонецЕсли;
	ЭлементОбъект.Записать();
	
	НаборЗаписей = РегистрыСведений.НастройкиКонтрольПроизводительности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КонтрольнаяПроцедура.Установить(Параметры.Ссылка);
	
	НаборЗаписей.Прочитать();
	Для Каждого ТекЗапись Из НаборЗаписей Цикл
		Если Параметры.Свойство("КаталогФайловОценкиПроизводительности") Тогда
			ТекЗапись.КаталогФайловОценкиПроизводительности = Параметры.КаталогФайловОценкиПроизводительности;
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

Функция ПолучитьКомментарийТЖ(Ссылка) Экспорт
	Возврат Строка(Ссылка.УникальныйИдентификатор()) + ": " + Ссылка.Наименование + " на " + Константы.ИмяЭтогоЦКК.Получить();
КонецФункции

Функция ПолучитьКонтрольныеПроцедурыОценкиПроизводительности() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КонтрольныеПроцедуры.Выполнять,
	|	НастройкиКонтрольПроизводительности.КонтрольнаяПроцедура,
	|	НастройкиКонтрольПроизводительности.КаталогФайловОценкиПроизводительности,
	|	КонтрольныеПроцедуры.ОбъектКонтроля
	|ИЗ
	|	РегистрСведений.НастройкиКонтрольПроизводительности КАК НастройкиКонтрольПроизводительности
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.КонтрольныеПроцедуры КАК КонтрольныеПроцедуры
	|ПО
	|	НастройкиКонтрольПроизводительности.КонтрольнаяПроцедура = КонтрольныеПроцедуры.Ссылка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.ОбъектыКонтроля КАК СпрОбъектыКонтроля
	|ПО
	|	СпрОбъектыКонтроля.Ссылка = КонтрольныеПроцедуры.ОбъектКонтроля
	|ГДЕ
	|	КонтрольныеПроцедуры.Владелец = &КонтрольПроизводительности
	|УПОРЯДОЧИТЬ ПО
	|	СпрОбъектыКонтроля.Наименование
	|";
	
	Запрос.УстановитьПараметр("КонтрольПроизводительности", Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль производительности"));
	
	Результат = Запрос.Выполнить();

	Данные = Общий.РезультатЗапросаВМассив(Результат);
	
	Возврат Данные;
КонецФункции

Функция ШаблонОповещенийКонтрольПодключений() Экспорт
	
	ШаблонОповещения = Новый Структура("Тема, ТелоПисьма, ТелоСМС");
	
	ШаблонОповещения.Тема = "<Шапка>PROBLEM:Доступность публикация</Шапка><Тело>[СтрокаПодключения]</Тело>";
	ШаблонОповещения.ТелоПисьма = "<Шапка>PROBLEM:Доступность</Шапка>
	|<Тело>[ВремяВСтатусе];[ДатаОткрытияИнцидента=дд.ММ ЧЧ:мм:сс]: [СтрокаПодключения]
	|</Тело>";
	ШаблонОповещения.ТелоСМС = "<Шапка>PROBLEM:Доступность</Шапка>
	|<Тело>[ДатаОткрытияИнцидента=дд.ММ ЧЧ:мм:сс]: [СтрокаПодключения]
	|</Тело>";
	
	Возврат ШаблонОповещения;
	
КонецФункции

Функция ПолучитьНастройкиКонтрольПодключений(Ссылка) Экспорт
	
	Настройки = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МеханизмПроверкиОбрабатыватьИзменения,
	|	URLОпубликованнойИнформационнойБазы,
	|	СтрокаСоединения,
	|	НеПроверятьПоЖурналуРегистрации,
	|	Таймаут,
    |   ИспользоватьПрокси,
    |   ПроксиСервер,
    |   ПроксиПорт,
    |   ПериодКонтроля,
    |   МинимальныйПроцентДоступности,
    |   ДопустимоНетДанных
	|ИЗ
	|	РегистрСведений.НастройкиКонтрольПодключений
	|ГДЕ
	|	КонтрольнаяПроцедура = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Настройки = Общий.РезультатЗапросаВМассив(Результат);
		
		ТипИсполнителя = Справочники.ТипыИсполнителейКонтрольПодключений.ОтветственныйЗаВозможностьПодключения;
		Настройки[0].Вставить("ОтветственныйЗаголовок", ТипИсполнителя.Наименование);
		Настройки[0].Вставить("Ответственный", ПолучитьОтвественного(Ссылка, ТипИсполнителя));
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеХранилища = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(Ссылка);
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеХранилища = Неопределено Тогда
			ДанныеХранилища = Новый Структура("ЛогинПриПодключении, ПарольПриПодключении", "", "");
		КонецЕсли;
				
		Настройки[0].Вставить("ЛогинПриПодключении", ДанныеХранилища.ЛогинПриПодключении);
		Настройки[0].Вставить("ПарольПриПодключении", ДанныеХранилища.ПарольПриПодключении);
		
		Настройки = Настройки[0];
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция ПолучитьОтвественного(Ссылка, ТипИсполнителя) Экспорт
	Ответственный = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РольПользователя
	|ИЗ
	|	РегистрСведений.СхемаАдресацииЗадач
	|ГДЕ
	|	ТипИсполнителя = &ТипИсполнителя
	|	И КонтрольнаяПроцедура = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипИсполнителя", ТипИсполнителя);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Ответственный = Выборка.РольПользователя;
	КонецЕсли;
	
	Возврат Ответственный;
	
КонецФункции

Функция КонтрольПодключенийПауза(СсылкиМассив) Экспорт
	Для Каждого ТекСсылка Из СсылкиМассив Цикл
		СпрОбъект = ТекСсылка.ПолучитьОбъект();
		СпрОбъект.Выполнять = Ложь;
		СпрОбъект.Пауза = Истина;
		СпрОбъект.Записать();
	КонецЦикла;
КонецФункции

Функция КонтрольПодключенийВозобновить(СсылкиМассив) Экспорт
    
    ЦентрКонтроляКачества = Справочники.ОбъектыКонтроля.ЦентрКонтроляКачества();
    
    Для Каждого ТекСсылка Из СсылкиМассив Цикл
		НачатьТранзакцию();
		
		СпрОбъект = ТекСсылка.ПолучитьОбъект();
		СпрОбъект.Выполнять = Истина;
		СпрОбъект.Пауза = Ложь;
		СпрОбъект.Записать();
		
		Результат = КонтрольПодключенийСервер.КонтрольПодключенияТестНастроек(ТекСсылка);
		
		Если Результат.Успешно Тогда
			Доступность = 1;
		Иначе
			Доступность = 0;
		КонецЕсли;
        
        ПараметрыДоступности = Новый Структура("Доступность", Доступность);
		КонтрольПодключенийСервер.ЗаписатьДанныеОДоступности(ТекСсылка.ОбъектКонтроля, ПараметрыДоступности);
		Параметры = Новый Структура("ИнформационнаяБаза, Источник", ТекСсылка.ОбъектКонтроля, ЦентрКонтроляКачества);
		РегистрыСведений.КонтрольПодключенийТекущееСостояние.ЗаписатьТекущееСостояние(Параметры, ?(Доступность=1,Истина, Ложь));
		
		ЗафиксироватьТранзакцию();
    КонецЦикла;
    
КонецФункции

Функция ПолучитьНастройкиКонтроляРегламентныхЗаданий(Ссылка) Экспорт
    
    Настройки = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
    |   МаксимальнаяДатаПрочитанныхЗаписейСкрыто,
	|	ДопустимаяДлительностьВыполнения,
	|	КаталогЗапускаКлиента
	|ИЗ
	|	РегистрСведений.НастройкиКонтрольРегламентныхЗаданий
	|ГДЕ
	|	КонтрольнаяПроцедура = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Настройки = Общий.РезультатЗапросаВМассив(Результат);
		
		ТипИсполнителя = Справочники.ТипыИсполнителейКонтрольРегламентныхЗаданий.ОтветственныйЗаВыполнениеРегламентныхЗаданий;
		Настройки[0].Вставить("Ответственный", ПолучитьОтвественного(Ссылка, ТипИсполнителя));
		Настройки = Настройки[0];
	КонецЕсли;
	
	Возврат Настройки;
    
КонецФункции

Функция ПолучитьНастройкиСборДампов(Ссылка) Экспорт
	
	Настройки = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КаталогТЖСетевой,
	|	КаталогТЖЛокальный,
	|	ДлительностьХраненияФайловТЖ,
	|	КаталогВыгрузкиДамповСетевой,
	|	КаталогВыгрузкиДампов,
	|	КаталогВременныхФайлов,
	|	УровеньДетализацииДампов,
	|	АвтоматическаяНастройка,
    |   ИспользоватьАгента
	|ИЗ
	|	РегистрСведений.НастройкиСборДампов
	|ГДЕ
	|	КонтрольнаяПроцедура = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Настройки = Общий.РезультатЗапросаВМассив(Результат);
		
		ТипИсполнителя = Справочники.ТипыИсполнителейСборДампов.ОтветственныйЗаРассмотрениеДампа;
		Настройки[0].Вставить("ОтветственныйЗаголовок", ТипИсполнителя.Наименование);
		Настройки[0].Вставить("Ответственный", ПолучитьОтвественного(Ссылка, ТипИсполнителя));
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеХранилища = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(Ссылка);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДанныеХранилища <> Неопределено Тогда
			Настройки[0].Вставить("КаталогЭкспортаДампов", ДанныеХранилища.КаталогЭкспортаДампов);
		Иначе
			Настройки[0].Вставить("КаталогЭкспортаДампов", "");
		КонецЕсли;
        
        Настройки = Настройки[0];
        
    КонецЕсли;
    
    Возврат Настройки;
	
КонецФункции

#Область Подсистема_инциденты

Функция ПолучитьПараметрыИнцидента(КонтрольнаяПроцедураСсылка, ТипЗадачи, Параметры = Неопределено) Экспорт
	
	ПараметрыИнцидента = Новый Структура("НаименованиеТипаИнцидента, КодИнцидента, УровеньИнцидента");
	
	Если КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль производительности") Тогда
		ПараметрыИнцидента = ПолучитьПараметрыИнцидентаКонтрольПроизводительности(КонтрольнаяПроцедураСсылка, ТипЗадачи);
	ИначеЕсли КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль потребления памяти") Тогда
		ПараметрыИнцидента = ПолучитьПараметрыИнцидентаКонтрольПотребленияПамяти(КонтрольнаяПроцедураСсылка, ТипЗадачи);
	ИначеЕсли КонтрольнаяПроцедураСсылка.Владелец = Справочники.ВидыКонтрольныхПроцедур.НайтиПоНаименованию("Контроль устойчивости системы") Тогда
		ПараметрыИнцидента = ПолучитьПараметрыИнцидентаКонтрольУстойчивостиСистемы(КонтрольнаяПроцедураСсылка, ТипЗадачи, Параметры);
	КонецЕсли;
		
	Возврат ПараметрыИнцидента;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Служебные_Процедуры_и_функции

Процедура СоздатьНастройкиПоУмолчанию() Экспорт
    
    // Настройки "Контроль подключений"
    НастройкиКонтрольПодключений = РегистрыСведений.НастройкиКонтрольПодключений.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений());
    
    НастройкиКонтрольПодключений.МеханизмПроверкиОбрабатыватьИзменения = Перечисления.МеханизмыПроверкиПодключения.WEBСервис;
    НастройкиКонтрольПодключений.Таймаут = 8;
    НастройкиКонтрольПодключений.ПериодКонтроля = 120;
    НастройкиКонтрольПодключений.МинимальныйПроцентДоступности = 90;
    НастройкиКонтрольПодключений.ДопустимоНетДанных = 180;
    
    РегистрыСведений.НастройкиКонтрольПодключений.ЗаписатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений(), НастройкиКонтрольПодключений);
    
    // Настройки "Контроль потребления памяти"
    НастройкиКонтрольПамяти = РегистрыСведений.НастройкиКонтрольПамяти.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти());
    
    НастройкиКонтрольПамяти.ПороговаяПамятьМБ = 4096;
    НастройкиКонтрольПамяти.СрокХраненияДанных = 168;
    НастройкиКонтрольПамяти.АвтоматическиУдалятьЗаписиСеансов = Истина;
    
    Расписание = Новый РасписаниеРегламентногоЗадания;
    Расписание.ПериодПовтораДней = 1;
    Расписание.ПериодПовтораВТечениеДня = 60;
    
    НастройкиКонтрольПамяти.Расписание = Расписание;
    
    РегистрыСведений.НастройкиКонтрольПамяти.ЗаписатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти(), НастройкиКонтрольПамяти);
    
    // Настройки "Контроль производительности"
    НастройкиКонтрольПроизводительности = РегистрыСведений.НастройкиКонтрольПроизводительности.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПроизводительности());
    
    Расписание = Новый РасписаниеРегламентногоЗадания;
    Расписание.ПериодПовтораДней = 1;
    Расписание.ПериодПовтораВТечениеДня = 600;
    
    НастройкиКонтрольПроизводительности.Расписание = Расписание;
    
    РегистрыСведений.НастройкиКонтрольПроизводительности.ЗаписатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольПроизводительности(), НастройкиКонтрольПроизводительности);
    
    // Настройки "Контроль регламентных заданий;
    НастройкиКонтрольРегламентныхЗаданий = РегистрыСведений.НастройкиКонтрольРегламентныхЗаданий.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий());
    НастройкиКонтрольРегламентныхЗаданий.ДопустимаяДлительностьВыполнения = 540;
    
    СисИнфо = Новый СистемнаяИнформация;
    Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
        НастройкиКонтрольРегламентныхЗаданий.КаталогЗапускаКлиента = "C:\Program Files (x86)\1cv8\common\";
    ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда    
        НастройкиКонтрольРегламентныхЗаданий.КаталогЗапускаКлиента = "C:\Program Files\1cv8\common\";
    ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
        НастройкиКонтрольРегламентныхЗаданий.КаталогЗапускаКлиента = "/opt/1C/v8.3/i386";
    ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
        НастройкиКонтрольРегламентныхЗаданий.КаталогЗапускаКлиента = "/opt/1C/v8.3/x86_64";
    КонецЕсли;
    
    Расписание = Новый РасписаниеРегламентногоЗадания;
    Расписание.ПериодПовтораДней = 1;
    Расписание.ПериодПовтораВТечениеДня = 600;
    
    НастройкиКонтрольРегламентныхЗаданий.Расписание = Расписание;
    
    РегистрыСведений.НастройкиКонтрольРегламентныхЗаданий.ЗаписатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий(), НастройкиКонтрольРегламентныхЗаданий);
    
    // Настройки "Контроль устойчивости"
    НастройкиСборДампов = РегистрыСведений.НастройкиСборДампов.ПрочитатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы());
    
    НастройкиСборДампов.ДлительностьХраненияФайловТЖ = 2;
    НастройкиСборДампов.УровеньДетализацииДампов = 3;
    
    Расписание = Новый РасписаниеРегламентногоЗадания;
    Расписание.ПериодПовтораДней = 1;
    Расписание.ПериодПовтораВТечениеДня = 60;
    
    НастройкиСборДампов.Расписание = Расписание;
    
    РегистрыСведений.НастройкиСборДампов.ЗаписатьНастройки(Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы(), НастройкиСборДампов);
    
КонецПроцедуры

#Область Подсистема_инциденты

Функция ПолучитьПараметрыИнцидентаКонтрольПроизводительности(КонтрольнаяПроцедураСсылка, ТипЗадачи) Экспорт
	
	ПараметрыИнцидента = Новый Структура("НаименованиеТипаИнцидента, КодИнцидента, УровеньИнцидента");
	
    Если ТипЗадачи = Справочники.ТипыЗадачКонтрольПроизводительности.НетФайлов Тогда
        
        НаименованиеТипаИнцидента = "APDEX/НетФайлов";
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
        ПараметрыИнцидента.НаименованиеТипаИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Предупреждение);
        
        НаименованиеИнцидента = НаименованиеТипаИнцидента + "/" + КонтрольнаяПроцедураСсылка.ОбъектКонтроля;
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(КонтрольнаяПроцедураСсылка.ОбъектКонтроля.УникальныйИдентификатор()));
        ПараметрыИнцидента.КодИнцидента = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, НаименованиеИнцидента, Истина);
        		
		ПараметрыИнцидента.УровеньИнцидента = Перечисления.УровниИнцидентов.Предупреждение;
        
    ИначеЕсли ТипЗадачи = Справочники.ТипыЗадачКонтрольПроизводительности.НеверныйФорматФайлов Тогда
        
        НаименованиеТипаИнцидента = "APDEX/НеверныйФорматФайла";
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
        ПараметрыИнцидента.НаименованиеТипаИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Ошибка);
        
        НаименованиеИнцидента = НаименованиеТипаИнцидента + "/" + КонтрольнаяПроцедураСсылка.ОбъектКонтроля;
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(КонтрольнаяПроцедураСсылка.ОбъектКонтроля.УникальныйИдентификатор()));
        ПараметрыИнцидента.КодИнцидента = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, НаименованиеИнцидента, Истина);
        		
		ПараметрыИнцидента.УровеньИнцидента = Перечисления.УровниИнцидентов.Ошибка;

    ИначеЕсли ТипЗадачи = Справочники.ТипыЗадачКонтрольПроизводительности.НеЗавершиласьПредыдущаяЗагрузкаФайлов Тогда
        
        НаименованиеТипаИнцидента = "APDEX/НезавершиласьПредыдущаяЗагрузка";
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
        ПараметрыИнцидента.НаименованиеТипаИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Предупреждение);
        
        НаименованиеИнцидента = НаименованиеТипаИнцидента + "/" + КонтрольнаяПроцедураСсылка.ОбъектКонтроля;
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(КонтрольнаяПроцедураСсылка.ОбъектКонтроля.УникальныйИдентификатор()));
        ПараметрыИнцидента.КодИнцидента = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, НаименованиеИнцидента, Истина);
        		
		ПараметрыИнцидента.УровеньИнцидента = Перечисления.УровниИнцидентов.Предупреждение;
        
    ИначеЕсли ТипЗадачи = Справочники.ТипыЗадачКонтрольПроизводительности.ОшибкаЗагрузкиФайлов Тогда
        
        НаименованиеТипаИнцидента = "APDEX/ОшибкаЗагрузкиФайлов";
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
        ПараметрыИнцидента.НаименованиеТипаИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Ошибка);
        
        НаименованиеИнцидента = НаименованиеТипаИнцидента + "/" + КонтрольнаяПроцедураСсылка.ОбъектКонтроля;
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(КонтрольнаяПроцедураСсылка.ОбъектКонтроля.УникальныйИдентификатор()));
        ПараметрыИнцидента.КодИнцидента = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, НаименованиеИнцидента, Истина);
        		
		ПараметрыИнцидента.УровеньИнцидента = Перечисления.УровниИнцидентов.Ошибка;
        
	КонецЕсли;
		
	Возврат ПараметрыИнцидента;
	
КонецФункции

Функция ПолучитьПараметрыИнцидентаКонтрольПотребленияПамяти(КонтрольнаяПроцедураСсылка, ТипЗадачи) Экспорт
	
	ПараметрыИнцидента = Новый Структура("НаименованиеТипаИнцидента, КодИнцидента, УровеньИнцидента");
	
    Если ТипЗадачи = Справочники.ТипыЗадачКонтрольПамяти.ПревышенПорогПотребленияПамяти Тогда
        
        НаименованиеТипаИнцидента = "rphost/memory/limit";
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
        ПараметрыИнцидента.НаименованиеТипаИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Ошибка);
        
        НаименованиеИнцидента = НаименованиеТипаИнцидента + "/" + КонтрольнаяПроцедураСсылка.ОбъектКонтроля;
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(КонтрольнаяПроцедураСсылка.ОбъектКонтроля.УникальныйИдентификатор()));
        ПараметрыИнцидента.КодИнцидента = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, НаименованиеИнцидента, Истина);
        
		ПараметрыИнцидента.УровеньИнцидента = Перечисления.УровниИнцидентов.Ошибка;
		ПараметрыИнцидента.Вставить("ОбъектЦКК", КонтрольнаяПроцедураСсылка.ОбъектКонтроля);
		ПараметрыИнцидента.Вставить("Ответственный", КонтрольнаяПроцедураСсылка.ОбъектКонтроля.Ответственный);
        
	ИначеЕсли ТипЗадачи = Справочники.ТипыЗадачКонтрольПамяти.НедоступенКластер Тогда
        
        ПараметрыОтбора = Новый Структура("ОбъектКонтроля");
		ПараметрыОтбора.ОбъектКонтроля = КонтрольнаяПроцедураСсылка.ОбъектКонтроля;
		НастройкиКластера = РегистрыСведений.ПараметрыКластеров.Получить(ПараметрыОтбора);
		
		НаименованиеТипаИнцидента = "rphost/memory/error";
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
        ПараметрыИнцидента.НаименованиеТипаИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Ошибка);
        
        НаименованиеИнцидента = НаименованиеТипаИнцидента + "/" + НастройкиКластера.ТипПодключения + "/" + КонтрольнаяПроцедураСсылка.ОбъектКонтроля;
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(КонтрольнаяПроцедураСсылка.ОбъектКонтроля.УникальныйИдентификатор()));
        ПараметрыИнцидента.КодИнцидента = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, НаименованиеИнцидента, Истина);
        
		ПараметрыИнцидента.УровеньИнцидента = Перечисления.УровниИнцидентов.Предупреждение;
		ПараметрыИнцидента.Вставить("ОбъектЦКК", КонтрольнаяПроцедураСсылка.ОбъектКонтроля);
		ПараметрыИнцидента.Вставить("Ответственный", КонтрольнаяПроцедураСсылка.ОбъектКонтроля.Ответственный);
        
	ИначеЕсли ТипЗадачи = Справочники.ТипыЗадач.ВосстановлениеРаботоспособоностиКонтрольнойПроцедуры Тогда
        
        НаименованиеТипаИнцидента = "error/run";
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
        ПараметрыИнцидента.НаименованиеТипаИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Ошибка);
        
		НаименованиеИнцидента = НаименованиеТипаИнцидента + "/" + КонтрольнаяПроцедураСсылка;
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(КонтрольнаяПроцедураСсылка.УникальныйИдентификатор()));
        ПараметрыИнцидента.КодИнцидента = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, НаименованиеИнцидента, Истина);
        
		ПараметрыИнцидента.УровеньИнцидента = Перечисления.УровниИнцидентов.Ошибка;
		ПараметрыИнцидента.Вставить("ОбъектЦКК", КонтрольнаяПроцедураСсылка.ОбъектКонтроля);
		ПараметрыИнцидента.Вставить("Ответственный", КонтрольнаяПроцедураСсылка.ОбъектКонтроля.Ответственный);
        
	КонецЕсли;
		
	Возврат ПараметрыИнцидента;
	
КонецФункции

Функция ПолучитьПараметрыИнцидентаКонтрольВыполненияРегламентныхЗаданий(КонтрольнаяПроцедураСсылка, ТипЗадачи) Экспорт
	
	ПараметрыИнцидента = Новый Структура("НаименованиеТипаИнцидента, КодИнцидента, УровеньИнцидента");
	
    Если ТипЗадачи = Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийНетСобытий Тогда
        
        НаименованиеТипаИнцидента = "ScheduledJob/Stop";
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
        ПараметрыИнцидента.НаименованиеТипаИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Ошибка);
        
        НаименованиеИнцидента = НаименованиеТипаИнцидента + "/" + КонтрольнаяПроцедураСсылка.ОбъектКонтроля;
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(КонтрольнаяПроцедураСсылка.ОбъектКонтроля.УникальныйИдентификатор()));
        ПараметрыИнцидента.КодИнцидента = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, НаименованиеИнцидента, Истина);
        		
		ПараметрыИнцидента.УровеньИнцидента = Перечисления.УровниИнцидентов.Ошибка;
        
    ИначеЕсли ТипЗадачи = Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийТаймаут Тогда
        
        НаименованиеТипаИнцидента = "ScheduledJob/Timeout";
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
        ПараметрыИнцидента.НаименованиеТипаИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.Предупреждение);
        
        НаименованиеИнцидента = НаименованиеТипаИнцидента + "/" + КонтрольнаяПроцедураСсылка.ОбъектКонтроля;
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(КонтрольнаяПроцедураСсылка.ОбъектКонтроля.УникальныйИдентификатор()));
        ПараметрыИнцидента.КодИнцидента = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, НаименованиеИнцидента, Истина);
        		
		ПараметрыИнцидента.УровеньИнцидента = Перечисления.УровниИнцидентов.Предупреждение;
        
    ИначеЕсли ТипЗадачи = Справочники.ТипыЗадачКонтрольРегламентныхЗаданий.КонтрольРегламентныхЗаданийОшибка Тогда
        
        НаименованиеТипаИнцидента = "ScheduledJob/Error";
        ХешТипа = Справочники.ТипыИнцидентов.ХешТипИнцидента(НаименованиеТипаИнцидента);
        ПараметрыИнцидента.НаименованиеТипаИнцидента = Справочники.ТипыИнцидентов.СоздатьЭлементПоХешу(ХешТипа, НаименованиеТипаИнцидента, Перечисления.УровниИнцидентов.КритическаяОшибка);
        
        НаименованиеИнцидента = НаименованиеТипаИнцидента + "/" + КонтрольнаяПроцедураСсылка.ОбъектКонтроля;
        ХешИнцидента = Справочники.Инциденты.ХешИнцидента(НаименованиеТипаИнцидента + Строка(КонтрольнаяПроцедураСсылка.ОбъектКонтроля.УникальныйИдентификатор()));
        ПараметрыИнцидента.КодИнцидента = Справочники.Инциденты.СоздатьЭлементПоХешу(ХешИнцидента, НаименованиеИнцидента, Истина);
        		
		ПараметрыИнцидента.УровеньИнцидента = Перечисления.УровниИнцидентов.КритическаяОшибка;
        
    КонецЕсли;
	
	Возврат ПараметрыИнцидента;
	
КонецФункции

Функция ПолучитьПараметрыИнцидентаКонтрольУстойчивостиСистемы(КонтрольнаяПроцедураСсылка, ТипЗадачи, Параметры)
	
	ПараметрыИнцидента = Новый Структура("НаименованиеТипаИнцидента, КодИнцидента, УровеньИнцидента");
	
    Если ТипЗадачи = Справочники.ТипыЗадачСборДампов.СборДамповНовыйДампРассмотреть Тогда
        
		ПараметрыИнцидента.НаименованиеТипаИнцидента = "dump/create";
		ПараметрыИнцидента.КодИнцидента = ПараметрыИнцидента.НаименованиеТипаИнцидента + "/" + Параметры.ВариантДампа;
		ПараметрыИнцидента.УровеньИнцидента = Перечисления.УровниИнцидентов.Предупреждение;
	КонецЕсли;
	
	Возврат ПараметрыИнцидента;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПредопределенныеПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
    
    Если ВидФормы = "ФормаОбъекта" Тогда
        
        Если Параметры.Свойство("Ключ") Тогда
            
            Если Параметры.Ключ.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений() Тогда
                ВыбраннаяФорма = "ФормаЭлементаКонтрольПодключений";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.Владелец = Справочники.ВидыКонтрольныхПроцедур.АнализВызововКластера1С() Тогда
                ВыбраннаяФорма = "ФормаЭлементаАнализВызововКластера1С";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольНагрузочныхТестов() Тогда
                ВыбраннаяФорма = "ФормаЭлементаКонтрольНагрузочныхТестов";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольПотребленияПамяти() Тогда
                ВыбраннаяФорма = "ФормаЭлементаКонтрольПамяти";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольПодключений() Тогда
                ВыбраннаяФорма = "ФормаЭлементаКонтрольПодключений";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольПроизводительности() Тогда
                ВыбраннаяФорма = "ФормаЭлементаКонтрольПроизводительности";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.Владелец = Справочники.ВидыКонтрольныхПроцедур.МониторингСистемныхОшибок() Тогда
                ВыбраннаяФорма = "ФормаЭлементаКонтрольЧислаИсключений";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольУстойчивостиСистемы() Тогда
                ВыбраннаяФорма = "ФормаЭлементаСборДампов";
                СтандартнаяОбработка = Ложь;
            ИначеЕсли Параметры.Ключ.Владелец = Справочники.ВидыКонтрольныхПроцедур.КонтрольВыполненияРегламентныхЗаданий() Тогда
                ВыбраннаяФорма = "ФормаЭлементаКонтрольРегламентныхЗаданий";
                СтандартнаяОбработка = Ложь;
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти


#КонецЕсли
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПрограммныйИнтерфейс

Функция ПолучитьДанные(
	Знач ОпорнаяДата,
	Знач НачальноеСмещение,
	Знач ЧислоТочек,
	Знач Шаг, 
	Статистика = Неопределено, 
	ВычислитьАгрегатныеЗначения = Истина, 
	ВычислитьГоризонтАктуальности = Ложь,
	РежимСдвига = Ложь
) Экспорт

    ТаблицаДат = Новый ТаблицаЗначений;
    ТаблицаДат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
    ДатаНачала = ОпорнаяДата;
    ИндексТочки = 0;
    Пока ИндексТочки < ЧислоТочек Цикл
        
        ДатаТочки = ДатаНачала + ИндексТочки * Шаг;
        
        НовСтрока = ТаблицаДат.Добавить();
        НовСтрока.Дата = Дата(1,1,1) + ЦЕЛ((ДатаТочки - Дата(1,1,1))/Окр(Шаг)) * Окр(Шаг);
        
        ИндексТочки = ИндексТочки + 1;
        
    КонецЦикла;
    
    Кластеры = Новый Соответствие;
    РабочиеСерверы = Новый Соответствие;
    Для Каждого Настройка Из НастройкиПоказателя Цикл
        Кластеры.Вставить(Настройка.Кластер, Истина);
        РабочиеСерверы.Вставить(Настройка.РабочийСервер, Истина);
    КонецЦикла;
    
    КластерыМассив = Новый Массив;
    Для Каждого ТекКластер Из Кластеры Цикл
        КластерыМассив.Добавить(ТекКластер.Ключ);
    КонецЦикла;
    
    РабочиеСерверыМассив = Новый Массив;
    Для Каждого РабочийСервер Из РабочиеСерверы Цикл
        РабочиеСерверыМассив.Добавить(Строка(РабочийСервер.Ключ));
    КонецЦикла;
    
    Запрос = Новый Запрос;

    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Дата
    |ПОМЕСТИТЬ
    |   ТаблицаДат   
    |ИЗ
    |   &ТаблицаДат КАК ТаблицаДат
    |ИНДЕКСИРОВАТЬ ПО
    |   Дата
    |;
    |ВЫБРАТЬ
    |   Время,
    |   СУММА(Память) КАК Память
    |ПОМЕСТИТЬ
    |   Данные
    |ИЗ
	|   (ВЫБРАТЬ
	|	    ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(2015,1,1),СЕКУНДА, ВЫРАЗИТЬ((РАЗНОСТЬДАТ(ДАТАВРЕМЯ(2015,1,1), Время, СЕКУНДА) + 63555667200)/&ПериодАгрегации - 0.5 КАК ЧИСЛО(11,0)) * &ПериодАгрегации - 63555667200) КАК Время,
	|	    Процесс,
	|	    МАКСИМУМ(Память/1024) КАК Память
	|   ИЗ
	|	    РегистрСведений.МониторингПроцессов
	|   ГДЕ
    |	    Время МЕЖДУ &ДатаНачала И &ДатаОкончания
    |       И Кластер В (&Кластеры)
    |       И Сервер В (&Серверы) 
	|   СГРУППИРОВАТЬ ПО
	|	    ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(2015,1,1),СЕКУНДА, ВЫРАЗИТЬ((РАЗНОСТЬДАТ(ДАТАВРЕМЯ(2015,1,1), Время, СЕКУНДА) + 63555667200)/&ПериодАгрегации - 0.5 КАК ЧИСЛО(11,0)) * &ПериодАгрегации - 63555667200),
    |       Процесс
	|   ) КАК Выборка
    |СГРУППИРОВАТЬ ПО
    |   Время
	|;
    |ВЫБРАТЬ
    |   ТаблицаДат.Дата,
    |   Данные.Время,
    |   Данные.Память
    |ИЗ
    |   ТаблицаДат
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   Данные
    |ПО
    |   Данные.Время = ТаблицаДат.Дата
    |УПОРЯДОЧИТЬ ПО
    |   ТаблицаДат.Дата ВОЗР
    |;";
    Запрос.УстановитьПараметр("ДатаНачала", ОпорнаяДата);
    Запрос.УстановитьПараметр("ДатаОкончания", ОпорнаяДата + ((ЧислоТочек-1)*Шаг));
    Запрос.УстановитьПараметр("ПериодАгрегации", Окр(Шаг));
    Запрос.УстановитьПараметр("ТаблицаДат", ТаблицаДат);
    Запрос.УстановитьПараметр("Кластеры", КластерыМассив);
    Запрос.УстановитьПараметр("Серверы", РабочиеСерверыМассив);
            
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Замеры = Новый Массив;
    ТаблицаДляСтатистики = Новый ТаблицаЗначений;
    ТаблицаДляСтатистики.Колонки.Добавить("Замер");
    ПредыдущийЗамер = Неопределено;
    Пока Выборка.Следующий() Цикл
        
        НовСтрока = ТаблицаДляСтатистики.Добавить();
        
        Если Выборка.Память = NULL Тогда
            
            Если ПредыдущийЗамер = Неопределено Тогда
                ПредыдущийЗамер = ПолучитьПредыдущийЗамер(ОпорнаяДата, КластерыМассив, РабочиеСерверыМассив);
            КонецЕсли;
            
            Замеры.Добавить(ПредыдущийЗамер);
            НовСтрока.Замер = ПредыдущийЗамер;        
            
        Иначе
            
            Замеры.Добавить(Выборка.Память);
            ПредыдущийЗамер = Выборка.Память;
            НовСтрока.Замер = Выборка.Память;
            
        КонецЕсли;
        
    КонецЦикла;
    
    АнализДанных = Новый АнализДанных;
    АнализДанных.ТипАнализа = Тип("АнализДанныхОбщаяСтатистика");
	АнализДанных.ИсточникДанных = ТаблицаДляСтатистики;
	РезультатАнализа = АнализДанных.Выполнить();
    
    Статистика.Вставить("Всего", "");
    Статистика.Вставить("Горизонт", ТекущаяДата());
    Статистика.Вставить("Кол", РезультатАнализа.НепрерывныеПоля.Замер.Количество);
    Статистика.Вставить("Макс", РезультатАнализа.НепрерывныеПоля.Замер.Максимум);
    Статистика.Вставить("Мин", РезультатАнализа.НепрерывныеПоля.Замер.Минимум);
    Статистика.Вставить("Сред", РезультатАнализа.НепрерывныеПоля.Замер.Среднее);
    Статистика.Вставить("Сумм", РезультатАнализа.НепрерывныеПоля.Замер.Среднее * РезультатАнализа.НепрерывныеПоля.Замер.Количество);
    Статистика.Вставить("Текущее", Неопределено);
   	
	Возврат Замеры;
	
КонецФункции

Функция ПолучитьДанныеОбнаруженияИнцидентов(ОпорнаяДата, Смещение, АгрегирующаяФункция, ФорматнаяСтрокаЗначения) Экспорт
    
    Статистика = Новый Структура;
    
    ДатаНачала = ОпорнаяДата - Смещение;
	ДатаОкончания = ОпорнаяДата;
    ОбновитьСтатистику(ДатаНачала, ДатаОкончания, Статистика);
    
    Если АгрегирующаяФункция = Перечисления.ФункцииОповещений.Минимум Тогда
		Значение = Статистика.Мин;
	ИначеЕсли АгрегирующаяФункция = Перечисления.ФункцииОповещений.Среднее Тогда
		Значение = Статистика.Сред;
	ИначеЕсли АгрегирующаяФункция = Перечисления.ФункцииОповещений.Максимум Тогда
		Значение = Статистика.Макс;
	ИначеЕсли АгрегирующаяФункция = Перечисления.ФункцииОповещений.Сумма Тогда
		Значение = Статистика.Сумм;
	КонецЕсли;
    
    Данные = Новый Массив;
    Данные.Добавить(Значение);
    Если ЗначениеЗаполнено(ФорматнаяСтрокаЗначения) Тогда
        ИндексНачала = СтрНайти(ФорматнаяСтрокаЗначения, "[");
        ИндексОкончания = СтрНайти(ФорматнаяСтрокаЗначения, "]");
        Если ИндексНачала > 0 И ИндексОкончания > 0 Тогда
            ФорматнаяСтрокаЗначенияБуфер = Сред(ФорматнаяСтрокаЗначения, ИндексНачала + 1, ИндексОкончания - ИндексНачала - 1);
        Иначе
            ФорматнаяСтрокаЗначенияБуфер = ФорматнаяСтрокаЗначения;
        КонецЕсли;
        
        ЗначениеСообщить = СтрЗаменить(ФорматнаяСтрокаЗначения, "[" + ФорматнаяСтрокаЗначенияБуфер + "]", Формат(Значение, ФорматнаяСтрокаЗначенияБуфер));
    Иначе
        ЗначениеСообщить = Значение;
    КонецЕсли;
    
    Сообщить(ЭтотОбъект.Ссылка.Описание + " = " + ЗначениеСообщить);
    
    Возврат Данные;
    
КонецФункции
    
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПредыдущийЗамер(ДатаНачала, Кластеры, РабочиеСерверы)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
	|  МАКСИМУМ(Время) КАК Время
	|ИЗ
	|   РегистрСведений.МониторингПроцессов
	|ГДЕ
    |   Время < &ДатаНачала
    |   И Кластер В (&Кластеры)
    |   И Сервер В (&Серверы)
    |";
    
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("Кластеры", Кластеры);
    Запрос.УстановитьПараметр("Серверы", РабочиеСерверы);
    
    Результат = Запрос.Выполнить();
    
    Если НЕ Результат.Пустой() Тогда
        
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        
        Если Выборка.Время <> NULL Тогда
            
            Запрос.Текст = "
            |ВЫБРАТЬ
            |	СУММА(Память/1024) КАК Память
            |ИЗ
            |   РегистрСведений.МониторингПроцессов
            |ГДЕ
            |   Время = &ДатаНачала
            |   И Кластер В (&Кластеры)
            |   И Сервер В (&Серверы)
            |";
            
            Запрос.УстановитьПараметр("ДатаНачала", Выборка.Время);
            Запрос.УстановитьПараметр("Кластеры", Кластеры);
            Запрос.УстановитьПараметр("Серверы", РабочиеСерверы);
            
            Результат = Запрос.Выполнить();
            Если НЕ Результат.Пустой() Тогда
                
                Выборка = Результат.Выбрать();
                Выборка.Следующий();
                
                Возврат Выборка.Память;
                
            Иначе
                
                Возврат 0;
                
            КонецЕсли;
            
        Иначе
            
            Возврат 0;
            
        КонецЕсли;
        
    Иначе
        
        Возврат 0;
        
    КонецЕсли;
        
КонецФункции

Функция ОбновитьСтатистику(Знач ДатаНачала, Знач ДатаОкончания, Статистика) Экспорт
	
	Запрос = Новый Запрос;
	
	ЗапросТекст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Кластер КАК ОбъектКонтроля,
	|	СРЕДНЕЕ(ВложенныйЗапрос.ТекущееЗначение) КАК Сред,
	|	МАКСИМУМ(ВложенныйЗапрос.ТекущееЗначение) КАК Макс,
	|	МИНИМУМ(ВложенныйЗапрос.ТекущееЗначение) КАК Мин,
	|	КОЛИЧЕСТВО(ВложенныйЗапрос.ТекущееЗначение) КАК Кол,
	|   СУММА(ВложенныйЗапрос.ТекущееЗначение) КАК Сумм
	|ИЗ
	|(ВЫБРАТЬ
	|	СУММА(ОсновнаяТаблицаЗамеров.Память/1024) КАК ТекущееЗначение,
	|	ОсновнаяТаблицаЗамеров.Кластер КАК Кластер
	|ИЗ
	|	РегистрСведений.МониторингПроцессов КАК ОсновнаяТаблицаЗамеров
	|ГДЕ
	|	%УсловиеНаКластер 
	|	ОсновнаяТаблицаЗамеров.Время >= &ДатаНачала
	|	И ОсновнаяТаблицаЗамеров.Время <= &ДатаОкончания
	|	%УсловиеНаСервер
	|	
	|СГРУППИРОВАТЬ ПО
	|	Время, Кластер
	|) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Кластер";
	
	ПараметрыУсловийНаКластер = Новый Массив;
	ПараметрыУсловийНаКластер.Добавить(Новый Структура("ЗаменяемаяСтрока, Префикс, Постфикс", "%УсловиеНаКластер", " ", " И "));
	
	ПараметрыУсловийНаСервер = Новый Массив;
	ПараметрыУсловийНаСервер.Добавить(Новый Структура("ЗаменяемаяСтрока, Префикс, Постфикс", "%УсловиеНаСервер", " И ", ""));
	
	УстановитьФильтрПоОбъектамКонтроля(Запрос, ЗапросТекст, 
		ПараметрыУсловийНаКластер,
		ПараметрыУсловийНаСервер
	);
	
	МониторингСервер.УстановитьПараметрыДатыВЗапросе(Запрос, ДатаНачала, ДатаОкончания);
	
	Запрос.Текст = ЗапросТекст;
    Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
		
	Сред = 0;
	Макс = 0;
	Мин = 0;
    Сумм = 0;
	ОбщееКоличество = 0;
	ПоследнееСреднее = Неопределено;
	Пока Выборка.Следующий() Цикл
		Кол = Выборка.Кол;
		Если Кол > 0 Тогда
			Сред = Сред + Выборка.Сред;
			Макс = Макс + Выборка.Макс;
			Мин = Мин + Выборка.Мин;
            Сумм = Сумм + Выборка.Сумм;
			ПоследнееСреднее = Выборка.Сред;
		КонецЕсли;
		ОбщееКоличество = ОбщееКоличество + Кол;
	КонецЦикла;
	Статистика.Вставить("Сред", Сред);
	Статистика.Вставить("Макс", Макс);
	Статистика.Вставить("Мин", Мин);
    Статистика.Вставить("Сумм", Сумм);
	Статистика.Вставить("Всего", "");
	Статистика.Вставить("Кол", ОбщееКоличество);
	
	// вычислим параметр "Текущее" 
	Попытка
		Если Статистика.Кол > 0 Тогда
			ТекущееЗначение = ПоследнееСреднее;
		Иначе 
			ТекущееЗначение = 0;
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Комментарий =
			"Описание = '" +Инфо.Описание + "', " +
			"ИмяМодуля = '" + Инфо.ИмяМодуля + "', " +
			"НомерСтроки = '" + Инфо.НомерСтроки + "', " +
			"ИсходнаяСтрока = '" + Инфо.ИсходнаяСтрока + "'.";
					
		ЗаписьЖурналаРегистрации(
			"Функция ОбновитьСтатистику(Знач ДатаНачала, Знач ДатаОкончания, Статистика) Экспорт",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ИспользованиеОперативнойПамятиПроцессамиКластера.МодульОбъекта,
			,
			Комментарий);
		
		ТекущееЗначение = 0;
	КонецПопытки;
	Статистика.Вставить("Текущее", ТекущееЗначение);
	
КонецФункции

Функция УстановитьФильтрПоОбъектамКонтроля(
	Запрос, 
	ЗапросТекст,
	ПараметрыУсловийНаКластер,
	ПараметрыУсловийНаСервер
)
	Если ЭтотОбъект.ВсеКластеры Тогда
		УсловиеНаКластер = " ";
		УсловиеНаСервер = " ";
	Иначе
		УсловиеНаКластер = " ОсновнаяТаблицаЗамеров.Кластер = &Кластер ";
		Запрос.УстановитьПараметр("Кластер", ЭтотОбъект.Кластер);
		Если ЭтотОбъект.ВсеСерверы Тогда
			УсловиеНаСервер = " ";
		Иначе
			УсловиеНаБазу = " ОсновнаяТаблицаЗамеров.Сервер = &Сервер ";
			Запрос.УстановитьПараметр("Сервер", ЭтотОбъект.Сервер);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ПараметрУсловий Из ПараметрыУсловийНаКластер Цикл
		ТекущееУсловиеНаКластер = УсловиеНаКластер;
		Префикс = ПараметрУсловий.Префикс;
		Постфикс = ПараметрУсловий.Постфикс;
		Если НЕ ПустаяСтрока(ТекущееУсловиеНаКластер) Тогда
			ТекущееУсловиеНаКластер = Префикс + ТекущееУсловиеНаКластер + Постфикс;
		КонецЕсли;
		ЗапросТекст = СтрЗаменить(ЗапросТекст, ПараметрУсловий.ЗаменяемаяСтрока, ТекущееУсловиеНаКластер);
	КонецЦикла;
	
	Для Каждого ПараметрУсловий Из ПараметрыУсловийНаСервер Цикл
		ТекущееУсловие = УсловиеНаБазу;
		Префикс = ПараметрУсловий.Префикс;
		Постфикс = ПараметрУсловий.Постфикс;
		Если НЕ ПустаяСтрока(ТекущееУсловие) Тогда
			ТекущееУсловие = Префикс + ТекущееУсловие + Постфикс;
		КонецЕсли;
		ЗапросТекст = СтрЗаменить(ЗапросТекст, ПараметрУсловий.ЗаменяемаяСтрока, ТекущееУсловие);
	КонецЦикла;
	
КонецФункции

Функция ИдентификаторВариантаПоказателя() Экспорт
	
	Возврат Строка(Ссылка.УникальныйИдентификатор());
	
КонецФункции

// Возвращает текстовую строку, описывающую тип показателя
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторТипаПоказателя() Экспорт
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Метаданные().РасширенноеПредставлениеОбъекта) Тогда
		Возврат ЭтотОбъект.Метаданные().РасширенноеПредставлениеОбъекта;
	ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.Метаданные().ПредставлениеОбъекта) Тогда
		Возврат ЭтотОбъект.Метаданные().ПредставлениеОбъекта;
	Иначе
		Возврат ЭтотОбъект.Метаданные().Синоним;
	КонецЕсли;
	
КонецФункции

// Заполняет параметры по умолчанию отображения показателя на графике
// 
// Параметры:
//  ПараметрОповещения - Структура - см.МониторингСервер.ПараметрОповещенияПоказательЗаписан()
//
Процедура ЗаполнитьПараметрыОтображенияПоУмолчанию(Знач ПараметрОповещения) Экспорт
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	ПараметрОповещения.Цвет = Новый Цвет(ГСЧ.СлучайноеЧисло(0,255), ГСЧ.СлучайноеЧисло(0,255), ГСЧ.СлучайноеЧисло(0,255));
	ПараметрОповещения.АвтоМасштаб = Истина;
	ПараметрОповещения.Масштаб = 1;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Описание) Тогда
		Описание = Описание();
	КонецЕсли;
	
КонецПроцедуры

Функция Описание()
	
	НаименованиеВСтроку = ИдентификаторТипаПоказателя();
	НастройкиВСтроку = "";
	Если НЕ ВсеКластеры Тогда
		НастройкиВСтроку = НастройкиВСтроку + "кластер " + Кластер;
		Если НЕ ВсеСерверы Тогда
			НастройкиВСтроку = НастройкиВСтроку + ", сервер " + Сервер;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НастройкиВСтроку) Тогда
		НаименованиеВСтроку = НаименованиеВСтроку + " (" + НастройкиВСтроку + ")";
	КонецЕсли;
	
	Возврат НаименованиеВСтроку;
	
КонецФункции

// Расчитывает данные показателя по периодам
//
//	Параметры:
// 		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц. Временные таблицы с периодами и показателями.
// 		Детализация				- ТипДополненияПериодаКомпоновкиДанных. Период детализации.
//
//	Возвращаемое значение:
//		ТаблицаДанных. ТаблицаЗначений. Данные показателя.
//
Функция РасчитатьПоказатель(МенеджерВременныхТаблиц, Детализация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПоказательМониторинга", ЭтотОбъект.Владелец);
	Запрос.УстановитьПараметр("Показатель", ЭтотОбъект.Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаПодготовительная.ДатаТочки КАК ДатаТочки,
	|	МАКСИМУМ(ОсновнаяТаблицаЗамеров.Память / 1024) КАК Максимальное,
	|	МИНИМУМ(ОсновнаяТаблицаЗамеров.Память / 1024) КАК Минимальное,
	|	СУММА(ОсновнаяТаблицаЗамеров.Память / 1024) КАК Значение
	|
	|ИЗ
	|	ТаблицаПодготовительная КАК ТаблицаПодготовительная
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МониторингПроцессов КАК ОсновнаяТаблицаЗамеров
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИспользованиеОперативнойПамятиПроцессамиКластера КАК ИспользованиеОперативнойПамятиПроцессамиКластера
	|		ПО (ОсновнаяТаблицаЗамеров.Кластер = ИспользованиеОперативнойПамятиПроцессамиКластера.Кластер ИЛИ ИспользованиеОперативнойПамятиПроцессамиКластера.ВсеКластеры)
	|		И (ОсновнаяТаблицаЗамеров.Кластер = ИспользованиеОперативнойПамятиПроцессамиКластера.Сервер ИЛИ ИспользованиеОперативнойПамятиПроцессамиКластера.ВсеСерверы)
	|		И ИспользованиеОперативнойПамятиПроцессамиКластера.Ссылка = &Показатель
	|
	|	ПО ТаблицаПодготовительная.ПоказательМониторинга = &ПоказательМониторинга
	|	И ОсновнаяТаблицаЗамеров.Время > ТаблицаПодготовительная.ДатаТочкиДанные
	|	И ОсновнаяТаблицаЗамеров.Время <= ТаблицаПодготовительная.ДатаТочкиДанныеСледующая
	|
	|ГДЕ
	|	ТаблицаПодготовительная.ПоказательМониторинга = &ПоказательМониторинга
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПодготовительная.ДатаТочки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаТочки
	|";
	
	ТаблицаДетальныхДанных = Запрос.Выполнить().Выгрузить();
	
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Значение");
	
	Если ЭтотОбъект.Владелец.ПоказыватьТренд Тогда
		РасчетИтоговПоказателей.СгладитьДанные(ТаблицаДетальныхДанных, ЭтотОбъект.Владелец.ТипСглаживания, ЭтотОбъект.Владелец.КоличествоУсредняемыхЗначений);
	КонецЕсли;
	
	РасчетИтоговПоказателей.ЗаполнитьПустыеДанныеПредыдущимиЗначениями(ТаблицаДетальныхДанных, МассивПолей, Null);
	
	Возврат ТаблицаДетальныхДанных;
	
КонецФункции

#КонецОбласти

#КонецЕсли
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПрограммныйИнтерфейс

Функция ВыполнитьАктивныеОбнаружения() Экспорт
    
    Замер = ВнутренниеЗамеры.НачатьЗамер("ВыполнитьАктивныеОбнаружения");
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка КАК Обнаружение,
    |   АгрегированиеДанныхИнтервал КАК АгрегированиеДанныхИнтервал,
    |   АгрегированиеДанныхВремя КАК АгрегированиеДанныхВремя
    |ИЗ
    |   Справочник.ОбнаружениеИнцидентовОперативное
    |ГДЕ
    |   Активно
    |   И НЕ ПометкаУдаления
    |";
    
    Результат = Запрос.Выполнить();
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        ВыполнитьОбнаружение(Выборка.Обнаружение, Выборка.АгрегированиеДанныхИнтервал, Выборка.АгрегированиеДанныхВремя);
    КонецЦикла;
    
    ВнутренниеЗамеры.ЗавершитьЗамер(Замер);
    
КонецФункции

Функция ВыполнитьОбнаружение(Обнаружение, Интервал, Время) Экспорт
    
    Замер = ВнутренниеЗамеры.НачатьЗамер("ВыполнитьАктивноеОбнаружение");
    
    Если Обнаружение.ТипПоказателя = Перечисления.ТипыПоказателей.Счетчики Тогда
        ЗначенияОбнаружения = ВыполнитьСейчасНаСервереСчетчики(Обнаружение, Интервал, Время);
    ИначеЕсли Обнаружение.ТипПоказателя = Перечисления.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами Тогда
        ЗначенияОбнаружения = ВыполнитьСейчасНаСервереИспользованиеОперативнойПамятиПроцессами(Обнаружение, Интервал, Время);
    ИначеЕсли Обнаружение.ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов Тогда
        ЗначенияОбнаружения = ВыполнитьСейчасНаСервереЧислоАварийноЗавершенныхПроцессов(Обнаружение, Интервал, Время);
    ИначеЕсли Обнаружение.ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоСеансов Тогда
        ЗначенияОбнаружения = ВыполнитьСейчасНаСервереЧислоСеансов(Обнаружение, Интервал, Время);    
    КонецЕсли;
    
    ИнцидентыСервер.ОбработатьЗначенияОперативногоОбнаружения(Обнаружение, ЗначенияОбнаружения);
    
    Сообщения = Новый Массив;
    
    Для Каждого ТекЗначение Из ЗначенияОбнаружения Цикл
        
        Сообщения.Добавить(Строка(ТекЗначение.ТипОбнаружения) + ": " + ТекЗначение.ПодробноеСообщение);
        
    КонецЦикла;
    
    ДопПараметры = Новый Соответствие;
    ДопПараметры.Вставить("Объект ЦКК", Обнаружение.Наименование);
    ВнутренниеЗамеры.ЗавершитьЗамер(Замер, ДопПараметры);
    
    Возврат Сообщения;
    
КонецФункции

// Функция - Получить значения
//
// Параметры:
//  Ссылка     -  СправочникСсылка.ОбнаружениеИнцидента   - обнаружение инцидента, по которому необходимо получить значения
// 
// Возвращаемое значение:
//  Результат - ТаблицаЗначений 
//
Функция ПолучитьЗначения(Ссылка, ДатаНачала, ДатаОкончания) Экспорт
    
    Если Ссылка.ТипПоказателя = Перечисления.ТипыПоказателей.Счетчики Тогда
        Возврат ПолучитьЗначенияСчетчики(Ссылка, ДатаНачала, ДатаОкончания);
    ИначеЕсли Ссылка.ТипПоказателя = Перечисления.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами Тогда
        Возврат ПолучитьЗначенияИспользованиеОперативнойПамятиПроцессами(Ссылка, ДатаНачала, ДатаОкончания);
    ИначеЕсли Ссылка.ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов Тогда
        Возврат ПолучитьЗначенияЧислоАварийноЗавершенныхПроцессов(Ссылка, ДатаНачала, ДатаОкончания);
    ИначеЕсли Ссылка.ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоСеансов Тогда
        Возврат ПолучитьЗначенияЧислоСеансов(Ссылка, ДатаНачала, ДатаОкончания);
    КонецЕсли;    
        
КонецФункции

Функция ПолучитьДанныеОтбора(ТипПоказателя, НастройкиОтбора, ДопПараметры) Экспорт
    
    Если ТипПоказателя = Перечисления.ТипыПоказателей.Счетчики Тогда
        ТекстЗапроса = "
        |ВЫБРАТЬ
        |   Ссылка,
        |   ПолныйКодДляПоиска КАК НаименованиеСчетчика,
        |   ПометкаУдаления КАК ПометкаУдаления
        |Из
        |   Справочник.ГруппыСчетчиков
        |";
    ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами Тогда
        
        Если ДопПараметры.ВариантТипаПоказателя = 0 Тогда
            
            ТекстЗапроса = "
            |ВЫБРАТЬ
            |   Кластеры1С.Ссылка КАК Кластер,   
            |   Кластеры1С.Наименование КАК НаименованиеКластера,
            |   Кластеры1С.ПометкаУдаления КАК ПометкаУдаления
            |ИЗ
            |   Справочник.ОбъектыКонтроля КАК Кластеры1С
            |ГДЕ
            |   Кластеры1С.Владелец = &Кластер1С
            |";
            
        ИначеЕсли ДопПараметры.ВариантТипаПоказателя = 1 ИЛИ ДопПараметры.ВариантТипаПоказателя = 2 Тогда
            
            ТекстЗапроса = "
            |ВЫБРАТЬ
            |   Кластеры1С.Ссылка КАК Кластер,
            |   РабочиеСерверы1С.Ссылка КАК РабочийСервер,
            |   Кластеры1С.Наименование КАК НаименованиеКластера,
            |   Кластеры1С.ПометкаУдаления КАК ПометкаУдаленияКластера,
            |   РабочиеСерверы1С.Наименование КАК НаименованиеРабочегоСервера,
            |   РабочиеСерверы1С.ПометкаУдаления КАК ПометкаУдаленияРабочегоСервера
            |ИЗ
            |   Справочник.ОбъектыКонтроля КАК Кластеры1С
            |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |   РегистрСведений.ПараметрыРабочихСерверов КАК РабочиеСерверыПараметры
            |ПО
            |   РабочиеСерверыПараметры.Кластер = Кластеры1С.Ссылка
            |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |   Справочник.ОбъектыКонтроля КАК РабочиеСерверы1С
            |ПО
            |   РабочиеСерверы1С.Ссылка = РабочиеСерверыПараметры.ОбъектКонтроля
            |ГДЕ
            |   Кластеры1С.Владелец = &Кластер1С
            |";
            
        КонецЕсли;
    ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов Тогда
        
        ТекстЗапроса = "
        |ВЫБРАТЬ
        |   РабочиеСерверы.Ссылка,
        |   РабочиеСерверы.Наименование КАК НаименованиеРабочегоСервера,
        |   РабочиеСерверы.ПометкаУдаления
        |ИЗ
        |   Справочник.ОбъектыКонтроля КАК РабочиеСерверы
        |ГДЕ
        |   РабочиеСерверы.Владелец = &РабочийСервер1С
        |";
        
    ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоСеансов Тогда
        
        Если ДопПараметры.ВариантТипаПоказателя = 0 Тогда
            
            ТекстЗапроса = "
            |ВЫБРАТЬ
            |   Кластеры1С.Ссылка КАК Кластер,   
            |   Кластеры1С.Наименование КАК НаименованиеКластера,
            |   Кластеры1С.ПометкаУдаления КАК ПометкаУдаления
            |ИЗ
            |   Справочник.ОбъектыКонтроля КАК Кластеры1С
            |ГДЕ
            |   Кластеры1С.Владелец = &Кластер1С
            |";
            
        ИначеЕсли ДопПараметры.ВариантТипаПоказателя = 1 Тогда
            
            ТекстЗапроса = "
            |ВЫБРАТЬ
            |   Кластеры1С.Ссылка КАК Кластер,
            |   ИнформационныеБазы1С.Ссылка КАК ИнформационнаяБаза,
            |   Кластеры1С.Наименование КАК НаименованиеКластера,
            |   Кластеры1С.ПометкаУдаления КАК ПометкаУдаленияКластера,
            |   ИнформационныеБазы1С.Наименование КАК НаименованиеИнформационнойБазы,
            |   ИнформационныеБазы1С.ПометкаУдаления КАК ПометкаУдаленияИнформационнойБазы
            |ИЗ
            |   Справочник.ОбъектыКонтроля КАК Кластеры1С
            |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |   РегистрСведений.ПараметрыИнформационныхБаз КАК ИнформационныеБазыПараметры
            |ПО
            |   ИнформационныеБазыПараметры.Кластер = Кластеры1С.Ссылка
            |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |   Справочник.ОбъектыКонтроля КАК ИнформационныеБазы1С
            |ПО
            |   ИнформационныеБазы1С.Ссылка = ИнформационныеБазыПараметры.ОбъектКонтроля
            |ГДЕ
            |   Кластеры1С.Владелец = &Кластер1С
            |";
            
        ИначеЕсли ДопПараметры.ВариантТипаПоказателя = 2 Тогда
            
            ТекстЗапроса = "
            |ВЫБРАТЬ
            |   Кластеры1С.Ссылка КАК Кластер,
            |   ИнформационныеБазы1С.Ссылка КАК ИнформационнаяБаза,
            |   ВидыПриложений.Ссылка КАК ВидПриложения,
            |   Кластеры1С.Наименование КАК НаименованиеКластера,
            |   Кластеры1С.ПометкаУдаления КАК ПометкаУдаленияКластера,
            |   ИнформационныеБазы1С.Наименование КАК НаименованиеИнформационнойБазы,
            |   ИнформационныеБазы1С.ПометкаУдаления КАК ПометкаУдаленияИнформационнойБазы
            |ИЗ
            |   Справочник.ОбъектыКонтроля КАК Кластеры1С
            |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |   РегистрСведений.ПараметрыИнформационныхБаз КАК ИнформационныеБазыПараметры
            |ПО
            |   ИнформационныеБазыПараметры.Кластер = Кластеры1С.Ссылка
            |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            |   Справочник.ОбъектыКонтроля КАК ИнформационныеБазы1С
            |ПО
            |   ИнформационныеБазы1С.Ссылка = ИнформационныеБазыПараметры.ОбъектКонтроля
            |ЛЕВОЕ СОЕДИНЕНИЕ
            |   Перечисление.ВидыПриложений КАК ВидыПриложений
            |ПО
            |   НЕ ВидыПриложений.Ссылка IS NULL
            |ГДЕ
            |   Кластеры1С.Владелец = &Кластер1С
            |";
            
        КонецЕсли;
               
    КонецЕсли;
    
    Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
    СКД = Новый СхемаКомпоновкиДанных();
    
    ИсточникСКД = СКД.ИсточникиДанных.Добавить();
    ИсточникСКД.Имя = "ИсточникДанных1";
    ИсточникСКД.ТипИсточникаДанных = "local";
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанных.Запрос = ТекстЗапроса; 
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    УдалитьИзВременногоХранилища(URLСхемы);
        
    Поток = Новый ЧтениеXML();
    Поток.УстановитьСтроку(НастройкиОтбора);
    Компоновщик.ЗагрузитьНастройки(СериализаторXDTO.ПрочитатьXML(Поток));
    Поток.Закрыть();
    
    Если ТипПоказателя = Перечисления.ТипыПоказателей.Счетчики Тогда
        
        ГруппировкаНастроек = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
        
        Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле.Использование = Истина;
        ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
        
    ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами Тогда
        
        ПараметрКластер1С = Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти("Кластер1С");
        ПараметрКластер1С.Использование = Истина;
        ПараметрКластер1С.Значение = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С;
        
        ГруппировкаНастроек = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
        
        Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле.Использование = Истина;
        ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Кластер");
        
        Если ДопПараметры.ВариантТипаПоказателя = 1 ИЛИ ДопПараметры.ВариантТипаПоказателя = 2 Тогда
            
            Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
            ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
            ВыбранноеПоле.Использование = Истина;
            ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("РабочийСервер");
            
        КонецЕсли;
        
    ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов Тогда
        
        ПараметрРабочийСервер1С = Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти("РабочийСервер1С");
        ПараметрРабочийСервер1С.Использование = Истина;
        ПараметрРабочийСервер1С.Значение = Справочники.ВидыОбъектовКонтроля.РабочийСервер;
        
        ГруппировкаНастроек = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
        
        Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле.Использование = Истина;
        ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
        
    ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоСеансов Тогда
        
        ПараметрКластер1С = Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти("Кластер1С");
        ПараметрКластер1С.Использование = Истина;
        ПараметрКластер1С.Значение = Справочники.ВидыОбъектовКонтроля.КластерСерверов1С;        
        
        ГруппировкаНастроек = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
        
        Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
        ВыбранноеПоле.Использование = Истина;
        ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Кластер");
        
        Если ДопПараметры.ВариантТипаПоказателя = 1 ИЛИ ДопПараметры.ВариантТипаПоказателя = 2 Тогда
            
            Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
            ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
            ВыбранноеПоле.Использование = Истина;
            ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ИнформационнаяБаза");
            
            Если ДопПараметры.ВариантТипаПоказателя = 2 Тогда
                
                Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
                ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
                ВыбранноеПоле.Использование = Истина;
                ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ВидПриложения");
            
            КонецЕсли;
                    
        КонецЕсли;
                
    КонецЕсли;
    
    Возврат ПолучитьДанныеКомпоновщика(Компоновщик, СКД);
   
КонецФункции

Функция ПолучитьДанныеКомпоновщика(Компоновщик, СКД, ПроверятьОтбор = Истина) Экспорт
    
    ТЗн = Новый ТаблицаЗначений;
    
    Если ПроверятьОтбор И НЕ Компоновщик.Настройки.НаличиеОтбораУЭлемента(Компоновщик.Настройки) Тогда 
        Возврат ТЗн;
    КонецЕсли;
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
    СКД, 
    Компоновщик.Настройки,,,
    Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
    );
    
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
    ПроцессорВывода.УстановитьОбъект(ТЗн);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
    
    Возврат ТЗн;
    
КонецФункции

Процедура ВыполнитьАвтоДобавлениеПоказателей() Экспорт
    
    ОбнаруженияСАвтодобавлением = ОбнаруженияСАвтодобавлением();
    
    Выборка = ОбнаруженияСАвтодобавлением.Выбрать();
    Пока Выборка.Следующий() Цикл
        ВыполнитьАвтодобавление(Выборка.ОбнаружениеОперативное);
    КонецЦикла;
        
КонецПроцедуры

Процедура ДобавитьДанныеАвтодобавления(Объект, ТЗнНовые) Экспорт
    
    Если Объект.ТипПоказателя = Перечисления.ТипыПоказателей.Счетчики Тогда
        ОбновитьСчетчики(Объект, ТЗнНовые);
    ИначеЕсли Объект.ТипПоказателя = Перечисления.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами Тогда
        ОбновитьИспользованиеОперативнойПамятиПроцессами(Объект, ТЗнНовые);
    ИначеЕсли Объект.ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов Тогда
        ОбновитьЧислоАварийноЗавершенныхПроцессов(Объект, ТЗнНовые);
    ИначеЕсли Объект.ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоСеансов Тогда
        ОбновитьЧислоСеансов(Объект, ТЗнНовые);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьАвтодобавление(Ссылка) Экспорт
    
    ДопПараметры = Неопределено;
    Если Ссылка.ТипПоказателя = Перечисления.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами Тогда
        ДопПараметры = Новый Структура("ВариантТипаПоказателя", Ссылка.ВариантТипаПоказателя);
    ИначеЕсли Ссылка.ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоСеансов Тогда
        ДопПараметры = Новый Структура("ВариантТипаПоказателя", Ссылка.ВариантТипаПоказателя);
    КонецЕсли;
    
    ТЗнНовые = ПолучитьДанныеОтбора(Ссылка.ТипПоказателя, Ссылка.НастройкиОтбора, ДопПараметры);
    Объект = Ссылка.ПолучитьОбъект();
    ДобавитьДанныеАвтодобавления(Объект, ТЗнНовые);
    Объект.Записать();
    
КонецПроцедуры

Процедура ОбновитьСчетчики(Объект, ТЗнНовые)
    
    ТЗнСчетчики = Объект.Счетчики.Выгрузить(,"Счетчик");
    ТЗнСчетчики.Индексы.Добавить("Счетчик");
    
    ДобавитьЭлементы = Новый Массив;
    Для Каждого ТекНовый Из ТЗнНовые Цикл
        
        Если ТЗнСчетчики.Найти(ТекНовый.Ссылка) = Неопределено Тогда
            ДобавитьЭлементы.Добавить(ТекНовый.Ссылка);
        КонецЕсли;
        
    КонецЦикла;
    
    Для Каждого ТекНовый Из ДобавитьЭлементы Цикл
        
        НоваяСтрока = Объект.Счетчики.Добавить();
        НоваяСтрока.Счетчик = ТекНовый;
        Если ЗначениеЗаполнено(Объект.РегулярноеВыражениеПоиска) И ЗначениеЗаполнено(Объект.РегулярноеВыражениеЗамены) Тогда
            НоваяСтрока.Описание = РегулярныеВыраженияКлиентСервер.ЗаменитьПоШаблонуПоиска(Строка(НоваяСтрока.Счетчик), Объект.РегулярноеВыражениеПоиска, Объект.РегулярноеВыражениеЗамены);
        Иначе
            НоваяСтрока.Описание = Строка(НоваяСтрока.Счетчик);
        КонецЕсли;
        НоваяСтрока.УникальныйИдентификаторСтроки = Новый УникальныйИдентификатор;
        НоваяСтрока.ФорматнаяСтрокаЗначения = Объект.ФорматнаяСтрокаЗначенияПоУмолчанию;
        
        Для Каждого ТекСтрока Из Объект.ПараметрыОбнаруженияПоУмолчанию Цикл
            
            НовСтрокаПараметры = Объект.ПараметрыОбнаружения.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрокаПараметры, ТекСтрока);
            
            НовСтрокаПараметры.УникальныйИдентификаторСтроки = НоваяСтрока.УникальныйИдентификаторСтроки;
            
        КонецЦикла;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ОбновитьИспользованиеОперативнойПамятиПроцессами(Объект, ТЗнНовые)
    
    Если Объект.ВариантТипаПоказателя = 0 Тогда
        ТЗнИспользованиеОперативнойПамятиПроцессами = Объект.ИспользованиеОперативнойПамятиПроцессами.Выгрузить(,"Кластер1С");
        ТЗнИспользованиеОперативнойПамятиПроцессами.Индексы.Добавить("Кластер1С");
    ИначеЕсли Объект.ВариантТипаПоказателя = 1 ИЛИ Объект.ВариантТипаПоказателя = 2 Тогда
        ТЗнИспользованиеОперативнойПамятиПроцессами = Объект.ИспользованиеОперативнойПамятиПроцессами.Выгрузить(,"Кластер1С, РабочийСервер1С");
        ТЗнИспользованиеОперативнойПамятиПроцессами.Индексы.Добавить("Кластер1С, РабочийСервер1С");
    КонецЕсли;
        
    ДобавитьЭлементы = Новый Массив;
    Для Каждого ТекНовый Из ТЗнНовые Цикл
        
        Если Объект.ВариантТипаПоказателя = 0 Тогда
            ПараметрыОтбора = Новый Структура("Кластер1С", ТекНовый.Кластер);
        ИначеЕсли Объект.ВариантТипаПоказателя = 1 ИЛИ Объект.ВариантТипаПоказателя = 2 Тогда
            ПараметрыОтбора = Новый Структура("Кластер1С, РабочийСервер1С", ТекНовый.Кластер, ТекНовый.РабочийСервер);
        КонецЕсли;
        
        Если ТЗнИспользованиеОперативнойПамятиПроцессами.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
            Если Объект.ВариантТипаПоказателя = 0 Тогда
                ДобавитьЭлементы.Добавить(Новый Структура("Кластер1С", ТекНовый.Кластер));
            ИначеЕсли Объект.ВариантТипаПоказателя = 1 ИЛИ Объект.ВариантТипаПоказателя = 2 Тогда
                ДобавитьЭлементы.Добавить(Новый Структура("Кластер1С, РабочийСервер1С", ТекНовый.Кластер, ТекНовый.РабочийСервер));
            КонецЕсли;
        КонецЕсли;
        
    КонецЦикла;
    
    Для Каждого ТекНовый Из ДобавитьЭлементы Цикл
        
        НоваяСтрока = Объект.ИспользованиеОперативнойПамятиПроцессами.Добавить();
        НоваяСтрока.Кластер1С = ТекНовый.Кластер1С;
        Описание = Строка(ТекНовый.Кластер1С);
        Если Объект.ВариантТипаПоказателя = 1 ИЛИ Объект.ВариантТипаПоказателя = 2 Тогда
            НоваяСтрока.РабочийСервер1С = ТекНовый.РабочийСервер1С;
            Описание = Строка(ТекНовый.Кластер1С) + "\" + Строка(ТекНовый.РабочийСервер1С);
        КонецЕсли;
        
        Если ЗначениеЗаполнено(Объект.РегулярноеВыражениеПоиска) И ЗначениеЗаполнено(Объект.РегулярноеВыражениеЗамены) Тогда
            НоваяСтрока.Описание = РегулярныеВыраженияКлиентСервер.ЗаменитьПоШаблонуПоиска(Описание, Объект.РегулярноеВыражениеПоиска, Объект.РегулярноеВыражениеЗамены);
        Иначе
            НоваяСтрока.Описание = Описание;
        КонецЕсли;
        
        НоваяСтрока.УникальныйИдентификаторСтроки = Новый УникальныйИдентификатор;
        НоваяСтрока.ФорматнаяСтрокаЗначения = Объект.ФорматнаяСтрокаЗначенияПоУмолчанию;
        
        Для Каждого ТекСтрока Из Объект.ПараметрыОбнаруженияПоУмолчанию Цикл
            
            НовСтрокаПараметры = Объект.ПараметрыОбнаружения.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрокаПараметры, ТекСтрока);
            
            НовСтрокаПараметры.УникальныйИдентификаторСтроки = НоваяСтрока.УникальныйИдентификаторСтроки;
            
        КонецЦикла;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ОбновитьЧислоАварийноЗавершенныхПроцессов(Объект, ТЗнНовые)
    
    ТЗнЧислоАварийноЗавершенныхПроцессов = Объект.ЧислоАварийноЗавершенныхПроцессов.Выгрузить(,"РабочийСервер");
    ТЗнЧислоАварийноЗавершенныхПроцессов.Индексы.Добавить("РабочийСервер");
    
    ДобавитьЭлементы = Новый Массив;
    Для Каждого ТекНовый Из ТЗнНовые Цикл
        
        Если ТЗнЧислоАварийноЗавершенныхПроцессов.Найти(ТекНовый.Ссылка) = Неопределено Тогда
            ДобавитьЭлементы.Добавить(ТекНовый.Ссылка);
        КонецЕсли;
        
    КонецЦикла;
    
    Для Каждого ТекНовый Из ДобавитьЭлементы Цикл
        
        НоваяСтрока = Объект.ЧислоАварийноЗавершенныхПроцессов.Добавить();
        НоваяСтрока.РабочийСервер = ТекНовый;
        Если ЗначениеЗаполнено(Объект.РегулярноеВыражениеПоиска) И ЗначениеЗаполнено(Объект.РегулярноеВыражениеЗамены) Тогда
            НоваяСтрока.Описание = РегулярныеВыраженияКлиентСервер.ЗаменитьПоШаблонуПоиска(Строка(НоваяСтрока.РабочийСервер), Объект.РегулярноеВыражениеПоиска, Объект.РегулярноеВыражениеЗамены);
        Иначе
            НоваяСтрока.Описание = Строка(НоваяСтрока.РабочийСервер);
        КонецЕсли;
        НоваяСтрока.УникальныйИдентификаторСтроки = Новый УникальныйИдентификатор;
        НоваяСтрока.ФорматнаяСтрокаЗначения = Объект.ФорматнаяСтрокаЗначенияПоУмолчанию;
        
        Для Каждого ТекСтрока Из Объект.ПараметрыОбнаруженияПоУмолчанию Цикл
            
            НовСтрокаПараметры = Объект.ПараметрыОбнаружения.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрокаПараметры, ТекСтрока);
            
            НовСтрокаПараметры.УникальныйИдентификаторСтроки = НоваяСтрока.УникальныйИдентификаторСтроки;
            
        КонецЦикла;
        
    КонецЦикла;
    
    
КонецПроцедуры

Процедура ОбновитьЧислоСеансов(Объект, ТЗнНовые)
    
    Если Объект.ВариантТипаПоказателя = 0 Тогда
        ТЗнЧислоСеансов = Объект.ЧислоСеансов.Выгрузить(,"Кластер");
        ТЗнЧислоСеансов.Индексы.Добавить("Кластер");
    ИначеЕсли Объект.ВариантТипаПоказателя = 1 Тогда
        ТЗнЧислоСеансов = Объект.ЧислоСеансов.Выгрузить(,"Кластер, ИнформационнаяБаза");
        ТЗнЧислоСеансов.Индексы.Добавить("Кластер, ИнформационнаяБаза");
    ИначеЕсли Объект.ВариантТипаПоказателя = 2 Тогда
        ТЗнЧислоСеансов = Объект.ЧислоСеансов.Выгрузить(,"Кластер, ИнформационнаяБаза, ВидПриложения");
        ТЗнЧислоСеансов.Индексы.Добавить("Кластер, ИнформационнаяБаза, ВидПриложения");
    КонецЕсли;
        
    ДобавитьЭлементы = Новый Массив;
    Для Каждого ТекНовый Из ТЗнНовые Цикл
        
        Если Объект.ВариантТипаПоказателя = 0 Тогда
            ПараметрыОтбора = Новый Структура("Кластер", ТекНовый.Кластер);
        ИначеЕсли Объект.ВариантТипаПоказателя = 1 Тогда
            ПараметрыОтбора = Новый Структура("Кластер, ИнформационнаяБаза", ТекНовый.Кластер, ТекНовый.ИнформационнаяБаза);
        ИначеЕсли Объект.ВариантТипаПоказателя = 2 Тогда
            ПараметрыОтбора = Новый Структура("Кластер, ИнформационнаяБаза", ТекНовый.Кластер, ТекНовый.ИнформационнаяБаза, ТекНовый.ВидПриложения);
        КонецЕсли;
        
        Если ТЗнЧислоСеансов.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
            Если Объект.ВариантТипаПоказателя = 0 Тогда
                ДобавитьЭлементы.Добавить(Новый Структура("Кластер", ТекНовый.Кластер));
            ИначеЕсли Объект.ВариантТипаПоказателя = 1 Тогда
                ДобавитьЭлементы.Добавить(Новый Структура("Кластер, ИнформационнаяБаза", ТекНовый.Кластер, ТекНовый.ИнформационнаяБаза));
            ИначеЕсли  Объект.ВариантТипаПоказателя = 2 Тогда
                ДобавитьЭлементы.Добавить(Новый Структура("Кластер, ИнформационнаяБаза, ВидПриложения", ТекНовый.Кластер, ТекНовый.ИнформационнаяБаза, ТекНовый.ВидПриложения));
            КонецЕсли;
        КонецЕсли;
        
    КонецЦикла;
    
    Для Каждого ТекНовый Из ДобавитьЭлементы Цикл
        
        НоваяСтрока = Объект.ЧислоСеансов.Добавить();
        НоваяСтрока.Кластер = ТекНовый.Кластер;
        Описание = Строка(ТекНовый.Кластер);
        
        Если Объект.ВариантТипаПоказателя = 1 Тогда
            НоваяСтрока.ИнформационнаяБаза = ТекНовый.ИнформационнаяБаза;
            Описание = Строка(ТекНовый.Кластер) + "\" + Строка(ТекНовый.ИнформационнаяБаза);
        ИначеЕсли Объект.ВариантТипаПоказателя = 2 Тогда
            НоваяСтрока.ИнформационнаяБаза = ТекНовый.ИнформационнаяБаза;
            НоваяСтрока.ВидПриложения = ТекНовый.ВидПриложения;
            Описание = Строка(ТекНовый.Кластер) + "\" + Строка(ТекНовый.ИнформационнаяБаза) + "\" + Строка(ТекНовый.ВидПриложения);
        КонецЕсли;
        
        Если ЗначениеЗаполнено(Объект.РегулярноеВыражениеПоиска) И ЗначениеЗаполнено(Объект.РегулярноеВыражениеЗамены) Тогда
            НоваяСтрока.Описание = РегулярныеВыраженияКлиентСервер.ЗаменитьПоШаблонуПоиска(Описание, Объект.РегулярноеВыражениеПоиска, Объект.РегулярноеВыражениеЗамены);
        Иначе
            НоваяСтрока.Описание = Описание;
        КонецЕсли;
        
        НоваяСтрока.УникальныйИдентификаторСтроки = Новый УникальныйИдентификатор;
        НоваяСтрока.ФорматнаяСтрокаЗначения = Объект.ФорматнаяСтрокаЗначенияПоУмолчанию;
        
        Для Каждого ТекСтрока Из Объект.ПараметрыОбнаруженияПоУмолчанию Цикл
            
            НовСтрокаПараметры = Объект.ПараметрыОбнаружения.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрокаПараметры, ТекСтрока);
            
            НовСтрокаПараметры.УникальныйИдентификаторСтроки = НоваяСтрока.УникальныйИдентификаторСтроки;
            
        КонецЦикла;
        
    КонецЦикла;
    
КонецПроцедуры

Функция ПолучитьЗначенияСчетчики(Ссылка, ДатаНачала, ДатаОкончания)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |	ОсновнаяТаблица.НомерСтроки КАК ОсновнаяТаблицаНомерСтроки,
    |   ОсновнаяТаблица.Счетчик,
    |	ОсновнаяТаблица.Описание КАК СтрокаПодключения,
    |   ВЫРАЗИТЬ("""" КАК СТРОКА(1024)) КАК ПодробноеСообщение,
    |   ОсновнаяТаблица.ХешИнцидента КАК ХешИнцидента,
    |	Параметры.НомерСтроки КАК ПараметрыНомерСтроки,
    |	Параметры.УсловиеСрабатывания КАК УсловиеСрабатывания,
    |	Параметры.ЗначениеСрабатывания КАК ЗначениеСрабатывания,
    |	Параметры.ТипОбнаружения КАК ТипОбнаружения,
    |	Параметры.УровеньИнцидента КАК УровеньИнцидента,
    |	Данные.Событие,
    |   {АгрегированиеДанных} КАК Значение,
    |   ОсновнаяТаблица.ФорматнаяСтрокаЗначения,
    |   ОсновнаяТаблица.Счетчик КАК ИсточникИнцидента
    |ИЗ
    |	Справочник.ОбнаружениеИнцидентовОперативное.Счетчики КАК ОсновнаяТаблица
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |	Справочник.ОбнаружениеИнцидентовОперативное.ПараметрыОбнаружения КАК Параметры
    |ПО
    |	Параметры.Ссылка = ОсновнаяТаблица.Ссылка
    |	И Параметры.УникальныйИдентификаторСтроки = ОсновнаяТаблица.УникальныйИдентификаторСтроки
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |	РегистрСведений.СтатистикаНеделя КАК Данные
    |ПО
    |	Данные.Событие = ОсновнаяТаблица.Счетчик
    |	И Данные.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
    |ГДЕ
    |	ОсновнаяТаблица.Ссылка = &Ссылка
    |СГРУППИРОВАТЬ ПО
    |	ОсновнаяТаблица.НомерСтроки,
    |   ОсновнаяТаблица.Счетчик,
    |	ОсновнаяТаблица.Описание,
    |	ОсновнаяТаблица.ХешИнцидента,
    |	Параметры.НомерСтроки,
    |	Параметры.УсловиеСрабатывания,
    |	Параметры.ЗначениеСрабатывания,
    |	Параметры.ТипОбнаружения,
    |	Параметры.УровеньИнцидента,
    |	Данные.Событие,
    |   ОсновнаяТаблица.ФорматнаяСтрокаЗначения
    |УПОРЯДОЧИТЬ ПО
    |	ОсновнаяТаблица.НомерСтроки,
    |	Параметры.НомерСтроки
    |ИТОГИ
    |   МАКСИМУМ(Значение),
    |   МАКСИМУМ(ХешИнцидента),
    |   МАКСИМУМ(СтрокаПодключения),
    |   МАКСИМУМ(ФорматнаяСтрокаЗначения)
    |ПО
    |   Счетчик
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
    
    Если Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Среднее Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{АгрегированиеДанных}", "ВЫБОР
        |   КОГДА СУММА(Данные.ЧислоСрабатываний) = 0 ТОГДА 0
        |   ИНАЧЕ СУММА(Данные.СреднееЗначение * Данные.ЧислоСрабатываний)/СУММА(Данные.ЧислоСрабатываний)
        |КОНЕЦ");
    ИначеЕсли Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Максимум Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{АгрегированиеДанных}", "МАКСИМУМ(Данные.МаксимальноеЗначение)");
    ИначеЕсли Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Минимум Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{АгрегированиеДанных}", "МИНИМУМ(Данные.МинимальноеЗначение)");
    ИначеЕсли Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Количество Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{АгрегированиеДанных}", "СУММА(Данные.ЧислоСрабатываний)");
    ИначеЕсли Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Сумма Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{АгрегированиеДанных}", "СУММА(Данные.СреднееЗначение * Данные.ЧислоСрабатываний)");
    КонецЕсли;
    
    Результат = Запрос.Выполнить();
    
    Значения = Новый Соответствие;
    
    ТаблицаЗначенийОбнаружения = ТаблицаЗначенийОбнаружения();
    
    Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    Пока Выборка.Следующий() Цикл
        
        ВыборкаЗначений = Выборка.Выбрать();
        Пока ВыборкаЗначений.Следующий() Цикл
            Если Значения[ВыборкаЗначений.Счетчик] = Неопределено Тогда
                Если ПолучитьСрабатывание(ВыборкаЗначений, ТаблицаЗначенийОбнаружения, Ссылка.ТипИнцидента) Тогда
                    Значения.Вставить(ВыборкаЗначений.Счетчик, Истина);
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
        
        Если Значения[Выборка.Счетчик] = Неопределено Тогда
            
            НовСтрока = ТаблицаЗначенийОбнаружения.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
            НовСтрока.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.ТекущееЗначение;
            НовСтрока.ПодробноеСообщение = Выборка.СтрокаПодключения + ИнцидентыСервер.ФорматЗначения(Выборка.Значение, Выборка.ФорматнаяСтрокаЗначения);
            НовСтрока.ТипИнцидента = Ссылка.ТипИнцидента;
            
            Если Выборка.Значение = NULL Тогда
                НовСтрока.НетДанных = Истина;
            КонецЕсли;
                        
            Значения.Вставить(Выборка.Счетчик, Истина);
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат ТаблицаЗначенийОбнаружения;
    
КонецФункции

Функция ПолучитьЗначенияИспользованиеОперативнойПамятиПроцессами(Ссылка, ДатаНачала, ДатаОкончания)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   ОсновнаяТаблица.НомерСтроки КАК ОсновнаяТаблицаНомерСтроки,
    |   {ОсновнаяТаблица.ПоляВыборки},
    |   ОсновнаяТаблица.Описание КАК СтрокаПодключения,
    |   ВЫРАЗИТЬ("""" КАК СТРОКА(1024)) КАК ПодробноеСообщение,
    |   ОсновнаяТаблица.ХешИнцидента КАК ХешИнцидента,
    |   Параметры.НомерСтроки КАК ПараметрыНомерСтроки,
    |   Параметры.УсловиеСрабатывания КАК УсловиеСрабатывания,
    |	Параметры.ЗначениеСрабатывания КАК ЗначениеСрабатывания,
    |	Параметры.ТипОбнаружения КАК ТипОбнаружения,
    |	Параметры.УровеньИнцидента КАК УровеньИнцидента,
    |   ОсновнаяТаблица.УникальныйИдентификаторСтроки КАК КлючБуфер,
    |   Данные.Значение,
    |   ОсновнаяТаблица.ФорматнаяСтрокаЗначения
    |ИЗ
    |	Справочник.ОбнаружениеИнцидентовОперативное.ИспользованиеОперативнойПамятиПроцессами КАК ОсновнаяТаблица
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |	Справочник.ОбнаружениеИнцидентовОперативное.ПараметрыОбнаружения КАК Параметры
    |ПО
    |	Параметры.Ссылка = ОсновнаяТаблица.Ссылка
    |	И Параметры.УникальныйИдентификаторСтроки = ОсновнаяТаблица.УникальныйИдентификаторСтроки
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   (ВЫБРАТЬ
    |      {Данные.ПоляВыборки},
    |      {АгрегированиеДанных} КАК Значение   
    |   ИЗ
    |       (ВЫБРАТЬ
    |           Данные.Время,
    |           {Данные.ПоляВыборкиНачальные},
    |           СУММА(Память) КАК Память
    |       ИЗ
    |	        Справочник.ОбнаружениеИнцидентовОперативное.ИспользованиеОперативнойПамятиПроцессами КАК ОсновнаяТаблица
    |       ЛЕВОЕ СОЕДИНЕНИЕ
    |           РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
    |       ПО
    |           ПараметрыРабочихСерверов.ОбъектКонтроля = ОсновнаяТаблица.РабочийСервер1С
    |       ЛЕВОЕ СОЕДИНЕНИЕ
    |           Справочник.Оборудование КАК СпрОборудование
    |       ПО
    |           СпрОборудование.Ссылка = ПараметрыРабочихСерверов.Оборудование
    |       ЛЕВОЕ СОЕДИНЕНИЕ
    |	        РегистрСведений.МониторингПроцессов КАК Данные
    |       ПО
    |           {Даные.ПоляСоединенияНачальные}
    |   	    И Данные.Время МЕЖДУ &ДатаНачала И &ДатаОкончания
    |      ГДЕ
    |	        ОсновнаяТаблица.Ссылка = &Ссылка
    |       СГРУППИРОВАТЬ ПО
    |           Данные.Время,
    |           {Данные.ПоляВыборкиНачальные}
    |       ) КАК Данные
    |   СГРУППИРОВАТЬ ПО
    |       {Данные.ПоляВыборки}
    |   ) КАК Данные
    |ПО
    |   {Даные.ПоляСоединения}
    |ГДЕ
    |   ОсновнаяТаблица.Ссылка = &Ссылка   
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
        
    Если Ссылка.ВариантТипаПоказателя = 0 Тогда
        
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ОсновнаяТаблица.ПоляВыборки}",
            "ОсновнаяТаблица.Кластер1С");
            
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{Данные.ПоляВыборкиНачальные}",
            "Данные.Кластер");
            
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{Даные.ПоляСоединенияНачальные}",
            "Данные.Кластер = ОсновнаяТаблица.Кластер1С");    
            
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{Данные.ПоляВыборки}",
            "Данные.Кластер");
            
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{Даные.ПоляСоединения}",
            "Данные.Кластер = ОсновнаяТаблица.Кластер1С");
            
    ИначеЕсли Ссылка.ВариантТипаПоказателя = 1 Тогда
        
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ОсновнаяТаблица.ПоляВыборки}",
            "ОсновнаяТаблица.Кластер1С,
            |ОсновнаяТаблица.РабочийСервер1С");
        
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{Данные.ПоляВыборкиНачальные}",
            "Данные.Кластер,
            |ПараметрыРабочихСерверов.ОбъектКонтроля");
            
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{Даные.ПоляСоединенияНачальные}",
            "Данные.Кластер = ОсновнаяТаблица.Кластер1С
            |И Данные.Сервер = Оборудование.Хост");
            
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{Данные.ПоляВыборки}",
            "Данные.Кластер,
            |Данные.ОбъектКонтроля");
            
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{Даные.ПоляСоединения}",
            "Данные.Кластер = ОсновнаяТаблица.Кластер1С
            |И Данные.ОбъектКонтроля = ОсновнаяТаблица.РабочийСервер1С");    
            
    ИначеЕсли Ссылка.ВариантТипаПоказателя = 2 Тогда
        
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ОсновнаяТаблица.ПоляВыборки}",
            "ОсновнаяТаблица.Кластер1С,
            |ОсновнаяТаблица.РабочийСервер1С,
            |Данные.Процесс");
            
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{Данные.ПоляВыборкиНачальные}",
            "Данные.Кластер,
            |ПараметрыРабочихСерверов.ОбъектКонтроля,
            |Данные.Процесс");
            
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{Даные.ПоляСоединенияНачальные}",
            "Данные.Кластер = ОсновнаяТаблица.Кластер1С
            |И Данные.Сервер = Оборудование.Хост");    
            
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{Данные.ПоляВыборки}",
            "Данные.Кластер,
            |Данные.ОбъектКонтроля,
            |Данные.Процесс");
            
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{Даные.ПоляСоединения}",
            "Данные.Кластер = ОсновнаяТаблица.Кластер1С
            |И Данные.ОбъектКонтроля = ОсновнаяТаблица.РабочийСервер1С");
        
    КонецЕсли;
        
    Если Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Среднее Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{АгрегированиеДанных}", "СРЕДНЕЕ(Данные.Память)/1024");
    ИначеЕсли Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Максимум Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{АгрегированиеДанных}", "МАКСИМУМ(Данные.Память)/1024");
    ИначеЕсли Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Минимум Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{АгрегированиеДанных}", "МИНИМУМ(Данные.Память)/1024");
    ИначеЕсли Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Количество Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{АгрегированиеДанных}", "КОЛИЧЕСТВО(*)");
    ИначеЕсли Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Сумма Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{АгрегированиеДанных}", "СУММА(Данные.Память)/1024");
    КонецЕсли;
    
    Результат = Запрос.Выполнить();
    
    ТаблицаБуфер = Результат.Выгрузить();
    ТаблицаБуфер.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
    Для Каждого ТекСтрока Из ТаблицаБуфер Цикл
        Если Ссылка.ВариантТипаПоказателя = 2 Тогда
            ПроцессСтрока = Формат(ТекСтрока.Процесс, "ЧГ=0");
            ТекСтрока.Ключ = Строка(ТекСтрока.КлючБуфер) + ПроцессСтрока;
            ТекСтрока.ПодробноеСообщение = ТекСтрока.СтрокаПодключения + "\rphost_" + ПроцессСтрока + ИнцидентыСервер.ФорматЗначения(ТекСтрока.Значение, ТекСтрока.ФорматнаяСтрокаЗначения);
        Иначе
            ТекСтрока.Ключ = Строка(ТекСтрока.КлючБуфер);
            Если ЗначениеЗаполнено(ТекСтрока.Значение) Тогда
                ТекСтрока.ПодробноеСообщение = ТекСтрока.СтрокаПодключения + ИнцидентыСервер.ФорматЗначения(ТекСтрока.Значение, ТекСтрока.ФорматнаяСтрокаЗначения);
            Иначе
                ТекСтрока.ПодробноеСообщение = ТекСтрока.СтрокаПодключения + ": Нет данных";
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    ТаблицаБуфер.Колонки.Удалить("КлючБуфер");
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   *
    |ПОМЕСТИТЬ
    |   ТаблицаБуфер
    |ИЗ
    |   &ТаблицаБуфер КАК ТаблицаБуфер
    |;
    |ВЫБРАТЬ
    |   *
    |ИЗ
    |   ТаблицаБуфер
    |ИТОГИ
    |   {МАКСИМУМ},
    |   МАКСИМУМ(ПодробноеСообщение),
    |   МАКСИМУМ(Значение),
    |   МАКСИМУМ(ХешИнцидента),
    |   МАКСИМУМ(СтрокаПодключения),
    |   МАКСИМУМ(ФорматнаяСтрокаЗначения)
    |ПО
    |   Ключ
    |";
    
    Если Ссылка.ВариантТипаПоказателя = 0 Тогда
        
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{МАКСИМУМ}",
            "МАКСИМУМ(Кластер1С)");
        
    ИначеЕсли Ссылка.ВариантТипаПоказателя = 1 Тогда
        
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{МАКСИМУМ}",
            "МАКСИМУМ(Кластер1С),
            |МАКСИМУМ(РабочийСервер1С)");
            
    ИначеЕсли Ссылка.ВариантТипаПоказателя = 2 Тогда
        
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{МАКСИМУМ}",
            "МАКСИМУМ(Кластер1С),
            |МАКСИМУМ(РабочийСервер1С),
            |МАКСИМУМ(Процесс)");
        
    КонецЕсли;
        
    Запрос.УстановитьПараметр("ТаблицаБуфер", ТаблицаБуфер);
    
    Результат = Запрос.Выполнить();
    
    Значения = Новый Соответствие;
    
    ТаблицаЗначенийОбнаруженияБуфер = ТаблицаЗначенийОбнаружения();
    
    Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    Пока Выборка.Следующий() Цикл
        
        ВыборкаЗначений = Выборка.Выбрать();
                
        Пока ВыборкаЗначений.Следующий() Цикл
            Если Значения[ВыборкаЗначений.Ключ] = Неопределено Тогда
                Если ПолучитьСрабатывание(ВыборкаЗначений, ТаблицаЗначенийОбнаруженияБуфер, Ссылка.ТипИнцидента) Тогда
                    Значения.Вставить(ВыборкаЗначений.Ключ, Истина);
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
        
        Если Значения[Выборка.Ключ] = Неопределено Тогда
            
            НовСтрока = ТаблицаЗначенийОбнаруженияБуфер.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
            НовСтрока.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.ТекущееЗначение;
            НовСтрока.ТипИнцидента = Ссылка.ТипИнцидента;
            
            Если Выборка.Значение = NULL Тогда
                НовСтрока.НетДанных = Истина;
            КонецЕсли;
                        
            Значения.Вставить(Выборка.Ключ, Истина);
        КонецЕсли;
        
    КонецЦикла;
       
    ТаблицаЗначенийОбнаруженияБуфер.Индексы.Добавить("ХешИнцидента, ТипОбнаружения");
    ТаблицаЗначенийОбнаруженияБуфер.Сортировать("ХешИнцидента, ТипОбнаружения УБЫВ");
    
    Значения = Новый Соответствие;
    ТаблицаЗначенийОбнаружения = ТаблицаЗначенийОбнаружения();
    Для Каждого ТекСтрока Из ТаблицаЗначенийОбнаруженияБуфер Цикл
        
        Если Значения[ТекСтрока.ХешИнцидента] = Неопределено Тогда
            
            НовСтрока = ТаблицаЗначенийОбнаружения.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
            НовСтрока.ПодробноеСообщение = ТекСтрока.ПодробноеСообщение;
            
            Значения.Вставить(ТекСтрока.ХешИнцидента, НовСтрока);
            
        Иначе
            
            НовСтрока = Значения[ТекСтрока.ХешИнцидента];
            Если НовСтрока.ТипОбнаружения = ТекСтрока.ТипОбнаружения Тогда
                НовСтрока.ПодробноеСообщение = НовСтрока.ПодробноеСообщение + Символы.ПС + ТекСтрока.ПодробноеСообщение;
            КонецЕсли;
                        
        КонецЕсли;
                
    КонецЦикла;
        
    Возврат ТаблицаЗначенийОбнаружения;
        
КонецФункции

Функция ПолучитьЗначенияЧислоАварийноЗавершенныхПроцессов(Ссылка, ДатаНачала, ДатаОкончания)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |	ОсновнаяТаблица.НомерСтроки КАК ОсновнаяТаблицаНомерСтроки,
    |   ОсновнаяТаблица.РабочийСервер,
    |	ОсновнаяТаблица.Описание КАК СтрокаПодключения,
    |   ВЫРАЗИТЬ("""" КАК СТРОКА(1024)) КАК ПодробноеСообщение,
    |   ОсновнаяТаблица.ХешИнцидента КАК ХешИнцидента,
    |	Параметры.НомерСтроки КАК ПараметрыНомерСтроки,
    |	Параметры.УсловиеСрабатывания КАК УсловиеСрабатывания,
    |	Параметры.ЗначениеСрабатывания КАК ЗначениеСрабатывания,
    |	Параметры.ТипОбнаружения КАК ТипОбнаружения,
    |	Параметры.УровеньИнцидента КАК УровеньИнцидента,
    |   {АгрегированиеДанных} КАК Значение,
    |   ОсновнаяТаблица.ФорматнаяСтрокаЗначения
    |ИЗ
    |	Справочник.ОбнаружениеИнцидентовОперативное.ЧислоАварийноЗавершенныхПроцессов КАК ОсновнаяТаблица
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |	Справочник.ОбнаружениеИнцидентовОперативное.ПараметрыОбнаружения КАК Параметры
    |ПО
    |	Параметры.Ссылка = ОсновнаяТаблица.Ссылка
    |	И Параметры.УникальныйИдентификаторСтроки = ОсновнаяТаблица.УникальныйИдентификаторСтроки
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |	РегистрСведений.Дампы КАК Данные
    |ПО
    |	Данные.ОбъектКонтроля = ОсновнаяТаблица.РабочийСервер
    |	И Данные.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
    |ГДЕ
    |	ОсновнаяТаблица.Ссылка = &Ссылка
    |СГРУППИРОВАТЬ ПО
    |	ОсновнаяТаблица.НомерСтроки,
    |   ОсновнаяТаблица.РабочийСервер,
    |	ОсновнаяТаблица.Описание,
    |	ОсновнаяТаблица.ХешИнцидента,
    |	Параметры.НомерСтроки,
    |	Параметры.УсловиеСрабатывания,
    |	Параметры.ЗначениеСрабатывания,
    |	Параметры.ТипОбнаружения,
    |	Параметры.УровеньИнцидента,
    |   ОсновнаяТаблица.ФорматнаяСтрокаЗначения
    |УПОРЯДОЧИТЬ ПО
    |	ОсновнаяТаблица.НомерСтроки,
    |	Параметры.НомерСтроки
    |ИТОГИ
    |   МАКСИМУМ(Значение),
    |   МАКСИМУМ(ХешИнцидента),
    |   МАКСИМУМ(СтрокаПодключения),
    |   МАКСИМУМ(ФорматнаяСтрокаЗначения)
    |ПО
    |   РабочийСервер
    |";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
    
    Если Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Количество Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "{АгрегированиеДанных}", "СУММА(ВЫБОР КОГДА Данные.Период IS NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ)");
    КонецЕсли;
    
    Результат = Запрос.Выполнить();
    
    Значения = Новый Соответствие;
    
    ТаблицаЗначенийОбнаружения = ТаблицаЗначенийОбнаружения();
    
    Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    Пока Выборка.Следующий() Цикл
        
        ВыборкаЗначений = Выборка.Выбрать();
        Пока ВыборкаЗначений.Следующий() Цикл
            Если Значения[ВыборкаЗначений.РабочийСервер] = Неопределено Тогда
                Если ПолучитьСрабатывание(ВыборкаЗначений, ТаблицаЗначенийОбнаружения, Ссылка.ТипИнцидента) Тогда
                    Значения.Вставить(ВыборкаЗначений.РабочийСервер, Истина);
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
        
        Если Значения[Выборка.РабочийСервер] = Неопределено Тогда
            
            НовСтрока = ТаблицаЗначенийОбнаружения.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
            НовСтрока.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.ТекущееЗначение;
            НовСтрока.ПодробноеСообщение = Выборка.СтрокаПодключения + ИнцидентыСервер.ФорматЗначения(Выборка.Значение, Выборка.ФорматнаяСтрокаЗначения);
            НовСтрока.ТипИнцидента = Ссылка.ТипИнцидента;
            
            Если Выборка.Значение = NULL Тогда
                НовСтрока.НетДанных = Истина;
            КонецЕсли;
                        
            Значения.Вставить(Выборка.РабочийСервер, Истина);
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат ТаблицаЗначенийОбнаружения;
    
КонецФункции

Функция ПолучитьЗначенияЧислоСеансов(Ссылка, ДатаНачала, ДатаОкончания)
    
    ТекстЗапроса = "
    |ВЫБРАТЬ
    |   ОсновнаяТаблица.НомерСтроки КАК ОсновнаяТаблицаНомерСтроки,
    |   {Данные.ПоляВыборки},
    |   ОсновнаяТаблица.Описание КАК СтрокаПодключения,
    |   ВЫРАЗИТЬ("""" КАК СТРОКА(1024)) КАК ПодробноеСообщение,
    |   ОсновнаяТаблица.ХешИнцидента КАК ХешИнцидента,
    |   Параметры.НомерСтроки КАК ПараметрыНомерСтроки,
    |   Параметры.УсловиеСрабатывания КАК УсловиеСрабатывания,
    |	Параметры.ЗначениеСрабатывания КАК ЗначениеСрабатывания,
    |	Параметры.ТипОбнаружения КАК ТипОбнаружения,
    |	Параметры.УровеньИнцидента КАК УровеньИнцидента,
    |   ОсновнаяТаблица.УникальныйИдентификаторСтроки КАК Ключ,
    |   Данные.Значение,
    |   ОсновнаяТаблица.ФорматнаяСтрокаЗначения
    |ИЗ
    |	Справочник.ОбнаружениеИнцидентовОперативное.ЧислоСеансов КАК ОсновнаяТаблица
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |	Справочник.ОбнаружениеИнцидентовОперативное.ПараметрыОбнаружения КАК Параметры
    |ПО
    |	Параметры.Ссылка = ОсновнаяТаблица.Ссылка
    |	И Параметры.УникальныйИдентификаторСтроки = ОсновнаяТаблица.УникальныйИдентификаторСтроки
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   (ВЫБРАТЬ
    |       {Данные.ПоляВыборки},
    |       {АгрегированиеДанных} КАК Значение
    |   ИЗ
    |       (ВЫБРАТЬ
    |           Данные.Период,
    |           {Данные.ПоляВыборки},
    |           СУММА(Количество) КАК КоличествоСеансов
    |       ИЗ
    |           Справочник.ОбнаружениеИнцидентовОперативное.ЧислоСеансов КАК ОсновнаяТаблица
    |       ЛЕВОЕ СОЕДИНЕНИЕ
    |           РегистрСведений.ЧислоСеансов КАК Данные
    |       ПО
    |           {Даные.ПоляСоединения}
    |           И Данные.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
    |       ГДЕ 
    |           ОсновнаяТаблица.Ссылка = &Ссылка
    |       {ГДЕ
	|			Данные.ВидПриложения.*}
    |       СГРУППИРОВАТЬ ПО
    |           Данные.Период,
    |           {Данные.ПоляВыборки}
    |       ) КАК Данные
    |   СГРУППИРОВАТЬ ПО
    |       {Данные.ПоляВыборки}
    |   ) КАК Данные
    |ПО
    |   {Даные.ПоляСоединения}
    |ГДЕ
    |   ОсновнаяТаблица.Ссылка = &Ссылка
    |УПОРЯДОЧИТЬ ПО
    |   ОсновнаяТаблица.НомерСтроки,
    |	Параметры.НомерСтроки
    |";
    
    Если Ссылка.ВариантТипаПоказателя = 0 Тогда
        
        ТекстЗапроса = СтрЗаменить(
            ТекстЗапроса,
            "{Данные.ПоляВыборки}",
            "Данные.Кластер");
            
        ТекстЗапроса = СтрЗаменить(
            ТекстЗапроса,
            "{Даные.ПоляСоединения}",
            "Данные.Кластер = ОсновнаяТаблица.Кластер");
            
    ИначеЕсли Ссылка.ВариантТипаПоказателя = 1 Тогда
        
        ТекстЗапроса = СтрЗаменить(
            ТекстЗапроса,
            "{Данные.ПоляВыборки}",
            "Данные.Кластер,
            |Данные.ИнформационнаяБаза");
            
        ТекстЗапроса = СтрЗаменить(
            ТекстЗапроса,
            "{Даные.ПоляСоединения}",
            "Данные.Кластер = ОсновнаяТаблица.Кластер
            |И Данные.ИнформационнаяБаза = ОсновнаяТаблица.ИнформационнаяБаза");
            
    ИначеЕсли Ссылка.ВариантТипаПоказателя = 2 Тогда
        
        ТекстЗапроса = СтрЗаменить(
            ТекстЗапроса,
            "{Данные.ПоляВыборки}",
            "Данные.Кластер,
            |Данные.ИнформационнаяБаза,
            |Данные.ВидПриложения");
            
        ТекстЗапроса = СтрЗаменить(
            ТекстЗапроса,
            "{Даные.ПоляСоединения}",
            "Данные.Кластер = ОсновнаяТаблица.Кластер
            |И Данные.ИнформационнаяБаза = ОсновнаяТаблица.ИнформационнаяБаза
            |И Данные.ВидПриложения = ОсновнаяТаблица.ВидПриложения");
            
    КонецЕсли;
        
    Если Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Среднее Тогда
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{АгрегированиеДанных}", "СРЕДНЕЕ(КоличествоСеансов)");
    ИначеЕсли Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Максимум Тогда
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{АгрегированиеДанных}", "МАКСИМУМ(КоличествоСеансов)");
    ИначеЕсли Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Минимум Тогда
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{АгрегированиеДанных}", "МИНИМУМ(КоличествоСеансов)");
    ИначеЕсли Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Количество Тогда
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{АгрегированиеДанных}", "КОЛИЧЕСТВО(*)");
    ИначеЕсли Ссылка.АгрегированиеДанныхФункция = Перечисления.ФункцииОповещений.Сумма Тогда
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{АгрегированиеДанных}", "СУММА(КоличествоСеансов)");
    КонецЕсли;    
    
    Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
    СКД = Новый СхемаКомпоновкиДанных();
    
    ИсточникСКД = СКД.ИсточникиДанных.Добавить();
    ИсточникСКД.Имя = "ИсточникДанных1";
    ИсточникСКД.ТипИсточникаДанных = "local";
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанных.Запрос = ТекстЗапроса; 
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    УдалитьИзВременногоХранилища(URLСхемы);
    
    Если ЗначениеЗаполнено(Ссылка.НастройкиФильтра) Тогда
        Поток = Новый ЧтениеXML();
        Поток.УстановитьСтроку(Ссылка.НастройкиФильтра);
        Компоновщик.ЗагрузитьНастройки(СериализаторXDTO.ПрочитатьXML(Поток));
        Поток.Закрыть();
    КонецЕсли;
    
    ПараметрСсылка = Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти("Ссылка");
    ПараметрСсылка.Использование = Истина;
    ПараметрСсылка.Значение = Ссылка;
    
    ПараметрДатаНачала = Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНачала");
    ПараметрДатаНачала.Использование = Истина;
    ПараметрДатаНачала.Значение = ДатаНачала;
    
    ПараметрДатаОкончания = Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти("ДатаОкончания");
    ПараметрДатаОкончания.Использование = Истина;
    ПараметрДатаОкончания.Значение = ДатаОкончания;
       
    ГруппировкаНастроек = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "ОсновнаяТаблицаНомерСтроки");
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "Кластер");
    
    Если Ссылка.ВариантТипаПоказателя = 1 ИЛИ Ссылка.ВариантТипаПоказателя = 2 Тогда
        ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "ИнформационнаяБаза");
        Если Ссылка.ВариантТипаПоказателя = 2 Тогда
            ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "ВидПриложения");
        КонецЕсли;
    КонецЕсли;
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "СтрокаПодключения");
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "ПодробноеСообщение");
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "ХешИнцидента");
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "ПараметрыНомерСтроки");
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "УсловиеСрабатывания");
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "ЗначениеСрабатывания");
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "ТипОбнаружения");
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "УровеньИнцидента");
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "Значение");
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "ФорматнаяСтрокаЗначения");
    ДобавитьПоле(Компоновщик, ГруппировкаНастроек, "Ключ");
        
    ТЗнДанные = ПолучитьДанныеКомпоновщика(Компоновщик, СКД, Ложь);
    
    Значения = Новый Соответствие;
    
    ТаблицаЗначенийОбнаружения = ТаблицаЗначенийОбнаружения();
    
    Если ТЗнДанные.Количество() > 0 Тогда
        
        
        Если ТЗнДанные.Количество() > 0 Тогда
            Ключ = ТЗнДанные[0].Ключ;
        КонецЕсли;
        
        Для Индекс = 0 По ТЗнДанные.Количество() - 1 Цикл 
            
            Если Ключ <> ТЗнДанные[Индекс].Ключ И Значения[Ключ] = Неопределено Тогда
                
                НовСтрока = ТаблицаЗначенийОбнаружения.Добавить();
                ЗаполнитьЗначенияСвойств(НовСтрока, ТЗнДанные[Индекс - 1]);
                Если НЕ ЗначениеЗаполнено(НовСтрока.ПодробноеСообщение) Тогда
                    НовСтрока.ПодробноеСообщение = ТЗнДанные[Индекс - 1].СтрокаПодключения + ИнцидентыСервер.ФорматЗначения(ТЗнДанные[Индекс - 1].Значение, ТЗнДанные[Индекс - 1].ФорматнаяСтрокаЗначения);
                КонецЕсли;
                НовСтрока.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.ТекущееЗначение;
                НовСтрока.ТипИнцидента = Ссылка.ТипИнцидента;
                
                Значения.Вставить(ТЗнДанные[Индекс - 1].Ключ, Истина);
                
            КонецЕсли;
            
            Если Значения[Ключ] = Неопределено Тогда
                Если ПолучитьСрабатывание(ТЗнДанные[Индекс], ТаблицаЗначенийОбнаружения, Ссылка.ТипИнцидента) Тогда
                    Значения.Вставить(ТЗнДанные[Индекс].Ключ, Истина);
                КонецЕсли;
            КонецЕсли;
            
            Ключ = ТЗнДанные[Индекс].Ключ;
            
        КонецЦикла;
        
        Если Значения[Ключ] = Неопределено Тогда
            
            НовСтрока = ТаблицаЗначенийОбнаружения.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрока, ТЗнДанные[Индекс - 1]);
            Если НЕ ЗначениеЗаполнено(НовСтрока.ПодробноеСообщение) Тогда
                НовСтрока.ПодробноеСообщение = ТЗнДанные[Индекс - 1].СтрокаПодключения + ИнцидентыСервер.ФорматЗначения(ТЗнДанные[Индекс - 1].Значение, ТЗнДанные[Индекс - 1].ФорматнаяСтрокаЗначения);
            КонецЕсли;
            НовСтрока.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.ТекущееЗначение;
            НовСтрока.ТипИнцидента = Ссылка.ТипИнцидента;
            
            Значения.Вставить(ТЗнДанные[Индекс].Ключ, Истина);
            
        КонецЕсли;
    КонецЕсли;
    
    Возврат ТаблицаЗначенийОбнаружения;
    
КонецФункции

Процедура ДобавитьПоле(Компоновщик, ГруппировкаНастроек, ИмяПоля)
    
    Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Использование = Истина;
    ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
    
КонецПроцедуры

Функция ТаблицаЗначенийОбнаружения()
    
    ТаблицаЗначенийОбнаружения = Новый ТаблицаЗначений;
    ТаблицаЗначенийОбнаружения.Колонки.Добавить("СтрокаПодключения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
    ТаблицаЗначенийОбнаружения.Колонки.Добавить("ПодробноеСообщение", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024)));
    ТаблицаЗначенийОбнаружения.Колонки.Добавить("ТипИнцидента", Новый ОписаниеТипов("СправочникСсылка.ТипыИнцидентов"));
    ТаблицаЗначенийОбнаружения.Колонки.Добавить("ХешИнцидента", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(64)));
    ТаблицаЗначенийОбнаружения.Колонки.Добавить("УсловиеСрабатывания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСравненияПоказателейОповещения"));
    ТаблицаЗначенийОбнаружения.Колонки.Добавить("ЗначениеСрабатывания", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(20,5)));
    ТаблицаЗначенийОбнаружения.Колонки.Добавить("ТипОбнаружения", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбнаруженияИнцидентов"));
    ТаблицаЗначенийОбнаружения.Колонки.Добавить("УровеньИнцидента", Новый ОписаниеТипов("ПеречислениеСсылка.УровниИнцидентов"));
    ТаблицаЗначенийОбнаружения.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(20,5)));
    ТаблицаЗначенийОбнаружения.Колонки.Добавить("ФорматнаяСтрокаЗначения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
    ТаблицаЗначенийОбнаружения.Колонки.Добавить("НетДанных", Новый ОписаниеТипов("Булево"));
    ТаблицаЗначенийОбнаружения.Колонки.Добавить("ИсточникИнцидента", Новый ОписаниеТипов("СправочникСсылка.ГруппыСчетчиков"));
            
    Возврат ТаблицаЗначенийОбнаружения; 
    
КонецФункции

Функция ПолучитьСрабатывание(Выборка, ТаблицаЗначенийОбнаружения, ТипИнцидента)
    
    УсловиеСработало = Ложь;
    
    Если Выборка.Значение <> NULL Тогда
        Если Выборка.УсловиеСрабатывания = Перечисления.ВидыСравненияПоказателейОповещения.Больше Тогда
            УсловиеСработало = Выборка.Значение > Выборка.ЗначениеСрабатывания;
        ИначеЕсли Выборка.УсловиеСрабатывания = Перечисления.ВидыСравненияПоказателейОповещения.Меньше Тогда
            УсловиеСработало = Выборка.Значение < Выборка.ЗначениеСрабатывания;
        ИначеЕсли Выборка.УсловиеСрабатывания = Перечисления.ВидыСравненияПоказателейОповещения.БольшеИлиРавно Тогда
            УсловиеСработало = Выборка.Значение >= Выборка.ЗначениеСрабатывания;
        ИначеЕсли Выборка.УсловиеСрабатывания = Перечисления.ВидыСравненияПоказателейОповещения.МеньшеИлиРавно Тогда
            УсловиеСработало = Выборка.Значение <= Выборка.ЗначениеСрабатывания;
        КонецЕсли;
    КонецЕсли;
    
    Если УсловиеСработало Тогда
        НовСтрока = ТаблицаЗначенийОбнаружения.Добавить();
        ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
        Если НЕ ЗначениеЗаполнено(НовСтрока.ПодробноеСообщение) Тогда
            НовСтрока.ПодробноеСообщение = Выборка.СтрокаПодключения + ИнцидентыСервер.ФорматЗначения(Выборка.Значение, Выборка.ФорматнаяСтрокаЗначения);
        КонецЕсли;    
        НовСтрока.ТипИнцидента = ТипИнцидента;
    КонецЕсли;
    
    Возврат УсловиеСработало;
    
КонецФункции

Функция ОбнаруженияСАвтодобавлением()
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка КАК ОбнаружениеОперативное
    |ИЗ
    |   Справочник.ОбнаружениеИнцидентовОперативное
    |ГДЕ
    |   АвтоматическоеДобавление
    |   И НЕ ПометкаУдаления
    |";
    
    Возврат Запрос.Выполнить();
    
КонецФункции

Функция ВыполнитьСейчасНаСервереСчетчики(Обнаружение, Интервал, Время)
    
    ДатаОкончания = НачалоМинуты(ТекущаяДата() - 60);
    ДатаНачала = ВычестьИнтервал(ДатаОкончания, Интервал, Время);
        
    Возврат Справочники.ОбнаружениеИнцидентовОперативное.ПолучитьЗначения(Обнаружение, ДатаНачала, ДатаОкончания);
    
КонецФункции

Функция ВыполнитьСейчасНаСервереИспользованиеОперативнойПамятиПроцессами(Обнаружение, Интервал, Время)
    
    ДатаОкончания = ТекущаяДата();
    ДатаНачала = ВычестьИнтервал(ДатаОкончания, Интервал, Время);
    
    Возврат Справочники.ОбнаружениеИнцидентовОперативное.ПолучитьЗначения(Обнаружение, ДатаНачала, ДатаОкончания);
    
КонецФункции

Функция ВыполнитьСейчасНаСервереЧислоАварийноЗавершенныхПроцессов(Обнаружение, Интервал, Время)
    
    ДатаОкончания = ТекущаяДата();
    ДатаНачала = ВычестьИнтервал(ДатаОкончания, Интервал, Время);
    
    Возврат Справочники.ОбнаружениеИнцидентовОперативное.ПолучитьЗначения(Обнаружение, ДатаНачала, ДатаОкончания);
    
КонецФункции

Функция ВыполнитьСейчасНаСервереЧислоСеансов(Обнаружение, Интервал, Время)
    
    ДатаОкончания = ТекущаяДата();
    ДатаНачала = ВычестьИнтервал(ДатаОкончания, Интервал, Время);
    
    Возврат Справочники.ОбнаружениеИнцидентовОперативное.ПолучитьЗначения(Обнаружение, ДатаНачала, ДатаОкончания);
    
КонецФункции

Функция ВычестьИнтервал(ТекущаяДата, Интервал, Время)
    
    Если Время = Перечисления.ЕдиницыВремени.Секунда Тогда
        Возврат ТекущаяДата - Интервал;
    ИначеЕсли Время = Перечисления.ЕдиницыВремени.Минута Тогда
        Возврат ТекущаяДата - Интервал * 60;
    ИначеЕсли Время = Перечисления.ЕдиницыВремени.Час Тогда
        Возврат ТекущаяДата - Интервал * 3600;
    ИначеЕсли Время = Перечисления.ЕдиницыВремени.День Тогда
        Возврат ТекущаяДата - Интервал * 86400;    
    КонецЕсли;    
    
КонецФункции

#КонецОбласти

#КонецЕсли
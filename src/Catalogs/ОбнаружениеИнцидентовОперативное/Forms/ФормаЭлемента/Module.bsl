#Область ГлобальныеПеременныеМодуля

&НаКлиенте
Перем НаименованиеНовоеНеМенять;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Элементы.Наименование.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
    Элементы.НаименованиеНовое.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка);
    
    Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
        ЗаполнитьПараметрыПоУмолчанию();
    КонецЕсли;
    
    ИнициализироватьОтбор(Объект.ТипПоказателя, Компоновщик, ЭтотОбъект.УникальныйИдентификатор);
    ИнициализироватьОтборФильтр(КомпоновщикФильтр, ЭтотОбъект.УникальныйИдентификатор);
        
    Если ЗначениеЗаполнено(Объект.НастройкиОтбора) Тогда
        Поток = Новый ЧтениеXML();
        Поток.УстановитьСтроку(Объект.НастройкиОтбора);
        ЭтотОбъект.Компоновщик.ЗагрузитьФиксированныеНастройки(СериализаторXDTO.ПрочитатьXML(Поток));
        Поток.Закрыть();
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Объект.НастройкиФильтра) Тогда
        Поток = Новый ЧтениеXML();
        Поток.УстановитьСтроку(Объект.НастройкиФильтра);
        ЭтотОбъект.КомпоновщикФильтр.ЗагрузитьФиксированныеНастройки(СериализаторXDTO.ПрочитатьXML(Поток));
        Поток.Закрыть();
    КонецЕсли;
    
    Элементы.ФормаСтарт.Доступность = НЕ Объект.Активно;
    Элементы.ФормаСтоп.Доступность = Объект.Активно;
                
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    НаименованиеНовоеНеМенять = ЗначениеЗаполнено(Объект.Ссылка);
    
    ВидимостьЭлементовПоТипуПоказателя();
    ВидимостьЭлементовПоГруппировке();
    
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    СериализоватьОтбор(ТекущийОбъект.НастройкиОтбора, Компоновщик);
    СериализоватьОтбор(ТекущийОбъект.НастройкиФильтра, КомпоновщикФильтр);
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ОбработкаВыбора

&НаКлиенте
Процедура СчетчикиСчетчикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    
    Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
        Счетчики = ЭтотОбъект.Элементы.Счетчики;
        ИндексСтроки = Счетчики.ТекущаяСтрока;
        Счетчики.ДанныеСтроки(ИндексСтроки).Счетчик = ВыбранноеЗначение[0];
        СчетчикиСчетчикПриИзменении(Элемент);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ПриИзменении

&НаКлиенте
Процедура СчетчикиСчетчикПриИзменении(Элемент)
        
    Счетчики = ЭтотОбъект.Элементы.Счетчики;
    ИндексСтроки = Счетчики.ТекущаяСтрока;
    ДанныеСтроки = Счетчики.ДанныеСтроки(ИндексСтроки);
    
    Если ЗначениеЗаполнено(Объект.РегулярноеВыражениеПоиска) И ЗначениеЗаполнено(Объект.РегулярноеВыражениеЗамены) Тогда
        ДанныеСтроки.Описание = РегулярныеВыраженияКлиентСервер.ЗаменитьПоШаблонуПоиска(Строка(ДанныеСтроки.Счетчик), Объект.РегулярноеВыражениеПоиска, Объект.РегулярноеВыражениеЗамены);
    Иначе
        ДанныеСтроки.Описание = Строка(ДанныеСтроки.Счетчик);
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеОперативнойПамятиПроцессамиКластер1СПриИзменении(Элемент)
    ИспользованиеОперативнойПамятиПроцессамиОписание();        
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеОперативнойПамятиПроцессамиРабочийСервер1СПриИзменении(Элемент)
    ИспользованиеОперативнойПамятиПроцессамиОписание();
КонецПроцедуры

&НаКлиенте
Процедура ЧислоАварийноЗавершенныхПроцессовРабочийСерверПриИзменении(Элемент)
    
    ЧислоАварийноЗавершенныхПроцессов = ЭтотОбъект.Элементы.ЧислоАварийноЗавершенныхПроцессов;
    ИндексСтроки = ЧислоАварийноЗавершенныхПроцессов.ТекущаяСтрока;
    ДанныеСтроки = ЧислоАварийноЗавершенныхПроцессов.ДанныеСтроки(ИндексСтроки);
    
    Если ЗначениеЗаполнено(Объект.РегулярноеВыражениеПоиска) И ЗначениеЗаполнено(Объект.РегулярноеВыражениеЗамены) Тогда
        ДанныеСтроки.Описание = РегулярныеВыраженияКлиентСервер.ЗаменитьПоШаблонуПоиска(Строка(ДанныеСтроки.РабочийСервер), Объект.РегулярноеВыражениеПоиска, Объект.РегулярноеВыражениеЗамены);
    Иначе
        ДанныеСтроки.Описание = Строка(ДанныеСтроки.РабочийСервер);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ТипПоказателяПриИзменении(Элемент)
    
    ВидимостьЭлементовПоТипуПоказателя();
    ВидимостьЭлементовПоГруппировке();
    Если НЕ НаименованиеНовоеНеМенять Тогда
        Объект.Наименование = Строка(Объект.ТипПоказателя);
    КонецЕсли;
    
    ИнициализироватьОтбор(Объект.ТипПоказателя, Компоновщик, ЭтотОбъект.УникальныйИдентификатор);
    ИнициализироватьОтборФильтр(КомпоновщикФильтр, ЭтотОбъект.УникальныйИдентификатор);
    Компоновщик.ФиксированныеНастройки.Отбор.Элементы.Очистить();
            
КонецПроцедуры

&НаКлиенте
Процедура ВариантТипаПоказателяПриИзменении(Элемент)
    
    ВидимостьЭлементовПоГруппировке();
    ОчиститьДанные();
    
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНовоеПриИзменении(Элемент)
    НаименованиеНовоеНеМенять = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЧислоСеансовКластерПриИзменении(Элемент)
    ЧислоСеансовОписание();
КонецПроцедуры

&НаКлиенте
Процедура ЧислоСеансовИнформационнаяБазаПриИзменении(Элемент)
    ЧислоСеансовОписание();
КонецПроцедуры

&НаКлиенте
Процедура ЧислоСеансовВидПриложенияПриИзменении(Элемент)
    ЧислоСеансовОписание();
КонецПроцедуры

#КонецОбласти

#Область ПриНачалеРедактирования

&НаКлиенте
Процедура СчетчикиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    ПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеОперативнойПамятиПроцессамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    ПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоАварийноЗавершенныхПроцессовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    ПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоСеансовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    ПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура СчетчикиПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    
    Если Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.Счетчики") Тогда
        ОсновныеТекущиеДанные = Элементы.Счетчики.ТекущиеДанные;
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами") Тогда
        ОсновныеТекущиеДанные = Элементы.ИспользованиеОперативнойПамятиПроцессами.ТекущиеДанные;
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов") Тогда
        ОсновныеТекущиеДанные = Элементы.ЧислоАварийноЗавершенныхПроцессов.ТекущиеДанные;
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоСеансов") Тогда
        ОсновныеТекущиеДанные = Элементы.ЧислоСеансов.ТекущиеДанные;
    КонецЕсли;
    
    Элемент.ТекущиеДанные.УникальныйИдентификаторСтроки = ОсновныеТекущиеДанные.УникальныйИдентификаторСтроки;
    
КонецПроцедуры

#КонецОбласти

#Область ПриАктивизацииСтроки

&НаКлиенте
Процедура СчетчикиПриАктивизацииСтроки(Элемент)
    ПараметрыОбнаруженияУстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеОперативнойПамятиПроцессамиПриАктивизацииСтроки(Элемент)
    ПараметрыОбнаруженияУстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ЧислоАварийноЗавершенныхПроцессовПриАктивизацииСтроки(Элемент)
    ПараметрыОбнаруженияУстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ЧислоСеансовПриАктивизацииСтроки(Элемент)
    ПараметрыОбнаруженияУстановитьОтбор();
КонецПроцедуры

#КонецОбласти

#Область ПередУдалением

&НаКлиенте
Процедура СчетчикиПередУдалением(Элемент, Отказ)
    ПередУдалениемОбщая("Счетчики", ЭтотОбъект.Элементы["Счетчики"].ВыделенныеСтроки); 
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеОперативнойПамятиПроцессамиПередУдалением(Элемент, Отказ)
    ПередУдалениемОбщая("ИспользованиеОперативнойПамятиПроцессами", ЭтотОбъект.Элементы["ИспользованиеОперативнойПамятиПроцессами"].ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоАварийноЗавершенныхПроцессовПередУдалением(Элемент, Отказ)
    ПередУдалениемОбщая("ЧислоАварийноЗавершенныхПроцессов", ЭтотОбъект.Элементы["ЧислоАварийноЗавершенныхПроцессов"].ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ЧислоСеансовПередУдалением(Элемент, Отказ)
    ПередУдалениемОбщая("ЧислоСеансов", ЭтотОбъект.Элементы["ЧислоСеансов"].ВыделенныеСтроки);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьСейчас(Команда)
    
    Сообщения = ВыполнитьСейчасНаСервере(Объект.Ссылка, Объект.АгрегированиеДанныхИнтервал, Объект.АгрегированиеДанныхВремя);
    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСоединить(Сообщения, Символы.ПС));
    
КонецПроцедуры

&НаКлиенте
Процедура Старт(Команда)
    
    Если ЕстьНастройки() Тогда
        
        Объект.Активно = Истина;
        Элементы.ФормаСтарт.Доступность = НЕ Объект.Активно;
        Элементы.ФормаСтоп.Доступность = Объект.Активно;
        Модифицированность = Истина;
        
    Иначе
        
        Если Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.Счетчики") Тогда
            ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не заполнены параметры обнаружения инцидентов!", "Объект.Счетчики", ЭтотОбъект);
        ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами") Тогда
            ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не заполнены параметры обнаружения инцидентов!", "Объект.ИспользованиеОперативнойПамятиПроцессами", ЭтотОбъект);
        ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов") Тогда
            ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не заполнены параметры обнаружения инцидентов!", "Объект.ЧислоАварийноЗавершенныхПроцессов", ЭтотОбъект);
        ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоСеансов") Тогда
            ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не заполнены параметры обнаружения инцидентов!", "Объект.ЧислоСеансов", ЭтотОбъект);
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура Стоп(Команда)
    
    Объект.Активно = Ложь;
    Элементы.ФормаСтарт.Доступность = НЕ Объект.Активно;
    Элементы.ФормаСтоп.Доступность = Объект.Активно;
    
    Модифицированность = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСчетчиков(Команда)
    
    ТабличныйДокумент = ПечатьСпискаНаСервере();
    ТабличныйДокумент.Показать("Заголовок");
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ЕстьНастройки()
    
    Возврат Объект.ПараметрыОбнаружения.Количество() > 0;
    
КонецФункции

&НаСервере
Процедура ПередУдалениемОбщая(ИмяЭлемента, Знач Данные)
    
    Для Каждого ТекИндекс Из Данные Цикл
        
        ТекДанные = Объект[ИмяЭлемента].НайтиПоИдентификатору(ТекИндекс);
        
        ПараметрыОтбора = Новый Структура("УникальныйИдентификаторСтроки", ТекДанные.УникальныйИдентификаторСтроки);
        Строки = Объект.ПараметрыОбнаружения.НайтиСтроки(ПараметрыОтбора);
        Для Каждого ТекСтрока Из Строки Цикл
            Объект.ПараметрыОбнаружения.Удалить(ТекСтрока);
        КонецЦикла;
        
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбнаруженияУстановитьОтбор()
    
    Если Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.Счетчики") Тогда
        ТекущиеДанные = Элементы.Счетчики.ТекущиеДанные;
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами") Тогда
        ТекущиеДанные = Элементы.ИспользованиеОперативнойПамятиПроцессами.ТекущиеДанные;
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов") Тогда
        ТекущиеДанные = Элементы.ЧислоАварийноЗавершенныхПроцессов.ТекущиеДанные;
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоСеансов") Тогда
        ТекущиеДанные = Элементы.ЧислоСеансов.ТекущиеДанные;
    КонецЕсли;
    
    Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.УникальныйИдентификаторСтроки) Тогда
        
        Элементы.ПараметрыОбнаружения.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("УникальныйИдентификаторСтроки", ТекущиеДанные.УникальныйИдентификаторСтроки));
        УстановитьЗаголовокПараметры(ТекущиеДанные);
        
    Иначе
        
        Элементы.ПараметрыОбнаружения.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("УникальныйИдентификаторСтроки", Новый УникальныйИдентификатор()));
        Элементы.ГруппаПараметры.Заголовок = "Параметры";
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокПараметры(ТекущиеДанные)
    
    Если Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.Счетчики") Тогда
        ЗаголовокПараметры = "Параметры для счетчика № " + ТекущиеДанные.НомерСтроки;
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами") Тогда
        ТекущиеДанные = Элементы.ИспользованиеОперативнойПамятиПроцессами.ТекущиеДанные;
        ЗаголовокПараметры = "Параметры для строки № " + ТекущиеДанные.НомерСтроки;
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов") Тогда
        ТекущиеДанные = Элементы.ЧислоАварийноЗавершенныхПроцессов.ТекущиеДанные;
        ЗаголовокПараметры = "Параметры для строки № " + ТекущиеДанные.НомерСтроки;
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоСеансов") Тогда
        ТекущиеДанные = Элементы.ЧислоСеансов.ТекущиеДанные;
        ЗаголовокПараметры = "Параметры для строки № " + ТекущиеДанные.НомерСтроки;
    КонецЕсли;
    
    Элементы.ГруппаПараметры.Заголовок = ЗаголовокПараметры; 
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьСейчасНаСервере(Обнаружение, Интервал, Время)
    
    Возврат Справочники.ОбнаружениеИнцидентовОперативное.ВыполнитьОбнаружение(Обнаружение, Интервал, Время);
        
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыПоУмолчанию()
    
    НовСтрока = Объект.ПараметрыОбнаруженияПоУмолчанию.Добавить();
    НовСтрока.ТипОбнаружения = ПредопределенноеЗначение("Перечисление.ТипыОбнаруженияИнцидентов.Закрытие");
    НовСтрока.УсловиеСрабатывания = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Меньше");
    
    НовСтрока = Объект.ПараметрыОбнаруженияПоУмолчанию.Добавить();
    НовСтрока.ТипОбнаружения = ПредопределенноеЗначение("Перечисление.ТипыОбнаруженияИнцидентов.Открытие");
    НовСтрока.УсловиеСрабатывания = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.БольшеИлиРавно");
    НовСтрока.УровеньИнцидента = Перечисления.УровниИнцидентов.Ошибка;
    
    Объект.Наименование = Строка(Объект.ТипПоказателя);
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИнициализироватьОтбор(ТипПоказателя, Компоновщик, УникальныйИдентификаторФормы)
    
    Если ТипПоказателя = Перечисления.ТипыПоказателей.Счетчики Тогда
        ТекстЗапроса = "
        |ВЫБРАТЬ
        |   ПолныйКодДляПоиска КАК НаименованиеСчетчика,
        |   ПометкаУдаления КАК ПометкаУдаления
        |ИЗ
        |   Справочник.ГруппыСчетчиков
        |";
    ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами Тогда
        ТекстЗапроса = "
        |ВЫБРАТЬ
        |   Наименование КАК НаименованиеКластера,
        |   Наименование КАК НаименованиеРабочегоСервера,
        |   ПометкаУдаления КАК ПометкаУдаленияКластера,
        |   ПометкаУдаления КАК ПометкаУдаленияРабочегоСервера
        |ИЗ
        |   Справочник.ОбъектыКонтроля КАК Кластеры1С
        |";
    ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов Тогда
        ТекстЗапроса = "
        |ВЫБРАТЬ
        |   Наименование КАК НаименованиеРабочегоСервера,
        |   ПометкаУдаления КАК ПометкаУдаления
        |ИЗ
        |   Справочник.ОбъектыКонтроля
        |";
        
    ИначеЕсли ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоСеансов Тогда
        ТекстЗапроса = "
        |ВЫБРАТЬ
        |   Наименование КАК НаименованиеКластера,
        |   Наименование КАК НаименованиеИнформационнойБазы,
        |   ЗНАЧЕНИЕ(Перечисление.ВидыПриложений._1CV8C) КАК ВидПриложения,
        |   ПометкаУдаления КАК ПометкаУдаленияКластера,
        |   ПометкаУдаления КАК ПометкаУдаленияИнформационнойБазы
        |ИЗ
        |   Справочник.ОбъектыКонтроля КАК Кластеры1С
        |";
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
        СКД = Новый СхемаКомпоновкиДанных();
        ИсточникСКД = СКД.ИсточникиДанных.Добавить();
        ИсточникСКД.Имя = "ИсточникДанных1";
        ИсточникСКД.ТипИсточникаДанных = "local";
        НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
        НаборДанных.Запрос = ТекстЗапроса; 
        НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
        
        URLСхемы = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификаторФормы);
        Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    КонецЕсли;
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИнициализироватьОтборФильтр(Компоновщик, УникальныйИдентификаторФормы)
    
    ТекстЗапроса = "
        |ВЫБРАТЬ
        |   ЗНАЧЕНИЕ(Перечисление.ВидыПриложений._1CV8C) КАК ВидПриложения
        |";
    
    Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
        СКД = Новый СхемаКомпоновкиДанных();
        ИсточникСКД = СКД.ИсточникиДанных.Добавить();
        ИсточникСКД.Имя = "ИсточникДанных1";
        ИсточникСКД.ТипИсточникаДанных = "local";
        НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
        НаборДанных.Запрос = ТекстЗапроса; 
        НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
        
        URLСхемы = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификаторФормы);
        Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметры(Команда)
    
    Если НЕ Компоновщик.ФиксированныеНастройки.НаличиеОтбораУЭлемента(Компоновщик.ФиксированныеНастройки) Тогда
        ЭтотОбъект.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтотОбъект.Элементы.ГруппаСтраницаПараметрыПоУмолчанию;
        ОбщийКлиентСервер.СгенерироватьСообщениеПользователю("Не заполнен отбор!", "Компоновщик.ФиксированныеНастройки.Отбор", ЭтотОбъект);
        Возврат;
    КонецЕсли;
        
    ДопПараметры = Неопределено;
    
    Если Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами") Тогда
        ДопПараметры = Новый Структура("ВариантТипаПоказателя", Объект.ВариантТипаПоказателя);
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоСеансов") Тогда
        ДопПараметры = Новый Структура("ВариантТипаПоказателя", Объект.ВариантТипаПоказателя);
    КонецЕсли;
    ОбновитьПараметрыНаСервере(ДопПараметры);
    
    Если Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.Счетчики") Тогда
        Если Элементы.Счетчики.ТекущаяСтрока = Неопределено И Объект.Счетчики.Количество() > 0 Тогда
            Элементы.Счетчики.ТекущаяСтрока = Объект.Счетчики[0].ПолучитьИдентификатор();
        КонецЕсли;
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами") Тогда
        Если Элементы.ИспользованиеОперативнойПамятиПроцессами.ТекущаяСтрока = Неопределено И Объект.ИспользованиеОперативнойПамятиПроцессами.Количество() > 0 Тогда
            Элементы.ИспользованиеОперативнойПамятиПроцессами.ТекущаяСтрока = Объект.ИспользованиеОперативнойПамятиПроцессами[0].ПолучитьИдентификатор();
        КонецЕсли;
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов") Тогда
        Если Элементы.ЧислоАварийноЗавершенныхПроцессов.ТекущаяСтрока = Неопределено И Объект.ЧислоАварийноЗавершенныхПроцессов.Количество() > 0 Тогда
            Элементы.ЧислоАварийноЗавершенныхПроцессов.ТекущаяСтрока = Объект.ЧислоАварийноЗавершенныхПроцессов[0].ПолучитьИдентификатор();
        КонецЕсли;
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоСеансов") Тогда
        Если Элементы.ЧислоСеансов.ТекущаяСтрока = Неопределено И Объект.ЧислоСеансов.Количество() > 0 Тогда
            Элементы.ЧислоСеансов.ТекущаяСтрока = Объект.ЧислоСеансов[0].ПолучитьИдентификатор();
        КонецЕсли;
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыНаСервере(ДопПараметры)
    
    СериализоватьОтбор(Объект.НастройкиОтбора, Компоновщик);
        
    ТЗнНовые = Справочники.ОбнаружениеИнцидентовОперативное.ПолучитьДанныеОтбора(Объект.ТипПоказателя, Объект.НастройкиОтбора, ДопПараметры);
    Справочники.ОбнаружениеИнцидентовОперативное.ДобавитьДанныеАвтодобавления(Объект, ТЗнНовые);
    
    //Если Объект.ТипПоказателя = Перечисления.ТипыПоказателей.Счетчики Тогда
    //    ОбновитьСчетчики(ТЗнНовые);
    //ИначеЕсли Объект.ТипПоказателя = Перечисления.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами Тогда
    //    ОбновитьИспользованиеОперативнойПамятиПроцессами(ТЗнНовые);
    //ИначеЕсли Объект.ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов Тогда
    //    ОбновитьЧислоАварийноЗавершенныхПроцессов(ТЗнНовые);
    //ИначеЕсли Объект.ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоСеансов Тогда
    //    ОбновитьЧислоСеансов(ТЗнНовые);
    //КонецЕсли;
        
КонецПроцедуры

&НаСервере
Процедура СериализоватьОтбор(НастройкиОтбора, КомпоновщикСохранить)
    
    Поток = Новый ЗаписьXML();
	Поток.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Поток, КомпоновщикСохранить.ПолучитьНастройки());
	НастройкиОтбора = Поток.Закрыть();
    
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовПоТипуПоказателя()
    
    Если Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.Счетчики") Тогда
        
        Элементы.ГруппаСчетчики.Видимость = Истина;
        Элементы.ГруппаИспользованиеОперативнойПамятиПроцессами.Видимость = Ложь;
        Элементы.ГруппаЧислоАварийноЗавершенныхПроцессов.Видимость = Ложь;
        Элементы.ГруппаЧислоСеансов.Видимость = Ложь;

        Элементы.ГруппаПотреблениеПамятиПроцессами.Видимость = Ложь;
        
        Элементы.СчетчикиПараметрыЗначениеСрабатывания.Заголовок = "Значение";
        
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Очистить();
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Среднее"));
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Максимум"));
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Минимум"));
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Количество"));
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Сумма"));
        
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами") Тогда
        
        Элементы.ГруппаСчетчики.Видимость = Ложь;
        Элементы.ГруппаИспользованиеОперативнойПамятиПроцессами.Видимость = Истина;
        Элементы.ГруппаЧислоАварийноЗавершенныхПроцессов.Видимость = Ложь;
        Элементы.ГруппаЧислоСеансов.Видимость = Ложь;
        
        Элементы.ГруппаПотреблениеПамятиПроцессами.Видимость = Истина;
        
        Элементы.ВариантТипаПоказателя.СписокВыбора.Очистить();
        Элементы.ВариантТипаПоказателя.СписокВыбора.Добавить(0, "По кластеру");
        Элементы.ВариантТипаПоказателя.СписокВыбора.Добавить(1, "По рабочему серверу");
        Элементы.ВариантТипаПоказателя.СписокВыбора.Добавить(2, "По процессу");
        
        ВидимостьЭлементовПоГруппировке();
        
        Элементы.СчетчикиПараметрыЗначениеСрабатывания.Заголовок = "Значение, Мб";
        
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Очистить();
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Среднее"));
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Максимум"));
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Минимум"));
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Количество"));
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Сумма"));
        
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов") Тогда
        
        Элементы.ГруппаСчетчики.Видимость = Ложь;
        Элементы.ГруппаИспользованиеОперативнойПамятиПроцессами.Видимость = Ложь;
        Элементы.ГруппаЧислоАварийноЗавершенныхПроцессов.Видимость = Истина;
        Элементы.ГруппаЧислоСеансов.Видимость = Ложь;
        
        Элементы.ГруппаПотреблениеПамятиПроцессами.Видимость = Ложь;
        
        Элементы.СчетчикиПараметрыЗначениеСрабатывания.Заголовок = "Значение";
        
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Очистить();
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Количество"));
        
        Если Объект.АгрегированиеДанныхФункция <> ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Количество") Тогда
            Объект.АгрегированиеДанныхФункция = ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Количество");
        КонецЕсли;
                
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоСеансов") Тогда
        
        Элементы.ГруппаСчетчики.Видимость = Ложь;
        Элементы.ГруппаИспользованиеОперативнойПамятиПроцессами.Видимость = Ложь;
        Элементы.ГруппаЧислоАварийноЗавершенныхПроцессов.Видимость = Ложь;
        Элементы.ГруппаЧислоСеансов.Видимость = Истина;
                
        Элементы.ГруппаПотреблениеПамятиПроцессами.Видимость = Истина;
        Элементы.ВариантТипаПоказателя.СписокВыбора.Очистить();
        Элементы.ВариантТипаПоказателя.СписокВыбора.Добавить(0, "По кластеру");
        Элементы.ВариантТипаПоказателя.СписокВыбора.Добавить(1, "По информационной базе");
        Элементы.ВариантТипаПоказателя.СписокВыбора.Добавить(2, "По виду приложения");
        
        Элементы.СчетчикиПараметрыЗначениеСрабатывания.Заголовок = "Значение";
        
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Очистить();
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Среднее"));
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Максимум"));
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Минимум"));
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Количество"));
        Элементы.АгрегированиеДанныхФункция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Сумма"));
                           
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовПоГруппировке()
           
    Если Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами") Тогда
        
        Если Объект.ВариантТипаПоказателя = 0 Тогда
            Элементы.ИспользованиеОперативнойПамятиПроцессамиРабочийСервер1С.Видимость = Ложь;
        ИначеЕсли Объект.ВариантТипаПоказателя = 1 Тогда
            Элементы.ИспользованиеОперативнойПамятиПроцессамиРабочийСервер1С.Видимость = Истина;
        ИначеЕсли Объект.ВариантТипаПоказателя = 2 Тогда
            Элементы.ИспользованиеОперативнойПамятиПроцессамиРабочийСервер1С.Видимость = Истина;
        КонецЕсли;
        
        Элементы.КомпоновщикФильтрФиксированныеНастройкиОтбор.Видимость = Ложь;
        
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоСеансов") Тогда
        
        Если Объект.ВариантТипаПоказателя = 0 Тогда
            
            Элементы.ЧислоСеансовКластер.Видимость = Истина;
            Элементы.ЧислоСеансовИнформационнаяБаза.Видимость = Ложь;
            Элементы.ЧислоСеансовВидПриложения.Видимость = Ложь;
            Элементы.КомпоновщикФильтрФиксированныеНастройкиОтбор.Видимость = Истина;
            
        ИначеЕсли Объект.ВариантТипаПоказателя = 1 Тогда
            
            Элементы.ЧислоСеансовКластер.Видимость = Истина;
            Элементы.ЧислоСеансовИнформационнаяБаза.Видимость = Истина;
            Элементы.ЧислоСеансовВидПриложения.Видимость = Ложь;
            Элементы.КомпоновщикФильтрФиксированныеНастройкиОтбор.Видимость = Истина;
            
        ИначеЕсли Объект.ВариантТипаПоказателя = 2 Тогда
            
            Элементы.ЧислоСеансовКластер.Видимость = Истина;
            Элементы.ЧислоСеансовИнформационнаяБаза.Видимость = Истина;
            Элементы.ЧислоСеансовВидПриложения.Видимость = Истина;
            Элементы.КомпоновщикФильтрФиксированныеНастройкиОтбор.Видимость = Ложь;
            
        КонецЕсли;        
        
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанные()
    
    Если Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами") Тогда
        
       
    ИначеЕсли Объект.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ЧислоСеансов") Тогда
        
        Если Объект.ВариантТипаПоказателя = 0 Тогда
            
            Для Каждого ТекДанные Из Объект.ЧислоСеансов Цикл
                ТекДанные.ИнформационнаяБаза = Неопределено;
                ТекДанные.ВидПриложения = Неопределено;
            КонецЦикла;
                        
        ИначеЕсли Объект.ВариантТипаПоказателя = 1 Тогда
            
            Для Каждого ТекДанные Из Объект.ЧислоСеансов Цикл
                ТекДанные.ВидПриложения = Неопределено;
            КонецЦикла;
                                  
        КонецЕсли;        
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, Копирование)
    
    Если НоваяСтрока ИЛИ Копирование Тогда
        
        Элемент.ТекущиеДанные.УникальныйИдентификаторСтроки = Новый УникальныйИдентификатор;
        ПараметрыОбнаруженияУстановитьОтбор();
        
        Для Каждого ТекСтрока Из Объект.ПараметрыОбнаруженияПоУмолчанию Цикл
            
            НовСтрока = Объект.ПараметрыОбнаружения.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
                                    
            НовСтрока.УникальныйИдентификаторСтроки = Элемент.ТекущиеДанные.УникальныйИдентификаторСтроки;
            
        КонецЦикла;
                
    КонецЕсли;
        
    Если НоваяСтрока Тогда
        Элемент.ТекущиеДанные.ФорматнаяСтрокаЗначения = Объект.ФорматнаяСтрокаЗначенияПоУмолчанию;
    КонецЕсли;
       
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеОперативнойПамятиПроцессамиОписание()
    
    ИспользованиеОперативнойПамятиПроцессами = ЭтотОбъект.Элементы.ИспользованиеОперативнойПамятиПроцессами;
    ИндексСтроки = ИспользованиеОперативнойПамятиПроцессами.ТекущаяСтрока;
    ДанныеСтроки = ИспользованиеОперативнойПамятиПроцессами.ДанныеСтроки(ИндексСтроки);
    
    НаименованиеОбщееМассив = Новый Массив;
    Если ЗначениеЗаполнено(ДанныеСтроки.Кластер1С) Тогда
        НаименованиеОбщееМассив.Добавить(Строка(ДанныеСтроки.Кластер1С));
    КонецЕсли;
    Если ЗначениеЗаполнено(ДанныеСтроки.РабочийСервер1С) Тогда
        НаименованиеОбщееМассив.Добавить(Строка(ДанныеСтроки.РабочийСервер1С));
    КонецЕсли;
    НаименованиеОбщее = СтрСоединить(НаименованиеОбщееМассив, "\");
        
    Если ЗначениеЗаполнено(Объект.РегулярноеВыражениеПоиска) И ЗначениеЗаполнено(Объект.РегулярноеВыражениеЗамены) Тогда
        ДанныеСтроки.Описание = РегулярныеВыраженияКлиентСервер.ЗаменитьПоШаблонуПоиска(НаименованиеОбщее, Объект.РегулярноеВыражениеПоиска, Объект.РегулярноеВыражениеЗамены);
    Иначе
        ДанныеСтроки.Описание = НаименованиеОбщее;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЧислоСеансовОписание()
    
    ЧислоСеансов = ЭтотОбъект.Элементы.ЧислоСеансов;
    ИндексСтроки = ЧислоСеансов.ТекущаяСтрока;
    ДанныеСтроки = ЧислоСеансов.ДанныеСтроки(ИндексСтроки);
    
    НаименованиеОбщееМассив = Новый Массив;
    Если ЗначениеЗаполнено(ДанныеСтроки.Кластер) Тогда
        НаименованиеОбщееМассив.Добавить(Строка(ДанныеСтроки.Кластер));
    КонецЕсли;
    Если ЗначениеЗаполнено(ДанныеСтроки.ИнформационнаяБаза) Тогда
        НаименованиеОбщееМассив.Добавить(Строка(ДанныеСтроки.ИнформационнаяБаза));
    КонецЕсли;
    Если ЗначениеЗаполнено(ДанныеСтроки.ВидПриложения) Тогда
        НаименованиеОбщееМассив.Добавить(Строка(ДанныеСтроки.ВидПриложения));
    КонецЕсли;
    
    НаименованиеОбщее = СтрСоединить(НаименованиеОбщееМассив, "\");
        
    Если ЗначениеЗаполнено(Объект.РегулярноеВыражениеПоиска) И ЗначениеЗаполнено(Объект.РегулярноеВыражениеЗамены) Тогда
        ДанныеСтроки.Описание = РегулярныеВыраженияКлиентСервер.ЗаменитьПоШаблонуПоиска(НаименованиеОбщее, Объект.РегулярноеВыражениеПоиска, Объект.РегулярноеВыражениеЗамены);
    Иначе
        ДанныеСтроки.Описание = НаименованиеОбщее;
    КонецЕсли;
    
КонецПроцедуры

#Область ПечатьСписка

&НаСервере
Функция ПечатьСпискаНаСервере()
    
    Если Объект.ТипПоказателя = Перечисления.ТипыПоказателей.Счетчики Тогда
        Возврат ПечатьСпискаСчетчики();
    ИначеЕсли Объект.ТипПоказателя = Перечисления.ТипыПоказателей.ИспользованиеОперативнойПамятиПроцессами Тогда
        Возврат ПечатьСпискаИспользованиеОперативнойПамятиПроцессами();
    ИначеЕсли Объект.ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоАварийноЗавершенныхПроцессов Тогда
        Возврат ПечатьСпискаЧислоАварийноЗавершенныхПроцессов();
    ИначеЕсли Объект.ТипПоказателя = Перечисления.ТипыПоказателей.ЧислоСеансов Тогда
        Возврат ПечатьСпискаЧислоСеансов();
    КонецЕсли;
        
КонецФункции

&НаСервере
Функция ПечатьСпискаСчетчики()
    
    ТабличныйДокумент = Новый ТабличныйДокумент;
    
    МакетПечати = Справочники.ОбнаружениеИнцидентовОперативное.ПолучитьМакет("МакетНастройки");
    
    Шапка = МакетПечати.ПолучитьОбласть("Шапка");
    Шапка.Параметры.Заголовок = Объект.ТипИнцидента;
    ТабличныйДокумент.Вывести(Шапка);
    
    Для Каждого Строка Из Объект.Счетчики Цикл
        
        СтрокаДанных = МакетПечати.ПолучитьОбласть("СтрокаДанных");
        
        СтрокаДанных.Параметры.Ном = Строка.НомерСтроки;
        СтрокаДанных.Параметры.Счетчик = Строка.Счетчик;
        СтрокаДанных.Параметры.Описание = Строка.Описание;
        СтрокаДанных.Параметры.ФорматЗначения = Строка.ФорматнаяСтрокаЗначения;
        
        ТабличныйДокумент.Вывести(СтрокаДанных);
        
        ПечатьПараметров(МакетПечати, ТабличныйДокумент, Строка);
                
    КонецЦикла;
        
    Возврат ТабличныйДокумент;
    
КонецФункции

&НаСервере
Функция ПечатьСпискаИспользованиеОперативнойПамятиПроцессами()
    
    ТабличныйДокумент = Новый ТабличныйДокумент;
    
    МакетПечати = Справочники.ОбнаружениеИнцидентовОперативное.ПолучитьМакет("МакетНастройки");
    
    Если Объект.ВариантТипаПоказателя = 0 Тогда
        Шапка = МакетПечати.ПолучитьОбласть("ШапкаИОПП");
    Иначе
        Шапка = МакетПечати.ПолучитьОбласть("ШапкаИОПП_РабочийСервер");
    КонецЕсли;
    Шапка.Параметры.Заголовок = Объект.ТипИнцидента;
    ТабличныйДокумент.Вывести(Шапка);
    
    Для Каждого Строка Из Объект.ИспользованиеОперативнойПамятиПроцессами Цикл
        
        Если Объект.ВариантТипаПоказателя = 0 Тогда
            СтрокаДанных = МакетПечати.ПолучитьОбласть("СтрокаДанныхИОПП");
        Иначе
            СтрокаДанных = МакетПечати.ПолучитьОбласть("СтрокаДанныхИОПП_РабочийСервер");
            СтрокаДанных.Параметры.РабочийСервер = Строка.РабочийСервер1С;
        КонецЕсли;
        
        СтрокаДанных.Параметры.Ном = Строка.НомерСтроки;
        СтрокаДанных.Параметры.Кластер = Строка.Кластер1С;
        СтрокаДанных.Параметры.Описание = Строка.Описание;
        СтрокаДанных.Параметры.ФорматЗначения = Строка.ФорматнаяСтрокаЗначения;
        
        ТабличныйДокумент.Вывести(СтрокаДанных);
        
        ПечатьПараметров(МакетПечати, ТабличныйДокумент, Строка);
        
    КонецЦикла;
    
    Возврат ТабличныйДокумент;
        
КонецФункции

&НаСервере
Функция ПечатьСпискаЧислоАварийноЗавершенныхПроцессов()
    
    ТабличныйДокумент = Новый ТабличныйДокумент;
    
    МакетПечати = Справочники.ОбнаружениеИнцидентовОперативное.ПолучитьМакет("МакетНастройки");
    
    Шапка = МакетПечати.ПолучитьОбласть("ШапкаЧАЗП");
    Шапка.Параметры.Заголовок = Объект.ТипИнцидента;
    ТабличныйДокумент.Вывести(Шапка);
    
    Для Каждого Строка Из Объект.ЧислоАварийноЗавершенныхПроцессов Цикл
        
        СтрокаДанных = МакетПечати.ПолучитьОбласть("СтрокаДанныхЧАЗП");
        
        СтрокаДанных.Параметры.Ном = Строка.НомерСтроки;
        СтрокаДанных.Параметры.РабочийСервер = Строка.РабочийСервер;
        СтрокаДанных.Параметры.Описание = Строка.Описание;
        СтрокаДанных.Параметры.ФорматЗначения = Строка.ФорматнаяСтрокаЗначения;
        
        ТабличныйДокумент.Вывести(СтрокаДанных);
        
        ПечатьПараметров(МакетПечати, ТабличныйДокумент, Строка);
                
    КонецЦикла;
        
    Возврат ТабличныйДокумент;
    
КонецФункции

&НаСервере
Функция ПечатьСпискаЧислоСеансов()
    
    ТабличныйДокумент = Новый ТабличныйДокумент;
    
    МакетПечати = Справочники.ОбнаружениеИнцидентовОперативное.ПолучитьМакет("МакетНастройки");
    
    Если Объект.ВариантТипаПоказателя = 0 Тогда
        Шапка = МакетПечати.ПолучитьОбласть("ШапкаИОПП");
    ИначеЕсли Объект.ВариантТипаПоказателя = 1 Тогда
        Шапка = МакетПечати.ПолучитьОбласть("ШапкаЧС_ИБ");
    ИначеЕсли Объект.ВариантТипаПоказателя = 2 Тогда
        Шапка = МакетПечати.ПолучитьОбласть("ШапкаЧС_ИБ_ВП");
    КонецЕсли;
    Шапка.Параметры.Заголовок = Объект.ТипИнцидента;
    ТабличныйДокумент.Вывести(Шапка);
    
    Для Каждого Строка Из Объект.ЧислоСеансов Цикл
        
        Если Объект.ВариантТипаПоказателя = 0 Тогда
            СтрокаДанных = МакетПечати.ПолучитьОбласть("СтрокаДанныхИОПП");
        ИначеЕсли Объект.ВариантТипаПоказателя = 1 Тогда
            СтрокаДанных = МакетПечати.ПолучитьОбласть("СтрокаДанныхЧС_ИБ");
            СтрокаДанных.Параметры.ИнформационнаяБаза = Строка.ИнформационнаяБаза;
        ИначеЕсли Объект.ВариантТипаПоказателя = 2 Тогда
            СтрокаДанных = МакетПечати.ПолучитьОбласть("СтрокаДанныхЧС_ИБ_ВП");
            СтрокаДанных.Параметры.ИнформационнаяБаза = Строка.ИнформационнаяБаза;
            СтрокаДанных.Параметры.ВидПриложения = Строка.ВидПриложения;
        КонецЕсли;
        
        СтрокаДанных.Параметры.Ном = Строка.НомерСтроки;
        СтрокаДанных.Параметры.Кластер = Строка.Кластер;
        СтрокаДанных.Параметры.Описание = Строка.Описание;
        СтрокаДанных.Параметры.ФорматЗначения = Строка.ФорматнаяСтрокаЗначения;
        
        ТабличныйДокумент.Вывести(СтрокаДанных);
        
        ПечатьПараметров(МакетПечати, ТабличныйДокумент, Строка);
        
    КонецЦикла;
    
    Возврат ТабличныйДокумент;
    
КонецФункции

&НаСервере
Процедура ПечатьПараметров(МакетПечати, ТабличныйДокумент, Строка)
    
    ПараметрыОтбора = Новый Структура("УникальныйИдентификаторСтроки", Строка.УникальныйИдентификаторСтроки);
    ТекущиеПараметры = Объект.ПараметрыОбнаружения.НайтиСтроки(ПараметрыОтбора);
        
    НомПодч = 0;
    Для Каждого Параметр Из ТекущиеПараметры Цикл
        
        НомПодч = НомПодч + 1;
        
        Если ЗначениеЗаполнено(Параметр.УровеньИнцидента) Тогда
            СтрокаДанных = МакетПечати.ПолучитьОбласть("СтрокаУровень");
            СтрокаДанных.Параметры.Уровень = Параметр.УровеньИнцидента;
        Иначе
            СтрокаДанных = МакетПечати.ПолучитьОбласть("Строка");
        КонецЕсли;
        
        СтрокаДанных.Параметры.НомПодч = Формат(Строка.НомерСтроки, "ЧН=0; ЧГ=0") + "." + Формат(НомПодч, "ЧН=0; ЧГ=0");
        СтрокаДанных.Параметры.ТипОбнаружения = Параметр.ТипОбнаружения;
        СтрокаДанных.Параметры.Условие = Параметр.УсловиеСрабатывания;
        СтрокаДанных.Параметры.Значение = Параметр.ЗначениеСрабатывания;
        
        ТабличныйДокумент.Вывести(СтрокаДанных);
        
    КонецЦикла;
    
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("ТипШага", ТипШага);
	Параметры.Свойство("ШаблонЕдиницыОборудования", ШаблонЕдиницыОборудования);
	Параметры.Свойство("Команда", КомандаАвтоматизации);
	Параметры.Свойство("КомандаОтката", КомандаОтката);
	Параметры.Свойство("НомерШага", НомерШага);
	Параметры.Свойство("УникальныйИдентификаторШага", УникальныйИдентификаторШага);
	Параметры.Свойство("Сценарий", Сценарий);
	Параметры.Свойство("Название", Название);
	Для каждого Шаблон Из Параметры.ШаблоныПараметров Цикл
		Строка = ШаблоныПараметров.Добавить();
		Строка.ИмяШаблона = Шаблон.ИмяШаблона;
	КонецЦикла;	
	Если ЗначениеЗаполнено(КомандаАвтоматизации) Тогда
		ПолучитьПараметрыКоманды(Сценарий, УникальныйИдентификаторШага, КомандаАвтоматизации, Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(КомандаОтката) Тогда
		ПолучитьПараметрыКоманды(Сценарий, УникальныйИдентификаторШага, КомандаОтката, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КомандаПриИзмененииНаСервере(Откат = Ложь)
	Если Откат Тогда
		Команда = КомандаОтката;
		ПараметрыДляОбработки = ПараметрыКомандыОтката;
	Иначе	
		Команда = КомандаАвтоматизации;
		ПараметрыДляОбработки = ПараметрыКоманды;
	КонецЕсли;
	
	Если ПустаяСтрока(Название) Тогда
		Название = Команда.Наименование;
	КонецЕсли;
	
	ТЗ = ДанныеФормыВЗначение(ПараметрыДляОбработки, Тип("ТаблицаЗначений"));
	АктуальнаяКопия = ТЗ.Скопировать();
	
	ТЗ.Очистить();
	// обязательные параметры
	ДанныеПараметров = Команда.ПараметрыОбязательные.ВыгрузитьКолонку("ИмяПараметра");
	Для каждого Элемент Из ДанныеПараметров Цикл
		Строка = ТЗ.Добавить();
		Строка.Параметр = Элемент;
		
		СтрокаАктуальнойКопии = АктуальнаяКопия.Найти(Элемент);
		
		Если СтрокаАктуальнойКопии <> Неопределено Тогда
			Строка.Значение = СтрокаАктуальнойКопии.Значение;
			Строка.ИзШаблона = СтрокаАктуальнойКопии.ИзШаблона;
		Иначе	
			Строка.Значение = "";
		КонецЕсли;	
			
		Строка.Обязательный = 0;
	КонецЦикла;	
	
	// дополнительные параметры
	ДанныеПараметров = Команда.ПараметрыДополнительные.ВыгрузитьКолонку("ИмяПараметра");
	Для каждого Элемент Из ДанныеПараметров Цикл
		Строка = ТЗ.Добавить();
		Строка.Параметр = Элемент;
		
		СтрокаАктуальнойКопии = АктуальнаяКопия.Найти(Элемент);
		
		Если СтрокаАктуальнойКопии <> Неопределено Тогда
			Строка.Значение = СтрокаАктуальнойКопии.Значение;
			Строка.ИзШаблона = СтрокаАктуальнойКопии.ИзШаблона;
		Иначе	
			Строка.Значение = "";
		КонецЕсли;	

		Строка.Обязательный = 2;
	КонецЦикла;	

	ТЗ.Сортировать("Обязательный, Параметр");
	
	Если Откат Тогда
		ЗначениеВДанныеФормы(ТЗ, ПараметрыКомандыОтката);
	Иначе	
		ЗначениеВДанныеФормы(ТЗ, ПараметрыКоманды);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметрыКоманды(Сценарий, УникальныйИдентификаторШага, Команда, ЭтоОткат)
	ТабРезультат = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьПараметрыКоманды(Сценарий, УникальныйИдентификаторШага, Команда, ЭтоОткат);
	
	Если ЭтоОткат Тогда
		ЗначениеВДанныеФормы(ТабРезультат, ПараметрыКомандыОтката);
		ПараметрыКомандыОтката.Сортировать("Обязательный, Параметр");
	Иначе	
		ЗначениеВДанныеФормы(ТабРезультат, ПараметрыКоманды);
		ПараметрыКоманды.Сортировать("Обязательный, Параметр");
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура КомандаПриИзменении(Элемент)
	Модифицированность = Истина;
	
	КомандаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ТипШага", ТипШага);
	ПараметрыЗакрытия.Вставить("ШаблонЕдиницыОборудования", ШаблонЕдиницыОборудования);
	ПараметрыЗакрытия.Вставить("Команда", КомандаАвтоматизации);
	ПараметрыЗакрытия.Вставить("КомандаОтката", КомандаОтката);
	ПараметрыЗакрытия.Вставить("НомерШага", НомерШага);
	ПараметрыЗакрытия.Вставить("УникальныйИдентификаторШага", УникальныйИдентификаторШага);
	ПараметрыЗакрытия.Вставить("ПараметрыКоманды", ПараметрыКоманды);
	ПараметрыЗакрытия.Вставить("ПараметрыКомандыОтката", ПараметрыКомандыОтката);
	ПараметрыЗакрытия.Вставить("Модифицированность", Модифицированность);
	ПараметрыЗакрытия.Вставить("Название", Название);
	
	Закрыть(ПараметрыЗакрытия);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткатаПриИзменении(Элемент)
	Модифицированность = Истина;
	Если Не ЗначениеЗаполнено(КомандаОтката) Тогда
		ПараметрыКомандыОтката.Очистить();
		Элементы.ГруппаПараметрыКомандыОтката.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПараметрыКомандыОтката.Видимость = Истина;
		КомандаПриИзмененииНаСервере(Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораШаблоновПараметров()
	СписокВыбора = Новый Массив;
	й=0;
	Для каждого ЭлементКоллекции Из ШаблоныПараметров Цикл
		Если ЭлементКоллекции.ИмяШаблона <> "" Тогда
			СписокВыбора.Добавить(ЭлементКоллекции.ИмяШаблона);
			й=й+1;
		КонецЕсли;	
	КонецЦикла;
	
	Элементы.ПараметрыКомандыЗначение.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	Элементы.ПараметрыКомандыОткатаЗначение.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Шаг") Тогда 
		ЗаполнитьСписокВыбораШаблоновПараметров();
	КонецЕсли;	
	УстановитьВидимостьДоступность();	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКомандыЗначениеПриИзменении(Элемент)
	Модифицированность = Истина;
	ТекДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ШаблоныПараметров.НайтиСтроки(Новый Структура("ИмяШаблона", ВРег(ТекДанные.Значение))).Количество() >0 Тогда
			ТекДанные.Значение = ВРег(ТекДанные.Значение);
			ТекДанные.ИзШаблона = Истина
		Иначе
			ТекДанные.ИзШаблона = Ложь;
		КонецЕсли;	
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ТипШагаПриИзменении(Элемент)
	Модифицированность  = Истина;
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЕдиницыОборудованияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НазваниеПриИзменении(Элемент)
	Модифицированность  = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	Если ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Шаг") Тогда
		Элементы.ШаблонЕдиницыОборудования.Видимость = Истина;
		Элементы.Команда.Видимость = Истина;
		Элементы.КомандаОтката.Видимость = Истина;
		Элементы.ГруппаПараметрыКоманд.Видимость = Истина;
	Иначе
		Элементы.ШаблонЕдиницыОборудования.Видимость = Ложь;
		Элементы.Команда.Видимость = Ложь;
		Элементы.КомандаОтката.Видимость = Ложь;
		Элементы.ГруппаПараметрыКоманд.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры	
#КонецОбласти
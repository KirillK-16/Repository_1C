#Область ПрограммныйИнтерфейсКлиент

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьСписокВыбораШаблоновПараметров();	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияТипШагаПриИзменении(Элемент)
	ОбработатьТипШага();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТипШага()
	Если Элементы.ДеревоСценария.ТекущиеДанные.ТипШага <> ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Шаг") Тогда
		Элементы.ДеревоСценария.ТекущиеДанные.Команда = ПредопределенноеЗначение("Справочник.КомандыАвтоматизации.ПустаяСсылка"); 
		Если ПустаяСтрока(Элементы.ДеревоСценария.ТекущиеДанные.Название) Тогда
			Элементы.ДеревоСценария.ТекущиеДанные.Название = Элементы.ДеревоСценария.ТекущиеДанные.ТипШага;
		КонецЕсли;	
	КонецЕсли;
		
	Если Элементы.ДеревоСценария.ТекущиеДанные.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Старт") Тогда
		Элементы.ДеревоСценария.ТекущиеДанные.ИндексКартинки = 1;
	ИначеЕсли Элементы.ДеревоСценария.ТекущиеДанные.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Шаг") Тогда
		Элементы.ДеревоСценария.ТекущиеДанные.ИндексКартинки = 2;
	ИначеЕсли Элементы.ДеревоСценария.ТекущиеДанные.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Разделение") Тогда
		Элементы.ДеревоСценария.ТекущиеДанные.ИндексКартинки = 3;
	ИначеЕсли Элементы.ДеревоСценария.ТекущиеДанные.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Ветка") Тогда
		Элементы.ДеревоСценария.ТекущиеДанные.ИндексКартинки = 4;
	ИначеЕсли Элементы.ДеревоСценария.ТекущиеДанные.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Условие") Тогда
		Элементы.ДеревоСценария.ТекущиеДанные.ИндексКартинки = 5;
	ИначеЕсли Элементы.ДеревоСценария.ТекущиеДанные.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Цикл") Тогда
		Элементы.ДеревоСценария.ТекущиеДанные.ИндексКартинки = 6;
	ИначеЕсли Элементы.ДеревоСценария.ТекущиеДанные.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Вариант") Тогда
		Элементы.ДеревоСценария.ТекущиеДанные.ИндексКартинки = 7;
	ИначеЕсли Элементы.ДеревоСценария.ТекущиеДанные.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.ВспомогательныеШаги") Тогда
		Элементы.ДеревоСценария.ТекущиеДанные.ИндексКартинки = 8;
	Иначе
		Элементы.ДеревоСценария.ТекущиеДанные.ИндексКартинки = 0;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ТипШага <> ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.ПустаяСсылка") Тогда
		Если Модифицированность Тогда
			Записать();
		КонецЕсли;	
		
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ОбработатьДанныеШага", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТипШага", ТекущиеДанные.ТипШага);
		ПараметрыОткрытия.Вставить("ШаблонЕдиницыОборудования", ТекущиеДанные.ШаблонЕдиницыОборудования);
		ПараметрыОткрытия.Вставить("Команда", ТекущиеДанные.Команда);
		ПараметрыОткрытия.Вставить("КомандаОтката", ТекущиеДанные.КомандаОтката);
		ПараметрыОткрытия.Вставить("НомерШага", ТекущиеДанные.ПолучитьИдентификатор());
		ПараметрыОткрытия.Вставить("УникальныйИдентификаторШага", ТекущиеДанные.УникальныйИдентификаторШага);
		ПараметрыОткрытия.Вставить("Сценарий", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ШаблоныПараметров", Объект.ШаблоныЗаполненияПараметров);
		ПараметрыОткрытия.Вставить("Название", ТекущиеДанные.Название);
		
		ОткрытьФорму("Справочник.СценарииАвтоматизации.Форма.ФормаСозданияШага", ПараметрыОткрытия, ЭтотОбъект,,,,Оповещение);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеШага(Параметры, ДополнительныеПараметры) Экспорт
	Если Параметры <> Неопределено Тогда
		ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
		
		СтруктураПараметров = Новый Структура("ТипШага, ШаблонЕдиницыОборудования, Команда, КомандаОтката, Модифицированность, Название");
		
		Параметры.Свойство("ТипШага", СтруктураПараметров.ТипШага);
		Параметры.Свойство("ШаблонЕдиницыОборудования", СтруктураПараметров.ШаблонЕдиницыОборудования);
		Параметры.Свойство("Команда", СтруктураПараметров.Команда);
		Параметры.Свойство("КомандаОтката", СтруктураПараметров.КомандаОтката);
		Параметры.Свойство("Модифицированность", СтруктураПараметров.Модифицированность);
		Параметры.Свойство("Название", СтруктураПараметров.Название);
		
		Если ПустаяСтрока(СтруктураПараметров.Название) Тогда
			СтруктураПараметров.Название = ?(ЗначениеЗаполнено(СтруктураПараметров.Команда), СтруктураПараметров.Команда , СтруктураПараметров.ТипШага);
		КонецЕсли;
		
		Если СтруктураПараметров.Модифицированность Тогда
			Модифицированность = Истина;
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураПараметров);
		КонецЕсли;
		
		Если Параметры.Свойство("ПараметрыКоманды") И Параметры.Свойство("ПараметрыКомандыОтката") И Параметры.Свойство("НомерШага") И Параметры.Свойство("УникальныйИдентификаторШага") Тогда
			ПараметрыКомандАвтоматизации.Очистить();
			
			//основные
			Для каждого СтрокаПараметра Из Параметры.ПараметрыКоманды Цикл
				НоваяСтрока = ПараметрыКомандАвтоматизации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПараметра);
				НоваяСтрока.УникальныйИдентификаторШага = Параметры.УникальныйИдентификаторШага;
				
				Модифицированность = Истина;
			КонецЦикла;
			
			Если ПараметрыКомандАвтоматизации.Количество() > 0 Тогда
				ИзменитьПараметрыВОбъекте(Параметры.УникальныйИдентификаторШага, Ложь, ПараметрыКомандАвтоматизации);
			КонецЕсли;	

			ПараметрыКомандАвтоматизации.Очистить();
			
			//для отката
			Для каждого СтрокаПараметра Из Параметры.ПараметрыКомандыОтката Цикл
				НоваяСтрока = ПараметрыКомандАвтоматизации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПараметра);
				НоваяСтрока.УникальныйИдентификаторШага = Параметры.УникальныйИдентификаторШага;
				НоваяСтрока.ДляОтката = Истина;
				
				Модифицированность = Истина;
			КонецЦикла;
			
			Если ПараметрыКомандАвтоматизации.Количество() > 0 Тогда
				ИзменитьПараметрыВОбъекте(Параметры.УникальныйИдентификаторШага, Истина, ПараметрыКомандАвтоматизации);
			КонецЕсли;	
			
			ПараметрыКомандАвтоматизации.Очистить();
		КонецЕсли;

	КонецЕсли;
	
	ДеревоСценарияПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияПриИзменении(Элемент)
	ТекущиеДанныеДерева =  Элемент.ТекущиеДанные;
	Если ТекущиеДанныеДерева <> Неопределено Тогда
		Если ТекущиеДанныеДерева.ТипШага.Пустая() 
			И ТекущиеДанныеДерева.ШаблонЕдиницыОборудования.Пустая() 
			И ТекущиеДанныеДерева.Команда.Пустая() 
			И ТекущиеДанныеДерева.ВключенПоУмолчанию = Ложь Тогда
			ТекущиеДанныеДерева.ВключенПоУмолчанию  = Истина;
		КонецЕсли; 
		
		//..-
		Если ТекущиеДанныеДерева.УникальныйИдентификаторШага = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
			ТекущиеДанныеДерева.УникальныйИдентификаторШага = Новый УникальныйИдентификатор;
		КонецЕсли;	
		//..-
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ИзменитьПараметрыВОбъекте(ТекущиеДанные.УникальныйИдентификаторШага, ОтобразитьПараметрыОтката, ПараметрыКомандАвтоматизации);
	КонецЕсли;	
	Объект.ШагиАвтоматизации.Очистить();
	ЭлементыДерева = ДеревоСценария.ПолучитьЭлементы();
	СохранитьДеревоВТаблицуЗначений(ЭлементыДерева, Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"), -1, -1);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДеревоВТаблицуЗначений(ЭлементыДерева, Родитель, НомерШага, Знач НомерШагаРодителя)
	Для каждого Элемент Из ЭлементыДерева Цикл
		НомерШага = НомерШага + 1;
		
		НоваяСтрока = Объект.ШагиАвтоматизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);

		НоваяСтрока.НомерШага	= НомерШага;
		НоваяСтрока.ШагРодитель	= НомерШагаРодителя;
		НоваяСтрока.УникальныйИдентификаторШагаРодителя	= Родитель;
		
		СохранитьДеревоВТаблицуЗначений(Элемент.ПолучитьЭлементы(), Элемент.УникальныйИдентификаторШага, НомерШага, НомерШага);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		Если Копирование Тогда
			Если Элемент.ТекущиеДанные.ТипШага <> ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Старт") Тогда 
				
				ТекДанныеДерева = Элемент.ТекущиеДанные;
				РодительЭтогоЭлемента = Элемент.ТекущиеДанные.ПолучитьРодителя();
				
				ДобавитьДочерниеЭлементыВКопию(РодительЭтогоЭлемента, ТекДанныеДерева)
			КонецЕсли;
			Отказ = Истина;
		Иначе
			Если Элемент.ТекущиеДанные.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Шаг") Тогда //у Шага не может быть дочерних, добавляем в тот же уровень
				РодительЭтогоЭлемента = Элемент.ТекущиеДанные.ПолучитьРодителя();
				ЭлементыРодителя = РодительЭтогоЭлемента.ПолучитьЭлементы();
				ДобавляемыйЭлемент = ЭлементыРодителя.Добавить();
				
				Элемент.ТекущаяСтрока = ДобавляемыйЭлемент.ПолучитьИдентификатор();
				
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДочерниеЭлементыВКопию(Родитель, ТекДанныеДерева)
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	
	НовыйЭлемент = ЭлементыРодителя.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ТекДанныеДерева);
	НовыйЭлемент.УникальныйИдентификаторШага = Новый УникальныйИдентификатор;
	
	ПараметрыШага = Объект.ПараметрыШаговАвтоматизации.НайтиСтроки(Новый Структура("УникальныйИдентификаторШага", ТекДанныеДерева.УникальныйИдентификаторШага));
	Для Каждого Параметр Из ПараметрыШага Цикл
		НовыйПараметр = Объект.ПараметрыШаговАвтоматизации.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПараметр, Параметр);
		НовыйПараметр.УникальныйИдентификаторШага = НовыйЭлемент.УникальныйИдентификаторШага;
	КонецЦикла;	
	
	Элементы.ДеревоСценария.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
	
	ДочерниеЭлементыИсходные = ТекДанныеДерева.ПолучитьЭлементы();
	Для Каждого Элемент Из ДочерниеЭлементыИсходные Цикл
		ДобавитьДочерниеЭлементыВКопию(НовыйЭлемент, Элемент);
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоСценарияТипШагаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//заглушка
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Условие")
		ИЛИ ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Цикл") Тогда
		ПоказатьПредупреждение(, НСтр("ru='Работа с циклами и условиями в данной версии не доступна'"));
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияВключенПоУмолчаниюПриИзменении(Элемент)
	РаботаСоСценариямиАвтоматизацииКлиент.ДеревоФлагПриИзменении(Элемент, "ВключенПоУмолчанию")
КонецПроцедуры

&НаКлиенте
Процедура ЦветЗадачВКалендареПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЦветЗадачВКалендареНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборЦвета", ЭтотОбъект);
	Диалог = Новый ДиалогВыбораЦвета;
	Диалог.Цвет = ЦветЗадачВКалендаре;
	Диалог.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЦвета(Параметры, ДополнительныеПараметры) Экспорт
	Если Параметры <> Неопределено И ТипЗнч(Параметры) = Тип("Цвет") Тогда
		ЦветЗадачВКалендаре = Параметры;
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныЗаполненияПараметровИмяШаблонаПриИзменении(Элемент)
	ИмяШаблона = ВРег(Элементы.ШаблоныЗаполненияПараметров.ТекущиеДанные.ИмяШаблона);
	Элементы.ШаблоныЗаполненияПараметров.ТекущиеДанные.ИмяШаблона = ИмяШаблона;
	Если Объект.ШаблоныЗаполненияПараметров.НайтиСтроки(Новый Структура("ИмяШаблона", ИмяШаблона)).Количество() > 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Дубль имени шаблона. Имя дублирующего элемента очищено'"));
		Элементы.ШаблоныЗаполненияПараметров.ТекущиеДанные.ИмяШаблона  = "";
	КонецЕсли;
	
	Для Каждого Параметр Из ПараметрыКомандАвтоматизации Цикл
		Если Параметр.ИзШаблона Тогда//ссылка на шаблон
			Шаблон = Параметр.Значение;
			Если Объект.ШаблоныЗаполненияПараметров.НайтиСтроки(Новый Структура("ИмяШаблона", Шаблон)).Количество()=0 Тогда
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = "Очищен параметр " + Параметр.Параметр;
				Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
				Сообщение.Сообщить();
				
				Параметр.Значение = "";
				Параметр.ИзШаблона = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	Для Каждого Параметр Из Объект.ПараметрыШаговАвтоматизации Цикл
		Если Параметр.ИзШаблона Тогда//ссылка на шаблон
			Шаблон = Параметр.Значение;
			Если Объект.ШаблоныЗаполненияПараметров.НайтиСтроки(Новый Структура("ИмяШаблона", Шаблон)).Количество()=0 Тогда
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = "Очищен параметр " + Параметр.Параметр;
				Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
				Сообщение.Сообщить();
				
				Параметр.Значение = "";
				Параметр.ИзШаблона = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ШаблоныЗаполненияПараметровОтносительнаяСсылкаНаМетаданныеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	Если Элемент.Родитель.Родитель.ТекущиеДанные.СпособЗаполнения = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПараметровКоманды.ИзОбъектаМетаданных")  
		И Объект.МетаданныеСвязанныхОбъектов.Количество() > 0 Тогда
		ДанныеВыбораИзСписка = РаботаСоСценариямиАвтоматизацииСервер.ОбновитьСписокВыбораОтносительныхСсылок(Объект.МетаданныеСвязанныхОбъектов);
		Элемент.СписокВыбора.ЗагрузитьЗначения(ДанныеВыбораИзСписка.ВыгрузитьЗначения()); 
	ИначеЕсли Элемент.Родитель.Родитель.ТекущиеДанные.СпособЗаполнения = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПараметровКоманды.ИзКонфиденциальногоХранилища") Тогда	
		Элемент.СписокВыбора.Вставить(0, "КонфиденциальныеДанные");
	Иначе	
		Элемент.СписокВыбора.Вставить(0, "Строка");
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ШаблоныЗаполненияПараметровПриИзменении(Элемент)
	ЗаполнитьСписокВыбораШаблоновПараметров();	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораШаблоновПараметров()
	Элементы.ПараметрыКомандАвтоматизацииЗначение.СписокВыбора.Очистить();
	й=0;
	Для каждого ЭлементКоллекции Из Объект.ШаблоныЗаполненияПараметров Цикл
		Если ЭлементКоллекции.ИмяШаблона <> "" Тогда
			Элементы.ПараметрыКомандАвтоматизацииЗначение.СписокВыбора.Вставить(й, ЭлементКоллекции.ИмяШаблона);
			й=й+1;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЗаполненияПараметровПередУдалением(Элемент, Отказ)
	ИзменитьПараметрыПриИзмененииШаблона(Элемент.ТекущиеДанные.ИмяШаблона, "");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПараметрыПриИзмененииШаблона(ИмяШаблона, НовоеИмяШаблона)
	ПараметрыДляИзменения = ПараметрыКомандАвтоматизации.НайтиСтроки(Новый Структура("Значение, ИзШаблона", ИмяШаблона, Истина));
	Для Каждого Строка Из ПараметрыДляИзменения Цикл
		Если НовоеИмяШаблона = "" Тогда
			Строка.Значение = "";
			Строка.ИзШаблона = Ложь;
		Иначе
			Строка.Значение = НовоеИмяШаблона;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоСценарияПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		Если ПараметрыКомандАвтоматизации.Количество() > 0 Тогда
			ИзменитьПараметрыВОбъекте(ПараметрыКомандАвтоматизации[0].УникальныйИдентификаторШага, ОтобразитьПараметрыОтката, ПараметрыКомандАвтоматизации);	
			ПараметрыКомандАвтоматизации.Очистить();
		КонецЕсли;
		ДеревоСценарияПриАктивизацииСтрокиНаСервере(ТекущиеДанные.УникальныйИдентификаторШага, ?(ОтобразитьПараметрыОтката, ТекущиеДанные.КомандаОтката, ТекущиеДанные.Команда), ОтобразитьПараметрыОтката);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПараметрыВОбъекте(УникальныйИдентификаторШага, ДляОтката, ПараметрыКоманды)
	
	СтруктураПараметров = Новый Структура("УникальныйИдентификаторШага, ДляОтката", УникальныйИдентификаторШага, ДляОтката);
	
	ТекущаяВыборкаПараметров = Объект.ПараметрыШаговАвтоматизации.НайтиСтроки(СтруктураПараметров);
	
	КолВо = ТекущаяВыборкаПараметров.Количество(); 
	Если (ПараметрыКоманды.Количество() - ПараметрыКоманды.НайтиСтроки(Новый Структура("Значение","")).Количество()) <> КолВо Тогда
		Модифицированность = Истина;
	КонецЕсли;
		
	Для й=1 По КолВо Цикл
		Если Не Модифицированность Тогда
			АктуальныеПараметры = ПараметрыКоманды.НайтиСтроки(Новый Структура("УникальныйИдентификаторШага, ДляОтката, Параметр", СтруктураПараметров.УникальныйИдентификаторШага, ТекущаяВыборкаПараметров[КолВо-й].ДляОтката, ТекущаяВыборкаПараметров[КолВо-й].Параметр));
			Если АктуальныеПараметры.Количество() = 0 
				Или АктуальныеПараметры[0].Значение <> ТекущаяВыборкаПараметров[КолВо-й].Значение
				Или АктуальныеПараметры[0].ИзШаблона <> ТекущаяВыборкаПараметров[КолВо-й].ИзШаблона Тогда
					Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Если Модифицированность Тогда
		Для й=1 По КолВо Цикл
			Объект.ПараметрыШаговАвтоматизации.Удалить(ТекущаяВыборкаПараметров[КолВо-й]);
		КонецЦикла;	
		Для Каждого Строка Из ПараметрыКоманды Цикл
			Если Строка.Значение <> "" Тогда
				НоваяСтрока = Объект.ПараметрыШаговАвтоматизации.Добавить();
				НоваяСтрока.УникальныйИдентификаторШага = Строка.УникальныйИдентификаторШага;
				НоваяСтрока.Параметр = Строка.Параметр;
				НоваяСтрока.Значение = Строка.Значение;
				НоваяСтрока.ДляОтката = Строка.ДляОтката;
				НоваяСтрока.ИзШаблона = Строка.ИзШаблона;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры			

&НаКлиенте
Процедура ДеревоСценарияВключенПоУмолчаниюОткатПриИзменении(Элемент)
	РаботаСоСценариямиАвтоматизацииКлиент.ДеревоФлагПриИзменении(Элемент, "ВключенПоУмолчаниюОткат")
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПараметрыОткатаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ИзменитьПараметрыВОбъекте(ТекущиеДанные.УникальныйИдентификаторШага, Не ОтобразитьПараметрыОтката, ПараметрыКомандАвтоматизации);
		ДеревоСценарияПриАктивизацииСтрокиНаСервере(ТекущиеДанные.УникальныйИдентификаторШага, ?(ОтобразитьПараметрыОтката, ТекущиеДанные.КомандаОтката, ТекущиеДанные.Команда), ОтобразитьПараметрыОтката);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКомандАвтоматизацииЗначениеПриИзменении(Элемент)
	ТекДанные = Элементы.ПараметрыКомандАвтоматизации.ТекущиеДанные;
	ПриИзмененииИсточникаЗначенияПараметра(ТекДанные);		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИсточникаЗначенияПараметра(ТекДанные)
	Если ТекДанные <> Неопределено Тогда 
		Модифицированность = Истина;
		СтрокиШаблонов = Объект.ШаблоныЗаполненияПараметров.НайтиСтроки(Новый Структура("ИмяШаблона", ВРег(ТекДанные.Значение)));
		Если СтрокиШаблонов.Количество() >0 Тогда
			ТекДанные.Значение = ВРег(ТекДанные.Значение);
			ТекДанные.ИзШаблона = Истина
		Иначе
			ТекДанные.ИзШаблона = Ложь;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЗаполненияПараметровСпособЗаполненияПриИзменении(Элемент)
	ПриИзмененииПриродыШаблона();
КонецПроцедуры


&НаКлиенте
Процедура ПриИзмененииПриродыШаблона()
	ТекДанные = Элементы.ШаблоныЗаполненияПараметров.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда  
		РаботаСоСценариямиАвтоматизацииКлиент.ЗадатьПустойОбъектИЗначениеСтрокиШаблона(ТекДанные, Истина);
		РаботаСоСценариямиАвтоматизацииКлиент.УстановитьРежимРедактированияЗначения(ТекДанные.СпособЗаполнения, Элементы.ШаблоныЗаполненияПараметровОтносительнаяСсылкаНаМетаданные, Элементы.ШаблоныЗаполненияПараметровОбъект);
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоСценарияТипШагаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	
	ТекущиеДанныеДерева = Элементы.ДеревоСценария.ТекущиеДанные;
	Если ТекущиеДанныеДерева <> Неопределено Тогда
		РодительЭтогоЭлемента = ТекущиеДанныеДерева.ПолучитьРодителя();
		
		Если РодительЭтогоЭлемента = Неопределено Тогда //добавляем в корень
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Старт"),,,БиблиотекаКартинок.ПиктограммаСтарт);
		ИначеЕсли РодительЭтогоЭлемента.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Старт") Тогда
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Разделение"),,,БиблиотекаКартинок.ПиктограммаПараллельноеВыполнение);
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.ВспомогательныеШаги"),,,БиблиотекаКартинок.ПиктограммаВспомогательныйБлок);
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Шаг"),,,БиблиотекаКартинок.ПиктограммаШаг);
		ИначеЕсли РодительЭтогоЭлемента.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Разделение") Тогда
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Ветка"),,,БиблиотекаКартинок.ПиктограммаВетка);
		ИначеЕсли РодительЭтогоЭлемента.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Ветка") Тогда
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Шаг"),,,БиблиотекаКартинок.ПиктограммаШаг);
		ИначеЕсли РодительЭтогоЭлемента.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.ВспомогательныеШаги") Тогда
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Разделение"),,,БиблиотекаКартинок.ПиктограммаПараллельноеВыполнение);
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Шаг"),,,БиблиотекаКартинок.ПиктограммаШаг);
		ИначеЕсли РодительЭтогоЭлемента.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Шаг") Тогда
			
		Иначе
			
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
	
#Область ПрограммныйИнтерфейсСервер

&НаСервере
Процедура ВосстановитьДеревоИзТаблицыЗначений()
	Дерево = РаботаСоСценариямиАвтоматизацииСервер.ВосстановитьДеревоСценарияИзТаблицыЗначений(Объект);
	ЗначениеВДанныеФормы(Дерево, ДеревоСценария);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВосстановитьДеревоИзТаблицыЗначений();
	МЗ = РегистрыСведений.ОформлениеЗадачАвтоматизацииВКалендаре.СоздатьМенеджерЗаписи();
	МЗ.Сценарий = Объект.Ссылка;
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда
		ЦветЗадачВКалендаре = МЗ.ЦветФона.Получить();
	Иначе
		ЦветЗадачВКалендаре = WebЦвета.БледноЗеленый;
	КонецЕсли;
	
	Для каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		Элементы.МетаданныеСвязанныхОбъектовИмяОбъекта.СписокВыбора.Добавить(ОбъектМетаданных.ПолноеИмя());
	КонецЦикла;
	
	Объект.ШаблоныЗаполненияПараметров.Сортировать("ИмяШаблона");
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	НЗ = РегистрыСведений.ОформлениеЗадачАвтоматизацииВКалендаре.СоздатьНаборЗаписей();
	НЗ.Отбор.Сценарий.Установить(Объект.Ссылка);
	Запись = НЗ.Добавить();
	Запись.Сценарий = Объект.Ссылка;
	Запись.ЦветФона = Новый ХранилищеЗначения(ЦветЗадачВКалендаре);
	
	Попытка
		НЗ.Записать();
	Исключение	
		ЗаписьЖурналаРегистрации(НСтр("ru='Запись шаблона сценария'", Метаданные.ОсновнойЯзык.КодЯзыка),
		       УровеньЖурналаРегистрации.Ошибка,,,
		       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Процедура ДеревоСценарияПриАктивизацииСтрокиНаСервере(Знач УникальныйИдентификаторШага, Знач Команда, Знач ЭтоОткат) 
	ПараметрыКомандАвтоматизации.Очистить();
	НайденныеСтроки = Объект.ПараметрыШаговАвтоматизации.НайтиСтроки(Новый Структура("УникальныйИдентификаторШага, ДляОтката", УникальныйИдентификаторШага, ЭтоОткат));
	
	Для Каждого Источник Из НайденныеСтроки Цикл
		Приемник = ПараметрыКомандАвтоматизации.Добавить();
		ЗаполнитьЗначенияСвойств(Приемник, Источник);
		Приемник.Обязательный = 3;
	КонецЦикла;	

	ТабРезультат = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьПараметрыКоманды(Объект.Ссылка, УникальныйИдентификаторШага, Команда, ЭтоОткат);
	Для каждого Строка Из ТабРезультат Цикл
		НайденнаяСтрока = Объект.ПараметрыШаговАвтоматизации.НайтиСтроки(Новый Структура("УникальныйИдентификаторШага, ДляОтката, Параметр", Строка.УникальныйИдентификаторШага, Строка.ДляОтката, Строка.Параметр));
		Если НайденнаяСтрока.Количество() = 0 Тогда
			Приемник = ПараметрыКомандАвтоматизации.Добавить();
			ЗаполнитьЗначенияСвойств(Приемник, Строка);
		КонецЕсли;
		
		СтрокиПараметров = ПараметрыКомандАвтоматизации.НайтиСтроки(Новый Структура("УникальныйИдентификаторШага, ДляОтката, Параметр", Строка.УникальныйИдентификаторШага, Строка.ДляОтката, Строка.Параметр));
		Если СтрокиПараметров.Количество() > 0 Тогда
			СтрокиПараметров[0].Обязательный = Строка.Обязательный;
		КонецЕсли;	
	КонецЦикла;
	
	ПараметрыКомандАвтоматизации.Сортировать("Обязательный, Параметр");
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКомандАвтоматизацииПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		ЗначениеШаблона = Неопределено;
		ПараметрыПеретаскивания.Значение[0].Свойство("ИмяШаблона", ЗначениеШаблона);
		Если ЗначениеШаблона <> Неопределено Тогда
			ТекДанные = Элементы.ПараметрыКомандАвтоматизации.ДанныеСтроки(Строка);
			Если ТекДанные <> Неопределено Тогда
				ТекДанные.Значение = ЗначениеШаблона;
				ТекДанные.ИзШаблона = Истина;
				
				ПриИзмененииИсточникаЗначенияПараметра(ТекДанные);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныЗаполненияПараметровОтносительнаяСсылкаНаМетаданныеПриИзменении(Элемент)
	ПриИзмененииПриродыШаблона();
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныЗаполненияПараметровПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ШаблоныЗаполненияПараметров.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда  
		РаботаСоСценариямиАвтоматизацииКлиент.УстановитьРежимРедактированияЗначения(ТекДанные.СпособЗаполнения, Элементы.ШаблоныЗаполненияПараметровОтносительнаяСсылкаНаМетаданные, Элементы.ШаблоныЗаполненияПараметровОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныЗаполненияПараметровОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ШаблоныЗаполненияПараметров.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.СпособЗаполнения = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПараметровКоманды.РучнойВвод") Тогда
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатВыбораПараметров", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СписокШаблонов", Новый СписокЗначений);
		ПараметрыОткрытия.Вставить("ТекущееЗначение", Элемент.ТекстРедактирования);
		
		ДанныеВыбора = Элемент.ТекстРедактирования;
			
		Для Каждого Строка Из Объект.ШаблоныЗаполненияПараметров Цикл
			ПараметрыОткрытия.СписокШаблонов.Добавить(Строка.ИмяШаблона);
		КонецЦикла;	
		
		ОткрытьФорму("ОбщаяФорма.ФормированиеСоставногоПараметраСценария", ПараметрыОткрытия, ЭтотОбъект,,,,Оповещение);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВыбораПараметров(ВозвращенныеПараметры, ДополнительныеПараметры) Экспорт
	Если ВозвращенныеПараметры <> Неопределено И ВозвращенныеПараметры.Свойство("РезультирующееВыражение") Тогда
		ТекДанные = Элементы.ШаблоныЗаполненияПараметров.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ТекДанные.Объект = ВозвращенныеПараметры.РезультирующееВыражение;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЗаполненияПараметровПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Объект.ШаблоныЗаполненияПараметров.Сортировать("ИмяШаблона");	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаМанифест Тогда
		Манифест = СформироватьМанифестСценария(ДеревоСценария);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция СформироватьМанифестСценария(Знач ДеревоСценария)
	МакетМанифеста = ПолучитьМакетМанифеста();
	ТабДок = Новый ТабличныйДокумент;

	ОбластьОписание = МакетМанифеста.ПолучитьОбласть("ЗаголовокПротокола");
	ОбластьОписание.Параметры.Описание = Объект.Описание;
	
	ТабДок.Вывести(ОбластьОписание);
	
	ОбластьШапка = МакетМанифеста.ПолучитьОбласть("Шапка");
	ТабДок.Вывести(ОбластьШапка);
	
	ВывестиУровеньИерархииДереваВМанифест(ДеревоСценария, МакетМанифеста, ТабДок);	
	
	Возврат ТабДок;

КонецФункции

&НаСервере
Функция ПолучитьМакетМанифеста()
	Возврат Справочники.СценарииАвтоматизации.ПолучитьМакет("МанифестСценария");
КонецФункции	

&НаСервере
Процедура ВывестиУровеньИерархииДереваВМанифест(УзелДерева, МакетМанифеста, ТабДок)
	ПодчиненныеЭлементыДерева = УзелДерева.ПолучитьЭлементы();
	
	Для Каждого Строка Из ПодчиненныеЭлементыДерева Цикл
		ОбластьСтрока = МакетМанифеста.ПолучитьОбласть("СтрокаПротокола");
		
		ОбластьСтрока.Параметры.Шаг = Строка.Название;
		Если Строка.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Старт") Тогда
			ОбластьСтрока.Параметры.ТипШага = БиблиотекаКартинок.ПиктограммаСтарт;
		ИначеЕсли Строка.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Шаг") Тогда
			ОбластьСтрока.Параметры.ТипШага = БиблиотекаКартинок.ПиктограммаШаг;
			ОбластьСтрока.Параметры.ОписаниеШага = Строка.Команда.Описание;
		ИначеЕсли Строка.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Разделение") Тогда
			ОбластьСтрока.Параметры.ТипШага = БиблиотекаКартинок.ПиктограммаПараллельноеВыполнение;
		ИначеЕсли Строка.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Ветка") Тогда
			ОбластьСтрока.Параметры.ТипШага = БиблиотекаКартинок.ПиктограммаВетка;
		ИначеЕсли Строка.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Условие") Тогда
			ОбластьСтрока.Параметры.ТипШага = БиблиотекаКартинок.ПиктограммаУсловие;
		ИначеЕсли Строка.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Цикл") Тогда
			ОбластьСтрока.Параметры.ТипШага = БиблиотекаКартинок.ПиктограммаЦикл;
		ИначеЕсли Строка.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.Вариант") Тогда
			ОбластьСтрока.Параметры.ТипШага = БиблиотекаКартинок.ПиктограммаВариант;
		ИначеЕсли Строка.ТипШага = ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемыСценария.ВспомогательныеШаги") Тогда
			ОбластьСтрока.Параметры.ТипШага = БиблиотекаКартинок.ПиктограммаВспомогательныйБлок;
		КонецЕсли;	

		ОбластьСтрока.Параметры.Роль = Строка.ШаблонЕдиницыОборудования;
		
		ТабДок.Вывести(ОбластьСтрока);
		
		ВывестиУровеньИерархииДереваВМанифест(Строка, МакетМанифеста, ТабДок);
	КонецЦикла;	
КонецПроцедуры	

#КонецОбласти




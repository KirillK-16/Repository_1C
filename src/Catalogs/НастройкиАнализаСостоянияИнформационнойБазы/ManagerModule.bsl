
Функция АнализПриростДанных(Параметры, ИнформационнаяБаза = Неопределено, ДатаАнализа = Неопределено) Экспорт
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("ИнформационнаяБаза", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеБазы"));
	ТаблицаРезультата.Колонки.Добавить("ОписаниеПрирост", Новый ОписаниеТипов("Строка"));
	ТаблицаРезультата.Колонки.Добавить("ПродуктивнаяПрирост", Новый ОписаниеТипов("Булево"));
	
	ТаблицаМетаданных = Новый ТаблицаЗначений;
	ТаблицаМетаданных.Колонки.Добавить("Период");
	ТаблицаМетаданных.Колонки.Добавить("Значение");
	ТаблицаМетаданных.Колонки.Добавить("ОбъектМетаданных");
	
		
	ТекущаяДата = ?(ЗначениеЗаполнено(ДатаАнализа), ДатаАнализа, НачалоДня(ТекущаяДата()));
	Конфигурации = Параметры.Конфигурации.ВыгрузитьКолонку("Конфигурация");
	МетаДанныеДляАнализа = Параметры.ПриростДанных.ВыгрузитьКолонку("ОбъектМетаданных");
	ДатаНачала = ДобавитьМесяц(ТекущаяДата, -Параметры.ГлубинаАнализаДанных);
	
	//Получим данные
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ИнформацияИсторияПодробно.ИнформационнаяБаза КАК ИнформационнаяБаза
	                      |ПОМЕСТИТЬ ВТ_ИБ
	                      |ИЗ
	                      |	РегистрСведений.ИнформацияИсторияПодробно КАК ИнформацияИсторияПодробно
	                      |ГДЕ
	                      |	ИнформацияИсторияПодробно.ПериодЗаписи МЕЖДУ ДОБАВИТЬКДАТЕ(&ПериодЗаписи, ДЕНЬ, -21) И &ПериодЗаписи
	                      |	И ИнформацияИсторияПодробно.Конфигурация В(&Конфигурации)
						  |	//%ДопОтбор
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ИнформационнаяБаза
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ОперацииСтатистикиКонфигурацииИстория.ИнформационнаяБаза КАК ИнформационнаяБаза,
	                      |	ОперацииСтатистикиКонфигурацииИстория.ОперацияСтатистикиКонфигурации КАК ОбъектМетаданных,
	                      |	ОперацииСтатистикиКонфигурацииИстория.Период КАК Период,
	                      |	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(2015, 1, 1), ОперацииСтатистикиКонфигурацииИстория.Период, СЕКУНДА) КАК Секунды,
	                      |	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(2015, 1, 1), ОперацииСтатистикиКонфигурацииИстория.Период, ДЕНЬ) КАК ВремяПриведенное,
	                      |	ОперацииСтатистикиКонфигурацииИстория.Значение КАК Значение
	                      |ИЗ
	                      |	ВТ_ИБ КАК ВТ_ИБ
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииСтатистикиКонфигурацииИстория КАК ОперацииСтатистикиКонфигурацииИстория
	                      |		ПО ВТ_ИБ.ИнформационнаяБаза = ОперацииСтатистикиКонфигурацииИстория.ИнформационнаяБаза
	                      |			И (ОперацииСтатистикиКонфигурацииИстория.ОперацияСтатистикиКонфигурации В (&МетаДанные))
	                      |			И (ОперацииСтатистикиКонфигурацииИстория.Период > &ДатаНачала)
	                      |ИТОГИ ПО
	                      |	ИнформационнаяБаза,
	                      |	ОбъектМетаданных");
	Запрос.УстановитьПараметр("ПериодЗаписи",	ТекущаяДата);
	Запрос.УстановитьПараметр("Конфигурации",	Конфигурации);
	Запрос.УстановитьПараметр("МетаДанные",		МетаДанныеДляАнализа);
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	
	Если ЗначениеЗаполнено(ИнформационнаяБаза) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//%ДопОтбор","И ИнформацияИсторияПодробно.ИнформационнаяБаза = &ИнформационнаяБаза");
		Запрос.УстановитьПараметр("ИнформационнаяБаза",ИнформационнаяБаза);
	КонецЕсли;
	
	ВыборкаИб = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИб.Следующий() Цикл
		
		ВыборкаМД = ВыборкаИБ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		РезультатАнализа = "Анализ прироста данных:" + Символы.ПС +
				?(Параметры.ИспользоватьВесовыеКоэффициенты,"По весовым коэффициентам.","По максимальному коэффициенту корреляции.");
		КоэффициентКорреляции = 0;
		Продуктивная = Ложь;
		ТаблицаМетаданных.Очистить();
		
		// Логика анализа следующая:
		// Анализ ИБ идет в разрезе метаданных.
		// Анализ идет по двум факторам - наличие прироста и корреляция прироста количества данных с прошедшим временем
		// Если никакого прироста не было, то коэффициент корреляции просто не удастся посчитать, потому проверка прироста
		// - это легкий способ сократить количество случаев расчета коэффициента корреляции. Если прироста нет, то база точно не продуктивная (в рамках этого анализа).
		// Коэффициент корреляции может считаться по нескольким метаданным двумя способами:
		// 1) Общий коэффициент. Для его расчета каждому Объекту метаданных нужно установить весовые коэффициенты так, чтобы их сумма была не больше 1.
		// так как коэффициент корреляции не может быть больше 1, то и их сумма с весами не может быть больше 1.
		// итоговая сумма взвешенных коэффициентов корреляции сравниванивается с общим коэффициентом в настройке.
		// если больше - база проодуктивная.
		// 2) Индивидуальный коэффициент для каждого объекта метаданных.
		// Если хоть у одного объекта метаданных коэффициент корреляции больше установленного в настройке для этого объекта метаданных, то база продуктивная.
		// Второй вариант хорош для случаев, когда пользователи используют только одну подсистему в конфигурации.
		
		Пока ВыборкаМД.Следующий() Цикл
			
			РезультатАнализа = РезультатАнализа + ?(ПустаяСтрока(РезультатАнализа),"",Символы.ПС) + Строка(ВыборкаМД.ОбъектМетаданных);
			СтрокаМД = Параметры.ПриростДанных.Найти(ВыборкаМД.ОбъектМетаданных);
			
			ТаблицаДанных = Новый ТаблицаЗначений;
			ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
			ТаблицаДанных.Колонки.Добавить("Секунды", Новый ОписаниеТипов("Число"));
			ТаблицаДанных.Колонки.Добавить("ВремяПриведенное", Новый ОписаниеТипов("Число"));
			ТаблицаДанных.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
			
			Выборка = ВыборкаМД.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), Выборка);
				ЗаполнитьЗначенияСвойств(ТаблицаМетаданных.Добавить(), Выборка);
			КонецЦикла;
			
			// Анализируем изменение данных во времени
			
			РезультатПроверки = РезультатАнализаИзменений(ТаблицаДанных, СтрокаМД.МинимальныйПрирост);
			Если НЕ РезультатПроверки.Результат Тогда
				РезультатАнализа = РезультатАнализа + ?(ПустаяСтрока(РезультатАнализа),"",Символы.ПС) + РезультатПроверки.Описание;					
			//Если анализ по приросту показал, что изменений нет, тренд анализировать не надо
			Иначе
				Попытка
					РезультатПроверкиТренда = РезультатАнализаТренда(ТаблицаДанных, 0.3, 0.55);	
				    РезультатАнализа = РезультатАнализа + ?(ПустаяСтрока(РезультатАнализа),"",Символы.ПС) + РезультатПроверкиТренда.Описание;					
					Если Параметры.ИспользоватьВесовыеКоэффициенты Тогда
						КоэффициентКорреляции = КоэффициентКорреляции + РезультатПроверкиТренда.КоэффициентКорреляции * СтрокаМД.ВесовойКоэффициент;
					ИначеЕсли РезультатПроверкиТренда.КоэффициентКорреляции > СтрокаМД.КоэффициентКорреляции Тогда
						КоэффициентКорреляции = РезультатПроверкиТренда.КоэффициентКорреляции;
						Продуктивная = Истина;		
					КонецЕсли;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
					
		КонецЦикла;
		
		РезультатАнализа = РезультатАнализа + ?(ПустаяСтрока(РезультатАнализа),"",Символы.ПС) + "Коэффициент корреляции при принятии решения: " + Формат(Окр(КоэффициентКорреляции,2),"ЧН=0");
		
		Если КоэффициентКорреляции > Параметры.ОбщийКоэффициентКорреляцииПрироста Тогда
			Продуктивная = Истина;
		КонецЕсли;
			
		СтрРезультат = ТаблицаРезультата.Добавить();
		СтрРезультат.ИнформационнаяБаза = ВыборкаИб.ИнформационнаяБаза;	
		СтрРезультат.ПродуктивнаяПрирост = Продуктивная;
		СтрРезультат.ОписаниеПрирост = РезультатАнализа;
			
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаРезультата, ТаблицаМетаданных", ТаблицаРезультата, ТаблицаМетаданных);
	
КонецФункции

Функция РезультатАнализаИзменений(Таблица, МинимальныйПрирост)
	
	Структура = Новый Структура("Результат,Описание", Истина, "");
	Таблица.Сортировать("Секунды Убыв");
	Если Таблица.Количество() = 1 Тогда
		Структура.Вставить("Результат", Ложь);
		Структура.Вставить("Описание", "Невозможно провести анализ - единственное значение");
	ИначеЕсли Таблица.Количество() = 2 Тогда
		Если Таблица[0].Значение - Таблица[1].Значение < МинимальныйПрирост Тогда
			Структура.Вставить("Результат", Ложь);
			Структура.Вставить("Описание", "Прирост меньше минимального, анализ по 2 строкам");	
		КонецЕсли;
	Иначе
		МаксимальныйПрирост = 0;
		ГраницаСчетчика = Таблица.Количество()-1;
		Для Инд = 1 По ГраницаСчетчика Цикл
			Стр = Таблица[Инд];
			Если Таблица[Инд-1].Значение - Стр.Значение > МаксимальныйПрирост Тогда
				МаксимальныйПрирост = Таблица[Инд-1].Значение - Стр.Значение;
			КонецЕсли;
		КонецЦикла;
		Если МаксимальныйПрирост <= МинимальныйПрирост Тогда
			Структура.Вставить("Результат", Ложь);
			Структура.Вставить("Описание", "Прирост меньше минимального, анализ по "+Формат(Таблица.Количество())+" строкам");	
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Структура;	
	
КонецФункции

Функция РезультатАнализаТренда(Таблица, КоэффициентОпорный, КоэффициентСглаживающий)
	
	Структура = Новый Структура("Результат, Описание, КоэффициентКорреляции", Истина, "",0);
	Таблица.Сортировать("Секунды");
	
	Если Таблица.Количество() < 3 Тогда
		Структура.Вставить("Результат", Ложь);
		Структура.Вставить("Описание", "Невозможно провести анализ - меньше трех значений");
		Возврат Структура;
	КонецЕсли;
	
	//Нормируем время, по умолчанию - сутки.
	ПерваяСтрока = Таблица[0];
	МассивНормализаторов = Новый Массив;
	МассивНормализаторов.Добавить(60);
	МассивНормализаторов.Добавить(3600);
	МассивНормализаторов.Добавить(86400);
	
	Отношение = ПерваяСтрока.Значение/ПерваяСтрока.Секунды;
	Нормализатор = 0;
	Пока Отношение < 1 И МассивНормализаторов[Нормализатор] <> 86400 Цикл
		Отношение = ПерваяСтрока.Значение * МассивНормализаторов[Нормализатор]/ПерваяСтрока.Секунды;
		Нормализатор = Нормализатор + 1;
	КонецЦикла;
	ЗначениеНормализатора = МассивНормализаторов[Нормализатор];
	
	Для Каждого Строка Из Таблица Цикл
		Строка.ВремяПриведенное = Окр(Строка.Секунды / ЗначениеНормализатора, 2);
	КонецЦикла;                                                     
		
	//Находим коэффициент корреляции
	//Коэффициент корреляции Пирсона
	//Отношение коэффициент ковариации к произведению среднеквадратических отклонений.
	КоличествоНаблюдений = Таблица.Количество();
	МатожиданиеВремя = Таблица.Итог("ВремяПриведенное")/КоличествоНаблюдений;
	МатожиданиеЗначение = Таблица.Итог("Значение")/КоличествоНаблюдений;
	
	ДисперсияСуммаВремени = 0;
	ДисперсияСуммаЗначений = 0;
	СуммаКовариации = 0;
	Для Каждого Строка Из Таблица Цикл
		СуммаКовариации = СуммаКовариации + (Строка.ВремяПриведенное - МатожиданиеВремя)*(Строка.Значение - МатожиданиеЗначение);
		ДисперсияСуммаВремени = ДисперсияСуммаВремени + (Строка.ВремяПриведенное - МатожиданиеВремя)*(Строка.ВремяПриведенное - МатожиданиеВремя);
		ДисперсияСуммаЗначений = ДисперсияСуммаЗначений + (Строка.Значение - МатожиданиеЗначение)*(Строка.Значение - МатожиданиеЗначение);
	КонецЦикла;
	КоэффициентКовариации = СуммаКовариации / КоличествоНаблюдений;
	ДисперсияВремени = ДисперсияСуммаВремени / КоличествоНаблюдений;
	ДисперсияЗначений = ДисперсияСуммаЗначений / КоличествоНаблюдений;
	//Значения вообще не менялись!
	Если ДисперсияЗначений = 0 Тогда
		Структура.Вставить("Результат", Ложь);
		ТекстОписания = "Коэф. корр = 0; Значение не менялось за период";
		Структура.Вставить("Описание", ТекстОписания);
		Возврат Структура;
	КонецЕсли;
	КоэффициентКорреляции = КоэффициентКовариации / (Sqrt(ДисперсияВремени)*Sqrt(ДисперсияЗначений));
	
	//Расчет прогнозного значения.
	Таблица.Колонки.Добавить("Опорные", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Контролируемые", Новый ОписаниеТипов("Число")); //Yw
	Таблица.Колонки.Добавить("Приведенные", Новый ОписаниеТипов("Число"));  //Yпр
	Таблица.Колонки.Добавить("ПриведенныеСглаженные", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Прогнозные", Новый ОписаниеТипов("Число"));
	
	НомерСтроки = 1;
	Для Каждого Строка Из Таблица Цикл
		Если Строка = ПерваяСтрока Тогда
			Строка.Опорные = Строка.Значение;  			
		Иначе
			ПредыдущаяСтрока = Таблица[НомерСтроки-1];
			НомерСтроки = НомерСтроки +1;
			Строка.Опорные = ПредыдущаяСтрока.Опорные + КоэффициентОпорный * (ПредыдущаяСтрока.Значение - ПредыдущаяСтрока.Опорные);
		КонецЕсли;
		
		Строка.Контролируемые = Строка.ВремяПриведенное * КоэффициентКорреляции;
		Строка.Приведенные = Строка.Значение - Строка.Опорные - Строка.Контролируемые;
		
		Если Строка = ПерваяСтрока Тогда
			Строка.ПриведенныеСглаженные = Строка.Приведенные;  			
		Иначе
			Строка.ПриведенныеСглаженные = ПредыдущаяСтрока.ПриведенныеСглаженные + КоэффициентОпорный * (ПредыдущаяСтрока.Приведенные - ПредыдущаяСтрока.ПриведенныеСглаженные);
		КонецЕсли;
		
		Строка.Прогнозные = Строка.Опорные + Строка.Контролируемые + Строка.ПриведенныеСглаженные;
	КонецЦикла;
	
	Структура.Вставить("Результат", Ложь);
	Структура.Вставить("КоэффициентКорреляции", КоэффициентКорреляции);
	ТекстОписания = "Коэф. корр = "+Формат(Окр(КоэффициентКорреляции,2))+"; Фактическое = "+Формат(Строка.Значение)+"; Прогнозное = "+Формат(Окр(Строка.Прогнозные,2))+";";
	Структура.Вставить("Описание", ТекстОписания);
		
	Возврат Структура;	
	
КонецФункции


Функция АнализАктивностиПользователей(Параметры, ИнформационнаяБаза = Неопределено, ДатаАнализа = Неопределено) Экспорт
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("ИнформационнаяБаза", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеБазы"));
	ТаблицаРезультата.Колонки.Добавить("ОписаниеАктивность", Новый ОписаниеТипов("Строка"));
	ТаблицаРезультата.Колонки.Добавить("ПродуктивнаяАктивность", Новый ОписаниеТипов("Булево"));
	
	СравнительныеДанные = Новый ТаблицаЗначений;
	СравнительныеДанные.Колонки.Добавить("Неделя");
	СравнительныеДанные.Колонки.Добавить("Период");
	СравнительныеДанные.Колонки.Добавить("Количество");
	 	
	// Необходимо определить список исключаемых недель.
	// Выбрать проверяемую неделю (обычно, полная неделя, предшествующая текущей дате без праздников и переносов).
	// Настройка - количесто недель, обозначает со сколькими неделями необходимо сравнить проверяемую, чтобы можно было сделать вывод о продуктивности.
	// Сравнить неделю с предыдущими, исключая недели с праздниками и переносами. 
	// Рассчитать средней коэффициент корреляции.
	// Или взять максимальный коэффицент корреялции за исследуемый период.
	
	ОперацияБизнесСтатистики = Константы.ОперацияАктивностьПользователей.Получить();
	Конфигурации = Параметры.Конфигурации.ВыгрузитьКолонку("Конфигурация");
	ТекущаяДата = ?(ЗначениеЗаполнено(ДатаАнализа), ДатаАнализа, ТекущаяДата());
	ТекущийГод  = Год(ТекущаяДата);
	
	// Определение списка исключаемых недель.
	Годы = Новый Массив;
	Годы.Добавить(Год(ТекущаяДата));
	Годы.Добавить(Год(ТекущаяДата)-1);
	
	Запрос = Новый Запрос(ТекстЗапроса_ИсключаемыеНедели());	
	Запрос.УстановитьПараметр("Годы",Годы);                 	
	ИсключаемыеНедели = Запрос.Выполнить().Выгрузить();   
	
	Если ДеньНедели(ТекущаяДата) = 7 Тогда
		ДатаОкончания = НачалоДня(ТекущаяДата);
	Иначе
		ДатаОкончания = НачалоДня(КонецНедели(ТекущаяДата - 7 * 86400));
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса_ОбрабатываемыеНедели());
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"//%Топ"," ПЕРВЫЕ " + Формат(Параметры.ГлубинаАнализаАктивности+1,"ЧГ="));
	Запрос.УстановитьПараметр("ИсключаемыеНедели", ИсключаемыеНедели);
	Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
	ОбрабатываемыеНедели = Запрос.Выполнить().Выгрузить();
	Если ОбрабатываемыеНедели.Количество() < 2 Тогда
		ВызватьИсключение "Не заполнен календарь.";
	Иначе
		НомерПроверяемойНедели = ОбрабатываемыеНедели[1].НеделяГода;
	КонецЕсли;
	
	// Алгоритм
	                             	
	ОтклоненияПоНеделям = Новый ТаблицаЗначений;
	ОтклоненияПоНеделям.Колонки.Добавить("Неделя", Новый ОписаниеТипов("Число"));
	ОтклоненияПоНеделям.Колонки.Добавить("Отклонение", Новый ОписаниеТипов("Число"));
	ОтклоненияПоНеделям.Колонки.Добавить("КоэффициентКорреляции", Новый ОписаниеТипов("Число"));
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ИнформацияИсторияПодробно.ИнформационнаяБаза КАК ИнформационнаяБаза
	                      |ИЗ
	                      |	РегистрСведений.ИнформацияИсторияПодробно КАК ИнформацияИсторияПодробно
	                      |ГДЕ
	                      |	ИнформацияИсторияПодробно.ПериодЗаписи МЕЖДУ ДОБАВИТЬКДАТЕ(&ПериодЗаписи, ДЕНЬ, -21) И &ПериодЗаписи
	                      |	И ИнформацияИсторияПодробно.Конфигурация В(&Конфигурации)
						  |	//%ДопОтбор");
	Запрос.УстановитьПараметр("ПериодЗаписи",	ТекущаяДата);
	Запрос.УстановитьПараметр("Конфигурации",	Конфигурации);
	Если ЗначениеЗаполнено(ИнформационнаяБаза) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//%ДопОтбор","И ИнформацияИсторияПодробно.ИнформационнаяБаза = &ИнформационнаяБаза");
		Запрос.УстановитьПараметр("ИнформационнаяБаза",ИнформационнаяБаза);
	КонецЕсли;
		
	ВыборкаИб = Запрос.Выполнить().Выбрать();
	
	ЗапросАктивности = Новый Запрос("ВЫБРАТЬ
	                                |	ОбрабатываемыеНедели.Год КАК Год,
	                                |	ОбрабатываемыеНедели.НеделяГода КАК НеделяГода
	                                |ПОМЕСТИТЬ ВТ_ОбрабатываемыеНедели
	                                |ИЗ
	                                |	&ОбрабатываемыеНедели КАК ОбрабатываемыеНедели
	                                |
	                                |ИНДЕКСИРОВАТЬ ПО
	                                |	НеделяГода,
	                                |	Год");
	ЗапросАктивности.УстановитьПараметр("ОбрабатываемыеНедели", ОбрабатываемыеНедели);
	ЗапросАктивности.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросАктивности.Выполнить();
	
	Пока ВыборкаИб.Следующий() Цикл
		
		ТаблицаИБ = Новый ТаблицаЗначений;
		ТаблицаИБ.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ТаблицаИБ.Колонки.Добавить("ДеньНедели", Новый ОписаниеТипов("Число"));
		ТаблицаИБ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		ТаблицаИБ.Колонки.Добавить("НЕДЕЛЯ", Новый ОписаниеТипов("Число"));
		ТаблицаИБ.Колонки.Добавить("Час", Новый ОписаниеТипов("Число"));
		
		РезультатАнализа = "";
		Продуктивная = Ложь;
		
		МаксимальныйКоэффициент = -1;
		НеделяМаксимум = 0;
		МаксимальноеКоличествоПользователей = 0;
		СравнительныеДанные.Очистить();
		ОтклоненияПоНеделям.Очистить();
		
		ЗапросАктивности.Текст = ТектсЗапроса_АктивностьПользователейИБ();		
		ЗапросАктивности.УстановитьПараметр("ОперацияБизнесСтатистики", ОперацияБизнесСтатистики);
		ЗапросАктивности.УстановитьПараметр("ИнформационнаяБаза", ВыборкаИб.ИнформационнаяБаза);
				
		Выборка = ЗапросАктивности.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Количество > МаксимальноеКоличествоПользователей Тогда
				МаксимальноеКоличествоПользователей = Выборка.Количество;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ТаблицаИБ.Добавить(),Выборка);
		КонецЦикла;
		
		ТаблицаЦелевая = ТаблицаИБ.Скопировать(ТаблицаИБ.НайтиСтроки(Новый Структура("НЕДЕЛЯ",НомерПроверяемойНедели)));
		Для Каждого Стр Из ТаблицаЦелевая Цикл
			ЗаполнитьЗначенияСвойств(СравнительныеДанные.Добавить(), Стр);
		КонецЦикла;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Целевая.Период КАК Период,
		|	Целевая.ДеньНедели КАК ДеньНедели,
		|	Целевая.Час КАК Час,
		|	Целевая.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_ЦелеваяНеделя
		|ИЗ
		|	&Целевая КАК Целевая");
		Запрос.УстановитьПараметр("Целевая",ТаблицаЦелевая);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		Для Каждого Строка Из ОбрабатываемыеНедели Цикл
			Неделя = Строка.НеделяГода;
			Если Неделя = НомерПроверяемойНедели Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаНедели = ТаблицаИБ.Скопировать(ТаблицаИБ.НайтиСтроки(Новый Структура("НЕДЕЛЯ",Неделя)));
			Запрос.Текст = "ВЫБРАТЬ
			               |	ТНедели.Период КАК Период,
			               |	ТНедели.НЕДЕЛЯ КАК НЕДЕЛЯ,
			               |	ТНедели.ДеньНедели КАК ДеньНедели,
			               |	ТНедели.Час КАК Час,
			               |	ТНедели.Количество КАК Количество
			               |ПОМЕСТИТЬ ВТ_Недели
			               |ИЗ
			               |	&ТНедели КАК ТНедели
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТ_ЦелеваяНеделя.Период КАК Период,
			               |	ВТ_Недели.НЕДЕЛЯ КАК НЕДЕЛЯ,
						   |	ВТ_ЦелеваяНеделя.Количество КАК Эталон,
			               |	(ВТ_ЦелеваяНеделя.Количество - ЕСТЬNULL(ВТ_Недели.Количество, 0)) * (ВТ_ЦелеваяНеделя.Количество - ЕСТЬNULL(ВТ_Недели.Количество, 0)) КАК КвадратРазницы,
			               |	ЕСТЬNULL(ВТ_Недели.Количество, 0) КАК Количество
			               |ИЗ
			               |	ВТ_ЦелеваяНеделя КАК ВТ_ЦелеваяНеделя
			               |		Внутреннее СОЕДИНЕНИЕ ВТ_Недели КАК ВТ_Недели
			               |		ПО ВТ_ЦелеваяНеделя.ДеньНедели = ВТ_Недели.ДеньНедели
			               |			И ВТ_ЦелеваяНеделя.Час = ВТ_Недели.Час
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |УНИЧТОЖИТЬ ВТ_Недели"; 	
			Запрос.УстановитьПараметр("ТНедели",ТаблицаНедели);
			Результат = Запрос.Выполнить().Выгрузить();
			
			//Коэффициент корреляции
			КоличествоНаблюдений = Результат.Количество();
			Если КоличествоНаблюдений < 2 Тогда
				Продолжить;
			КонецЕсли;
			МатожиданиеЭталон = Результат.Итог("Эталон")/КоличествоНаблюдений;
			МатожиданиеФакт = Результат.Итог("Количество")/КоличествоНаблюдений;
			
			ДисперсияСуммаЭталон = 0;
			ДисперсияСуммаФакт = 0;
			СуммаКовариации = 0;
			КоэффициентКорреляции = 0;
			
			Для Каждого Стр Из Результат Цикл
				
				СуммаКовариации = СуммаКовариации + (Стр.Эталон - МатожиданиеЭталон)*(Стр.Количество - МатожиданиеФакт);
				ДисперсияСуммаЭталон = ДисперсияСуммаЭталон + (Стр.Эталон - МатожиданиеЭталон)*(Стр.Эталон - МатожиданиеЭталон);
				ДисперсияСуммаФакт = ДисперсияСуммаФакт + (Стр.Количество - МатожиданиеФакт)*(Стр.Количество - МатожиданиеФакт);
				
				ЗаполнитьЗначенияСвойств(СравнительныеДанные.Добавить(), Стр);
				
			КонецЦикла;
			
			КоэффициентКовариации = СуммаКовариации / КоличествоНаблюдений;
			ДисперсияЭталон = ДисперсияСуммаЭталон / КоличествоНаблюдений;
			ДисперсияФакт = ДисперсияСуммаФакт / КоличествоНаблюдений;
			Если ДисперсияФакт * ДисперсияЭталон <> 0 Тогда
				КоэффициентКорреляции = КоэффициентКовариации / (Sqrt(ДисперсияЭталон)*Sqrt(ДисперсияФакт));
			КонецЕсли;
			
			
			СКО = Sqrt(Результат.Итог("КвадратРазницы")/(КоличествоНаблюдений-1));
			
			СтрСКО = ОтклоненияПоНеделям.Добавить();
			СтрСКО.НЕДЕЛЯ = Неделя;
			СтрСКО.КоэффициентКорреляции = КоэффициентКорреляции;
			СтрСКО.Отклонение = СКО;
			Если КоэффициентКорреляции > МаксимальныйКоэффициент Тогда
				МаксимальныйКоэффициент = КоэффициентКорреляции;
				НеделяМаксимум = Неделя;
			КонецЕсли;
		КонецЦикла;
		
		РезультатАнализа = "Анализ активности пользователей:" + Символы.ПС +
		"Проверяемая неделя " + Формат(НомерПроверяемойНедели) + Символы.ПС + 
		"Максимальное количество пользователей: "+Формат(МаксимальноеКоличествоПользователей,"ЧГ=");
		КоэффициентКорреляцииИБ = 0;
		
		Если ОтклоненияПоНеделям.Количество() = 0 Тогда
			РезультатАнализа = РезультатАнализа + Символы.ПС + "Нет данных для анализа, анализ активности не проведен."; 
		ИначеЕсли Параметры.МетодАнализаАктивности = 0 Тогда
			РезультатАнализа = РезультатАнализа + Символы.ПС + "Неделя для сравнения: " + Формат(НеделяМаксимум) + Символы.ПС + 
			"Метод оценки - по максимальному коэффициенту."; 
			КоэффициентКорреляцииИБ = МаксимальныйКоэффициент;
		ИначеЕсли Параметры.МетодАнализаАктивности = 1 Тогда 
			РезультатАнализа = РезультатАнализа + Символы.ПС + "Метод оценки - по среднему коэффициенту.";
			КоэффициентКорреляцииИБ = ОтклоненияПоНеделям.Итог("КоэффициентКорреляции")/ОтклоненияПоНеделям.Количество();
		КонецЕсли;
		
		РезультатАнализа = РезультатАнализа + Символы.ПС + "Коэффициент корреляции: " + Формат(Окр(КоэффициентКорреляцииИБ,2),"ЧГ=");
		
		Если КоэффициентКорреляцииИБ > Параметры.КоэффициентКорреляцииПользовательскойАктивности
			И МаксимальноеКоличествоПользователей >= Параметры.МинимальнаяПользовательскаяАктивность Тогда
			Продуктивная = Истина;
		КонецЕсли;
			 		
		СтрРезультат = ТаблицаРезультата.Добавить();
		СтрРезультат.ИнформационнаяБаза = ВыборкаИб.ИнформационнаяБаза;	
		СтрРезультат.ПродуктивнаяАктивность = Продуктивная;
		СтрРезультат.ОписаниеАктивность = РезультатАнализа;
		
	КонецЦикла;    
	
	Возврат Новый Структура("ТаблицаРезультата, СравнительныеДанные, ОтклоненияПоНеделям", ТаблицаРезультата, СравнительныеДанные, ОтклоненияПоНеделям);
	
КонецФункции

Функция ТекстЗапроса_ИсключаемыеНедели()
	Возврат "ВЫБРАТЬ
	        |	ИсключаемыеНедели.Год КАК Год,
	        |	ИсключаемыеНедели.НеделяГода КАК НеделяГода
	        |ИЗ
	        |	(ВЫБРАТЬ
	        |		ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	        |		ДанныеПроизводственногоКалендаря.Год КАК Год,
	        |		ДанныеПроизводственногоКалендаря.НеделяГода КАК НеделяГода
	        |	ИЗ
	        |		РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	        |	ГДЕ
	        |		ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	        |		И ДанныеПроизводственногоКалендаря.Год В(&Годы)
	        |		И ДанныеПроизводственногоКалендаря.ДатаПереноса = ДАТАВРЕМЯ(1, 1, 1)
	        |	
	        |	ОБЪЕДИНИТЬ ВСЕ
	        |	
	        |	ВЫБРАТЬ
	        |		ДанныеПроизводственногоКалендаря.Дата,
	        |		ДанныеПроизводственногоКалендаря.Год,
	        |		ДанныеПроизводственногоКалендаря.НеделяГода
	        |	ИЗ
	        |		РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	        |	ГДЕ
	        |		ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье))
	        |		И ДанныеПроизводственногоКалендаря.Год В(&Годы)
	        |		И ДанныеПроизводственногоКалендаря.ДатаПереноса <> ДАТАВРЕМЯ(1, 1, 1)) КАК ИсключаемыеНедели
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ИсключаемыеНедели.Год,
	        |	ИсключаемыеНедели.НеделяГода
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Год,
	        |	НеделяГода";
КонецФункции

Функция ТекстЗапроса_ОбрабатываемыеНедели()
	Возврат "ВЫБРАТЬ
	        |	ИсключаемыеНедели.НеделяГода КАК НеделяГода,
	        |	ИсключаемыеНедели.Год КАК Год
	        |ПОМЕСТИТЬ ВТ_Исключаемые
	        |ИЗ
	        |	&ИсключаемыеНедели КАК ИсключаемыеНедели
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ДанныеПроизводственногоКалендаря.Год КАК Год,
	        |	ДанныеПроизводственногоКалендаря.НеделяГода КАК НеделяГода
	        |ПОМЕСТИТЬ ВТ_ИсследумыеНедели
	        |ИЗ
	        |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	        |ГДЕ
	        |	ДанныеПроизводственногоКалендаря.Дата <= &ДатаОкончания
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ДанныеПроизводственногоКалендаря.Год,
	        |	ДанныеПроизводственногоКалендаря.НеделяГода
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	НеделяГода,
	        |	Год
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ //%Топ
	        |	ВТ_ИсследумыеНедели.Год КАК Год,
	        |	ВТ_ИсследумыеНедели.НеделяГода КАК НеделяГода
	        |ИЗ
	        |	ВТ_ИсследумыеНедели КАК ВТ_ИсследумыеНедели
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исключаемые КАК ВТ_Исключаемые
	        |		ПО ВТ_ИсследумыеНедели.Год = ВТ_Исключаемые.Год
	        |			И ВТ_ИсследумыеНедели.НеделяГода = ВТ_Исключаемые.НеделяГода
	        |ГДЕ
	        |	ВТ_Исключаемые.Год ЕСТЬ NULL
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Год УБЫВ,
	        |	НеделяГода УБЫВ"
КонецФункции

Функция ТектсЗапроса_АктивностьПользователейИБ()
	
	Возврат "ВЫБРАТЬ
	        |	ОперацииБизнесСтатистики.ИнформационнаяБаза КАК ИнформационнаяБаза,
	        |	НАЧАЛОПЕРИОДА(ОперацииБизнесСтатистики.Период, ЧАС) КАК Период,
	        |	ДЕНЬНЕДЕЛИ(ОперацииБизнесСтатистики.Период) КАК ДеньНедели,
	        |	НЕДЕЛЯ(ОперацииБизнесСтатистики.Период) КАК НЕДЕЛЯ,
	        |	ЧАС(ОперацииБизнесСтатистики.Период) КАК Час,
	        |	МАКСИМУМ(ОперацииБизнесСтатистики.КоличествоЗначений) КАК Количество
	        |ИЗ
	        |	РегистрСведений.ОперацииБизнесСтатистики КАК ОперацииБизнесСтатистики
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОбрабатываемыеНедели КАК ВТ_ОбрабатываемыеНедели
	        |		ПО (ГОД(ОперацииБизнесСтатистики.Период) = ВТ_ОбрабатываемыеНедели.Год)
	        |			И (НЕДЕЛЯ(ОперацииБизнесСтатистики.Период) = ВТ_ОбрабатываемыеНедели.НеделяГода)
	        |			И (ОперацииБизнесСтатистики.ОперацияБизнесСтатистики = &ОперацияБизнесСтатистики)
	        |			И (ОперацииБизнесСтатистики.ИнформационнаяБаза = &ИнформационнаяБаза)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ОперацииБизнесСтатистики.ИнформационнаяБаза,
	        |	НАЧАЛОПЕРИОДА(ОперацииБизнесСтатистики.Период, ЧАС),
	        |	ДЕНЬНЕДЕЛИ(ОперацииБизнесСтатистики.Период),
	        |	НЕДЕЛЯ(ОперацииБизнесСтатистики.Период),
	        |	ЧАС(ОперацииБизнесСтатистики.Период)
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Период"
КонецФункции

Процедура ПровестиАнализИнформационныхБаз() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НастройкиАнализаСостоянияИнформационнойБазы.Ссылка КАК Ссылка,
	                      |	НастройкиАнализаСостоянияИнформационнойБазы.ИспользоватьВесовыеКоэффициенты КАК ИспользоватьВесовыеКоэффициенты,
	                      |	НастройкиАнализаСостоянияИнформационнойБазы.КоэффициентКорреляцииПользовательскойАктивности КАК КоэффициентКорреляцииПользовательскойАктивности,
	                      |	НастройкиАнализаСостоянияИнформационнойБазы.ГлубинаАнализаДанных КАК ГлубинаАнализаДанных,
	                      |	НастройкиАнализаСостоянияИнформационнойБазы.ОбщийКоэффициентКорреляцииПрироста КАК ОбщийКоэффициентКорреляцииПрироста,
	                      |	НастройкиАнализаСостоянияИнформационнойБазы.ГлубинаАнализаАктивности КАК ГлубинаАнализаАктивности,
	                      |	НастройкиАнализаСостоянияИнформационнойБазы.МетодАнализаАктивности КАК МетодАнализаАктивности,
						  |	НастройкиАнализаСостоянияИнформационнойБазы.МинимальнаяПользовательскаяАктивность КАК МинимальнаяПользовательскаяАктивность
	                      |ИЗ
	                      |	Справочник.НастройкиАнализаСостоянияИнформационнойБазы КАК НастройкиАнализаСостоянияИнформационнойБазы
	                      |ГДЕ
	                      |	НЕ НастройкиАнализаСостоянияИнформационнойБазы.ПометкаУдаления");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Параметры = Новый Структура("ИспользоватьВесовыеКоэффициенты,КоэффициентКорреляцииПользовательскойАктивности,ГлубинаАнализаДанных,ОбщийКоэффициентКорреляцииПрироста,
			|ГлубинаАнализаАктивности,МетодАнализаАктивности,МинимальнаяПользовательскаяАктивность,Конфигурации,ПриростДанных");
		ЗаполнитьЗначенияСвойств(Параметры, Выборка);
		ОбъектНастройки = Выборка.Ссылка.ПолучитьОбъект();		
		Параметры.Вставить("Конфигурации", ОбъектНастройки.Конфигурации.Выгрузить());
		Параметры.Вставить("ПриростДанных", ОбъектНастройки.ПриростДанных.Выгрузить());
		
		СоответствиеИдентификаторовДемоИБ = Новый Соответствие;
		Для Каждого Строка Из Параметры.Конфигурации Цикл
			Если ЗначениеЗаполнено(Строка.ИдентификаторДемоБазы) Тогда
				СоответствиеИдентификаторовДемоИБ.Вставить(Строка.ИдентификаторДемоБазы, Истина);
			КонецЕсли;
		КонецЦикла;
		
		// Последовательность оценки.
		// Оцениваем активность пользователей. Если заключение положительное, тогда статус ПродуктивнаяПоАктивности.
		// Оцениваем по приросту данных. Если заключение положительное, тогда статус ПродуктивнаяПоПриросту.
		// Если Заключение по приросту и по активности положительное, тогда статус Продуктивная.
		// Если оба ложные, а база демо - ставим ТестоваяДемо, иначе просто тестовая.
		
		РезультатАнализаАктивности = АнализАктивностиПользователей(Параметры);
		РезультатАнализаПрироста = АнализПриростДанных(Параметры);
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Прирост.ИнформационнаяБаза КАК ИнформационнаяБаза,
		                      |	Прирост.ОписаниеПрирост КАК ОписаниеПрирост,
		                      |	Прирост.ПродуктивнаяПрирост КАК ПродуктивнаяПрирост
		                      |ПОМЕСТИТЬ ВТ_Прирост
		                      |ИЗ
		                      |	&Прирост КАК Прирост
		                      |
		                      |ИНДЕКСИРОВАТЬ ПО
		                      |	ИнформационнаяБаза
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	Активность.ИнформационнаяБаза КАК ИнформационнаяБаза,
		                      |	Активность.ОписаниеАктивность КАК ОписаниеАктивность,
		                      |	Активность.ПродуктивнаяАктивность КАК ПродуктивнаяАктивность
		                      |ПОМЕСТИТЬ ВТ_Активность
		                      |ИЗ
		                      |	&Активность КАК Активность
		                      |
		                      |ИНДЕКСИРОВАТЬ ПО
		                      |	ИнформационнаяБаза
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ЕСТЬNULL(ВТ_Активность.ИнформационнаяБаза, ВТ_Прирост.ИнформационнаяБаза) КАК ИнформационнаяБаза,
		                      |	ЕСТЬNULL(ВТ_Активность.ОписаниеАктивность, """") КАК ОписаниеАктивность,
		                      |	ЕСТЬNULL(ВТ_Активность.ПродуктивнаяАктивность, ЛОЖЬ) КАК ПродуктивнаяАктивность,
		                      |	ЕСТЬNULL(ВТ_Прирост.ОписаниеПрирост, """") КАК ОписаниеПрирост,
		                      |	ЕСТЬNULL(ВТ_Прирост.ПродуктивнаяПрирост, ЛОЖЬ) КАК ПродуктивнаяПрирост,
		                      |	ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_Активность.ИнформационнаяБаза, ВТ_Прирост.ИнформационнаяБаза) КАК Справочник.ИнформационныеБазы).УникальныйИдентификаторПостоянный КАК УникальныйИдентификаторПостоянный
		                      |ИЗ
		                      |	ВТ_Прирост КАК ВТ_Прирост
		                      |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Активность КАК ВТ_Активность
		                      |		ПО ВТ_Прирост.ИнформационнаяБаза = ВТ_Активность.ИнформационнаяБаза
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ВТ_Активность.ИнформационнаяБаза КАК ИнформационнаяБаза
		                      |ПОМЕСТИТЬ ВТ_СписокИБ
		                      |ИЗ
		                      |	ВТ_Активность КАК ВТ_Активность
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	ВТ_Прирост.ИнформационнаяБаза
		                      |ИЗ
		                      |	ВТ_Прирост КАК ВТ_Прирост
		                      |
		                      |ИНДЕКСИРОВАТЬ ПО
		                      |	ИнформационнаяБаза
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	РезультатАнализаИнформационныхБаз.ИнформационнаяБаза КАК ИнформационнаяБаза,
		                      |	РезультатАнализаИнформационныхБаз.НеИзменятьСтатус КАК НеИзменятьСтатус
		                      |ИЗ
		                      |	ВТ_СписокИБ КАК ВТ_СписокИБ
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатАнализаИнформационныхБаз КАК РезультатАнализаИнформационныхБаз
		                      |		ПО ВТ_СписокИБ.ИнформационнаяБаза = РезультатАнализаИнформационныхБаз.ИнформационнаяБаза");
		Запрос.УстановитьПараметр("Прирост", РезультатАнализаПрироста.ТаблицаРезультата);
		Запрос.УстановитьПараметр("Активность", РезультатАнализаАктивности.ТаблицаРезультата);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		СоответствиеЗапретов = Новый Соответствие;
		ВыборкаИБ = РезультатЗапроса[4].Выбрать();
		Пока ВыборкаИБ.Следующий() Цикл
			Если ВыборкаИБ.НеИзменятьСтатус Тогда
				СоответствиеЗапретов.Вставить(ВыборкаИБ.ИнформационнаяБаза, Истина);
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаАнализ = РезультатЗапроса[2].Выбрать();
		Пока ВыборкаАнализ.Следующий() Цикл
			
			Если Не СоответствиеЗапретов.Получить(ВыборкаАнализ.ИнформационнаяБаза) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаАнализ.ПродуктивнаяАктивность
				И ВыборкаАнализ.ПродуктивнаяПрирост Тогда
				Статус = Перечисления.СтатусыИнформационнойБазы.Продуктивная;
			ИначеЕсли ВыборкаАнализ.ПродуктивнаяАктивность Тогда
				Статус = Перечисления.СтатусыИнформационнойБазы.ПродуктивнаяПоАктивности;
			ИначеЕсли ВыборкаАнализ.ПродуктивнаяПрирост Тогда
				Статус = Перечисления.СтатусыИнформационнойБазы.ПродуктивнаяПоПриросту;
			ИначеЕсли НЕ СоответствиеИдентификаторовДемоИБ.Получить(ВыборкаАнализ.УникальныйИдентификаторПостоянный) = Неопределено Тогда
				Статус = Перечисления.СтатусыИнформационнойБазы.ТестоваяДемо;
			Иначе
				Статус = Перечисления.СтатусыИнформационнойБазы.Тестовая;
			КонецЕсли;
			
			// Запишем результат анализа
			
			Запись = РегистрыСведений.РезультатАнализаИнформационныхБаз.СоздатьМенеджерЗаписи();
			Запись.ИнформационнаяБаза = ВыборкаАнализ.ИнформационнаяБаза;
			Запись.Статус = Статус;
			Запись.ДатаПроведенияАнализа = ТекущаяДата();
			Запись.ОписаниеАнализа = ВыборкаАнализ.ОписаниеАктивность + 
									?(ПустаяСтрока(ВыборкаАнализ.ОписаниеАктивность),"",Символы.ПС+Символы.ПС) +
									ВыборкаАнализ.ОписаниеПрирост;
			Запись.Записать();
			
			НаборЗаписей = РегистрыСведений.СтатусИнформационнойБазы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ВыборкаАнализ.ИнформационнаяБаза);
			Запись = НаборЗаписей.Добавить();
			Запись.ИнформационнаяБаза = ВыборкаАнализ.ИнформационнаяБаза;
			Запись.Статус = Статус;
			НаборЗаписей.Записать();
			
		КонецЦикла;		
		
	КонецЦикла;
	
КонецПроцедуры






#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПрограммныйИнтерфейс

// Выполняет поиск по реквизиту УникальныйИдентификаторАгента 
//
// Параметры:
//  УникальныйИдентификаторАгента - УникальныйИдентификатор - значение, по которому выполняется поиск. 
// 
// Возвращаемое значение:
//  Структура с ключами - Ссылка - СправочникСсылка.АгентыКИП.
//                      - ДатаАктивности - Дата.
//
Функция НайтиПоУникальномуИдентификатору(УникальныйИдентификаторАгента) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |   Агенты.Ссылка,
	|   Агенты.УникальныйИдентификаторАгента,
    |   Агенты.Версия,
    |   ISNULL(Активность.ДатаКрайнейАктивности, &ПустаяДата) КАК ДатаАктивности,
    |   Агенты.ПериодОтправкиДанных
    |ИЗ
    |   Справочник.АгентыКИП КАК Агенты
    |ЛЕВОЕ СОЕДИНЕНИЕ
    |   РегистрСведений.АктивностьАгентовКИП КАК Активность
    |ПО
    |   Активность.АгентКИП = Агенты.Ссылка
    |ГДЕ
    |   УникальныйИдентификаторАгента = &УникальныйИдентификаторАгента
    |";
    
    ТекстЗапросаПереопределенный = АгентКИППереопределяемый.ТекстЗапросаНайтиАгентаПоУникальномуИдентификатору();
    Если ЗначениеЗаполнено(ТекстЗапросаПереопределенный) Тогда
        Запрос.Текст = ТекстЗапросаПереопределенный;
    КонецЕсли;
            
    Запрос.УстановитьПараметр("УникальныйИдентификаторАгента", УникальныйИдентификаторАгента);
    Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
    
    УстановитьПривилегированныйРежим(Истина);
    Результат = Запрос.Выполнить();
    УстановитьПривилегированныйРежим(Ложь);
    
    АгентКИП = Новый Структура();
    Если НЕ Результат.Пустой() Тогда
        
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        
        Для Каждого Колонка Из Результат.Колонки Цикл
            АгентКИП.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
        КонецЦикла;
        
    Иначе
        Для Каждого Колонка Из Результат.Колонки Цикл
            АгентКИП.Вставить(Колонка.Имя, Неопределено);
        КонецЦикла;        
    КонецЕсли;
    
    Возврат АгентКИП;
        
КонецФункции

// Создает новый элемент по реквизиту УникальныйИдентификаторАгента в случае отсутствия.
//
// Параметры:
//  УникальныйИдентификаторАгента - УникальныйИдентификатор - уникальный идентификатор агента для создания. 
//  Хост - Строка - имя хоста, к которому относится агент.
//  Версия - Строка - версия агента.
// 
// Возвращаемое значение:
//  СправочникСсылка.АгентыКИП  - ссылка на созданный или найденный элемент справочника.
//
Функция СоздатьЭлементПоУникальномуИдентификатору(УникальныйИдентификаторАгента, Хост, Версия) Экспорт
    
    АгентКИПСтруктура = НайтиПоУникальномуИдентификатору(УникальныйИдентификаторАгента);
    АгентКИП = АгентКИПСтруктура.Ссылка;
    
    Если АгентКИП = Неопределено Тогда
        
        НачатьТранзакцию();
        Попытка
            
            Блокировка = Новый БлокировкаДанных;
            ЭлементБлокировки = Блокировка.Добавить("Справочник.АгентыКИП");
            ЭлементБлокировки.УстановитьЗначение("УникальныйИдентификаторАгентаСтрока", Строка(УникальныйИдентификаторАгента));
            ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
            Блокировка.Заблокировать();
            
            АгентКИПСтруктура = НайтиПоУникальномуИдентификатору(УникальныйИдентификаторАгента);
            АгентКИП = АгентКИПСтруктура.Ссылка;
            Если АгентКИП = Неопределено Тогда
                
                АгентКИПОбъект = Справочники.АгентыКИП.СоздатьЭлемент();
                АгентКИПОбъект.Наименование = Хост;
                АгентКИПОбъект.Версия = Версия;
                АгентКИПОбъект.УникальныйИдентификаторАгента = УникальныйИдентификаторАгента;
                АгентКИПОбъект.Хост = Хост;
                АгентКИПОбъект.ДатаРегистрации = ТекущаяУниверсальнаяДата();
                АгентКИПОбъект.Заполнить(Неопределено);
                                               
                АгентКИПОбъект.Записать();
				
				ДанныеАгента = Новый Структура;
				ДанныеАгента.Вставить("Ссылка", АгентКИПОбъект.Ссылка); 
				АгентКИППереопределяемый.СоздатьСвязанныеОбъектыАгентаКИП(ДанныеАгента);
				                
            КонецЕсли;                            
            АгентКИП = АгентКИПОбъект.Ссылка; 
			
			ЗафиксироватьТранзакцию();
                        
        Исключение
            
            ОтменитьТранзакцию();
            ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
            
        КонецПопытки;
        
    ИначеЕсли АгентКИП.Версия  <> Версия Тогда
        
        АгентКИПОбъект = АгентКИП.ПолучитьОбъект();
        АгентКИПОбъект.Версия = Версия;
        АгентКИПОбъект.Записать();        
        
    КонецЕсли;
    
    Возврат АгентКИП;
    
КонецФункции

// Функция - Изменить версию агента
//
// Параметры:
//  Ссылка     - СправочникСсылка.АгентыКИП - Ссылка на агента для изменения версии.
//  Версия     - Строка - Новая версия агента.
// 
Процедура ИзменитьВерсиюАгента(Ссылка, Версия) Экспорт
    
    Если ЗначениеЗаполнено(Ссылка) Тогда
        СпрОбъект = Ссылка.ПолучитьОбъект();
        СпрОбъект.Версия = Версия;
        СпрОбъект.Записать();
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ПредопределенныеПроцедурыИФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
    
    Формы = ФормыАгентаКИП();
    НоваяФорма = Формы.Получить(ВидФормы);
    
    Если НоваяФорма <> Неопределено Тогда
        ВыбраннаяФорма = НоваяФорма;
        СтандартнаяОбработка = Ложь;
    КонецЕсли;
        
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФормыАгентаКИП()
	СоответствиеФорм = Новый Соответствие;
	АгентКИППереопределяемый.ДополнитьСоответствиеФорм(СоответствиеФорм);
	Возврат СоответствиеФорм;
КонецФункции

#КонецОбласти


#КонецЕсли


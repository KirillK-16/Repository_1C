#Область ОбработчикиСобытий
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		НаборЗаписей = РегистрыСведений.СтруктураШаговСценария.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сценарий.Установить(Ссылка);
		
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ПланЗапускаСценариевАвтоматизации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭкземплярСценария.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Если Не Запись.ВыполняетсяПоРасписанию Тогда
				Запись.Удаленный = Истина;
			КонецЕсли;	
		КонецЦикла;	
		НаборЗаписей.Записать();
	Иначе
		НаборЗаписей = РегистрыСведений.ПланЗапускаСценариевАвтоматизации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭкземплярСценария.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			Запись = НаборЗаписей.Добавить();
		Иначе
			Запись = НаборЗаписей[0];
		КонецЕсли;	
		Запись.ЭкземплярСценария = Ссылка;
		Если Запись.ВыполняетсяПоРасписанию Или ЗначениеЗаполнено(Запись.ЭкземплярРодитель) Тогда
			Если НачалоДня(Запись.Начало) <> НачалоДня(ПлановаяДатаЗапуска) Или НачалоДня(Запись.Окончание) <> НачалоДня(ПлановаяДатаОкончания) Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Экземпляр сценария, запускаемый по расписанию, можно перемещать только в рамках дня, на который он был изначально запланирован'");
				Сообщение.Сообщить();
				
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		Запись.Начало = ПлановаяДатаЗапуска;
		Запись.Окончание = ПлановаяДатаОкончания;
		Запись.Удаленный = Ложь;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
	// запись регистра, связанного с планировщиком
	Если РаботаСоСценариямиАвтоматизацииСервер.ПолучитьФинальныеСостояния().Найти(Состояние) <> Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЖурналВыполненияЗаданийПланировщика.Период КАК Период,
		                      |	ЖурналВыполненияЗаданийПланировщика.Агент КАК Агент,
		                      |	ЖурналВыполненияЗаданийПланировщика.ЗаданиеПланировщика КАК ЗаданиеПланировщика,
		                      |	ЖурналВыполненияЗаданийПланировщика.КонтурАдминистрирования КАК КонтурАдминистрирования
		                      |ИЗ
		                      |	РегистрСведений.ЖурналВыполненияЗаданийПланировщика КАК ЖурналВыполненияЗаданийПланировщика
		                      |ГДЕ
		                      |	ЖурналВыполненияЗаданийПланировщика.ИсполняющийЭкземплярСценария = &ИсполняющийЭкземплярСценария");
		Запрос.УстановитьПараметр("ИсполняющийЭкземплярСценария", Ссылка);
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			НаборЗаписейЖурнала = РегистрыСведений.ЖурналВыполненияЗаданийПланировщика.СоздатьНаборЗаписей();
			НаборЗаписейЖурнала.Отбор.Период.Установить(Результат.Период);
			НаборЗаписейЖурнала.Отбор.Агент.Установить(Результат.Агент);
			НаборЗаписейЖурнала.Отбор.ЗаданиеПланировщика.Установить(Результат.ЗаданиеПланировщика);
			
			НаборЗаписейЖурнала.Прочитать();
			
			Если НаборЗаписейЖурнала.Количество() > 0 Тогда
				Запись = НаборЗаписейЖурнала[0];
				Если Состояние = Перечисления.СостоянияСценария.ЗавершенУспешно Или Состояние = Перечисления.СостоянияСценария.ЗавершенУсловноУспешно Тогда
					Запись.СостояниеЗадания = Перечисления.СостоянияЗаданийПланировщика.Готово;
				Иначе
					Запись.СостояниеЗадания = Перечисления.СостоянияЗаданийПланировщика.Ошибка;
				КонецЕсли;
				
				Запись.ДатаЗавершения = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьТекущуюДатуСеанса();
				
				НаборЗаписейЖурнала.Записать();
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	// изменение истории состояний
	ТекДата = ТекущаяДатаСеанса();
	Срез = РегистрыСведений.ИсторияСостоянийСценариев.СрезПоследних(ТекДата, Новый Структура("Экземпляр", Ссылка));
	Если Срез.Количество() = 0 Или Срез[0].Состояние <> Состояние Тогда
		НаборЗаписейИстории = РегистрыСведений.ИсторияСостоянийСценариев.СоздатьНаборЗаписей();
		НаборЗаписейИстории.Отбор.Период.Установить(ТекДата);
		НаборЗаписейИстории.Отбор.Экземпляр.Установить(Ссылка);
		
		Запись = НаборЗаписейИстории.Добавить();
		Запись.Период  = ТекДата;
		Запись.Экземпляр = Ссылка;
		Запись.Состояние = Состояние;
		
		НаборЗаписейИстории.Записать();
	КонецЕсли;	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка.Состояние <> Состояние Тогда
		Если Состояние = Перечисления.СостоянияСценария.Стартован
			ИЛИ Состояние = Перечисления.СостоянияСценария.Запланирован
			ИЛИ Состояние = Перечисления.СостоянияСценария.ТестСтартован Тогда  
			
			Если РежимВыполнения.Пустая() Тогда				
				Отказ = Истина;
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не выбран режим выполнения'");
				Сообщение.Поле = "РежимВыполнения";
				Сообщение.Сообщить();
				
				ЗаписьЖурналаРегистрации(НСтр("ru='Экземпляр сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru='Не выбран режим выполнения'"));
			КонецЕсли;	

			// Проверим заполнение единиц оборудования 
			Если СопоставлениеШаблоновОборудования.Количество() = 0 Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не заполнены единицы оборудования. Проверьте корректность заполнения шагов сценария.'");
				Сообщение.Поле = "Объект.СопоставлениеШаблоновОборудования";
				Сообщение.Сообщить();
				
				ЗаписьЖурналаРегистрации(НСтр("ru='Экземпляр сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru='Не заполнены значения единиц оборудования, на которых планируется выполнять сценарий'"));
			Иначе	
				НезаполненныеАгенты = СопоставлениеШаблоновОборудования.НайтиСтроки(Новый Структура("РеальноеЗначение", Справочники.АгентыКИП.ПустаяСсылка()));
				Если НезаполненныеАгенты.Количество() > 0 Тогда
					Запрос = Новый Запрос("ВЫБРАТЬ
					                      |	ШаблоныОборудования.НомерСтроки КАК НомерСтроки,
					                      |	ШаблоныОборудования.Шаблон КАК Шаблон,
					                      |	ШаблоныОборудования.РеальноеЗначение КАК РеальноеЗначение
					                      |ПОМЕСТИТЬ Шаблоны
					                      |ИЗ
					                      |	&ШаблоныОборудования КАК ШаблоныОборудования
					                      |ГДЕ
					                      |	ШаблоныОборудования.РеальноеЗначение = ЗНАЧЕНИЕ(Справочник.АгентыКИП.ПустаяСсылка)
					                      |;
					                      |
					                      |////////////////////////////////////////////////////////////////////////////////
					                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
					                      |	Шаблоны.НомерСтроки - 1 КАК НомерСтроки,
					                      |	Шаблоны.Шаблон КАК Шаблон
					                      |ИЗ
					                      |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
					                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Шаблоны КАК Шаблоны
					                      |		ПО СтруктураШаговСценария.ШаблонОборудования = Шаблоны.Шаблон
					                      |			И (СтруктураШаговСценария.Сценарий = &Сценарий)
					                      |			И (СтруктураШаговСценария.Использовать)");
					МассивНезаполненных = Новый Массив;
					Для Каждого Элемент Из НезаполненныеАгенты Цикл
						МассивНезаполненных.Добавить(Элемент.Шаблон);
					КонецЦикла;	
					
					Запрос.УстановитьПараметр("Сценарий", Ссылка);
					Запрос.УстановитьПараметр("ШаблоныОборудования", СопоставлениеШаблоновОборудования.Выгрузить());
					
					Результат = Запрос.Выполнить();
					
					Если Не Результат.Пустой() Тогда
						Отказ = Истина;
						
						ВыгрузкаСтрокПустыхШаблонов = Результат.Выгрузить();

						Для каждого СтрокаПустыхШаблонов Из ВыгрузкаСтрокПустыхШаблонов Цикл
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = НСтр("ru='Не заполнено реальное значение единицы оборудования для: '") + СтрокаПустыхШаблонов.Шаблон;
							Сообщение.Поле = "Объект.СопоставлениеШаблоновОборудования[" + СтрокаПустыхШаблонов.НомерСтроки + "].РеальноеЗначение";
							Сообщение.Сообщить();
						КонецЦикла;	
						
						ЗаписьЖурналаРегистрации(НСтр("ru='Экземпляр сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru='Заполнены не все значения единиц оборудования, на которых планируется выполнять сценарий'"));
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
			
			// Проверка, что живы Агенты
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	АгентыКИП.Представление КАК Агент,
			                      |	ВЫБОР
			                      |		КОГДА АктивностьАгентовКИП.ДатаКрайнейАктивности ЕСТЬ NULL
			                      |				ИЛИ АктивностьАгентовКИП.ДатаКрайнейАктивности = ДАТАВРЕМЯ(1, 1, 1)
			                      |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			                      |		ИНАЧЕ ДОБАВИТЬКДАТЕ(ЕСТЬNULL(АктивностьАгентовКИП.ДатаКрайнейАктивности, ДАТАВРЕМЯ(1, 1, 1)), СЕКУНДА, &РазницаСУниверсальнойДатой)
			                      |	КОНЕЦ КАК ДатаПоследнейАктивности
			                      |ИЗ
			                      |	Справочник.АгентыКИП КАК АгентыКИП
			                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктивностьАгентовКИП КАК АктивностьАгентовКИП
			                      |		ПО АгентыКИП.Ссылка = АктивностьАгентовКИП.АгентКИП
			                      |ГДЕ
			                      |	АгентыКИП.Ссылка В(&СсылкиНаАгента)
			                      |	И РАЗНОСТЬДАТ(АктивностьАгентовКИП.ДатаКрайнейАктивности, &ТекущаяДатаUTC, СЕКУНДА) > 3 * АгентыКИП.ПериодОтправкиДанных");
			СтруктураДат = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьСтруктуруДатСеанса();
	
			ТекДата = СтруктураДат.ТекущаяДатаСеанса;
			ТекУниверсальнаяДата = СтруктураДат.ТекущаяУниверсальнаяДатаСеанса;
			
			Запрос.УстановитьПараметр("РазницаСУниверсальнойДатой", ТекДата - ТекУниверсальнаяДата);
			Запрос.УстановитьПараметр("ТекущаяДатаUTC", ТекУниверсальнаяДата);
			Запрос.УстановитьПараметр("СсылкиНаАгента", СопоставлениеШаблоновОборудования.ВыгрузитьКолонку("РеальноеЗначение"));

			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Отказ = Истина;
				
				ВыгрузкаСтрокМертвыхАгентов = Результат.Выгрузить();
				
				ТекстСообщения = НСтр("ru='Не активны Агенты КИП: '");
				Для каждого СтрокаАгента Из ВыгрузкаСтрокМертвыхАгентов Цикл
					ТекстСообщения = ТекстСообщения + Символы.ПС + СтрокаАгента.Агент + " не активен с " + СтрокаАгента.ДатаПоследнейАктивности;
				КонецЦикла;	
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Поле = "Объект.СопоставлениеШаблоновОборудования";
				Сообщение.Сообщить();

				ЗаписьЖурналаРегистрации(НСтр("ru='Экземпляр сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Предупреждение,,, НСтр("ru='Не активны Агенты КИП'"));
			КонецЕсли;	
			
			// Проверим заполнение программного интерфейса
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	СтруктураШаговСценария.Команда КАК Команда,
			               |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага
			               |ПОМЕСТИТЬ ШагиДанногоСценария
			               |ИЗ
			               |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
			               |ГДЕ
			               |	СтруктураШаговСценария.Сценарий = &ЭкземплярСценария
			               |	И СтруктураШаговСценария.ТипШага = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовСхемыСценария.Шаг)
			               |	И СтруктураШаговСценария.Использовать
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ШагиДанногоСценария.Команда КАК Команда,
			               |	ШагиДанногоСценария.ИдентификаторШага КАК ИдентификаторШага,
			               |	ПрограммныйИнтерфейсАвтоматизацииСрезПоследних.КомандаДляАгента КАК КомандаДляАгента
			               |ИЗ
			               |	ШагиДанногоСценария КАК ШагиДанногоСценария
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрограммныйИнтерфейсАвтоматизации.СрезПоследних КАК ПрограммныйИнтерфейсАвтоматизацииСрезПоследних
			               |		ПО ШагиДанногоСценария.Команда = ПрограммныйИнтерфейсАвтоматизацииСрезПоследних.Команда
			               |ГДЕ
			               |	ПрограммныйИнтерфейсАвтоматизацииСрезПоследних.КомандаДляАгента ЕСТЬ NULL
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |УНИЧТОЖИТЬ ШагиДанногоСценария";
			
			Запрос.УстановитьПараметр("ЭкземплярСценария", Ссылка);
			
			РезультатЗапросаПараметров = Запрос.Выполнить();
			
			Если Не РезультатЗапросаПараметров.Пустой() Тогда 
				Отказ = Истина;

				ТекстСообщения = "Не заполнено соответсвие команд для Агента командам сценария:";
				ВыборкаДляИнформации = РезультатЗапросаПараметров.Выбрать();
				
				Пока ВыборкаДляИнформации.Следующий() Цикл
					ТекстСообщения = ТекстСообщения + Символы.ПС + ВыборкаДляИнформации.Команда;
				КонецЦикла;	
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
				Сообщение.Сообщить();
				
				ЗаписьЖурналаРегистрации(НСтр("ru='Экземпляр сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);

			КонецЕсли;
		
			// Проверим параметры
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ШагиАвтоматизации.Ссылка КАК Ссылка,
			               |	ШагиАвтоматизации.Команда КАК Команда,
			               |	ШагиАвтоматизации.Код КАК Код,
			               |	ШагиАвтоматизации.Представление КАК Представление
			               |ПОМЕСТИТЬ ШагиЭтогоСценария
			               |ИЗ
			               |	Справочник.ШагиАвтоматизации КАК ШагиАвтоматизации
			               |ГДЕ
			               |	ШагиАвтоматизации.Владелец = &ЭкземплярСценария
			               |	И ШагиАвтоматизации.ТипШага = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовСхемыСценария.Шаг)
			               |	И ШагиАвтоматизации.Использовать
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ШаблоныЗаполненияПараметровСценариев.ИмяШаблона КАК ИмяШаблона,
			               |	ШаблоныЗаполненияПараметровСценариев.СпособЗаполнения КАК СпособЗаполнения
			               |ПОМЕСТИТЬ Шаблоны
			               |ИЗ
			               |	РегистрСведений.ШаблоныЗаполненияПараметровСценариев КАК ШаблоныЗаполненияПараметровСценариев
			               |ГДЕ
			               |	ШаблоныЗаполненияПараметровСценариев.ЭкземплярСценария = &ЭкземплярСценария
			               |	И ШаблоныЗаполненияПараметровСценариев.СпособЗаполнения <> ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПараметровКоманды.РучнойВвод)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра КАК ИмяПараметра,
			               |	ШагиЭтогоСценария.Код КАК Код,
			               |	ШагиЭтогоСценария.Представление КАК Представление,
			               |	Шаблоны.ИмяШаблона КАК ИмяШаблона,
			               |	Шаблоны.СпособЗаполнения КАК СпособЗаполнения
			               |ИЗ
			               |	ШагиЭтогоСценария КАК ШагиЭтогоСценария
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомандыАвтоматизации.ПараметрыОбязательные КАК КомандыАвтоматизацииПараметрыОбязательные
			               |		ПО ШагиЭтогоСценария.Команда = КомандыАвтоматизацииПараметрыОбязательные.Ссылка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыШаговАвтоматизации КАК ПараметрыШаговАвтоматизации
			               |			ЛЕВОЕ СОЕДИНЕНИЕ Шаблоны КАК Шаблоны
			               |			ПО ПараметрыШаговАвтоматизации.ШаблонЗаполнения = Шаблоны.ИмяШаблона
			               |		ПО ШагиЭтогоСценария.Ссылка = ПараметрыШаговАвтоматизации.ИдентификаторШага
			               |			И ШагиЭтогоСценария.Команда = ПараметрыШаговАвтоматизации.Команда
			               |			И (КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра = ПараметрыШаговАвтоматизации.Параметр)
			               |ГДЕ
			               |	(ПараметрыШаговАвтоматизации.Параметр ЕСТЬ NULL
			               |			ИЛИ ПараметрыШаговАвтоматизации.Значение = """"
			               |				И Шаблоны.ИмяШаблона ЕСТЬ NULL
			               |			ИЛИ Шаблоны.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПараметровКоманды.ИзОбъектаМетаданных)
			               |			ИЛИ Шаблоны.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПараметровКоманды.ИзКонфиденциальногоХранилища))
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра,
			               |	ШагиЭтогоСценария.Код,
			               |	ШагиЭтогоСценария.Представление,
			               |	Шаблоны.ИмяШаблона,
			               |	Шаблоны.СпособЗаполнения
			               |ИЗ
			               |	ШагиЭтогоСценария КАК ШагиЭтогоСценария
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомандыАвтоматизации.ПараметрыДополнительные КАК КомандыАвтоматизацииПараметрыДополнительные
			               |		ПО ШагиЭтогоСценария.Команда = КомандыАвтоматизацииПараметрыДополнительные.Ссылка
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыШаговАвтоматизации КАК ПараметрыШаговАвтоматизации
			               |		ПО ШагиЭтогоСценария.Ссылка = ПараметрыШаговАвтоматизации.ИдентификаторШага
			               |			И ШагиЭтогоСценария.Команда = ПараметрыШаговАвтоматизации.Команда
			               |			И (КомандыАвтоматизацииПараметрыДополнительные.ИмяПараметра = ПараметрыШаговАвтоматизации.Параметр)
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Шаблоны КАК Шаблоны
			               |		ПО (ПараметрыШаговАвтоматизации.ШаблонЗаполнения = Шаблоны.ИмяШаблона)
			               |ГДЕ
			               |	(ПараметрыШаговАвтоматизации.Значение = """"
			               |				И Шаблоны.ИмяШаблона ЕСТЬ NULL
			               |			ИЛИ Шаблоны.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПараметровКоманды.ИзОбъектаМетаданных)
			               |			ИЛИ Шаблоны.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПараметровКоманды.ИзКонфиденциальногоХранилища))
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |УНИЧТОЖИТЬ ШагиЭтогоСценария
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |УНИЧТОЖИТЬ Шаблоны";
			
			Запрос.УстановитьПараметр("ЭкземплярСценария", Ссылка);
			
			РезультатЗапросаПараметров = Запрос.Выполнить();
			ТекстСообщения = "";
			Если Не РезультатЗапросаПараметров.Пустой() Тогда
				ВыборкаДляИнформации = РезультатЗапросаПараметров.Выбрать();
				
				Пока ВыборкаДляИнформации.Следующий() Цикл
					Если ВыборкаДляИнформации.СпособЗаполнения = Перечисления.СпособыЗаполненияПараметровКоманды.ИзОбъектаМетаданных
						Или ВыборкаДляИнформации.СпособЗаполнения = Перечисления.СпособыЗаполненияПараметровКоманды.ИзКонфиденциальногоХранилища Тогда
						НЗ = РегистрыСведений.ШаблоныЗаполненияПараметровСценариев.СоздатьНаборЗаписей();
						НЗ.Отбор.ЭкземплярСценария.Установить(Ссылка);
						НЗ.Отбор.ИмяШаблона.Установить(ВыборкаДляИнформации.ИмяШаблона);
						
						НЗ.Прочитать();
						
						Для Каждого Запись Из НЗ Цикл
							СсылкаНаОбъектЗаполнения = Запись.Объект.Получить();
							Если СсылкаНаОбъектЗаполнения = Неопределено Или СсылкаНаОбъектЗаполнения.Пустая() Тогда
								ТекстСообщения = ТекстСообщения + Символы.ПС + "Пустое значение в шаблоне ->" + ВыборкаДляИнформации.ИмяШаблона + ";";
								Отказ = Истина;
							КонецЕсли;	
						КонецЦикла;
					Иначе
						ТекстСообщения = ТекстСообщения + Символы.ПС + "Шаг " + ВыборкаДляИнформации.Код + ". "  + ВыборкаДляИнформации.Представление + "->" + ВыборкаДляИнформации.ИмяПараметра + ";";
						Отказ = Истина;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ТекстСообщения = "Не заполнены обязательные параметры и шаблоны: " + ТекстСообщения;	
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
				Сообщение.Сообщить();
				
				ЗаписьЖурналаРегистрации(НСтр("ru='Экземпляр сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			КонецЕсли;	
		КонецЕсли;	
		
		// Проверим на монопольность
		Если Состояние = Перечисления.СостоянияСценария.Стартован И РежимВыполнения <> Перечисления.РежимВыполненияСценария.Фоновое Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			                      |	ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблоновОборудования.РеальноеЗначение.Представление КАК Агент
			                      |ИЗ
			                      |	Справочник.ЭкземплярыСценариевАвтоматизации.СопоставлениеШаблоновОборудования КАК ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблоновОборудования
			                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
			                      |		ПО ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблоновОборудования.Ссылка = СтруктураШаговСценария.Сценарий
			                      |			И ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблоновОборудования.Шаблон = СтруктураШаговСценария.ШаблонОборудования
			                      |			И (СтруктураШаговСценария.Использовать)
			                      |			И (СтруктураШаговСценария.ТипШага = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовСхемыСценария.Шаг))
			                      |			И (ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблоновОборудования.Ссылка.Состояние В (&АктивныеСостояния))
			                      |			И (ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблоновОборудования.РеальноеЗначение В (&РеальноеЗначение))
			                      |			И (ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблоновОборудования.Ссылка.РежимВыполнения = ЗНАЧЕНИЕ(Перечисление.РежимВыполненияСценария.Монопольное))
			                      |ГДЕ
			                      |	ЭкземплярыСценариевАвтоматизацииСопоставлениеШаблоновОборудования.Ссылка <> &ЭтаСсылка");
			
			Запрос.УстановитьПараметр("ЭтаСсылка", Ссылка);
			Запрос.УстановитьПараметр("РеальноеЗначение", СопоставлениеШаблоновОборудования.ВыгрузитьКолонку("РеальноеЗначение"));
			Запрос.УстановитьПараметр("АктивныеСостояния", РаботаСоСценариямиАвтоматизацииСервер.ПолучитьАктивныеСостояния());
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ТекстСообщения = "Найден стартованный ранее монопольный сценарий для машин: ";
				
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					ТекстСообщения = ТекстСообщения + Символы.ПС + Выборка.Агент;
				КонецЦикла;	
				
				Отказ = Истина;
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
				Сообщение.Сообщить();
				
				ЗаписьЖурналаРегистрации(НСтр("ru='Экземпляр сценария'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры
#КонецЕсли
#КонецОбласти

#Область МетодыОбъекта
Процедура ЗаполнитьЭкземплярНаСервере() Экспорт
	УдалитьНеактуальныеШаги();
	
	Дерево = СоздатьШагиАвтоматизации();

	Если Не ЗначениеЗаполнено(КонтурАвтоматизации) Тогда
		КонтурАвтоматизации = РаботаСоСценариямиАвтоматизацииСервер.ВыбратьКонтурАдминистрирования();
	КонецЕсли;	
	
	ОбъектыЗаполненияПараметров = Новый ТаблицаЗначений;
	ОбъектыЗаполненияПараметров.Колонки.Добавить("ОтносительнаяСсылкаНаМетаданные");
	ОбъектыЗаполненияПараметров.Колонки.Добавить("Объект");
	ОбъектыЗаполненияПараметров.Колонки.Добавить("ИмяШаблона", Новый ОписаниеТипов());
	ОбъектыЗаполненияПараметров.Колонки.Добавить("Значение");
	ОбъектыЗаполненияПараметров.Колонки.Добавить("СпособЗаполнения");
	ОбъектыЗаполненияПараметров.Колонки.Добавить("УчаствуетВИнтерфейсныхГруппировках");
	
	ОбновитьВспомогательныеДанныеИзСценария(ОбъектыЗаполненияПараметров);
	ЗаписатьТаблицуОбъектовПривязки(ОбъектыЗаполненияПараметров);
	ПочиститьПараметры();
	
	ПолучитьПараметрыИзСценария(ОбъектыЗаполненияПараметров);
	
	Наименование = СформироватьНаименованиеНаСервере();
КонецПроцедуры

Процедура УдалитьНеактуальныеШаги()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ШагиАвтоматизации.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ШагиАвтоматизации КАК ШагиАвтоматизации
	                      |ГДЕ
	                      |	ШагиАвтоматизации.Владелец = &Владелец
	                      |	И ШагиАвтоматизации.Родитель = ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)");
	Запрос.УстановитьПараметр("Владелец", ?(ЭтоНовый(), ПолучитьСсылкуНового(), Ссылка));
	Шаги = Запрос.Выполнить().Выбрать();
	Пока Шаги.Следующий() Цикл
		ОбъектШага = Шаги.Ссылка.ПолучитьОбъект();
		ОбъектШага.Удалить();
	КонецЦикла;	
КонецПроцедуры	

Функция СоздатьШагиАвтоматизации()
	Дерево =  ПодготовитьДеревоСценария();
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		ТаблицаШагов = РаботаСоСценариямиАвтоматизацииСервер.СоздатьЭлементыШаговАвтоматизации(?(ЭтоНовый(), ПолучитьСсылкуНового(), Ссылка), Владелец);
		РаботаСоСценариямиАвтоматизацииСервер.ВизуализацияДерева(ТаблицаШагов, Дерево);
	КонецЕсли;	
	Дерево.Колонки.Удалить("НомерШага");
	
	Возврат Дерево;
КонецФункции

Функция ПодготовитьДеревоСценария() Экспорт
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("НомерШага");
	Дерево.Колонки.Добавить("ТипШага");
	Дерево.Колонки.Добавить("ШаблонЕдиницыОборудования");
	Дерево.Колонки.Добавить("ИдентификаторШага");
	Дерево.Колонки.Добавить("ИдентификаторШагаОтката");
	Дерево.Колонки.Добавить("Использовать");
	Дерево.Колонки.Добавить("ИспользоватьОткат");
	Дерево.Колонки.Добавить("ДопИнформация");
	Дерево.Колонки.Добавить("ДопИнформацияОткат");
	Дерево.Колонки.Добавить("ВремяНачала");
	Дерево.Колонки.Добавить("ИндексКартинки");
	
	Возврат Дерево;
КонецФункции	

Процедура ОбновитьВспомогательныеДанныеИзСценария(ОбъектыЗаполненияПараметров) Экспорт
	РежимВыполнения = Владелец.РежимВыполнения;
	
	// сначала загрузим шаблоны Агентов
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ШаблонЕдиницыОборудования КАК Шаблон,
	                      |	"""" КАК РеальноеЗначение
	                      |ИЗ
	                      |	Справочник.СценарииАвтоматизации.ШагиАвтоматизации КАК СценарииАвтоматизацииШагиАвтоматизации
	                      |ГДЕ
	                      |	СценарииАвтоматизацииШагиАвтоматизации.Ссылка = &Сценарий
	                      |	И СценарииАвтоматизацииШагиАвтоматизации.ТипШага = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовСхемыСценария.Шаг)
	                      |	И СценарииАвтоматизацииШагиАвтоматизации.ШаблонЕдиницыОборудования <> ЗНАЧЕНИЕ(Справочник.ШаблоныЕдиницАвтоматизации.ПустаяСсылка)
						  |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СценарииАвтоматизацииШагиАвтоматизации.ШаблонЕдиницыОборудования");
	
	Запрос.УстановитьПараметр("Сценарий", Владелец);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	КолВо = СопоставлениеШаблоновОборудования.Количество();
	Для й = 1 По КолВо Цикл
		НайденныйЭлемент = РезультатЗапроса.Найти(СопоставлениеШаблоновОборудования[КолВо-й].Шаблон);
		Если НайденныйЭлемент <> Неопределено Тогда
			РезультатЗапроса.Удалить(НайденныйЭлемент);
		Иначе
			СопоставлениеШаблоновОборудования.Удалить(КолВо-й);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Строка Из РезультатЗапроса Цикл
		НоваяСтрока = СопоставлениеШаблоновОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;	
	
	// а теперь загрузим данные объектов для переопределения параметров команд
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	СценарииАвтоматизацииШаблоныЗаполненияПараметров.ИмяШаблона КАК ИмяШаблона,
	                      |	СценарииАвтоматизацииШаблоныЗаполненияПараметров.СпособЗаполнения КАК СпособЗаполнения,
	                      |	СценарииАвтоматизацииШаблоныЗаполненияПараметров.ОтносительнаяСсылкаНаМетаданные КАК ОтносительнаяСсылкаНаМетаданные,
	                      |	ВЫБОР
	                      |		КОГДА СценарииАвтоматизацииШаблоныЗаполненияПараметров.УчаствуетВИнтерфейсныхГруппировках
	                      |			ТОГДА 1
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК УчаствуетВИнтерфейсныхГруппировках,
	                      |	СценарииАвтоматизацииШаблоныЗаполненияПараметров.Объект КАК Объект,
						  | ВЫРАЗИТЬ("""" КАК СТРОКА(150)) КАК Значение
	                      |ИЗ
	                      |	Справочник.СценарииАвтоматизации.ШаблоныЗаполненияПараметров КАК СценарииАвтоматизацииШаблоныЗаполненияПараметров
	                      |ГДЕ
	                      |	СценарииАвтоматизацииШаблоныЗаполненияПараметров.Ссылка = &Ссылка
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ИмяШаблона");
	
	Запрос.УстановитьПараметр("Ссылка", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	КолВо = ОбъектыЗаполненияПараметров.Количество();
	Для й = 1 По КолВо Цикл
		НайденныйЭлемент = РезультатЗапроса.Найти(ОбъектыЗаполненияПараметров[КолВо-й].ИмяШаблона);
		Если НайденныйЭлемент <> Неопределено Тогда
			РезультатЗапроса.Удалить(НайденныйЭлемент);
		Иначе
			ОбъектыЗаполненияПараметров.Удалить(КолВо-й);	
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Строка Из ОбъектыЗаполненияПараметров Цикл
		НоваяСтрока = РезультатЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
	КонецЦикла;
	
	Для Каждого Строка Из РезультатЗапроса Цикл
		РаботаСоСценариямиАвтоматизацииСервер.ЗаполнитьЗначениеПараметраПоДаннымОбъекта(Строка);
	КонецЦикла;
	
	Запрос = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьЗапросДляОбработкиВложенныхПараметров(РезультатЗапроса);
	
	ВыборкаВерхнегоУровня = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВерхнегоУровня.Следующий() Цикл
		ВыборкаВложенных = ВыборкаВерхнегоУровня.Выбрать();
		СтроковыйПараметр = "";
		Пока ВыборкаВложенных.Следующий() Цикл
			Если СтроковыйПараметр = "" Тогда
				СтроковыйПараметр = ВыборкаВложенных.Объект;
			КонецЕсли;	
			СтроковыйПараметр = СтрЗаменить(СтроковыйПараметр, ВыборкаВложенных.ИмяШаблонаВложенного, ВыборкаВложенных.ЗначениеВложенного);
		КонецЦикла;	
		
		Строки = РезультатЗапроса.НайтиСтроки(Новый Структура("ИмяШаблона", ВыборкаВерхнегоУровня.ИмяШаблона));		
		Для каждого Строка из Строки Цикл
			Строка.Значение = СтроковыйПараметр;
		КонецЦикла;
	КонецЦикла;	
	
	//Для Каждого Строка Из РезультатЗапроса Цикл
	//	Строка.Значение = РаботаСоСценариямиАвтоматизацииКлиентСервер.ТрансляцияСоставногоПараметра(Строка.Объект, ОбъектыЗаполненияПараметров);
	//КонецЦикла;	

	ОбъектыЗаполненияПараметров = РезультатЗапроса.Скопировать();
КонецПроцедуры

Процедура ЗаписатьТаблицуОбъектовПривязки(ЗНАЧ ОбъектыЗаполненияПараметров) Экспорт
	НЗ = РегистрыСведений.ШаблоныЗаполненияПараметровСценариев.СоздатьНаборЗаписей();
	НЗ.Отбор.ЭкземплярСценария.Установить(?(ЭтоНовый(), ПолучитьСсылкуНового(), Ссылка));
	Для каждого Строка Из ОбъектыЗаполненияПараметров Цикл
		НоваяЗапись = НЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
		НоваяЗапись.ЭкземплярСценария = ?(ЭтоНовый(), ПолучитьСсылкуНового(), Ссылка);
		НоваяЗапись.Объект = Новый ХранилищеЗначения(Строка.Объект);
		НоваяЗапись.УчаствуетВИнтерфейсныхГруппировках = ?(Строка.УчаствуетВИнтерфейсныхГруппировках=0, ЛОЖЬ, ИСТИНА);
	КонецЦикла;
	НЗ.Записать();
КонецПроцедуры	

Процедура ПочиститьПараметры()
	Шаги = Справочники.ШагиАвтоматизации.Выбрать(, ?(ЭтоНовый(), ПолучитьСсылкуНового(), Ссылка));
	Пока Шаги.Следующий() Цикл
		НЗ = РегистрыСведений.ПараметрыШаговАвтоматизации.СоздатьНаборЗаписей();
		НЗ.Отбор.ИдентификаторШага.Установить(Шаги.Ссылка);
		НЗ.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПолучитьПараметрыИзСценария(ОбъектыЗаполненияПараметров, ДляНачальногоЗаполнения = Истина) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СтруктураШаговСценария.Сценарий КАК Сценарий,
	                      |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага,
	                      |	СтруктураШаговСценария.Команда КАК Команда,
	                      |	СтруктураШаговСценария.НомерШага КАК НомерШага,
	                      |	СтруктураШаговСценария.УникальныйИдентификаторШага КАК УникальныйИдентификаторШага,
	                      |	СтруктураШаговСценария.ТипШага КАК ТипШага,
	                      |	СтруктураШаговСценария.ВремяНачала КАК ВремяНачала,
	                      |	СтруктураШаговСценария.СостояниеШага КАК СостояниеШага,
	                      |	СтруктураШаговСценария.СостояниеШагаПриТесте КАК СостояниеШагаПриТесте,
	                      |	СтруктураШаговСценария.Оборудование КАК Оборудование,
	                      |	СтруктураШаговСценария.ШаблонОборудования КАК ШаблонОборудования,
	                      |	СтруктураШаговСценария.Использовать КАК Использовать,
	                      |	СтруктураШаговСценария.ДатаСтарта КАК ДатаСтарта,
	                      |	СтруктураШаговСценария.ДатаЗавершения КАК ДатаЗавершения,
	                      |	СтруктураШаговСценария.ДатаСтартаТеста КАК ДатаСтартаТеста,
	                      |	СтруктураШаговСценария.ДатаЗавершенияТеста КАК ДатаЗавершенияТеста,
	                      |	СтруктураШаговСценария.ОткатываемыйШаг КАК ОткатываемыйШаг,
	                      |	&Владелец КАК Владелец
	                      |ПОМЕСТИТЬ СтруктураШаговЭтогоСценария
	                      |ИЗ
	                      |	РегистрСведений.СтруктураШаговСценария КАК СтруктураШаговСценария
	                      |ГДЕ
	                      |	СтруктураШаговСценария.Сценарий = &Сценарий
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СценарииАвтоматизацииПараметрыШаговАвтоматизации.Параметр КАК Параметр,
	                      |	ВЫБОР
	                      |		КОГДА СценарииАвтоматизацииШаблоныЗаполненияПараметров.ЭкземплярСценария ЕСТЬ NULL
	                      |			ТОГДА СценарииАвтоматизацииПараметрыШаговАвтоматизации.Значение
	                      |		ИНАЧЕ """"
	                      |	КОНЕЦ КАК Значение,
	                      |	ВЫБОР
	                      |		КОГДА СценарииАвтоматизацииШаблоныЗаполненияПараметров.ЭкземплярСценария ЕСТЬ NULL
	                      |			ТОГДА """"
	                      |		ИНАЧЕ СценарииАвтоматизацииШаблоныЗаполненияПараметров.ИмяШаблона
	                      |	КОНЕЦ КАК ШаблонЗаполнения,
	                      |	СтруктураШаговСценария.ИдентификаторШага КАК ИдентификаторШага,
	                      |	СтруктураШаговСценария.Команда КАК Команда
	                      |ИЗ
	                      |	СтруктураШаговЭтогоСценария КАК СтруктураШаговСценария
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СценарииАвтоматизации.ПараметрыШаговАвтоматизации КАК СценарииАвтоматизацииПараметрыШаговАвтоматизации
	                      |		ПО (СценарииАвтоматизацииПараметрыШаговАвтоматизации.Ссылка = СтруктураШаговСценария.Владелец)
	                      |			И СтруктураШаговСценария.УникальныйИдентификаторШага = СценарииАвтоматизацииПараметрыШаговАвтоматизации.УникальныйИдентификаторШага
	                      |			И (СтруктураШаговСценария.ОткатываемыйШаг = ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)
	                      |					И СценарииАвтоматизацииПараметрыШаговАвтоматизации.ДляОтката = ЛОЖЬ
	                      |				ИЛИ СтруктураШаговСценария.ОткатываемыйШаг <> ЗНАЧЕНИЕ(Справочник.ШагиАвтоматизации.ПустаяСсылка)
	                      |					И СценарииАвтоматизацииПараметрыШаговАвтоматизации.ДляОтката = ИСТИНА)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШаблоныЗаполненияПараметровСценариев КАК СценарииАвтоматизацииШаблоныЗаполненияПараметров
	                      |		ПО (СценарииАвтоматизацииПараметрыШаговАвтоматизации.Ссылка = &Владелец)
	                      |			И (СценарииАвтоматизацииШаблоныЗаполненияПараметров.ЭкземплярСценария = &Сценарий)
	                      |			И (СценарииАвтоматизацииПараметрыШаговАвтоматизации.Значение = СценарииАвтоматизацииШаблоныЗаполненияПараметров.ИмяШаблона)
	                      |			И (СценарииАвтоматизацииПараметрыШаговАвтоматизации.ИзШаблона = ИСТИНА)
	                      |ГДЕ
	                      |	СценарииАвтоматизацииПараметрыШаговАвтоматизации.Значение <> """"
	                      |ИТОГИ ПО
	                      |	ИдентификаторШага
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ СтруктураШаговЭтогоСценария");
	
	Запрос.УстановитьПараметр("Владелец", Владелец);	
	Запрос.УстановитьПараметр("Сценарий", ?(ЭтоНовый(), ПолучитьСсылкуНового(), Ссылка));	
		
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ЗапросОбязательных = Новый Запрос("ВЫБРАТЬ
	                                  |	КомандыАвтоматизацииПараметрыОбязательные.ИмяПараметра КАК Параметр,
	                                  |	КомандыАвтоматизацииПараметрыОбязательные.Ссылка КАК Команда
	                                  |ИЗ
	                                  |	Справочник.КомандыАвтоматизации.ПараметрыОбязательные КАК КомандыАвтоматизацииПараметрыОбязательные
	                                  |ГДЕ
	                                  |	КомандыАвтоматизацииПараметрыОбязательные.Ссылка = &Команда");
	
	Пока Выборка.Следующий() Цикл
		
		НЗ = РегистрыСведений.ПараметрыШаговАвтоматизации.СоздатьНаборЗаписей();
		НЗ.Отбор.ИдентификаторШага.Установить(Выборка.ИдентификаторШага);
		ВыборкаДетальные = Выборка.Выбрать();
		Если ДляНачальногоЗаполнения Тогда
			ТаблПараметров = Неопределено;
			Пока ВыборкаДетальные.Следующий() Цикл
				Если ТаблПараметров = Неопределено Тогда
					ЗапросОбязательных.УстановитьПараметр("Команда", ВыборкаДетальные.Команда);
					ТаблПараметров = ЗапросОбязательных.Выполнить().Выгрузить();
				КонецЕсли;	

				Запись = НЗ.Добавить();
				РаботаСоСценариямиАвтоматизацииСервер.ЗаполнитьЗаписьПараметров(Запись, Выборка.ИдентификаторШага, ВыборкаДетальные, ОбъектыЗаполненияПараметров);
				
				СтрокаВКоманде = ТаблПараметров.Найти(ВыборкаДетальные.Параметр);
				Если СтрокаВКоманде <> Неопределено Тогда
					ТаблПараметров.Удалить(СтрокаВКоманде);
				КонецЕсли;	
			КонецЦикла;
			Для Каждого СтрокаВКоманде Из ТаблПараметров Цикл
				Запись = НЗ.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаВКоманде);
				Запись.ИдентификаторШага = Выборка.ИдентификаторШага;
			КонецЦикла;	
			
			НЗ.Записать();
		Иначе
			Пока ВыборкаДетальные.Следующий() Цикл
				НЗ.Отбор.Команда.Установить(ВыборкаДетальные.Команда);
				НЗ.Отбор.Параметр.Установить(ВыборкаДетальные.Параметр);
				НЗ.Прочитать();
				Если НЗ.Количество() = 0 Тогда
					Запись = НЗ.Добавить();
					РаботаСоСценариямиАвтоматизацииСервер.ЗаполнитьЗаписьПараметров(Запись, Выборка.ИдентификаторШага, ВыборкаДетальные, ОбъектыЗаполненияПараметров);
					
					НЗ.Записать();
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЦикла;	
КонецПроцедуры

Функция СформироватьНаименованиеНаСервере() Экспорт
	Наименование = РаботаСоСценариямиАвтоматизацииСервер.ПолучитьНаименованиеЭкземпляраСценария(ЭтотОбъект);
	
	Возврат Наименование;
КонецФункции

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Операция, вызываемая при обработке оповещений в регламентном задании
//
// Параметры:
//  ИсточникИнцидентовЦККСсылка - СправочникСсылка.ОбнаружениеИнцидентов - ссылка на обнаружение инцидента
//
// Возвращаемое значение:
//  РегистрСведенийКлючЗаписи.ЖурналОповещений, Неопределено - Ключ, если было сформировано оповещение
//
Функция ВыполнитьЗамер(Знач ИсточникИнцидентовЦККСсылка) Экспорт
    
    Замер = ВнутренниеЗамеры.НачатьЗамер("Обнаружение инцидентов выполнить замер");
    
    ЗначенияПоказателей = "";
	ЗначенияПоказателейМассив = Новый Массив;
		
	ТекДата = ТекущаяДата();
	
	ПоказателиИнцидентов = ПолучитьПоказателиИнцидентов(ИсточникИнцидентовЦККСсылка);
	ОткрыватьИнцидент = ПроверитьОткрыватьИнцидент(ПоказателиИнцидентов, ИсточникИнцидентовЦККСсылка, ТекДата, ЗначенияПоказателей, ЗначенияПоказателейМассив);	
    
    Если ОткрыватьИнцидент = Неопределено Тогда
        Возврат ОткрыватьИнцидент;
    КонецЕсли;
    
	Если ИсточникИнцидентовЦККСсылка.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.Открытие ИЛИ ИсточникИнцидентовЦККСсылка.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.ОткрытиеЗакрытие Тогда
		// Открываем инциденты только если срабатывает условие
		Если ОткрыватьИнцидент Тогда
			ОткрытыеОповещения = Новый Соответствие;
			Для Каждого ТекПоказатель Из ЗначенияПоказателейМассив Цикл
				Если ТекПоказатель.СобытиеПроизошло <> Неопределено И ТекПоказатель.СобытиеПроизошло Тогда
					
					СообщениеИнцидента = СформироватьСообщениеИнцидента(ТекПоказатель);
					
					ИнцидентыСервер.ОткрытьИнцидент(
					    ИсточникИнцидентовЦККСсылка.ТипИнцидента,
					    ТекПоказатель.ПоказательОписание,
					    ТекПоказатель.ПоказательОписание,
					    "",
					    СообщениеИнцидента,
					    1,
					    Ложь,
					    Истина,
					    ИсточникИнцидентовЦККСсылка.УровеньИнцидента,
                        ТекПоказатель.ПоказательОбъект.Ссылка);
					
					Запись = РегистрыСведений.Инциденты.ПолучитьМенеджерЗаписи(ТекПоказатель.ПоказательОписание, ИсточникИнцидентовЦККСсылка.ТипИнцидента);
					ПотенциальныеОповещения = ИнцидентыСервер.СписокПотенциальныхОповещений(Запись.ТипИнцидента);
					Для Каждого ТекСсылка из ПотенциальныеОповещения Цикл
						Если Справочники.Оповещения.ВыполненыУсловияДляИнцидента(ТекСсылка, Запись) Тогда 
							// Проверяем формирование оповещения о закрытии,
							// только после этого можно отправлять новые оповещения об открытии
							ОповещениеЗакрыто = РегистрыСведений.ТекущееСостояниеПовторногоОповещения.ОповещениеЗакрыто(ТекСсылка);
                            
                            Если ОповещениеЗакрыто Тогда
								РегистрыСведений.ТекущееСостояниеПовторногоОповещения.СоздатьОповещение(ТекСсылка);
								ОткрытыеОповещения.Вставить(ТекСсылка, Неопределено);
								
								Если Общий.СсылкаСуществует(ТекСсылка.ИсполняющееЗадание) Тогда
									ОткрытыеОповещения[ТекСсылка] = ТекСсылка.ИсполняющееЗадание;
								КонецЕсли;	
							КонецЕсли;
							
							// Записываем текущее состояние инцидента в разрезе данного оповещения
							РегистрыСведений.ТекущееСостояниеОповещения.ЗаписатьИнцидент(ТекСсылка, Запись.Инцидент, Запись.Статус, Запись.УровеньИнцидента, Ложь);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			// К универсальному времени приводится в ОчередьЗаданий.ИзменитьЗадание
			ТекДатаОчереди = ТекущаяДата();
			Для Каждого ТекОповещение Из ОткрытыеОповещения Цикл
				Если ТекОповещение.Значение <> Неопределено Тогда
					ОчередьЗаданий.ИзменитьЗадание(ТекОповещение.Значение, Новый Структура("ЗапланированныйМоментЗапуска", ТекДатаОчереди));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ИсточникИнцидентовЦККСсылка.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.Закрытие ИЛИ ИсточникИнцидентовЦККСсылка.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.ОткрытиеЗакрытие Тогда
		ЗапросАктивныхИнцидентов = Новый Запрос("
        |ВЫБРАТЬ
        |   ПоказательОповещения,
        |   НаименованиеПоказателя,
        |   ТекущееЗначение
        |ПОМЕСТИТЬ
        |   ИнцидентыДляЗакрытия
        |ИЗ
        |   &ИнцидентыДляЗакрытия КАК ИнцидентыДляЗакрытия
        |ИНДЕКСИРОВАТЬ ПО
        |   НаименованиеПоказателя   
        |;
        |
        |ВЫБРАТЬ
        |   СпрИнциденты.Ссылка,
        |   РегСвИнциденты.ТипИнцидента,
        |   ИнцидентыДляЗакрытия.НаименованиеПоказателя,
        |   ИнцидентыДляЗакрытия.ПоказательОповещения,
        |   ИнцидентыДляЗакрытия.ТекущееЗначение
        |ИЗ
        |   ИнцидентыДляЗакрытия КАК ИнцидентыДляЗакрытия   
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
        |   Справочник.Инциденты КАК СпрИнциденты
        |ПО
        |   СпрИнциденты.Наименование = ИнцидентыДляЗакрытия.НаименованиеПоказателя 
        |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.Инциденты КАК РегСвИнциденты
        |ПО
        |   РегСвИнциденты.Инцидент = СпрИнциденты.Ссылка
        |   И РегСвИнциденты.ТипИнцидента = &ТипИнцидента
		|	И РегСвИнциденты.Статус В (&АктивныеСтатусы)
		|");
		
		ИнцидентыДляЗакрытия = Новый ТаблицаЗначений;
        ИнцидентыДляЗакрытия.Колонки.Добавить("НаименованиеПоказателя", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
        ИнцидентыДляЗакрытия.Колонки.Добавить("ТекущееЗначение", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,5)));
        ИнцидентыДляЗакрытия.Колонки.Добавить("ПоказательОповещения", Новый ОписаниеТипов("СправочникСсылка.ПоказателиИнцидентов"));
        
        Для Каждого ТекПоказатель Из ЗначенияПоказателейМассив Цикл
            Если ТекПоказатель.СобытиеПроизошло <> Неопределено Тогда
                Если
                    (ИсточникИнцидентовЦККСсылка.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.Закрытие И ТекПоказатель.СобытиеПроизошло)
                    ИЛИ (ИсточникИнцидентовЦККСсылка.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.ОткрытиеЗакрытие И НЕ ТекПоказатель.СобытиеПроизошло)
                    Тогда
                        НовСтрока = ИнцидентыДляЗакрытия.Добавить();
                        НовСтрока.НаименованиеПоказателя = ТекПоказатель.ПоказательОписание;
                        НовСтрока.ТекущееЗначение = ТекПоказатель.ТекущееЗначение;
                        НовСтрока.ПоказательОповещения = ТекПоказатель.ПоказательОповещения;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
		ЗапросАктивныхИнцидентов.УстановитьПараметр("ИнцидентыДляЗакрытия", ИнцидентыДляЗакрытия);
		ЗапросАктивныхИнцидентов.УстановитьПараметр("ТипИнцидента", ИсточникИнцидентовЦККСсылка.ТипИнцидента);
		ЗапросАктивныхИнцидентов.УстановитьПараметр("АктивныеСтатусы", ИнцидентыСервер.МассивСтатусов(ИСТИНА));
        
        Если ИнцидентыДляЗакрытия.Количество() > 0 Тогда 
            Результат = ЗапросАктивныхИнцидентов.Выполнить();
            Выборка = Результат.Выбрать();
            Пока Выборка.Следующий() Цикл
                ТекПоказатель = Новый Структура("ПоказательОповещения, ПоказательОписание, ТекущееЗначение", Выборка.ПоказательОповещения , Выборка.НаименованиеПоказателя, Выборка.ТекущееЗначение);
                Сообщение = СформироватьСообщениеИнцидента(ТекПоказатель);
                ИнцидентыСервер.ЗакрытьИнцидент(Выборка.ТипИнцидента, Выборка.Ссылка, Истина, Сообщение);
            КонецЦикла;
        КонецЕсли;
		
		ВнутренниеЗамеры.ЗавершитьЗамер(Замер);
		
		ОткрыватьИнцидент = Ложь;
		
	КонецЕсли;
	
	Возврат ОткрыватьИнцидент;
	
КонецФункции

// Используется для упрощения представления счетчиков в строке подключения.
// Преобразует массив элементов:
//    1) "/performance/localhost/mem avail"
//    2) "/performance/localhost/disk queue length"
//    в результат: "performance/localhost/[mem avail, disk queue length]"
// Параметры:
//  Счетчики - Масссив - массив строк наименований счетчиков.
//
Функция МассивСчетчиковСтрокой(Счетчики) Экспорт
	
	Если Счетчики.Количество()=0 Тогда 
		Возврат "";
	КонецЕсли;
	
	Если Счетчики.Количество()=1 Тогда
		Возврат Счетчики[0];
	КонецЕсли;
	
	ДлинаОбщейЧасти = 0;
	Пока Истина Цикл
		ДлинаОбщейЧасти = ДлинаОбщейЧасти + 1;
		ОбщиеЧасти = Новый Соответствие();
		Для Каждого ТекСчетчик из Счетчики Цикл
			Если СтрДлина(ТекСчетчик)<ДлинаОбщейЧасти Тогда
				ДлинаОбщейЧасти = МАКС(ДлинаОбщейЧасти - 1, 0);
				ОбщиеЧасти.Очистить();
				ОбщиеЧасти[1] = 1; // форсируем выход из цикла определения длины общей части
			КонецЕсли;
			ОбщиеЧасти[Лев(ТекСчетчик, ДлинаОбщейЧасти)] = 1;
		КонецЦикла;
		Если ОбщиеЧасти.Количество() > 1 Тогда
			ДлинаОбщейЧасти = МАКС(ДлинаОбщейЧасти - 1, 0);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОбщаяЧасть = Лев(Счетчики[0], ДлинаОбщейЧасти);
	НомерСимвола = ДлинаОбщейЧасти;
	Пока НомерСимвола > 1 И НЕ СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола(ОбщаяЧасть, НомерСимвола)) Цикл
		НомерСимвола = НомерСимвола - 1;
	КонецЦикла;
	ДлинаОбщейЧасти = НомерСимвола;
	ОбщаяЧасть = Лев(Счетчики[0], ДлинаОбщейЧасти) + "[";
	РаздельныеЧасти = Новый Массив();
	Для Каждого ТекСчетчик из Счетчики Цикл
		РаздельныеЧасти.Добавить(Сред(ТекСчетчик, ДлинаОбщейЧасти + 1));
	КонецЦикла;
	Индекс = РаздельныеЧасти.Количество() - 1;
	Пока Индекс>=0 Цикл
		Если ПустаяСтрока(РаздельныеЧасти[Индекс]) Тогда
			РаздельныеЧасти.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	Если РаздельныеЧасти.Количество() > 0 Тогда
		Возврат ОбщаяЧасть + СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(РаздельныеЧасти, ",") + "]";
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(Счетчики, ",");
	КонецЕсли;
	
КонецФункции

// Добавляет показатель в обнаружение
//  Параметры:
//    Ссылка        - СправочникСсылка.ОбнаружениеИнцидентов - обнаружение, в которое добавляется показатель
//    ТипПоказателя - Перечисление.ТипыПоказателей           - тип показателя для добавления
//    Параметры     - Структура                              - структура создания показателя с ключами:
//                                                             Функция                        - ПеречислениеСсылка.ФункцииОповещений
//                                                             ИнтервалРасчета                - Число(10,0)
//                                                             ЕдиницаВремениИнтервалаРасчета - ПеречислениеСсылка.ЕдиницыВремени
//                                                             ВидСравнения                   - ПеречислениеСсылка.ВидыСравненияПоказателейОповещения
//                                                             Порог                          - Число(15,4)
//                                                             ФорматнаяСтрокаЗначения        - Строка
//                                                             РегулярноеВыражениеПоиска      - Строка
//                                                             РегулярноеВыражениеЗамены      - Строка
//                                                             ПорогДо                        - Число(15,4), обязателен, если ВидСравнения = Между
//                                                             ПорогВПроцентах                - Булево, обязателен, если ВидСравнения = Изменился
//                                                             СмещениеБазы                   - ПеречислениеСсылка.ВариантыСмещенияБазы, обязателен,
//                                                                                              если ВидСравнения = Изменился
//                                                             Аналитика                      - ПеречислениеСсылка.АналитикаСчетчиков, обязателен,
//                                                                                              если ТипПоказателя = Счетчики
//                                                             Периодичность                  - ПеречислениеСсылка.ПериодичностьСчетчиков, обязателен,
//                                                                                              если ТипПоказателя = Счетчики
//
Функция ДобавитьПоказатель(Ссылка, ТипПоказателя, Параметры) Экспорт
    
    НачатьТранзакцию();
    
    Попытка
        
        Если ТипПоказателя = Перечисления.ТипыПоказателей.Счетчики Тогда
            
            ПараметрыСоздания = Новый Структура;
            ПараметрыСоздания.Вставить("Функция", Параметры.Функция);
            ПараметрыСоздания.Вставить("ИнтервалРасчета", Параметры.ИнтервалРасчета);
            ПараметрыСоздания.Вставить("ЕдиницаВремениИнтервалаРасчета", Параметры.ЕдиницаВремениИнтервалаРасчета);
            ПараметрыСоздания.Вставить("ВидСравнения", Параметры.ВидСравнения);
            ПараметрыСоздания.Вставить("Порог", Параметры.Порог);
            ПараметрыСоздания.Вставить("ФорматнаяСтрокаЗначения" , Параметры.ФорматнаяСтрокаЗначения);
            ПараметрыСоздания.Вставить("РегулярноеВыражениеПоиска" , Параметры.РегулярноеВыражениеПоиска);
            ПараметрыСоздания.Вставить("РегулярноеВыражениеЗамены" , Параметры.РегулярноеВыражениеЗамены);
            ПараметрыСоздания.Вставить("Аналитика" , Параметры.Аналитика);
            ПараметрыСоздания.Вставить("Периодичность" , Параметры.Периодичность);
                        
            Если Параметры.ВидСравнения = Перечисления.ВидыСравненияПоказателейОповещения.Между Тогда
                ПараметрыСоздания.Вставить("ПорогДо", Параметры.ПорогДо);
            КонецЕсли;
            
            Если Параметры.ВидСравнения = Перечисления.ВидыСравненияПоказателейОповещения.Изменился Тогда
                ПараметрыСоздания.Вставить("ПорогВПроцентах", Параметры.ПорогВПроцентах);
                ПараметрыСоздания.Вставить("СмещениеБазы" , Параметры.СмещениеБазы);
            КонецЕсли;
            
            Справочники.ПоказателиИнцидентов.СоздатьЭлементПоСчетчику(Ссылка, Параметры.Счетчик, ПараметрыСоздания);
            
        КонецЕсли;
                
        ЗафиксироватьТранзакцию();
        
    Исключение
        
        ОтменитьТранзакцию();
        ВызватьИсключение(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        
    КонецПопытки;
        
КонецФункции

// Выполняет поиск показателей, которые соответсвуют настроенному отбору,
// см. страницу элемента формы "Автоматическое добавление показателей.
// Отсутствующие показатели автоматически добавляются в обнаружение
//
Процедура ВыполнитьАвтоДобавлениеПоказателей() Экспорт
    
    Результат = ПолучитьОбнаруженияАвтоДобавленияПоказателей();
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        
        ПараметрыДобавления = Новый Структура;
        ПараметрыДобавления.Вставить("ЗапросОтбора", Выборка.ЗапросОтбора);
        ПараметрыДобавления.Вставить("НастройкиОтбора", Выборка.НастройкиОтбора);
        ПараметрыДобавления.Вставить("ТипПоказателя", Выборка.ТипПоказателя);
        ПараметрыДобавления.Вставить("Ссылка", Выборка.Ссылка);
        ПараметрыДобавления.Вставить("Функция", Выборка.Функция);
        ПараметрыДобавления.Вставить("ИнтервалРасчета", Выборка.ИнтервалРасчета);
        ПараметрыДобавления.Вставить("ЕдиницаВремениИнтервалаРасчета", Выборка.ЕдиницаВремениИнтервалаРасчета);
        ПараметрыДобавления.Вставить("ВидСравнения", Выборка.ВидСравнения);
        ПараметрыДобавления.Вставить("Порог", Выборка.Порог);
        ПараметрыДобавления.Вставить("ФорматнаяСтрокаЗначения", Выборка.ФорматнаяСтрокаЗначения);
        ПараметрыДобавления.Вставить("ПорогДо", Выборка.ПорогДо);
        ПараметрыДобавления.Вставить("ПорогВПроцентах", Выборка.ПорогВПроцентах);
        ПараметрыДобавления.Вставить("СмещениеБазы", Выборка.СмещениеБазы);
        ПараметрыДобавления.Вставить("ПараметрПоказателя1", Выборка.ПараметрПоказателя1);
        ПараметрыДобавления.Вставить("ПараметрПоказателя2", Выборка.ПараметрПоказателя2);
        ПараметрыДобавления.Вставить("ПараметрПоказателя3", Выборка.ПараметрПоказателя3);
        ПараметрыДобавления.Вставить("РегулярноеВыражениеПоиска", Выборка.РегулярноеВыражениеПоиска);
        ПараметрыДобавления.Вставить("РегулярноеВыражениеЗамены", Выборка.РегулярноеВыражениеЗамены);
        
        ДобавитьПоказателиОбнаружения(ПараметрыДобавления);
        
    КонецЦикла;
    
КонецПроцедуры

Функция ИнициализироватьКомпоновщикАвтоДобавленияПоказателей(Компоновщик, СКД, ТекстЗапроса, НастройкиОтбора) Экспорт
    
    ИсточникСКД = СКД.ИсточникиДанных.Добавить();
    ИсточникСКД.Имя = "ИсточникДанных1";
    ИсточникСКД.ТипИсточникаДанных = "local";
    НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанных.Запрос = ТекстЗапроса; 
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    НаборДанных.Имя = "НаборДанных1";
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    УдалитьИзВременногоХранилища(URLСхемы);
        
    Поток = Новый ЧтениеXML();
    Поток.УстановитьСтроку(НастройкиОтбора);
    Компоновщик.ЗагрузитьНастройки(СериализаторXDTO.ПрочитатьXML(Поток));
    Поток.Закрыть();
    
    Возврат Компоновщик;
    
КонецФункции

Процедура ДобавитьПараметрыВКомпоновщик(Компоновщик, Параметры) Экспорт
    
    Если Параметры.ТипПоказателя = Перечисления.ТипыПоказателей.Счетчики Тогда
        ДобавитьПараметрыВКомпоновщикСчетчики(Компоновщик, Параметры);
    КонецЕсли;
        
КонецПроцедуры

Функция ПолучитьДанныеКомпоновщика(Компоновщик, СКД) Экспорт
    
    ТЗн = Новый ТаблицаЗначений;
    
    Если Компоновщик.Настройки.Отбор.Элементы.Количество() <> 0 Тогда 
        КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
        МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
            СКД, 
            Компоновщик.Настройки,,,
            Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
        );
        
        ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
        ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
        
        ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
        ПроцессорВывода.УстановитьОбъект(ТЗн);
        ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
    КонецЕсли;
    
    Возврат ТЗн;
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьПоказателиОбнаружения(ПараметрыДобавления)
    
    Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
    СКД = Новый СхемаКомпоновкиДанных();
    
    ИнициализироватьКомпоновщикАвтоДобавленияПоказателей(Компоновщик, СКД, ПараметрыДобавления.ЗапросОтбора, ПараметрыДобавления.НастройкиОтбора);
    
    Параметры = Новый Структура;
    Параметры.Вставить("ТипПоказателя", ПараметрыДобавления.ТипПоказателя);
    Параметры.Вставить("Ссылка", ПараметрыДобавления.Ссылка);
    ДобавитьПараметрыВКомпоновщик(Компоновщик, Параметры);
    
    ТЗн = ПолучитьДанныеКомпоновщика(Компоновщик, СКД);
    
    Для Каждого ТекСтрока Из ТЗн Цикл
        
        ПараметрыНовогоПоказателя = Новый Структура;
        ПараметрыНовогоПоказателя.Вставить("ТипПоказателя", ПараметрыДобавления.ТипПоказателя);
        ПараметрыНовогоПоказателя.Вставить("Владелец", ПараметрыДобавления.Ссылка);
        ПараметрыНовогоПоказателя.Вставить("Функция", ПараметрыДобавления.Функция);
        ПараметрыНовогоПоказателя.Вставить("ИнтервалРасчета", ПараметрыДобавления.ИнтервалРасчета);
        ПараметрыНовогоПоказателя.Вставить("ЕдиницаВремениИнтервалаРасчета", ПараметрыДобавления.ЕдиницаВремениИнтервалаРасчета);
        ПараметрыНовогоПоказателя.Вставить("ВидСравнения", ПараметрыДобавления.ВидСравнения);
        ПараметрыНовогоПоказателя.Вставить("Порог", ПараметрыДобавления.Порог);
        ПараметрыНовогоПоказателя.Вставить("ФорматнаяСтрокаЗначения", ПараметрыДобавления.ФорматнаяСтрокаЗначения);
        ПараметрыНовогоПоказателя.Вставить("ПорогДо", ПараметрыДобавления.ПорогДо);
        ПараметрыНовогоПоказателя.Вставить("ПорогВПроцентах", ПараметрыДобавления.ПорогВПроцентах);
        ПараметрыНовогоПоказателя.Вставить("СмещениеБазы", ПараметрыДобавления.СмещениеБазы);
        ПараметрыНовогоПоказателя.Вставить("Счетчик", ТекСтрока.Ссылка);
        ПараметрыНовогоПоказателя.Вставить("ПараметрПоказателя1", ПараметрыДобавления.ПараметрПоказателя1);
        ПараметрыНовогоПоказателя.Вставить("ПараметрПоказателя2", ПараметрыДобавления.ПараметрПоказателя2);
        ПараметрыНовогоПоказателя.Вставить("ПараметрПоказателя3", ПараметрыДобавления.ПараметрПоказателя3);
        ПараметрыНовогоПоказателя.Вставить("РегулярноеВыражениеПоиска", ПараметрыДобавления.РегулярноеВыражениеПоиска);
        ПараметрыНовогоПоказателя.Вставить("РегулярноеВыражениеЗамены", ПараметрыДобавления.РегулярноеВыражениеЗамены);
        
        НовыйАвтоДобавлениеПоказателей(ПараметрыНовогоПоказателя);
        
    КонецЦикла;
    
КонецФункции

Функция СформироватьСообщениеИнцидента(ТекПоказатель)
	
	Если ЗначениеЗаполнено(ТекПоказатель.ПоказательОповещения.ФорматнаяСтрокаЗначения) Тогда
		ФорматнаяСтрокаЗначения = ТекПоказатель.ПоказательОповещения.ФорматнаяСтрокаЗначения; 
		ИндексНачала = СтрНайти(ФорматнаяСтрокаЗначения, "[");
		ИндексОкончания = СтрНайти(ФорматнаяСтрокаЗначения, "]");
		Если ИндексНачала > 0 И ИндексОкончания > 0 Тогда
			ФорматнаяСтрокаЗначенияБуфер = Сред(ФорматнаяСтрокаЗначения, ИндексНачала + 1, ИндексОкончания - ИндексНачала - 1);
		Иначе
			ФорматнаяСтрокаЗначенияБуфер = ФорматнаяСтрокаЗначения;
		КонецЕсли;
		
		ТекущееЗначение = СтрЗаменить(ФорматнаяСтрокаЗначения, "[" + ФорматнаяСтрокаЗначенияБуфер + "]", Формат(ТекПоказатель.ТекущееЗначение, ФорматнаяСтрокаЗначенияБуфер));
		СообщениеИнцидента = ТекПоказатель.ПоказательОписание + " = " + ТекущееЗначение;
	Иначе
		СообщениеИнцидента = ТекПоказатель.ПоказательОписание + " = " + ТекПоказатель.ТекущееЗначение;
	КонецЕсли;
	
	Возврат СообщениеИнцидента;
	
КонецФункции

Функция ПроверитьОткрыватьИнцидент(ПоказателиИнцидентов, ИсточникИнцидентовЦККСсылка, ТекДата, ЗначенияПоказателей, ЗначенияПоказателейМассив)
	
	ОткрыватьИнцидент = ИСТИНА;
	
	КоличествоСобытий = 0;
    КоличествоЕстьДанные = 0;
    Для Каждого ПоказательИнцидента Из ПоказателиИнцидентов Цикл
        СобытиеПроизошло = СобытиеПроизошло(ПоказательИнцидента.Ссылка, ТекДата, ЗначенияПоказателей, ЗначенияПоказателейМассив, ИсточникИнцидентовЦККСсылка);
        Если СобытиеПроизошло <> Неопределено Тогда
            КоличествоЕстьДанные = КоличествоЕстьДанные + 1;
            Если СобытиеПроизошло Тогда
			    КоличествоСобытий = КоличествоСобытий + 1;
            КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	//Условие <И>
	Если ИсточникИнцидентовЦККСсылка.УсловиеПоказателей = 0 Тогда
		Если КоличествоСобытий <> КоличествоЕстьДанные Тогда
			ОткрыватьИнцидент = ЛОЖЬ;
		КонецЕсли;
	//Условие <ИЛИ>
	ИначеЕсли ИсточникИнцидентовЦККСсылка.УсловиеПоказателей = 1 Тогда
		Если КоличествоСобытий = 0 Тогда
			ОткрыватьИнцидент = ЛОЖЬ;
		КонецЕсли;
    КонецЕсли;
    
    Если КоличествоЕстьДанные = 0 Тогда
        ОткрыватьИнцидент = Неопределено;
    КонецЕсли;
    	
	Возврат ОткрыватьИнцидент;
	
КонецФункции

Функция ПолучитьПоказателиИнцидентов(ИсточникИнцидентовЦККСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = " 
	|ВЫБРАТЬ
	|	СпрПоказателиИнцидентов.Ссылка,
	|	&ПустаяСтрока КАК ПоказательОписание,
	|	0 КАК ЗначениеПоказателя
	|ИЗ
	|	Справочник.ПоказателиИнцидентов КАК СпрПоказателиИнцидентов
	|ГДЕ
	|	СпрПоказателиИнцидентов.Владелец = &Владелец
	|	И НЕ СпрПоказателиИнцидентов.ПометкаУдаления
	|";
	Запрос.УстановитьПараметр("Владелец", ИсточникИнцидентовЦККСсылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Результат = Запрос.Выполнить();
	ПоказателиИнцидентов = Результат.Выгрузить();
	
	Возврат ПоказателиИнцидентов;
	
КонецФункции

Функция СобытиеПроизошло(Знач ПоказательОповещения, Знач Сейчас, ЗначенияПоказателейСтрокой, ЗначенияИменПоказателейМассив, ИсточникИнцидентовЦККСсылка)
	ЗначенияПоказателейТемп = "";
	
	ПоказательОбъект = ПоказательОповещения.Показатель.ПолучитьОбъект();
	Если ПоказательОбъект = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбнаружениеИнцидентов.Ошибка'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,ПоказательОповещения,
			НСтр("ru = 'Не найден показатель, по которому планировалось проверить значение'"));
		Возврат Ложь;
	КонецЕсли;
	
	ИнтервалРасчета = ПоказательОповещения.ИнтервалРасчета * ЕдиницаВремениВСекундах(ПоказательОповещения.ЕдиницаВремениИнтервалаРасчета);
	ЗначениеПоказателя = ВычислитьПоказатель(ПоказательОбъект, Сейчас, ИнтервалРасчета, ПоказательОповещения.Функция, ПоказательОповещения.ФорматнаяСтрокаЗначения);
			
	ЗначенияПоказателейТемп = ПоказательОбъект.Описание + " = " + ЗначениеПоказателя + "; ";
	
	СобытиеПроизошло = Истина;
	
	
	Если ПоказательОповещения.СравниватьСПрошлым Тогда
		Если ЗначениеПоказателя <> Неопределено Тогда
			Если ТипЗнч(ПоказательОбъект) <> Тип("СправочникОбъект.ПоказателиСчетчиков") Тогда
				ВеличинаСмещения = СмещениеДатыПоказателя(ПоказательОповещения.СмещениеБазы, ПоказательОповещения.ИнтервалРасчета);
				ПрошлоеЗначениеПоказателя = ВычислитьПоказатель(ПоказательОбъект, Сейчас - ВеличинаСмещения, 
				ПоказательОповещения.ИнтервалБазы * ЕдиницаВремениВСекундах(ПоказательОповещения.ЕдиницаВремениИнтервалаБазы), 
				ПоказательОповещения.Функция);
				
				Если ПоказательОповещения.ПорогВПроцентах Тогда
					Если ПрошлоеЗначениеПоказателя <> 0 Тогда
						Разность = (ЗначениеПоказателя / ПрошлоеЗначениеПоказателя - 1) * 100;
					ИначеЕсли ЗначениеПоказателя = 0 Тогда
						Разность = 0;
					Иначе
						Разность = 1000000;
					КонецЕсли;
				Иначе
					Разность = ЗначениеПоказателя - ПрошлоеЗначениеПоказателя;
				КонецЕсли;
				
				Если ПоказательОповещения.ВидСравнения = Перечисления.ВидыСравненияПоказателейОповещения.Меньше 
					И Разность > -ПоказательОповещения.Порог Тогда
					СобытиеПроизошло = Ложь;
				ИначеЕсли ПоказательОповещения.ВидСравнения = Перечисления.ВидыСравненияПоказателейОповещения.Больше 
					И Разность < ПоказательОповещения.Порог Тогда
					СобытиеПроизошло = Ложь;
				ИначеЕсли ПоказательОповещения.ВидСравнения = Перечисления.ВидыСравненияПоказателейОповещения.Изменился
					И Разность < ПоказательОповещения.Порог И Разность > -ПоказательОповещения.Порог Тогда
					СобытиеПроизошло = Ложь;
				КонецЕсли;
			Иначе
				СейчасПрошлыйПериод = Сейчас;
				Если ПоказательОповещения.СмещениеБазы = Перечисления.ВариантыСмещенияБазы.Прошлый Тогда
					СейчасПрошлыйПериод = СейчасПрошлыйПериод - ИнтервалРасчета;
				ИначеЕсли ПоказательОповещения.СмещениеБазы = Перечисления.ВариантыСмещенияБазы.Минута Тогда
					СейчасПрошлыйПериод = СейчасПрошлыйПериод - 60;
				ИначеЕсли ПоказательОповещения.СмещениеБазы = Перечисления.ВариантыСмещенияБазы.Час Тогда
					СейчасПрошлыйПериод = СейчасПрошлыйПериод - 3600;
				ИначеЕсли ПоказательОповещения.СмещениеБазы = Перечисления.ВариантыСмещенияБазы.День Тогда
					СейчасПрошлыйПериод = СейчасПрошлыйПериод - 86400;
				КонецЕсли;
				ИнтервалРасчетаПрошлыйПериод = ПоказательОповещения.ИнтервалБазы * ЕдиницаВремениВСекундах(ПоказательОповещения.ЕдиницаВремениИнтервалаБазы);
				ЗначениеПоказателяПрошлыйПериод = ВычислитьПоказатель(ПоказательОбъект, СейчасПрошлыйПериод, ИнтервалРасчетаПрошлыйПериод, ПоказательОповещения.Функция);	
				
				Если ЗначениеПоказателяПрошлыйПериод <> Неопределено Тогда
					Если ПоказательОповещения.ПорогВПроцентах Тогда
						Разность = (ЗначениеПоказателя / ЗначениеПоказателяПрошлыйПериод - 1) * 100;
					Иначе
						Разность = ЗначениеПоказателя - ЗначениеПоказателяПрошлыйПериод;
					КонецЕсли;
					
					Если ПоказательОповещения.ВидСравнения = Перечисления.ВидыСравненияПоказателейОповещения.Меньше 
						И Разность > -ПоказательОповещения.Порог Тогда
						СобытиеПроизошло = Ложь;
					ИначеЕсли ПоказательОповещения.ВидСравнения = Перечисления.ВидыСравненияПоказателейОповещения.Больше 
						И Разность < ПоказательОповещения.Порог Тогда
						СобытиеПроизошло = Ложь;
					ИначеЕсли ПоказательОповещения.ВидСравнения = Перечисления.ВидыСравненияПоказателейОповещения.Изменился
						И Разность < ПоказательОповещения.Порог И Разность > -ПоказательОповещения.Порог Тогда
						СобытиеПроизошло = Ложь;
					КонецЕсли;
				Иначе
					СобытиеПроизошло = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СобытиеПроизошло = Ложь;
		КонецЕсли;
	Иначе
		Если ЗначениеПоказателя <> Неопределено Тогда  
			Если ПоказательОповещения.ВидСравнения = Перечисления.ВидыСравненияПоказателейОповещения.Меньше 
				И ЗначениеПоказателя > ПоказательОповещения.Порог Тогда
				СобытиеПроизошло = Ложь;
			ИначеЕсли ПоказательОповещения.ВидСравнения = Перечисления.ВидыСравненияПоказателейОповещения.Больше 
				И ЗначениеПоказателя < ПоказательОповещения.Порог Тогда
				СобытиеПроизошло = Ложь;
			ИначеЕсли ПоказательОповещения.ВидСравнения = Перечисления.ВидыСравненияПоказателейОповещения.Между Тогда
				Если ЗначениеПоказателя >= ПоказательОповещения.Порог И ЗначениеПоказателя < ПоказательОповещения.ПорогДо Тогда
					СобытиеПроизошло = Истина;
				Иначе
					СобытиеПроизошло = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СобытиеПроизошло = Неопределено;
		КонецЕсли;
	КонецЕсли;
    
    // Проверка на закрытие
    Если СобытиеПроизошло <> Неопределено Тогда
        Если ИсточникИнцидентовЦККСсылка.ТипОбнаружения = Перечисления.ТипыОбнаруженияИнцидентов.Открытие И НЕ СобытиеПроизошло Тогда
            СтатусИнцидента = РегистрыСведений.Инциденты.Статус(ИсточникИнцидентовЦККСсылка.ТипИнцидента, ПоказательОбъект.Описание);
            Если СтатусИнцидента = Перечисления.СтатусыИнцидентов.НовыйИнцидент ИЛИ СтатусИнцидента = Перечисления.СтатусыИнцидентов.ВзятоВРаботу Тогда
                Запрос = Новый Запрос;
                
                Запрос.Текст = "
                |ВЫБРАТЬ
                |   Обнаружение.Ссылка,
                |   СпрПоказателиИнцидентов.Ссылка КАК Показатель
                |ИЗ
                |   Справочник.ОбнаружениеИнцидентов КАК Обнаружение
                |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
                |   Справочник.ПоказателиИнцидентов КАК СпрПоказателиИнцидентов
                |ПО
                |   СпрПоказателиИнцидентов.Владелец = Обнаружение.Ссылка
                |   И НЕ СпрПоказателиИнцидентов.ПометкаУдаления
                |ГДЕ
                |   Обнаружение.ТипИнцидента = &ТипИнцидента
                |   И Обнаружение.ТипОбнаружения = &ТипОбнаруженияЗакрытие
                |   И ВЫРАЗИТЬ(ВЫРАЗИТЬ(СпрПоказателиИнцидентов.Показатель КАК Справочник." + ПоказательОбъект.Метаданные().Имя + ").Описание КАК СТРОКА(150)) = &КодИнцидента
                |";
                
                Запрос.УстановитьПараметр("ТипИнцидента", ИсточникИнцидентовЦККСсылка.ТипИнцидента); 
                Запрос.УстановитьПараметр("ТипОбнаруженияЗакрытие", Перечисления.ТипыОбнаруженияИнцидентов.Закрытие);
                Запрос.УстановитьПараметр("КодИнцидента", ПоказательОбъект.Описание);
                
                Результат = Запрос.Выполнить();
                Выборка = Результат.Выбрать();
                Если Выборка.Количество() = 1 Тогда
                    Выборка.Следующий();
                    СобытиеЗакрытия = СобытиеПроизошло(Выборка.Показатель, Сейчас, "", Новый Массив, Выборка.Ссылка);
                    Если СобытиеЗакрытия <> Неопределено Тогда
                        СобытиеПроизошло = НЕ СобытиеЗакрытия;
                    КонецЕсли;
                Иначе
                    
                    Если Выборка.Количество() = 0 Тогда
                        Комментарий = "Для показателя " + ПоказательОбъект + " нет обнаружения закрытия!"; 
                        ЗаписьЖурналаРегистрации("ВыполнитьЗамер.СобытиеПроизошло", УровеньЖурналаРегистрации.Ошибка, ПоказательОповещения.Метаданные(), ПоказательОповещения, Комментарий);
                    Иначе
                        Комментарий = "Для показателя " + ПоказательОбъект + " несколько обнаружений закрытия!";
                        ЗаписьЖурналаРегистрации("ВыполнитьЗамер.СобытиеПроизошло", УровеньЖурналаРегистрации.Ошибка,, ПоказательОповещения, Комментарий);
                    КонецЕсли;
                    
                КонецЕсли;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    	
	ЗначениеПоказателяСтруктура = Новый Структура("СобытиеПроизошло, ПоказательОбъект, ПоказательОписание, ВидСравнения, Порог, ТекущееЗначение, ПоказательОповещения");
	ЗначениеПоказателяСтруктура.СобытиеПроизошло = СобытиеПроизошло;
	ЗначениеПоказателяСтруктура.ПоказательОбъект = ПоказательОбъект;
	ЗначениеПоказателяСтруктура.ПоказательОписание = ПоказательОбъект.Описание;
	ЗначениеПоказателяСтруктура.ВидСравнения = ПоказательОповещения.ВидСравнения;
	ЗначениеПоказателяСтруктура.Порог = ПоказательОповещения.Порог;
	ЗначениеПоказателяСтруктура.ТекущееЗначение = ЗначениеПоказателя;
	ЗначениеПоказателяСтруктура.ПоказательОповещения = ПоказательОповещения;
	ЗначенияИменПоказателейМассив.Добавить(ЗначениеПоказателяСтруктура);	
		
	ЗначенияПоказателейСтрокой = ЗначенияПоказателейСтрокой + ЗначенияПоказателейТемп + Символы.ПС;
		
	Возврат СобытиеПроизошло;

КонецФункции

Функция ВычислитьПоказатель(Знач ПоказательОбъект, Знач ТекущаяДата, Знач ИнтервалРасчета, Знач ФункцияПоказателя, Знач ФорматнаяСтрокаЗначения = Неопределено)
	
	ЗначениеПоказателя = Неопределено;
		
    Если ТипЗнч(ПоказательОбъект) = Тип("СправочникОбъект.ПоказателиСчетчиков") Тогда
        Замеры = ПоказательОбъект.ПолучитьДанныеОбнаруженияИнцидентов(ТекущаяДата, ИнтервалРасчета, ФункцияПоказателя, ФорматнаяСтрокаЗначения);
    ИначеЕсли ТипЗнч(ПоказательОбъект) = Тип("СправочникОбъект.ТекущееЧислоВызововСервера") Тогда
        Замеры = ПоказательОбъект.ПолучитьДанныеОбнаруженияИнцидентов(ТекущаяДата, ИнтервалРасчета, ФункцияПоказателя, ФорматнаяСтрокаЗначения);
    ИначеЕсли ТипЗнч(ПоказательОбъект) = Тип("СправочникОбъект.ИспользованиеОперативнойПамятиПроцессамиКластера") Тогда
        Замеры = ПоказательОбъект.ПолучитьДанныеОбнаруженияИнцидентов(ТекущаяДата, ИнтервалРасчета, ФункцияПоказателя, ФорматнаяСтрокаЗначения);
    ИначеЕсли ТипЗнч(ПоказательОбъект) = Тип("СправочникОбъект.ПоказателиAPDEX") Тогда
        Замеры = ПоказательОбъект.ПолучитьДанныеОбнаруженияИнцидентов(ТекущаяДата, ИнтервалРасчета, ФункцияПоказателя, ФорматнаяСтрокаЗначения);
    ИначеЕсли ТипЗнч(ПоказательОбъект) = Тип("СправочникОбъект.ПроцентДоступностиСервисаВсеБазы") Тогда
        Замеры = ПоказательОбъект.ПолучитьДанныеОбнаруженияИнцидентов(ТекущаяДата, ИнтервалРасчета, ФункцияПоказателя, ФорматнаяСтрокаЗначения);
    ИначеЕсли ТипЗнч(ПоказательОбъект) = Тип("СправочникОбъект.ПроцентДоступностиСервисаВсеРесурсы") Тогда
        Замеры = ПоказательОбъект.ПолучитьДанныеОбнаруженияИнцидентов(ТекущаяДата, ИнтервалРасчета, ФункцияПоказателя, ФорматнаяСтрокаЗначения);
    ИначеЕсли ТипЗнч(ПоказательОбъект) = Тип("СправочникОбъект.ПоказателиСкоростиВыполненияТипичныхОпераций") Тогда
        Замеры = ПоказательОбъект.ПолучитьДанныеОбнаруженияИнцидентов(ТекущаяДата, ИнтервалРасчета, ФункцияПоказателя, ФорматнаяСтрокаЗначения);
    ИначеЕсли ТипЗнч(ПоказательОбъект) = Тип("СправочникОбъект.СформированоОтчетов") Тогда
        Замеры = ПоказательОбъект.ПолучитьДанныеОбнаруженияИнцидентов(ТекущаяДата, ИнтервалРасчета, ФункцияПоказателя, ФорматнаяСтрокаЗначения);
    ИначеЕсли ТипЗнч(ПоказательОбъект) = Тип("СправочникОбъект.ЧислоИсключенийПоТехнологическомуЖурналу") Тогда
        Замеры = ПоказательОбъект.ПолучитьДанныеОбнаруженияИнцидентов(ТекущаяДата, ИнтервалРасчета, ФункцияПоказателя, ФорматнаяСтрокаЗначения);
    ИначеЕсли ТипЗнч(ПоказательОбъект) = Тип("СправочникОбъект.ЧислоПаденийРабочихПроцессов") Тогда
        Замеры = ПоказательОбъект.ПолучитьДанныеОбнаруженияИнцидентов(ТекущаяДата, ИнтервалРасчета, ФункцияПоказателя, ФорматнаяСтрокаЗначения);
    ИначеЕсли ТипЗнч(ПоказательОбъект) = Тип("СправочникОбъект.ЧислоНовыхОбъектов") Тогда
        Замеры = ПоказательОбъект.ПолучитьДанныеОбнаруженияИнцидентов(ТекущаяДата, ИнтервалРасчета, ФункцияПоказателя, ФорматнаяСтрокаЗначения);
    ИначеЕсли ТипЗнч(ПоказательОбъект) = Тип("СправочникОбъект.ЧислоСеансовПользователей") Тогда
        Замеры = ПоказательОбъект.ПолучитьДанныеОбнаруженияИнцидентов(ТекущаяДата, ИнтервалРасчета, ФункцияПоказателя, ФорматнаяСтрокаЗначения);
	Иначе
		ДатаНачала = ТекущаяДата - ИнтервалРасчета;
		Статистика = Новый Структура;
		Замеры = ПоказательОбъект.ПолучитьДанные(ДатаНачала, 0, 1, ИнтервалРасчета, Статистика);
	КонецЕсли;
	
	Если Замеры <> Неопределено И Замеры.Количество() = 1 Тогда
		ЗначениеПоказателя = Замеры[0];
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции
	
Функция СмещениеДатыПоказателя(Знач ВариантСмещенияБазы, Знач ИнтервалРасчета)
	
	Если ВариантСмещенияБазы = Перечисления.ВариантыСмещенияБазы.Минута Тогда
		Возврат 60;
	ИначеЕсли ВариантСмещенияБазы = Перечисления.ВариантыСмещенияБазы.Час Тогда
		Возврат 60 * 60;
	ИначеЕсли ВариантСмещенияБазы = Перечисления.ВариантыСмещенияБазы.День Тогда
		Возврат 24 * 60 * 60;
	ИначеЕсли ВариантСмещенияБазы = Перечисления.ВариантыСмещенияБазы.Прошлый Тогда
		Возврат ИнтервалРасчета;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Неожиданное значение перечисления'");
	
КонецФункции

Функция ЕдиницаВремениВСекундах(Знач ЕдиницаВремени)
	
	Если ЕдиницаВремени = Перечисления.ЕдиницыВремени.Секунда Тогда
		Возврат 1;
	ИначеЕсли ЕдиницаВремени = Перечисления.ЕдиницыВремени.Минута Тогда
		Возврат 60;
	ИначеЕсли ЕдиницаВремени = Перечисления.ЕдиницыВремени.Час Тогда
		Возврат 60 * 60;
	ИначеЕсли ЕдиницаВремени = Перечисления.ЕдиницыВремени.День Тогда
		Возврат 24 * 60 * 60;
	КонецЕсли;

	ВызватьИсключение НСтр("ru = 'Неожиданное значение перечисления'");

КонецФункции

Процедура ЗапуститьОстановитьАссоциированноеОповещение(ОбнаружениеИнцидентовСсылка, Запустить = Истина) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Оповещения.ИсполняющееЗадание
	|ИЗ
	|	Справочник.Оповещения КАК Оповещения
	|ГДЕ
	|	Оповещения.ОтноситсяКТипуИнцидента = &ТипИнцидента"
	);
	Запрос.УстановитьПараметр("ТипИнцидента", ОбнаружениеИнцидентовСсылка.ТипИнцидента);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОчередьЗаданий.ИзменитьЗадание(Выборка.ИсполняющееЗадание, Новый Структура("Использование", Запустить));
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОбнаруженияАвтоДобавленияПоказателей()
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка,
    |   ЗапросОтбора,
    |   НастройкиОтбора,
    |   ТипПоказателя,
    |   Функция,
    |   ИнтервалРасчета,
    |   ЕдиницаВремениИнтервалаРасчета,
    |   Сравнение КАК ВидСравнения,
    |   Порог,
    |   ФорматнаяСтрокаЗначения,
    |   ПорогДо,
    |   ПорогВПроцентах,
    |   СмещениеБазы,
    |   ПараметрПоказателя1,
    |   ПараметрПоказателя2,
    |   ПараметрПоказателя3,
    |   РегулярноеВыражениеПоиска,
    |   РегулярноеВыражениеЗамены
    |ИЗ
    |   Справочник.ОбнаружениеИнцидентов
    |ГДЕ
    |   АвтоматическоеДобавлениеПоказателей
    |";
    
    Результат = Запрос.Выполнить();
    
    Возврат Результат;
    
КонецФункции

Процедура ДобавитьПараметрыВКомпоновщикСчетчики(Компоновщик, Параметры)
    
    ОбнаружениеИнцидентовПараметр = Компоновщик.Настройки.ПараметрыДанных.Элементы.Найти("ОбнаружениеИнцидентов");
    Если ОбнаружениеИнцидентовПараметр <> Неопределено Тогда
        ОбнаружениеИнцидентовПараметр.Использование = Истина;
        ОбнаружениеИнцидентовПараметр.Значение = Параметры.Ссылка;
    КонецЕсли;
        
    ГруппировкаНастроек = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    
    ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Использование = Истина;
    ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
    
КонецПроцедуры

Процедура НовыйАвтоДобавлениеПоказателей(ПараметрыНовогоПоказателя)
    
    Если ПараметрыНовогоПоказателя.ТипПоказателя = Перечисления.ТипыПоказателей.Счетчики Тогда
        НовыйАвтоДобавлениеПоказателейСчетчики(ПараметрыНовогоПоказателя);
    КонецЕсли;
        
КонецПроцедуры

Процедура НовыйАвтоДобавлениеПоказателейСчетчики(ПараметрыНовогоПоказателя)
    
    ПараметрыНовогоПоказателя.Вставить("Аналитика", Перечисления.АналитикаСчетчиков[ПараметрыНовогоПоказателя.ПараметрПоказателя1]);
    ПараметрыНовогоПоказателя.Вставить("Периодичность", Перечисления.ПереодичностьСчетчиков[ПараметрыНовогоПоказателя.ПараметрПоказателя2]);
    ДобавитьПоказатель(ПараметрыНовогоПоказателя.Владелец, ПараметрыНовогоПоказателя.ТипПоказателя, ПараметрыНовогоПоказателя);
    
КонецПроцедуры

#КонецОбласти

#КонецЕсли
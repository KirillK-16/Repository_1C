&НаКлиенте
Перем ПоказателиИнцидентовУдалить, мПараметрыПоказателей;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	Если НЕ ЗначениеЗаполнено(ОбъектЗначение.Ссылка) Тогда
		ОбъектЗначение.УстановитьСсылкуНового(Справочники.ОбнаружениеИнцидентов.ПолучитьСсылку());
		ЭтотОбъект.Параметры.СсылкаНового = ОбъектЗначение.ПолучитьСсылкуНового();
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ПриКопированииОбъекта(Параметры.ЗначениеКопирования);
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначениеСоздания") И ЗначениеЗаполнено(Параметры.ЗначениеСоздания) Тогда
		ПриСозданииОбъекта(Параметры.ЗначениеСоздания);
	КонецЕсли;
			
	Если ЭтотОбъект.Параметры.Свойство("ОбъектКопирования") Тогда
		Объект.Наименование = "Новое оповещение";
		Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПоказателиИнцидентов.Ссылка
		               |ИЗ
		               |	Справочник.ПоказателиИнцидентов КАК ПоказателиИнцидентов
		               |ГДЕ
		               |	ПоказателиИнцидентов.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Параметры.ОбъектКопирования);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовыйПоказатель = Выборка.Ссылка.Скопировать();
			НовыйПоказатель.Владелец = Объект.Ссылка;
			НовыйПоказатель.Записать();
			
			НовыйПоказательСчетчиков =Выборка.Ссылка.Показатель.Скопировать();
			НовыйПоказательСчетчиков.Владелец = НовыйПоказатель.Ссылка;
			НовыйПоказательСчетчиков.Записать();
			
			НовыйПоказатель.Показатель = НовыйПоказательСчетчиков.Ссылка;
			
			НовыйПоказатель.Записать();
		КонецЦикла;
	КонецЕсли;
		
	ПрочитатьРасписание();
			
	ЗаполнитьПоказателиИнцидентов();
	ЗаполнитьСписокТипов();
    
    Если НЕ ЗначениеЗаполнено(Объект.ЗапросОтбора) Тогда
        Объект.ЗапросОтбора = "ВЫБРАТЬ Ссылка Из Справочник.ГруппыСчетчиков";
    КонецЕсли;
    ИнициализироватьОтбор(Компоновщик, Объект.ЗапросОтбора, ЭтотОбъект.УникальныйИдентификатор);
    
    Если ЗначениеЗаполнено(Объект.НастройкиОтбора) Тогда
        Поток = Новый ЧтениеXML();
        Поток.УстановитьСтроку(Объект.НастройкиОтбора);
        ЭтотОбъект.Компоновщик.ЗагрузитьФиксированныеНастройки(СериализаторXDTO.ПрочитатьXML(Поток));
        Поток.Закрыть();
    КонецЕсли;
        	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораДней = 1;
		Расписание.ПериодПовтораВТечениеДня = 60;
		РасписаниеПредставление = Строка(Расписание);
        
        ПриОткрыииЗакрытие = Новый ОписаниеОповещения("ПриОткрытииЗакрытие", ЭтотОбъект);
        ОткрытьФорму("Справочник.ОбнаружениеИнцидентов.Форма.ФормаПредупреждение",,,,,,ПриОткрыииЗакрытие, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        
	КонецЕсли;
    
     мПараметрыПоказателей = Новый Соответствие;
    // Инициализация параметров Счетчики
    ТипПоказателяСчетчики = ПредопределенноеЗначение("Перечисление.ТипыПоказателей.Счетчики");
    мПараметрыПоказателей.Вставить(ТипПоказателяСчетчики, Новый Соответствие);
    
    мПараметрыПоказателей[ТипПоказателяСчетчики].Вставить("ТекстЗапроса", ТекстЗапросаСчетчики());
    
    мПараметрыПоказателей[ТипПоказателяСчетчики].Вставить("ПараметрПоказателя1", Новый Структура("Заголовок, СписокЗначений, ЗначениеПоУмолчанию"));
    ПараметрыПоказателя = мПараметрыПоказателей[ТипПоказателяСчетчики]["ПараметрПоказателя1"];
    ПараметрыПоказателя.Заголовок = "Аналитика";
    ПараметрыПоказателя.ЗначениеПоУмолчанию = "СреднееЗначение";
    ПараметрыПоказателя.СписокЗначений = Новый СписокЗначений;
    ПараметрыПоказателя.СписокЗначений.Добавить("СреднееЗначение", "Среднее за период");
    ПараметрыПоказателя.СписокЗначений.Добавить("Сумма", "Сумма за период");
    ПараметрыПоказателя.СписокЗначений.Добавить("ЧислоСрабатываний", "Показать количество вызовов");
    
    мПараметрыПоказателей[ТипПоказателяСчетчики].Вставить("ПараметрПоказателя2", Новый Структура("Заголовок, СписокЗначений, ЗначениеПоУмолчанию"));
    ПараметрыПоказателя = мПараметрыПоказателей[ТипПоказателяСчетчики]["ПараметрПоказателя2"];
    ПараметрыПоказателя.Заголовок = "Периодичность";
    ПараметрыПоказателя.ЗначениеПоУмолчанию = "Нет";
    ПараметрыПоказателя.СписокЗначений = Новый СписокЗначений;
    ПараметрыПоказателя.СписокЗначений.Добавить("Нет", "Нет");
    ПараметрыПоказателя.СписокЗначений.Добавить("Час", "Час");
    ПараметрыПоказателя.СписокЗначений.Добавить("День", "День");
    ПараметрыПоказателя.СписокЗначений.Добавить("Неделя", "Неделя");
    ПараметрыПоказателя.СписокЗначений.Добавить("Месяц", "Месяц");
    
    Если НЕ ЗначениеЗаполнено(Объект.ТипПоказателя) Тогда
        Объект.ТипПоказателя = ТипПоказателяСчетчики;
        Объект.ЗапросОтбора = ТекстЗапросаСчетчики();
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Объект.Функция) Тогда
        Объект.Функция = ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Среднее");
    КонецЕсли;
    
    Если Объект.ИнтервалРасчета = 0 Тогда
        Объект.ИнтервалРасчета = 180;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаВремениИнтервалаРасчета) Тогда
        Объект.ЕдиницаВремениИнтервалаРасчета = ПредопределенноеЗначение("Перечисление.ЕдиницыВремени.Секунда");
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Объект.ФорматнаяСтрокаЗначения) Тогда
        Объект.ФорматнаяСтрокаЗначения = "[ЧДЦ='2']";
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(Объект.Сравнение) Тогда
        Объект.Сравнение = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Больше");
    КонецЕсли;
            
    ТипПоказателяИзменитьФорму();
    СравнениеИзменитьФорму();
        
	ПоказателиИнцидентовУдалить = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОповеститьОбИзменении(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если Источник = ЭтотОбъект И ИмяСобытия = "ПоказателиИнцидентовСозданы" Тогда
		ПоказателиИнцидентовСозданы(Параметр);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.РасписаниеПредставление) Тогда
		ПоказатьПредупреждение(,"Не заполнено расписание!",30);
		Отказ = Истина;
	КонецЕсли;
		
	ПараметрыЗаписи.Вставить("ПоказателиИнцидентовУдалить", ПоказателиИнцидентовУдалить);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    Если Расписание <> Неопределено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Расписание", Расписание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Ссылка", ТекущийОбъект.Ссылка);
	Иначе
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Ссылка", ЭтотОбъект.Параметры.СсылкаНового);
		ТекущийОбъект.УстановитьСсылкуНового(ЭтотОбъект.Параметры.СсылкаНового);
    КонецЕсли;
    
    ТекущийОбъект.ДополнительныеСвойства.Вставить("ПоказателиИнцидентовУдалить", ПараметрыЗаписи.ПоказателиИнцидентовУдалить);
    
    Поток = Новый ЗаписьXML();
	Поток.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Поток, Компоновщик.ПолучитьНастройки());
	ТекущийОбъект.НастройкиОтбора = Поток.Закрыть();
        
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого ТекСтрока Из ЭтотОбъект.ТаблицаПоказателей Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПоказательИнцидента) Тогда
			ПоказательИнцидента = ТекСтрока.ПоказательИнцидента.ПолучитьОбъект();
			Показатель = ПоказательИнцидента.Показатель.ПолучитьОбъект();
		Иначе
			Поток = Новый ЧтениеXML();
			Поток.УстановитьСтроку(ТекСтрока.ПоказательИнцидентаСтрока);
			ПоказательСоответствие = СериализаторXDTO.ПрочитатьXML(Поток);
			Поток.Закрыть();
			
			Поток = Новый ЧтениеXML();
			Поток.УстановитьСтроку(ПоказательСоответствие["ПоказательИнцидентаXML"]);
			ПоказательИнцидента = СериализаторXDTO.ПрочитатьXML(Поток);
			ПоказательИнцидента.Владелец = ТекущийОбъект.Ссылка;
			Поток.Закрыть();
			
			Поток = Новый ЧтениеXML();
			Поток.УстановитьСтроку(ПоказательСоответствие["ПоказательXML"]);
			Показатель = СериализаторXDTO.ПрочитатьXML(Поток);
			Поток.Закрыть();
			
			Показатель.Записать();
			
			ПоказательИнцидента.Показатель = Показатель.Ссылка;
           
		КонецЕсли;
		
		Показатель.Описание = ТекСтрока.ПоказательИнцидентаОписание;
		Показатель.Записать();
		
		ПоказательИнцидента.Функция = ТекСтрока.Функция;
		ПоказательИнцидента.ИнтервалРасчета = ТекСтрока.Интервал;
		ПоказательИнцидента.ЕдиницаВремениИнтервалаРасчета = ТекСтрока.Время;
		ПоказательИнцидента.СравниватьСПрошлым = ТекСтрока.ВидСравнения = Перечисления.ВидыСравненияПоказателейОповещения.Изменился;
		ПоказательИнцидента.СмещениеБазы = ТекСтрока.СмещениеБазы;
		ПоказательИнцидента.ИнтервалБазы = ТекСтрока.Интервал;
		ПоказательИнцидента.ВидСравнения = ТекСтрока.ВидСравнения;
		ПоказательИнцидента.Порог = ТекСтрока.Порог;
		ПоказательИнцидента.ПорогДо = ТекСтрока.ПорогДо;
		ПоказательИнцидента.ПорогВПроцентах = ТекСтрока.ПорогВПроцентах = "%";
		ПоказательИнцидента.ФорматнаяСтрокаЗначения = ТекСтрока.ФорматнаяСтрокаЗначения;
		ПоказательИнцидента.Записать();
        
        ТекСтрока.ПоказательИнцидента = ПоказательИнцидента.Ссылка;
        		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыПоказателей

&НаКлиенте
Процедура ТаблицаПоказателейПриАктивизацииСтроки(Элемент)
	
	Если ЭтотОбъект.Элементы.ТаблицаПоказателей.ТекущиеДанные <> Неопределено Тогда 
		УстановитьСписокДоступныхЗначенийПорогВПроцентах();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоказателейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПараметрыОткрытия = Новый Структура("ЭтоНовый, ЗначенияЗаполнения", Истина, Новый Структура);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Владелец", Объект.Ссылка);
	Иначе
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Владелец", ЭтотОбъект.Параметры.СсылкаНового);
	КонецЕсли;
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Сериализовать", Истина);
		
	ОткрытьФорму("ОбщаяФорма.ВыборПоказателей",ПараметрыОткрытия,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоказателейВидСравненияПриИзменении(Элемент)
	УстановитьСписокДоступныхЗначенийПорогВПроцентах();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоказателейПередУдалением(Элемент, Отказ)
	
	Для Каждого ТекСтрока Из Элемент.ВыделенныеСтроки Цикл
		СтрокаТаблицы = ТаблицаПоказателей.НайтиПоИдентификатору(ТекСтрока);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПоказательИнцидента) Тогда
			ПоказателиИнцидентовУдалить.Добавить(СтрокаТаблицы.ПоказательИнцидента);
		КонецЕсли;
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоказателейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоказателейПоказательИнцидентаОписаниеОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Элементы.ТаблицаПоказателей.ТекущиеДанные.ПоказательИнцидента) Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ЭтотОбъект.Элементы.ТаблицаПоказателей.ТекущиеДанные.ПоказательИнцидента);
		ОткрытьФорму("Справочник.ПоказателиИнцидентов.Форма.ФормаЭлемента", ПараметрыОткрытия);
    Иначе
        ОписаниеЗавершенияВопроса = Новый ОписаниеОповещения("ВопросНаСохранение", ЭтотОбъект);
        ПоказатьВопрос(ОписаниеЗавершенияВопроса, "Показатель не записан. Записать и продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 30,,"Открыть показатель");
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РасписаниеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РедактированиеРасписанияРегламентногоЗадания();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
    Объект.ТипИнцидента = ИнцидентыСерверПовтИсп.ТипИнцидентаНайтиПоНаименованию("ЦКК.Показатели." + Объект.Наименование);
КонецПроцедуры

&НаКлиенте
Процедура ТипПоказателяПриИзменении(Элемент)
    ТипПоказателяИзменитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ФорматнаяСтрокаЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    ФорматнаяСтрокаЗначенияБуфер = Объект.ФорматнаяСтрокаЗначения;
	ИндексНачала = СтрНайти(Объект.ФорматнаяСтрокаЗначения, "[");
	ИндексОкончания = СтрНайти(Объект.ФорматнаяСтрокаЗначения, "]");
	Если ИндексНачала > 0 И ИндексОкончания > 0 Тогда
		ФорматнаяСтрокаЗначенияБуфер = Сред(ФорматнаяСтрокаЗначенияБуфер, ИндексНачала + 1, ИндексОкончания - ИндексНачала - 1);
	КонецЕсли;
	
	КонструкторФорматнойСтроки = Новый КонструкторФорматнойСтроки(ФорматнаяСтрокаЗначенияБуфер);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеВводаФорматнойСтроки", ЭтотОбъект);
	КонструкторФорматнойСтроки.Показать(ОписаниеОповещения);
	
	СтандартнаяОбработка = Ложь;
    
КонецПроцедуры

&НаКлиенте
Процедура СравнениеПриИзменении(Элемент)
    СравнениеИзменитьФорму();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьСейчас(Команда)
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСейчасЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Измененные данные будут записаны.'"), РежимДиалогаВопрос.ОКОтмена); 
	Иначе	
		ВыполнитьСейчасОбщая();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОповещения(Команда)
	
	СписокПодходящихОповещений = ПолучитьСписокОповещений();
	
	Если СписокПодходящихОповещений.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Нет подходящих оповещений для типа инцидента");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", СписокПодходящихОповещений));
	ОткрытьФорму("Справочник.Оповещения.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОповещение(Команда)
	
	ПараметрыФормы = Новый Структура("ТипИнцидентаДляЗаполненияФильтра, ИнтервалОЗакрытии", Объект.ТипИнцидента, 600);
	ОткрытьФорму("Справочник.Оповещения.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Запустить(Команда)
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Измененные данные будут записаны.'"), РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ЗапуститьОбщая();
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	ОстановитьНаСервере();
	ОповеститьОбИзменении(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьОписание(Команда)
	
	ПараметрыОткрытия = Новый Соответствие;
	Для Каждого ТекПоказатель ИЗ ЭтотОбъект.Элементы.ТаблицаПоказателей.ВыделенныеСтроки Цикл
		СтрокаТаблицы = ТаблицаПоказателей.НайтиПоИдентификатору(ТекПоказатель);
		ПараметрыОткрытия.Вставить(ТекПоказатель, СтрокаТаблицы.ПоказательИнцидентаОписание);
	КонецЦикла;
	
	Если ПараметрыОткрытия.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаменитьОписаниеЗавершение", ЭтотОбъект);
		ДопПараметры = Новый Структура("СтрокиДляЗамены", ПараметрыОткрытия);
		ОткрытьФорму("ОбщаяФорма.ФормаЗаменитьСтроки", ДопПараметры,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкаНетДанных(Команда)
    
    Если Модифицированность Тогда
        ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаНетДанныхВопросЗавершение", ЭтотОбъект);
        ПоказатьВопрос(ОписаниеОповещения, "Для продолжения необходима запись.
        |Записать и продолжить?", РежимДиалогаВопрос.ДаНетОтмена, 30);
    Иначе
        НастройкаНетДанныхОбщий();
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВыделенное(Команда)
    
    ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("РедактироватьВыделенноеОповещениеОЗакрытии", ЭтотОбъект);
    
    ОткрытьФорму("Справочник.ОбнаружениеИнцидентов.Форма.ФормаИзменитьВсе", Неопределено, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказатели(Команда)
    
    ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПоказателиВопрос", ЭтотОбъект);
    ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Показатели будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНетОтмена);
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьПоказателиВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        Для Каждого ТекСтрока Из ТаблицаПоказателей Цикл
            Если ЗначениеЗаполнено(ТекСтрока.ПоказательИнцидента) Тогда
                ПоказателиИнцидентовУдалить.Добавить(ТекСтрока.ПоказательИнцидента);
            КонецЕсли;
        КонецЦикла;
                
        ЭтотОбъект.ТаблицаПоказателей.Очистить();
        
        НовыеПоказатели = ОбновитьПоказателиНаСервере();
        Оповестить("ПоказателиИнцидентовСозданы", НовыеПоказатели, ЭтотОбъект);
        
        Модифицированность = Истина;
        
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Функция ОбновитьПоказателиНаСервере()
    
    Если Объект.ТипПоказателя = Перечисления.ТипыПоказателей.Счетчики Тогда
        ЗапросОтбораОбновления = "ВЫБРАТЬ Ссылка Из Справочник.ГруппыСчетчиков";
    КонецЕсли;
            
    ПотокНастройкиОтбора = Новый ЗаписьXML();
    ПотокНастройкиОтбора.УстановитьСтроку();
    СериализаторXDTO.ЗаписатьXML(ПотокНастройкиОтбора, Компоновщик.ПолучитьНастройки());
    Объект.НастройкиОтбора = ПотокНастройкиОтбора.Закрыть(); 
    
    КомпоновщикПолученияДанных = Новый КомпоновщикНастроекКомпоновкиДанных();
    СКД = Новый СхемаКомпоновкиДанных();
    Справочники.ОбнаружениеИнцидентов.ИнициализироватьКомпоновщикАвтоДобавленияПоказателей(КомпоновщикПолученияДанных, СКД, ЗапросОтбораОбновления, Объект.НастройкиОтбора);
    
    ПараметрыДобавления = Новый Структура;
    ПараметрыДобавления.Вставить("ТипПоказателя", Объект.ТипПоказателя);
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        ПараметрыДобавления.Вставить("Ссылка", Объект.Ссылка);
    Иначе
        ОбнаружениеИнцидентаОбъект = РеквизитФормыВЗначение("Объект");
        ОбнаружениеИнцидентаОбъект.УстановитьСсылкуНового(Справочники.ОбнаружениеИнцидентов.ПолучитьСсылку());
        ПараметрыДобавления.Вставить("Ссылка", ОбнаружениеИнцидентаОбъект.ПолучитьСсылкуНового());
        ЗначениеВРеквизитФормы(ОбнаружениеИнцидентаОбъект, "Объект");
    КонецЕсли;
    
    Справочники.ОбнаружениеИнцидентов.ДобавитьПараметрыВКомпоновщик(КомпоновщикПолученияДанных, ПараметрыДобавления);
    
    ТЗнСчетчики = Справочники.ОбнаружениеИнцидентов.ПолучитьДанныеКомпоновщика(КомпоновщикПолученияДанных, СКД);
    
    НовыеПоказатели = Новый Массив;
    
    Для Каждого ТекСчетчик Из ТЗнСчетчики Цикл
        
        ПараметрыСоздания = Новый Структура;
        ПараметрыСоздания.Вставить("Владелец", ПараметрыДобавления.Ссылка);
        ПараметрыСоздания.Вставить("Функция", Объект.Функция);
        ПараметрыСоздания.Вставить("ИнтервалРасчета", Объект.ИнтервалРасчета);
        ПараметрыСоздания.Вставить("ЕдиницаВремениИнтервалаРасчета", Объект.ЕдиницаВремениИнтервалаРасчета);
        ПараметрыСоздания.Вставить("ФорматнаяСтрокаЗначения", Объект.ФорматнаяСтрокаЗначения);
        ПараметрыСоздания.Вставить("ВидСравнения", Объект.Сравнение);
        ПараметрыСоздания.Вставить("Порог", Объект.Порог);
        ПараметрыСоздания.Вставить("ПорогВПроцентах", Объект.ПорогВПроцентах);
        ПараметрыСоздания.Вставить("СравниватьСПрошлым", Ложь);
        ПараметрыСоздания.Вставить("СмещениеБазы", Объект.СмещениеБазы);
        
        ПоказательМониторинга = Справочники.ПоказателиИнцидентов.СоздатьЭлементXML(ПараметрыСоздания);
        
        ПараметрыСоздания = Новый Структура;
        ПараметрыСоздания.Вставить("Владелец", ПоказательМониторинга["СсылкаПоказательИнцидента"]);
        ПараметрыСоздания.Вставить("Периодичность", Объект.ПараметрПоказателя2);
        ПараметрыСоздания.Вставить("Аналитика", Объект.ПараметрПоказателя1);
        ПараметрыСоздания.Вставить("Описание", ТекСчетчик.Ссылка);
        ПараметрыСоздания.Вставить("РегулярноеВыражениеПоиска", Объект.РегулярноеВыражениеПоиска);
        ПараметрыСоздания.Вставить("РегулярноеВыражениеЗамены", Объект.РегулярноеВыражениеЗамены);
        
        СчетчикиДобавить = Новый Массив;
        ЭлементСчетчика = Новый Структура("Счетчик, Группа", ТекСчетчик.Ссылка, Строка(ТекСчетчик.Ссылка));
        СчетчикиДобавить.Добавить(ЭлементСчетчика);
        
        ПараметрыСоздания.Вставить("Счетчики", СчетчикиДобавить);
        
        НовыйПоказательСчетчиков = Справочники.ПоказателиСчетчиков.СоздатьЭлементXML(ПараметрыСоздания);
        
        ПоказательМониторинга.Вставить("ПоказательXML", НовыйПоказательСчетчиков);
        
        Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
        
		НовыеПоказатели.Добавить(Поток.Закрыть());
        
    КонецЦикла;
    
    Возврат НовыеПоказатели;
        
КонецФункции

&НаКлиенте
Процедура НастройкаНетДанныхВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЭтотОбъект.Записать();
        НастройкаНетДанныхОбщий();
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура НастройкаНетДанныхОбщий()
    ПараметрыОткрытия = Новый Структура("ОбнаружениеИнцидента", Объект.Ссылка);
    ОткрытьФорму("Справочник.ГруппыСчетчиков.Форма.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВопросНаСохранение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ЭтотОбъект.Записать();
        ПараметрыОткрытия = Новый Структура("Ключ", ЭтотОбъект.Элементы.ТаблицаПоказателей.ТекущиеДанные.ПоказательИнцидента);
		ОткрытьФорму("Справочник.ПоказателиИнцидентов.Форма.ФормаЭлемента", ПараметрыОткрытия);
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ПриКопированииОбъекта(ОбъектКопирования)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоказателиИнцидентов.Ссылка КАК ПоказательИнцидента,
	|	ПоказателиИнцидентов.Показатель КАК Показатель
	|ИЗ
	|	Справочник.ПоказателиИнцидентов КАК ПоказателиИнцидентов
	|ГДЕ
	|	ПоказателиИнцидентов.Владелец = &Владелец
	|";
	
	Запрос.УстановитьПараметр("Владелец", ОбъектКопирования.Ссылка);
	Результат = Запрос.Выполнить();
	
	НовыеСтроки = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		
		ПоказательИнцидентаОбъект = Выборка.ПоказательИнцидента.ПолучитьОбъект();
		ПоказательИнцидентаНовый = ПоказательИнцидентаОбъект.Скопировать();
		ПоказательИнцидентаНовый.УстановитьСсылкуНового(Справочники.ПоказателиИнцидентов.ПолучитьСсылку());
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПоказательИнцидентаНовый.Владелец = Объект.Ссылка;
		Иначе
			ПоказательИнцидентаНовый.Владелец = ЭтотОбъект.Параметры.СсылкаНового;
		КонецЕсли;
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательИнцидентаНовый);
		
	    ПоказательРезультат = Новый Соответствие;
		ПоказательРезультат.Вставить("СсылкаПоказательИнцидента", ПоказательИнцидентаНовый.Ссылка);
		ПоказательРезультат.Вставить("ПоказательИнцидентаXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		ПоказательОбъект = Выборка.Показатель.ПолучитьОбъект();
		ПоказательНовый = ПоказательОбъект.Скопировать();
		ПоказательНовый.УстановитьСсылкуНового(Справочники[ПоказательНовый.Метаданные().Имя].ПолучитьСсылку());
		ПоказательНовый.Владелец = ПоказательИнцидентаНовый.ПолучитьСсылкуНового();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательНовый);
		ПоказательРезультат.Вставить("ПоказательXML", Поток.Закрыть());

		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательРезультат);
		НовыеСтроки.Добавить(Поток.Закрыть());
	КонецЦикла;	
	ПоказателиИнцидентовСозданы(НовыеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииОбъекта(ЗначениеСоздания)
	ПоказателиИнцидентовСозданы(ЗначениеСоздания);	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиИнцидентов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоказателиИнцидентов.Ссылка КАК ПоказательИнцидента,
	|	ПоказателиИнцидентов.Показатель.Описание КАК ПоказательИнцидентаОписание,
	|	ТИПЗНАЧЕНИЯ(ПоказателиИнцидентов.Показатель) КАК ТипПоказателя,
	|	ФорматнаяСтрокаЗначения КАК ФорматнаяСтрокаЗначения,
	|	ПоказателиИнцидентов.Функция,
	|	ПоказателиИнцидентов.ИнтервалРасчета КАК Интервал,
	|	ПоказателиИнцидентов.ЕдиницаВремениИнтервалаРасчета КАК Время,
	|	ПоказателиИнцидентов.Порог,
	|	ПоказателиИнцидентов.ПорогДо,
	|	ПоказателиИнцидентов.ВидСравнения,
	|	ВЫБОР
	|		КОГДА ПоказателиИнцидентов.ПорогВПроцентах ТОГДА ""%""
	|		ИНАЧЕ ""ед.""
	|	КОНЕЦ КАК ПорогВПроцентах,
	|   ПоказателиИнцидентов.СмещениеБазы
	|ИЗ
	|	Справочник.ПоказателиИнцидентов КАК ПоказателиИнцидентов
	|ГДЕ
	|	ПоказателиИнцидентов.Владелец = &Владелец
	|";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
    ТаблицаПоказателей.Очистить();
	Пока Выборка.Следующий() Цикл
		НовСтрока = ТаблицаПоказателей.Добавить();
		НовСтрока.ПоказательИнцидента = Выборка.ПоказательИнцидента;
		НовСтрока.ПоказательИнцидентаОписание = Выборка.ПоказательИнцидентаОписание;
		НовСтрока.ТипПоказателя = Выборка.ТипПоказателя;
		НовСтрока.ФорматнаяСтрокаЗначения = Выборка.ФорматнаяСтрокаЗначения;
		НовСтрока.Функция = Выборка.Функция;
		НовСтрока.Интервал = Выборка.Интервал;
		НовСтрока.Время = Выборка.Время;
		НовСтрока.Порог = Выборка.Порог;
		НовСтрока.ПорогДо = Выборка.ПорогДо;
		НовСтрока.ВидСравнения = Выборка.ВидСравнения;
		НовСтрока.ПорогВПроцентах = Выборка.ПорогВПроцентах;
		НовСтрока.СмещениеБазы = Выборка.СмещениеБазы;
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТипов()
	
	СписокВыбораЗаполнить = ЭтотОбъект.Элементы.ТаблицаПоказателейТипПоказателя.СписокВыбора;
	СписокВыбораЗаполнить.Добавить("Активных вызовов сервера");
	СписокВыбораЗаполнить.Добавить("Использование оперативной памяти процессами кластера (в мегабайтах)");
	СписокВыбораЗаполнить.Добавить("Оценка пользователей");
	СписокВыбораЗаполнить.Добавить("Оценка производительности");
	СписокВыбораЗаполнить.Добавить("Процент доступности информационных баз");
	СписокВыбораЗаполнить.Добавить("Процент доступности сервисов");
	СписокВыбораЗаполнить.Добавить("Скорость выполнения ключевых операций (в секундах)");
	СписокВыбораЗаполнить.Добавить("Сформировано отчетов");
	СписокВыбораЗаполнить.Добавить("Счетчики");
	СписокВыбораЗаполнить.Добавить("Число excp по технологическому журналу");
	СписокВыбораЗаполнить.Добавить("Число аварийных завершений процессов");
	СписокВыбораЗаполнить.Добавить("Число новых и измененных объектов");
	СписокВыбораЗаполнить.Добавить("Число новых проблем");
	СписокВыбораЗаполнить.Добавить("Число решенных проблем");
	СписокВыбораЗаполнить.Добавить("Число сеансов");
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если КодВозвратаДиалога.ОК Тогда
		Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Записать();
		ЗапуститьОбщая();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбщая()
	ОчиститьСообщения();
	ЗапуститьНаСервере();
	ОповеститьОбИзменении(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСейчасЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Записать();
		ВыполнитьСейчасОбщая();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСейчасОбщая()
	Результат = ВыполнитьСервер();
    
    Если Результат = Ложь Тогда
		Пояснение = НСтр("ru = 'Инцидент не сформирован'");
    ИначеЕсли Результат = Истина Тогда
        Пояснение = НСтр("ru = 'Инцидент сформирован");
    ИначеЕсли Результат = Неопределено Тогда
        Пояснение = НСтр("ru = 'Нет данных для анализа инцидента");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Проверка выполнена'"), , Пояснение);
		
	ОповеститьОбИзменении(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания()
	Перем Диалог;
	
	Если Расписание = Неопределено Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершение(РасписаниеВыбрано, ДополнительныеПараметры) Экспорт
	Если РасписаниеВыбрано <> Неопределено Тогда
		Расписание = РасписаниеВыбрано;
		РасписаниеПредставление = Строка(Расписание);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗапуститьНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ТекущийОбъект.ПроверитьКорректностьЗаполнения(Истина) Тогда
		Возврат;
	КонецЕсли;
	ОчередьЗаданий.ИзменитьЗадание(Объект.ИсполняющееЗадание, Новый Структура("Использование", Истина));
	Справочники.ОбнаружениеИнцидентов.ЗапуститьОстановитьАссоциированноеОповещение(Объект.Ссылка, Истина);

	РасписаниеИспользование = Истина;
	УстановитьДоступностьКнопокЗапуска(РасписаниеИспользование);
	
КонецПроцедуры

&НаСервере
Процедура ОстановитьНаСервере()
	
	ОчередьЗаданий.ИзменитьЗадание(Объект.ИсполняющееЗадание, Новый Структура("Использование", Ложь));
	Справочники.ОбнаружениеИнцидентов.ЗапуститьОстановитьАссоциированноеОповещение(Объект.Ссылка, Ложь);
	РасписаниеИспользование = Ложь;
	УстановитьДоступностьКнопокЗапуска(РасписаниеИспользование);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРасписание()
	
	Если Объект.ИсполняющееЗадание <> Неопределено Тогда
		Задания = ОчередьЗаданий.ПолучитьЗадания(Новый Структура("Идентификатор", Объект.ИсполняющееЗадание));
			
		Если Задания.Количество() > 0 Тогда
			Расписание = Задания[0].Расписание;
			РасписаниеПредставление = Задания[0].Расписание;
			РасписаниеИспользование = Задания[0].Использование;
		Иначе
			Объект.ИсполняющееЗадание = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьКнопокЗапуска(РасписаниеИспользование);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопокЗапуска(Знач РасписаниеИспользование)
	
	Элементы.Запустить.Доступность = Не РасписаниеИспользование;
	Элементы.Остановить.Доступность = РасписаниеИспользование;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ТекущийОбъект.ПроверитьКорректностьЗаполнения(Истина) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Справочники.ОбнаружениеИнцидентов.ВыполнитьЗамер(Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура ПоказателиИнцидентовСозданы(Показатели)
	
	Для Каждого ТекПоказатель Из Показатели Цикл
		НовСтрока = ЭтотОбъект.ТаблицаПоказателей.Добавить();
		НовСтрока.ПоказательИнцидентаСтрока = ТекПоказатель;
		
		Поток = Новый ЧтениеXML();
		Поток.УстановитьСтроку(ТекПоказатель);
		ПоказательСоответствие = СериализаторXDTO.ПрочитатьXML(Поток);
		Поток.Закрыть();
		
		Поток = Новый ЧтениеXML();
		Поток.УстановитьСтроку(ПоказательСоответствие["ПоказательИнцидентаXML"]);
		ПоказательИнцидента = СериализаторXDTO.ПрочитатьXML(Поток);
		Поток.Закрыть();
		
		Поток = Новый ЧтениеXML();
		Поток.УстановитьСтроку(ПоказательСоответствие["ПоказательXML"]);
		Показатель = СериализаторXDTO.ПрочитатьXML(Поток);
		Поток.Закрыть();
		
		НовСтрока.ПоказательИнцидентаОписание = Показатель.Описание;
		НовСтрока.ТипПоказателя = ТипЗнч(Показатель.Ссылка);
		
		НовСтрока.ФорматнаяСтрокаЗначения = ПоказательИнцидента.ФорматнаяСтрокаЗначения;
		Если НЕ ЗначениеЗаполнено(НовСтрока.ФорматнаяСтрокаЗначения) Тогда
			НовСтрока.ФорматнаяСтрокаЗначения = "[ЧДЦ='2']";
		КонецЕсли;
				
		НовСтрока.Функция = ПоказательИнцидента.Функция;
		НовСтрока.Интервал = ПоказательИнцидента.ИнтервалРасчета;
		НовСтрока.Время = ПоказательИнцидента.ЕдиницаВремениИнтервалаРасчета;
		НовСтрока.ВидСравнения = ПоказательИнцидента.ВидСравнения;
		НовСтрока.Порог = ПоказательИнцидента.Порог;
		НовСтрока.ПорогДо = ПоказательИнцидента.ПорогДо;
		Если ПоказательИнцидента.ПорогВПроцентах Тогда
			НовСтрока.ПорогВПроцентах = "%";
		Иначе
			НовСтрока.ПорогВПроцентах = "ед.";
		КонецЕсли;
		НовСтрока.СмещениеБазы = ПоказательИнцидента.СмещениеБазы;
				
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОповещений()
	
	Результат = Новый Массив();
	
	Отбор = Новый Структура("ОтноситсяКТипуИнцидента", Объект.ТипИнцидента);
	Выборка = Справочники.Оповещения.Выбрать(,,Отбор);
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОкончаниеВводаФорматнойСтроки(Текст, ДополнительныеПараметры) Экспорт
	
	ИндексНачала = СтрНайти(Объект.ФорматнаяСтрокаЗначения, "[");
	ИндексОкончания = СтрНайти(Объект.ФорматнаяСтрокаЗначения, "]");
	
	Если ИндексНачала > 0 И ИндексОкончания > 0 Тогда
		ФорматнаяСтрокаЗначенияБуфер = Сред(Объект.ФорматнаяСтрокаЗначения, ИндексНачала + 1, ИндексОкончания - ИндексНачала - 1);
		Объект.ФорматнаяСтрокаЗначения = СтрЗаменить(Объект.ФорматнаяСтрокаЗначения, "[" + ФорматнаяСтрокаЗначенияБуфер + "]", "[" + Текст + "]");
	Иначе
		Объект.ФорматнаяСтрокаЗначения = "[" + Текст + "]";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокДоступныхЗначенийПорогВПроцентах()
	
	Если ЭтотОбъект.Элементы.ТаблицаПоказателей.ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Больше") Тогда
		ЭтотОбъект.Элементы.ТаблицаПоказателейПорогВПроцентах.СписокВыбора.Очистить();
		ЭтотОбъект.Элементы.ТаблицаПоказателейПорогВПроцентах.СписокВыбора.Добавить("ед.");
		ЭтотОбъект.Элементы.ТаблицаПоказателей.ТекущиеДанные.ПорогВПроцентах = "ед.";
	ИначеЕсли ЭтотОбъект.Элементы.ТаблицаПоказателей.ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Меньше") Тогда
		ЭтотОбъект.Элементы.ТаблицаПоказателейПорогВПроцентах.СписокВыбора.Очистить();
		ЭтотОбъект.Элементы.ТаблицаПоказателейПорогВПроцентах.СписокВыбора.Добавить("ед.");
		ЭтотОбъект.Элементы.ТаблицаПоказателей.ТекущиеДанные.ПорогВПроцентах = "ед.";
	ИначеЕсли ЭтотОбъект.Элементы.ТаблицаПоказателей.ТекущиеДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Изменился") Тогда
		ЭтотОбъект.Элементы.ТаблицаПоказателейПорогВПроцентах.СписокВыбора.Очистить();
		ЭтотОбъект.Элементы.ТаблицаПоказателейПорогВПроцентах.СписокВыбора.Добавить("ед.");
		ЭтотОбъект.Элементы.ТаблицаПоказателейПорогВПроцентах.СписокВыбора.Добавить("%");
		Если ЭтотОбъект.Элементы.ТаблицаПоказателей.ТекущиеДанные <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Элементы.ТаблицаПоказателей.ТекущиеДанные.СмещениеБазы) Тогда
				ЭтотОбъект.Элементы.ТаблицаПоказателей.ТекущиеДанные.СмещениеБазы = ПредопределенноеЗначение("Перечисление.ВариантыСмещенияБазы.Прошлый");
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьОписаниеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Для Каждого ТекРезультат ИЗ РезультатЗакрытия Цикл
			СтрокаТаблицы = ТаблицаПоказателей.НайтиПоИдентификатору(ТекРезультат.Ключ);
			СтрокаТаблицы.ПоказательИнцидентаОписание = ТекРезультат.Значение;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВыделенноеОповещениеОЗакрытии(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
        
        Для Каждого ТекПоказатель ИЗ ЭтотОбъект.Элементы.ТаблицаПоказателей.ВыделенныеСтроки Цикл
            СтрокаТаблицы = ТаблицаПоказателей.НайтиПоИдентификатору(ТекПоказатель);
            
            Если РезультатЗакрытия.Свойство("ФорматнаяСтрокаВсем") Тогда
                СтрокаТаблицы.ФорматнаяСтрокаЗначения = РезультатЗакрытия.ФорматнаяСтрокаВсем;
            КонецЕсли;
            
            Если РезультатЗакрытия.Свойство("ФункцияВсем") Тогда
                СтрокаТаблицы.Функция = РезультатЗакрытия.ФункцияВсем;
            КонецЕсли;
            
            Если РезультатЗакрытия.Свойство("ИнтервалВсем") Тогда
                СтрокаТаблицы.Интервал = РезультатЗакрытия.ИнтервалВсем;
            КонецЕсли;
            
            Если РезультатЗакрытия.Свойство("СравнениеВсем") Тогда
                СтрокаТаблицы.ВидСравнения = РезультатЗакрытия.СравнениеВсем;
            КонецЕсли;
            
            Если РезультатЗакрытия.Свойство("ПорогВсем") Тогда
                СтрокаТаблицы.Порог = РезультатЗакрытия.ПорогВсем;
            КонецЕсли;
            
            Если РезультатЗакрытия.Свойство("ПорогДоВсем") Тогда
                СтрокаТаблицы.ПорогДо = РезультатЗакрытия.ПорогДоВсем;
            КонецЕсли;
            
            Если РезультатЗакрытия.Свойство("ПорогВПроцентахВсем") Тогда
                Если РезультатЗакрытия.ПорогВПроцентахВсем Тогда
                    СтрокаТаблицы.ПорогВПроцентах = "%";
                Иначе
                    СтрокаТаблицы.ПорогВПроцентах = "ед.";
                КонецЕсли;
            КонецЕсли;
            
            Если РезультатЗакрытия.Свойство("СмещениеБазыВсем") Тогда
                СтрокаТаблицы.СмещениеБазы = РезультатЗакрытия.СмещениеБазыВсем;
            КонецЕсли;
            
        КонецЦикла;
                
        Модифицированность = Истина;
        
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ТипПоказателяИзменитьФорму()
    
    Для ТекНомерПоказателя = 1 По 3 Цикл
        ИмяПараметра = "ПараметрПоказателя" + Формат(ТекНомерПоказателя, "ЧГ=0");
        ЭтотОбъект.Элементы[ИмяПараметра].Видимость = Ложь;
        ТипПоказателя = мПараметрыПоказателей[Объект.ТипПоказателя];
        Если ТипПоказателя <> Неопределено Тогда
            ПараметрыПоказателя = мПараметрыПоказателей[Объект.ТипПоказателя][ИмяПараметра];
            Если ПараметрыПоказателя <> Неопределено Тогда
                
                ЭтотОбъект.Элементы[ИмяПараметра].Заголовок = ПараметрыПоказателя.Заголовок;
                                
                СписокВыбора = ЭтотОбъект.Элементы[ИмяПараметра].СписокВыбора;
                СписокВыбора.Очистить();
                Для Каждого ТекПараметр Из ПараметрыПоказателя.СписокЗначений Цикл
                    СписокВыбора.Добавить(ТекПараметр.Значение, ТекПараметр.Представление);
                КонецЦикла;
                ЭтотОбъект.Элементы[ИмяПараметра].Видимость = Истина;
                
                Объект[ИмяПараметра] = ПараметрыПоказателя.ЗначениеПоУмолчанию;
                
            КонецЕсли;
            
            Если ТипПоказателя["ТекстЗапроса"] <> Объект.ЗапросОтбора Тогда
                Объект.ЗапросОтбора = ТипПоказателя["ТекстЗапроса"];
                ИнициализироватьОтбор(ЭтотОбъект.Компоновщик, Объект.ЗапросОтбора, ЭтотОбъект.УникальныйИдентификатор);
            КонецЕсли;
            
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура СравнениеИзменитьФорму()
    
    ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Очистить();
    
    Если Объект.Сравнение = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Больше") Тогда
        ЭтотОбъект.ПорогЗаголовок = "чем";
        ЭтотОбъект.Элементы.ПорогДо.Видимость = Ложь;
        ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Добавить(Ложь, "ед.");
        ЭтотОбъект.Элементы.СмещениеБазы.Видимость = Ложь;
    ИначеЕсли Объект.Сравнение = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Меньше") Тогда
        ЭтотОбъект.ПорогЗаголовок = "чем";
        ЭтотОбъект.Элементы.ПорогДо.Видимость = Ложь;
        ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Добавить(Ложь, "ед.");
        ЭтотОбъект.Элементы.СмещениеБазы.Видимость = Ложь;
    ИначеЕсли Объект.Сравнение = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Между") Тогда
        ЭтотОбъект.ПорогЗаголовок = "";
        ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Добавить(Ложь, "ед.");
        ЭтотОбъект.Элементы.ПорогДо.Видимость = Истина;
        ЭтотОбъект.Элементы.СмещениеБазы.Видимость = Ложь;
    ИначеЕсли Объект.Сравнение = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Изменился") Тогда
        ЭтотОбъект.ПорогЗаголовок = "на";
        ЭтотОбъект.Элементы.ПорогДо.Видимость = Ложь;
        ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Добавить(Ложь, "ед.");
        ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Добавить(Истина, "%");
        ЭтотОбъект.Элементы.СмещениеБазы.Видимость = Истина;
    КонецЕсли;
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИнициализироватьОтбор(Компоновщик, ТекстЗапроса, УникальныйИдентификаторФормы)
    
    СКД = Новый СхемаКомпоновкиДанных();
	ИсточникСКД = СКД.ИсточникиДанных.Добавить();
	ИсточникСКД.Имя = "ИсточникДанных1";
	ИсточникСКД.ТипИсточникаДанных = "local";
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанных.Запрос = ТекстЗапроса; 
    НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
    
    URLСхемы = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификаторФормы);
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
    
КонецПроцедуры

&НаКлиенте
Функция ТекстЗапросаСчетчики()
    
    ТекстЗапросаСчетчики = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.ГруппыСчетчиков
    |ГДЕ
    |   НЕ Ссылка В
    |(ВЫБРАТЬ
	|   СпрСчетчики.Счетчик КАК Счетчик
    |ИЗ
	|   Справочник.ПоказателиИнцидентов КАК СпрПоказателиИнцидентов
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|   Справочник.ПоказателиСчетчиков.Счетчики КАК СпрСчетчики
    |ПО
	|   СпрСчетчики.Ссылка = СпрПоказателиИнцидентов.Показатель 
    |ГДЕ
	|   СпрПоказателиИнцидентов.Владелец = &ОбнаружениеИнцидентов
    |)
    |";
    
    Возврат ТекстЗапросаСчетчики;
    
КонецФункции

&НаКлиенте
Процедура ПриОткрытииЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    ЭтотОбъект.Закрыть();
КонецПроцедуры

#КонецОбласти
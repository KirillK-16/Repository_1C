#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.ОграниченияДоступаККонтурамАдминистрирования) И Не РаботаСоСценариямиАвтоматизацииПраваДоступа.ПроверитьНаличиеПолногоДоступаКФункционалуАвтоматизации() Тогда
		Отказ = Истина;
	Иначе
		ОбновитьСписокПользователейНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПользователейНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	КС = Новый КвалификаторыСтроки(150);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	
	КЧ = Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , КЧ);
	
	ТаблицаПользователейИБ = Новый ТаблицаЗначений;
	ТаблицаПользователейИБ.Колонки.Добавить("Имя", ОписаниеТиповС);
	ТаблицаПользователейИБ.Колонки.Добавить("ПолноеИмя", ОписаниеТиповС);
	ТаблицаПользователейИБ.Колонки.Добавить("ДоступКАвтоматизации", ОписаниеТиповЧ);
	
	Для каждого Элемент Из МассивПользователейИБ Цикл
		НоваяСтрока = ТаблицаПользователейИБ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		Если Элемент.Роли.Содержит(Метаданные.Роли.АвтоматизацияПолныеПрава) Тогда
			НоваяСтрока.ДоступКАвтоматизации = 1;
		ИначеЕсли Элемент.Роли.Содержит(Метаданные.Роли.АвтоматизацияОграниченныеПрава) Тогда
			НоваяСтрока.ДоступКАвтоматизации = 2;
		Иначе
			НоваяСтрока.ДоступКАвтоматизации = 0;
		КонецЕсли;
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Таб.Имя КАК Имя,
	                      |	Таб.ПолноеИмя КАК ПолноеИмя,
	                      |	Таб.ДоступКАвтоматизации КАК ДоступКАвтоматизации
	                      |ПОМЕСТИТЬ ТаблицаПользователейИБ
	                      |ИЗ
	                      |	&ТаблицаПользователейИБ КАК Таб
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ТаблицаПользователейИБ.Имя КАК Имя,
	                      |	ТаблицаПользователейИБ.ПолноеИмя КАК ПолноеИмя,
	                      |	ТаблицаПользователейИБ.ДоступКАвтоматизации КАК ИндексКартинки,
						  |	ОграниченияДоступаККонтурамАвтоматизацииПользователиИБ.Имя,
	                      |	ВЫБОР
	                      |		КОГДА ОграниченияДоступаККонтурамАвтоматизацииПользователиИБ.Имя ЕСТЬ NULL
	                      |			ТОГДА 0
	                      |		ИНАЧЕ 1
	                      |	КОНЕЦ КАК ЗаданыОграничения
	                      |ИЗ
	                      |	ТаблицаПользователейИБ КАК ТаблицаПользователейИБ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОграниченияДоступаККонтурамАдминистрирования.ПользователиИБ КАК ОграниченияДоступаККонтурамАвтоматизацииПользователиИБ
	                      |		ПО ТаблицаПользователейИБ.Имя = ОграниченияДоступаККонтурамАвтоматизацииПользователиИБ.Имя
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Имя
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ТаблицаПользователейИБ");
	
	Запрос.УстановитьПараметр("ТаблицаПользователейИБ", ТаблицаПользователейИБ);
	ОграниченияПользователиИБ = Запрос.Выполнить().Выгрузить();
	ЗначениеВДанныеФормы(ОграниченияПользователиИБ, ПользователиИБ);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПользователей(Команда)
	ОбновитьСписокПользователейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	ОбновитьСписокПользователейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПользователиИБПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПолучитьОграниченияПользователя(Элемент.ТекущиеДанные.Имя);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОграниченияПользователя(ИмяПользователя)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ОграниченияДоступаККонтурамАвтоматизацииДоступныеКонтурыАвтоматизации.Контур КАК Контур
	                      |ИЗ
	                      |	Справочник.ОграниченияДоступаККонтурамАдминистрирования.ДоступныеКонтуры КАК ОграниченияДоступаККонтурамАвтоматизацииДоступныеКонтурыАвтоматизации
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОграниченияДоступаККонтурамАдминистрирования.ПользователиИБ КАК ОграниченияДоступаККонтурамАвтоматизацииПользователиИБ
	                      |		ПО ОграниченияДоступаККонтурамАвтоматизацииДоступныеКонтурыАвтоматизации.Ссылка = ОграниченияДоступаККонтурамАвтоматизацииПользователиИБ.Ссылка
	                      |ГДЕ
	                      |	ОграниченияДоступаККонтурамАвтоматизацииПользователиИБ.Имя = &Имя
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Контур");
	Запрос.УстановитьПараметр("Имя", ИмяПользователя);
	
	Результат = Запрос.Выполнить().Выгрузить();
	ЗначениеВДанныеФормы(Результат, ДоступныеПользователюКонтуры);
КонецПроцедуры	

&НаКлиенте
Процедура ПользователиИБВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ПользователиИБ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("Имя, ПолноеИмя", ТекущиеДанные.Имя,  ТекущиеДанные.ПолноеИмя);
		ОткрытьФорму("Справочник.ОграниченияДоступаККонтурамАдминистрирования.Форма.ФормаИзмененияРолей", ПараметрыОткрытия, ЭтотОбъект,,,,);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
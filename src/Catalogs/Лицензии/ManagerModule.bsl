
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПрограммныйИнтерфейс

Функция СоздатьЛицензию(РегистрационныйНомер, Параметры) Экспорт
    
    Ссылка = НайтиЛицензию(РегистрационныйНомер);
    
    Если Ссылка = Справочники.Лицензии.ПустаяСсылка() Тогда
        
        НачатьТранзакцию();
        Попытка
            БлокировкаДанных = Новый БлокировкаДанных;
            ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.Лицензии");
            ЭлементБлокировки.УстановитьЗначение("РегистрационныйНомер", РегистрационныйНомер);
            ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
            БлокировкаДанных.Заблокировать();
            
            Ссылка = НайтиЛицензию(РегистрационныйНомер);
            Если Ссылка = Справочники.Лицензии.ПустаяСсылка() Тогда
                
                НовыйЭлемент = Справочники.Лицензии.СоздатьЭлемент();
                НовыйЭлемент.РегистрационныйНомер = РегистрационныйНомер;
                
                Для Каждого ТекПараметр Из Параметры Цикл
                    ИзменитьРеквизит(ТекПараметр.Ключ, Параметры, Ссылка, НовыйЭлемент);
                КонецЦикла;
                         
                НовыйЭлемент.Записать();
                Ссылка = НовыйЭлемент.Ссылка;
                
            КонецЕсли;
            
            ЗафиксироватьТранзакцию();
            
            Возврат Ссылка;
            
        Исключение
            ОтменитьТранзакцию();
            ВызватьИсключение;
        КонецПопытки;
        
    Иначе
        Возврат Ссылка;
    КонецЕсли;
    
КонецФункции

Процедура ИзменитьРеквизит(ИмяРеквизита, Параметры, Ссылка, Объект)
    
    Если Параметры.Свойство(ИмяРеквизита) И Ссылка[ИмяРеквизита] <> Параметры[ИмяРеквизита] Тогда
        
        Если Объект = Неопределено Тогда
            Объект = Ссылка.ПолучитьОбъект();
        КонецЕсли;
        
        Объект[ИмяРеквизита] = Параметры[ИмяРеквизита];
        
    КонецЕсли;
    
КонецПроцедуры

Функция РегистрационныйНомерИзНаименования(Наименование) Экспорт
    
    ЛицензияТипИмя = СтрРазделить(Наименование, ",");
    
    Если ЛицензияТипИмя.Количество() = 2 Тогда
        ЛицензияРегНомер = СтрРазделить(СокрЛП(ЛицензияТипИмя[1]), " ");
        Если ЛицензияРегНомер.Количество() = 3 Тогда
            РегистрационныйНомер = ЛицензияРегНомер[0];
        ИначеЕсли ЛицензияРегНомер.Количество() = 2 Тогда
            РегистрационныйНомер = ЛицензияРегНомер[0];
        Иначе
            РегистрационныйНомер = Наименование; 
        КонецЕсли;
    Иначе
        РегистрационныйНомер = Наименование;
    КонецЕсли;
    
    Возврат РегистрационныйНомер;
    
КонецФункции

Функция АгрегироватьЛицензии(Лицензии) Экспорт
    
    АгрегированныеЛицензии = Новый Соответствие;
    
    Для Каждого ЛицензииКластера Из Лицензии Цикл
        
        Для Каждого Лицензия Из ЛицензииКластера Цикл
            
            ТекЛицензия = АгрегированныеЛицензии[Лицензия["name"]];
            
            Если ТекЛицензия = Неопределено Тогда
                ТекЛицензия = Лицензия;
                АгрегированныеЛицензии.Вставить(Лицензия["name"], ТекЛицензия);
            Иначе
                Если ВычислитьИспользование(Лицензия) Тогда
                    ТекЛицензия["count"] = ТекЛицензия["count"] + Лицензия["count"];
                КонецЕсли;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЦикла;
    
    Возврат АгрегированныеЛицензии;
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиЛицензию(РегистрационныйНомер)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Справочник.Лицензии
    |ГДЕ
    |   РегистрационныйНомер = &РегистрационныйНомер
    |";
    
    Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
   
    Результат = Запрос.Выполнить();
    Если Результат.Пустой() Тогда
        Возврат Справочники.Лицензии.ПустаяСсылка();
    Иначе
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Возврат Выборка.Ссылка;
    КонецЕсли;
        
КонецФункции

Функция ИзменитьЛицензию(Ссылка, ПараметрыЛицензии) Экспорт
    
    СпрОбъект = Неопределено;
    
    НачатьТранзакцию();
    
    Попытка
        
        БлокировкаДанных = Новый БлокировкаДанных;
        ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.Лицензии");
        ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
        ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
        БлокировкаДанных.Заблокировать();
        
        Для Каждого ТекПараметр Из ПараметрыЛицензии Цикл
            ИзменитьРеквизит(ТекПараметр.Ключ, ПараметрыЛицензии, Ссылка, СпрОбъект);
        КонецЦикла;
        
        Если СпрОбъект <> Неопределено Тогда
            СпрОбъект.Записать();
        КонецЕсли;
        
        ЗафиксироватьТранзакцию();
                
    Исключение
        
        ОтменитьТранзакцию();
        ВызватьИсключение;
            
    КонецПопытки;
    
КонецФункции

Функция ВычислитьИспользование(Лицензия)
    
    Если Лицензия["licenseType"] = 0 Тогда
        Возврат ВычислитьПрограммноеИспользование(Лицензия);
    ИначеЕсли Лицензия["licenseType"] = 1 Тогда
        Возврат ВычислитьХаспИспользование(Лицензия);
    Иначе
        Возврат Ложь;
    КонецЕсли;
    
КонецФункции

Функция ВычислитьПрограммноеИспользование(Лицензия)
    
    maxUserCur = Лицензия["maxUserCur"];
    maxUserAll = Лицензия["maxUserAll"];
    
    Если maxUserCur = 1 И maxUserAll = 1 Тогда
        Возврат Ложь;
    ИначеЕсли maxUserCur = 1 И maxUserAll > 1 Тогда
        Возврат Ложь;
    ИначеЕсли maxUserCur > 1 И maxUserAll > 1 Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли;
    
КонецФункции

Функция ВычислитьХаспИспользование(Лицензия)
    
    net = Лицензия["net"];
    
    Если net Тогда
        Возврат ВычислитьСетевойХаспИспользование(Лицензия);
    Иначе
        Возврат Ложь;
    КонецЕсли;
    
КонецФункции

Функция ВычислитьСетевойХаспИспользование(Лицензия)
    
    issusedByServer = Лицензия["issusedByServer"];
    
    Если issusedByServer Тогда
        Возврат Истина;
    Иначе
        appId = Лицензия["appId"];
        Если appId = "1CV8C" Тогда
            Если НЕ ЗначениеЗаполнено(Лицензия["host"]) Тогда
                Возврат Истина;
            Иначе
                Возврат Ложь;
            КонецЕсли;
        ИначеЕсли appId = "WebClient" ИЛИ appId = "WebApp" Тогда
            Возврат Истина;
        ИначеЕсли appId = "MobileClient" Тогда
            Возврат Истина;
        ИначеЕсли appId = "Designer" ИЛИ appId = "Config" ИЛИ appId = "COMConnection" Тогда
            Возврат Ложь;
        КонецЕсли;
        
        Возврат Ложь;
        
    КонецЕсли;
    
КонецФункции
 
#КонецОбласти

#КонецЕсли

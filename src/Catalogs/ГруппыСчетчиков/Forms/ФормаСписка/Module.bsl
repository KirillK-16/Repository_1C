
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Если ЭтотОбъект.Параметры.Свойство("ОбнаружениеИнцидента") Тогда
        
        
        НовыйОтбор = Новый ОтборКомпоновкиДанных;
        НовЭлемент = НовыйОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
        НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
        НовЭлемент.Использование = Истина;
        НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбнаружениеИнцидентов");
        НовЭлемент.ПравоеЗначение = ЭтотОбъект.Параметры.ОбнаружениеИнцидента;
        
        КопироватьОтбор(ЭтотОбъект.Список.Отбор, НовыйОтбор);
        СохранитьОтбор(НастройкаОтбораСписка, НовыйОтбор);	
	    ЭтотОбъект.ОтборПредставление = Строка(НовыйОтбор);
        
        ЭтотОбъект.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
        ЭтотОбъект.Элементы.КодДляПоиска.Видимость = Ложь;
        ЭтотОбъект.Элементы.КодДляПоискаСписок.Видимость = Истина;
                
    КонецЕсли;
    
    ЗаполнитьТекущиеЗначения(ЭтотОбъект.УникальныйИдентификатор);
	Список.Параметры.УстановитьЗначениеПараметра("УникальныйИдентификаторФормы", ЭтотОбъект.УникальныйИдентификатор);
    
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
    
    КопироватьОтбор(ЭтотОбъект.Список.Отбор, ВыбранноеЗначение);
	СохранитьОтбор(НастройкаОтбораСписка, ВыбранноеЗначение);	
	ЭтотОбъект.ОтборПредставление = Строка(ВыбранноеЗначение);
    
    Если ЭтотОбъект.Список.Отбор.Элементы.Количество() > 0 Тогда
        ЭтотОбъект.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
        ЭтотОбъект.Элементы.КодДляПоиска.Видимость = Ложь;
        ЭтотОбъект.Элементы.КодДляПоискаСписок.Видимость = Истина;
    Иначе
        ЭтотОбъект.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
        ЭтотОбъект.Элементы.КодДляПоиска.Видимость = Истина;
        ЭтотОбъект.Элементы.КодДляПоискаСписок.Видимость = Ложь;
    КонецЕсли;
        
	ОбновитьСписок(Неопределено);
    
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
    
    Если ЗначениеЗаполнено(НастройкаОтбораСписка) И НЕ ЭтотОбъект.Параметры.Свойство("ОбнаружениеИнцидента") Тогда
        
        НовыйОтбор = ВосстановитьОтбор(НастройкаОтбораСписка);
        КопироватьОтбор(ЭтотОбъект.Список.Отбор, НовыйОтбор);
        ЭтотОбъект.ОтборПредставление = Строка(НовыйОтбор);
        
        Если ЭтотОбъект.Список.Отбор.Элементы.Количество() > 0 Тогда
            ЭтотОбъект.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
            ЭтотОбъект.Элементы.КодДляПоиска.Видимость = Ложь;
            ЭтотОбъект.Элементы.КодДляПоискаСписок.Видимость = Истина;
        Иначе
            ЭтотОбъект.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
            ЭтотОбъект.Элементы.КодДляПоиска.Видимость = Истина;
            ЭтотОбъект.Элементы.КодДляПоискаСписок.Видимость = Ложь;
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	ОбновитьСписокНаСервере(ЭтотОбъект.УникальныйИдентификатор);
	ЭтотОбъект.Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписка(Команда)
    ОткрытьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтбор(Команда)
    
    ЭтотОбъект.Список.Отбор.Элементы.Очистить();
    НастройкаОтбораСписка = "";
    ЭтотОбъект.ОтборПредставление = "";
    ЭтотОбъект.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
    ОбновитьСписок(Неопределено);
    
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЭлементы(Команда)
    
    ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьЭлементыЗакрытие", ЭтотОбъект);
    ПараметрыОткрытия = Неопределено;
    
    Если ЭтотОбъект.Элементы.Список.ТекущиеДанные <> Неопределено Тогда
        ПараметрыОткрытия = Новый Структура("КонтрольПоступленияДанных, ДопустимоеВремяОтсутствияДанных");
        ПараметрыОткрытия.КонтрольПоступленияДанных = ЭтотОбъект.Элементы.Список.ТекущиеДанные.КонтрольПоступленияДанных;
        ПараметрыОткрытия.ДопустимоеВремяОтсутствияДанных = ЭтотОбъект.Элементы.Список.ТекущиеДанные.ДопустимоеВремяОтсутствияДанных;
    КонецЕсли;
    
    ОткрытьФорму("Справочник.ГруппыСчетчиков.Форма.ФормаИзменитьЭлементы", ПараметрыОткрытия, ЭтотОбъект,,,,ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
    ОткрытьФорму("ОбщаяФорма.ФормаКонстантСтатистика");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    Если Поле.Имя = "Диаграмма" Тогда
        
        ДатаОкончания = ТекущаяДата();
        ДатаНачала = ДатаОкончания - 86400;
        ОбщийКлиент.ДиаграммаОбщаяСчетчикиПроизводительности(Элемент.ВыделенныеСтроки, ДатаНачала, ДатаОкончания, Новый УникальныйИдентификатор);
        СтандартнаяОбработка = Ложь;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтборПредставлениеНажатие(Элемент, СтандартнаяОбработка)
    
    ОткрытьОтбор();
    СтандартнаяОбработка = Ложь;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменитьЭлементыЗакрытие(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
        ИзменитьЭлементыНаСервере(РезультатЗакрытия);
        ЭтотОбъект.Элементы.Список.Обновить();
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Процедура ИзменитьЭлементыНаСервере(ПараметрыИзменения)
    
    Для Каждого Счетчик Из ЭтотОбъект.Элементы.Список.ВыделенныеСтроки Цикл
        СчетчикОбъект = Счетчик.Ссылка.ПолучитьОбъект();
        СчетчикОбъект.КонтрольПоступленияДанных = ПараметрыИзменения.КонтрольПоступленияДанных;
        СчетчикОбъект.ДопустимоеВремяОтсутствияДанных = ПараметрыИзменения.ДопустимоеВремяОтсутствияДанных;
        СчетчикОбъект.Записать();
    КонецЦикла;
    ОбновитьСписокНаСервере(ЭтотОбъект.УникальныйИдентификатор);
    
КонецПроцедуры
    
&НаСервереБезКонтекста
Процедура ЗаполнитьТекущиеЗначения(УникальныйИдентификаторФормы)
	
	ТекДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Событие КАК Счетчик,
	|	МАКСИМУМ(Период) КАК ДатаЗаписи
	|ИЗ
	|	РегистрСведений.СтатистикаНеделя
	|ГДЕ
	|	Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|СГРУППИРОВАТЬ ПО
	|	Событие
	|";
	Запрос.УстановитьПараметр("ДатаНачала", ТекДата - 120);
	Запрос.УстановитьПараметр("ДатаОкончания", ТекДата);
	
	Результат = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.ГруппыСчетчиковФормаСписка.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УникальныйИдентификаторФормы.Установить(УникальныйИдентификаторФормы);
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.Период = ТекДата;
		НовЗапись.УникальныйИдентификаторФормы = УникальныйИдентификаторФормы;
		НовЗапись.Счетчик = Выборка.Счетчик;
		НовЗапись.ДатаЗаписи = Выборка.ДатаЗаписи;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
			
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка,
	|	Родитель,
	|	ВЫБОР
	|		КОГДА КонтрольПоступленияДанных ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КонтрольПоступленияДанных 
	|ИЗ
	|	Справочник.ГруппыСчетчиков
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ
	|	СУММА(КонтрольПоступленияДанных)
	|ПО
	|	Родитель ИЕРАРХИЯ
	|";
	Результат = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.ГруппыСчетчиковФормаСпискаЕстьКонтрольПодчиненных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УникальныйИдентификаторФормы.Установить(УникальныйИдентификаторФормы);
	
	Выборка = Результат.Выбрать();
	
	ДобавленныеСчетчики = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии ИЛИ Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			Если Выборка.КонтрольПоступленияДанных > 0 Тогда
				Если ДобавленныеСчетчики[Выборка.Родитель] = Неопределено Тогда
					НовЗапись = НаборЗаписей.Добавить();
					НовЗапись.Период = ТекДата;
					НовЗапись.УникальныйИдентификаторФормы = УникальныйИдентификаторФормы;
					НовЗапись.Счетчик = Выборка.Родитель;
					НовЗапись.ЕстьКонтрольПодчиненных = Истина;
					
					ДобавленныеСчетчики.Вставить(Выборка.Родитель, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьСписокНаСервере(УникальныйИдентификаторФормы)
	ЗаполнитьТекущиеЗначения(УникальныйИдентификаторФормы);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетчикиПоказателей(ОбнаружениеИнцидентов)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   СпрПоказателиСчетчиковСчетчики.Счетчик КАК Счетчик   
    |ИЗ
    |   Справочник.ПоказателиИнцидентов КАК СпрПоказателиИнцидентов
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   Справочник.ПоказателиСчетчиков.Счетчики КАК СпрПоказателиСчетчиковСчетчики
    |ПО
    |   СпрПоказателиСчетчиковСчетчики.Ссылка = СпрПоказателиИнцидентов.Показатель
    |{ГДЕ
    |   СпрПоказателиИнцидентов.Владелец = &ОбнаружениеИнцидентов}
    |";
    
    Если ТипЗнч(ОбнаружениеИнцидентов) = Тип("СписокЗначений") Тогда
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ГДЕ
            |   СпрПоказателиИнцидентов.Владелец = &ОбнаружениеИнцидентов}",
            "ГДЕ
            |   СпрПоказателиИнцидентов.Владелец В (&ОбнаружениеИнцидентов)");
    ИначеЕсли ТипЗнч(ОбнаружениеИнцидентов) = Тип("Неопределено") Тогда        
            Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ГДЕ
            |   СпрПоказателиИнцидентов.Владелец = &ОбнаружениеИнцидентов}",
            "");
    Иначе
        Запрос.Текст = СтрЗаменить(
            Запрос.Текст,
            "{ГДЕ
            |   СпрПоказателиИнцидентов.Владелец = &ОбнаружениеИнцидентов}",
            "ГДЕ
            |   СпрПоказателиИнцидентов.Владелец = &ОбнаружениеИнцидентов");
    КонецЕсли;
    Запрос.УстановитьПараметр("ОбнаружениеИнцидентов", ОбнаружениеИнцидентов);
    
    Результат = Запрос.Выполнить();
    
    СЗнСчетчики = Новый СписокЗначений;
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
        СЗнСчетчики.Добавить(Выборка.Счетчик);
    КонецЦикла;
        
    Возврат СЗнСчетчики;
    
КонецФункции

&НаКлиенте
Процедура ОткрытьОтбор()
    
    Если ЗначениеЗаполнено(НастройкаОтбораСписка) Тогда
        СохраненныйОтбор = ВосстановитьОтбор(НастройкаОтбораСписка);
    КонецЕсли;
    
	ПараметрыОткрытия = Новый Структура("Отбор", СохраненныйОтбор);
	ОткрытьФорму("Справочник.ГруппыСчетчиков.Форма.ФормаБыстрогоОтбора", ПараметрыОткрытия, ЭтотОбъект);
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтбор(НастройкаОтбораСписка, Знач Отбор)
	
	Поток = Новый ЗаписьXML();
	Поток.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Поток, Отбор);
	НастройкаОтбораСписка = Поток.Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВосстановитьОтбор(НастройкаОтбораСписка)
	
	Поток = Новый ЧтениеXML();
	Поток.УстановитьСтроку(НастройкаОтбораСписка);
	НовыйОтбор = СериализаторXDTO.ПрочитатьXML(Поток);
	Поток.Закрыть();
	
	Возврат НовыйОтбор;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура КопироватьОтбор(ОтборПолучатель, ОтборИсточник)
    
    ОтборПолучатель.Элементы.Очистить();
    
    Для Каждого ТекЭлемент Из ОтборИсточник.Элементы Цикл
        Если ТипЗнч(ТекЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
            КопироватьЭлементОбора(ОтборПолучатель.Элементы, ТекЭлемент);
        ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
            КопироватьГруппуОбора(ОтборПолучатель.Элементы, ТекЭлемент);
        КонецЕсли;
	КонецЦикла;
        
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КопироватьЭлементОбора(ЭлементыОтбора, Элемент)
    
    НовЭлемент = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    
    Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбнаружениеИнцидентов") Тогда
        
        НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
        НовЭлемент.Использование = Элемент.Использование;
                
        Если
            Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
            ИЛИ Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
            ИЛИ Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
            ИЛИ Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии
            ИЛИ Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
            ИЛИ Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии
        Тогда
            НовЭлемент.ПравоеЗначение = Новый СписокЗначений;
            НовЭлемент.ВидСравнения = Элемент.ВидСравнения;
            Для Каждого ТекЗначение Из Элемент.ПравоеЗначение Цикл
                СЗнСчетчиков = ПолучитьСчетчикиПоказателей(ТекЗначение.Значение);
                Для Каждого ТекСчетчик Из СЗнСчетчиков Цикл
                    НовЭлемент.ПравоеЗначение.Добавить(ТекСчетчик.Значение);
                КонецЦикла;
            КонецЦикла;
        ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
            НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
            НовЭлемент.ПравоеЗначение = ПолучитьСчетчикиПоказателей(Элемент.ПравоеЗначение);
        ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
            НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
            НовЭлемент.ПравоеЗначение = ПолучитьСчетчикиПоказателей(Элемент.ПравоеЗначение);
        ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
            НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
            НовЭлемент.ПравоеЗначение = ПолучитьСчетчикиПоказателей(Неопределено);
        ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
            НовЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
            НовЭлемент.ПравоеЗначение = ПолучитьСчетчикиПоказателей(Неопределено);
        КонецЕсли;
        
    ИначеЕсли Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтрольПоступленияДанных") Тогда
        
        Если
            Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
            ИЛИ Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно
        Тогда    
            НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтрольПоступленияДанных");
            НовЭлемент.Использование = Элемент.Использование;
            НовЭлемент.ВидСравнения = Элемент.ВидСравнения;
            НовЭлемент.ПравоеЗначение = Число(Элемент.ПравоеЗначение);
        Иначе
            НовЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтрольПоступленияДанных");
            НовЭлемент.Использование = Элемент.Использование;
            НовЭлемент.ВидСравнения = Элемент.ВидСравнения;
        КонецЕсли;
        
    Иначе
        
        НовЭлемент.ЛевоеЗначение = Элемент.ЛевоеЗначение;
        НовЭлемент.Использование = Элемент.Использование;
        НовЭлемент.ВидСравнения = Элемент.ВидСравнения;
        НовЭлемент.ПравоеЗначение = Элемент.ПравоеЗначение;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КопироватьГруппуОбора(ЭлементыОтбора, ГруппаЭлементов)
    
    НовГруппа = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
    НовГруппа.Использование = ГруппаЭлементов.Использование;
    НовГруппа.ТипГруппы = ГруппаЭлементов.ТипГруппы;
    
    Для Каждого ТекЭлемент Из ГруппаЭлементов.Элементы Цикл
        Если ТипЗнч(ТекЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
            КопироватьЭлементОбора(НовГруппа.Элементы, ТекЭлемент);
        ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
            КопироватьГруппуОбора(НовГруппа.Элементы, ТекЭлемент);
        КонецЕсли;
    КонецЦикла;
        
КонецПроцедуры

#КонецОбласти



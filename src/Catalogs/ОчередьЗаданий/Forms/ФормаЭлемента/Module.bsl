
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		УстановитьПредставлениеРасписания(ЭтотОбъект);
		ПараметрыМетода = ЗначениеВСтрокуXML(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Идентификатор = Объект.Ссылка.УникальныйИдентификатор();
	
	Расписание = ТекущийОбъект.Расписание.Получить();
	УстановитьПредставлениеРасписания(ЭтотОбъект);
	
	ПараметрыМетода = ЗначениеВСтрокуXML(ТекущийОбъект.Параметры.Получить());
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Расписание = Новый ХранилищеЗначения(Расписание);
	ТекущийОбъект.Параметры = Новый ХранилищеЗначения(ЗначениеИзСтрокиXML(ПараметрыМетода));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Идентификатор = Объект.Ссылка.УникальныйИдентификатор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПредставлениеРасписанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	Если Расписание = Неопределено Тогда
		РедактируемоеРасписание = Новый РасписаниеРегламентногоЗадания;
	Иначе
		РедактируемоеРасписание = Расписание;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РедактируемоеРасписание);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредставлениеРасписанияНачалоВыбораЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРасписанияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	Расписание = Неопределено;
	Модифицированность = Истина;
	УстановитьПредставлениеРасписания(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылкаВладельцаЗаданияНажатие(Элемент, СтандартнаяОбработка)
	
	ПерейтиПоНавигационнойСсылке(Объект.НавигационнаяСсылкаВладельцаЗадания);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьСейчас(Команда)
	ВыполнитьСейчасНаСервере(Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
// Возвращает значение в виде XML-строки.
// Преобразованы в XML-строку (сериализованы) могут быть только те объекты, 
// для которых в описании указано, что они сериализуются.
//
// Параметры:
// Значение – Произвольный. Значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
// XML-строка представления значения в сериализованном виде.
//
Функция ЗначениеВСтрокуXML(Знач Значение)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

&НаСервереБезКонтекста
// Возвращает значение, полученное из XML-строки. 
// Получены из XML-строки могут быть только те объекты, 
// для которых в описании указано, что они сериализуются.
//
// Параметры:
// СтрокаXML – строка представления значения в сериализованном виде.
//
// Возвращаемое значение:
// Значение, полученное из переданной XML-строки.
//
Функция ЗначениеИзСтрокиXML(СтрокаXML)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции
	
&НаКлиенте
Процедура ПредставлениеРасписанияНачалоВыбораЗавершение(РасписаниеВыбрано, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеВыбрано <> Неопределено Тогда
		Расписание = РасписаниеВыбрано;
		Модифицированность = Истина;
		УстановитьПредставлениеРасписания(ЭтотОбъект);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Перепланирование'"), , НСтр("ru = 'Новое расписание будет учтено при
		|следующем выполнении задания'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеРасписания(Знач Форма)
	
	Расписание = Форма.Расписание;
	
	Если Расписание <> Неопределено Тогда
		Форма.ПредставлениеРасписания = Строка(Расписание);
	Иначе
		Форма.ПредставлениеРасписания = НСтр("ru = '<Не задано>'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьСейчасНаСервере(Ссылка)
	Общий.ВыполнитьЗадание(Ссылка.ИмяМетода, Ссылка.Параметры.Получить());
КонецПроцедуры

#КонецОбласти




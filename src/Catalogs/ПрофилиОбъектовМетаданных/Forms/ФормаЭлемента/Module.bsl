
&НаКлиенте
Перем ПроверкаВыполненияФоновогоЗаданияСчетчик, ДанныеФЗ, ФормаДлительнойОперации, ДатаНачалаФормирования;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьДеревоОбъектовМетаданных();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ ПараметрыЗаписи.Свойство("ОбработкаЗаполнения") Тогда
		// Если обработка заполения, то нет смысла записывать что-то в реквизиты справочника, они всё равно будут перезаписаны.
		ТекущийОбъект.ОбъектыМетаданных.Очистить();
		ТекущийОбъект.ХранилищеДереваМетаданных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("ОбъектыМетаданныхДерево"), Новый СжатиеДанных(9));
		ЭлементыДерева = ОбъектыМетаданныхДерево.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если НЕ ЭлементДерева.Флажок Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьОбъектМетаданных(ЭлементДерева, ТекущийОбъект);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	Если Модифицированность Тогда
		ПараметрыЗаписи = Новый Структура("ОбработкаЗаполнения", Истина);
		Записать(ПараметрыЗаписи);
	КонецЕсли;		
	ДатаНачалаФормирования = ТекущаяДата();
	ДанныеФЗ = ПараметрыЗаданияФоновогоЗаполнения(Объект.Ссылка, ЭтаФорма.УникальныйИдентификатор);
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ДанныеФЗ.УИДЗадания);	
	
	ПроверкаВыполненияФоновогоЗаданияСчетчик = 0;
	ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВыполненияФоновогоЗадания()
	
	ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = "Пожалуйста, подождите..." + Символы.ПС + "Длительность формирования: " + Формат(ТекущаяДата() - ДатаНачалаФормирования, "ЧН=0") + " сек.";
	РезультатПроверки = ПроверкаВыполненияФоновогоЗаданияНаСервере(ДанныеФЗ);
	Если РезультатПроверки.Состояние <> "Активно" Тогда
		Если РезультатПроверки.Состояние = "Завершено" Тогда
			ПроверкаВыполненияФоновогоЗаданияСчетчик = 0;
			ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = "Пожалуйста, подождите...";
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Прочитать();
			ЗаполнитьДеревоОбъектовМетаданных();			
        ИначеЕсли РезультатПроверки.Состояние = "Отменено" Тогда
			
		ИначеЕсли РезультатПроверки.Состояние = "Ошибка" Тогда
            ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = "Пожалуйста, подождите...";
			ВызватьИсключение(РезультатПроверки.Данные.ОписаниеОшибки);
		КонецЕсли;
	Иначе
		ПроверкаВыполненияФоновогоЗаданияСчетчик = ПроверкаВыполненияФоновогоЗаданияСчетчик + 1;
		Если ПроверкаВыполненияФоновогоЗаданияСчетчик < 5 Тогда
			ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 1, Истина);
		ИначеЕсли ПроверкаВыполненияФоновогоЗаданияСчетчик < 10 Тогда
			ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 2, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ПроверкаВыполненияФоновогоЗадания", 5, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаВыполненияФоновогоЗаданияНаСервере(Параметры)
	ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Параметры.УИДЗадания);
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Состояние", "");
	РезультатПроверки.Вставить("Данные", Новый Структура);
	
	Если ФЗ.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		РезультатПроверки.Состояние = "Активно";
	ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		РезультатПроверки.Состояние = "Завершено";
	ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
        РезультатПроверки.Состояние = "Отменено";
    ИначеЕсли ФЗ.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		РезультатПроверки.Состояние = "Ошибка";
        РезультатПроверки.Данные.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ФЗ.ИнформацияОбОшибке));
	КонецЕсли;
	
	Возврат РезультатПроверки;
    
КонецФункции



&НаСервереБезКонтекста 
Функция ПараметрыЗаданияФоновогоЗаполнения(Ссылка, УникальныйИдентификатор)
	ПараметрыЭкспортнойПроцедуры = Новый Массив;		
	ПараметрыЭкспортнойПроцедуры.Добавить(Ссылка);
	
	ПараметрыЗадания = Новый Массив;
	ИмяЭкспортнойПроцедуры = "Справочники.ПрофилиОбъектовМетаданных.ЗаполнитьПоУмолчанию";
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Задание = ФоновыеЗадания.Выполнить("Общий.ВыполнитьЗадание", ПараметрыЗадания,, ИмяЭкспортнойПроцедуры);
	
	ДанныеФЗ = Новый Структура;
	ДанныеФЗ.Вставить("УИДЗадания", Задание.УникальныйИдентификатор);
	ДанныеФЗ.Вставить("УИДФормы", УникальныйИдентификатор);
		
	Возврат ДанныеФЗ;
КонецФункции

&НаКлиенте
Процедура УстановитьВсе(Команда)
	МассивВыделенных = Элементы.ОбъектыМетаданныхДерево.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из МассивВыделенных Цикл
		ДанныеСтроки = Элементы.ОбъектыМетаданныхДерево.ДанныеСтроки(ИдентификаторСтроки);
		ДанныеСтроки.Флажок = Истина;
		УстановитьЗначениеФлажка(ДанныеСтроки, Истина);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	МассивВыделенных = Элементы.ОбъектыМетаданныхДерево.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из МассивВыделенных Цикл
		ДанныеСтроки = Элементы.ОбъектыМетаданныхДерево.ДанныеСтроки(ИдентификаторСтроки);
		ДанныеСтроки.Флажок = Ложь;
		УстановитьЗначениеФлажка(ДанныеСтроки, Ложь);	
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыМетаданныхДерево

&НаКлиенте
Процедура ОбъектыМетаданныхДеревоФлажокПриИзменении(Элемент)
	ИдентификаторСтроки = Элементы.ОбъектыМетаданныхДерево.ТекущаяСтрока;
	ДанныеСтроки = Элементы.ОбъектыМетаданныхДерево.ДанныеСтроки(ИдентификаторСтроки);
	ЗначениеФлажка = ДанныеСтроки.Флажок;
	УстановитьЗначениеФлажка(ДанныеСтроки, ЗначениеФлажка);	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеФлажка(СтрокаДерева, ЗначениеФлажка)
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ПодчиненнаяСтрока.Флажок = ЗначениеФлажка;
		УстановитьЗначениеФлажка(ПодчиненнаяСтрока, ЗначениеФлажка);		
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДеревоОбъектовМетаданных()
	РезультатДерево = Объект.Ссылка.ХранилищеДереваМетаданных.Получить();
	Если Не ЗначениеЗаполнено(РезультатДерево) Тогда
		Возврат;
	КонецЕсли;
	ЗначениеВРеквизитФормы(РезультатДерево, "ОбъектыМетаданныхДерево");
	//ТаблицаОбъектов = Объект.ОбъектыМетаданных.Выгрузить();
	//ТаблицаОбъектов.Свернуть("ОбъектМетаданных");
	//ОбъектыМетаданных = ТаблицаОбъектов.ВыгрузитьКолонку("ОбъектМетаданных");
	//Запрос = Новый Запрос(ТекстЗапросаДляЗаполненияДереваМетаданных());
	//Запрос.УстановитьПараметр("ОбъектыМетаданных", ОбъектыМетаданных);
	//РезультатДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//ЗначениеВРеквизитФормы(РезультатДерево, "ОбъектыМетаданныхДерево");   
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбъектМетаданных(СтрокаДерева, ТекущийОбъект)
	КоллекцияПодчиненных = СтрокаДерева.ПолучитьЭлементы();
	Если КоллекцияПодчиненных.Количество() Тогда
		Для Каждого ЭлементДерева Из КоллекцияПодчиненных Цикл
			Если НЕ ЭлементДерева.Флажок Тогда
				Продолжить;
			КонецЕсли;         
			ДобавитьОбъектМетаданных(ЭлементДерева, ТекущийОбъект);
		КонецЦикла;
	ИначеЕсли СтрокаДерева.Флажок Тогда
		НоваяСтрока = ТекущийОбъект.ОбъектыМетаданных.Добавить();
		НоваяСтрока.ОбъектМетаданных = СтрокаДерева.ОбъектМетаданных;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтатистику(Команда)
	ПересчитатьСтатистикуНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьСтатистикуНаСервере()
	ЦентрМониторингаИмпортСлужебный.ПересчитатьСтатистикуЗаполненияИнформационныхБаз();
КонецПроцедуры

#КонецОбласти


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Экспортные_Процедуры_и_функции

// Операция, вызываемая при обработке повторных оповещений в регламентном задании. Первоначальные оповещения отсылаются синхронно.
//
// Параметры:
//  ОповещениеСсылка - СправочникСсылка.Оповещения
//
// Возвращаемое значение:
//  РегистрСведенийКлючЗаписи.ЖурналОповещений, Неопределено - Ключ, если было сформировано оповещение
//
Функция ВыполнитьПовторноеОповещение(Знач ОповещениеСсылка, ЭтоТест = Ложь, Отправить = Истина) Экспорт
	
	Замер = ВнутренниеЗамеры.НачатьЗамер("Выполнить повторное оповещение");
    
    Если ЭтоТест Тогда
        Возврат ВыполнитьПовторноеОповещениеСлужебный(ОповещениеСсылка);
    КонецЕсли;
    
    РезультатПроверкиЗакрытия = ПроверитьОповещениеОЗакрытии(ОповещениеСсылка);
        
    Если РезультатПроверкиЗакрытия.ЕстьОповещениеОЗакрытии Тогда
        ЗаписьЖурналаОповещений = РезультатПроверкиЗакрытия.ЗаписьЖурналаОповещения;    
    Иначе
		ТекДата = ТекущаяУниверсальнаяДата();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВремяГрупповогоОповещения,
        |   ВремяПовторногоОповещения
		|ИЗ
		|	РегистрСведений.ТекущееСостояниеПовторногоОповещения
		|ГДЕ
		|	Оповещение = &Оповещение
		|";
		
		Запрос.УстановитьПараметр("Оповещение", ОповещениеСсылка);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Если Выборка.ВремяГрупповогоОповещения + ОповещениеСсылка.ПериодГруппировкиОповещений <= ТекДата Тогда
				ЗаписьЖурналаОповещений = ВыполнитьОповещениеПоГруппировке(ОповещениеСсылка);
			КонецЕсли;
            
            Если Выборка.ВремяПовторногоОповещения + ОповещениеСсылка.ПериодПовторногоОповещения <= ТекДата ИЛИ ЭтоТест Тогда
                ЗаписьЖурналаОповещенийСлужебный = ВыполнитьПовторноеОповещениеСлужебный(ОповещениеСсылка);
            КонецЕсли;
            
		КонецЕсли;   
	КонецЕсли;
	
	ВнутренниеЗамеры.ЗавершитьЗамер(Замер);
    
    Если ЗаписьЖурналаОповещенийСлужебный <> Неопределено Тогда
        ЗаписьЖурналаОповещений = ЗаписьЖурналаОповещенийСлужебный;
    КонецЕсли;
        
    Возврат ЗаписьЖурналаОповещений;
	
КонецФункции

Функция ПолучитьИнцидентыОповещения(НастройкиОтбораДляИнцидентов, МассивСтатусов = Неопределено) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	
	Если ЗначениеЗаполнено(НастройкиОтбораДляИнцидентов) Тогда
		//болванка для выборки из Спр.ВнешниеКомпоненты
		Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
		СКД = Новый СхемаКомпоновкиДанных();
		ИсточникСКД = СКД.ИсточникиДанных.Добавить();
		ИсточникСКД.Имя = "ИсточникДанных1";
		ИсточникСКД.ТипИсточникаДанных = "local";
		НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		НаборДанных.Запрос = РегистрыСведений.Инциденты.ПолучитьТекстЗапросаИнициализацииСКД(); 
		НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
		НаборДанных.Имя = "НаборДанных1";
		URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
		
		//загружаем отбор из Спр.Оповещения
		Поток = Новый ЧтениеXML();
		Поток.УстановитьСтроку(НастройкиОтбораДляИнцидентов);
		Компоновщик.ЗагрузитьНастройки(СериализаторXDTO.ПрочитатьXML(Поток));
		Поток.Закрыть();
		
		//добавляем в запрос: ГДЕ Статус В (&АктивныеСтатусы)
		Если МассивСтатусов <> Неопределено Тогда
			ФильтрСсылки = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ФильтрСсылки.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Статус");
			ФильтрСсылки.ПравоеЗначение	= МассивСтатусов;
			ФильтрСсылки.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
			ФильтрСсылки.Использование	= Истина;
		КонецЕсли;
		
		//выбираем поле "КодИнцидента" в результат 
		ГруппировкаНастроек = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("КодИнцидента");
		
		ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Статус");
        
        ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ТипИнцидента");
		
		//рендерим СКД
		ТЗ = Новый ТаблицаЗначений;
		
		Если Компоновщик.Настройки.Отбор.Элементы.Количество() <> 0 Тогда 
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
			СКД, 
			Компоновщик.Настройки,,,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
			);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
			ПроцессорВывода.УстановитьОбъект(ТЗ);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

Функция ОповеститьПользователей(Знач ИнцидентЗапись, Знач ОповещениеСсылка, Знач ЗначенияПоказателей, ЭтоТест = Ложь, Отправить = Истина, ЭтоЗакрытие = Ложь) Экспорт
	
	ПользователиДляОтправки = ПользователиДляОтправки(ОповещениеСсылка, ЭтоЗакрытие);
	
	Если ТипЗнч(ИнцидентЗапись) = Тип("ТаблицаЗначений") Тогда
		ТекстыОповещения = Новый Структура;
		Если ОповещениеСсылка.ОтдельныеШаблоныОЗакрытии И ЭтоЗакрытие Тогда
			ТекстыОповещения.Вставить("Тема", Справочники.Оповещения.ПолучитьТекстОповещения(ОповещениеСсылка.ТемаОповещенияЗакрытие, ИнцидентЗапись));
			ТекстыОповещения.Вставить("ТелоПисьма", Справочники.Оповещения.ПолучитьТекстОповещения(ОповещениеСсылка.ТекстОповещенияЗакрытие, ИнцидентЗапись));
			ТекстыОповещения.Вставить("ТелоСМС", Справочники.Оповещения.ПолучитьТекстОповещения(ОповещениеСсылка.ТекстОповещенияСмсЗакрытие, ИнцидентЗапись));
		Иначе
			ТекстыОповещения.Вставить("Тема", Справочники.Оповещения.ПолучитьТекстОповещения(ОповещениеСсылка.ТемаОповещения, ИнцидентЗапись));
			ТекстыОповещения.Вставить("ТелоПисьма", Справочники.Оповещения.ПолучитьТекстОповещения(ОповещениеСсылка.ТекстОповещения, ИнцидентЗапись));
			ТекстыОповещения.Вставить("ТелоСМС", Справочники.Оповещения.ПолучитьТекстОповещения(ОповещениеСсылка.ТекстОповещенияСмс, ИнцидентЗапись));
		КонецЕсли;
	Иначе
		ТекстыОповещения = ПолучитьТекстыОповещения(ОповещениеСсылка, ИнцидентЗапись, ЗначенияПоказателей, ЭтоТест, ЭтоЗакрытие);
	КонецЕсли;
	
	ТемаОповещения = ТекстыОповещения.Тема;
	ТекстСообщения = Новый Структура("ТелоПисьма, ТелоСМС", ТекстыОповещения.ТелоПисьма, ТекстыОповещения.ТелоСМС);
	
	ЕстьОповещение = Ложь;
	
	Для Каждого ТекПользовательДляОтправки ИЗ ПользователиДляОтправки Цикл
		ЕстьОповещениеПользователя = Оповещение.ОповеститьПользователя(
			ТемаОповещения,
			ТекстСообщения, 
			ТекПользовательДляОтправки.Ключ,
			ТекПользовательДляОтправки.Значение.ПоСмс,
			ТекПользовательДляОтправки.Значение.ПоПочте,
            ТекПользовательДляОтправки.Значение.ПоСкайпу,
            ТекПользовательДляОтправки.Значение.ПоRestAPI,
			Отправить,
			ТекПользовательДляОтправки.Значение.ОтложитьДо,
			ТекПользовательДляОтправки.Значение.НеУведомлятьУдалять,
            ОповещениеСсылка
			);
		ЕстьОповещение = ?(ЕстьОповещение, Истина, ЕстьОповещениеПользователя);
	КонецЦикла;
	
	ЗаписьЖурналаОповещения = Неопределено;
	Если ЕстьОповещение Тогда
		ЗаписьЖурналаОповещения = ЗаписатьВЖурналОповещений(ОповещениеСсылка, ТекстыОповещения, Отправить);
	КонецЕсли;
	
	Возврат ЗаписьЖурналаОповещения;
	
КонецФункции

Функция ПолучитьТекстОповещения(Знач ТекстОповещения, Инциденты, РазделительТегов = Неопределено, РазделительДанных = Неопределено, НаименованиеОповещения= "") Экспорт
	
	Если РазделительТегов = Неопределено Тогда
		РазделительТегов = Символы.ПС;
	КонецЕсли;
	
	Если РазделительДанных = Неопределено Тогда
		РазделительДанных = Символы.ПС;
	КонецЕсли;
		
	ШАПКА_НАЧАЛО = "<Шапка>";
	ШАПКА_КОНЕЦ = "</Шапка>";
	
	ТЕЛО_НАЧАЛО = "<Тело>";
	ТЕЛО_КОНЕЦ = "</Тело>";
	
	ПОДВАЛ_НАЧАЛО = "<Подвал>";
	ПОДВАЛ_КОНЕЦ = "</Подвал>";
	
	ТекстШапки = "";
	ТекстТело = "";
	ТекстПодвал = "";
	
	ИндексШапкиНачало = СтрНайти(ТекстОповещения, ШАПКА_НАЧАЛО);
	ИндексШапкиКонец = СтрНайти(ТекстОповещения, ШАПКА_КОНЕЦ);
	Если ИндексШапкиНачало > 0 И ИндексШапкиКонец > 0 Тогда
		ТекстШапки = СокрЛП(Сред(ТекстОповещения, ИндексШапкиНачало, ИндексШапкиКонец - ИндексШапкиНачало + СтрДлина(ШАПКА_КОНЕЦ)));
		ТекстОповещения = СокрЛП(СтрЗаменить(ТекстОповещения, ТекстШапки, ""));
		ТекстШапки = СтрЗаменить(ТекстШапки, ШАПКА_НАЧАЛО, "");
		ТекстШапки = СтрЗаменить(ТекстШапки, ШАПКА_КОНЕЦ, "");
	КонецЕсли;
	
	ИндексПодвалНачало = СтрНайти(ТекстОповещения, ПОДВАЛ_НАЧАЛО);
	ИндексПодвалКонец = СтрНайти(ТекстОповещения, ПОДВАЛ_КОНЕЦ);
	Если ИндексПодвалНачало > 0 И ИндексПодвалКонец > 0 Тогда
		ТекстПодвал = СокрЛП(Сред(ТекстОповещения, ИндексПодвалНачало, ИндексПодвалКонец - ИндексПодвалНачало + СтрДлина(ПОДВАЛ_КОНЕЦ)));
		ТекстОповещения = СокрЛП(СтрЗаменить(ТекстОповещения, ТекстПодвал, ""));
		ТекстПодвал = СтрЗаменить(ТекстПодвал, ПОДВАЛ_НАЧАЛО, "");
		ТекстПодвал = СтрЗаменить(ТекстПодвал, ПОДВАЛ_КОНЕЦ, "");
	КонецЕсли;
	
	ИндексТелоНачало = СтрНайти(ТекстОповещения, ТЕЛО_НАЧАЛО);
	ИндексТелоКонец = СтрНайти(ТекстОповещения, ТЕЛО_КОНЕЦ);
	Если ИндексТелоНачало > 0 И ИндексТелоКонец > 0 Тогда
		ТекстТело = СокрЛП(Сред(ТекстОповещения, ИндексТелоНачало + СтрДлина(ТЕЛО_НАЧАЛО), ИндексТелоКонец - (ИндексТелоНачало + СтрДлина(ТЕЛО_НАЧАЛО))));
	Иначе
		ТекстТело = СокрЛП(ТекстОповещения);
	КонецЕсли;
			
	Шапка = Новый ТаблицаЗначений;
	Шапка.Колонки.Добавить("ИндексТекста", Новый ОписаниеТипов("Число"));
	Шапка.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	
	ИндексыШапки = Новый Соответствие();
	
	Тело = Новый ТаблицаЗначений;
	Тело.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	
	Подвал = Новый ТаблицаЗначений;
	Подвал.Колонки.Добавить("ИндексТекста", Новый ОписаниеТипов("Число"));
	Подвал.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	
	ИндексыПодвал = Новый Соответствие();
	
	//Для Каждого ТекИнцидент Из Инциденты Цикл
	Для Каждого ТекИнцидент Из Инциденты Цикл
		// Шапка
		ТекстШапкиИнцидента = ЗаменитьШаблон(ТекИнцидент, ТекстШапки, ТекИнцидент.ПодробноеСообщение, НаименованиеОповещения);
		Если ИндексыШапки[ТекстШапкиИнцидента] = Неопределено Тогда
			ИндексыШапки.Вставить(ТекстШапкиИнцидента, ИндексыШапки.Количество());
		КонецЕсли;
		НовТекстШапка = Шапка.Добавить();
		НовТекстШапка.ИндексТекста = ИндексыШапки[ТекстШапкиИнцидента];
		НовТекстШапка.Текст = ТекстШапкиИнцидента;
		
		//Тело
		ТекстТелоИнцидента = ЗаменитьШаблон(ТекИнцидент, ТекстТело, ТекИнцидент.ПодробноеСообщение, НаименованиеОповещения);
		НовТекстТело = Тело.Добавить();
		НовТекстТело.Текст = СокрЛП(ТекстТелоИнцидента);
		
		//Подвал
		ТекстПодвалИнцидента = ЗаменитьШаблон(ТекИнцидент, ТекстПодвал, ТекИнцидент.ПодробноеСообщение, НаименованиеОповещения);
		Если ИндексыПодвал[ТекстПодвалИнцидента] = Неопределено Тогда
			ИндексыПодвал.Вставить(ТекстПодвалИнцидента, ИндексыПодвал.Количество());
		КонецЕсли;
		НовТекстПодвал = Подвал.Добавить();
		НовТекстПодвал.ИндексТекста = ИндексыПодвал[ТекстПодвалИнцидента];
		НовТекстПодвал.Текст = ТекстПодвалИнцидента;
		
	КонецЦикла;
	
	Шапка.Свернуть("ИндексТекста, Текст", "");
	Шапка.Сортировать("ИндексТекста");
	
	Подвал.Свернуть("ИндексТекста, Текст", "");
	Подвал.Сортировать("ИндексТекста");
	
	ТелоМассив = Тело.ВыгрузитьКолонку("Текст");
	ТекИндекс = ТелоМассив.ВГраница();
	Пока ТекИндекс > 0 Цикл
		Если ТелоМассив[ТекИндекс] = "" Тогда
			ТелоМассив.Удалить(ТекИндекс);
		КонецЕсли;
		ТекИндекс = ТекИндекс - 1;
	КонецЦикла;
		
	Результат = СтрСоединить(Шапка.ВыгрузитьКолонку("Текст"), РазделительДанных);
	
	РезультатТело = СтрСоединить(ТелоМассив, РазделительДанных);
	Если ЗначениеЗаполнено(РезультатТело) Тогда
		Результат = Результат + РазделительТегов + РезультатТело;
	КонецЕсли;
	
	РезультатПодвал = СтрСоединить(Подвал.ВыгрузитьКолонку("Текст"), РазделительДанных);
	Если ЗначениеЗаполнено(РезультатПодвал) Тогда
		Результат = Результат + РазделительТегов + РезультатПодвал;
	КонецЕсли;
		
	Если Прав(Результат, СтрДлина(РазделительТегов)) = РазделительТегов Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - СтрДлина(РазделительТегов));
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция ПолучитьТекстыОповещения(Оповещение, Инцидент, ЗначенияПоказателей = "", ЭтоТест = Ложь, ЭтоЗакрытие = Ложь) Экспорт
	
	ИнцидентМассив = Новый Массив;
	ИнцидентМассив.Добавить(Инцидент);
	
	Результат = Новый Структура;
	
	
	Если ЭтоЗакрытие И Оповещение.ОтдельныеШаблоныОЗакрытии Тогда
		Результат.Вставить("Тема", ПолучитьТекстОповещения(Оповещение.ТемаОповещенияЗакрытие, ИнцидентМассив,,,Оповещение.Наименование));
		Результат.Вставить("ТелоПисьма", ПолучитьТекстОповещения(Оповещение.ТекстОповещенияЗакрытие, ИнцидентМассив,,,Оповещение.Наименование));
		Результат.Вставить("ТелоСМС", ПолучитьТекстОповещения(Оповещение.ТекстОповещенияСмсЗакрытие, ИнцидентМассив,,,Оповещение.Наименование));
	Иначе
		Результат.Вставить("Тема", ПолучитьТекстОповещения(Оповещение.ТемаОповещения, ИнцидентМассив,,,Оповещение.Наименование));
		Результат.Вставить("ТелоПисьма", ПолучитьТекстОповещения(Оповещение.ТекстОповещения, ИнцидентМассив,,,Оповещение.Наименование));
		Результат.Вставить("ТелоСМС", ПолучитьТекстОповещения(Оповещение.ТекстОповещенияСмс, ИнцидентМассив,,,Оповещение.Наименование));
	КонецЕсли;
	
	Если ЭтоТест Тогда
		Результат.Тема = "ЭТО ТЕСТОВОЕ СООБЩЕНИЕ! " + Результат.Тема;
		Результат.ТелоПисьма = "ЭТО ТЕСТОВОЕ СООБЩЕНИЕ!
		|" + Результат.ТелоПисьма;
		Результат.ТелоСМС = "ЭТО ТЕСТОВОЕ СООБЩЕНИЕ!
		|" + Результат.ТелоСМС;
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

Функция ВыполненыУсловияДляИнцидента(Знач ОповещениеСсылка, Знач ЗаписьИнцидента) Экспорт
	
	//болванка для выборки из Спр.ВнешниеКомпоненты
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
	СКД = Новый СхемаКомпоновкиДанных();
	ИсточникСКД = СКД.ИсточникиДанных.Добавить();
	ИсточникСКД.Имя = "ИсточникДанных1";
	ИсточникСКД.ТипИсточникаДанных = "local";
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = РегистрыСведений.Инциденты.ПолучитьТекстЗапросаИнициализацииСКД(); 
	НаборДанных.ИсточникДанных = ИсточникСКД.Имя;
	НаборДанных.Имя = "НаборДанных1";
	URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	
	//загружаем отбор из Спр.Оповещения
	Поток = Новый ЧтениеXML();
	Поток.УстановитьСтроку(ОповещениеСсылка.НастройкиОтбораДляИнцидентов);
	Компоновщик.ЗагрузитьНастройки(СериализаторXDTO.ПрочитатьXML(Поток));
	Поток.Закрыть();
	
	// добавляем в запрос: ГДЕ КодИнцидента = &КодИнцидента
	ФильтрСсылки = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ФильтрСсылки.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ИнцидентСсылка");
	ФильтрСсылки.ПравоеЗначение	= ЗаписьИнцидента.Инцидент;
	ФильтрСсылки.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
	ФильтрСсылки.Использование	= Истина;
	
	//выбираем поле "Ссылка" в результат 
	ГруппировкаНастроек = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ИнцидентСсылка");
	
	//рендерим СКД
    ТЗ = Новый ТаблицаЗначений;
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
		СКД, 
		Компоновщик.Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
    ПроцессорВывода.УстановитьОбъект(ТЗ);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
    Возврат ТЗ.Количество() > 0;
	
КонецФункции

// Создает оповещение
// Параметры - Структура
//	- Инцидент - СправочникСсылка.Инциденты
//	- Пользователи - Массив, содержащий элементы СправочникСсылка.Пользователи
// Возвращает
//	- СправочникСсылка.Оповещения
//
Функция СоздатьОповещениеПоТипуИнцидента(Параметры) Экспорт
	Инцидент = Параметры.Инцидент;
	
	ОповещениеЭлемент = Справочники.Оповещения.СоздатьЭлемент();
	Если Инцидент <> Неопределено Тогда
		ОповещениеЭлемент.Наименование = Инцидент.ТипИнцидента;
		ОповещениеЭлемент.ОтноситсяКТипуИнцидента = Инцидент.ТипИнцидента;
	Иначе
		ОповещениеЭлемент.Наименование = Строка(Параметры.Отбор.ТипИнцидента);
		ОповещениеЭлемент.ОтноситсяКТипуИнцидента = Параметры.Отбор.ТипИнцидента;
	КонецЕсли;
	
	ТекстОповещения = Параметры.ТекстОповещения;
	Если ТипЗнч(ТекстОповещения) = Тип("Строка") Тогда
		ОповещениеЭлемент.ТемаОповещения = ТекстОповещения;
		ОповещениеЭлемент.ТекстОповещения = ТекстОповещения;
		ОповещениеЭлемент.ТекстОповещенияСмс = ТекстОповещения;
	Иначе
		ОповещениеЭлемент.ТемаОповещения = ТекстОповещения.Тема;
		ОповещениеЭлемент.ТекстОповещения = ТекстОповещения.ТелоПисьма;
		ОповещениеЭлемент.ТекстОповещенияСмс = ТекстОповещения.ТелоСМС;
	КонецЕсли;
		
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Для Каждого ТекОтбор Из Параметры.Отбор Цикл
		ЭлОтбора = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТекОтбор.Ключ);
		ЭлОтбора.ПравоеЗначение = ТекОтбор.Значение;
	КонецЦикла;
		
	Поток = Новый ЗаписьXML();
	Поток.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Поток, Компоновщик.ПолучитьНастройки());
	ОповещениеЭлемент.НастройкиОтбораДляИнцидентов = Поток.Закрыть();
	
	Пользователи = Параметры.Пользователи;
	Если Пользователи <> Неопределено Тогда
		Для Каждого Пользователь ИЗ Пользователи Цикл
			НовПолучатель = ОповещениеЭлемент.Получатели.Добавить();
			НовПолучатель.Адресат = Пользователь;
			Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.РолиПользователей") Тогда
				НовПолучатель.ПоПочте = Константы.ВыполнятьОповещениеПоПочте.Получить();
				НовПолучатель.ПоСМС = Константы.ВыполнятьОповещениеПоСМС.Получить();
			ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				НовПолучатель.ПоПочте = ЗначениеЗаполнено(Пользователь.АдресЭлектроннойПочты);
				НовПолучатель.ПоСМС = ЗначениеЗаполнено(Пользователь.НомерТелефона);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Параметры.Свойство("ИнтервалОЗакрытии", ОповещениеЭлемент.ИнтервалОЗакрытии);
	Параметры.Свойство("ПериодГруппировкиОповещений", ОповещениеЭлемент.ПериодГруппировкиОповещений);
	Расписание = новый РасписаниеРегламентногоЗадания();
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодПовтораВТечениеДня = 20;
	РасписаниеПредставление = Расписание;
	РасписаниеИспользование = Истина;
	ОповещениеЭлемент.ДополнительныеСвойства.Вставить("Расписание", Расписание);
	
	Использование = Истина;
	Если Параметры.Свойство("Использование") Тогда
		Использование = Параметры.Использование;
	КонецЕсли;
	
	ОповещениеЭлемент.ДополнительныеСвойства.Вставить("Программно", Истина);
	Если Использование Тогда
		ОповещениеЭлемент.ДополнительныеСвойства.Вставить("Использование", Истина);
		ОповещениеЭлемент.ДополнительныеСвойства.Вставить("ЗапланированныйМоментЗапуска", ТекущаяУниверсальнаяДата());
	КонецЕсли;
	
	ОповещениеЭлемент.Записать();
	
	Возврат ОповещениеЭлемент.Ссылка;
КонецФункции

Функция СссылкаПоТипуИнцидента(ТипИнцидента) Экспорт
	Ссылка = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка,
	|	НастройкиОтбораДляИнцидентов
	|ИЗ
	|	Справочник.Оповещения
	|ГДЕ
	|	ОтноситсяКТипуИнцидента = &ТипИнцидента
	|";
	Запрос.УстановитьПараметр("ТипИнцидента", ТипИнцидента);
	
	Результат = Запрос.Выполнить();
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		ПолеКомпоновкиДанныхТипИнцидента = Новый ПолеКомпоновкиДанных("ТипИнцидента");
		Пока Выборка.Следующий() Цикл
			Справочники.Оповещения.НастройкиОтбораДляИнцидентовДесериализация(Компоновщик, Выборка.НастройкиОтбораДляИнцидентов);
			Отбор = ОтборВСоответствие(Компоновщик.Настройки.Отбор);
			Если Отбор[ПолеКомпоновкиДанныхТипИнцидента] = ТипИнцидента И Отбор.Количество() = 1 Тогда
				Ссылка = Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

Функция СссылкаПоТипуИКодуИнцидента(ТипИнцидента, КодИнцидента) Экспорт
	Ссылка = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка
	|ИЗ
	|	Справочник.Оповещения
	|ГДЕ
	|	ОтноситсяКТипуИнцидента = &ТипИнцидента
	|	И Наименование = &КодИнцидента
	|";
	
	Запрос.УстановитьПараметр("ТипИнцидента", ТипИнцидента);
	Запрос.УстановитьПараметр("КодИнцидента", КодИнцидента);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

Функция НастройкиОтбораДляИнцидентовСериализация(Настройки) Экспорт
	
	Поток = Новый ЗаписьXML();
	Поток.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Поток, Настройки);
	НастройкиОтбораДляИнцидентов = Поток.Закрыть();
	
	Возврат НастройкиОтбораДляИнцидентов;
	
КонецФункции

Процедура НастройкиОтбораДляИнцидентовДесериализация(Компоновщик, НастройкиОтбораДляИнцидентов) Экспорт
	
	Поток = Новый ЧтениеXML();
	Поток.УстановитьСтроку(НастройкиОтбораДляИнцидентов);
	Компоновщик.ЗагрузитьНастройки(СериализаторXDTO.ПрочитатьXML(Поток));
	Поток.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область Служебные_Процедуры_и_функции

Функция ЗаписатьВЖурналОповещений(ОповещениеСсылка, ТекстыОповещения, Отправить = Истина)
	
	ТекДата = ТекущаяДата();
	
	МенеджерЗаписи = РегистрыСведений.ЖурналОповещений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекДата;
	МенеджерЗаписи.Оповещение = ОповещениеСсылка;
	МенеджерЗаписи.ТекстОповещения = ТекстыОповещения.ТелоПисьма;
	МенеджерЗаписи.Комментарий = "";
	МенеджерЗаписи.ОповещениеОтправлено = НЕ Отправить;
	МенеджерЗаписи.ВключитьПоказателиВТекстОповещения = Ложь;
	
	МенеджерЗаписи.Записать(Истина);
	
	ЗначениеКлюча = Новый Структура("Период, Оповещение", ТекДата, ОповещениеСсылка);
	КлючЗаписи = РегистрыСведений.ЖурналОповещений.СоздатьКлючЗаписи(ЗначениеКлюча);
	
	Возврат КлючЗаписи;
КонецФункции

Функция ЗаменитьШаблон(Инцидент, Текст, ЗначенияПоказателей, НаименованиеОповещения = "")
	ТекДата = ТекущаяДата();
    
    Если ТипЗнч(Инцидент) = Тип("РегистрСведенийМенеджерЗаписи.Инциденты") Тогда
        КодИнцидента = Инцидент.Инцидент.Наименование;
    Иначе
        КодИнцидента = Инцидент.КодИнцидента;
    КонецЕсли;
    
    Если Инцидент <> Неопределено Тогда
        НовыйТекст = ЗаменитьШаблонЗначения(Текст, "НаименованиеОповещения", НаименованиеОповещения);
		НовыйТекст = ЗаменитьШаблонДаты(НовыйТекст, "ДатаФормированияОповещения", ТекДата);
		НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "КодИнцидента", КодИнцидента);
		НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "Наименование", КодИнцидента); // для совместимости
		НовыйТекст = ЗаменитьШаблонДаты(НовыйТекст, "ДатаОткрытияИнцидента", Инцидент.ДатаОткрытияПовторная);
		НовыйТекст = ЗаменитьШаблонДаты(НовыйТекст, "ДатаЗакрытияИнцидента", Инцидент.ДатаЗакрытия);
		НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "СтатусИнцидента", Инцидент.Статус);
		НовыйТекст = ЗаменитьШаблонДаты(НовыйТекст, "ПоследнееСрабатывание", Инцидент.ПоследнееСрабатывание);
		        
        Если Инцидент.Статус = Перечисления.СтатусыИнцидентов.Закрыто ИЛИ Инцидент.Статус = Перечисления.СтатусыИнцидентов.Неактуальный Тогда
            НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "ВремяВСтатусе", ФорматДлительностьДни(Инцидент.ДатаОткрытияПовторная, Инцидент.ДатаЗакрытия));
		    НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "StatusTime", ФорматДлительностьДниEng(Инцидент.ДатаОткрытияПовторная, Инцидент.ДатаЗакрытия));
            
            НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "ВремяАктуальностиПроблемы", ФорматДлительностьДни(Инцидент.ДатаОткрытияПовторная, Инцидент.ДатаЗакрытия));
            НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "RelevanceTimeProblems", ФорматДлительностьДниEng(Инцидент.ДатаОткрытияПовторная, Инцидент.ДатаЗакрытия));
        Иначе
            НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "ВремяВСтатусе", ФорматДлительностьДни(Инцидент.ДатаОткрытияПовторная, ТекДата));
		    НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "StatusTime", ФорматДлительностьДниEng(Инцидент.ДатаОткрытияПовторная, ТекДата));
            
            НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "ВремяАктуальностиПроблемы", ФорматДлительностьДни(Инцидент.ДатаОткрытияПовторная, ТекДата));
            НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "RelevanceTimeProblems", ФорматДлительностьДниEng(Инцидент.ДатаОткрытияПовторная, ТекДата));
        КонецЕсли;
		
		НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "СообщениеИнцидента", Инцидент.ПодробноеСообщение);
		НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "Показатели", ЗначенияПоказателей);
		НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "Отправитель", ОбщийСерверПовтИсп.ИдентификаторЦКК());
		
		НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "ТипИнцидента", Инцидент.ТипИнцидента);
		НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "Кластер", Инцидент.Кластер);
		НовыйТекст = ЗаменитьШаблонЗначения(НовыйТекст, "СтрокаПодключения", Инцидент.ИнформационнаяБаза);
	КонецЕсли;
	
	Возврат НовыйТекст;
КонецФункции

Функция ФорматДлительностьДни(ДатаНачала, ДатаОкончания)
	РазницаСекунд = ДатаОкончания - ДатаНачала;
	Если РазницаСекунд < 86400 Тогда
		Если РазницаСекунд = 0 Тогда
			Возврат "1 сек";
		ИначеЕсли РазницаСекунд < 60 Тогда
			Возврат Строка(РазницаСекунд) + " сек";
		Иначе
			Возврат Формат(Дата(1,1,1) + РазницаСекунд,"ДФ='ЧЧ''ч ''мм''мин'''");
		КонецЕсли;
	ИначеЕсли РазницаСекунд >=2592000 Тогда
		Возврат "больше 30дн.";
	Иначе
		ДатаБуфер = Дата(1,1,1) + РазницаСекунд - (Цел(РазницаСекунд/86400)*86400);
		Возврат Формат(Цел(РазницаСекунд/86400), "ЧН=0") + "дн. " + Формат(ДатаБуфер,"ДФ='ЧЧ''ч ''мм''мин'''");
	КонецЕсли;
КонецФункции

Функция ФорматДлительностьДниEng(ДатаНачала, ДатаОкончания)
	РазницаСекунд = ДатаОкончания - ДатаНачала;
	Если РазницаСекунд < 86400 Тогда
		Если РазницаСекунд = 0 Тогда
			Возврат "1 s";
		ИначеЕсли РазницаСекунд < 60 Тогда
			Возврат Строка(РазницаСекунд) + " s";
		Иначе
			Возврат Формат(Дата(1,1,1) + РазницаСекунд,"ДФ='ЧЧ''h ''мм''min'''");
		КонецЕсли;
	ИначеЕсли РазницаСекунд >=2592000 Тогда
		Возврат "more 30d";
	Иначе
		ДатаБуфер = Дата(1,1,1) + РазницаСекунд - (Цел(РазницаСекунд/86400)*86400);
		Возврат Формат(Цел(РазницаСекунд/86400), "ЧН=0") + "d " + Формат(ДатаБуфер,"ДФ='ЧЧ''h ''мм''min'''");
	КонецЕсли;
КонецФункции

Функция ЗаменитьШаблонЗначения(Текст, Шаблон, Значение)
	Возврат СтрЗаменить(Текст, "[" + Шаблон + "]", Строка(Значение));
КонецФункции

Функция ЗаменитьШаблонДаты(Текст, Шаблон, Дата)
	
	ШаблонНачала = "[" + Шаблон + "=";
	
	ИндексНачала = СтрНайти(Текст, ШаблонНачала);
	Если ИндексНачала > 0 Тогда
		ИндексКрайний = СтрНайти(Текст, "]", НаправлениеПоиска.СНачала, ИндексНачала);
		ФорматДаты = Сред(Текст, ИндексНачала + СтрДлина(ШаблонНачала), ИндексКрайний - (ИндексНачала + СтрДлина(ШаблонНачала)));
		НовыйТекст = Лев(Текст, ИндексНачала -1) + Формат(Дата, "ДФ ='" + ФорматДаты + "'") + Прав(Текст, СтрДлина(Текст) - ИндексКрайний);
	Иначе
		НовыйТекст = Текст;
	КонецЕсли;
	
	Возврат НовыйТекст;
	
КонецФункции

Функция ПользователиДляОтправки(ОповещениеСсылка, ЭтоЗакрытие = Ложь)
	
	ПользователиДляОтправки = Новый Соответствие;
	
	Для Каждого Получатель Из ОповещениеСсылка.Получатели Цикл
        
        ПоПочте = Получатель.ПоПочте;
        ПоСМС = Получатель.ПоСМС;
        ПоСкайпу = Получатель.ПоСкайпу; 
        Если ТипЗнч(ОповещениеСсылка) = Тип("СправочникСсылка.ОповещенияОперативные") Тогда
            ПоRestAPI = Получатель.ПоRestAPI; 
        Иначе
            ПоRestAPI = Ложь;    
        КонецЕсли;
                    
		Если НЕ ПоПочте И НЕ ПоСМС И НЕ ПоСкайпу И НЕ ПоRestAPI Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоЗакрытие И НЕ Получатель.ОповещатьЗакрыт Тогда
			Продолжить;
		КонецЕсли;
		
		ОтложитьДо = Неопределено;
		НеУведомлятьУдалять = Ложь;
		
		Если ЗначениеЗаполнено(Получатель.НеУведомлятьС) И ЗначениеЗаполнено(Получатель.НеУведомлятьПо) Тогда
			
			Сейчас		= ТекущаяДатаСеанса();
			ПроверкаС	= Дата(2000, 1, 1, Час(Получатель.НеУведомлятьС),	Минута(Получатель.НеУведомлятьС),	Секунда(Получатель.НеУведомлятьС));
			ПроверкаПо  = Дата(2000, 1, 1, Час(Получатель.НеУведомлятьПо),	Минута(Получатель.НеУведомлятьПо),	Секунда(Получатель.НеУведомлятьПо));
			Проверка	= Дата(2000, 1, 1, Час(Сейчас),						Минута(Сейчас), 					Секунда(Сейчас));
			
			Если ПроверкаС < ПроверкаПо Тогда //диапазон не переходит через 00:00. Например: с 12:00 до 15:00
				Если Проверка >= ПроверкаС И Проверка <= ПроверкаПо Тогда
					ОтложитьДо = НачалоДня(Сейчас) + (Получатель.НеУведомлятьПо - Дата(1,1,1));
				КонецЕсли
			Иначе         // если проверка переходит через 00:00, например: с 21:00 по 08:00
				Если Проверка >= ПроверкаС ИЛИ Проверка <= ПроверкаПо Тогда
					ОтложитьДо = НачалоДня(Сейчас + 86400) + (Получатель.НеУведомлятьС - Дата(1,1,1));
				КонецЕсли;
			КонецЕсли;
			
			НеУведомлятьУдалять = Получатель.НеУведомлятьУдалять;
		КонецЕсли;
		
		Если ТипЗнч(Получатель.Адресат) = Тип("СправочникСсылка.РолиПользователей") Тогда
			ВыборкаИзРезультатаЗапроса = УправлениеЗадачами.ВыборкаРолейПользователей(Новый Структура("Роль", Получатель.Адресат));
			ВыборкаИзРезультатаЗапроса.Выбрать();
			Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
				ДобавитьПользователяДляОтправки(ПользователиДляОтправки, ВыборкаИзРезультатаЗапроса.Пользователь, ПоПочте, ПоСМС, ПоСкайпу, ПоRestAPI, ОтложитьДо, НеУведомлятьУдалять);
			КонецЦикла;
		Иначе
			ДобавитьПользователяДляОтправки(ПользователиДляОтправки, Получатель.Адресат, ПоПочте, ПоСМС, ПоСкайпу, ПоRestAPI, ОтложитьДо, НеУведомлятьУдалять);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПользователиДляОтправки;
	
КонецФункции

Процедура ДобавитьПользователяДляОтправки(ПользователиДляОтправки, Знач Пользователь, Знач ПоПочте, Знач ПоСмс, Знач ПоСкайпу, Знач ПоRestAPI, Знач ОтложитьДо, Знач НеУведомлятьУдалять)
	
	Если ПользователиДляОтправки[Пользователь] = Неопределено Тогда
		ПользователиДляОтправки.Вставить(Пользователь, Новый Структура("ПоПочте, ПоСмс, ПоСкайпу, ПоRestAPI, ОтложитьДо, НеУведомлятьУдалять", Ложь, Ложь, Ложь, Ложь, Неопределено, Ложь));
	КонецЕсли;
	
	Пользователь = ПользователиДляОтправки[Пользователь];
	Пользователь.ПоПочте = Пользователь.ПоПочте ИЛИ ПоПочте;
	Пользователь.ПоСмс = Пользователь.ПоСмс ИЛИ ПоСмс;
    Пользователь.ПоСкайпу = Пользователь.ПоСкайпу ИЛИ ПоСкайпу;
    Пользователь.ПоRestAPI = Пользователь.ПоRestAPI ИЛИ ПоRestAPI;
	Пользователь.ОтложитьДо = ОтложитьДо;
	Пользователь.НеУведомлятьУдалять = НеУведомлятьУдалять;
	
КонецПроцедуры

Функция ОтборВСоответствие(Отбор)
	
	Результат = Новый Соответствие;
	Для Каждого ТекЭлемент Из Отбор.Элементы Цикл
		Результат.Вставить(ТекЭлемент.ЛевоеЗначение, ТекЭлемент.ПравоеЗначение);
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

Функция ВыполнитьОповещениеПоГруппировке(ОповещениеСсылка)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегСвИнциденты.Инцидент КАК Инцидент,
    |	ПРЕДСТАВЛЕНИЕ(РегСвИнциденты.Инцидент) КАК КодИнцидента,
    |	РегСвИнциденты.ТипИнцидента,
    |   РегСвИнциденты.Статус,
    |	РегСвИнциденты.ПоследнееСрабатывание,
    |	РегСвИнциденты.ДатаЗакрытия,
    |	РегСвИнциденты.ЧислоСрабатываний,
    |	РегСвИнциденты.ИнформационнаяБаза,
    |	РегСвИнциденты.Кластер,
    |	РегСвИнциденты.Ответственный,
    |	РегСвИнциденты.ПодробноеСообщение,
    |	РегСвИнциденты.ДатаРеакции,
    |	РегСвИнциденты.НеОповещатьДо,
    |	РегСвИнциденты.ПроигнорироватьДо,
    |	РегСвИнциденты.ДатаОткрытияПовторная,
    |	РегСвИнциденты.ЧислоСрабатыванийПовторное
	|ИЗ
	|	РегистрСведений.ТекущееСостояниеОповещения КАК РегСвТекущееСостояние
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.Инциденты КАК РегСвИнциденты
	|ПО
	|	РегСвИнциденты.Инцидент = РегСвТекущееСостояние.Инцидент
	|ГДЕ
	|	Оповещение = &Оповещение
	|	И СформированоОповещение = ЛОЖЬ
	|";
	
	Запрос.УстановитьПараметр("Оповещение", ОповещениеСсылка);
	
	Результат = Запрос.Выполнить();
	ТЗнИнциденты = Результат.Выгрузить();
	
	Если ТЗнИнциденты.Количество() > 0 Тогда
		ЗаписьЖурналаОповещений = ОповеститьПользователей(ТЗнИнциденты, ОповещениеСсылка, "");
	КонецЕсли;
		
	ИнцидентыМассив = ТЗнИнциденты.ВыгрузитьКолонку("Инцидент");
	ИнцидентыСоответствие = Новый Соответствие;
	Для Каждого Инцидент Из ИнцидентыМассив Цикл
		ИнцидентыСоответствие.Вставить(Инцидент, Истина);
	КонецЦикла;
	
	РегистрыСведений.ТекущееСостояниеОповещения.УстановитьСформированоОповещение(ОповещениеСсылка, ИнцидентыСоответствие); 
	РегистрыСведений.ТекущееСостояниеПовторногоОповещения.УстановитьВремяГрупповогоОповещения(ОповещениеСсылка);
    
    Возврат ЗаписьЖурналаОповещений;
    
КонецФункции

Функция ВыполнитьПовторноеОповещениеСлужебный(ОповещениеСсылка)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегСвИнциденты.Инцидент,
    |	ПРЕДСТАВЛЕНИЕ(РегСвИнциденты.Инцидент) КАК КодИнцидента,
	|	РегСвИнциденты.ТипИнцидента,
	|   РегСвИнциденты.Статус,
	|	РегСвИнциденты.ПоследнееСрабатывание,
	|	РегСвИнциденты.ДатаЗакрытия,
	|	РегСвИнциденты.ЧислоСрабатываний,
	|	РегСвИнциденты.ИнформационнаяБаза,
	|	РегСвИнциденты.Кластер,
	|	РегСвИнциденты.Ответственный,
	|	РегСвИнциденты.ПодробноеСообщение,
	|	РегСвИнциденты.ДатаРеакции,
	|	РегСвИнциденты.НеОповещатьДо,
	|	РегСвИнциденты.ПроигнорироватьДо,
	|	РегСвИнциденты.ДатаОткрытияПовторная,
	|	РегСвИнциденты.ЧислоСрабатыванийПовторное
	|ИЗ
	|	РегистрСведений.ТекущееСостояниеОповещения КАК РегСвТекущееСостояние
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.Инциденты КАК РегСвИнциденты
	|ПО
	|	РегСвИнциденты.Инцидент = РегСвТекущееСостояние.Инцидент
	|	И РегСвИнциденты.Статус = &Новый
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.УровниИнцидентовПовторноеОповещение КАК РегСвУрИнцидентовПовтОповещение
	|ПО
	|	РегСвИнциденты.УровеньИнцидента = РегСвУрИнцидентовПовтОповещение.УровеньИнцидента
	|ГДЕ
	|	Оповещение = &Оповещение
	|	И СформированоОповещение = ИСТИНА
	|";
	
	Запрос.УстановитьПараметр("Оповещение", ОповещениеСсылка);
	Запрос.УстановитьПараметр("Новый", Перечисления.СтатусыИнцидентов.НовыйИнцидент);
	Запрос.УстановитьПараметр("ТекУниверДата", ТекущаяУниверсальнаяДата());
	
	Результат = Запрос.Выполнить();
	ТЗнИнциденты = Результат.Выгрузить();
    
    ЗаписьЖурналаОповещений = Неопределено;
    Если ТЗнИнциденты.Количество() > 0 Тогда
        ЗаписьЖурналаОповещений = ОповеститьПользователей(ТЗнИнциденты, ОповещениеСсылка, "");
    КонецЕсли;
    
    РегистрыСведений.ТекущееСостояниеПовторногоОповещения.УстановитьВремяПовторногоОповещения(ОповещениеСсылка);
    
    Возврат ЗаписьЖурналаОповещений;
    
КонецФункции

Функция ВыполнитьОповещениеОЗакрытии(ОповещениеСсылка)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегСвИнциденты.Инцидент,
    |	ПРЕДСТАВЛЕНИЕ(РегСвИнциденты.Инцидент) КАК КодИнцидента,
	|	РегСвИнциденты.ТипИнцидента,
	|   РегСвИнциденты.Статус,
	|	РегСвИнциденты.ПоследнееСрабатывание,
	|	РегСвИнциденты.ДатаЗакрытия,
	|	РегСвИнциденты.ЧислоСрабатываний,
	|	РегСвИнциденты.ИнформационнаяБаза,
	|	РегСвИнциденты.Кластер,
	|	РегСвИнциденты.Ответственный,
	|	РегСвИнциденты.ПодробноеСообщение,
	|	РегСвИнциденты.ДатаРеакции,
	|	РегСвИнциденты.НеОповещатьДо,
	|	РегСвИнциденты.ПроигнорироватьДо,
	|	РегСвИнциденты.ДатаОткрытияПовторная,
	|	РегСвИнциденты.ЧислоСрабатыванийПовторное
	|ИЗ
	|	РегистрСведений.ТекущееСостояниеОповещения КАК РегСвТекущееСостояние
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.Инциденты КАК РегСвИнциденты
	|ПО
	|	РегСвИнциденты.Инцидент = РегСвТекущееСостояние.Инцидент
	|ГДЕ
	|	Оповещение = &Оповещение
	|";
	
	Запрос.УстановитьПараметр("Оповещение", ОповещениеСсылка);
	
	Результат = Запрос.Выполнить();
	ТЗнИнциденты = Результат.Выгрузить();
	
	Если ТЗнИнциденты.Количество() > 0 Тогда 
		ЗаписьЖурналаОповещения = ОповеститьПользователей(ТЗнИнциденты, ОповещениеСсылка, "", Ложь, Истина, Истина);
	КонецЕсли;
		
	РегистрыСведений.ТекущееСостояниеОповещения.ЗакрытьОповещение(ОповещениеСсылка);
	РегистрыСведений.ТекущееСостояниеПовторногоОповещения.ЗакрытьОповещение(ОповещениеСсылка);
	
	Если Общий.СсылкаСуществует(ОповещениеСсылка.ИсполняющееЗадание) Тогда
		ОчередьЗаданий.ИзменитьЗадание(ОповещениеСсылка.ИсполняющееЗадание, Новый Структура("СостояниеЗадания", Перечисления.СостоянияЗаданий.НеАктивно), Истина);
	КонецЕсли;
    
    Возврат ЗаписьЖурналаОповещения;
    
КонецФункции

Функция ПроверитьОповещениеОЗакрытии(ОповещениеСсылка)
	
	ЕстьОповещениеОЗакрытии = Ложь;
    ЗаписьЖурналаОповещения = Неопределено;
	
	ТекДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|   ISNULL(МАКСИМУМ(
    |       ВЫБОР РегСвИнциденты.ДатаЗакрытия
	|   	    КОГДА &ПустаяДата ТОГДА &ТекДата
	|   	    ИНАЧЕ РегСвИнциденты.ДатаЗакрытия
	|       КОНЕЦ), &ТекДата) КАК ДатаЗакрытия
    |ИЗ
	|   РегистрСведений.ТекущееСостояниеОповещения КАК РегСвТекущееСостояние
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|   РегистрСведений.Инциденты КАК РегСвИнциденты
    |ПО
	|   РегСвИнциденты.Инцидент = РегСвТекущееСостояние.Инцидент
    |ГДЕ
	|   Оповещение = &Оповещение
    |";
	
	Запрос.УстановитьПараметр("Оповещение", ОповещениеСсылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
				
		Если Выборка.ДатаЗакрытия <> Дата(1,1,1) И Выборка.ДатаЗакрытия + ОповещениеСсылка.ИнтервалОЗакрытии < ТекДата Тогда
			ЗаписьЖурналаОповещения = ВыполнитьОповещениеОЗакрытии(ОповещениеСсылка);
			ЕстьОповещениеОЗакрытии = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("ЕстьОповещениеОЗакрытии, ЗаписьЖурналаОповещения", ЕстьОповещениеОЗакрытии, ЗаписьЖурналаОповещения);
		
КонецФункции

#КонецОбласти

#КонецЕсли
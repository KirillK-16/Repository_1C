#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПрограммныйИнтерфейс

Функция ПрочитатьНастройки(ОбъектКонтроля, ПрочитатьКеш = Ложь) Экспорт
    
    МенеджерЗаписи = СоздатьМенеджерЗаписи();
    МенеджерЗаписи.ОбъектКонтроля = ОбъектКонтроля;
    МенеджерЗаписи.Прочитать();
    
    Настройки = Новый Структура;
    
    Для Каждого ТекРеквизит Из Метаданные.РегистрыСведений.ПараметрыКластеров.Ресурсы Цикл
        Настройки.Вставить(ТекРеквизит.Имя, МенеджерЗаписи[ТекРеквизит.Имя]);
    КонецЦикла;
    
    УстановитьПривилегированныйРежим(Истина);
    Данные = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(ОбъектКонтроля);
    УстановитьПривилегированныйРежим(Ложь);
    
    Если Данные = Неопределено Тогда
        Данные = Новый Структура("АдминистраторКластера, ПарольАдминистратораКластера", "", "");
    КонецЕсли;
        
    Настройки.Вставить("АдминистраторКластера", Данные.АдминистраторКластера);
    Настройки.Вставить("ПарольАдминистратораКластера", Данные.ПарольАдминистратораКластера);
    
    Если ПрочитатьКеш Тогда
        
        Настройки.Вставить("НастройкиКеш", РегистрыСведений.ПараметрыКластеровКеш.ПрочитатьНастройки(ОбъектКонтроля));
        
    КонецЕсли;
        
    Возврат Настройки;
    
КонецФункции

// Записать настройки
//
// Параметры:
//  ОбъектКонтроля - СправочникСсылка.ОбъектыКонтроля - кластер 1С для которого записываются настройки.
//  Настройки      - Структура - структура создания с ключами:
//                                                            — ТипПодключения                - Строка, возможные значения RAS, COM.
//                                                            — АдминистраторКластера         - Строка.
//                                                            — ПарольАдминистратораКластера  - Строка.
//                                                            — АдресСервераАдминистрирования - Строка.
//                                                            — КаталогЗапускаСервераАдминистрирования - Строка.
//                                                            — ВерсияПлатформы               - СправочникСсылка.ВерсииПлатформы.
//                                                            — ПортКластера                  - Число.
//
Процедура ЗаписатьНастройки(ОбъектКонтроля, Настройки) Экспорт
    
    МенеджерЗаписи = СоздатьМенеджерЗаписи();
    МенеджерЗаписи.ОбъектКонтроля = ОбъектКонтроля;
    МенеджерЗаписи.Прочитать();
    
    МенеджерЗаписи.ОбъектКонтроля = ОбъектКонтроля;
    
    Если Настройки.Свойство("ТипПодключения") Тогда
        МенеджерЗаписи.ТипПодключения = Настройки.ТипПодключения;
    КонецЕсли;
    
    Если Настройки.Свойство("АдресСервераАдминистрирования") Тогда
        МенеджерЗаписи.АдресСервераАдминистрирования = Настройки.АдресСервераАдминистрирования;
    КонецЕсли;

    Если Настройки.Свойство("ПортСервераАдминистрирования") Тогда
        МенеджерЗаписи.ПортСервераАдминистрирования = Настройки.ПортСервераАдминистрирования;
    КонецЕсли;
    
    Если Настройки.Свойство("КаталогЗапускаСервераАдминистрирования") Тогда
        МенеджерЗаписи.КаталогЗапускаСервераАдминистрирования = Настройки.КаталогЗапускаСервераАдминистрирования;
    КонецЕсли;
    
    Если Настройки.Свойство("АдресКластера") Тогда
        МенеджерЗаписи.АдресКластера = Настройки.АдресКластера;
    КонецЕсли;
    
    Если Настройки.Свойство("ПортАгентаКластера") Тогда
        МенеджерЗаписи.ПортАгентаКластера = Настройки.ПортАгентаКластера;
    КонецЕсли;
    
    Если Настройки.Свойство("КластерОбъектаКонтроля") Тогда
        МенеджерЗаписи.КластерОбъектаКонтроля = Настройки.КластерОбъектаКонтроля;
    КонецЕсли;
        
    Если Настройки.Свойство("ПортКластера") Тогда
        МенеджерЗаписи.ПортКластера = Настройки.ПортКластера;
    КонецЕсли;
    
    Если Настройки.Свойство("ИмяКластера") Тогда
        МенеджерЗаписи.ИмяКластера = Настройки.ИмяКластера;
    КонецЕсли;
    
    Если Настройки.Свойство("ЗащищенноеСоединение") Тогда
        МенеджерЗаписи.ЗащищенноеСоединение = Настройки.ЗащищенноеСоединение;
    КонецЕсли;
    
    Если Настройки.Свойство("ИнтервалПерезапускаРабочихПроцессов") Тогда
        МенеджерЗаписи.ИнтервалПерезапускаРабочихПроцессов = Настройки.ИнтервалПерезапускаРабочихПроцессов;
    КонецЕсли;
    
    Если Настройки.Свойство("ДопустимыйОбъемПамяти") Тогда
        МенеджерЗаписи.ДопустимыйОбъемПамяти = Настройки.ДопустимыйОбъемПамяти;
    КонецЕсли;
    
    Если Настройки.Свойство("ИнтервалДопустимогоПревышенияОбъемаПамяти") Тогда
        МенеджерЗаписи.ИнтервалДопустимогоПревышенияОбъемаПамяти = Настройки.ИнтервалДопустимогоПревышенияОбъемаПамяти;
    КонецЕсли;
    
    Если Настройки.Свойство("ДопустимоеОтклонениеОшибокСервера") Тогда
        МенеджерЗаписи.ДопустимоеОтклонениеОшибокСервера = Настройки.ДопустимоеОтклонениеОшибокСервера;
    КонецЕсли;
    
    Если Настройки.Свойство("ПринудительноЗавершатьПроблемныеПроцессы") Тогда
        МенеджерЗаписи.ПринудительноЗавершатьПроблемныеПроцессы = Настройки.ПринудительноЗавершатьПроблемныеПроцессы;
    КонецЕсли;
    
    Если Настройки.Свойство("ВыключенныеПроцессыОстанавливатьЧерез") Тогда
        МенеджерЗаписи.ВыключенныеПроцессыОстанавливатьЧерез = Настройки.ВыключенныеПроцессыОстанавливатьЧерез;
    КонецЕсли;
    
    Если Настройки.Свойство("УровеньОтказоустойчивости") Тогда
        МенеджерЗаписи.УровеньОтказоустойчивости = Настройки.УровеньОтказоустойчивости;
    КонецЕсли;
    
    Если Настройки.Свойство("РежимРаспределенияНагрузки") Тогда
        МенеджерЗаписи.РежимРаспределенияНагрузки = Настройки.РежимРаспределенияНагрузки;
    КонецЕсли;
    
    Если Настройки.Свойство("Мониторинг") Тогда
        МенеджерЗаписи.Мониторинг = Настройки.Мониторинг;
    КонецЕсли;
        
    МенеджерЗаписи.Записать(Истина);
    
    УстановитьПривилегированныйРежим(Истина);
    Данные = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(ОбъектКонтроля);
    УстановитьПривилегированныйРежим(Ложь);
        
    Если Данные = Неопределено Тогда
        Данные = Новый Структура("АдминистраторКластера, ПарольАдминистратораКластера", "", "");
    КонецЕсли;
    
    ЕстьЗапись = Ложь;
    Если Настройки.Свойство("АдминистраторКластера") Тогда
        Данные.АдминистраторКластера = Настройки.АдминистраторКластера;
        ЕстьЗапись = Истина;
    КонецЕсли;
    Если Настройки.Свойство("ПарольАдминистратораКластера") Тогда
        Данные.ПарольАдминистратораКластера = Настройки.ПарольАдминистратораКластера;
        ЕстьЗапись = Истина;
    КонецЕсли;
    
    Если ЕстьЗапись Тогда
        УстановитьПривилегированныйРежим(Истина);
        РегистрыСведений.БезопасноеХранилище.ЗаписатьДанные(ОбъектКонтроля, Данные);
        УстановитьПривилегированныйРежим(Ложь);
    КонецЕсли;
    
КонецПроцедуры

Функция КонвертироватьПараметры(Параметры, Источник, Получатель) Экспорт
    
    Если Источник = Перечисления.ТипыПараметровКластер1С.RAS И Получатель = Перечисления.ТипыПараметровКластер1С.ЦКК Тогда
        Возврат ПараметрыRAS_в_ЦКК(Параметры);
    ИначеЕсли Источник = Перечисления.ТипыПараметровКластер1С.ЦКК И Получатель = Перечисления.ТипыПараметровКластер1С.АгентКИП Тогда
        Возврат ПараметрыЦКК_в_АгентКИП(Параметры);
    ИначеЕсли Источник = Перечисления.ТипыПараметровКластер1С.АгентКИП И Получатель = Перечисления.ТипыПараметровКластер1С.ЦКК Тогда
        Возврат ПараметрыАгентКИП_в_ЦКК(Параметры);
    ИначеЕсли Источник = Перечисления.ТипыПараметровКластер1С.АгентКИП И Получатель = Перечисления.ТипыПараметровКластер1С.Нода Тогда
        Возврат ПараметрыАгентКИП_в_Нода(Параметры);
    ИначеЕсли Источник = Перечисления.ТипыПараметровКластер1С.Нода И Получатель = Перечисления.ТипыПараметровКластер1С.ЦКК Тогда
        Возврат ПараметрыНода_в_ЦКК(Параметры);
    КонецЕсли;
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыRAS_в_ЦКК(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("ИдентификаторКластера", "УникальныйИдентификаторОбъекта");
    Словарь.Вставить("ИмяКомпьютера", "АдресКластера");
    Словарь.Вставить("Порт", "ПортКластера");
    Словарь.Вставить("Имя", "ИмяКластера");
    Словарь.Вставить("УровеньБезопасностиСоединений", "ЗащищенноеСоединение");
    Словарь.Вставить("ПериодПерезапускаПроцесса", "ИнтервалПерезапускаРабочихПроцессов");
    Словарь.Вставить("ОграничениеПоПамятиПроцесса", "ДопустимыйОбъемПамяти");
    Словарь.Вставить("МаксимальныйПериодПревышенияПамяти", "ИнтервалДопустимогоПревышенияОбъемаПамяти");
    Словарь.Вставить("ВремяПринудительногоЗавершения", "ВыключенныеПроцессыОстанавливатьЧерез");
    Словарь.Вставить("УровеньОтказоустойчивости", "УровеньОтказоустойчивости");
    Словарь.Вставить("РежимБалансировкиНагрузки", "РежимРаспределенияНагрузки");
    Словарь.Вставить("ДопустимоеОтклонениеОшибокСервера", "ДопустимоеОтклонениеОшибокСервера");
    Словарь.Вставить("ПринудительноЗавершатьПроблемныеПроцессы", "ПринудительноЗавершатьПроблемныеПроцессы");
    
    ПараметрыНовые = ПараметрыНовые(Параметры, Словарь);
        
    Если ПараметрыНовые["РежимРаспределенияНагрузки"] = "performance" Тогда
        ПараметрыНовые["РежимРаспределенияНагрузки"] = 0;
    Иначе
        ПараметрыНовые["РежимРаспределенияНагрузки"] = 1;
    КонецЕсли;
    
    Если ПараметрыНовые["ЗащищенноеСоединение"] = АдминистрированиеУровеньБезопасностиСоединений.Незащищенное Тогда 
        ПараметрыНовые["ЗащищенноеСоединение"] = 0;
    ИначеЕсли ПараметрыНовые["ЗащищенноеСоединение"] = АдминистрированиеУровеньБезопасностиСоединений.ЗащищенноеПриУстановкеСоединения Тогда 
        ПараметрыНовые["ЗащищенноеСоединение"] = 1;
    ИначеЕсли ПараметрыНовые["ЗащищенноеСоединение"] = АдминистрированиеУровеньБезопасностиСоединений.ЗащищенноеПриУстановкеСоединения Тогда 
        ПараметрыНовые["ЗащищенноеСоединение"] = 2;
    КонецЕсли;
    
    Если ПараметрыНовые["ДопустимоеОтклонениеОшибокСервера"] = Неопределено Тогда
        ПараметрыНовые["ДопустимоеОтклонениеОшибокСервера"] = 0;
    КонецЕсли;
    
    Если ПараметрыНовые["ПринудительноЗавершатьПроблемныеПроцессы"] = Неопределено Тогда
        ПараметрыНовые["ПринудительноЗавершатьПроблемныеПроцессы"] = Ложь;
    КонецЕсли;
    
            
    Возврат ПараметрыНовые;
    
КонецФункции

Функция ПараметрыЦКК_в_АгентКИП(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("УникальныйИдентификаторОбъекта", "uuid");
    Словарь.Вставить("АдресКластера", "host");
    Словарь.Вставить("ПортКластера", "mainPort");
    Словарь.Вставить("ИмяКластера", "name");
    Словарь.Вставить("ЗащищенноеСоединение", "securityLevel");
    Словарь.Вставить("ИнтервалПерезапускаРабочихПроцессов", "lifeTimeLimit");
    Словарь.Вставить("ДопустимыйОбъемПамяти", "maxMemorySize");
    Словарь.Вставить("ИнтервалДопустимогоПревышенияОбъемаПамяти", "maxMemoryTimeLimit");
    Словарь.Вставить("ДопустимоеОтклонениеОшибокСервера", "clusterRecyclingErrorsCountThreshold");
    Словарь.Вставить("ПринудительноЗавершатьПроблемныеПроцессы", "clusterRecyclingErrorsCountThreshold");
    Словарь.Вставить("ВыключенныеПроцессыОстанавливатьЧерез", "expirationTimeout");
    Словарь.Вставить("УровеньОтказоустойчивости", "sessionFaultToleranceLevel");
    Словарь.Вставить("РежимРаспределенияНагрузки", "loadBalancingMode");
    
    ПараметрыНовые = ПараметрыНовые(Параметры, Словарь);
    
    Если ПараметрыНовые["clusterRecyclingErrorsCountThreshold"]<> Неопределено Тогда
        
        Если ПараметрыНовые["clusterRecyclingErrorsCountThreshold"]["value"] Тогда
            ПараметрыНовые["clusterRecyclingErrorsCountThreshold"]["value"] = 1;
        Иначе
            ПараметрыНовые["clusterRecyclingErrorsCountThreshold"]["value"] = 0;
        КонецЕсли;
        
    КонецЕсли;
    
    Возврат ПараметрыНовые;
    
КонецФункции

Функция ПараметрыАгентКИП_в_ЦКК(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("uuid", "УникальныйИдентификаторОбъекта");
    Словарь.Вставить("host", "АдресКластера");
    Словарь.Вставить("mainPort", "ПортКластера");
    Словарь.Вставить("name", "ИмяКластера");
    Словарь.Вставить("securityLevel", "ЗащищенноеСоединение");
    Словарь.Вставить("lifeTimeLimit", "ИнтервалПерезапускаРабочихПроцессов");
    Словарь.Вставить("maxMemorySize", "ДопустимыйОбъемПамяти");
    Словарь.Вставить("maxMemoryTimeLimit", "ИнтервалДопустимогоПревышенияОбъемаПамяти");
    Словарь.Вставить("clusterRecyclingErrorsCountThreshold", "ДопустимоеОтклонениеОшибокСервера");
    Словарь.Вставить("clusterRecyclingKillProblemProcesses", "ПринудительноЗавершатьПроблемныеПроцессы");
    Словарь.Вставить("expirationTimeout", "ВыключенныеПроцессыОстанавливатьЧерез");
    Словарь.Вставить("sessionFaultToleranceLevel", "УровеньОтказоустойчивости");
    Словарь.Вставить("loadBalancingMode", "РежимРаспределенияНагрузки");
    
    ПараметрыНовые = ПараметрыНовые(Параметры, Словарь);
    
    Если ТипЗнч(ПараметрыНовые["ЗащищенноеСоединение"]) = Тип("Соответствие") Тогда
        
        Если ПараметрыНовые["ЗащищенноеСоединение"]["value"] = 0 Тогда
            ПараметрыНовые["ЗащищенноеСоединение"]["value"] = "выключено";
        ИначеЕсли ПараметрыНовые["ЗащищенноеСоединение"]["value"] = 1 Тогда
            ПараметрыНовые["ЗащищенноеСоединение"]["value"] = "только соединение";
        ИначеЕсли ПараметрыНовые["ЗащищенноеСоединение"]["value"] = 2 Тогда
            ПараметрыНовые["ЗащищенноеСоединение"]["value"] = "постоянно";
        КонецЕсли;
        
        Если ПараметрыНовые["ЗащищенноеСоединение"]["referenceValue"] = 0 Тогда
            ПараметрыНовые["ЗащищенноеСоединение"]["referenceValue"] = "выключено";
        ИначеЕсли ПараметрыНовые["ЗащищенноеСоединение"]["referenceValue"] = 1 Тогда
            ПараметрыНовые["ЗащищенноеСоединение"]["referenceValue"] = "только соединение";
        ИначеЕсли ПараметрыНовые["ЗащищенноеСоединение"]["referenceValue"] = 2 Тогда
            ПараметрыНовые["ЗащищенноеСоединение"]["referenceValue"] = "постоянно";
        КонецЕсли;
        
    Иначе
        
        Если ПараметрыНовые["ЗащищенноеСоединение"] = 0 Тогда
            ПараметрыНовые["ЗащищенноеСоединение"] = "выключено";
        ИначеЕсли ПараметрыНовые["ЗащищенноеСоединение"] = 1 Тогда
            ПараметрыНовые["ЗащищенноеСоединение"] = "только соединение";
        ИначеЕсли ПараметрыНовые["ЗащищенноеСоединение"] = 2 Тогда
            ПараметрыНовые["ЗащищенноеСоединение"] = "постоянно";
        КонецЕсли;
        
    КонецЕсли;
    
    
    Возврат ПараметрыНовые;
    
КонецФункции

Функция ПараметрыАгентКИП_в_Нода(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("uuid", "uuid");
    Словарь.Вставить("host", "host");
    Словарь.Вставить("mainPort", "portRmngr");
    Словарь.Вставить("name", "name");
    Словарь.Вставить("securityLevel", "securityLevel");
    Словарь.Вставить("lifeTimeLimit", "lifeTimeLimit");
    Словарь.Вставить("maxMemorySize", "maxMemorySize");
    Словарь.Вставить("maxMemoryTimeLimit", "maxMemoryTimeLimit");
    Словарь.Вставить("clusterRecyclingErrorsCountThreshold", "clusterRecyclingErrorsCountThreshold");
    Словарь.Вставить("clusterRecyclingKillProblemProcesses", "clusterRecyclingKillProblemProcesses");
    Словарь.Вставить("expirationTimeout", "expirationTimeout");
    Словарь.Вставить("sessionFaultToleranceLevel", "sessionFaultToleranceLevel");
    Словарь.Вставить("loadBalancingMode", "loadBalancingMode");
    Словарь.Вставить("typeConnection", "typeConnection");
    Словарь.Вставить("agentUUID", "agentUUID");
    Словарь.Вставить("monitoring", "monitoring");
    
    Возврат ПараметрыНовые(Параметры, Словарь);
    
КонецФункции

Функция ПараметрыНода_в_ЦКК(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("uuid", "УникальныйИдентификаторОбъекта");
    Словарь.Вставить("host", "АдресКластера");
    Словарь.Вставить("portRmngr", "ПортКластера");
    Словарь.Вставить("name", "ИмяКластера");
    Словарь.Вставить("securityLevel", "ЗащищенноеСоединение");
    Словарь.Вставить("lifeTimeLimit", "ИнтервалПерезапускаРабочихПроцессов");
    Словарь.Вставить("maxMemorySize", "ДопустимыйОбъемПамяти");
    Словарь.Вставить("maxMemoryTimeLimit", "ИнтервалДопустимогоПревышенияОбъемаПамяти");
    Словарь.Вставить("clusterRecyclingErrorsCountThreshold", "ДопустимоеОтклонениеОшибокСервера");
    Словарь.Вставить("clusterRecyclingKillProblemProcesses", "ПринудительноЗавершатьПроблемныеПроцессы");
    Словарь.Вставить("expirationTimeout", "ВыключенныеПроцессыОстанавливатьЧерез");
    Словарь.Вставить("sessionFaultToleranceLevel", "УровеньОтказоустойчивости");
    Словарь.Вставить("loadBalancingMode", "РежимРаспределенияНагрузки");
    Словарь.Вставить("typeConnection", "ТипПодключения");
    Словарь.Вставить("agentUUID", "УникальныйИдентификаторАгента");
    Словарь.Вставить("monitoring", "Мониторинг");
    
    Возврат ПараметрыНовые(Параметры, Словарь);
    
КонецФункции

Функция ПараметрыНовые(Параметры, Словарь)
    
    ПараметрыНовые = Новый Соответствие;
    Для Каждого ТекПараметр Из Параметры Цикл
        ПараметрыНовые.Вставить(Словарь[ТекПараметр.Ключ], ТекПараметр.Значение);
    КонецЦикла;
    
    Возврат ПараметрыНовые;
    
КонецФункции

#КонецОбласти

#КонецЕсли
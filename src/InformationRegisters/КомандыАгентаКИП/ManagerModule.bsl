#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет команду для агента КИП
//
// Параметры:
//  АгентКИП   - СправочникСсылка.АгентыКИП       - агент КИП, для которого добавляется команда.
//  ТипКоманды - Перечисление.ТипыКомандАгентаКИП - тип команды.
//  Команда    - Соответствие - параметры команды.
//
// Возвращаемое значение:
//   - УникальныйИдентификатор - уникальный идентификатор записи экземпляра команды.
//
Функция ДобавитьКоманду(АгентКИП, ТипКоманды, Команда) Экспорт
    
    УникальныйИдентификаторЗаписи = Новый УникальныйИдентификатор; 
    Команда.Вставить("GuidCommand", Строка(УникальныйИдентификаторЗаписи));
    
    ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, Команда);
	КомандаJSON = ЗаписьJSON.Закрыть();
    
    МенеджерЗаписи = РегистрыСведений.КомандыАгентаКИП.СоздатьМенеджерЗаписи();
    МенеджерЗаписи.Период = ТекущаяУниверсальнаяДата();
    МенеджерЗаписи.АгентКИП = АгентКИП;
    МенеджерЗаписи.СтатусКоманды = Перечисления.СтатусыКомандАгентаКИП.ГотоваКОтправке;
    МенеджерЗаписи.УникальныйИдентификаторЗаписи = УникальныйИдентификаторЗаписи;
    МенеджерЗаписи.ТипКоманды = ТипКоманды;
    МенеджерЗаписи.Команда = КомандаJSON;
    
    МенеджерЗаписи.Записать(Ложь);    
    
    Возврат УникальныйИдентификаторЗаписи; 
    
КонецФункции

// Устанавливает статус команды
//
// Параметры:
//  УникальныйИдентификаторЗаписи - УникальныйИдентификатор - уникальный идентификатор записи.
//  СтатусКоманды                 - ПеречислениеСсылка.СтатусыКомандАгентаКИП - новый статус команды.
//
Процедура УстановитьСтатусКоманды(УникальныйИдентификаторЗаписи, СтатусКоманды) Экспорт
    
    НаборЗаписей = РегистрыСведений.КомандыАгентаКИП.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.УникальныйИдентификаторЗаписи.Установить(УникальныйИдентификаторЗаписи);
    НаборЗаписей.Прочитать();
    
    Если НаборЗаписей.Количество() = 0 Тогда
        
        ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдена запись с идентификатором %1'"), УникальныйИдентификаторЗаписи);
        
    ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
        
        ТекЗапись = НаборЗаписей[0];
        ТекЗапись.СтатусКоманды = СтатусКоманды;
        
        НаборЗаписей.Записать(Истина);
        
    Иначе
        
        ВызватьИсключение СтрШаблон(НСтр("ru = 'Найден несколько записей с идентификатором %1'"), УникальныйИдентификаторЗаписи);
        
    КонецЕсли;
                
КонецПроцедуры

// Устанавливает статус и результат команды
//
// Параметры:
//  УникальныйИдентификаторЗаписи - УникальныйИдентификатор - уникальный идентификатор записи.
//  СтатусКоманды                 - ПеречислениеСсылка.СтатусыКомандАгентаКИП - новый статус команды.
//  Результат                 	  - Строка - строка-json с информацией о результатах выполнения команды.
//
Процедура УстановитьСтатусРезультатКоманды(УникальныйИдентификаторЗаписи, СтатусКоманды, Результат) Экспорт
    
    НаборЗаписей = РегистрыСведений.КомандыАгентаКИП.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.УникальныйИдентификаторЗаписи.Установить(УникальныйИдентификаторЗаписи);
    НаборЗаписей.Прочитать();
    
    Если НаборЗаписей.Количество() = 0 Тогда
        
        ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдена запись с идентификатором %1'"), УникальныйИдентификаторЗаписи);
        
    ИначеЕсли НаборЗаписей.Количество() = 1 Тогда
        
        ТекЗапись = НаборЗаписей[0];
        ТекЗапись.СтатусКоманды = СтатусКоманды;
        ТекЗапись.РезультатВыполнения = Результат;
        
        НаборЗаписей.Записать(Истина);
        
    Иначе
        
        ВызватьИсключение СтрШаблон(НСтр("ru = 'Найден несколько записей с идентификатором %1'"), УникальныйИдентификаторЗаписи);
        
    КонецЕсли;
                
КонецПроцедуры

// Возвращает сформированную ранее команду отправки и устанавливает статус "Отправлено".
//
// Параметры:
//  АгентКИП   - СправочникСсылка.АгентКИП       - агент КИП получения команды.
//  ТипКоманды - Перечисление.ТипыКомандАгентаКИП - тип команды.
//  НовыйСтатус - Перечисление.СтатусыКомандАгентаКИП - статус команды, который необходимо установить при отправке.
// 
// Возвращаемое значение:
//   - Строка - команда для агента.
//
Функция ПолучитьКомандуОтправки(АгентКИП, ТипКоманды, НовыйСтатус = Неопределено) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |   УникальныйИдентификаторЗаписи,
    |   Команда
    |ИЗ
    |   РегистрСведений.КомандыАгентаКИП
    |ГДЕ
    |   АгентКИП = &АгентКИП
    |   И ТипКоманды = &ТипКоманды
    |   И СтатусКоманды = &СтатусКоманды
    |УПОРЯДОЧИТЬ ПО
    |   Период
    |";
    
    Запрос.УстановитьПараметр("АгентКИП", АгентКИП);
    Запрос.УстановитьПараметр("ТипКоманды", ТипКоманды);
    Запрос.УстановитьПараметр("СтатусКоманды", Перечисления.СтатусыКомандАгентаКИП.ГотоваКОтправке);
    
    Результат = Запрос.Выполнить();
    
    Если НЕ Результат.Пустой() Тогда
        
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        
        КомандаАгента = Выборка.Команда;
        
        Если НовыйСтатус <> Неопределено Тогда
            УстановитьСтатусКоманды(Выборка.УникальныйИдентификаторЗаписи, НовыйСтатус);
        КонецЕсли;
                
    Иначе
        
        КомандаАгента = Неопределено;
        
    КонецЕсли;
    
    Возврат КомандаАгента;
        
КонецФункции

// Возвращает результат выполнения команды по идентификатору экземпляр команды.
//
// Параметры:
//  УникальныйИдентификаторЗаписи - УникальныйИдентификатор - уникальный идентификатор записи экземпляра команды.
//
// Возвращаемое значение:
//   - Строка - результат выполнения команды.
//
Функция РезультатВыполнения(УникальныйИдентификаторЗаписи) Экспорт
    
    РезультатВыполнения = Неопределено;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   РезультатВыполнения
    |ИЗ
    |   РегистрСведений.КомандыАгентаКИП
    |ГДЕ
    |   УникальныйИдентификаторЗаписи = &УникальныйИдентификаторЗаписи
    |   И СтатусКоманды = &СтатусКоманды 
    |";
    
    Запрос.УстановитьПараметр("УникальныйИдентификаторЗаписи", УникальныйИдентификаторЗаписи);
    Запрос.УстановитьПараметр("СтатусКоманды", Перечисления.СтатусыКомандАгентаКИП.Выполнена);
    
    Результат = Запрос.Выполнить();
    
    Если НЕ Результат.Пустой() Тогда
        
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        
        ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Выборка.РезультатВыполнения);
		РезультатВыполнения = ПрочитатьJSON(ЧтениеJSON, Истина);
        
    КонецЕсли;
    
    Возврат РезультатВыполнения;
    
КонецФункции

#КонецОбласти

#КонецЕсли
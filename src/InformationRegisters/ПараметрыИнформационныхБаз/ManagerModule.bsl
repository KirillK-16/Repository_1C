#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПрограммныйИнтерфейс

// Записать настройки
//
// Параметры:
//  ОбъектКонтроля - СправочникСсылка.ОбъектыКонтроля - информационная база для которой записываются настройки.
//  Настройки      - Структура - структура создания с ключами:
//                                                            — Кластер                - СправочникСсылка.ОбъектыКонтроля.
//                                                            — ИмяБазыВКластере       - Строка, максимальная длина 128.
//
Процедура ЗаписатьНастройки(ОбъектКонтроля, Настройки) Экспорт
    
    МенеджерЗаписи = СоздатьМенеджерЗаписи();
    МенеджерЗаписи.ОбъектКонтроля = ОбъектКонтроля;
    МенеджерЗаписи.Прочитать();
    
    ЕстьИзменения = Ложь;
    Для Каждого ТекРесурс Из Метаданные.РегистрыСведений.ПараметрыИнформационныхБаз.Ресурсы Цикл
        ЕстьИзменения = ДобавитьНастройку(МенеджерЗаписи, Настройки, ТекРесурс.Имя) ИЛИ ЕстьИзменения;
    КонецЦикла;
    
    Если ЕстьИзменения Тогда
        МенеджерЗаписи.ОбъектКонтроля = ОбъектКонтроля;
        МенеджерЗаписи.Записать(Истина);
    КонецЕсли;
    
    УстановитьПривилегированныйРежим(Истина);
    Данные = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(ОбъектКонтроля);
    УстановитьПривилегированныйРежим(Ложь);
        
    Если Данные = Неопределено Тогда
        Данные = Новый Структура("Пользователь, Пароль", "", "");
    КонецЕсли;
    
    ЕстьЗапись = Ложь;
    Если Настройки.Свойство("Пользователь") Тогда
        Данные.Пользователь = Настройки.Пользователь;
        ЕстьЗапись = Истина;
    КонецЕсли;
    Если Настройки.Свойство("Пароль") Тогда
        Данные.Пароль = Настройки.Пароль;
        ЕстьЗапись = Истина;
    КонецЕсли;
    
    Если ЕстьЗапись Тогда
        УстановитьПривилегированныйРежим(Истина);
        РегистрыСведений.БезопасноеХранилище.ЗаписатьДанные(ОбъектКонтроля, Данные);
        УстановитьПривилегированныйРежим(Ложь);
    КонецЕсли;
    
КонецПроцедуры
    
Функция ПрочитатьНастройки(ОбъектКонтроля) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ПараметрыИнформационныхБаз.СоздатьМенеджерЗаписи();
    МенеджерЗаписи.ОбъектКонтроля = ОбъектКонтроля;
    МенеджерЗаписи.Прочитать();
    
    Настройки = Новый Структура;
    Для Каждого ТекРесурс Из Метаданные.РегистрыСведений.ПараметрыИнформационныхБаз.Ресурсы Цикл
        Настройки.Вставить(ТекРесурс.Имя, МенеджерЗаписи[ТекРесурс.Имя]);
    КонецЦикла;
    
    УстановитьПривилегированныйРежим(Истина);
    Данные = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(ОбъектКонтроля);
    УстановитьПривилегированныйРежим(Ложь);
    
    Если Данные = Неопределено Тогда
        Данные = Новый Структура("Пользователь, Пароль", "", "");
    КонецЕсли;
        
    Настройки.Вставить("Пользователь", Данные.Пользователь);
    Настройки.Вставить("Пароль", Данные.Пароль);
    
    Возврат Настройки;
	
КонецФункции

// Функция - Конвертировать параметры
//
// Параметры:
//  Параметры  - Соответствие - Параметры, ключи которого будут преобразованы.
//  Источник   - Перечисление.ТипыПараметровКластер1С - Источник параметров.
//  Получатель - Перечисление.ТипыПараметровКластер1С - Получатель параметров.
// 
// Возвращаемое значение:
//   - Соответствие 
//
Функция КонвертироватьПараметры(Параметры, Источник, Получатель) Экспорт
    
    Если Источник = Перечисления.ТипыПараметровКластер1С.RAS И Получатель = Перечисления.ТипыПараметровКластер1С.ЦКК Тогда
        Возврат ПараметрыRAS_в_ЦКК(Параметры);
    ИначеЕсли Источник = Перечисления.ТипыПараметровКластер1С.АгентКИП И Получатель = Перечисления.ТипыПараметровКластер1С.Нода Тогда
        Возврат ПараметрыАгентКИП_в_Нода(Параметры);
    ИначеЕсли Источник = Перечисления.ТипыПараметровКластер1С.Нода И Получатель = Перечисления.ТипыПараметровКластер1С.ЦКК Тогда
        Возврат ПараметрыНода_в_ЦКК(Параметры);
    ИначеЕсли Источник = Перечисления.ТипыПараметровКластер1С.АгентКИП И Получатель = Перечисления.ТипыПараметровКластер1С.ЦКК Тогда
        Возврат ПараметрыАгентКИП_в_ЦКК(Параметры);
    ИначеЕсли Источник = Перечисления.ТипыПараметровКластер1С.ЦКК И Получатель = Перечисления.ТипыПараметровКластер1С.АгентКИП Тогда
        Возврат ПараметрыЦКК_в_АгентКИП(Параметры);
    КонецЕсли;
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьНастройку(МенеджерЗаписи, Настройки, Реквизит)
    
    ЕстьИзменение = Ложь;
    
    Если Настройки.Свойство(Реквизит) И МенеджерЗаписи[Реквизит] <> Настройки[Реквизит] Тогда
        МенеджерЗаписи[Реквизит] = Настройки[Реквизит];
        ЕстьИзменение = Истина;
    КонецЕсли;
    
    Возврат ЕстьИзменение;
        
КонецФункции

Функция ПараметрыRAS_в_ЦКК(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("advancedSettings", "РасширенныеНастройки");
    
    Словарь.Вставить("ИдентификаторИнформационнойБазы", "УникальныйИдентификаторОбъекта");
    Словарь.Вставить("БлокировкаРегламентныхЗаданий", "БлокировкаРегламентныхЗаданийВключена");
    Словарь.Вставить("Имя", "ИмяБазыВКластере");
    Словарь.Вставить("СерверБазДанных", "СерверБазыДанных");
    Словарь.Вставить("СУБД", "ТипСУБД");
    Словарь.Вставить("РазрешитьВыдачуЛицензий", "РазрешитьВыдачуЛицензийСервером1СПредприятия");
    Словарь.Вставить("ИмяБазыДанных", "БазаДанных");
    Словарь.Вставить("УровеньБезопасностиСоединений", "ЗащищенноеСоединение");
    Словарь.Вставить("ВключенаБлокировкаНачалаСеансов", "БлокировкаНачалаСеансовВключена");
    Словарь.Вставить("ВремяНачалаБлокировки", "БлокировкаНачалаСеансовНачало");
    Словарь.Вставить("ВремяОкончанияБлокировки", "БлокировкаНачалаСеансовКонец");
    Словарь.Вставить("СтрокаПараметровВнешнегоУправленияСеансами", "ВнешнееУправлениеСеансами");
    Словарь.Вставить("ОбязательноеИспользованиеВнешнегоУправленияСеансами", "ОбязательноеИспользованиеВнешнегоУправления");
    Словарь.Вставить("Описание", "Описание");
        
    ПараметрыНовые = ПараметрыНовые(Параметры, Словарь);
    
    ПараметрыНовые["УникальныйИдентификаторОбъекта"] = Строка(ПараметрыНовые["УникальныйИдентификаторОбъекта"]);
    
    Если ПараметрыНовые["ЗащищенноеСоединение"] = АдминистрированиеУровеньБезопасностиСоединений.Незащищенное Тогда
        ПараметрыНовые["ЗащищенноеСоединение"] = 0;
    ИначеЕсли ПараметрыНовые["ЗащищенноеСоединение"] = АдминистрированиеУровеньБезопасностиСоединений.ЗащищенноеПриУстановкеСоединения Тогда
        ПараметрыНовые["ЗащищенноеСоединение"] = 1;
    ИначеЕсли ПараметрыНовые["ЗащищенноеСоединение"] = АдминистрированиеУровеньБезопасностиСоединений.Защищенное Тогда
        ПараметрыНовые["ЗащищенноеСоединение"] = 2;
    КонецЕсли;
                      
    Возврат ПараметрыНовые;
    
КонецФункции

Функция ПараметрыАгентКИП_в_Нода(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("advancedSettings", "advancedSettings");
    Словарь.Вставить("uuid", "uuid");
    Словарь.Вставить("cluster1C", "cluster1C");
    Словарь.Вставить("name", "name");
    Словарь.Вставить("descr", "descr");
    Словарь.Вставить("securityLevel", "securityLevel");
    Словарь.Вставить("dbServerName", "dbServerName");
    Словарь.Вставить("dbms", "dbms");
    Словарь.Вставить("dbName", "dbName");
    Словарь.Вставить("licenseDistributionAllowed", "licenseDistributionAllowed");
    Словарь.Вставить("sessionsDenied", "sessionsDenied");
    Словарь.Вставить("deniedFrom", "deniedFrom");
    Словарь.Вставить("deniedTo", "deniedTo");
    Словарь.Вставить("scheduleJobsDenied", "scheduleJobsDenied");
    Словарь.Вставить("externalSessionManagerConnectionString", "externalSessionManagerConnectionString");
    Словарь.Вставить("externalSessionManagerRequired", "externalSessionManagerRequired");
    
    ПараметрыНовые = ПараметрыНовые(Параметры, Словарь);
    
    Возврат ПараметрыНовые;
    
КонецФункции

Функция ПараметрыНода_в_ЦКК(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("advancedSettings", "РасширенныеНастройки");
    Словарь.Вставить("uuid", "УникальныйИдентификаторОбъекта");
    Словарь.Вставить("cluster1C", "Кластер");
    Словарь.Вставить("name", "ИмяБазыВКластере");
    Словарь.Вставить("descr", "Описание");
    Словарь.Вставить("securityLevel", "ЗащищенноеСоединение");
    Словарь.Вставить("dbServerName", "СерверБазыДанных");
    Словарь.Вставить("dbms", "ТипСУБД");
    Словарь.Вставить("dbName", "БазаДанных");
    Словарь.Вставить("licenseDistributionAllowed", "РазрешитьВыдачуЛицензийСервером1СПредприятия");
    Словарь.Вставить("sessionsDenied", "БлокировкаНачалаСеансовВключена");
    Словарь.Вставить("deniedFrom", "БлокировкаНачалаСеансовНачало");
    Словарь.Вставить("deniedTo", "БлокировкаНачалаСеансовКонец");
    Словарь.Вставить("scheduleJobsDenied", "БлокировкаРегламентныхЗаданийВключена");
    Словарь.Вставить("externalSessionManagerConnectionString", "ВнешнееУправлениеСеансами");
    Словарь.Вставить("externalSessionManagerRequired", "ОбязательноеИспользованиеВнешнегоУправления");
        
    ПараметрыНовые = ПараметрыНовые(Параметры, Словарь);
    
    Возврат ПараметрыНовые;    
    
КонецФункции

Функция ПараметрыАгентКИП_в_ЦКК(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("advancedSettings", "РасширенныеНастройки");
    Словарь.Вставить("uuid", "УникальныйИдентификаторОбъекта");
    Словарь.Вставить("cluster1C", "Кластер");
    Словарь.Вставить("name", "ИмяБазыВКластере");
    Словарь.Вставить("descr", "Описание");
    Словарь.Вставить("securityLevel", "ЗащищенноеСоединение");
    Словарь.Вставить("dbServerName", "СерверБазыДанных");
    Словарь.Вставить("dbms", "ТипСУБД");
    Словарь.Вставить("dbName", "БазаДанных");
    Словарь.Вставить("licenseDistributionAllowed", "РазрешитьВыдачуЛицензийСервером1СПредприятия");
    Словарь.Вставить("sessionsDenied", "БлокировкаНачалаСеансовВключена");
    Словарь.Вставить("deniedFrom", "БлокировкаНачалаСеансовНачало");
    Словарь.Вставить("deniedTo", "БлокировкаНачалаСеансовКонец");
    Словарь.Вставить("scheduleJobsDenied", "БлокировкаРегламентныхЗаданийВключена");
    Словарь.Вставить("externalSessionManagerConnectionString", "ВнешнееУправлениеСеансами");
    Словарь.Вставить("externalSessionManagerRequired", "ОбязательноеИспользованиеВнешнегоУправления");
    
    ПараметрыНовые = ПараметрыНовые(Параметры, Словарь);
    
    Если ПараметрыНовые["РазрешитьВыдачуЛицензийСервером1СПредприятия"] <> Неопределено Тогда 
        
        Если ТипЗнч(ПараметрыНовые["РазрешитьВыдачуЛицензийСервером1СПредприятия"]) = Тип("Соответствие") Тогда
            
            Если ПараметрыНовые["РазрешитьВыдачуЛицензийСервером1СПредприятия"]["value"] = 1 Тогда
                ПараметрыНовые["РазрешитьВыдачуЛицензийСервером1СПредприятия"]["value"] = Истина;
            Иначе
                ПараметрыНовые["РазрешитьВыдачуЛицензийСервером1СПредприятия"]["value"] = Ложь;
            КонецЕсли;
            
            Если ПараметрыНовые["РазрешитьВыдачуЛицензийСервером1СПредприятия"]["referenceValue"] = 1 Тогда
                ПараметрыНовые["РазрешитьВыдачуЛицензийСервером1СПредприятия"]["referenceValue"] = Истина;
            Иначе
                ПараметрыНовые["РазрешитьВыдачуЛицензийСервером1СПредприятия"]["referenceValue"] = Ложь;
            КонецЕсли;
            
        Иначе
            
            Если ПараметрыНовые["РазрешитьВыдачуЛицензийСервером1СПредприятия"] = 1 Тогда
                ПараметрыНовые["РазрешитьВыдачуЛицензийСервером1СПредприятия"] = Истина;
            Иначе
                ПараметрыНовые["РазрешитьВыдачуЛицензийСервером1СПредприятия"] = Ложь;
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
    Если ПараметрыНовые["БлокировкаНачалаСеансовНачало"] <> Неопределено Тогда
        
        Если ТипЗнч(ПараметрыНовые["БлокировкаНачалаСеансовНачало"]) = Тип("Соответствие") Тогда
            
            Если ПараметрыНовые["БлокировкаНачалаСеансовНачало"]["value"] = "19700101030000" Тогда
                ПараметрыНовые["БлокировкаНачалаСеансовНачало"]["value"] = Дата(1,1,1);
            Иначе
                ПараметрыНовые["БлокировкаНачалаСеансовНачало"]["value"] = Дата(ПараметрыНовые["БлокировкаНачалаСеансовНачало"]["value"]);
            КонецЕсли;
            
            Если ПараметрыНовые["БлокировкаНачалаСеансовНачало"]["referenceValue"] = "19700101030000" Тогда
                ПараметрыНовые["БлокировкаНачалаСеансовНачало"]["referenceValue"] = Дата(1,1,1);
            Иначе
                ПараметрыНовые["БлокировкаНачалаСеансовНачало"]["referenceValue"] = Дата(ПараметрыНовые["БлокировкаНачалаСеансовНачало"]["referenceValue"]);
            КонецЕсли;
            
        Иначе
            
            Если ПараметрыНовые["БлокировкаНачалаСеансовНачало"] = "19700101030000" Тогда
                ПараметрыНовые["БлокировкаНачалаСеансовНачало"] = Дата(1,1,1);
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
    Если ПараметрыНовые["БлокировкаНачалаСеансовКонец"] <> Неопределено Тогда
        
        Если ТипЗнч(ПараметрыНовые["БлокировкаНачалаСеансовКонец"]) = Тип("Соответствие") Тогда
            
            Если ПараметрыНовые["БлокировкаНачалаСеансовКонец"]["value"] = "19700101030000" Тогда
                ПараметрыНовые["БлокировкаНачалаСеансовКонец"]["value"] = Дата(1,1,1);
            Иначе
                ПараметрыНовые["БлокировкаНачалаСеансовКонец"]["value"] = Дата(ПараметрыНовые["БлокировкаНачалаСеансовКонец"]["value"]);
            КонецЕсли;
            
            Если ПараметрыНовые["БлокировкаНачалаСеансовКонец"]["referenceValue"] = "19700101030000" Тогда
                ПараметрыНовые["БлокировкаНачалаСеансовКонец"]["referenceValue"] = Дата(1,1,1);
            Иначе
                ПараметрыНовые["БлокировкаНачалаСеансовКонец"]["referenceValue"] = Дата(ПараметрыНовые["БлокировкаНачалаСеансовКонец"]["referenceValue"]);
            КонецЕсли;
            
        Иначе
            
            Если ПараметрыНовые["БлокировкаНачалаСеансовКонец"] = "19700101030000" Тогда
                ПараметрыНовые["БлокировкаНачалаСеансовКонец"] = Дата(1,1,1);
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
    Возврат ПараметрыНовые;
    
КонецФункции

Функция ПараметрыЦКК_в_АгентКИП(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("РасширенныеНастройки", "advancedSettings");
    Словарь.Вставить("УникальныйИдентификаторОбъекта", "uuid");
    Словарь.Вставить("Кластер", "cluster1C");
    Словарь.Вставить("Наименование", "name");
    Словарь.Вставить("Описание", "descr");
    Словарь.Вставить("ЗащищенноеСоединение", "securityLevel");
    Словарь.Вставить("СерверБазыДанных", "dbServerName");
    Словарь.Вставить("ТипСУБД", "dbms");
    Словарь.Вставить("БазаДанных", "dbName");
    Словарь.Вставить("РазрешитьВыдачуЛицензийСервером1СПредприятия", "licenseDistributionAllowed");
    Словарь.Вставить("БлокировкаНачалаСеансовВключена", "sessionsDenied");
    Словарь.Вставить("БлокировкаНачалаСеансовНачало", "deniedFrom");
    Словарь.Вставить("БлокировкаНачалаСеансовКонец", "deniedTo");
    Словарь.Вставить("БлокировкаРегламентныхЗаданийВключена", "scheduleJobsDenied");
    Словарь.Вставить("ВнешнееУправлениеСеансами", "externalSessionManagerConnectionString");
    Словарь.Вставить("ОбязательноеИспользованиеВнешнегоУправления", "externalSessionManagerRequired");
    
    ПараметрыНовые = ПараметрыНовые(Параметры, Словарь);
    
    Если ПараметрыНовые["deniedFrom"] <> Неопределено И ПараметрыНовые["deniedFrom"]["value"] = Дата(1,1,1) Тогда
        ПараметрыНовые["deniedFrom"]["value"] = Дата(1970,1,1,3,0,0);
    КонецЕсли;
    
    Если ПараметрыНовые["deniedTo"] <> Неопределено И ПараметрыНовые["deniedTo"]["value"] = Дата(1,1,1) Тогда
        ПараметрыНовые["deniedTo"]["value"] = Дата(1970,1,1,3,0,0);
    КонецЕсли;
    
    Если ПараметрыНовые["licenseDistributionAllowed"] <> Неопределено Тогда
        Если ПараметрыНовые["licenseDistributionAllowed"]["value"] Тогда
            ПараметрыНовые["licenseDistributionAllowed"]["value"] = 1;
        Иначе
            ПараметрыНовые["licenseDistributionAllowed"]["value"] = 0;
        КонецЕсли;
    КонецЕсли;
    
    Возврат ПараметрыНовые;
    
КонецФункции

Функция ПараметрыНовые(Параметры, Словарь)
    
    ПараметрыНовые = Новый Соответствие;
    Для Каждого ТекПараметр Из Параметры Цикл
        ПараметрыНовые.Вставить(Словарь[ТекПараметр.Ключ], ТекПараметр.Значение);
    КонецЦикла;
    
    Возврат ПараметрыНовые;
    
КонецФункции

#КонецОбласти

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда	
	
Функция ДанныеОшибки(ИнформацияОбОшибке, НастройкиАнализа, ДатаНачала, ДатаОкончания, ДополнительныеПараметры) Экспорт
	
	ПроизводительностьКОПоВерсиям = ДополнительныеПараметры.ПроизводительностьКОПоВерсиям;
	ПроизводительностьПоИБ = ДополнительныеПараметры.ПроизводительностьКОПоИБ;
	ДанныеПоФОиКО = ДополнительныеПараметры.ДанныеПоФОиКО;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("МакетОшибки");    
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(ИнформацияОбОшибке);
	Шапка.Параметры.КлючеваяОперацияИмя = ИмяКлючевойОперации(ИнформацияОбОшибке.КлючеваяОперацияПредставление);
	ТабличныйДокумент.Вывести(Шапка);
	
	#Область ДоляУхудшения
	
	ДоляУхудшения = Макет.ПолучитьОбласть("ДоляУхудшений");
	Диаграмма = ДоляУхудшения.Рисунки.ДиаграммаУхудшений.Объект;
	Диаграмма.ИсточникДанных = Неопределено;
	Диаграмма.СерииВСтроках = Ложь;
	СерияЛучше = Диаграмма.Серии.Добавить("Стало лучше");
	СерияЛучше.Цвет = WebЦвета.ЗеленыйЛес;
	СерияБезИзменений = Диаграмма.Серии.Добавить("Без изменений");
	СерияБезИзменений.Цвет = WebЦвета.Желтый;
	СерияХуже = Диаграмма.Серии.Добавить("Стало хуже");
	СерияХуже.Цвет = WebЦвета.Красный;
	
	Точка = Диаграмма.Точки.Добавить(ИнформацияОбОшибке.ВерсияКонфигурации);
	Точка.Текст = ИнформацияОбОшибке.ВерсияКонфигурации;
	Диаграмма.УстановитьЗначение(Точка, СерияХуже, ИнформацияОбОшибке.НизкаяПроизводительность);
	Диаграмма.УстановитьЗначение(Точка, СерияБезИзменений, ИнформацияОбОшибке.БезИзменений);
	Диаграмма.УстановитьЗначение(Точка, СерияЛучше, ИнформацияОбОшибке.Улучшение);
	ДоляУхудшения.Параметры.ПериодАнализа = ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП=Истина");
	ДоляУхудшения.Параметры.ВерсияКонфигурации = ИнформацияОбОшибке.ВерсияКонфигурации;
	ТабличныйДокумент.Вывести(ДоляУхудшения);
	
	#КонецОбласти
	
	#Область ДинамикаКО
	
	ДинамикаКО = Макет.ПолучитьОбласть("ДинамикаКО");
	Диаграмма = ДинамикаКО.Рисунки.ДиаграммаКО.Объект;
	Диаграмма.ИсточникДанных = Неопределено;
	Диаграмма.СерииВСтроках = Ложь;
	СерияХуже = Диаграмма.Серии.Добавить("Стало хуже");
	СерияХуже.Цвет = WebЦвета.Красный;	
	СерияСреднее = Диаграмма.Серии.Добавить("Без изменений");
	СерияСреднее.Цвет = WebЦвета.Желтый;
	СерияЛучше = Диаграмма.Серии.Добавить("Стало лучше");
	СерияЛучше.Цвет = WebЦвета.ЗеленыйЛес;
	Для Каждого Строка Из ПроизводительностьКОПоВерсиям Цикл
		Точка = Диаграмма.Точки.Добавить(Строка.ВерсияКонфигурации);
		Точка.Текст = Строка.ВерсияКонфигурации;                      		
		Диаграмма.УстановитьЗначение(Точка, СерияХуже, Строка.Хуже);
		Диаграмма.УстановитьЗначение(Точка, СерияСреднее, Строка.БезИзменений);
		Диаграмма.УстановитьЗначение(Точка, СерияЛучше, Строка.Лучше);
	КонецЦикла;
	ДинамикаКО.Параметры.ПериодАнализа = ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП=Истина");
	ДинамикаКО.Параметры.ВерсияКонфигурации = ИнформацияОбОшибке.ВерсияКонфигурации;
	ТабличныйДокумент.Вывести(ДинамикаКО);
	
	#КонецОбласти
	
	#Область ДанныеИБ
	
	ХудшаяИнформационнаяБаза = Справочники.ИнформационныеБазы.ПустаяСсылка();
	ЗаголовокДанныеИБ = Макет.ПолучитьОбласть("ЗаголовокДанныеИБ");
	ТабличныйДокумент.Вывести(ЗаголовокДанныеИБ);
	
	// Ухудшение.	
	ШапкаДанныеИБ = Макет.ПолучитьОбласть("ШапкаДанныеИБ");
		
	УхудшениеПоИБ = ПроизводительностьПоИБ.НайтиСтроки(Новый Структура("Ухудшение", 1));
	
	Всего = УхудшениеПоИБ.Количество();
	Топ = ?(Всего > 10, 10, Всего); 
	ШапкаДанныеИБ.Параметры.Топ = Формат(Топ) + " худших";	
	ШапкаДанныеИБ.Параметры.Всего = Всего;
	ШапкаДанныеИБ.Параметры.ВерсияКонфигурации = ИнформацияОбОшибке.ВерсияКонфигурации;	
	
	ТабличныйДокумент.Вывести(ШапкаДанныеИБ);
	
	ТабличныйДокумент.НачатьГруппуСтрок();
	Выведено = 0;
	Для Каждого Строка Из УхудшениеПоИБ Цикл
		Если Выведено = 0 Тогда
			ХудшаяИнформационнаяБаза = Строка.ИнформационнаяБаза;
		КонецЕсли;
		Выведено = Выведено + 1;
		СтрокаДанныеИБ = Макет.ПолучитьОбласть("СтрокаДанныеИБ");
		СтрокаДанныеИБ.Параметры.Заполнить(Строка);
		ТабличныйДокумент.Вывести(СтрокаДанныеИБ);
		Если Выведено >= Топ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;                                   	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
	// Без изменений.	
	ШапкаДанныеИБ = Макет.ПолучитьОбласть("ШапкаДанныеИБ");
		
	БезИзмененийПоИБ = ПроизводительностьПоИБ.НайтиСтроки(Новый Структура("БезИзменений", 1));
	
	Всего = БезИзмененийПоИБ.Количество();
	Топ = ?(Всего > 10, 10, Всего); 
	ШапкаДанныеИБ.Параметры.Топ = Формат(Топ) + " без изменений";	
	ШапкаДанныеИБ.Параметры.Всего = Всего;
	ШапкаДанныеИБ.Параметры.ВерсияКонфигурации = ИнформацияОбОшибке.ВерсияКонфигурации;	
	
	ТабличныйДокумент.Вывести(ШапкаДанныеИБ);
	
	ТабличныйДокумент.НачатьГруппуСтрок();
	Выведено = 0;
	Для Каждого Строка Из БезИзмененийПоИБ Цикл
		Выведено = Выведено + 1;
		СтрокаДанныеИБ = Макет.ПолучитьОбласть("СтрокаДанныеИБ");
		СтрокаДанныеИБ.Параметры.Заполнить(Строка);
		ТабличныйДокумент.Вывести(СтрокаДанныеИБ);
		Если Выведено >= Топ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;                                   	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
	// Улучшение.
	
	ШапкаДанныеИБ = Макет.ПолучитьОбласть("ШапкаДанныеИБ");    	
		
	УлучшениеПоИБ = ПроизводительностьПоИБ.НайтиСтроки(Новый Структура("Улучшение", 1));
	
	Всего = УлучшениеПоИБ.Количество();
	Топ = ?(Всего > 10, 10, Всего); 
	ШапкаДанныеИБ.Параметры.Топ = Формат(Топ) + " лучших";	
	ШапкаДанныеИБ.Параметры.Всего = Всего;
	ШапкаДанныеИБ.Параметры.ВерсияКонфигурации = ИнформацияОбОшибке.ВерсияКонфигурации;	
	ТабличныйДокумент.Вывести(ШапкаДанныеИБ);
	
	ТабличныйДокумент.НачатьГруппуСтрок();
	Выведено = 0;
	Для Каждого Строка Из УлучшениеПоИБ Цикл
		Выведено = Выведено + 1;
		СтрокаДанныеИБ = Макет.ПолучитьОбласть("СтрокаДанныеИБ");
		СтрокаДанныеИБ.Параметры.Заполнить(Строка);
		ТабличныйДокумент.Вывести(СтрокаДанныеИБ);
		Если Выведено >= Топ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;                                   	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
	#КонецОбласти
	
	#Область ВремяВыполнения
	
	ШапкаВремяВыполнения = Макет.ПолучитьОбласть("ШапкаВремяВыполнения");
	ТабличныйДокумент.Вывести(ШапкаВремяВыполнения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВремяВыполнения(ДатаНачала, ДатаОкончания);
	Если НастройкиАнализа.Статусы.Количество() Тогда
		Запрос.УстановитьПараметр("Статус", НастройкиАнализа.Статусы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГДЕ ДопУсловия","ГДЕ НЕ СтатусИнформационнойБазы.Статус ЕСТЬ NULL");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//СоединениеСтатусы", "				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусИнформационнойБазы КАК СтатусИнформационнойБазы
	        |				ПО Замеры.ИнформационнаяБаза = СтатусИнформационнойБазы.ИнформационнаяБаза
	        |					И (СтатусИнформационнойБазы.Статус В (&Статус))");
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Конфигурация", ИнформацияОбОшибке.Конфигурация);
	Запрос.УстановитьПараметр("ВерсияКонфигурации", ИнформацияОбОшибке.ВерсияКонфигурации);
	Запрос.УстановитьПараметр("КлючеваяОперация", ИнформацияОбОшибке.КлючеваяОперация);
	
	ВыборкаВремяВыполнения = Запрос.Выполнить().Выбрать();
	
	РаспределениеЗамеров = Макет.ПолучитьОбласть("РаспределениеЗамеров");
	Диаграмма = РаспределениеЗамеров.Рисунки.ДиаграммаВремени.Объект;
	Диаграмма.ИсточникДанных = Неопределено;
 	Диаграмма.СерииВСтроках = Ложь;
	Серия = Диаграмма.Серии.Добавить("Количество замеров");
		
	ТабличныйДокумент.НачатьГруппуСтрок(, Ложь);
	Пока ВыборкаВремяВыполнения.Следующий() Цикл
		СтрокаВремяВыполнения = Макет.ПолучитьОбласть("СтрокаВремяВыполнения");
		СтрокаВремяВыполнения.Параметры.Заполнить(ВыборкаВремяВыполнения);
		Точка = Диаграмма.Точки.Добавить(Формат(ВыборкаВремяВыполнения.ВремяВыполнения,"ЧГ="));
		Диаграмма.УстановитьЗначение(Точка, Серия, ВыборкаВремяВыполнения.КоличествоОпераций);
		ТабличныйДокумент.Вывести(СтрокаВремяВыполнения);
	КонецЦикла;
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
	ТабличныйДокумент.Вывести(РаспределениеЗамеров);
		
	#КонецОбласти
	
	Если ЗначениеЗаполнено(ХудшаяИнформационнаяБаза) Тогда
		
		#Область ПроизводительностьХудшей
		ШаблонЗаголовкаТочки = "%1; Замеров: %2"; // APDEX: ";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаВремяВыполненияХудшейПоВерсиям();
		Запрос.УстановитьПараметр("КлючеваяОперация", ИнформацияОбОшибке.КлючеваяОперация);
		Запрос.УстановитьПараметр("ИнформационнаяБаза", ХудшаяИнформационнаяБаза);
		Запрос.УстановитьПараметр("ДатаНачала", ДобавитьМесяц(ДатаОкончания,-12));
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Запрос.УстановитьПараметр("Конфигурация", ИнформацияОбОшибке.Конфигурация);
		Запрос.УстановитьПараметр("ЦелевоеВремя", ИнформацияОбОшибке.ЦелевоеВремя);
		ВыборкаПроизводительностьХудшей = Запрос.Выполнить().Выбрать();
		
		ПроизводительностьХудшей = Макет.ПолучитьОбласть("ПроизводительностьХудшей");
		Диаграмма = ПроизводительностьХудшей.Рисунки.ДиаграммаВерсий.Объект;
		Диаграмма.ИсточникДанных = Неопределено;
	 	Диаграмма.СерииВСтроках = Ложь;
		Серия = Диаграмма.Серии.Добавить("APDEX");
		Серия.Текст = "";
		Пока ВыборкаПроизводительностьХудшей.Следующий() Цикл
			Точка = Диаграмма.Точки.Добавить(Формат(ВыборкаПроизводительностьХудшей.ВерсияКонфигурации,"ЧГ="));
			Точка.Цвет = ЦветAPDEX(ВыборкаПроизводительностьХудшей.APDEX);
			Точка.ПриоритетЦвета = Истина;
			Точка.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаТочки, ВыборкаПроизводительностьХудшей.ВерсияКонфигурации, ВыборкаПроизводительностьХудшей.КоличествоОпераций);
			Диаграмма.УстановитьЗначение(Точка, Серия, ВыборкаПроизводительностьХудшей.APDEX);
		КонецЦикла;
		ТабличныйДокумент.Вывести(ПроизводительностьХудшей);		
		
	    #КонецОбласти
		
		#Область МетаданныеИБ
		
		ШапкаМетаданныеИБ = Макет.ПолучитьОбласть("ШапкаМетаданныеИБ");
		ТабличныйДокумент.Вывести(ШапкаМетаданныеИБ);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаОбъектыМетаданных();
		Запрос.УстановитьПараметр("Конфигурация", ИнформацияОбОшибке.Конфигурация);
		Запрос.УстановитьПараметр("ИнформационнаяБаза", ХудшаяИнформационнаяБаза);
		ВыборкаМетаданныеИБ = Запрос.Выполнить().Выбрать();
		
		ТабличныйДокумент.НачатьГруппуСтрок(, Ложь);
		Пока ВыборкаМетаданныеИБ.Следующий() Цикл
			СтрокаМетаданныеИБ = Макет.ПолучитьОбласть("СтрокаМетаданныеИБ");
			СтрокаМетаданныеИБ.Параметры.Заполнить(ВыборкаМетаданныеИБ);
			ТабличныйДокумент.Вывести(СтрокаМетаданныеИБ);
		КонецЦикла;
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
		
		#КонецОбласти
		
		#Область ФункциональныеОпции
		
		// По худшей базе.
		ШапкаФО = Макет.ПолучитьОбласть("ШапкаФО");
		ТабличныйДокумент.Вывести(ШапкаФО);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаФункциональныеОпции();
		Запрос.УстановитьПараметр("ИнформационнаяБаза", ХудшаяИнформационнаяБаза);
		ВыборкаФО = Запрос.Выполнить().Выбрать();
		
		ТабличныйДокумент.НачатьГруппуСтрок(, Ложь);
		Пока ВыборкаФО.Следующий() Цикл
			СтрокаФО = Макет.ПолучитьОбласть("СтрокаФО");
			СтрокаФО.Параметры.Заполнить(ВыборкаФО);
			ТабличныйДокумент.Вывести(СтрокаФО);
		КонецЦикла;
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
		
		// Сравнение ФО.
		// Общие и различные для Худших, лучших и не изменившихся.		
		
		// Ухудшение.
		ВывестиСравнениеФункциональныхОпций(ТабличныйДокумент, Макет, ДанныеПоФОиКО, "Ухудшение", ИнформацияОбОшибке.НизкаяПроизводительность);
		// Без изменений.
		ВывестиСравнениеФункциональныхОпций(ТабличныйДокумент, Макет, ДанныеПоФОиКО, "БезИзменений", ИнформацияОбОшибке.БезИзменений);
		// Улучшение.
		ВывестиСравнениеФункциональныхОпций(ТабличныйДокумент, Макет, ДанныеПоФОиКО, "Улучшение", ИнформацияОбОшибке.Улучшение);
		
		#КонецОбласти
			
		Запрос = Новый Запрос(ТекстЗапросаДаннеОбОкружении());
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Запрос.УстановитьПараметр("Конфигурация", ИнформацияОбОшибке.Конфигурация);
		Запрос.УстановитьПараметр("ВерсияКонфигурации", ИнформацияОбОшибке.ВерсияКонфигурации);
		Запрос.УстановитьПараметр("ИнформационнаяБаза", ХудшаяИнформационнаяБаза);
		ВыборкаДанныеОбОкружении = Запрос.Выполнить().Выбрать();
		
		ДанныеОбОкружении = Макет.ПолучитьОбласть("ДанныеОбОкружении");
		Если ВыборкаДанныеОбОкружении.Следующий() Тогда
			ДанныеОбОкружении.Параметры.Заполнить(ВыборкаДанныеОбОкружении);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ДанныеОбОкружении);
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
КонецФункции

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаВремяВыполнения(ДатаНачала, ДатаОкончания)
	ТекстЗапроса = Общий.ТекстЗапросаПериодов(ДатаНачала, ДатаОкончания, "День");
    ТекстЗапроса = ТекстЗапроса + ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Замеры.ВремяВыполнения КАК ВремяВыполнения,
	|	СУММА(Замеры.КоличествоОпераций) КАК КоличествоОпераций
	|ИЗ
	|	Периоды КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияИсторияПодробно КАК ИнформацияИстория
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗамерыВремениЦентрМониторинга КАК Замеры
	|				//СоединениеСтатусы
	|			ПО (Замеры.Период = ИнформацияИстория.ПериодЗаписи)
	|				И (Замеры.ИнформационнаяБаза = ИнформацияИстория.ИнформационнаяБаза)
	|				И (Замеры.КлючеваяОперация = &КлючеваяОперация)
	|		ПО (ИнформацияИстория.ПериодЗаписи = Периоды.Период)
	|			И (ИнформацияИстория.Конфигурация = &Конфигурация)
	|			И (ИнформацияИстория.ВерсияКонфигурации = &ВерсияКонфигурации)
	|//ГДЕ ДопУсловия
	|
	|СГРУППИРОВАТЬ ПО
	|	Замеры.ВремяВыполнения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяВыполнения";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаОбъектыМетаданных()
	Возврат "ВЫБРАТЬ
	        |	ПрофилиОбъектовМетаданныхОбъектыМетаданных.ОбъектМетаданных КАК ОбъектМетаданных
	        |ПОМЕСТИТЬ ВТ_ОбъектыПрофиля
	        |ИЗ
	        |	Справочник.ПрофилиОбъектовМетаданных.ОбъектыМетаданных КАК ПрофилиОбъектовМетаданныхОбъектыМетаданных
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиОбъектовМетаданных.Конфигурации КАК ПрофилиОбъектовМетаданныхКонфигурации
	        |		ПО ПрофилиОбъектовМетаданныхОбъектыМетаданных.Ссылка = ПрофилиОбъектовМетаданныхКонфигурации.Ссылка
	        |			И (ПрофилиОбъектовМетаданныхКонфигурации.Конфигурация = &Конфигурация)
	        |			И (НЕ ПрофилиОбъектовМетаданныхКонфигурации.Ссылка.ПометкаУдаления)
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	ОбъектМетаданных
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ОперацииСтатистикиКонфигурацииСрезПоследних.ОперацияСтатистикиКонфигурации.НаименованиеПолное КАК ИмяОбъектаМетаданных,
	        |	ОперацииСтатистикиКонфигурацииСрезПоследних.Значение КАК КоличествоЗаписей
	        |ИЗ
	        |	РегистрСведений.ОперацииСтатистикиКонфигурацииСрезПоследних КАК ОперацииСтатистикиКонфигурацииСрезПоследних
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОбъектыПрофиля КАК ВТ_ОбъектыПрофиля
	        |		ПО (ОперацииСтатистикиКонфигурацииСрезПоследних.ИнформационнаяБаза = &ИнформационнаяБаза)
	        |			И ОперацииСтатистикиКонфигурацииСрезПоследних.ОперацияСтатистикиКонфигурации = ВТ_ОбъектыПрофиля.ОбъектМетаданных
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	ИмяОбъектаМетаданных"
КонецФункции
		
Функция ТекстЗапросаФункциональныеОпции()
	Возврат "ВЫБРАТЬ
	        |	ФункциональныеОпцииКонфигурацииСрезПоследних.ФункциональнаяОпцияКонфигурации.Наименование КАК ИмяФункциональнойОпции,
	        |	ФункциональныеОпцииКонфигурацииСрезПоследних.Используется КАК ЗначениеФункциональнойОпции
	        |ИЗ
	        |	РегистрСведений.ФункциональныеОпцииКонфигурацииСрезПоследних КАК ФункциональныеОпцииКонфигурацииСрезПоследних
	        |ГДЕ
	        |	ФункциональныеОпцииКонфигурацииСрезПоследних.ИнформационнаяБаза = &ИнформационнаяБаза
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	ИмяФункциональнойОпции"
	
КонецФункции		
		
Функция ТекстЗапросаДаннеОбОкружении()
	Возврат "ВЫБРАТЬ
	        |	ПакетЦентраМониторинга.ИнформационнаяБаза КАК ИнформационнаяБаза,
	        |	МАКСИМУМ(ПакетЦентраМониторинга.Дата) КАК КрайняяДата,
	        |	-1 КАК Сдвиг
	        |ПОМЕСТИТЬ КрайнийПакет
	        |ИЗ
	        |	Документ.ПакетЦентраМониторинга КАК ПакетЦентраМониторинга
	        |ГДЕ
	        |	ПакетЦентраМониторинга.ИнформационнаяБаза = &ИнформационнаяБаза
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ПакетЦентраМониторинга.ИнформационнаяБаза
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	ПакетЦентраМониторинга.ИнформационнаяБаза,
	        |	КрайняяДата,
	        |	Сдвиг
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ ПЕРВЫЕ 1
	        |	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ИнформацияИсторияСрезПоследних.Период, ДЕНЬ), ДЕНЬ, ЕСТЬNULL(КрайнийПакет.Сдвиг, 0)) КАК Период,
	        |	ИнформацияИсторияСрезПоследних.Конфигурация КАК Конфигурация,
	        |	ИнформацияИсторияСрезПоследних.ВерсияКонфигурации КАК ВерсияКонфигурации,
	        |	ИнформацияИсторияСрезПоследних.ИнформационнаяБаза КАК ИнформационнаяБаза,
	        |	ИнформацияИсторияСрезПоследних.ВерсияПлатформы КАК ВерсияПлатформы,
	        |	ИнформацияИсторияСрезПоследних.ВерсияОС КАК ВерсияОС,
	        |	ИнформацияИсторияСрезПоследних.ТипПроцессора КАК ТипПроцессора,
	        |	ИнформацияИсторияСрезПоследних.ТипПлатформы КАК ТипПлатформы,
	        |	ИнформацияИсторияСрезПоследних.ОперативнаяПамять КАК ОперативнаяПамять
	        |ПОМЕСТИТЬ ПоследнияИстория
	        |ИЗ
	        |	РегистрСведений.ИнформацияИстория.СрезПоследних(
	        |			&ДатаОкончания,
	        |			Конфигурация = &Конфигурация
	        |				И ВерсияКонфигурации = &ВерсияКонфигурации
	        |				И ИнформационнаяБаза = &ИнформационнаяБаза) КАК ИнформацияИсторияСрезПоследних
	        |		ЛЕВОЕ СОЕДИНЕНИЕ КрайнийПакет КАК КрайнийПакет
	        |		ПО ИнформацияИсторияСрезПоследних.Период = КрайнийПакет.КрайняяДата
	        |			И ИнформацияИсторияСрезПоследних.ИнформационнаяБаза = КрайнийПакет.ИнформационнаяБаза
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Период УБЫВ
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ ПЕРВЫЕ 1
	        |	ПоследнияИстория.ВерсияПлатформы КАК ВерсияПлатформы,
	        |	ПоследнияИстория.ВерсияОС КАК ВерсияОС,
	        |	ПоследнияИстория.ТипПроцессора КАК ТипПроцессора,
	        |	ПоследнияИстория.ТипПлатформы КАК ТипПлатформы,
	        |	ПоследнияИстория.ОперативнаяПамять КАК ОперативнаяПамять,
	        |	ИнформацияИсторияПодробно.РежимРаботыКонфигурации КАК РежимРаботы
	        |ИЗ
	        |	ПоследнияИстория КАК ПоследнияИстория
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияИсторияПодробно КАК ИнформацияИсторияПодробно
	        |		ПО ПоследнияИстория.ИнформационнаяБаза = ИнформацияИсторияПодробно.ИнформационнаяБаза
	        |			И ПоследнияИстория.Период = ИнформацияИсторияПодробно.ПериодЗаписи
	        |			И ПоследнияИстория.Конфигурация = ИнформацияИсторияПодробно.Конфигурация
	        |			И ПоследнияИстория.ВерсияКонфигурации = ИнформацияИсторияПодробно.ВерсияКонфигурации
	        |			И ПоследнияИстория.ИнформационнаяБаза = ИнформацияИсторияПодробно.ИнформационнаяБаза"
КонецФункции

Функция ИмяКлючевойОперации(Строка)
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка," ",Истина,Истина);
	МассивНовыхСлов = Новый Массив;
	Для Каждого Слово Из МассивСлов Цикл
		ПерваяБуква = Врег(Лев(Слово,1));
		НовоеСлово = ПерваяБуква + Сред(Слово, 2);		
		МассивНовыхСлов.Добавить(НовоеСлово);
	КонецЦикла;
	Если МассивНовыхСлов.Количество() Тогда
		Возврат СтрСоединить(МассивНовыхСлов);
	КонецЕсли;
	Возврат Строка;
КонецФункции

Функция ТекстЗапросаВремяВыполненияХудшейПоВерсиям()
	Возврат "ВЫБРАТЬ
	        |	Вложенный.ВерсияКонфигурации КАК ВерсияКонфигурации,
	        |	ВЫРАЗИТЬ((Вложенный.N_T + Вложенный.N_T_4T / 2) / Вложенный.КоличествоОпераций КАК ЧИСЛО(15, 2)) КАК APDEX,
	        |	Вложенный.КоличествоОпераций КАК КоличествоОпераций
	        |ИЗ
	        |	(ВЫБРАТЬ
	        |		ИнформацияИсторияПодробно.ВерсияКонфигурации КАК ВерсияКонфигурации,
	        |		СУММА(ВЫБОР
	        |				КОГДА ЗамерыВремениЦентрМониторинга.ВремяВыполнения <= &ЦелевоеВремя
	        |					ТОГДА ЗамерыВремениЦентрМониторинга.КоличествоОпераций
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) КАК N_T,
	        |		СУММА(ВЫБОР
	        |				КОГДА ЗамерыВремениЦентрМониторинга.ВремяВыполнения > &ЦелевоеВремя
	        |						И ЗамерыВремениЦентрМониторинга.ВремяВыполнения <= &ЦелевоеВремя * 4
	        |					ТОГДА ЗамерыВремениЦентрМониторинга.КоличествоОпераций
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) КАК N_T_4T,
	        |		СУММА(ВЫБОР
	        |				КОГДА ЗамерыВремениЦентрМониторинга.ВремяВыполнения > &ЦелевоеВремя * 4
	        |					ТОГДА ЗамерыВремениЦентрМониторинга.КоличествоОпераций
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) КАК N_4T,
	        |		СУММА(ЗамерыВремениЦентрМониторинга.КоличествоОпераций) КАК КоличествоОпераций
	        |	ИЗ
	        |		РегистрСведений.ЗамерыВремениЦентрМониторинга КАК ЗамерыВремениЦентрМониторинга
	        |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияИсторияПодробно КАК ИнформацияИсторияПодробно
	        |			ПО (ЗамерыВремениЦентрМониторинга.ИнформационнаяБаза = &ИнформационнаяБаза)
	        |				И (ЗамерыВремениЦентрМониторинга.КлючеваяОперация = &КлючеваяОперация)
	        |				И (ЗамерыВремениЦентрМониторинга.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
	        |				И ЗамерыВремениЦентрМониторинга.ИнформационнаяБаза = ИнформацияИсторияПодробно.ИнформационнаяБаза
	        |				И ЗамерыВремениЦентрМониторинга.Период = ИнформацияИсторияПодробно.ПериодЗаписи
	        |				И (ИнформацияИсторияПодробно.Конфигурация = &Конфигурация)
	        |	
	        |	СГРУППИРОВАТЬ ПО
	        |		ИнформацияИсторияПодробно.ВерсияКонфигурации) КАК Вложенный
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Вложенный.ВерсияКонфигурации.ВерсияЧисло"	
КонецФункции

Функция ЦветAPDEX(APDEX)
	
	ЦветНеприемлимо = Новый Цвет(204, 204, 204);
	ЦветОченьПлохо = Новый Цвет(255, 204, 102);
	ЦветПлохо = Новый Цвет(255, 255, 102);
	ЦветХорошо = Новый Цвет(204, 255, 153);
	ЦветОтлично = Новый Цвет(204, 255, 255);
	
	Если APDEX >= 0 И APDEX <= 0.5 Тогда
		Возврат ЦветНеприемлимо;
	ИначеЕсли APDEX > 0.5 И APDEX <= 0.7 Тогда
		Возврат ЦветОченьПлохо;
	ИначеЕсли APDEX > 0.7 И APDEX <= 0.85 Тогда
		Возврат ЦветПлохо;
	ИначеЕсли APDEX > 0.85 И APDEX <= 0.94 Тогда
		Возврат ЦветХорошо;
	ИначеЕсли APDEX > 0.94 И APDEX <= 1 Тогда
		Возврат ЦветОтлично;
	КонецЕсли;
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Процедура ВывестиСравнениеФункциональныхОпций(ТабличныйДокумент, Макет, ДанныеПоФОиКО, Категория, КоличествоБаз)
	
	Категории = Новый Соответствие;
	Категории.Вставить("Ухудшение", "с ухудшением");
	Категории.Вставить("Улучшение", "с улучшением");
	Категории.Вставить("БезИзменений", "без изменений");
	
	ТаблицаФО = ДанныеПоФОиКО.Скопировать(ДанныеПоФОиКО.НайтиСтроки(Новый Структура("Категория", Категория)));
	МассивОбщие = Новый Массив;
	МассивРазличные = Новый Массив;
	Для Каждого Строка ИЗ ТаблицаФО Цикл
		Если Строка.КоличествоИБ = КоличествоБаз Тогда
			МассивОбщие.Добавить(Строка);
		Иначе
			МассивРазличные.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ШаблонЗаголовка = НСтр("ru = '%1 функциональные опции для ИБ %2'");
	
	// Общие.
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, "Общие", Категории[Категория]);	
	ШапкаФО = Макет.ПолучитьОбласть("ШапкаСравнениеФО");
	ШапкаФО.Параметры.ЗаголовокФО = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ШапкаФО);
	ТабличныйДокумент.НачатьГруппуСтрок(, Ложь);
	Для Каждого Строка Из МассивОбщие Цикл
		СтрокаФО = Макет.ПолучитьОбласть("СтрокаСравнениеФО");
		СтрокаФО.Параметры.Заполнить(Строка);
		ТабличныйДокумент.Вывести(СтрокаФО);
	КонецЦикла;
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
	// Разные.
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, "Различные", Категории[Категория]);	
	ШапкаФО = Макет.ПолучитьОбласть("ШапкаСравнениеФО");
	ШапкаФО.Параметры.ЗаголовокФО = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ШапкаФО);
	ТабличныйДокумент.НачатьГруппуСтрок(, Ложь);
	Для Каждого Строка Из МассивРазличные Цикл
		СтрокаФО = Макет.ПолучитьОбласть("СтрокаСравнениеФО");
		СтрокаФО.Параметры.Заполнить(Строка);
		ТабличныйДокумент.Вывести(СтрокаФО);
	КонецЦикла;
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
КонецПроцедуры
		
#КонецОбласти

#Область РегистрацияОшибок

Процедура ЗарегистрироватьОшибкуВоВнешнейСистеме(ПараметрыПодключения, ДанныеЗаписи)
	
	// Инициализация необходимых переменных.
	
	МестоположениеWSDL = ПараметрыПодключения.МестоположениеWSDL;
	ПараметрыАвторизации = ПараметрыПодключения.ПараметрыАвторизации;
		
	НаименованиеКО = ДанныеЗаписи.КлючеваяОперацияНаименование;
	ИмяКО = ИмяКлючевойОперации(НаименованиеКО);
	ИдПроекта = ДанныеЗаписи.КонфигурацияИдентификаторДляРегистрацииОшибок;
	
	ШаблонТекста = "Проблема производительности.
		|Ключевая операция: %1
		|Имя ключевой операции: %2
		|Конфигурация: %3
		|Версия конфигурации: %4
		|APDEX: %5
		|Более подробную информацию смотри в присоединенных файлах.";
	
	ШаблонОшибкиВеб = "Ошибка метода %1. Ключевая операция %2, конфигурация %3, версия %4.
	|Описание ошибки: %5";	
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, НаименованиеКО, ИмяКО, ДанныеЗаписи.Конфигурация, ДанныеЗаписи.ВерсияКонфигурации, ДанныеЗаписи.APDEX);
	
	// Получение Прокси.
	Попытка
		Прокси = ИнтеграцияССППРПовтИсп.ПолучитьПрокси(МестоположениеWSDL, ПараметрыАвторизации);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстОшибкиВеб = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиВеб, "Прокси", НаименованиеКО, ДанныеЗаписи.Конфигурация, ДанныеЗаписи.ВерсияКонфигурации, ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("АвторегистрацияОшибок", УровеньЖурналаРегистрации.Ошибка, РегистрыСведений.РезультатАвтоматическогоАнализаПроизводительности,, ТекстОшибкиВеб);
		Возврат;
	КонецПопытки;
	
	КомуНаправлена = Неопределено;
	Если ДанныеЗаписи.ИскатьОтветственногоПоКлючевойОперации Тогда
		// Получение ответственного ключевой операции.
		Попытка
			КомуНаправлена = Прокси.GetKeyOperationResponsible(ИдПроекта, ИмяКО);	
		Исключение
			// Ошибка восстановимая, если что, можно зарегистрировать на ответственного по умолчанию.			
			КомуНаправлена = Неопределено;
			ОписаниеОшибки = ОписаниеОшибки();
			ТекстОшибкиВеб = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиВеб, "GetKeyOperationResponsible", НаименованиеКО, ДанныеЗаписи.Конфигурация, ДанныеЗаписи.ВерсияКонфигурации, ОписаниеОшибки);
			ЗаписьЖурналаРегистрации("АвторегистрацияОшибок", УровеньЖурналаРегистрации.Ошибка, РегистрыСведений.РезультатАвтоматическогоАнализаПроизводительности,, ТекстОшибкиВеб);
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КомуНаправлена) Тогда
		КомуНаправлена = ДанныеЗаписи.ОтветственныйИдентификаторДляРегистрацииОшибок;
	КонецЕсли;
	
	Наименование = "ЦКК. " + НаименованиеКО;
	ИсходнаяИнформация = ТекстОшибки;
	ПорядокВоспроизведения = ТекстОшибки;
	Сборка = ДанныеЗаписи.ВерсияКонфигурацииНаименование;
	ДатаОбнаружения = ДанныеЗаписи.ДатаВыполнения;
	СрочностьИсправления = "ЖелательноБыстрее";	
	
	// Регистрация ошибки.
	Попытка
		Ответ = Прокси.RegisterError(ИдПроекта, Наименование, , ИсходнаяИнформация, ПорядокВоспроизведения,
				СрочностьИсправления, Сборка, ДатаОбнаружения, , , КомуНаправлена, );
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстОшибкиВеб = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиВеб, "RegisterError", НаименованиеКО, ДанныеЗаписи.Конфигурация, ДанныеЗаписи.ВерсияКонфигурации, ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("АвторегистрацияОшибок", УровеньЖурналаРегистрации.Ошибка, РегистрыСведений.РезультатАвтоматическогоАнализаПроизводительности,, ТекстОшибкиВеб);
		Возврат;			
	КонецПопытки;			
		
	ЗаписьОбъект = РегистрыСведений.РезультатАвтоматическогоАнализаПроизводительности.СоздатьМенеджерЗаписи();
	ЗаписьОбъект.КлючеваяОперация = ДанныеЗаписи.КлючеваяОперация;
	ЗаписьОбъект.Конфигурация = ДанныеЗаписи.Конфигурация;
	ЗаписьОбъект.ВерсияКонфигурации = ДанныеЗаписи.ВерсияКонфигурации;
	ЗаписьОбъект.Прочитать();
	
	УИДОшибки = Ответ;
	ЗаписьОбъект.ИдентификаторОшибки = Строка(УИДОшибки);
	ЗаписьОбъект.Статус = Перечисления.СтатусыОшибокПроизводительности.Зарегистрирована;
	ЗаписьОбъект.Записать();
	
	// Присоединение файла к ошибке.
	ТабличныйДокумент = ЗаписьОбъект.ДанныеАнализа.Получить();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
	ТабличныйДокумент.Записать(ИмяВременногоФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Попытка
		Ответ = Прокси.AddFile(УИДОшибки, "ИнформацияОбОшибке", "mxl", Base64Строка(ДвоичныеДанные), ); 
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		УдалитьФайлы(ИмяВременногоФайла);
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстОшибкиВеб = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиВеб, "RegisterError", НаименованиеКО, ДанныеЗаписи.Конфигурация, ДанныеЗаписи.ВерсияКонфигурации, ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("АвторегистрацияОшибок", УровеньЖурналаРегистрации.Ошибка, РегистрыСведений.РезультатАвтоматическогоАнализаПроизводительности,, ТекстОшибкиВеб);		
		Возврат;
	КонецПопытки;
	  
КонецПроцедуры

Процедура ЗарегистрироватьОшибкиВоВнешнейСистеме() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РезультатАвтоматическогоАнализаПроизводительности.КлючеваяОперация КАК КлючеваяОперация,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.Конфигурация КАК Конфигурация,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.КлючеваяОперация.Наименование КАК КлючеваяОперацияНаименование,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.Конфигурация.ИдентификаторДляРегистрацииОшибок КАК КонфигурацияИдентификаторДляРегистрацииОшибок,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.ВерсияКонфигурации КАК ВерсияКонфигурации,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.ВерсияКонфигурации.Наименование КАК ВерсияКонфигурацииНаименование,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.APDEX КАК APDEX,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.ДатаВыполнения КАК ДатаВыполнения,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.ДанныеАнализа КАК ДанныеАнализа,
	                      |	ЕСТЬNULL(РезультатАвтоматическогоАнализаПроизводительности.Ответственный.ИдентификаторДляРегистрацииОшибок, """") КАК ОтветственныйИдентификаторДляРегистрацииОшибок,
	                      |	ЕСТЬNULL(РезультатАвтоматическогоАнализаПроизводительности.НастройкаАнализа.АдресВебСервисаСистемыУчетаОшибок, """") КАК АдресВебСервисаСистемыУчетаОшибок,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.НастройкаАнализа КАК НастройкаАнализа,
	                      |	ЕСТЬNULL(РезультатАвтоматическогоАнализаПроизводительности.НастройкаАнализа.ИскатьОтветственногоПоКлючевойОперации, ЛОЖЬ) КАК ИскатьОтветственногоПоКлючевойОперации
	                      |ИЗ
	                      |	РегистрСведений.РезультатАвтоматическогоАнализаПроизводительности КАК РезультатАвтоматическогоАнализаПроизводительности
	                      |ГДЕ
	                      |	РезультатАвтоматическогоАнализаПроизводительности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибокПроизводительности.Создана)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НастройкаАнализа");
	Выборка = Запрос.Выполнить().Выбрать();
	НастройкиПодключения = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.АдресВебСервисаСистемыУчетаОшибок) Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыПодключения = НастройкиПодключения[Выборка.НастройкаАнализа];
		Если ПараметрыПодключения = Неопределено Тогда
			ПараметрыПодключения = ПараметрыПодключения(Выборка.НастройкаАнализа, Выборка.АдресВебСервисаСистемыУчетаОшибок);
			НастройкиПодключения.Вставить(Выборка.НастройкаАнализа, ПараметрыПодключения);
		КонецЕсли;   		
		ЗарегистрироватьОшибкуВоВнешнейСистеме(ПараметрыПодключения, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура АктуализироватьСтатусОшибки(ПараметрыПодключения, ДанныеЗаписи, СоответствиеСтатусов)
	Если НЕ ЗначениеЗаполнено(ДанныеЗаписи.ИдентификаторОшибки) Тогда
		Возврат
	КонецЕсли;
	
	МестоположениеWSDL = ПараметрыПодключения.МестоположениеWSDL;
	ПараметрыАвторизации = ПараметрыПодключения.ПараметрыАвторизации;
	
	ШаблонОшибкиВеб = "Ошибка метода %1. Ключевая операция %2, конфигурация %3, версия %4.
	|Описание ошибки: %5";	
	
	Попытка
		Прокси = ИнтеграцияССППРПовтИсп.ПолучитьПрокси(МестоположениеWSDL, ПараметрыАвторизации);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстОшибкиВеб = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиВеб, "Прокси", ДанныеЗаписи.КлючеваяОперация, ДанныеЗаписи.Конфигурация, ДанныеЗаписи.ВерсияКонфигурации, ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("АвторегистрацияОшибок_Актулизация", УровеньЖурналаРегистрации.Ошибка, РегистрыСведений.РезультатАвтоматическогоАнализаПроизводительности,, ТекстОшибкиВеб);
		Возврат;
	КонецПопытки;
	
	// Получим текущий статус ошибки.
	Попытка
		Ответ = Прокси.ErrorStatus(Новый УникальныйИдентификатор(ДанныеЗаписи.ИдентификаторОшибки));
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстОшибкиВеб = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиВеб, "ErrorStatus", ДанныеЗаписи.КлючеваяОперация, ДанныеЗаписи.Конфигурация, ДанныеЗаписи.ВерсияКонфигурации, ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("АвторегистрацияОшибок_Актулизация", УровеньЖурналаРегистрации.Ошибка, РегистрыСведений.РезультатАвтоматическогоАнализаПроизводительности,, ТекстОшибкиВеб);
		Возврат;
	КонецПопытки;
	
	// Найдем наш статус.
	// Для зарегистрированных ошибок, если статус не менялся, версию не получаем.
	СтатусОшибки = СоответствиеСтатусов[Ответ.Status];
	Если СтатусОшибки = Неопределено
		ИЛИ СтатусОшибки = Перечисления.СтатусыОшибокПроизводительности.Зарегистрирована И СтатусОшибки = ДанныеЗаписи.Статус Тогда
		Возврат;
	КонецЕсли;
	
	// Получим версию исправления (если есть).
	Попытка
		Ответ = Прокси.GetFixedErrorAssembly(Новый УникальныйИдентификатор(ДанныеЗаписи.ИдентификаторОшибки));
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстОшибкиВеб = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиВеб, "GetFixedErrorAssembly", ДанныеЗаписи.КлючеваяОперация, ДанныеЗаписи.Конфигурация, ДанныеЗаписи.ВерсияКонфигурации, ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("АвторегистрацияОшибок_Актулизация", УровеньЖурналаРегистрации.Ошибка, РегистрыСведений.РезультатАвтоматическогоАнализаПроизводительности,, ТекстОшибкиВеб);
		Возврат;
	КонецПопытки;
	
	// Проверяем, поменялось ли что-то.
	Если Ответ = ДанныеЗаписи.ВерсияИсправления И СтатусОшибки = ДанныеЗаписи.Статус Тогда
		Возврат;
	КонецЕсли;
	
	// Нужно найти версию, если не нашли - создать. 
	// Также записать версию исправления в РС.
	// Делаем в транзакции.
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		ЗаписьОбъект = РегистрыСведений.РезультатАвтоматическогоАнализаПроизводительности.СоздатьМенеджерЗаписи();
		ЗаписьОбъект.КлючеваяОперация = ДанныеЗаписи.КлючеваяОперация;
		ЗаписьОбъект.Конфигурация = ДанныеЗаписи.Конфигурация;
		ЗаписьОбъект.ВерсияКонфигурации = ДанныеЗаписи.ВерсияКонфигурации;
		ЗаписьОбъект.Прочитать();
		
		Если НЕ Ответ = Неопределено И НЕ Ответ = ДанныеЗаписи.ВерсияИсправления И НЕ СтатусОшибки = Перечисления.СтатусыОшибокПроизводительности.Зарегистрирована Тогда
			ИсправленоВВерсии = Справочники.ВерсииКонфигурации.СоздатьЭлементПоНаименованию(Ответ, ДанныеЗаписи.Конфигурация);
			ЗаписьОбъект.ИсправленоВВерсии = ИсправленоВВерсии;
		КонецЕсли;
		
		ЗаписьОбъект.Статус = СтатусОшибки;
		ЗаписьОбъект.Записать();
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстОшибкиВеб = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиВеб, "Запись данных", ДанныеЗаписи.КлючеваяОперация, ДанныеЗаписи.Конфигурация, ДанныеЗаписи.ВерсияКонфигурации, ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("АвторегистрацияОшибок_Актулизация", УровеньЖурналаРегистрации.Ошибка, РегистрыСведений.РезультатАвтоматическогоАнализаПроизводительности,, ТекстОшибкиВеб);
		Возврат;             		
	КонецПопытки;
	  
КонецПроцедуры

Процедура АктуализироватьСтатусыОшибок() Экспорт
	
	СоответствиеСтатусов = СоответствиеСтатусов();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РезультатАвтоматическогоАнализаПроизводительности.КлючеваяОперация КАК КлючеваяОперация,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.Конфигурация КАК Конфигурация,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.ВерсияКонфигурации КАК ВерсияКонфигурации,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.ИдентификаторОшибки КАК ИдентификаторОшибки,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.Статус КАК Статус,
	                      |	ЕСТЬNULL(РезультатАвтоматическогоАнализаПроизводительности.ИсправленоВВерсии.Наименование, НЕОПРЕДЕЛЕНО) КАК ВерсияИсправления,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.НастройкаАнализа КАК НастройкаАнализа,
	                      |	РезультатАвтоматическогоАнализаПроизводительности.НастройкаАнализа.АдресВебСервисаСистемыУчетаОшибок КАК АдресВебСервисаСистемыУчетаОшибок
	                      |ИЗ
	                      |	РегистрСведений.РезультатАвтоматическогоАнализаПроизводительности КАК РезультатАвтоматическогоАнализаПроизводительности
	                      |ГДЕ
	                      |	РезультатАвтоматическогоАнализаПроизводительности.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибокПроизводительности.Зарегистрирована), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибокПроизводительности.Исправлена), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибокПроизводительности.Отклонена))
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НастройкаАнализа");
	Выборка = Запрос.Выполнить().Выбрать();
	НастройкиПодключения = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.АдресВебСервисаСистемыУчетаОшибок) Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыПодключения = НастройкиПодключения[Выборка.НастройкаАнализа];
		Если ПараметрыПодключения = Неопределено Тогда
			ПараметрыПодключения = ПараметрыПодключения(Выборка.НастройкаАнализа, Выборка.АдресВебСервисаСистемыУчетаОшибок);
			НастройкиПодключения.Вставить(Выборка.НастройкаАнализа, ПараметрыПодключения);
		КонецЕсли;
		АктуализироватьСтатусОшибки(ПараметрыПодключения, Выборка, СоответствиеСтатусов);
	КонецЦикла;
КонецПроцедуры

Функция СоответствиеСтатусов()
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Не зарегистрирована", Перечисления.СтатусыОшибокПроизводительности.Зарегистрирована);
	Соответствие.Вставить("Зарегистрирована", Перечисления.СтатусыОшибокПроизводительности.Зарегистрирована);
	Соответствие.Вставить("Признана", Перечисления.СтатусыОшибокПроизводительности.Зарегистрирована);
	Соответствие.Вставить("Исправлена", Перечисления.СтатусыОшибокПроизводительности.Исправлена);
	Соответствие.Вставить("Проверена, исправлена", Перечисления.СтатусыОшибокПроизводительности.Исправлена);
	Соответствие.Вставить("Закрыта", Перечисления.СтатусыОшибокПроизводительности.Исправлена);
	Соответствие.Вставить("Не признана", Перечисления.СтатусыОшибокПроизводительности.Отклонена);
	Соответствие.Вставить("Отозвана", Перечисления.СтатусыОшибокПроизводительности.Отклонена);
	Возврат Соответствие;
КонецФункции

Функция ПараметрыПодключения(Настройка, Адрес)
	
	ПараметрыПодключения = Новый Структура("МестоположениеWSDL, ПараметрыАвторизации", Адрес);
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыАвторизации = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(Настройка);
	Если ПараметрыАвторизации = Неопределено Тогда
		ПараметрыАвторизации = Новый Структура("Логин, Пароль", "", "");
	КонецЕсли;
	ПараметрыПодключения.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыПодключения;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПрограммныйИнтерфейс

Функция ПрочитатьНастройки(ОбъектКонтроля) Экспорт
    
    МенеджерЗаписи = РегистрыСведений.ПараметрыРабочихСерверов.СоздатьМенеджерЗаписи();
    МенеджерЗаписи.ОбъектКонтроля = ОбъектКонтроля;
    МенеджерЗаписи.Прочитать();
    
    Настройки = Новый Структура;
    Для Каждого ТекРесурс Из Метаданные.РегистрыСведений.ПараметрыРабочихСерверов.Ресурсы Цикл
        Настройки.Вставить(ТекРесурс.Имя, МенеджерЗаписи[ТекРесурс.Имя]);
    КонецЦикла;
    
    Возврат Настройки;    
    
КонецФункции

// Записать настройки
//
// Параметры:
//  ОбъектКонтроля - СправочникСсылка.ОбъектыКонтроля - рабочий сервер 1С для которого записываются настройки.
//  Настройки      - Структура - структура создания с ключами:
//                                                            — ТипПодключения - Строка, возможные значения RAS, COM.
//                                                            — Кластер        - СправочникСсылка.ОбъектыКонтроля.
//                                                            — Оборудование   - СправочникСсылка.Оборудование.
//
Процедура ЗаписатьНастройки(ОбъектКонтроля, Настройки) Экспорт
    
    МенеджерЗаписи = СоздатьМенеджерЗаписи();
    МенеджерЗаписи.ОбъектКонтроля = ОбъектКонтроля;
    МенеджерЗаписи.Прочитать();
    
    МенеджерЗаписи.ОбъектКонтроля = ОбъектКонтроля;
    
    Если Настройки.Свойство("Кластер") Тогда
        МенеджерЗаписи.Кластер = Настройки.Кластер;
    КонецЕсли;
    
    Если Настройки.Свойство("КаталогНастроекТЖ") Тогда
        МенеджерЗаписи.КаталогНастроекТЖ = Настройки.КаталогНастроекТЖ;
    КонецЕсли;
    
    Если Настройки.Свойство("КаталогНастроекТЖСетевой") Тогда
        МенеджерЗаписи.КаталогНастроекТЖСетевой = Настройки.КаталогНастроекТЖСетевой;
    КонецЕсли;
    
    Если Настройки.Свойство("КаталогОбменаДанными") Тогда
        МенеджерЗаписи.КаталогОбменаДанными = Настройки.КаталогОбменаДанными;
    КонецЕсли;
    
    Если Настройки.Свойство("КаталогОбменаДаннымиСетевой") Тогда
        МенеджерЗаписи.КаталогОбменаДаннымиСетевой = Настройки.КаталогОбменаДаннымиСетевой;
    КонецЕсли;
    
    Если Настройки.Свойство("КаталогВременный") Тогда
        МенеджерЗаписи.КаталогВременный = Настройки.КаталогВременный;
    КонецЕсли;
    
    Если Настройки.Свойство("Оборудование") Тогда
        МенеджерЗаписи.Оборудование = Настройки.Оборудование;
    КонецЕсли;
   
    Если Настройки.Свойство("ДиапазоныПортов") Тогда
        МенеджерЗаписи.ДиапазоныПортов = Настройки.ДиапазоныПортов;
    КонецЕсли;
    
    Если Настройки.Свойство("ОписаниеСервера") Тогда
        МенеджерЗаписи.ОписаниеСервера = Настройки.ОписаниеСервера;
    КонецЕсли;
    
    Если Настройки.Свойство("IPПорт") Тогда
        МенеджерЗаписи.IPПорт = Настройки.IPПорт;
    КонецЕсли;
    
    Если Настройки.Свойство("МаксимальныйОбъемПамятиРабочихПроцессов") Тогда
        МенеджерЗаписи.МаксимальныйОбъемПамятиРабочихПроцессов = Настройки.МаксимальныйОбъемПамятиРабочихПроцессов;
    КонецЕсли;
    
    Если Настройки.Свойство("БезопасныйРасходПамятиЗаОдинВызов") Тогда
        МенеджерЗаписи.БезопасныйРасходПамятиЗаОдинВызов = Настройки.БезопасныйРасходПамятиЗаОдинВызов;
    КонецЕсли;
    
    Если Настройки.Свойство("ОбъемПамятиРабочихПроцессовДоКоторогоСерверСчитаетсяПроизводительным") Тогда
        МенеджерЗаписи.ОбъемПамятиРабочихПроцессовДоКоторогоСерверСчитаетсяПроизводительным = Настройки.ОбъемПамятиРабочихПроцессовДоКоторогоСерверСчитаетсяПроизводительным;
    КонецЕсли;
    
    Если Настройки.Свойство("КоличествоИбНаПроцесс") Тогда
        МенеджерЗаписи.КоличествоИбНаПроцесс = Настройки.КоличествоИбНаПроцесс;
    КонецЕсли;
    
    Если Настройки.Свойство("КоличествоСоединенийНаПроцесс") Тогда
        МенеджерЗаписи.КоличествоСоединенийНаПроцесс = Настройки.КоличествоСоединенийНаПроцесс;
    КонецЕсли;
    
    Если Настройки.Свойство("ПортГлавногоМенеджераКластера") Тогда
        МенеджерЗаписи.ПортГлавногоМенеджераКластера = Настройки.ПортГлавногоМенеджераКластера;
    КонецЕсли;
    
    Если Настройки.Свойство("МенеджерНаКаждыйСервис") Тогда
        МенеджерЗаписи.МенеджерНаКаждыйСервис = Настройки.МенеджерНаКаждыйСервис;
    КонецЕсли;
    
    Если Настройки.Свойство("ЦентральныйСервер") Тогда
        МенеджерЗаписи.ЦентральныйСервер = Настройки.ЦентральныйСервер;
    КонецЕсли;
    
    МенеджерЗаписи.Записать(Истина);
    
КонецПроцедуры

// Функция - Конвертировать параметры
//
// Параметры:
//  Параметры  - Соответствие - Параметры, ключи которого будут преобразованы.
//  Источник   - Перечисление.ТипыПараметровКластер1С - Источник параметров.
//  Получатель - Перечисление.ТипыПараметровКластер1С - Получатель параметров.
// 
// Возвращаемое значение:
//   - Соответствие 
//
Функция КонвертироватьПараметры(Параметры, Источник, Получатель) Экспорт
    
    Если Источник = Перечисления.ТипыПараметровКластер1С.RAS И Получатель = Перечисления.ТипыПараметровКластер1С.ЦКК Тогда
        Возврат ПараметрыRAS_в_ЦКК(Параметры);
    ИначеЕсли Источник = Перечисления.ТипыПараметровКластер1С.АгентКИП И Получатель = Перечисления.ТипыПараметровКластер1С.Нода Тогда
        Возврат ПараметрыАгентКИП_в_Нода(Параметры);
    ИначеЕсли Источник = Перечисления.ТипыПараметровКластер1С.Нода И Получатель = Перечисления.ТипыПараметровКластер1С.ЦКК Тогда
        Возврат ПараметрыНода_в_ЦКК(Параметры);
    ИначеЕсли Источник = Перечисления.ТипыПараметровКластер1С.ЦКК И Получатель = Перечисления.ТипыПараметровКластер1С.АгентКИП Тогда
        Возврат ПараметрыЦКК_в_АгентКИП(Параметры);
    ИначеЕсли Источник = Перечисления.ТипыПараметровКластер1С.АгентКИП И Получатель = Перечисления.ТипыПараметровКластер1С.ЦКК Тогда
        Возврат ПараметрыАгентКИП_в_ЦКК(Параметры);
    КонецЕсли;
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыRAS_в_ЦКК(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("ИдентификаторРабочегоСервера", "УникальныйИдентификаторОбъекта");
    Словарь.Вставить("КоличествоИнформационныхБазНаПроцесс", "КоличествоИбНаПроцесс");
    Словарь.Вставить("СоздаватьМенеджерПодКаждыйСервис", "МенеджерНаКаждыйСервис");
    Словарь.Вставить("ИмяКомпьютера", "Хост");
    Словарь.Вставить("БезопасныйРасходПамятиРабочихПроцессов", "МаксимальныйОбъемПамятиРабочихПроцессов");
    Словарь.Вставить("Порт", "IPПорт");
    Словарь.Вставить("ДиапазоныПортов", "ДиапазоныПортов");
    Словарь.Вставить("Имя", "ОписаниеСервера");
    Словарь.Вставить("БезопасныйРасходПамятиЗаОдинВызов", "БезопасныйРасходПамятиЗаОдинВызов");
    Словарь.Вставить("ЦентральныйСервер", "ЦентральныйСервер");
    Словарь.Вставить("КоличествоСоединенийНаПроцесс", "КоличествоСоединенийНаПроцесс");
    Словарь.Вставить("ОграничениеОбъемаПамятиРабочихПроцессов", "ОбъемПамятиРабочихПроцессовДоКоторогоСерверСчитаетсяПроизводительным");
    Словарь.Вставить("ПортГлавногоМенеджера", "ПортГлавногоМенеджераКластера");
        
    ПараметрыНовые = ПараметрыНовые(Параметры, Словарь);
    
    ПараметрыНовые["УникальныйИдентификаторОбъекта"] = Строка(ПараметрыНовые["УникальныйИдентификаторОбъекта"]);
                
    Возврат ПараметрыНовые;
    
КонецФункции

Функция ПараметрыАгентКИП_в_Нода(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("uuid", "uuid");
    Словарь.Вставить("cluster1C", "cluster1C");
    Словарь.Вставить("hostName", "equipment");
    Словарь.Вставить("portRange", "portRange");
    Словарь.Вставить("name", "name");
    Словарь.Вставить("mainPort", "mainPort");
    Словарь.Вставить("safeWorkingProcessesMemoryLimit", "safeWorkingProcessesMemoryLimit"); 
    Словарь.Вставить("workingProcessMemoryLimit", "workingProcessMemoryLimit");
    Словарь.Вставить("safeCallMemoryLimit", "safeCallMemoryLimit");
    Словарь.Вставить("infoBasesPerWorkingProcessLimit", "infoBasesPerWorkingProcessLimit");
    Словарь.Вставить("connectionsPerWorkingProcessLimit", "connectionsPerWorkingProcessLimit");
    Словарь.Вставить("clusterMainPort", "clusterMainPort");
    Словарь.Вставить("dedicatedManagers", "dedicatedManagers");
    Словарь.Вставить("mainServer", "mainServer");
    
    ПараметрыНовые = ПараметрыНовые(Параметры, Словарь);
    ПараметрыНовые.Вставить("description", Параметры["hostName"] + ":" + Формат(Параметры["clusterMainPort"], "ЧН=0; ЧГ=0"));

    Возврат ПараметрыНовые;
    
КонецФункции

Функция ПараметрыНода_в_ЦКК(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("uuid", "УникальныйИдентификаторОбъекта");
    Словарь.Вставить("description", "Наименование");
    Словарь.Вставить("cluster1C", "Кластер");
    Словарь.Вставить("equipment", "Оборудование");
    Словарь.Вставить("portRange", "ДиапазоныПортов");
    Словарь.Вставить("name", "ОписаниеСервера");
    Словарь.Вставить("mainPort", "IPПорт");
    Словарь.Вставить("safeWorkingProcessesMemoryLimit", "МаксимальныйОбъемПамятиРабочихПроцессов"); 
    Словарь.Вставить("workingProcessMemoryLimit", "ОбъемПамятиРабочихПроцессовДоКоторогоСерверСчитаетсяПроизводительным");
    Словарь.Вставить("safeCallMemoryLimit", "БезопасныйРасходПамятиЗаОдинВызов");
    Словарь.Вставить("infoBasesPerWorkingProcessLimit", "КоличествоИбНаПроцесс");
    Словарь.Вставить("connectionsPerWorkingProcessLimit", "КоличествоСоединенийНаПроцесс");
    Словарь.Вставить("clusterMainPort", "ПортГлавногоМенеджераКластера");
    Словарь.Вставить("dedicatedManagers", "МенеджерНаКаждыйСервис");
    Словарь.Вставить("mainServer", "ЦентральныйСервер");
    
    Возврат ПараметрыНовые(Параметры, Словарь);
    
КонецФункции

Функция ПараметрыЦКК_в_АгентКИП(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("УникальныйИдентификаторОбъекта", "uuid");
    Словарь.Вставить("Кластер", "cluster1C");
    Словарь.Вставить("Оборудование", "hostName");
    Словарь.Вставить("ДиапазоныПортов", "portRange");
    Словарь.Вставить("ОписаниеСервера", "name");
    Словарь.Вставить("IPПорт", "mainPort");
    Словарь.Вставить("МаксимальныйОбъемПамятиРабочихПроцессов", "workingProcessMemoryLimit");
    Словарь.Вставить("БезопасныйРасходПамятиЗаОдинВызов", "safeCallMemoryLimit");
    Словарь.Вставить("ОбъемПамятиРабочихПроцессовДоКоторогоСерверСчитаетсяПроизводительным", );
    Словарь.Вставить("КоличествоИбНаПроцесс", "infoBasesPerWorkingProcessLimit");
    Словарь.Вставить("КоличествоСоединенийНаПроцесс", "connectionsPerWorkingProcessLimit");
    Словарь.Вставить("ПортГлавногоМенеджераКластера", "clusterMainPort");
    Словарь.Вставить("МенеджерНаКаждыйСервис", "dedicatedManagers");
    Словарь.Вставить("ЦентральныйСервер", "mainServer");
    
    Возврат ПараметрыНовые(Параметры, Словарь);
    
КонецФункции

Функция ПараметрыАгентКИП_в_ЦКК(Параметры)
    
    Словарь = Новый Соответствие;
    Словарь.Вставить("empty", "empty");
    Словарь.Вставить("uuid", "УникальныйИдентификаторОбъекта");
    Словарь.Вставить("cluster1C", "Кластер");
    Словарь.Вставить("hostName", "Оборудование");
    Словарь.Вставить("portRange", "ДиапазоныПортов");
    Словарь.Вставить("name", "ОписаниеСервера");
    Словарь.Вставить("mainPort", "IPПорт");
    Словарь.Вставить("safeWorkingProcessesMemoryLimit", "МаксимальныйОбъемПамятиРабочихПроцессов"); 
    Словарь.Вставить("workingProcessMemoryLimit", "ОбъемПамятиРабочихПроцессовДоКоторогоСерверСчитаетсяПроизводительным");
    Словарь.Вставить("safeCallMemoryLimit", "БезопасныйРасходПамятиЗаОдинВызов");
    Словарь.Вставить("infoBasesPerWorkingProcessLimit", "КоличествоИбНаПроцесс");
    Словарь.Вставить("connectionsPerWorkingProcessLimit", "КоличествоСоединенийНаПроцесс");
    Словарь.Вставить("clusterMainPort", "ПортГлавногоМенеджераКластера");
    Словарь.Вставить("dedicatedManagers", "МенеджерНаКаждыйСервис");
    Словарь.Вставить("mainServer", "ЦентральныйСервер");
        
    ПараметрыНовые = ПараметрыНовые(Параметры, Словарь);
    
    Возврат ПараметрыНовые;
    
КонецФункции

Функция ПараметрыНовые(Параметры, Словарь)
    
    ПараметрыНовые = Новый Соответствие;
    Для Каждого ТекПараметр Из Параметры Цикл
        ПараметрыНовые.Вставить(Словарь[ТекПараметр.Ключ], ТекПараметр.Значение);
    КонецЦикла;
    
    Возврат ПараметрыНовые;
    
КонецФункции

#КонецОбласти

#КонецЕсли
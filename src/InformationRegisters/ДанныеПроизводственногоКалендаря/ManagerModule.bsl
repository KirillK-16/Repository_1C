
Процедура ЗаполнитьПроизводственныйКалендарь(НомерГода) Экспорт
	ДлинаСуток = 24 * 3600;
	КодПроизводственногоКалендаря = "РФ";
	
	ДанныеПроизводственногоКалендаря = Новый ТаблицаЗначений;
	ДанныеПроизводственногоКалендаря.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДанныеПроизводственногоКалендаря.Колонки.Добавить("ВидДня", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДнейПроизводственногоКалендаря"));
	ДанныеПроизводственногоКалендаря.Колонки.Добавить("ДатаПереноса", Новый ОписаниеТипов("Дата"));
	ДанныеПроизводственногоКалендаря.Колонки.Добавить("НеделяГода", Новый ОписаниеТипов("Число"));
	
	// Если нет - заполняем праздники и переносы.
	ПраздничныеДни = ПраздничныеДниПроизводственногоКалендаря(КодПроизводственногоКалендаря, НомерГода);
	// Дополним таблицу также праздниками следующего года, 
	// т.к. они влияют на заполнение текущего года (31 декабря - предпраздничный, например).
	//ПраздничныеДниСледующегоГода = ПраздничныеДниПроизводственногоКалендаря(КодПроизводственногоКалендаря, НомерГода + 1);
	//ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПраздничныеДниСледующегоГода, ПраздничныеДни);
	
	ВидыДней = Новый Соответствие;
	
	ДатаДня = Дата(НомерГода, 1, 1);
	Пока ДатаДня <= Дата(НомерГода, 12, 31) Цикл
		// СНепраздничный" день - определяем в соответствии с днем недели.
		НомерДняНедели = ДеньНедели(ДатаДня);
		Если НомерДняНедели <= 5 Тогда
			ВидыДней.Вставить(ДатаДня, Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
		ИначеЕсли НомерДняНедели = 6 Тогда
			ВидыДней.Вставить(ДатаДня, Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота);
		ИначеЕсли НомерДняНедели = 7 Тогда
			ВидыДней.Вставить(ДатаДня, Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
		КонецЕсли;
		ДатаДня = ДатаДня + ДлинаСуток;
	КонецЦикла;
	
	// При совпадении выходного и нерабочего праздничного дней 
	// выходной день переносится на следующий после праздничного рабочий день 
	// за исключением выходных дней, совпадающих с нерабочими праздничными днями 
	// в период Новогодних каникул и Рождества Христова.	
	
	ПереносыДней = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ПраздничныеДни Цикл
		ПраздничныйДень = СтрокаТаблицы.Дата;
		// Отметим как предпраздничный день, 
		// рабочий день непосредственно предшествующий праздничному дню.
		ДатаПредпраздничногоДня = ПраздничныйДень - ДлинаСуток;
		Если Год(ДатаПредпраздничногоДня) <> НомерГода Тогда
			// Предпраздничные дни другого года пропускаем.
			Продолжить;
		КонецЕсли;
		Если ВидыДней[ДатаПредпраздничногоДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий 
			И ПраздничныеДни.Найти(ДатаПредпраздничногоДня, "Дата") = Неопределено Тогда
			ВидыДней.Вставить(ДатаПредпраздничногоДня, Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
		КонецЕсли;
		Если Год(ПраздничныйДень) <> НомерГода Тогда
			// Праздничные дни другого года далее также пропускаем.
			Продолжить;
		КонецЕсли;
		Если ВидыДней[ПраздничныйДень] <> Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий 
			И СтрокаТаблицы.ПереноситьВыходной Тогда
			// Если праздничный день выпадает на выходной, 
			// и выходной, на который выпадает этот праздник, переносится - 
			// переносим выходной на ближайший рабочий день.
			ДатаДня = ПраздничныйДень;
			Пока Истина Цикл
				ДатаДня = ДатаДня + ДлинаСуток;
				Если ВидыДней[ДатаДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий 
					И ПраздничныеДни.Найти(ДатаДня, "Дата") = Неопределено Тогда
					ВидыДней.Вставить(ДатаДня, ВидыДней[ПраздничныйДень]);
					ПереносыДней.Вставить(ДатаДня, ПраздничныйДень);
					ПереносыДней.Вставить(ПраздничныйДень, ДатаДня);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ВидыДней.Вставить(ПраздничныйДень, Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ВидыДней Цикл
		НоваяСтрока = ДанныеПроизводственногоКалендаря.Добавить();
		НоваяСтрока.Дата = КлючИЗначение.Ключ;
		НоваяСтрока.НеделяГода = НеделяГода(КлючИЗначение.Ключ);
		НоваяСтрока.ВидДня = КлючИЗначение.Значение;
		ДатаПереноса = ПереносыДней[НоваяСтрока.Дата];
		Если ДатаПереноса <> Неопределено Тогда
			НоваяСтрока.ДатаПереноса = ДатаПереноса;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПроизводственногоКалендаря.Сортировать("Дата");
	
	ЗаписатьДанныеКалендаря(ДанныеПроизводственногоКалендаря, НомерГода);
	
КонецПроцедуры

Процедура ЗаписатьДанныеКалендаря(ДанныеПроизводственногоКалендаря, НомерГода)
	НаборЗаписей = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Год.Установить(НомерГода);
	НаборЗаписей.Записать();
	
	Для Каждого Строка Из ДанныеПроизводственногоКалендаря Цикл
		//Если Строка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий
		//	ИЛИ Строка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
		//	Продолжить;
		//ИначеЕсли Не ЗначениеЗаполнено(Строка.ДатаПереноса)
		//	И (Строка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота
		//	ИЛИ Строка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Запись = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Строка);
		Запись.Год = НомерГода;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Функция заполняет массив дат праздничных дней по производственному календарю 
// для конкретного календарного года.
//
Функция ПраздничныеДниПроизводственногоКалендаря(КодПроизводственногоКалендаря, НомерГода)
	
	ПраздничныеДни = Новый ТаблицаЗначений;
	ПраздничныеДни.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ПраздничныеДни.Колонки.Добавить("ПереноситьВыходной", Новый ОписаниеТипов("Булево"));
	
	Если КодПроизводственногоКалендаря = "РФ" Тогда
		
		// 1, 2, 3, 4, 5, 6 и 8 января - Новогодние каникулы.
		ДобавитьПраздничныйДень(ПраздничныеДни, "01.01", НомерГода, Ложь);
		ДобавитьПраздничныйДень(ПраздничныеДни, "02.01", НомерГода, Ложь);
		ДобавитьПраздничныйДень(ПраздничныеДни, "03.01", НомерГода, Ложь);
		ДобавитьПраздничныйДень(ПраздничныеДни, "04.01", НомерГода, Ложь);
		ДобавитьПраздничныйДень(ПраздничныеДни, "05.01", НомерГода, Ложь);
		ДобавитьПраздничныйДень(ПраздничныеДни, "06.01", НомерГода, Ложь);
		ДобавитьПраздничныйДень(ПраздничныеДни, "08.01", НомерГода, Ложь);
		
		// 7 января - Рождество Христово.
		ДобавитьПраздничныйДень(ПраздничныеДни, "07.01", НомерГода, Ложь);
		
		// 23 февраля - День защитника Отечества.
		ДобавитьПраздничныйДень(ПраздничныеДни, "23.02", НомерГода);
		
		// 8 марта - Международный женский день.
		ДобавитьПраздничныйДень(ПраздничныеДни, "08.03", НомерГода);
		
		// 1 мая - Праздник Весны и Труда.
		ДобавитьПраздничныйДень(ПраздничныеДни, "01.05", НомерГода);
		
		// 9 мая - День Победы
		ДобавитьПраздничныйДень(ПраздничныеДни, "09.05", НомерГода);
		
		// 12 июня - День России
		ДобавитьПраздничныйДень(ПраздничныеДни, "12.06", НомерГода);
		
		// 4 ноября - День народного единства.
		ДобавитьПраздничныйДень(ПраздничныеДни, "04.11", НомерГода);
		
	КонецЕсли;
	
	Возврат ПраздничныеДни;
	
КонецФункции

Процедура ДобавитьПраздничныйДень(ПраздничныеДни, ПраздничныйДень, НомерГода, ПереноситьВыходной = Истина)
	
	ДеньМесяц = СтрРазделить(ПраздничныйДень, ".");
	
	НоваяСтрока = ПраздничныеДни.Добавить();
	НоваяСтрока.Дата = Дата(НомерГода, ДеньМесяц[1], ДеньМесяц[0]);
	НоваяСтрока.ПереноситьВыходной = ПереноситьВыходной;
	
КонецПроцедуры

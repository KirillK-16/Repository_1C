
#Область ПрограммныйИнтерфейс

// Устанавливает настройки очистки, согласно переданным параметрам.
// Параметры:
//  ИмяОбъектаМетаданных		 - Cтрока - полное имя объекта метаданных;
//  Измерение					 - Cтрока - имя измерения, по которому осуществляется отбор по периоду. Тип Дата;
//  ГлубинаХранения				 - Число - число дней, за которые необходио хранить данные;
//  ИзмерениеОтбора				 - Cтрока - имя измерения, по которому осуществляется дополнительный отбор;
//  УсловияОтбора				 - Массив - использующийся в дополнительном отборе;
//  ИзмерениеГруппировки		 - Строка - имя измерения, по которому осуществляется группировка записей.
//		Необходим в том случае, когда удаление по периоду обрабатывает множество записей и приводит к снижению производительности.
//
Процедура УстановитьНастройкиОчистки(Параметры) Экспорт
	Запись = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, Параметры);
	Запись.Записать();
КонецПроцедуры

Функция ПрочитатьНастройкиОчистки(ИмяОбъектаМетаданных, ИзмерениеОтбора = "") Экспорт
	ДанныеЗаписи = Новый Структура("ИмяОбъектаМетаданных,Измерение,ГлубинаХранения, ИзмерениеОтбора, УсловияОтбора, ИзмерениеГруппировки", ИмяОбъектаМетаданных, "", 0);
	Запись = СоздатьМенеджерЗаписи();
	Запись.ИмяОбъектаМетаданных = ИмяОбъектаМетаданных;
	Запись.ИзмерениеОтбора = ИзмерениеОтбора;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаписи, Запись);
	КонецЕсли;
	Возврат ДанныеЗаписи;
КонецФункции

Процедура УдалитьНастройкиОчистки(ИмяОбъектаМетаданных, ИзмерениеОтбора = "") Экспорт
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяОбъектаМетаданных.Установить(ИмяОбъектаМетаданных);
	НаборЗаписей.Отбор.ИзмерениеОтбора.Установить(ИзмерениеОтбора);
	НаборЗаписей.Записать();
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура УдалитьУстаревшиеДанные() Экспорт
	
	СоответствиеОбъектов = Новый Соответствие;
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НастройкиОчисткиУстаревшихДанных.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
	                      |	НастройкиОчисткиУстаревшихДанных.ИзмерениеОтбора КАК ИзмерениеОтбора,
	                      |	НастройкиОчисткиУстаревшихДанных.Измерение КАК Измерение,
	                      |	НастройкиОчисткиУстаревшихДанных.ГлубинаХранения КАК ГлубинаХранения,
	                      |	НастройкиОчисткиУстаревшихДанных.УсловияОтбора КАК УсловияОтбора,
	                      |	НастройкиОчисткиУстаревшихДанных.ИзмерениеГруппировки КАК ИзмерениеГруппировки,
	                      |	НастройкиОчисткиУстаревшихДанных.КоличествоЗаданий КАК КоличествоЗаданий
	                      |ИЗ
	                      |	РегистрСведений.НастройкиОчисткиУстаревшихДанных КАК НастройкиОчисткиУстаревшихДанных");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОбъектаМетаданных = Новый Структура;
		ПараметрыОбъектаМетаданных.Вставить("ИмяОбъектаМетаданных", Выборка.ИмяОбъектаМетаданных);
		ПараметрыОбъектаМетаданных.Вставить("Измерение", Выборка.Измерение);
		ПараметрыОбъектаМетаданных.Вставить("ИзмерениеОтбора", Выборка.ИзмерениеОтбора);
		ПараметрыОбъектаМетаданных.Вставить("УсловияОтбора", Выборка.УсловияОтбора.Получить());
		ПараметрыОбъектаМетаданных.Вставить("ИзмерениеГруппировки", Выборка.ИзмерениеГруппировки);		
		ПараметрыОбъектаМетаданных.Вставить("ГлубинаХранения", Выборка.ГлубинаХранения);
		ПараметрыОбъектаМетаданных.Вставить("КоличествоЗаданий", Выборка.КоличествоЗаданий);
		ПараметрыОбъектаМетаданных.Вставить("МинимальнаяДата", ТекущаяДата - 86400 * Выборка.ГлубинаХранения);
		СоответствиеОбъектов.Вставить(Новый УникальныйИдентификатор, ПараметрыОбъектаМетаданных);
	КонецЦикла;
	
	Пока СоответствиеОбъектов.Количество() Цикл
		МассивКлючейКУдалению = Новый Массив;
		Для Каждого СтрЗапись Из СоответствиеОбъектов Цикл
			
			ПараметрыОбъектаМетаданных = СтрЗапись.Значение;
			
			Запрос = ЗапросПоПараметрамОбъектаМетаданных(ПараметрыОбъектаМетаданных);
			Запрос.УстановитьПараметр("МинимальнаяДата", ПараметрыОбъектаМетаданных.МинимальнаяДата); 
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 0 Тогда		
				МассивКлючейКУдалению.Добавить(СтрЗапись.Ключ);
			Иначе
				// Удаление записей.
				УдалениеДанныхВыборки(Выборка, ПараметрыОбъектаМетаданных);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Элемент Из МассивКлючейКУдалению Цикл
			СоответствиеОбъектов.Удалить(Элемент);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция СоответствиеОбъектов() Экспорт
	
	СоответствиеОбъектов = Новый ТаблицаЗначений;
	СоответствиеОбъектов.Колонки.Добавить("ИмяОбъектаМетаданных", Новый ОписаниеТипов("Строка"));
	СоответствиеОбъектов.Колонки.Добавить("Измерения", Новый ОписаниеТипов("СписокЗначений"));
	СоответствиеОбъектов.Колонки.Добавить("ВсеИзмерения", Новый ОписаниеТипов("СписокЗначений"));
	
	// Регистры сведений.
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыСведений Цикл
		
		ВсеИзмерения = Новый Массив;		
		МассивИзмеренийТипаДата = Новый Массив;		
		Для Каждого Измерение ИЗ ОбъектМетаданных.Измерения Цикл
			// Составной тип не годится.
			Если Измерение.Тип = Новый ОписаниеТипов("Дата") Тогда
				МассивИзмеренийТипаДата.Добавить(Измерение.Имя);
			КонецЕсли;		
			ВсеИзмерения.Добавить(Измерение.Имя)
		КонецЦикла;
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			МассивИзмеренийТипаДата.Добавить("Период");
			ВсеИзмерения.Добавить("Период");
		КонецЕсли;
		
		// Если регистр не периодический и в измерениях нет типа дата, то такой объект пропускаем.
		Если МассивИзмеренийТипаДата.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НовСтр = СоответствиеОбъектов.Добавить();
		НовСтр.ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
		НовСтр.Измерения.ЗагрузитьЗначения(МассивИзмеренийТипаДата);
		НовСтр.ВсеИзмерения.ЗагрузитьЗначения(ВсеИзмерения);
		
	КонецЦикла; 
	
	// Справочники.
	
	Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		ВсеИзмерения = Новый Массив;		
		МассивИзмеренийТипаДата = Новый Массив;	
		Для Каждого Реквизит ИЗ ОбъектМетаданных.Реквизиты Цикл
			// Составной тип не годится.
			Если Реквизит.Тип = Новый ОписаниеТипов("Дата") Тогда
				МассивИзмеренийТипаДата.Добавить(Реквизит.Имя);
			КонецЕсли;		
			ВсеИзмерения.Добавить(Реквизит.Имя)
		КонецЦикла;
		
		// Если в справочнике нет реквизитов с типом дата, то такой объект пропускаем.
		Если МассивИзмеренийТипаДата.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НовСтр = СоответствиеОбъектов.Добавить();
		НовСтр.ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
		НовСтр.Измерения.ЗагрузитьЗначения(МассивИзмеренийТипаДата);
		НовСтр.ВсеИзмерения.ЗагрузитьЗначения(ВсеИзмерения);

	КонецЦикла;
	
	Возврат СоответствиеОбъектов;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапросПоПараметрамОбъектаМетаданных(ПараметрыОбъектаМетаданных)
	Если СтрНачинаетсяС(ПараметрыОбъектаМетаданных.ИмяОбъектаМетаданных, "РегистрСведений.") Тогда
		Запрос = Новый Запрос("Выбрать РАЗЛИЧНЫЕ
		|	Вложенный.%1
		|	//#ПолеГруппировки
		|Из 
		|	(Выбрать Первые 10000
		|	Таблица.%1
		|	//#ПолеГруппировки
		|ИЗ
		|	%2 КАК Таблица
		|ГДЕ
		|	Таблица.%1 <= &МинимальнаяДата
		|	//#ДополнительныйОтбор
		|Упорядочить ПО
		|	Таблица.%1) КАК Вложенный");			
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ПараметрыОбъектаМетаданных.Измерение, ПараметрыОбъектаМетаданных.ИмяОбъектаМетаданных);
		Если ЗначениеЗаполнено(ПараметрыОбъектаМетаданных.ИзмерениеГруппировки) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ПолеГруппировки", ", " + ПараметрыОбъектаМетаданных.ИзмерениеГруппировки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыОбъектаМетаданных.ИзмерениеОтбора) И ПараметрыОбъектаМетаданных.УсловияОтбора.Количество() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ДополнительныйОтбор", " И Таблица." + ПараметрыОбъектаМетаданных.ИзмерениеОтбора + " В (&ПараметрЗапроса)");
			Запрос.УстановитьПараметр("ПараметрЗапроса", ПараметрыОбъектаМетаданных.УсловияОтбора); 
		КонецЕсли;  
	ИначеЕсли СтрНачинаетсяС(ПараметрыОбъектаМетаданных.ИмяОбъектаМетаданных, "Справочник.") Тогда
		Запрос = Новый Запрос("Выбрать РАЗЛИЧНЫЕ
		|	Вложенный.Ссылка
		|Из 
		|	(Выбрать Первые 1000
		|	Таблица.Ссылка
		|ИЗ
		|	%2 КАК Таблица
		|ГДЕ
		|	Таблица.%1 <= &МинимальнаяДата
		|	//#ДополнительныйОтбор
		|Упорядочить ПО
		|	Таблица.%1) КАК Вложенный");			
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ПараметрыОбъектаМетаданных.Измерение, ПараметрыОбъектаМетаданных.ИмяОбъектаМетаданных);
		Если ЗначениеЗаполнено(ПараметрыОбъектаМетаданных.ИзмерениеОтбора) И ПараметрыОбъектаМетаданных.УсловияОтбора.Количество() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ДополнительныйОтбор", " И Таблица." + ПараметрыОбъектаМетаданных.ИзмерениеОтбора + " В (&ПараметрЗапроса)");
			Запрос.УстановитьПараметр("ПараметрЗапроса", ПараметрыОбъектаМетаданных.УсловияОтбора); 
		КонецЕсли;
	КонецЕсли;
	Возврат Запрос;
КонецФункции

Процедура УдалениеДанныхВыборки(Выборка, ПараметрыОбъектаМетаданных)
	Если СтрНачинаетсяС(ПараметрыОбъектаМетаданных.ИмяОбъектаМетаданных, "РегистрСведений.") Тогда
		МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ПараметрыОбъектаМетаданных.ИмяОбъектаМетаданных);
		
		Пока Выборка.Следующий() Цикл
			
			Если ПараметрыОбъектаМетаданных.КоличествоЗаданий > 0 Тогда 
			
				КлючиФЗ = Новый Соответствие;
				
				Для Сч = 1 По ПараметрыОбъектаМетаданных.КоличествоЗаданий Цикл
					ПараметрыЗапуска = Новый Массив;
					ДанныеЭлемента = Новый Структура;
					ДанныеЭлемента.Вставить(ПараметрыОбъектаМетаданных.Измерение, Выборка[ПараметрыОбъектаМетаданных.Измерение]);
					Если ЗначениеЗаполнено(ПараметрыОбъектаМетаданных.ИзмерениеГруппировки) Тогда
						ДанныеЭлемента.Вставить(ПараметрыОбъектаМетаданных.ИзмерениеГруппировки, Выборка[ПараметрыОбъектаМетаданных.ИзмерениеГруппировки]);
					КонецЕсли;
					ПараметрыФЗ = Новый Структура;
					ПараметрыФЗ.Вставить("Выборка", ДанныеЭлемента);
					ПараметрыФЗ.Вставить("ПараметрыОбъектаМетаданных", ПараметрыОбъектаМетаданных);
					ПараметрыФЗ.Вставить("Контекст", "РегистрыСведений.НастройкиОчисткиУстаревшихДанных");
					ПараметрыФЗ.Вставить("ИмяПроцедуры", "НезависимоеУдалениеРегистраСведений");
					ПараметрыЗапуска.Добавить(ПараметрыФЗ);
					Ключ = "УдалениеУстаревшихДанных" + Формат(Сч, "ЧГ=");
					ФЗ = ФоновыеЗадания.Выполнить("ДлительныеОперации.ВыполнитьВФоне", ПараметрыЗапуска, Ключ, Ключ);
					КлючиФЗ.Вставить(Ключ, ФЗ.УникальныйИдентификатор);
					Если НЕ Выборка.Следующий() Тогда 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Пока КлючиФЗ.Количество() Цикл
					Для Каждого Запись ИЗ КлючиФЗ Цикл
						ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Запись.Значение);
						Если ФЗ = Неопределено Тогда
							КлючиФЗ.Удалить(Запись.Ключ);
						КонецЕсли;
						Если ФЗ.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
							КлючиФЗ.Удалить(Запись.Ключ);
						КонецЕсли;
					КонецЦикла;
					КипВнешнийКомпонент.Пауза(50);
				КонецЦикла;
			Иначе
				МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ПараметрыОбъектаМетаданных.ИмяОбъектаМетаданных);
				НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор[ПараметрыОбъектаМетаданных.Измерение].Установить(Выборка[ПараметрыОбъектаМетаданных.Измерение]);
				Если ЗначениеЗаполнено(ПараметрыОбъектаМетаданных.ИзмерениеГруппировки) Тогда
					НаборЗаписей.Отбор[ПараметрыОбъектаМетаданных.ИзмерениеГруппировки].Установить(Выборка[ПараметрыОбъектаМетаданных.ИзмерениеГруппировки]);
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЦикла;
	ИначеЕсли СтрНачинаетсяС(ПараметрыОбъектаМетаданных.ИмяОбъектаМетаданных, "Справочник.") Тогда 
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.Удалить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура НезависимоеУдалениеРегистраСведений(ПараметрыЗапуска) Экспорт
	Выборка = ПараметрыЗапуска.Выборка;
	ПараметрыОбъектаМетаданных = ПараметрыЗапуска.ПараметрыОбъектаМетаданных;
	МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ПараметрыОбъектаМетаданных.ИмяОбъектаМетаданных);
	НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор[ПараметрыОбъектаМетаданных.Измерение].Установить(Выборка[ПараметрыОбъектаМетаданных.Измерение]);
	Если ЗначениеЗаполнено(ПараметрыОбъектаМетаданных.ИзмерениеГруппировки) Тогда
		НаборЗаписей.Отбор[ПараметрыОбъектаМетаданных.ИзмерениеГруппировки].Установить(Выборка[ПараметрыОбъектаМетаданных.ИзмерениеГруппировки]);
	КонецЕсли;
	НаборЗаписей.Записать();	
КонецПроцедуры

// Возвращает менеджер объекта по полному имени объекта метаданных.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
// 
// Пример:
//  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.Организации");
//  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
//
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя)
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ  = ЧастиИмени[1];
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
			
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
		
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип объекта метаданных ""%1""'"), ПолноеИмя);
	
КонецФункции

#КонецОбласти

#КонецЕсли
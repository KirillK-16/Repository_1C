#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// Общие настройки
Перем ТекстОшибки;
Перем ЗадачаОшибкаПриАнализе;
Перем ОбязательныеНастройки;
Перем НетПроблем;
Перем ИмяСтраницыСправки;

// Настройки контрольной процедуры
Перем ТипПодключения;
Перем АдресСервераАдминистрирования;
Перем ПортСервераАдминистрирования;
Перем АдресЦентральногоСервера;
Перем ПортКластера;
Перем ПортАгентаКластера;
Перем АдминистраторКластера;
Перем ПарольАдминистратораКластера;
Перем ПороговаяПамятьМБ;
Перем ПериодЧастогоОпросаСервера;
Перем ДатаОповещенияОЗависшихСеансах;
Перем АвтоматическиУдалятьЗаписиСеансов;
Перем СрокХраненияДанных;
Перем ВерсияПлатформы;
Перем КаталогЗапускаСервераАдминистрирования;

//////////////////////
// Общие функции
//////////////////////



Процедура ПроверкаНаНаличиеОшибокВыполнения(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ТекстОшибки <> Неопределено;
КонецПроцедуры

Процедура КонтрольнаяПроцедураЗавершенаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = НЕ КонтрольнаяПроцедура.Выполнять;
КонецПроцедуры

//////////////////
// Разбор Настроек
//////////////////

Процедура ЕстьНезаполненныеНастройкиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Ошибки = Новый Массив;
	Для Каждого Настройка Из ОбязательныеНастройки Цикл		
		Если НЕ ЗначениеЗаполнено(Настройка.Значение) Тогда
			Ошибки.Добавить(Настройка.Ключ);
		КонецЕсли;
	КонецЦикла;	
	Если Ошибки.Количество() > 0 Тогда
		ТекстОшибки = "В контролируемом кластере не определены следующие настройки: "; 	
		ТекстОшибки = ТекстОшибки + Символы.ПС + " - " + ОбщийКлиентСервер.ОбъединитьСтроку(Ошибки, Символы.ПС + " - ");
		Результат = Истина;
		ИмяСтраницыСправки = "НеЗаполненыНастройкиВОбъектеКонтроля";

	Иначе	
		Результат = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Процедура РазобратьНастройкиОбработка(ТочкаМаршрутаБизнесПроцесса)
	ТекстОшибки = Неопределено;
	Попытка
		РазобратьНастройки();
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСтраницыСправки = "НеизвестнаяОшибка";
		Отладка.Ошибка(ТекстОшибки);
		
	КонецПопытки;
КонецПроцедуры

Процедура РазобратьНастройки()
	ОбязательныеНастройки = Новый Соответствие;
	
	// Чтение настроек
	НастройкиСловарь = РегистрыСведений.ПараметрыКластеров.Получить(Новый Структура("ОбъектКонтроля", КонтрольнаяПроцедура.ОбъектКонтроля));
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеХранилища = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(КонтрольнаяПроцедура.ОбъектКонтроля);
	НастройкиСловарь.Вставить("АдминистраторКластера", ДанныеХранилища.АдминистраторКластера);
	НастройкиСловарь.Вставить("ПарольАдминистратораКластера", ДанныеХранилища.ПарольАдминистратораКластера);
	УстановитьПривилегированныйРежим(Ложь);
	
	ТипПодключения = НастройкиСловарь.ТипПодключения; 
	ОбязательныеНастройки.Вставить("Тип подключения", ТипПодключения);

	АдресСервераАдминистрирования = НастройкиСловарь.АдресСервераАдминистрирования;
	ПортСервераАдминистрирования = НастройкиСловарь.ПортСервераАдминистрирования; 
	КаталогЗапускаСервераАдминистрирования = НастройкиСловарь.КаталогЗапускаСервераАдминистрирования; 	
	АдресЦентральногоСервера = НастройкиСловарь.АдресКластера;
	ПортАгентаКластера = НастройкиСловарь.ПортАгентаКластера;
	ВерсияПлатформы = НастройкиСловарь.ВерсияПлатформы;
		
	ПортКластера = НастройкиСловарь.ПортКластера;
	ОбязательныеНастройки.Вставить("номер основного IP порта менеджера кластера", ПортКластера);
		
	ПериодЧастогоОпросаСервера = 5;
	
	АдминистраторКластера = НастройкиСловарь.АдминистраторКластера;
	ПарольАдминистратораКластера = НастройкиСловарь.ПарольАдминистратораКластера;
	
	ЧастныеНастройкиСловарь = РегистрыСведений.НастройкиКонтрольПамяти.Получить(
		Новый Структура("КонтрольнаяПроцедура", КонтрольнаяПроцедура)
	);
	
	ПороговаяПамятьМБ = ЧастныеНастройкиСловарь.ПороговаяПамятьМб;
	ДатаОповещенияОЗависшихСеансах = ЧастныеНастройкиСловарь.ДатаОповещенияОЗависшихСеансахСкрыто;
	АвтоматическиУдалятьЗаписиСеансов = ЧастныеНастройкиСловарь.АвтоматическиУдалятьЗаписиСеансов;
	СрокХраненияДанных = ЧастныеНастройкиСловарь.СрокХраненияДанных;
	
КонецПроцедуры


/////////////////////
// Формирование задач
/////////////////////

Функция СоздатьЗадачуОтветственномуЗаВыполнение(ТекстПоручения)
	
	Возврат Неопределено;
	
КонецФункции	

Процедура СформироватьСписокЗадач(ФормируемыеЗадачи, ЗадачаСсылка, ТочкаМаршрутаБизнесПроцесса)
	ФормируемыеЗадачи.Очистить();		
	
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	Если ЗадачаОбъект.БизнесПроцесс = Неопределено И ЗадачаОбъект.ТочкаМаршрута = Неопределено Тогда 
		БизнесПроцессСервер.ПривязатьЗадачуКТочкеМаршрута(ЭтотОбъект.Ссылка, ЗадачаОбъект, ТочкаМаршрутаБизнесПроцесса);	
	КонецЕсли;
	ЗадачаОбъект.Выполнена = Ложь;
	ФормируемыеЗадачи.Добавить(ЗадачаОбъект);
	
КонецПроцедуры	

Процедура УстранитьПричиныНевозможностиАнализаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗадачаОшибкаПриАнализе = СоздатьЗадачуОтветственномуЗаВыполнение(ТекстОшибки);
	СформироватьСписокЗадач(ФормируемыеЗадачи, ЗадачаОшибкаПриАнализе, ТочкаМаршрутаБизнесПроцесса);
КонецПроцедуры

Процедура НачатьПроверкуПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗадачаПоПерезапуску = БизнесПроцессСервер.НайтиЗадачуПерезапуска(ЭтотОбъект.Ссылка);
	СформироватьСписокЗадач(ФормируемыеЗадачи, ЗадачаПоПерезапуску, ТочкаМаршрутаБизнесПроцесса);
КонецПроцедуры

////////////////////////
// Анализ
////////////////////////

Процедура ВыполнитьАнализОбработка(ТочкаМаршрутаБизнесПроцесса)
	ТекстОшибки = Неопределено;
	Попытка 
		ВыполнитьАнализ();
	Исключение
		
		НетПроблем = Неопределено;
		ИмяСтраницыСправки = "НеизвестнаяОшибка";
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отладка.Ошибка(Сообщение);
		СоздатьЗадачуОтветственномуЗаВыполнение(Сообщение);
		
	КонецПопытки;

КонецПроцедуры	

Процедура ВыполнитьАнализ()
КонецПроцедуры

#КонецЕсли












#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// Общие настройки
Перем ТекстОшибки;
Перем ЗадачаОшибкаПриАнализе;
Перем ОбязательныеНастройки;
Перем НетПроблем;
Перем ИмяСтраницыСправки;

// Настройки контрольной процедуры
Перем КаталогФайловОценкиПроизводительности;
Перем ОповещатьПриУхудшенииАпдекса;
Перем ПороговоеЗначениеПадения;

//////////////////////
// Общие функции
//////////////////////



Процедура ПроверкаНаНаличиеОшибокВыполнения(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ТекстОшибки <> Неопределено;
КонецПроцедуры

Процедура КонтрольнаяПроцедураЗавершенаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = НЕ КонтрольнаяПроцедура.Выполнять;
КонецПроцедуры

//////////////////
// Разбор Настроек
//////////////////

Процедура ЕстьНезаполненныеНастройкиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Ошибки = Новый Массив;
	Для Каждого Настройка Из ОбязательныеНастройки Цикл		
		Если НЕ ЗначениеЗаполнено(Настройка.Значение) Тогда
			Ошибки.Добавить(Настройка.Ключ);
		КонецЕсли;
	КонецЦикла;	
	Если Ошибки.Количество() > 0 Тогда
		ТекстОшибки = "Для контролируемой информационной базы требуется указать следующие настройки: "; 	
		ТекстОшибки = ТекстОшибки + Символы.ПС + " - " + ОбщийКлиентСервер.ОбъединитьСтроку(Ошибки, Символы.ПС + " - ");
		Результат = Истина;
		ИмяСтраницыСправки = "НеЗаполненыНастройкиВОбъектеКонтроля";

	Иначе	
		Результат = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Процедура РазобратьНастройкиОбработка(ТочкаМаршрутаБизнесПроцесса)
	ТекстОшибки = Неопределено;
	Попытка
		РазобратьНастройки();
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСтраницыСправки = "НеизвестнаяОшибка";
		Отладка.Ошибка(ТекстОшибки);
		
	КонецПопытки;
КонецПроцедуры

Процедура РазобратьНастройки()
	ОбязательныеНастройки = Новый Соответствие;
	
	// Чтение настроек
	НастройкиСловарь = РегистрыСведений.НастройкиКонтрольПроизводительности.Получить(
		Новый Структура("КонтрольнаяПроцедура", КонтрольнаяПроцедура)
	);

	КаталогФайловОценкиПроизводительности = ОбщийКлиентСервер.РазобратьИмяКаталога(
		НастройкиСловарь.КаталогФайловОценкиПроизводительности
	);
	ОбязательныеНастройки.Вставить("Каталог экспорта файлов оценки производительности", КаталогФайловОценкиПроизводительности);
	
	ОповещатьПриУхудшенииАпдекса = НастройкиСловарь.ОповещатьПриУхудшенииАпдекса;
	ПороговоеЗначениеПадения = НастройкиСловарь.ПороговоеЗначениеПадения;

КонецПроцедуры


/////////////////////
// Формирование задач
/////////////////////

Функция СоздатьЗадачуОтветственномуЗаВыполнение(ТекстПоручения)
	
	Возврат Неопределено;
	
КонецФункции	

Процедура СформироватьСписокЗадач(ФормируемыеЗадачи, ЗадачаСсылка, ТочкаМаршрутаБизнесПроцесса)
	ФормируемыеЗадачи.Очистить();		
	
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	Если ЗадачаОбъект.БизнесПроцесс = Неопределено И ЗадачаОбъект.ТочкаМаршрута = Неопределено Тогда 
		БизнесПроцессСервер.ПривязатьЗадачуКТочкеМаршрута(ЭтотОбъект.Ссылка, ЗадачаОбъект, ТочкаМаршрутаБизнесПроцесса);	
	КонецЕсли;
	ЗадачаОбъект.Выполнена = Ложь;
	ФормируемыеЗадачи.Добавить(ЗадачаОбъект);
	
КонецПроцедуры	

Процедура УстранитьПричиныНевозможностиАнализаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗадачаОшибкаПриАнализе = СоздатьЗадачуОтветственномуЗаВыполнение(ТекстОшибки);
	СформироватьСписокЗадач(ФормируемыеЗадачи, ЗадачаОшибкаПриАнализе, ТочкаМаршрутаБизнесПроцесса);
КонецПроцедуры

Процедура НачатьПроверкуПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗадачаПоПерезапуску = БизнесПроцессСервер.НайтиЗадачуПерезапуска(ЭтотОбъект.Ссылка);
	СформироватьСписокЗадач(ФормируемыеЗадачи, ЗадачаПоПерезапуску, ТочкаМаршрутаБизнесПроцесса);
КонецПроцедуры

////////////////////////
// Анализ
////////////////////////

Процедура ВыполнитьАнализОбработка(ТочкаМаршрутаБизнесПроцесса)
	ТекстОшибки = Неопределено;
	Попытка 
		ВыполнитьАнализ();
	Исключение
		
		НетПроблем = Неопределено;
		ИмяСтраницыСправки = "НеизвестнаяОшибка";
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отладка.Ошибка(Сообщение);
		СоздатьЗадачуОтветственномуЗаВыполнение(Сообщение);
	КонецПопытки;

КонецПроцедуры	

Процедура ВыполнитьАнализ()
	ДатаАнализаUTC = УниверсальноеВремя(ТекущаяДата(), ЧасовойПоясСеанса());
		
	ИменаПустыхФайлов = Новый Массив;
	КлючевыеОперацииНовыеЗамеры = Новый Соответствие;	
	Файлы = НайтиФайлы(КаталогФайловОценкиПроизводительности, "*.xml");
	Если Файлы.Количество() = 0 Тогда
		
		ИмяСтраницыСправки = "КонтрольПроизводительностиНетФайлов";
		Сообщение = НСтр("ru = 'Не найдены файлы с замерами производительности.'");
				
		Возврат;
	КонецЕсли;
	
	ФайлыПолноеИмя = Новый Массив;
	Для Каждого ТекФайл Из Файлы Цикл
		ФайлыПолноеИмя.Добавить(ТекФайл.ПолноеИмя);
	КонецЦикла;
		
	НетПроблем = Истина;
	
	ТекстыПоручений = Новый Соответствие;
	
	МаксимальныеЗначенияАпдекса = Новый Соответствие;
	
	РегКО = РегистрыСведений.ОценкаПроизводительностиКлючевыеОперации;
	ИБ = КонтрольнаяПроцедура.ОбъектКонтроля;
	КлючевыеОперацииТекущийАпдекс = РегКО.КлючевыеОперацииИнформационнойБазы(ИБ);
	Если ОповещатьПриУхудшенииАпдекса Тогда
		Для Каждого ТекКлючеваяОперация ИЗ КлючевыеОперацииТекущийАпдекс Цикл
			ТекКлючеваяОперация.Значение.Вставить("ПредыдущийАпдекс", РегКО.ПолучитьАпдекс(ДатаАнализаUTC, 100, ИБ, ТекКлючеваяОперация.Значение.УникальныйИдентификатор));
		КонецЦикла;
	КонецЕсли;
	
	НовыеМаксимальныеЗначенияАпдекса = Новый Соответствие;
	НовыеМинимальныеЗначенияАпдекса = Новый Соответствие;
	ДинамикаApdex = Новый Соответствие;
	
	ТекущиеКлючевыеОперации = Новый Соответствие;
	ВыборкаКлючевыхОпераций = РегистрыСведений.ОценкаПроизводительностиКлючевыеОперации.Выбрать(
		Новый Структура("ИнформационнаяБаза", КонтрольнаяПроцедура.ОбъектКонтроля)
	);
	Пока ВыборкаКлючевыхОпераций.Следующий() Цикл
		ТекущиеКлючевыеОперации.Вставить(ВыборкаКлючевыхОпераций.УникальныйИдентификатор, Новый Структура(
			"Приоритет, ЦелевоеВремя",
			ВыборкаКлючевыхОпераций.Приоритет, ВыборкаКлючевыхОпераций.ЦелевоеВремя
		));	
	КонецЦикла;
	
	Ключ = "КонтрольПроизводительности.ЗагрузитьФайлыВФоне_" + КонтрольнаяПроцедура.Ссылка;
	
	Отбор = Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно);
	ФЗ_Активно = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФЗ_Активно.Количество() > 0 Тогда
		Сообщение = НСтр("ru = 'Не завершилась предыдущая загрузка файлов.'");
		Возврат;
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, КонтрольнаяПроцедура.Ссылка);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ФайлыПолноеИмя);
	ПараметрыЗадания.Добавить(КонтрольнаяПроцедура);
	ПараметрыЗадания.Добавить(КлючевыеОперацииТекущийАпдекс);
	ПараметрыЗадания.Добавить(ЭтотОбъект.Ссылка);
	ПараметрыЗадания.Добавить(АдресХранилища);
	
	Задание = ФоновыеЗадания.Выполнить("КонтрольПроизводительности.ЗагрузитьФайлыВФоне", ПараметрыЗадания, Ключ, Строка(КонтрольнаяПроцедура) + ": загрузка файлов в фоне");
	СостояниеФЗ = Задание.Состояние;
	
	Пока СостояниеФЗ = СостояниеФоновогоЗадания.Активно Цикл
		КипВнешнийКомпонент.Пауза(1000);
		ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Задание.УникальныйИдентификатор);
		СостояниеФЗ = ФЗ.Состояние;
	КонецЦикла;
	
    Если СостояниеФЗ <> СостояниеФоновогоЗадания.Завершено Тогда
        
        ИнфоОбОшибке = ПодробноеПредставлениеОшибки(ФЗ.ИнформацияОбОшибке);
        
        Если СтрНайти(ИнфоОбОшибке, "ВызватьИсключение ""Ожидаемая управляемая блокировка""") = 0 Тогда
                   
            Сообщение = НСтр("ru = 'Загрузка файлов в фоновом задании прервана. Фоновое задание '") + СостояниеФЗ + ". " + ПодробноеПредставлениеОшибки(ФЗ.ИнформацияОбОшибке);
            НетПроблем = Ложь;
            Возврат;
            
        КонецЕсли;
		
	КонецЕсли;
	
	ДанныеФЗ = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ФайлыСНевернымФорматом = ДанныеФЗ.ФайлыСНевернымФорматом;
	ФайлыСНевернымФорматомПолноеИмя = ДанныеФЗ.ФайлыСНевернымФорматомПолноеИмя;
	ФайлыНеУдалосьЗаписать = ДанныеФЗ.ФайлыНеУдалосьЗаписать;
	КлючевыеОперацииТекущийАпдекс = ДанныеФЗ.КлючевыеОперацииТекущийАпдекс;
	
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	Для НомерФайла = 0 По ФайлыСНевернымФорматомПолноеИмя.Количество() - 1 Цикл
		ПолныйПутьФайла = ФайлыСНевернымФорматомПолноеИмя[НомерФайла];
		ВыбФайл = Новый Файл(ПолныйПутьФайла);
		Если ВыбФайл.Существует() Тогда
			ПолныйПутьНовыйФайл = СтрЗаменить(ПолныйПутьФайла, ".xml",".badxml");
			ПереместитьФайл(ПолныйПутьФайла, ПолныйПутьНовыйФайл);
			УдалитьФайлы(ПолныйПутьФайла);
		КонецЕсли;
	КонецЦикла;

	Если ФайлыСНевернымФорматомПолноеИмя.Количество() <> 0 Тогда
		ТекстОшибкиФайлыНеверногоФормата = НСтр
			(
				"ru = 'Найдены файлы имеющие неверный формат - " +
				ФайлыСНевернымФорматомПолноеИмя.Количество() + 
				" из " +
				Файлы.Количество() +
				": ""'");
		ТекстОшибкиФайлыНеверногоФормата = 
			ТекстОшибкиФайлыНеверногоФормата + 
			ОбщийКлиентСервер.ОбъединитьСтроку(ФайлыСНевернымФорматомПолноеИмя, """, """) +
			""".";
		ИмяСтраницыСправки = "КонтрольПроизводительностиНеверныйФорматФайлов";
				
		ИмяСтраницыСправки = "КонтрольПроизводительностиНетФайлов";
		Сообщение = НСтр("ru = 'Найдены файлы имеющие неверный формат.'");
		
	КонецЕсли;
КонецПроцедуры

#КонецЕсли







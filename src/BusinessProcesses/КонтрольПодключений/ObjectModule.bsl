#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// Общие настройки
Перем ТекстОшибки;
Перем ЗадачаОшибкаПриАнализе;
Перем ОбязательныеНастройки;
Перем НетПроблем;
Перем ИмяСтраницыСправки;

// Настройки контрольной процедуры
Перем МаксимальнаяДатаПрочитанныхЗаписейСкрыто;
Перем КаталогЖурналРегистрации;
Перем МеханизмПроверки;
Перем ЛогинПриПодключении;
Перем ПарольПриПодключении;
Перем НеВыполнятьКонтрольныеПодключения;
Перем СтрокаСоединения;
Перем URLОпубликованнойИнформационнойБазы;
Перем Кластер;
Перем ВерсияПлатформы;
Перем НеПроверятьПоЖурналуРегистрации;

//////////////////////
// Общие функции
//////////////////////



Процедура ПроверкаНаНаличиеОшибокВыполнения(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ТекстОшибки <> Неопределено;
КонецПроцедуры

Процедура КонтрольнаяПроцедураЗавершенаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = НЕ КонтрольнаяПроцедура.Выполнять;
КонецПроцедуры

//////////////////
// Разбор Настроек
//////////////////

Процедура ЕстьНезаполненныеНастройкиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Ошибки = Новый Массив;
	Для Каждого Настройка Из ОбязательныеНастройки Цикл		
		Если НЕ ЗначениеЗаполнено(Настройка.Значение) Тогда
			Ошибки.Добавить(Настройка.Ключ);
		КонецЕсли;
	КонецЦикла;	
	Если Ошибки.Количество() > 0 Тогда
		ТекстОшибки = "Для контролируемой информационной базы требуется указать следующие настройки: "; 	
		ТекстОшибки = ТекстОшибки + Символы.ПС + " - " + ОбщийКлиентСервер.ОбъединитьСтроку(Ошибки, Символы.ПС + " - ");
		Результат = Истина;
		ИмяСтраницыСправки = "НеЗаполненыНастройкиВОбъектеКонтроля";
		
	Иначе	
		Результат = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Процедура РазобратьНастройкиОбработка(ТочкаМаршрутаБизнесПроцесса)
	ТекстОшибки = Неопределено;
	Попытка
		РазобратьНастройки();
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСтраницыСправки = "НеизвестнаяОшибка";
		Отладка.Ошибка(ТекстОшибки);
		
	КонецПопытки;
КонецПроцедуры

Процедура РазобратьНастройки()
	ОбязательныеНастройки = Новый Соответствие;
	
	// Чтение настроек объекта контроля
	НастройкиОбъектаСловарь = РегистрыСведений.ПараметрыИнформационныхБаз.Получить(
		Новый Структура("ОбъектКонтроля", КонтрольнаяПроцедура.ОбъектКонтроля)
	);
	КаталогЖурналРегистрации = НастройкиОбъектаСловарь.КаталогЖурналРегистрации;
	ОбязательныеНастройки.Вставить("Каталог журнал регистрации", КаталогЖурналРегистрации);
	
	Кластер = НастройкиОбъектаСловарь.Кластер;
	ОбязательныеНастройки.Вставить("кластер 1с информационной базы", Кластер);
	
	Если ЗначениеЗаполнено(Кластер) Тогда
		НастройкиКластераСловарь = РегистрыСведений.ПараметрыКластеров.Получить(
		Новый Структура("ОбъектКонтроля", Кластер)
	);
		ВерсияПлатформы = НастройкиКластераСловарь.ВерсияПлатформы;
		ОбязательныеНастройки.Вставить("версия платформы кластера 1С", ВерсияПлатформы);
		
	КонецЕсли;
	
	// Чтение настроек
	НастройкиСловарь = РегистрыСведений.НастройкиКонтрольПодключений.Получить(
		Новый Структура("КонтрольнаяПроцедура", КонтрольнаяПроцедура)
	);
	НеПроверятьПоЖурналуРегистрации = НастройкиСловарь.НеПроверятьПоЖурналуРегистрации;
	МаксимальнаяДатаПрочитанныхЗаписейСкрыто = НастройкиСловарь.МаксимальнаяДатаПрочитанныхЗаписейСкрыто;
	МеханизмПроверки = НастройкиСловарь.МеханизмПроверкиОбрабатыватьИзменения;	
	НеВыполнятьКонтрольныеПодключения = Константы.ВыполнятьКонтрольныеПодключенияВнешнимиСредствами.Получить();
		
	Если МеханизмПроверки = Перечисления.МеханизмыПроверкиПодключения.WEBСервис Тогда
		
		URLОпубликованнойИнформационнойБазы = СокрЛП(НастройкиСловарь.URLОпубликованнойИнформационнойБазы);
		ЛогинПриПодключении = СокрЛП(НастройкиСловарь.ЛогинПриПодключении);
		ПарольПриПодключении = СокрЛП(НастройкиСловарь.ПарольПриПодключении);
		
	Иначе
		
		СтрокаСоединения = СокрЛП(НастройкиСловарь.СтрокаСоединения);
	
	КонецЕсли;
	
	
КонецПроцедуры


/////////////////////
// Формирование задач
/////////////////////

Функция СоздатьЗадачуОтветственномуЗаВыполнение(ТекстПоручения)

	Возврат Неопределено;
	
КонецФункции	

Процедура СформироватьСписокЗадач(ФормируемыеЗадачи, ЗадачаСсылка, ТочкаМаршрутаБизнесПроцесса)
	ФормируемыеЗадачи.Очистить();		
	
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	Если ЗадачаОбъект.БизнесПроцесс = Неопределено И ЗадачаОбъект.ТочкаМаршрута = Неопределено Тогда 
		БизнесПроцессСервер.ПривязатьЗадачуКТочкеМаршрута(ЭтотОбъект.Ссылка, ЗадачаОбъект, ТочкаМаршрутаБизнесПроцесса);	
	КонецЕсли;
	ЗадачаОбъект.Выполнена = Ложь;
	ФормируемыеЗадачи.Добавить(ЗадачаОбъект);
	
КонецПроцедуры	

Процедура УстранитьПричиныНевозможностиАнализаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗадачаОшибкаПриАнализе = СоздатьЗадачуОтветственномуЗаВыполнение(ТекстОшибки);
	СформироватьСписокЗадач(ФормируемыеЗадачи, ЗадачаОшибкаПриАнализе, ТочкаМаршрутаБизнесПроцесса);
КонецПроцедуры

Процедура НачатьПроверкуПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//здесь надо переиспользовать задачу
	ЗадачаПоПерезапуску = БизнесПроцессСервер.НайтиЗадачуПерезапуска(ЭтотОбъект.Ссылка);
	СформироватьСписокЗадач(ФормируемыеЗадачи, ЗадачаПоПерезапуску, ТочкаМаршрутаБизнесПроцесса);
КонецПроцедуры

////////////////////////
// Анализ
////////////////////////

Процедура ВыполнитьАнализОбработка(ТочкаМаршрутаБизнесПроцесса)
	ТекстОшибки = Неопределено;
	Попытка 
		ВыполнитьАнализ();
	Исключение
		
		НетПроблем = Неопределено;
		ИмяСтраницыСправки = "НеизвестнаяОшибка";
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "Рабочий сервер: " + ИмяКомпьютера();
		Отладка.Ошибка(Сообщение);
		СоздатьЗадачуОтветственномуЗаВыполнение(Сообщение);
		
	КонецПопытки;

КонецПроцедуры


Процедура ВыполнитьАнализ()
	
	ВыборкаЛожныхТревог = РегистрыСведений.ЛожныеТревогиКонтрольПодключений.Выбрать(
		Новый Структура("КонтрольнаяПроцедура", КонтрольнаяПроцедура)
	);
	Если ВыборкаЛожныхТревог.Следующий() Тогда
		НетПроблем = Неопределено;
		Возврат;
	КонецЕсли;
	
	НетПроблем = Истина;
	
	ЗаписиОПодключенияхНайдены = Ложь;
	ПодключениеУспешно = Истина;
	ОшибкаПодключенияТекст = "";
	Если НЕ НеВыполнятьКонтрольныеПодключения Тогда	
		
		ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если МеханизмПроверки = Перечисления.МеханизмыПроверкиПодключения.COMСоединитель Тогда
			Попытка 
				МенеджерСоединений = Общий.ПолучитьComСоединитель(ВерсияПлатформы);
				ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
				МенеджерСоединений.Connect(СтрокаСоединения);
				
				Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000;
				ЗафиксироватьДлительностьПодключения(Длительность, Истина);
			Исключение
				Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000;
				ПодключениеУспешно = Ложь;
				ОшибкаПодключенияТекст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗафиксироватьДлительностьПодключения(Длительность, Ложь);	
			КонецПопытки;
        Иначе
            Таймаут = 30;
			URLСервиса = СформироватьАдресWebСервиса(URLОпубликованнойИнформационнойБазы);
			Попытка 
				Если ПустаяСтрока(ЛогинПриПодключении) Тогда
					Определения = Новый WSОпределения(URLСервиса,,,,Таймаут);
				Иначе
					Если ПустаяСтрока(ПарольПриПодключении) Тогда
						Определения = Новый WSОпределения(URLСервиса, ЛогинПриПодключении,,,Таймаут);
					Иначе
						Определения = Новый WSОпределения(URLСервиса, ЛогинПриПодключении, ПарольПриПодключении,,Таймаут);
					КонецЕсли;
				КонецЕсли;
				
				Прокси = Новый WSПрокси(Определения, "http://www.1c.ru/SSL/RemoteControl_1_0_0_1", "RemoteControl", "RemoteControlSoap",,Таймаут); 
				Если НЕ ПустаяСтрока(ЛогинПриПодключении) Тогда 
					Прокси.Пользователь = ЛогинПриПодключении;
					Если НЕ ПустаяСтрока(ПарольПриПодключении) Тогда
						
						Прокси.Пароль = ПарольПриПодключении;
						
					КонецЕсли;	
				КонецЕсли;
				
				ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Прокси.GetCurrentState();
				Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000;
				ЗафиксироватьДлительностьПодключения(Длительность, Истина);
			Исключение
				Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000;
				ПодключениеУспешно = Ложь;
				ОшибкаПодключенияТекст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + "Рабочий сервер: " + ИмяКомпьютера();
				ЗафиксироватьДлительностьПодключения(Длительность, Ложь);
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;

	Если ПодключениеУспешно И НЕ НеПроверятьПоЖурналуРегистрации Тогда
		Фильтр = Новый Структура("ДатаНачала, Событие");
		ТекущаяДатаСервер = ТекущаяДата();
		Фильтр.ДатаНачала = ?(
			ТекущаяДатаСервер - МаксимальнаяДатаПрочитанныхЗаписейСкрыто > 600,
			ТекущаяДатаСервер - 600,
			МаксимальнаяДатаПрочитанныхЗаписейСкрыто
		);
		Фильтр.Событие = "_$Session$_.Start";
		Если ЛогинПриПодключении <> Неопределено Тогда
			Фильтр.Вставить("Пользователь", ЛогинПриПодключении);
		Иначе
			СписокКлиентов = Новый Массив;
			СписокКлиентов.Добавить("COMConnection");
			СписокКлиентов.Добавить("1CV8C");
			СписокКлиентов.Добавить("WebClient");
			СписокКлиентов.Добавить("1CV8");
			
			Фильтр.Вставить("ИмяПриложения", СписокКлиентов);
		КонецЕсли;
		ПоследняяЗаписьСДатой = Новый ТаблицаЗначений;
		
		ЧастиПутиКЖурналу = Новый Массив;
		ЧастиПутиКЖурналу.Добавить(КаталогЖурналРегистрации);
		ЧастиПутиКЖурналу.Добавить("1Cv8.lgf");
		
		ПутьКЖурналуРегистрации = ОбщийКлиентСервер.СформироватьПуть(ЧастиПутиКЖурналу);
		ВыгрузитьЖурналРегистрации(
			ПоследняяЗаписьСДатой,
			,
			,
			ПутьКЖурналуРегистрации,
			1
		);
		ЗаписиОПодключениях = Новый ТаблицаЗначений;
		ВыгрузитьЖурналРегистрации(ЗаписиОПодключениях, Фильтр, "Дата, Событие, Пользователь, ИмяПриложения", ПутьКЖурналуРегистрации);
		
		Если ПоследняяЗаписьСДатой.Количество() <> 0 Тогда
			НаборЗаписейСНастройками = РегистрыСведений.НастройкиКонтрольПодключений.СоздатьНаборЗаписей();	
			НаборЗаписейСНастройками.Отбор.КонтрольнаяПроцедура.Установить(КонтрольнаяПроцедура);
			НаборЗаписейСНастройками.Прочитать();
			НастройкиЗапись = НаборЗаписейСНастройками[0];
			НастройкиЗапись.МаксимальнаяДатаПрочитанныхЗаписейСкрыто = ПоследняяЗаписьСДатой[0].Дата;
			НаборЗаписейСНастройками.Записать();
		КонецЕсли;
		
		ЗаписиОПодключенияхНайдены = ЗаписиОПодключениях.Количество() > 0;
		
		Для Каждого СтрокаТаблицыПодключения Из ЗаписиОПодключениях Цикл
			ЗаписьОПодключении = РегистрыСведений.ЗаписиОПодключениях.СоздатьМенеджерЗаписи();
			ЗаписьОПодключении.ИнформационнаяБаза = КонтрольнаяПроцедура.ОбъектКонтроля;
			ЗаписьОПодключении.Дата = СтрокаТаблицыПодключения.Дата;
			ЗаписьОПодключении.Пользователь = СтрокаТаблицыПодключения.Пользователь;
			ЗаписьОПодключении.Приложение = СтрокаТаблицыПодключения.ИмяПриложения;
			ЗаписьОПодключении.Записать();
		КонецЦикла;
	Иначе
		ЗаписиОПодключенияхНайдены = Истина;	
	КонецЕсли;
	
	
	Если НЕ (ПодключениеУспешно И ЗаписиОПодключенияхНайдены) Тогда
		
		ТекстПредупреждения = "";
		ПодробноеПредставлениеОшибки = ?(ЗначениеЗаполнено(ОшибкаПодключенияТекст), ОшибкаПодключенияТекст, "");
		ДополнительныйТекстПредупреждения = Справочники.ТипыЗадачКонтрольПодключений.КонтрольПодключенийНевозможноПодключиться.ДополнительныйТекстПредупреждения;
		
		ДополнительныйТекстПредупреждения = БизнесПроцессСервер.УстановитьДатуВШаблоне(ДополнительныйТекстПредупреждения, "Дата=", ТекущаяДата());
		ДополнительныйТекстПредупреждения = СтрЗаменить(ДополнительныйТекстПредупреждения, "[ПодробноеПредставлениеОшибки]", ПодробноеПредставлениеОшибки);
		
		НетПроблем = Ложь;
	КонецЕсли;
	
	Параметры = Новый Массив;
	Параметры.Добавить(КонтрольнаяПроцедура.ОбъектКонтроля);
	Параметры.Добавить(?(1, НетПроблем, 0));
	ФоновыеЗадания.Выполнить(
		"КонтрольПодключенийСервер.ЗаписатьДанныеОДоступности",
		Параметры
	);
	
КонецПроцедуры

Функция СформироватьАдресWebСервиса(URLбазы)
	
	Пока Прав(URLбазы, 1) = "/" Цикл
		
		URLбазы = Лев(URLбазы, СтрДлина(URLбазы) - 1);
		
	КонецЦикла;
	
	Возврат URLбазы + "/ws/RemoteControl?wsdl"; 
	
КонецФункции

Процедура ЗафиксироватьДлительностьПодключения(ДлительностьПодключения, ПодключениеУспешно)
	
	МенеджерЗаписи = РегистрыСведений.СтатистикаБуфер.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаЗаписи = ТекущаяДата();
	МенеджерЗаписи.ГУИД = Новый УникальныйИдентификатор();
	Данные = "Контроль подключений." + КонтрольнаяПроцедура.ОбъектКонтроля + "." + "Длительность подключения" + "." + Формат(ДлительностьПодключения,"ЧРД=,; ЧН=0; ЧГ=") + ";"
	+ ?(ПодключениеУспешно, 
	"Контроль подключений." + КонтрольнаяПроцедура.ОбъектКонтроля + "." + "Успешное подключение" +  ".1",
	"Контроль подключений." + КонтрольнаяПроцедура.ОбъектКонтроля + "." + "Неуспешное подключение" +  ".1");
	МенеджерЗаписи.Данные = Данные;
	МенеджерЗаписи.Записать();	
	
КонецПроцедуры

#КонецЕсли
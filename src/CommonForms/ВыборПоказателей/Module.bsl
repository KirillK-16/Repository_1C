
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПоказателиМассив = Обработки.Мониторинг.Создать().СписокПоказателей();
	Для Каждого Показатель Из ПоказателиМассив Цикл
		ЭтотОбъект.Элементы.ТипыПоказателей.СписокВыбора.Добавить(Показатель.НазваниеСправочника, Показатель.Название);
	КонецЦикла;
	
	Элементы.ТипОценки.СписокВыбора.Очистить();
	СписокТиповОценки = Справочники.ОценкаПользователей.ТипыОценки();
	Для Каждого ЭлементСписка Из СписокТиповОценки Цикл
		Элементы.ТипОценки.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ЭлементСписка.Пометка, ЭлементСписка.Картинка);
	КонецЦикла;
	ТипОценки = СписокТиповОценки[0].Значение;
	
	ТипПадения = Перечисления.ТипыПаденияРабочегоПроцесса.СОбразованиемИБезОбразованияДампа;
	ИнтервалУсреднения = Перечисления.ИнтервалыУсреднения.Час;
	ТипПоказателяПроизводительности = Перечисления.ТипыПоказателейПроизводительности.APDEX;
	Аналитика = "СреднееЗначение";
	Периодичность = "Нет";
	ТипСпискаПользователей = Перечисления.ТипыСпискаПользователей.Все;
	ПериодAPDEX = 100;
	
	Профиль = Параметры.ЗначенияЗаполнения.Владелец;
	Если Параметры.ЗначенияЗаполнения.Свойство("Сериализовать") И Параметры.ЗначенияЗаполнения.Сериализовать Тогда
		ЭтотОбъект.Сериализовать = Истина;
	Иначе
		ЭтотОбъект.Сериализовать = Ложь;
	КонецЕсли;
		
	СтруктураТипыПоказателейПроизводительности = Новый Структура();
	СтруктураТипыПоказателейПроизводительности.Вставить("СреднееВремяХудшихЗамеров", Перечисления.ТипыПоказателейПроизводительности.СреднееВремяХудшихЗамеров);
	СтруктураТипыПоказателейПроизводительности.Вставить("КоличествоОперацийПревышенияЦелевогоВремени", Перечисления.ТипыПоказателейПроизводительности.КоличествоОперацийПревышенияЦелевогоВремени);
	СтруктураТипыПоказателейПроизводительности.Вставить("ПроцентПользователейПревышенияЦелевогоВремени", Перечисления.ТипыПоказателейПроизводительности.ПроцентПользователейПревышенияЦелевогоВремени);
	СтруктураТипыПоказателейПроизводительности.Вставить("ПроцентПользователейИзмененияЦелевогоВремени", Перечисления.ТипыПоказателейПроизводительности.ПроцентПользователейИзмененияЦелевогоВремени);
	
	ТипСпискаПользователейВсе = Перечисления.ТипыСпискаПользователей.Все;
	
	ИмяАктивногоПоказателя = "ТекущееЧислоВызововСервера";
	НастроитьФормуСервер(ИмяАктивногоПоказателя);
		
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтотОбъект.Заголовок = "Выбор показателей обнаружения инцидентов";
		УстановитьВидимостьЭлементовУсловиеСрабатыванияОбнаружения(ЭтотОбъект);
	Иначе
		ЭтотОбъект.Элементы.ГруппаПоказательИнцидента.Видимость = Ложь;
	КонецЕсли;
    
    Для Каждого ТекЗначение Из Перечисления.ВидыПриложений Цикл
        НовСтрока = ЭтотОбъект.ВидыПриложений.Добавить();
        НовСтрока.Использовать = Истина;
        НовСтрока.ВидПриложения = ТекЗначение;
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ТипыПоказателей) Тогда
		ТипыПоказателей = ИмяАктивногоПоказателя;
	КонецЕсли;
		
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Функция) Тогда
			ЭтотОбъект.Функция = ПредопределенноеЗначение("Перечисление.ФункцииОповещений.Максимум");
		КонецЕсли;
		
		Если ЭтотОбъект.ИнтервалРасчета = 0 Тогда
			ЭтотОбъект.ИнтервалРасчета = 180;
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ЕдиницаВремениИнтервалаРасчета) Тогда
			ЭтотОбъект.ЕдиницаВремениИнтервалаРасчета = ПредопределенноеЗначение("Перечисление.ЕдиницыВремени.Секунда");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ФорматнаяСтрокаЗначения) Тогда
			ЭтотОбъект.ФорматнаяСтрокаЗначения = "[ЧДЦ='2']";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВидСравнения) Тогда
			ЭтотОбъект.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Больше");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ТипыПоказателей) Тогда
			ЭтотОбъект.ТипыПоказателей = "ТекущееЧислоВызововСервера";
		КонецЕсли;
								
	КонецЕсли;
    
    // Для прохождения проверки конфигурации
    Если Истина = Ложь Тогда
        Подключаемый_АктивизацияТипаПоказателей();
    КонецЕсли;
        
КонецПроцедуры

&НаСервере
Функция ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(Элементы, Элемент)
    
    НовЭлемент = Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
    НовЭлемент.Использование = Элемент.Использование;
    НовЭлемент.ТипГруппы = Элемент.ТипГруппы;
    
    ЕстьОтбор = Ложь;
    
    Для Каждого ТекЭлемент Из Элемент.Элементы Цикл
        Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
            ЕстьОтбор = ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовЭлемент.Элементы, ТекЭлемент) ИЛИ ЕстьОтбор;
        ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
            ЕстьОтбор = ДобавитьЭлементОтбораКомпоновкиДанных(НовЭлемент.Элементы, ТекЭлемент) ИЛИ ЕстьОтбор;
        КонецЕсли;
    КонецЦикла;
    
    Возврат ЕстьОтбор;
    
КонецФункции

&НаСервере
Функция ДобавитьЭлементОтбораКомпоновкиДанных(Элементы, Элемент)
    
    НовЭлемент = Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовЭлемент.ЛевоеЗначение = Элемент.ЛевоеЗначение;
	НовЭлемент.Использование = Элемент.Использование;
	НовЭлемент.ВидСравнения = Элемент.ВидСравнения;
	НовЭлемент.ПравоеЗначение = Элемент.ПравоеЗначение;
    
    Возврат НовЭлемент.Использование;
    
КонецФункции

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(СчетчикиОтборXML) Тогда
		СписокПоказателейСчетчики.Отбор.Элементы.Очистить();
		
		Поток = Новый ЧтениеXML();
        Поток.УстановитьСтроку(СчетчикиОтборXML);
        НовыйОтбор = СериализаторXDTO.ПрочитатьXML(Поток);
        Поток.Закрыть();
        
        ЕстьОтбор = Ложь;
        
        Для Каждого ТекЭлемент Из НовыйОтбор.Элементы Цикл
            Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
                ЕстьОтбор = ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(СписокПоказателейСчетчики.Отбор.Элементы, ТекЭлемент) ИЛИ ЕстьОтбор;
            ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
                ЕстьОтбор = ДобавитьЭлементОтбораКомпоновкиДанных(СписокПоказателейСчетчики.Отбор.Элементы, ТекЭлемент) ИЛИ ЕстьОтбор;
            КонецЕсли;
        КонецЦикла;
		
		Если ЕстьОтбор И Элементы.СписокПоказателейСчетчики.Отображение <> ОтображениеТаблицы.Список Тогда
			Элементы.СписокПоказателейСчетчики.Отображение = ОтображениеТаблицы.Список;
			ИзменитьТекстЗапросаСчетчики(ОтображениеТаблицы.Список);
		ИначеЕсли НЕ ЕстьОтбор И Элементы.СписокПоказателейСчетчики.Отображение <> ОтображениеТаблицы.ИерархическийСписок Тогда
			Элементы.СписокПоказателейСчетчики.Отображение = ОтображениеТаблицы.ИерархическийСписок;
			ИзменитьТекстЗапросаСчетчики(ОтображениеТаблицы.ИерархическийСписок);
			ЭтотОбъект.Элементы.СписокПоказателейСчетчики.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипыПоказателей) Тогда
		НастроитьФормуСервер(ТипыПоказателей);
	КонецЕсли;
	
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		УстановитьВидимостьЭлементовУсловиеСрабатыванияОбнаружения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПоказатели(Команда)
	
	НовыеПоказатели = ДобавитьПоказателиНаСервере();
	
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		Оповестить("ПоказателиИнцидентовСозданы", НовыеПоказатели, ЭтотОбъект.ВладелецФормы);
	Иначе
		Оповестить("ПоказателиМониторингаСозданы", НовыеПоказатели);	
	КонецЕсли;
		
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВВыбранныеГруппой(Команда)
	
	ТекущиеДанныеТипПоказателя = ЭтотОбъект.ТипыПоказателей;
	Если ТекущиеДанныеТипПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивВыбранныхПоказателей = ПолучитьМассивВыбранныхПоказателей(ТекущиеДанныеТипПоказателя);
	
	СтруктураДанныеТипПоказателя = Новый Структура();
	СтруктураДанныеТипПоказателя.Вставить("Имя", ТекущиеДанныеТипПоказателя);
	СтруктураДанныеТипПоказателя.Вставить("Представление", Элементы.ТипыПоказателей.СписокВыбора.НайтиПоЗначению(ТекущиеДанныеТипПоказателя).Представление);
	
	ДобавитьПоказателиВДерево(СтруктураДанныеТипПоказателя, МассивВыбранныхПоказателей, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВВыбранные(Команда)
	
	ТекущиеДанныеТипПоказателя = ЭтотОбъект.ТипыПоказателей;
	Если ТекущиеДанныеТипПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивВыбранныхПоказателей = ПолучитьМассивВыбранныхПоказателей(ТекущиеДанныеТипПоказателя);
	
	СтруктураДанныеТипПоказателя = Новый Структура();
	СтруктураДанныеТипПоказателя.Вставить("Имя", ТекущиеДанныеТипПоказателя);
	СтруктураДанныеТипПоказателя.Вставить("Представление", Элементы.ТипыПоказателей.СписокВыбора.НайтиПоЗначению(ТекущиеДанныеТипПоказателя).Представление);
	
	ДобавитьПоказателиВДерево(СтруктураДанныеТипПоказателя, МассивВыбранныхПоказателей);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыПриложенийУстановитьВсе(Команда)
    
    Для Каждого ТекВидПриложения Из ЭтотОбъект.ВидыПриложений Цикл
        ТекВидПриложения.Использовать = Истина;
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура ВидыПриложенийСнятьВсе(Команда)
    
    Для Каждого ТекВидПриложения Из ЭтотОбъект.ВидыПриложений Цикл
        ТекВидПриложения.Использовать = Ложь;
    КонецЦикла;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипыПоказателейПриИзменении(Элемент)
	НастроитьФормуСервер(ТипыПоказателей);
КонецПроцедуры

&НаКлиенте
Процедура СписокПоказателейСчетчикиОтборПриИзменении(Элемент)
	
	ЕстьОтбор = Ложь;
	
	Для Каждого ЭлементОтбора Из СписокПоказателейСчетчики.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			ЕстьОтбор = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтбор И Элементы.СписокПоказателейСчетчики.Отображение <> ОтображениеТаблицы.Список Тогда
		Элементы.СписокПоказателейСчетчики.Отображение = ОтображениеТаблицы.Список;
		ИзменитьТекстЗапросаСчетчики(ОтображениеТаблицы.Список);
	ИначеЕсли НЕ ЕстьОтбор И Элементы.СписокПоказателейСчетчики.Отображение <> ОтображениеТаблицы.ИерархическийСписок Тогда
		Элементы.СписокПоказателейСчетчики.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ИзменитьТекстЗапросаСчетчики(ОтображениеТаблицы.ИерархическийСписок);
		ЭтотОбъект.Элементы.СписокПоказателейСчетчики.Обновить();
	КонецЕсли;
	
	ЭтотОбъект.СчетчикиОтборXML = СериализоватьОтбор(СписокПоказателейСчетчики.Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивизацияТипаПоказателей()
	
	ТекущиеДанные = Элементы.ТаблицаТиповПоказателей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяАктивногоПоказателя <> ТекущиеДанные.Имя Тогда
		НастроитьФормуСервер(ТекущиеДанные.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияПриИзменении(Элемент)
	УстановитьВидимостьЭлементовУсловиеСрабатыванияОбнаружения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбранныхПоказателейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбранныхПоказателейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбранныхПоказателейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") И ПараметрыПеретаскивания.Значение.Свойство("Идентификатор") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Идентификатор = ЭтотОбъект.УникальныйИдентификатор Тогда
			
			ТекущиеДанныеТипПоказателя = ЭтотОбъект.ТипыПоказателей;
			Если ТекущиеДанныеТипПоказателя = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			МассивВыбранныхПоказателей = ПолучитьМассивВыбранныхПоказателей(ТекущиеДанныеТипПоказателя);
			
			СтруктураДанныеТипПоказателя = Новый Структура();
			СтруктураДанныеТипПоказателя.Вставить("Имя", ТекущиеДанныеТипПоказателя);
			СтруктураДанныеТипПоказателя.Вставить("Представление", Элементы.ТипыПоказателей.СписокВыбора.НайтиПоЗначению(ТекущиеДанныеТипПоказателя).Представление);
			
			ДобавитьПоказателиВДерево(СтруктураДанныеТипПоказателя, МассивВыбранныхПоказателей);
					
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПоказателейДваУровняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанныеТипПоказателя = ТипыПоказателей;
	МассивВыбранныхПоказателей = ПолучитьМассивВыбранныхПоказателей(ТекущиеДанныеТипПоказателя);
	
	СтруктураДанныеТипПоказателя = Новый Структура();
	СтруктураДанныеТипПоказателя.Вставить("Имя", ТекущиеДанныеТипПоказателя);
	СтруктураДанныеТипПоказателя.Вставить("Представление", Элементы.ТипыПоказателей.СписокВыбора.НайтиПоЗначению(ТекущиеДанныеТипПоказателя).Представление);
	
	ДобавитьПоказателиВДерево(СтруктураДанныеТипПоказателя, МассивВыбранныхПоказателей);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПоказателейДваУровняНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	НовоеЗначение = Новый Структура("Идентификатор, Данные", ЭтотОбъект.УникальныйИдентификатор, ПараметрыПеретаскивания.Значение);
	ПараметрыПеретаскивания.Значение = НовоеЗначение;

КонецПроцедуры

&НаКлиенте
Процедура СписокПоказателейСчетчикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    
    ТекущиеДанныеТипПоказателя = ТипыПоказателей;
	МассивВыбранныхПоказателей = ПолучитьМассивВыбранныхПоказателей(ТекущиеДанныеТипПоказателя);
    
    СтруктураДанныеТипПоказателя = Новый Структура();
	СтруктураДанныеТипПоказателя.Вставить("Имя", ТекущиеДанныеТипПоказателя);
	СтруктураДанныеТипПоказателя.Вставить("Представление", Элементы.ТипыПоказателей.СписокВыбора.НайтиПоЗначению(ТекущиеДанныеТипПоказателя).Представление);
	
	ДобавитьПоказателиВДерево(СтруктураДанныеТипПоказателя, МассивВыбранныхПоказателей);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПоказателейСчетчикиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	НовоеЗначение = Новый Структура("Идентификатор, Данные", ЭтотОбъект.УникальныйИдентификатор, ПараметрыПеретаскивания.Значение);
	ПараметрыПеретаскивания.Значение = НовоеЗначение;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДобавитьПоказатели

&НаСервере
Функция ДобавитьПоказателиНаСервере()
	
	ОбъектДеревоВыбранныхПоказателей = РеквизитФормыВЗначение("ДеревоВыбранныхПоказателей");
	
	НовыеПоказатели = Новый Массив;
	
	Для Каждого СтрокаДанные Из ОбъектДеревоВыбранныхПоказателей.Строки Цикл
		
		ПоказательМониторинга = ПолучитьПоказательМониторингаСервер(СтрокаДанные);
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("ИдентификаторВариантаПоказателя", "");
		ПараметрОповещения.Вставить("ИзменилисьДанные", Ложь);
		ПараметрОповещения.Вставить("ИзменилосьСглаживание", Ложь);
		ПараметрОповещения.Вставить("ИзменилсяВид", Истина);
		ПараметрОповещения.Вставить("Ссылка", ПоказательМониторинга);
		ПараметрОповещения.Вставить("СтарыйИдентификаторТипа", Неопределено);
		ПараметрОповещения.Вставить("ПоказательМониторинга", ПоказательМониторинга);
		ПараметрОповещения.Вставить("ГруппаОбъектовКонтроля", Ложь);
		
		Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
			НовыеПоказатели.Добавить(ПоказательМониторинга);
		Иначе
			НовыеПоказатели.Добавить(ПараметрОповещения);
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат НовыеПоказатели;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказательМониторингаСервер(СтрокаДанных)
	
	ПоказательМониторинга = Неопределено;
	
	Если СтрокаДанных.ТипПоказателя = "ПоказателиСчетчиков" Тогда
		
		ПоказательМониторинга = ПолучитьПоказателиСчетчиков(СтрокаДанных);
			
	ИначеЕсли СтрокаДанных.ТипПоказателя = "ТекущееЧислоВызововСервера" Тогда
		
		ПоказательМониторинга = ПолучитьТекущееЧислоВызововСервера(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "ИспользованиеОперативнойПамятиПроцессамиКластера" Тогда
		
		ПоказательМониторинга = ПолучитьИспользованиеОперативнойПамятиПроцессамиКластера(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "ЧислоИсключенийПоТехнологическомуЖурналу" Тогда
		
		ПоказательМониторинга = ПолучитьЧислоИсключенийПоТехнологическомуЖурналу(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "ЧислоПаденийРабочихПроцессов" Тогда
		
		ПоказательМониторинга = ПолучитьЧислоПаденийРабочихПроцессов(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "ЧислоНовыхОбъектов" Тогда
		
		ПоказательМониторинга = ПолучитьЧислоНовыхОбъектов(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "ЧислоНерешенныхПроблем" Тогда
		
		ПоказательМониторинга = ПолучитьЧислоНерешенныхПроблем(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "СкоростьРазбораПроблем" Тогда
		
		ПоказательМониторинга = ПолучитьСкоростьРазбораПроблем(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "ЧислоСеансовПользователей" Тогда
		
		ПоказательМониторинга = ПолучитьЧислоСеансовПользователей(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "ОценкаПользователей" Тогда
		
		ПоказательМониторинга = ПолучитьОценкаПользователей(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "СформированоОтчетов" Тогда
		
		ПоказательМониторинга = ПолучитьСформированоОтчетов(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "ПоказателиСкоростиВыполненияТипичныхОпераций" Тогда
		
		ПоказательМониторинга = ПолучитьПоказателиСкоростиВыполненияТипичныхОпераций(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "ПроцентДоступностиСервисаВсеБазы" Тогда
		
		ПоказательМониторинга = ПолучитьПроцентДоступностиСервисаВсеБазы(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "ПроцентДоступностиСервисаВсеРесурсы" Тогда
		
		ПоказательМониторинга = ПолучитьПроцентДоступностиСервисаВсеРесурсы(СтрокаДанных);
		
	ИначеЕсли СтрокаДанных.ТипПоказателя = "ПоказателиAPDEX" Тогда
		
		ПоказательМониторинга = ПолучитьПоказателиAPDEX(СтрокаДанных);
		
	КонецЕсли;
	
	Возврат ПоказательМониторинга;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиСчетчиков(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
    Если ЭтоПоказательИнцидента Тогда
        
        ПоказательМониторинга = СоздатьПоказательИнцидента();
        
        ПараметрыСоздания = Новый Структура;
        ПараметрыСоздания.Вставить("Владелец", ПоказательМониторинга["СсылкаПоказательИнцидента"]);
        ПараметрыСоздания.Вставить("Периодичность", Периодичность);
        ПараметрыСоздания.Вставить("Аналитика", Аналитика);
        ПараметрыСоздания.Вставить("Описание", СтрокаДанных.Представление);
        
        СчетчикиДобавить = Новый Массив;
        Для Каждого Данные Из СтрокаДанных.Счетчики Цикл
            
            ЭлементСчетчика = Новый Структура("Счетчик, Группа", Данные.Счетчик, Данные.Группа);
            СчетчикиДобавить.Добавить(ЭлементСчетчика);
                       
        КонецЦикла;
        
        ПараметрыСоздания.Вставить("Счетчики", СчетчикиДобавить);
        
        НовыйПоказательСчетчиков = Справочники.ПоказателиСчетчиков.СоздатьЭлементXML(ПараметрыСоздания);
        
        ПоказательМониторинга.Вставить("ПоказательXML", НовыйПоказательСчетчиков);
        
        Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
        
		Возврат Поток.Закрыть();
        
    Иначе
        
        ПоказательМониторинга = СоздатьПоказательМониторинга();
        
        НовыйПоказательСчетчиков = Справочники.ПоказателиСчетчиков.СоздатьЭлемент();
        НовыйПоказательСчетчиков.Пользователь = СловарьСервер.ТекущийПользователь();
        НовыйПоказательСчетчиков.ГУИД = Новый УникальныйИдентификатор();
        Если ЭтоПоказательИнцидента Тогда
            НовыйПоказательСчетчиков.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
        Иначе
            НовыйПоказательСчетчиков.Владелец = ПоказательМониторинга;
        КонецЕсли;
        НовыйПоказательСчетчиков.Периодичность					= Периодичность;
        НовыйПоказательСчетчиков.Аналитика						= Аналитика;
        
        Для Каждого Данные Из СтрокаДанных.Счетчики Цикл
            
            НоваяСтрокаПоказательСчетчиков = НовыйПоказательСчетчиков.Счетчики.Добавить();
            НоваяСтрокаПоказательСчетчиков.Счетчик = Данные.Счетчик;
            НоваяСтрокаПоказательСчетчиков.Группа = Данные.Группа;
            
        КонецЦикла;
        
        НовыйПоказательСчетчиков.Описание = СтрокаДанных.Представление;
        
        НовыйПоказательСчетчиков.Записать();
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказательСчетчиков.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
        
    КонецЕсли;
			
КонецФункции

&НаСервере
Функция ПолучитьТекущееЧислоВызововСервера(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;

	НовыйПоказатель = Справочники.ТекущееЧислоВызововСервера.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб = Истина;
	НовыйПоказатель.ВсеКластеры = Истина;
	НовыйПоказатель.Кластер = Неопределено;
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;

	Для Каждого Данные Из СтрокаДанных.ИнформационныеБазы Цикл
		НоваяСтрокаИнформационныеБазы = НовыйПоказатель.ИнформационныеБазы.Добавить();
		НоваяСтрокаИнформационныеБазы.ИнформационнаяБазаСсылка = Данные.ИнформационнаяБазаСсылка;
	КонецЦикла;

	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.ТекущееЧислоВызововСервера.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьИспользованиеОперативнойПамятиПроцессамиКластера(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;
	
	НовыйПоказатель = Справочники.ИспользованиеОперативнойПамятиПроцессамиКластера.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб	= Истина;
    Для Каждого ТекНастройки Из СтрокаДанных.ИспользованиеОперативнойПамятиПроцессами Цикл
        НовСтрока = НовыйПоказатель.НастройкиПоказателя.Добавить();
        НовСтрока.Кластер = ТекНастройки.Кластер;
        НовСтрока.РабочийСервер = РабочийСерверКластераПоНаименованию(ТекНастройки.Кластер, ТекНастройки.РабочийСервер);
    КонецЦикла;
    
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	
	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.ИспользованиеОперативнойПамятиПроцессамиКластера.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция РабочийСерверКластераПоНаименованию(Кластер, РабочийСервер)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = "
    |ВЫБРАТЬ
    |   РабочиеСервера.Ссылка
    |ИЗ
    |   Справочник.ОбъектыКонтроля КАК РабочиеСервера
    |ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    |   РегистрСведений.ПараметрыРабочихСерверов КАК Параметры
    |ПО
    |   Параметры.ОбъектКонтроля = РабочиеСервера.Ссылка
    |   И Параметры.Кластер = &Кластер
    |ГДЕ
    |   РабочиеСервера.Владелец = &ТипРабочийСервер
    |   И РабочиеСервера.Наименование = &РабочийСервер
    |";
    
    Запрос.УстановитьПараметр("Кластер", Кластер);
    Запрос.УстановитьПараметр("ТипРабочийСервер", Справочники.ВидыОбъектовКонтроля.РабочийСервер);
    Запрос.УстановитьПараметр("РабочийСервер", РабочийСервер);
    
    Результат = Запрос.Выполнить();
    
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Возврат Выборка.Ссылка;
    Иначе
        Возврат Справочники.ОбъектыКонтроля.ПустаяСсылка();
    КонецЕсли;
        
КонецФункции

&НаСервере
Функция ПолучитьЧислоИсключенийПоТехнологическомуЖурналу(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;

	НовыйПоказатель = Справочники.ЧислоИсключенийПоТехнологическомуЖурналу.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб = Истина;
    Для Каждого ТекНастройки Из СтрокаДанных.ИспользованиеОперативнойПамятиПроцессами Цикл
        НовСтрока = НовыйПоказатель.НастройкиПоказателя.Добавить();
        НовСтрока.Кластер = ТекНастройки.Кластер;
        НовСтрока.РабочийСервер = РабочийСерверКластераПоНаименованию(ТекНастройки.Кластер, ТекНастройки.РабочийСервер);
    КонецЦикла;

	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	НовыйПоказатель.ИнтервалУсреднения = СтрокаДанных.ИнтервалУсреднения;
	
	НовыйПоказатель.Описание = СтрокаДанных.Представление;

	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.ЧислоИсключенийПоТехнологическомуЖурналу.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьЧислоПаденийРабочихПроцессов(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;
	
	НовыйПоказатель = Справочники.ЧислоПаденийРабочихПроцессов.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб = Истина;
	НовыйПоказатель.ВсеСерверы = Ложь;
	НовыйПоказатель.РабочийСервер = СтрокаДанных.Сервер;
	НовыйПоказатель.ТипПадения = СтрокаДанных.ТипПадения;
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	НовыйПоказатель.ИнтервалУсреднения = СтрокаДанных.ИнтервалУсреднения;
	
	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.ЧислоПаденийРабочихПроцессов.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьЧислоНовыхОбъектов(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;
	
	НовыйПоказатель	= Справочники.ЧислоНовыхОбъектов.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб = Истина;
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	НовыйПоказатель.ИнтервалУсреднения = СтрокаДанных.ИнтервалУсреднения;
	
	Для Каждого Данные Из СтрокаДанных.ИнформационныеБазы Цикл
		НоваяСтрокаИнформационныеБазы = НовыйПоказатель.ИнформационныеБазы.Добавить();
		НоваяСтрокаИнформационныеБазы.ИнформационнаяБазаСсылка = Данные.ИнформационнаяБазаСсылка;
	КонецЦикла;

	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.ЧислоНовыхОбъектов.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьЧислоНерешенныхПроблем(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;
	
	НовыйПоказатель = Справочники.ЧислоНерешенныхПроблем.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб = Истина;
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	НовыйПоказатель.ИнтервалУсреднения = СтрокаДанных.ИнтервалУсреднения;
	
	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.ЧислоНерешенныхПроблем.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьСкоростьРазбораПроблем(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;
	
	НовыйПоказатель	= Справочники.СкоростьРазбораПроблем.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб	= Истина;
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	НовыйПоказатель.ИнтервалУсреднения	= СтрокаДанных.ИнтервалУсреднения;
	
	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.СкоростьРазбораПроблем.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьЧислоСеансовПользователей(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;
	
	НовыйПоказатель = Справочники.ЧислоСеансовПользователей.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб	= Истина;
	НовыйПоказатель.ВсеКластеры	= Истина;
	НовыйПоказатель.Кластер	= Неопределено;
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	
	Для Каждого Данные Из СтрокаДанных.ИнформационныеБазы Цикл
		НоваяСтрокаИнформационныеБазы = НовыйПоказатель.ИнформационныеБазы.Добавить();
		НоваяСтрокаИнформационныеБазы.ИнформационнаяБазаСсылка = Данные.ИнформационнаяБазаСсылка;
    КонецЦикла;
    
    Для Каждого Данные Из СтрокаДанных.ВидыПриложений Цикл
        НоваяСтрокаВидПриложения = НовыйПоказатель.ВидыПриложений.Добавить();
        НоваяСтрокаВидПриложения.Использовать = Истина;
        НоваяСтрокаВидПриложения.ВидПриложения = Данные.Значение;
    КонецЦикла;
    
	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.ЧислоСеансовПользователей.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьОценкаПользователей(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;
	
	НовыйПоказатель	= Справочники.ОценкаПользователей.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб	= Истина;
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	НовыйПоказатель.ТипОценки = СтрокаДанных.ТипОценки;
	
	Для Каждого Данные Из СтрокаДанных.ИнформационныеБазы Цикл
		НоваяСтрокаИнформационныеБазы = НовыйПоказатель.ИнформационныеБазы.Добавить();
		НоваяСтрокаИнформационныеБазы.ИнформационнаяБазаСсылка = Данные.ИнформационнаяБазаСсылка;
	КонецЦикла;
	
	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.ОценкаПользователей.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьСформированоОтчетов(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;
	
	НовыйПоказатель	= Справочники.СформированоОтчетов.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб	= Истина;
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	НовыйПоказатель.ИнтервалУсреднения = СтрокаДанных.ИнтервалУсреднения;
	
	Для Каждого Данные Из СтрокаДанных.ИнформационныеБазы Цикл
		НоваяСтрокаИнформационныеБазы = НовыйПоказатель.ИнформационныеБазы.Добавить();
		НоваяСтрокаИнформационныеБазы.ИнформационнаяБазаСсылка = Данные.ИнформационнаяБазаСсылка;
	КонецЦикла;
	
	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.СформированоОтчетов.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьПоказателиСкоростиВыполненияТипичныхОпераций(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;
	
	НовыйПоказатель	= Справочники.ПоказателиСкоростиВыполненияТипичныхОпераций.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб	= Истина;
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	НовыйПоказатель.ТипСпискаПользователей = СтрокаДанных.ТипСпискаПользователей;
	
	Для Каждого СтрокаПользователь Из Пользователи Цикл
		НоваяСтрока = НовыйПоказатель.ПользователиСсылка.Добавить();
		НоваяСтрока.Пользователь = СтрокаПользователь.ИмяПользователя;
    КонецЦикла;
    
    Для Каждого СтрокаИнформационнаяБаза Из СтрокаДанных.ИнформационныеБазы Цикл
        НоваяСтрока = НовыйПоказатель.ИнформационныеБазы.Добавить();
        НоваяСтрока.ИнформационнаяБаза = СтрокаИнформационнаяБаза.ИнформационнаяБазаСсылка;
    КонецЦикла;
    
    Для Каждого СтрокаКлючеваяОперация Из СтрокаДанных.КлючевыеОперации Цикл
        НоваяСтрока = НовыйПоказатель.КлючевыеОперации.Добавить();
        НоваяСтрока.Наименование = СтрокаКлючеваяОперация.Имя;
    КонецЦикла;
    
	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.ПоказателиСкоростиВыполненияТипичныхОпераций.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьПроцентДоступностиСервисаВсеБазы(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;
	
	НовыйПоказатель	= Справочники.ПроцентДоступностиСервисаВсеБазы.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб = Истина;
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	НовыйПоказатель.ИнтервалУсреднения = СтрокаДанных.ИнтервалУсреднения;
	
	Для Каждого Данные Из СтрокаДанных.ИнформационныеБазы Цикл
		НоваяСтрокаИнформационныеБазы = НовыйПоказатель.ИнформационныеБазы.Добавить();
		НоваяСтрокаИнформационныеБазы.ИнформационнаяБаза = Данные.ИнформационнаяБазаСсылка;
	КонецЦикла;
	
	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.ПроцентДоступностиСервисаВсеБазы.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьПроцентДоступностиСервисаВсеРесурсы(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;
	
	НовыйПоказатель	= Справочники.ПроцентДоступностиСервисаВсеРесурсы.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб	= Истина;
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	НовыйПоказатель.ИнтервалУсреднения = СтрокаДанных.ИнтервалУсреднения;
	
	Для Каждого Данные Из СтрокаДанных.Ресурсы Цикл
		НоваяСтрокаРесурсы = НовыйПоказатель.Ресурсы.Добавить();
		НоваяСтрокаРесурсы.Ресурс = Данные.Ресурс;
	КонецЦикла;
	
	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.ПроцентДоступностиСервисаВсеРесурсы.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьПоказателиAPDEX(СтрокаДанных)
	
	ЭтоПоказательИнцидента = Ложь;
	Если ТипЗнч(ЭтотОбъект.Профиль) = Тип("СправочникСсылка.ОбнаружениеИнцидентов") Тогда
		ЭтоПоказательИнцидента = Истина;
	КонецЕсли;
	
	Если ЭтоПоказательИнцидента Тогда
		ПоказательМониторинга = СоздатьПоказательИнцидента();
	Иначе
		ПоказательМониторинга = СоздатьПоказательМониторинга();
	КонецЕсли;
	
	НовыйПоказатель	= Справочники.ПоказателиAPDEX.СоздатьЭлемент();
	НовыйПоказатель.АвтоМасштаб	= Истина;
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.Владелец = ПоказательМониторинга["СсылкаПоказательИнцидента"];
	Иначе
		НовыйПоказатель.Владелец = ПоказательМониторинга;
	КонецЕсли;
	
	НовыйПоказатель.ТипПоказателя = СтрокаДанных.ТипПоказателяПроизводительности;
	НовыйПоказатель.ПериодAPDEX	= СтрокаДанных.ПериодAPDEX;
	НовыйПоказатель.ГлубинаВыборки = СтрокаДанных.ГлубинаВыборки;
	НовыйПоказатель.КоличествоХудшихЗамеров	= СтрокаДанных.КоличествоХудшихЗамеров;
	НовыйПоказатель.ПорогПревышенияЦелевогоВремени = СтрокаДанных.ПорогПревышенияЦелевогоВремени;
	НовыйПоказатель.ДельтаСреднееВремяЗамера = СтрокаДанных.ДельтаСреднееВремяЗамера;
	НовыйПоказатель.МинимальноеКоличествоЗамеров = СтрокаДанных.МинимальноеКоличествоЗамеров;
	НовыйПоказатель.Описание = СтрокаДанных.Представление;
	
	НовыйПоказатель.ТипСпискаПользователей			= СтрокаДанных.ТипСпискаПользователей;
	Для Каждого СтрокаПользователь Из СтрокаДанных.Пользователи Цикл
		НоваяСтрока = НовыйПоказатель.Пользователи.Добавить();
		НоваяСтрока.ИмяПользователя = СтрокаПользователь.ИмяПользователя;
	КонецЦикла;
	
	Для Каждого СтрокаОперация Из СтрокаДанных.КлючевыеОперации Цикл
		НоваяСтрока										= НовыйПоказатель.КлючевыеОперации.Добавить();
		НоваяСтрока.ИдентификаторКлючевойОперации		= СтрокаОперация.ИдентификаторКлючевойОперации;
		НоваяСтрока.ИнформационнаяБаза					= СтрокаОперация.ИнформационнаяБаза;
	КонецЦикла;
	
	Если ЭтоПоказательИнцидента Тогда
		НовыйПоказатель.УстановитьСсылкуНового(Справочники.ПоказателиAPDEX.ПолучитьСсылку());
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, НовыйПоказатель);
		ПоказательМониторинга.Вставить("ПоказательXML", Поток.Закрыть());
		
		Поток = Новый ЗаписьXML();
		Поток.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(Поток, ПоказательМониторинга);
		Возврат Поток.Закрыть();
	Иначе
		НовыйПоказатель.Записать();
		
		ОбъектПоказательМониторинга = ПоказательМониторинга.ПолучитьОбъект();
		ОбъектПоказательМониторинга.Показатель = НовыйПоказатель.Ссылка;
		ОбъектПоказательМониторинга.Записать();
		
		Возврат ПоказательМониторинга;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовУсловиеСрабатыванияОбнаружения(ЭтотОбъект)
	
	Если ЭтотОбъект.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Больше") Тогда
		ЭтотОбъект.Элементы.ПорогДо.Видимость = Ложь;
		ЭтотОбъект.Элементы.СмещениеБазы.Видимость = Ложь;
		ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Очистить();
		ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Добавить(Ложь, "ед.");
	ИначеЕсли ЭтотОбъект.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Меньше") Тогда
		ЭтотОбъект.Элементы.ПорогДо.Видимость = Ложь;
		ЭтотОбъект.Элементы.СмещениеБазы.Видимость = Ложь;
		ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Очистить();
		ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Добавить(Ложь, "ед.");
	ИначеЕсли ЭтотОбъект.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Между") Тогда
		ЭтотОбъект.Элементы.ПорогДо.Видимость = Истина;
		ЭтотОбъект.Элементы.СмещениеБазы.Видимость = Ложь;
		ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Очистить();
		ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Добавить(Ложь, "ед.");
    ИначеЕсли ЭтотОбъект.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидыСравненияПоказателейОповещения.Изменился") Тогда
		ЭтотОбъект.Элементы.ПорогДо.Видимость = Ложь;
		ЭтотОбъект.Элементы.СмещениеБазы.Видимость = Истина;
		ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Очистить();
		ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Добавить(Ложь, "ед.");
		ЭтотОбъект.Элементы.ПорогВПроцентах.СписокВыбора.Добавить(Истина, "%");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНастроекКомпоновкиДанных()
	
	СтруктураНастроекКомпоновкиДанных = Неопределено;
	
	Для Каждого ЭлементНастройки Из СписокПоказателейДваУровня.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементНастройки) = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
			СтруктураНастроекКомпоновкиДанных = ЭлементНастройки;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураНастроекКомпоновкиДанных;
	
КонецФункции

&НаСервере
Процедура ОчиститьГруппировку()
	
	СтруктураНастроекКомпоновкиДанных = ПолучитьСтруктуруНастроекКомпоновкиДанных();
	СтруктураНастроекКомпоновкиДанных.Структура.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппировку()
	
	СтруктураНастроекКомпоновкиДанных = ПолучитьСтруктуруНастроекКомпоновкиДанных();
	
	ГруппировкаКомпоновкиДанных = Неопределено;
	Если СтруктураНастроекКомпоновкиДанных.Структура.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкаКомпоновкиДанных = СтруктураНастроекКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ПолеГруппировки = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование = Истина;
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Уровень1");
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТекущийТипПоказательСервер(ИмяТекущегоПоказателя)
	
	Если ИмяТекущегоПоказателя = "ТекущееЧислоВызововСервера" 
		ИЛИ ИмяТекущегоПоказателя = "ОценкаПользователей"
		ИЛИ ИмяТекущегоПоказателя = "СформированоОтчетов" 
		ИЛИ ИмяТекущегоПоказателя = "ЧислоСеансовПользователей"
		Тогда
		
		СписокПоказателейДваУровня.ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Базы.Кластер КАК Уровень1,
		|	Базы.ОбъектКонтроля КАК Уровень2,
		|	Базы.Кластер.Наименование КАК Уровень1Наименование,
		|	Базы.ОбъектКонтроля.Наименование КАК Уровень2Наименование,
		|	"""" КАК Идентификатор
		|
		|ИЗ
		|	РегистрСведений.ПараметрыИнформационныхБаз КАК Базы
		|
		|ГДЕ
		|	Базы.ОбъектКонтроля <> ЗНАЧЕНИЕ(Справочник.ОбъектыКонтроля.ПустаяСсылка)
		|	И Базы.ОбъектКонтроля <> Неопределено
		|	И Базы.ОбъектКонтроля ССЫЛКА Справочник.ОбъектыКонтроля
		|";
		
		ДобавитьГруппировку();
		
		СписокПоказателейДваУровня.ОсновнаяТаблица = "РегистрСведений.ПараметрыИнформационныхБаз";
		СписокПоказателейДваУровня.ДинамическоеСчитываниеДанных = Истина;
		
	ИначеЕсли ИмяТекущегоПоказателя = "ИспользованиеОперативнойПамятиПроцессамиКластера" Тогда 
		
		СписокПоказателейДваУровня.ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МониторингПроцессов.Кластер КАК Уровень1,
		|	МониторингПроцессов.Кластер.Наименование + "" \ "" + МониторингПроцессов.Сервер КАК Уровень1Наименование,
		|	Неопределено КАК Уровень2,
		|	"""" КАК Уровень2Наименование,
		|	МониторингПроцессов.Сервер КАК Идентификатор
		|ИЗ
		|	РегистрСведений.МониторингПроцессов КАК МониторингПроцессов
		|ГДЕ
		|	МониторингПроцессов.Кластер <> ЗНАЧЕНИЕ(Справочник.ОбъектыКонтроля.ПустаяСсылка)
		|	И МониторингПроцессов.Сервер <> """"
		|";
		
		ОчиститьГруппировку();
		
		СписокПоказателейДваУровня.ОсновнаяТаблица = "";
		СписокПоказателейДваУровня.ДинамическоеСчитываниеДанных = Ложь;
		
	ИначеЕсли ИмяТекущегоПоказателя = "ЧислоПаденийРабочихПроцессов"
		ИЛИ ИмяТекущегоПоказателя = "ЧислоИсключенийПоТехнологическомуЖурналу" Тогда
		
		СписокПоказателейДваУровня.ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыРабочихСерверов.Кластер КАК Уровень1,
		|	ПараметрыРабочихСерверов.ОбъектКонтроля КАК Уровень2,
		|	ПараметрыРабочихСерверов.Кластер.Наименование КАК Уровень1Наименование,
		|	ПараметрыРабочихСерверов.ОбъектКонтроля.Наименование КАК Уровень2Наименование,
		|	"""" КАК Идентификатор
		|
		|ИЗ
		|	РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
		|
		|ГДЕ
		|	ПараметрыРабочихСерверов.Кластер <> ЗНАЧЕНИЕ(Справочник.ОбъектыКонтроля.ПустаяСсылка)
		|	И НЕ ПараметрыРабочихСерверов.ОбъектКонтроля ССЫЛКА Справочник.ВидыОбъектовКонтроля
		|";
		
		ДобавитьГруппировку();
		
		СписокПоказателейДваУровня.ОсновнаяТаблица = "РегистрСведений.ПараметрыРабочихСерверов";
		СписокПоказателейДваУровня.ДинамическоеСчитываниеДанных = Истина;
		
	ИначеЕсли ИмяТекущегоПоказателя = "ПоказателиAPDEX" 
		ИЛИ ИмяТекущегоПоказателя = "ПоказателиСкоростиВыполненияТипичныхОпераций" 
		Тогда
		
		СписокПоказателейДваУровня.ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазыОперации.ИнформационнаяБаза КАК Уровень1,
		|	БазыОперации.Имя КАК Уровень2,
		|	БазыОперации.ИнформационнаяБаза.Наименование КАК Уровень1Наименование,
		|	БазыОперации.Имя КАК Уровень2Наименование,
		|	БазыОперации.УникальныйИдентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ОценкаПроизводительностиКлючевыеОперации КАК БазыОперации
		|
		|ГДЕ
		|	БазыОперации.ИнформационнаяБаза <> ЗНАЧЕНИЕ(Справочник.ОбъектыКонтроля.ПустаяСсылка)
		|";
		
		ДобавитьГруппировку();
		
		СписокПоказателейДваУровня.ОсновнаяТаблица = "РегистрСведений.ОценкаПроизводительностиКлючевыеОперации";
		СписокПоказателейДваУровня.ДинамическоеСчитываниеДанных = Истина;
		
	ИначеЕсли ИмяТекущегоПоказателя = "ПроцентДоступностиСервисаВсеРесурсы" Тогда
		
		СписокПоказателейДваУровня.ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Публикации.Ссылка КАК Уровень1,
		|	Публикации.Наименование КАК Уровень1Наименование,
		|	Неопределено КАК Уровень2,
		|	"""" КАК Уровень2Наименование,
		|	"""" КАК Идентификатор
		|ИЗ
		|	Справочник.Публикации КАК Публикации";
		
		ОчиститьГруппировку();
		
		СписокПоказателейДваУровня.ОсновнаяТаблица = "Справочник.Публикации";
		СписокПоказателейДваУровня.ДинамическоеСчитываниеДанных = Истина;
		
	ИначеЕсли ИмяТекущегоПоказателя = "ЧислоНовыхОбъектов" 
		ИЛИ ИмяТекущегоПоказателя = "ПроцентДоступностиСервисаВсеБазы" Тогда
		
		СписокПоказателейДваУровня.ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Базы.ОбъектКонтроля КАК Уровень1,
		|	Базы.ОбъектКонтроля.Наименование КАК Уровень1Наименование,
		|	Неопределено КАК Уровень2,
		|	"""" КАК Уровень2Наименование,
		|	"""" КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ПараметрыИнформационныхБаз КАК Базы
		|
		|ГДЕ
		|	Базы.ОбъектКонтроля <> ЗНАЧЕНИЕ(Справочник.ОбъектыКонтроля.ПустаяСсылка)
		|	И Базы.ОбъектКонтроля <> Неопределено
		|	И Базы.ОбъектКонтроля ССЫЛКА Справочник.ОбъектыКонтроля
		|";
		
		ОчиститьГруппировку();
		
		СписокПоказателейДваУровня.ОсновнаяТаблица = "РегистрСведений.ПараметрыИнформационныхБаз";
		СписокПоказателейДваУровня.ДинамическоеСчитываниеДанных = Истина;
		
	ИначеЕсли ИмяТекущегоПоказателя = "ЧислоНерешенныхПроблем" Тогда
		
		СписокПоказателейДваУровня.ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""Новые проблемы"" КАК Уровень1,
		|	""Новые проблемы"" КАК Уровень1Наименование,
		|	Неопределено КАК Уровень2,
		|	"""" КАК Уровень2Наименование,
		|	""Новые проблемы"" КАК Идентификатор
		|ИЗ
		|   (ВЫБРАТЬ 1) КАК ОднаЗапись";
		
		ОчиститьГруппировку();
		
		СписокПоказателейДваУровня.ОсновнаяТаблица = "";
		СписокПоказателейДваУровня.ДинамическоеСчитываниеДанных = Ложь;
		
	ИначеЕсли ИмяТекущегоПоказателя = "СкоростьРазбораПроблем" Тогда
		
		СписокПоказателейДваУровня.ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""Решенные проблемы"" КАК Уровень1,
		|	""Решенные проблемы"" КАК Уровень1Наименование,
		|	Неопределено КАК Уровень2,
		|	"""" КАК Уровень2Наименование,
		|	""Решенные проблемы"" КАК Идентификатор
		|ИЗ
		|   (ВЫБРАТЬ 1) КАК ОднаЗапись";
		
		ОчиститьГруппировку();
		
		СписокПоказателейДваУровня.ОсновнаяТаблица = "";
		СписокПоказателейДваУровня.ДинамическоеСчитываниеДанных = Ложь;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьТекущуюСтраницу(ИмяТекущегоПоказателя)
	
	Если ИмяТекущегоПоказателя = "ПоказателиСчетчиков" Тогда 
		Элементы.ГруппаСтраницыПоказателей.ТекущаяСтраница = Элементы.ГруппаСтраницаСчетчики;
		Элементы.СписокПоказателейСчетчикиОтбор.Видимость = Истина;
	Иначе
		Элементы.ГруппаСтраницыПоказателей.ТекущаяСтраница = Элементы.ГруппаСтраницаДваУровня;
		Элементы.СписокПоказателейСчетчикиОтбор.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьДополнительныеПараметры(ИмяТекущегоПоказателя)
	
	Элементы.ИнтервалУсреднения.Видимость = Ложь;
	Элементы.ТипОценки.Видимость = Ложь;
	Элементы.ГруппаПараметрыОценки.Видимость = Ложь;
	Элементы.ГруппаПользователи.Видимость = Ложь;
	Элементы.Аналитика.Видимость = Ложь;
	Элементы.Периодичность.Видимость = Ложь;
	Элементы.ТипПоказателяПроизводительности.Видимость = Ложь;
	Элементы.ТипПадения.Видимость = Ложь;
	Элементы.ГруппаПараметрыПоказателя.Видимость = Ложь;
    Элементы.ГруппаВидыПриложений.Видимость = Ложь;

	Если ИмяТекущегоПоказателя = "ОценкаПользователей" Тогда
		Элементы.ТипОценки.Видимость = Истина;
		Элементы.ГруппаПараметрыПоказателя.Видимость = Истина;
	ИначеЕсли ИмяТекущегоПоказателя = "ПроцентДоступностиСервисаВсеБазы" 
		ИЛИ ИмяТекущегоПоказателя = "ПроцентДоступностиСервисаВсеРесурсы"
		ИЛИ ИмяТекущегоПоказателя = "СформированоОтчетов"
		ИЛИ ИмяТекущегоПоказателя = "ЧислоИсключенийПоТехнологическомуЖурналу"
		ИЛИ ИмяТекущегоПоказателя = "ЧислоНовыхОбъектов"
		ИЛИ ИмяТекущегоПоказателя = "ЧислоНерешенныхПроблем"
		ИЛИ ИмяТекущегоПоказателя = "СкоростьРазбораПроблем" Тогда
		Элементы.ИнтервалУсреднения.Видимость = Истина;
		Элементы.ГруппаПараметрыПоказателя.Видимость = Истина;
	ИначеЕсли ИмяТекущегоПоказателя = "ЧислоПаденийРабочихПроцессов" Тогда 
		Элементы.ИнтервалУсреднения.Видимость = Истина;
		Элементы.ТипПадения.Видимость = Истина;
		Элементы.ГруппаПараметрыПоказателя.Видимость = Истина;
	ИначеЕсли ИмяТекущегоПоказателя = "ПоказателиAPDEX" Тогда 
		Элементы.ТипПоказателяПроизводительности.Видимость = Истина;
		Элементы.ГруппаПараметрыОценки.Видимость = Истина;
		Элементы.ГруппаПользователи.Видимость = Истина;
		Элементы.ГруппаПараметрыПоказателя.Видимость = Истина;
	ИначеЕсли ИмяТекущегоПоказателя = "ПоказателиСкоростиВыполненияТипичныхОпераций" Тогда
		Элементы.ГруппаПользователи.Видимость = Истина;
		Элементы.ГруппаПараметрыПоказателя.Видимость = Истина;
	ИначеЕсли ИмяТекущегоПоказателя = "ПоказателиСчетчиков" Тогда
		Элементы.Аналитика.Видимость = Истина;
		Элементы.Периодичность.Видимость = Истина;
		Элементы.ГруппаПараметрыПоказателя.Видимость = Истина;
    ИначеЕсли ИмяТекущегоПоказателя = "ЧислоСеансовПользователей" Тогда
        Элементы.ГруппаПараметрыПоказателя.Видимость = Истина;
        Элементы.ГруппаВидыПриложений.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюПараметров(ИмяТекущегоПоказателя)
	
	Если ИмяТекущегоПоказателя = "ПоказателиAPDEX" Тогда 
		
		Элементы.ДекорацияПериодAPDEX.Заголовок = "замеров";
		Элементы.ГлубинаВыборки.Видимость = Ложь;
		Элементы.ДекорацияГлубинаВыборки.Видимость = Ложь;
		Элементы.КоличествоХудшихЗамеров.Видимость = Ложь;
		Элементы.ПорогПревышенияЦелевогоВремени.Видимость = Ложь;
		Элементы.ДекорацияПорогПревышенияЦелевогоВремени.Видимость = Ложь;
		Элементы.ДельтаСреднееВремяЗамера.Видимость = Ложь;
		Элементы.ДекорацияЕдиницаПараметраПоказателя.Видимость = Ложь;
		Элементы.МинимальноеКоличествоЗамеров.Видимость = Ложь;
		
		Если ТипПоказателяПроизводительности = СтруктураТипыПоказателейПроизводительности.СреднееВремяХудшихЗамеров Тогда
			
			Элементы.КоличествоХудшихЗамеров.Видимость = Истина;
			Элементы.ДекорацияЕдиницаПараметраПоказателя.Видимость = Истина;
			
		ИначеЕсли ТипПоказателяПроизводительности = СтруктураТипыПоказателейПроизводительности.КоличествоОперацийПревышенияЦелевогоВремени Тогда
			
			Элементы.ПорогПревышенияЦелевогоВремени.Видимость = Истина;
			Элементы.ДекорацияПорогПревышенияЦелевогоВремени.Видимость = Истина;
			
		ИначеЕсли ТипПоказателяПроизводительности = СтруктураТипыПоказателейПроизводительности.ПроцентПользователейПревышенияЦелевогоВремени Тогда
			
			Элементы.ПорогПревышенияЦелевогоВремени.Видимость = Истина;
			Элементы.ДекорацияПорогПревышенияЦелевогоВремени.Видимость = Истина;
			
		ИначеЕсли ТипПоказателяПроизводительности = СтруктураТипыПоказателейПроизводительности.ПроцентПользователейИзмененияЦелевогоВремени Тогда
			
			Элементы.ДекорацияПериодAPDEX.Заголовок = "дней";
			Элементы.ГлубинаВыборки.Видимость = Истина;
			Элементы.ДекорацияГлубинаВыборки.Видимость = Истина;
			Элементы.ДельтаСреднееВремяЗамера.Видимость = Истина;
			Элементы.ДекорацияЕдиницаПараметраПоказателя.Видимость = Истина;
			Элементы.МинимальноеКоличествоЗамеров.Видимость = Истина;
			
		КонецЕсли;		
		
	КонецЕсли;
		
	Если ИмяТекущегоПоказателя = "ПоказателиAPDEX" ИЛИ ИмяТекущегоПоказателя = "ПоказателиСкоростиВыполненияТипичныхОпераций" Тогда
		
		Элементы.Пользователи.Видимость = (ТипСпискаПользователей <> ТипСпискаПользователейВсе);
		
    КонецЕсли;
    
    Если ИмяТекущегоПоказателя = "ЧислоПаденийРабочихПроцессов" Тогда
        Элементы.СписокПоказателейДваУровняПеренестиВВыбранныеГруппой.Видимость = Ложь;
    Иначе
        Элементы.СписокПоказателейДваУровняПеренестиВВыбранныеГруппой.Видимость = Истина;
    КонецЕсли;
    
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияAPDEXПоУмолчанию()
	
	ПериодAPDEX = 100;
	ГлубинаВыборки = 0;
	ДельтаСреднееВремяЗамера = 0;
	МинимальноеКоличествоЗамеров = 0;
	КоличествоХудшихЗамеров = 0;
	ПорогПревышенияЦелевогоВремени = 0;
	
	Если ТипПоказателяПроизводительности = ПредопределенноеЗначение("Перечисление.ТипыПоказателейПроизводительности.СреднееВремяХудшихЗамеров") Тогда
		КоличествоХудшихЗамеров = 100;
	ИначеЕсли ТипПоказателяПроизводительности = ПредопределенноеЗначение("Перечисление.ТипыПоказателейПроизводительности.КоличествоОперацийПревышенияЦелевогоВремени") Тогда
		ПорогПревышенияЦелевогоВремени = 4;
	ИначеЕсли ТипПоказателяПроизводительности = ПредопределенноеЗначение("Перечисление.ТипыПоказателейПроизводительности.ПроцентПользователейПревышенияЦелевогоВремени") Тогда
		ПорогПревышенияЦелевогоВремени = 4;
	ИначеЕсли ТипПоказателяПроизводительности = ПредопределенноеЗначение("Перечисление.ТипыПоказателейПроизводительности.ПроцентПользователейИзмененияЦелевогоВремени") Тогда
		ПериодAPDEX = 7;
		ГлубинаВыборки = 7;
		ДельтаСреднееВремяЗамера = 25;
		МинимальноеКоличествоЗамеров = 10;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСчетчикиСУчетомИерархии(МассивВыбранных)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("МассивВыбранных", МассивВыбранных);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыСчетчиков.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыСчетчиков КАК ГруппыСчетчиков
	|ГДЕ
	|	ГруппыСчетчиков.Ссылка В ИЕРАРХИИ(&МассивВыбранных)
	|	И НЕ 1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Справочник.ГруппыСчетчиков КАК ГруппыСчетчиковРодители ГДЕ ГруппыСчетчиковРодители.Родитель = ГруппыСчетчиков.Ссылка)
	|";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоказателиСУчетомИерархии(ИмяТекущегоПоказателя, МассивВыбранных)
	
	МассивПоказателей = Новый Массив();
	
	Если ИмяТекущегоПоказателя = "ТекущееЧислоВызововСервера" 
		ИЛИ ИмяТекущегоПоказателя = "ОценкаПользователей"
		ИЛИ ИмяТекущегоПоказателя = "ПроцентДоступностиСервисаВсеБазы" 
		ИЛИ ИмяТекущегоПоказателя = "СформированоОтчетов" 
		ИЛИ ИмяТекущегоПоказателя = "ЧислоСеансовПользователей"
		ИЛИ ИмяТекущегоПоказателя = "ЧислоНовыхОбъектов"
		Тогда
		
		МассивОбъектовКонтроля = Новый Массив();
		
		Для Каждого ВыбранныйПоказатель Из МассивВыбранных Цикл
			
			Если ТипЗнч(ВыбранныйПоказатель) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда

				Запрос = Новый Запрос();
				
				Запрос.УстановитьПараметр("Кластер", ВыбранныйПоказатель.Ключ);
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Базы.ОбъектКонтроля КАК ОбъектКонтроля
				|
				|ИЗ
				|	РегистрСведений.ПараметрыИнформационныхБаз КАК Базы
				|
				|ГДЕ
				|	Базы.ОбъектКонтроля <> ЗНАЧЕНИЕ(Справочник.ОбъектыКонтроля.ПустаяСсылка)
				|	И Базы.Кластер = &Кластер
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если МассивОбъектовКонтроля.Найти(Выборка.ОбъектКонтроля) = Неопределено Тогда
						МассивОбъектовКонтроля.Добавить(Выборка.ОбъектКонтроля);
					КонецЕсли;
					
				КонецЦикла;
				
				
			ИначеЕсли МассивОбъектовКонтроля.Найти(ВыбранныйПоказатель.ОбъектКонтроля) = Неопределено Тогда
				
				МассивОбъектовКонтроля.Добавить(ВыбранныйПоказатель.ОбъектКонтроля);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ОбъектКонтроля Из МассивОбъектовКонтроля Цикл
			МассивПоказателей.Добавить(Новый Структура("ОбъектКонтроля", ОбъектКонтроля));
		КонецЦикла;
		
	ИначеЕсли ИмяТекущегоПоказателя = "ПоказателиAPDEX" Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("ИнформационнаяБаза", Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля"));
		ТаблицаДанных.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
		
		Для Каждого ВыбранныйПоказатель Из МассивВыбранных Цикл
			
			Если ТипЗнч(ВыбранныйПоказатель) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда

				Запрос = Новый Запрос();
				
				Запрос.УстановитьПараметр("ИнформационнаяБаза", ВыбранныйПоказатель.Ключ);
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	БазыОперации.ИнформационнаяБаза КАК ИнформационнаяБаза,
				|	БазыОперации.УникальныйИдентификатор КАК УникальныйИдентификатор
				|ИЗ
				|	РегистрСведений.ОценкаПроизводительностиКлючевыеОперации КАК БазыОперации
				|ГДЕ
				|	БазыОперации.ИнформационнаяБаза = &ИнформационнаяБаза
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если ТаблицаДанных.НайтиСтроки(Новый Структура("ИнформационнаяБаза, УникальныйИдентификатор", Выборка.ИнформационнаяБаза, Выборка.УникальныйИдентификатор)).Количество() = 0 Тогда
						
						НоваяСтрока = ТаблицаДанных.Добавить();
						НоваяСтрока.ИнформационнаяБаза = Выборка.ИнформационнаяБаза;
						НоваяСтрока.УникальныйИдентификатор = Выборка.УникальныйИдентификатор;
						
					КонецЕсли;
					
				КонецЦикла;
				
				
			ИначеЕсли ТаблицаДанных.НайтиСтроки(Новый Структура("ИнформационнаяБаза, УникальныйИдентификатор", ВыбранныйПоказатель.ИнформационнаяБаза, ВыбранныйПоказатель.УникальныйИдентификатор)).Количество() = 0 Тогда
				
				НоваяСтрока = ТаблицаДанных.Добавить();
				НоваяСтрока.ИнформационнаяБаза = ВыбранныйПоказатель.ИнформационнаяБаза;
				НоваяСтрока.УникальныйИдентификатор = ВыбранныйПоказатель.УникальныйИдентификатор;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
			МассивПоказателей.Добавить(Новый Структура("ИнформационнаяБаза, УникальныйИдентификатор", СтрокаДанных.ИнформационнаяБаза, СтрокаДанных.УникальныйИдентификатор));
		КонецЦикла;
        
    ИначеЕсли ИмяТекущегоПоказателя = "ПоказателиСкоростиВыполненияТипичныхОпераций" Тогда
        
        ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("ИнформационнаяБаза", Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля"));
		ТаблицаДанных.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
        ТаблицаДанных.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
		
		Для Каждого ВыбранныйПоказатель Из МассивВыбранных Цикл
			
			Если ТипЗнч(ВыбранныйПоказатель) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда

				Запрос = Новый Запрос();
				
				Запрос.УстановитьПараметр("ИнформационнаяБаза", ВыбранныйПоказатель.Ключ);
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	БазыОперации.ИнформационнаяБаза КАК ИнформационнаяБаза,
				|	БазыОперации.УникальныйИдентификатор КАК УникальныйИдентификатор,
                |   БазыОперации.Имя КАК Имя
				|ИЗ
				|	РегистрСведений.ОценкаПроизводительностиКлючевыеОперации КАК БазыОперации
				|ГДЕ
				|	БазыОперации.ИнформационнаяБаза = &ИнформационнаяБаза
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если ТаблицаДанных.НайтиСтроки(Новый Структура("ИнформационнаяБаза, УникальныйИдентификатор", Выборка.ИнформационнаяБаза, Выборка.УникальныйИдентификатор)).Количество() = 0 Тогда
						
						НоваяСтрока = ТаблицаДанных.Добавить();
						НоваяСтрока.ИнформационнаяБаза = Выборка.ИнформационнаяБаза;
						НоваяСтрока.УникальныйИдентификатор = Выборка.УникальныйИдентификатор;
                        НоваяСтрока.Имя = Выборка.Имя;
						
					КонецЕсли;
					
				КонецЦикла;
				
				
			ИначеЕсли ТаблицаДанных.НайтиСтроки(Новый Структура("ИнформационнаяБаза, УникальныйИдентификатор", ВыбранныйПоказатель.ИнформационнаяБаза, ВыбранныйПоказатель.УникальныйИдентификатор)).Количество() = 0 Тогда
				
				НоваяСтрока = ТаблицаДанных.Добавить();
				НоваяСтрока.ИнформационнаяБаза = ВыбранныйПоказатель.ИнформационнаяБаза;
				НоваяСтрока.УникальныйИдентификатор = ВыбранныйПоказатель.УникальныйИдентификатор;
                
                ДанныеЗаписи = РегистрыСведений.ОценкаПроизводительностиКлючевыеОперации.ЗначениеПоКлючу(ВыбранныйПоказатель);
                НоваяСтрока.Имя = ДанныеЗаписи.Имя;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
			МассивПоказателей.Добавить(Новый Структура("ИнформационнаяБаза, Имя", СтрокаДанных.ИнформационнаяБаза, СтрокаДанных.Имя));
		КонецЦикла;
        
	ИначеЕсли ИмяТекущегоПоказателя = "ЧислоИсключенийПоТехнологическомуЖурналу" 
		ИЛИ ИмяТекущегоПоказателя = "ЧислоПаденийРабочихПроцессов" Тогда
		
		МассивТиповСервер = Новый Массив();
		МассивТиповСервер.Добавить(Тип("Строка"));
		МассивТиповСервер.Добавить(Тип("СправочникСсылка.ОбъектыКонтроля"));
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Кластер", Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля"));
		ТаблицаДанных.Колонки.Добавить("РабочийСервер", Новый ОписаниеТипов(МассивТиповСервер));
		
		Для Каждого ВыбранныйПоказатель Из МассивВыбранных Цикл
			
			Если ТипЗнч(ВыбранныйПоказатель) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда

				Запрос = Новый Запрос();
				
				Запрос.УстановитьПараметр("Кластер", ВыбранныйПоказатель.Ключ);
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ПараметрыРабочихСерверов.Кластер КАК Кластер,
				|	ПараметрыРабочихСерверов.ОбъектКонтроля КАК РабочийСервер
				|ИЗ
				|	РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
				|ГДЕ
				|	ПараметрыРабочихСерверов.Кластер = &Кластер
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если ТаблицаДанных.НайтиСтроки(Новый Структура("Кластер, РабочийСервер", Выборка.Кластер, Выборка.РабочийСервер)).Количество() = 0 Тогда
						
						НоваяСтрока = ТаблицаДанных.Добавить();
						НоваяСтрока.Кластер = Выборка.Кластер;
						НоваяСтрока.РабочийСервер = Выборка.РабочийСервер;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Запрос = Новый Запрос();
				
				Запрос.УстановитьПараметр("ОбъектКонтроля", ВыбранныйПоказатель.ОбъектКонтроля);
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ПараметрыРабочихСерверов.Кластер КАК Кластер,
				|	ПараметрыРабочихСерверов.ОбъектКонтроля КАК РабочийСервер
				|ИЗ
				|	РегистрСведений.ПараметрыРабочихСерверов КАК ПараметрыРабочихСерверов
				|ГДЕ
				|	ПараметрыРабочихСерверов.ОбъектКонтроля = &ОбъектКонтроля
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() И ТаблицаДанных.НайтиСтроки(Новый Структура("Кластер, РабочийСервер", Выборка.Кластер, Выборка.РабочийСервер)).Количество() = 0 Тогда
				
					НоваяСтрока = ТаблицаДанных.Добавить();
					НоваяСтрока.Кластер = Выборка.Кластер;
					НоваяСтрока.РабочийСервер = Выборка.РабочийСервер;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
			МассивПоказателей.Добавить(Новый Структура("Кластер, РабочийСервер", СтрокаДанных.Кластер, СтрокаДанных.РабочийСервер));
		КонецЦикла;

		
	ИначеЕсли ИмяТекущегоПоказателя = "ИспользованиеОперативнойПамятиПроцессамиКластера" Тогда
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("Кластер", Новый ОписаниеТипов("СправочникСсылка.ОбъектыКонтроля"));
		ТаблицаДанных.Колонки.Добавить("РабочийСервер", Новый ОписаниеТипов("Строка"));
		
		Для Каждого ВыбранныйПоказатель Из МассивВыбранных Цикл
			
			Если ТаблицаДанных.НайтиСтроки(Новый Структура("Кластер, РабочийСервер", ВыбранныйПоказатель.Кластер, ВыбранныйПоказатель.РабочийСервер)).Количество() = 0 Тогда
				
				НоваяСтрока = ТаблицаДанных.Добавить();
				НоваяСтрока.Кластер = ВыбранныйПоказатель.Кластер;
				НоваяСтрока.РабочийСервер = ВыбранныйПоказатель.РабочийСервер;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
			МассивПоказателей.Добавить(Новый Структура("Кластер, РабочийСервер", СтрокаДанных.Кластер, СтрокаДанных.РабочийСервер));
		КонецЦикла;
		
	ИначеЕсли ИмяТекущегоПоказателя = "ЧислоНерешенныхПроблем" ИЛИ ИмяТекущегоПоказателя = "СкоростьРазбораПроблем" Тогда
		
		МассивПоказателей.Добавить(Новый Структура("Показатель", ИмяТекущегоПоказателя));
		
	КонецЕсли;
	
	Возврат МассивПоказателей;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивВыбранныхПоказателей(ИмяТекущегоПоказателя)
	
	МассивВыбранных = Новый Массив();
	
	Если ИмяТекущегоПоказателя = "ПоказателиСчетчиков" Тогда 
		
		Для Каждого ВыбраннаяСтрока Из Элементы.СписокПоказателейСчетчики.ВыделенныеСтроки Цикл
			МассивВыбранных.Добавить(ВыбраннаяСтрока);
		КонецЦикла;
		
		МассивВыбранных = ПолучитьСчетчикиСУчетомИерархии(МассивВыбранных);
		
	ИначеЕсли ИмяТекущегоПоказателя = "ИспользованиеОперативнойПамятиПроцессамиКластера" Тогда 
		
		МассивВыделенныеСтроки = Новый Массив();
		Для Каждого ВыбраннаяСтрока Из Элементы.СписокПоказателейДваУровня.ВыделенныеСтроки Цикл
			МассивВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
		КонецЦикла;
		
		Для Каждого ВыбраннаяСтрока Из МассивВыделенныеСтроки Цикл
			
			Элементы.СписокПоказателейДваУровня.ТекущаяСтрока = ВыбраннаяСтрока;
			
			СтруктураДанных = Новый Структура("Кластер, РабочийСервер");
			СтруктураДанных.Кластер = Элементы.СписокПоказателейДваУровня.ТекущиеДанные.Уровень1;
			СтруктураДанных.РабочийСервер = Элементы.СписокПоказателейДваУровня.ТекущиеДанные.Идентификатор;
			МассивВыбранных.Добавить(СтруктураДанных);
			
		КонецЦикла;
	ИначеЕсли ИмяТекущегоПоказателя = "ПроцентДоступностиСервисаВсеРесурсы" Тогда
		
		Для Каждого ВыбраннаяСтрока Из Элементы.СписокПоказателейДваУровня.ВыделенныеСтроки Цикл
			МассивВыбранных.Добавить(ВыбраннаяСтрока);
		КонецЦикла;
            
	Иначе
		
		Для Каждого ВыбраннаяСтрока Из Элементы.СписокПоказателейДваУровня.ВыделенныеСтроки Цикл
			МассивВыбранных.Добавить(ВыбраннаяСтрока);
		КонецЦикла;
		
		МассивВыбранных = ПолучитьПоказателиСУчетомИерархии(ИмяТекущегоПоказателя, МассивВыбранных);

	КонецЕсли;
	
	Возврат МассивВыбранных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеИнформационныхБазИзСтруктуры(МассивПоказателейГруппы)
	
	ИнформационныеБазыПредставление = "";
	Для Каждого СтруктураПоказатель Из МассивПоказателейГруппы Цикл
		
		ИнформационныеБазыПредставление = ИнформационныеБазыПредставление + 
			?(ЗначениеЗаполнено(ИнформационныеБазыПредставление), ", ", "") + 
			СокрЛП(СтруктураПоказатель.ОбъектКонтроля);
			
	КонецЦикла;
	
	Возврат ИнформационныеБазыПредставление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеИнформационныхБазИзРегистра(МассивПоказателейГруппы)
	
	МассивБаз = Новый Массив();
	ИнформационныеБазыПредставление = "";
	
	Для Каждого КлючЗаписиПоказатель Из МассивПоказателейГруппы Цикл
		
		ИнформационныеБазыПредставление = ИнформационныеБазыПредставление + 
			?(ЗначениеЗаполнено(ИнформационныеБазыПредставление), ", ", "") + 
			СокрЛП(КлючЗаписиПоказатель.ОбъектКонтроля);
			
		МассивБаз.Добавить(КлючЗаписиПоказатель.ОбъектКонтроля);
			
	КонецЦикла;
	
	Возврат Новый Структура("Представление, МассивБаз", ИнформационныеБазыПредставление, МассивБаз);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКлючевойОперации(УникальныйИдентификатор)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("УникальныйИдентификатор", Новый УникальныйИдентификатор(УникальныйИдентификатор));
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОценкаПроизводительностиКлючевыеОперации.Имя
	|ИЗ
	|	РегистрСведений.ОценкаПроизводительностиКлючевыеОперации КАК ОценкаПроизводительностиКлючевыеОперации
	|ГДЕ
	|	ОценкаПроизводительностиКлючевыеОперации.УникальныйИдентификатор = &УникальныйИдентификатор
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Имя;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставленияСпискаСервисов(МассивПоказателейГруппы)
	
	СервисыПредставление = "";
	Для Каждого Показатель Из МассивПоказателейГруппы Цикл
		
		СервисыПредставление = СервисыПредставление + 
			?(ЗначениеЗаполнено(СервисыПредставление), ", ", "") + 
			СокрЛП(Показатель);
			
	КонецЦикла;
	
	Возврат СервисыПредставление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаОпераций(МассивПоказателейГруппы)
	
	КлючевыеОперацииПредставление = "";
	Для Каждого СтруктураПоказатель Из МассивПоказателейГруппы Цикл
		
		КлючевыеОперацииПредставление = КлючевыеОперацииПредставление + 
			?(ЗначениеЗаполнено(КлючевыеОперацииПредставление), "; ", "") + 
			ПолучитьИмяКлючевойОперации(СтруктураПоказатель.УникальныйИдентификатор) + ", " + СокрЛП(СтруктураПоказатель.ИнформационнаяБаза);
			
	КонецЦикла;
	
	Возврат КлючевыеОперацииПредставление;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеПоказателя(СтрокаПоказатель, МассивПоказателейГруппы, ЭтоГруппа)
	
	Представление = "";
	
	Если СтрокаПоказатель.ТипПоказателя = "ТекущееЧислоВызововСервера" Тогда
		
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
			" (информационные базы = [" + ПолучитьПредставлениеИнформационныхБазИзСтруктуры(МассивПоказателейГруппы) + "])";
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ОценкаПользователей" Тогда
		
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
			" (" + СтрокаПоказатель.ТипОценкиПредставление + ", информационные базы = [" + 
			ПолучитьПредставлениеИнформационныхБазИзСтруктуры(МассивПоказателейГруппы) + "])";
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПроцентДоступностиСервисаВсеБазы" Тогда
		
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
			" (" + СокрЛП(СтрокаПоказатель.ИнтервалУсреднения) + ", информационные базы = [" + 
			ПолучитьДанныеИнформационныхБазИзРегистра(МассивПоказателейГруппы).Представление + "])";
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "СформированоОтчетов" Тогда
		
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
			" (" + СокрЛП(СтрокаПоказатель.ИнтервалУсреднения) + ", информационные базы = [" + 
			ПолучитьДанныеИнформационныхБазИзРегистра(МассивПоказателейГруппы).Представление + "])";
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ЧислоСеансовПользователей" Тогда
		
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
			" (информационные базы = [" + ПолучитьПредставлениеИнформационныхБазИзСтруктуры(МассивПоказателейГруппы) + "])";
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ЧислоПаденийРабочихПроцессов" Тогда
		
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
			" " + нрег(СокрЛП(СтрокаПоказатель.ТипПадения)) + 
			" (сервер " + СокрЛП(МассивПоказателейГруппы[0].РабочийСервер) + ")";
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ЧислоИсключенийПоТехнологическомуЖурналу" Тогда
			
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
					" " + СокрЛП(СтрокаПоказатель.ИнтервалУсреднения) +
					" (кластер " + СокрЛП(МассивПоказателейГруппы[0].Кластер) + ", сервер " + СокрЛП(МассивПоказателейГруппы[0].РабочийСервер) + ")";
					
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПоказателиСкоростиВыполненияТипичныхОпераций" Тогда
		
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
					" " + СокрЛП(СтрокаПоказатель.ИнтервалУсреднения) +
					" (" + СокрЛП(МассивПоказателейГруппы[0].ИнформационнаяБаза) + ", " + МассивПоказателейГруппы[0].Имя + ")";
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПроцентДоступностиСервисаВсеРесурсы" Тогда
		
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
					" " + СокрЛП(СтрокаПоказатель.ИнтервалУсреднения) +
					" (" + ПолучитьПредставленияСпискаСервисов(МассивПоказателейГруппы) + ")";
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ЧислоНовыхОбъектов" Тогда
		
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
					" " + СокрЛП(СтрокаПоказатель.ИнтервалУсреднения) +
					" (информационные базы = [" + ПолучитьДанныеИнформационныхБазИзРегистра(МассивПоказателейГруппы).Представление + "])";
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ЧислоНерешенныхПроблем" Тогда
		
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
					" " + СокрЛП(СтрокаПоказатель.ИнтервалУсреднения);
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "СкоростьРазбораПроблем" Тогда
		
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
					" " + СокрЛП(СтрокаПоказатель.ИнтервалУсреднения);
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПоказателиAPDEX" Тогда
		
		Представление = СтрокаПоказатель.ТипПоказателяПредставление + 
					" (операции: [" + ПолучитьПредставлениеСпискаОпераций(МассивПоказателейГруппы) + "], период = " + Формат(ПериодAPDEX, "ЧГ=0") + ")";
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПоказателиСчетчиков" Тогда

		Если ЭтоГруппа Тогда
			Представление = "Новая группа [" + СокрЛП(Элементы.Аналитика.СписокВыбора.НайтиПоЗначению(Аналитика).Представление) + "]";
		Иначе
			Представление = СокрЛП(МассивПоказателейГруппы[0]) + " [" + СокрЛП(Элементы.Аналитика.СписокВыбора.НайтиПоЗначению(Аналитика).Представление) + "]";
		КонецЕсли;
					
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура НастроитьФормуСервер(ИмяТекущегоПоказателя)
	
	ИмяАктивногоПоказателя = ИмяТекущегоПоказателя;
	
	УправлениеВидимостьюПараметров(ИмяТекущегоПоказателя);
	ИзменитьТекущийТипПоказательСервер(ИмяТекущегоПоказателя);
	ОтобразитьТекущуюСтраницу(ИмяТекущегоПоказателя);
	ОтобразитьДополнительныеПараметры(ИмяТекущегоПоказателя);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТекстЗапросаСчетчики(Отображение)
	
	Если Отображение = ОтображениеТаблицы.Список Тогда
		ЭтотОбъект.СписокПоказателейСчетчики.ТекстЗапроса = "
		|ВЫБРАТЬ
		|	СправочникГруппыСчетчиков.Родитель,
		|	СправочникГруппыСчетчиков.Ссылка,
		|	СправочникГруппыСчетчиков.ПолныйКодДляПоиска КАК Идентификатор,
		|	СправочникГруппыСчетчиков.ПолныйКодДляПоиска КАК Наименование
		|ИЗ
		|	Справочник.ГруппыСчетчиков КАК СправочникГруппыСчетчиков
		|";
	ИначеЕсли Отображение = ОтображениеТаблицы.ИерархическийСписок Тогда
		ЭтотОбъект.СписокПоказателейСчетчики.ТекстЗапроса = "
		|ВЫБРАТЬ
		|	СправочникГруппыСчетчиков.Родитель,
		|	СправочникГруппыСчетчиков.Ссылка,
		|	СправочникГруппыСчетчиков.ПолныйКодДляПоиска КАК Идентификатор,
		|	СправочникГруппыСчетчиков.КодДляПоиска КАК Наименование
		|ИЗ
		|	Справочник.ГруппыСчетчиков КАК СправочникГруппыСчетчиков
		|";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СериализоватьОтбор(Знач Отбор)
	Поток = Новый ЗаписьXML();
 	Поток.УстановитьСтроку();
 	СериализаторXDTO.ЗаписатьXML(Поток, Отбор);
 	Возврат Поток.Закрыть();
КонецФункции

&НаКлиенте
Процедура ТипПоказателяПроизводительностиПриИзменении(Элемент)
    
    ТекущиеДанныеТипПоказателя = ЭтотОбъект.ТипыПоказателей;
    Если ТекущиеДанныеТипПоказателя = Неопределено Тогда
        Возврат;
    КонецЕсли;
    	
	УстановитьЗначенияAPDEXПоУмолчанию();
	УправлениеВидимостьюПараметров(ТекущиеДанныеТипПоказателя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСпискаПользователейПриИзменении(Элемент)
	
	ТекущиеДанныеТипПоказателя = ЭтотОбъект.ТипыПоказателей;
    Если ТекущиеДанныеТипПоказателя = Неопределено Тогда
        Возврат;
    КонецЕсли;
	
	УправлениеВидимостьюПараметров(ТекущиеДанныеТипПоказателя);
	
КонецПроцедуры

&НаСервере
Функция СоздатьПоказательМониторинга()
	
	НовыйПоказатель				= Справочники.ПоказателиМониторинга.СоздатьЭлемент();
	НовыйПоказатель.Владелец	= Профиль;
		
	ГСЧ		= Новый ГенераторСлучайныхЧисел;
	Красный	= ГСЧ.СлучайноеЧисло(0, 255);
	Зеленый	= ГСЧ.СлучайноеЧисло(0, 255);
	Синий	= ГСЧ.СлучайноеЧисло(0, 255);
	
	НовыйПоказатель.Цвет							= ЗначениеВСтрокуВнутр(Новый Цвет(Красный, Зеленый, Синий));
	НовыйПоказатель.АвтоМасштаб						= Истина;
	НовыйПоказатель.Масштаб							= 1;
	НовыйПоказатель.ТипЛинии						= "Сплошная";
	НовыйПоказатель.ТолщинаЛинии					= 2;
	НовыйПоказатель.ПоказыватьТренд					= Ложь;
	НовыйПоказатель.КоличествоУсредняемыхЗначений	= 10;
	НовыйПоказатель.ТипСглаживания					= Перечисления.ТипыСглаживания.СкользящееСреднее;
	
	НовыйПоказатель.Записать();
	
	Возврат НовыйПоказатель.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьПоказательИнцидента()
    
    ПараметрыСоздания = Новый Структура;
    ПараметрыСоздания.Вставить("Владелец", Профиль);
    ПараметрыСоздания.Вставить("Функция", ЭтотОбъект.Функция);
    ПараметрыСоздания.Вставить("ИнтервалРасчета", ЭтотОбъект.ИнтервалРасчета);
    ПараметрыСоздания.Вставить("ЕдиницаВремениИнтервалаРасчета", ЭтотОбъект.ЕдиницаВремениИнтервалаРасчета);
    ПараметрыСоздания.Вставить("ФорматнаяСтрокаЗначения", ЭтотОбъект.ФорматнаяСтрокаЗначения);
    ПараметрыСоздания.Вставить("ВидСравнения", ЭтотОбъект.ВидСравнения);
    ПараметрыСоздания.Вставить("Порог", ЭтотОбъект.Порог);
    ПараметрыСоздания.Вставить("ПорогВПроцентах", ЭтотОбъект.ПорогВПроцентах);
    ПараметрыСоздания.Вставить("СравниватьСПрошлым", ЭтотОбъект.СравниватьСПрошлым);
    ПараметрыСоздания.Вставить("СмещениеБазы", ЭтотОбъект.СмещениеБазы);
    
    ПоказательРезультат = Справочники.ПоказателиИнцидентов.СоздатьЭлементXML(ПараметрыСоздания);
    		
	Возврат ПоказательРезультат;
		
КонецФункции

&НаСервере
Процедура ДобавитьПоказательВДерево(СтрокаТипПоказателя, СтрокиПоказателей, МассивПоказателейГруппы, ЭтоГруппа)
	
	СтрокаПоказатель = СтрокиПоказателей.ПолучитьЭлементы().Добавить();
	СтрокаПоказатель.ТипПоказателя = СтрокаТипПоказателя.Имя;
	СтрокаПоказатель.ТипПоказателяПредставление = СтрокаТипПоказателя.Представление;
	
	Если СтрокаПоказатель.ТипПоказателя = "ОценкаПользователей" Тогда
		
		СтрокаПоказатель.ТипОценки = ТипОценки;
		СтрокаПоказатель.ТипОценкиПредставление = Элементы.ТипОценки.СписокВыбора.НайтиПоЗначению(ТипОценки).Представление;
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПроцентДоступностиСервисаВсеБазы" 
		ИЛИ СтрокаПоказатель.ТипПоказателя = "ПроцентДоступностиСервисаВсеРесурсы"
		ИЛИ СтрокаПоказатель.ТипПоказателя = "СформированоОтчетов"
		ИЛИ СтрокаПоказатель.ТипПоказателя = "ЧислоНовыхОбъектов"
		ИЛИ СтрокаПоказатель.ТипПоказателя = "ЧислоНерешенныхПроблем"
		ИЛИ СтрокаПоказатель.ТипПоказателя = "СкоростьРазбораПроблем"
		Тогда
	
		СтрокаПоказатель.ИнтервалУсреднения = ИнтервалУсреднения;
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ЧислоПаденийРабочихПроцессов" Тогда
		
		СтрокаПоказатель.ИнтервалУсреднения = ИнтервалУсреднения;
		СтрокаПоказатель.ТипПадения = ТипПадения;
		СтрокаПоказатель.Сервер = МассивПоказателейГруппы[0].РабочийСервер;
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ИспользованиеОперативнойПамятиПроцессамиКластера" Тогда
        
        Для Каждого СтруктураПоказатель Из МассивПоказателейГруппы Цикл
            НоваяСтрока = СтрокаПоказатель.ИспользованиеОперативнойПамятиПроцессами.Добавить();
			НоваяСтрока.Кластер = СтруктураПоказатель.Кластер;
			НоваяСтрока.РабочийСервер = СтруктураПоказатель.РабочийСервер;
        КонецЦикла;
        
        СтрокаПоказатель.Представление = "Использование оперативной памяти процессами кластера";
        СтрокаПоказатель.ПредставлениеКраткое = СтрокаПоказатель.Представление;
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ЧислоИсключенийПоТехнологическомуЖурналу" Тогда
		
		СтрокаПоказатель.ИнтервалУсреднения = ИнтервалУсреднения;
        
        Для Каждого СтруктураПоказатель Из МассивПоказателейГруппы Цикл
            НоваяСтрока = СтрокаПоказатель.ИспользованиеОперативнойПамятиПроцессами.Добавить();
			НоваяСтрока.Кластер = СтруктураПоказатель.Кластер;
			НоваяСтрока.РабочийСервер = СтруктураПоказатель.РабочийСервер;
        КонецЦикла;
        
        СтрокаПоказатель.Представление = "Число исключений по технологическому журналу";
        СтрокаПоказатель.ПредставлениеКраткое = СтрокаПоказатель.Представление;
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПоказателиAPDEX" Тогда 
		
		СтрокаПоказатель.ТипПоказателяПроизводительности = ТипПоказателяПроизводительности;
		СтрокаПоказатель.ПериодAPDEX = ПериодAPDEX;
		СтрокаПоказатель.ГлубинаВыборки = ГлубинаВыборки;
		СтрокаПоказатель.КоличествоХудшихЗамеров = КоличествоХудшихЗамеров;
		СтрокаПоказатель.ПорогПревышенияЦелевогоВремени = ПорогПревышенияЦелевогоВремени;
		СтрокаПоказатель.ДельтаСреднееВремяЗамера = ДельтаСреднееВремяЗамера;
		СтрокаПоказатель.МинимальноеКоличествоЗамеров = МинимальноеКоличествоЗамеров;
		
		СтрокаПоказатель.ТипСпискаПользователей = ТипСпискаПользователей;
		Для Каждого СтрокаПользователь Из Пользователи Цикл
			НоваяСтрока = СтрокаПоказатель.Пользователи.Добавить();
			НоваяСтрока.ИмяПользователя = СтрокаПользователь.ИмяПользователя;
		КонецЦикла;
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПоказателиСкоростиВыполненияТипичныхОпераций" Тогда
        
        ИнформационныеБазыУникальные = Новый Соответствие;
        КлючевыеОперацииУникальные = Новый Соответствие;
        Для Каждого ТекЭлемент Из МассивПоказателейГруппы Цикл
            ИнформационныеБазыУникальные.Вставить(ТекЭлемент.ИнформационнаяБаза);
            КлючевыеОперацииУникальные.Вставить(ТекЭлемент.Имя);
        КонецЦикла;
        
        Для Каждого ТекИнформационнаяБаза Из ИнформационныеБазыУникальные Цикл
            НовСтрока = СтрокаПоказатель.ИнформационныеБазы.Добавить();
            НовСтрока.ИнформационнаяБазаСсылка = ТекИнформационнаяБаза.Ключ;
        КонецЦикла;
        
        Для Каждого ТекКлючеваяОперация Из КлючевыеОперацииУникальные Цикл
            НовСтрока = СтрокаПоказатель.КлючевыеОперации.Добавить();
            НовСтрока.Имя = ТекКлючеваяОперация.Ключ;
        КонецЦикла;
                        
		СтрокаПоказатель.ТипСпискаПользователей = ТипСпискаПользователей;
		Для Каждого Пользователь Из Пользователи Цикл
			НоваяСтрока = СтрокаПоказатель.Пользователи.Добавить();
			НоваяСтрока.Пользователь = Пользователь;
		КонецЦикла;
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПоказателиСчетчиков" Тогда
		
		СтрокаПоказатель.Аналитика = Аналитика;
		СтрокаПоказатель.Периодичность = Периодичность;
        
    ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ЧислоСеансовПользователей" Тогда
        
        Для Каждого ТекВидПриложения Из ЭтотОбъект.ВидыПриложений Цикл
            Если ТекВидПриложения.Использовать Тогда
                СтрокаПоказатель.ВидыПриложений.Добавить(ТекВидПриложения.ВидПриложения);
            КонецЕсли;
        КонецЦикла;
               
	КонецЕсли;
	
	Если СтрокаПоказатель.ТипПоказателя <> "ИспользованиеОперативнойПамятиПроцессамиКластера" Тогда
		СтрокаПоказатель.Представление = ПолучитьПредставлениеПоказателя(СтрокаПоказатель, МассивПоказателейГруппы, ЭтоГруппа);
        СтрокаПоказатель.ПредставлениеКраткое = СтрокаПоказатель.Представление;
	КонецЕсли;
	
	Если СтрокаПоказатель.ТипПоказателя = "ТекущееЧислоВызововСервера"
		ИЛИ СтрокаПоказатель.ТипПоказателя = "ОценкаПользователей" 
		ИЛИ СтрокаПоказатель.ТипПоказателя = "ЧислоСеансовПользователей" Тогда
		
		Для Каждого СтруктураПоказатель Из МассивПоказателейГруппы Цикл
			НоваяСтрока = СтрокаПоказатель.ИнформационныеБазы.Добавить();
			НоваяСтрока.ИнформационнаяБазаСсылка = СтруктураПоказатель.ОбъектКонтроля;
		КонецЦикла;
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПроцентДоступностиСервисаВсеБазы" 
		ИЛИ СтрокаПоказатель.ТипПоказателя = "СформированоОтчетов" 
		ИЛИ СтрокаПоказатель.ТипПоказателя = "ЧислоНовыхОбъектов" Тогда
		
		МассивБаз = ПолучитьДанныеИнформационныхБазИзРегистра(МассивПоказателейГруппы).МассивБаз;
		Для Каждого ИнформационнаяБаза Из МассивБаз Цикл
			НоваяСтрока = СтрокаПоказатель.ИнформационныеБазы.Добавить();
			НоваяСтрока.ИнформационнаяБазаСсылка = ИнформационнаяБаза;
		КонецЦикла;
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПроцентДоступностиСервисаВсеРесурсы" Тогда
		
		Для Каждого Ресурс Из МассивПоказателейГруппы Цикл
			НоваяСтрока = СтрокаПоказатель.Ресурсы.Добавить();
			НоваяСтрока.Ресурс = Ресурс;
		КонецЦикла;
		
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПоказателиAPDEX" Тогда
		
		Для Каждого СтруктураПоказатель Из МассивПоказателейГруппы Цикл
			НоваяСтрока = СтрокаПоказатель.КлючевыеОперации.Добавить();
			НоваяСтрока.ИдентификаторКлючевойОперации = СтруктураПоказатель.УникальныйИдентификатор;
			НоваяСтрока.ИнформационнаяБаза = СтруктураПоказатель.ИнформационнаяБаза;
		КонецЦикла;
	
	ИначеЕсли СтрокаПоказатель.ТипПоказателя = "ПоказателиСчетчиков" Тогда
		
		Для Каждого Счетчик Из МассивПоказателейГруппы Цикл
			НоваяСтрока = СтрокаПоказатель.Счетчики.Добавить();
			НоваяСтрока.Счетчик = Счетчик;
			НоваяСтрока.Группа = СтрокаПоказатель.Представление;
		КонецЦикла;
		
	КонецЕсли;	
	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоказателиВДерево(ТекущиеДанныеТипПоказателя, МассивВыбранныхПоказателей, ЭтоГруппа = Ложь)
	
	Если ЭтоГруппа Тогда
		
		ДобавитьПоказательВДерево(ТекущиеДанныеТипПоказателя, ДеревоВыбранныхПоказателей, МассивВыбранныхПоказателей, ЭтоГруппа);
		
	Иначе
		
		Для Каждого Показатель Из МассивВыбранныхПоказателей Цикл
			
			МассивОдинПоказатель = Новый Массив();
			МассивОдинПоказатель.Добавить(Показатель);
			
			ДобавитьПоказательВДерево(ТекущиеДанныеТипПоказателя, ДеревоВыбранныхПоказателей, МассивОдинПоказатель, ЭтоГруппа);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти




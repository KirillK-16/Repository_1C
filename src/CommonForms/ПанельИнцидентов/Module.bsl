
#Область ПеременныеКлиента

&НаКлиенте
Перем УникальныйИдентификаторЗадания, ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Если ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
        
        ЭтотОбъект.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
        Элементы.грГоризонтальная.Видимость = Ложь;
        Элементы.СписокМобильныйКлиент.Видимость = Истина;
        
    КонецЕсли;
    
    Если НЕ ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
        
        МинимальныйУровень	= Перечисления.УровниИнцидентов.Информация;
        ОбновитьПараметрыСписка();
        
        Если ПустаяСтрока(ОтображатьТолько) Тогда
            ОтображатьТолько = "* Все";
        КонецЕсли;
        
        ЭтотОбъект.Элементы.ФормаСправка.Видимость = Ложь;
        
        ПолучитьСписок();
        ЭтотОбъект.ПериодОбновления = ПолучитьПериодОбновления();
        
        Элементы.СписокМобильныйКлиент.Видимость = Ложь;
        
    КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    #Если НЕ МобильныйКлиент Тогда
	    ПодключитьОбработчикОжидания("ОбновитьСПериодомОбновления", ЭтотОбъект.ПериодОбновления, Ложь);
    #КонецЕсли
    	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьПанельИнцидентов" Тогда
		ПолучитьСписок();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ЭтотОбъект.Элементы.Список.АвтоОбновление = ЭтотОбъект.АвтообновлениеСписка;
    ПолучитьСписок();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗабратьИнцидентСебе(Команда)
	ЗабратьИнцидентСебеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПередатьСотруднику(Команда)
	
	МожноПривязатьТипИнцидента = Ложь;
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередатьСотрудникуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительно(Команда)
    
    УникальныйИдентификаторЗадания = ЗакрытьПринудительноНаСервере();	
    ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, УникальныйИдентификаторЗадания);
    ПодключитьОбработчикОжидания("ЗакрытьПринудительноЗавершение", 0.5, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительноВсе(Команда)
    
    УникальныйИдентификаторЗадания = ЗакрытьПринудительноВсеНаСервере(Истина);
    ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, УникальныйИдентификаторЗадания);
    ПодключитьОбработчикОжидания("ЗакрытьПринудительноЗавершение", 0.5, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительносНеАктуальные(Команда)
    
    УникальныйИдентификаторЗадания = ЗакрытьПринудительноВсеНаСервере(Ложь);
    ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, УникальныйИдентификаторЗадания);
    ПодключитьОбработчикОжидания("ЗакрытьПринудительноЗавершение", 0.5, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ПолучитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
    ОткрытьФорму("ОбщаяФорма.ФормаКонстантПериодОбновленияПанелиМониторингаИнцидентов");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПринудительно(Команда)
    ОткрытьПринудительноНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтображатьТолькоПриИзменении(Элемент)
	
	ПолучитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретОчисткиЭлемента(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МинимальныйУровеньПриИзменении(Элемент)
	
	ПолучитьСписок();
			
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьНеАктуальныеПриИзменении(Элемент)
    ПолучитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьАрхивныеПриИзменении(Элемент)
	
	ПолучитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеСпискаПриИзменении(Элемент)
	ЭтотОбъект.Элементы.Список.АвтоОбновление = ЭтотОбъект.АвтообновлениеСписка;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    Если Поле.Имя = "ВыводДиаграммы" Тогда
        
        ТекДанные = Элемент.ТекущиеДанные;
        ДатаНачала = ТекДанные.ДатаОткрытияПовторная - 600;
        Если ТекДанные.ДатаЗакрытия <> Дата(1,1,1) Тогда
            ДатаОкончания = ТекДанные.ДатаЗакрытия + 600;
        Иначе
            ДатаОкончания = ТекущаяДата();
        КонецЕсли;
                
        Если ТипЗнч(ТекДанные.ИсточникИнцидента) = Тип("СправочникСсылка.ПоказателиСчетчиков") Тогда
            
            Ссылки = СчетчикиПоказателя(ТекДанные.ИсточникИнцидента);
            ОбщийКлиент.ДиаграммаОбщаяСчетчикиПроизводительности(Ссылки, ДатаНачала, ДатаОкончания, ТекДанные.ИсточникИнцидента);
            
        ИначеЕсли ТипЗнч(ТекДанные.ИсточникИнцидента) = Тип("СправочникСсылка.ГруппыСчетчиков") Тогда
            
            Ссылки = Новый Массив;
            Ссылки.Добавить(ТекДанные.ИсточникИнцидента);
            ОбщийКлиент.ДиаграммаОбщаяСчетчикиПроизводительности(Ссылки, ДатаНачала, ДатаОкончания, ТекДанные.ИсточникИнцидента);
            
        КонецЕсли;
        
        СтандартнаяОбработка = Ложь;
        
    ИначеЕсли Поле.Имя = "ПредставлениеНавигационнойСсылкиИсточника" Тогда
        
        Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.НавигационнаяСсылкаИсточника) Тогда
            
            ПерейтиПоНавигационнойСсылке(Элемент.ТекущиеДанные.НавигационнаяСсылкаИсточника);
            
        КонецЕсли;
                
        СтандартнаяОбработка = Ложь;
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция СчетчикиПоказателя(Ссылка)
    Возврат Справочники.ПоказателиСчетчиков.СчетчикиПоказателя(Ссылка); 
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекущихОтветственных()
	
	Результат = Новый Массив();
	Результат.Добавить(ПараметрыСеанса.ТекущийПользователь);
	
	ВыборкаРолейПользователя = УправлениеЗадачами.ВыборкаРолейПользователей(
		Новый Структура("Пользователь", ПараметрыСеанса.ТекущийПользователь)
	);
	Пока ВыборкаРолейПользователя.Следующий() Цикл
		Результат.Добавить(ВыборкаРолейПользователя.Роль);
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ОбновитьПараметрыСписка()
	Список.Параметры.УстановитьЗначениеПараметра("Сейчас", ТекущаяДатаСеанса());
	
	
    ЭлементОтбора = Список.Параметры.Элементы.Найти("КодыИнцидентов");
    Если ЭлементОтбора <> Неопределено Тогда
        ЭлементОтбора.Использование = Ложь;
    КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("НормативМинутВРаботе", ИнцидентыСервер.НормативМинутНаРаботуСИнцидентом());
	
	Список.Отбор.Элементы.Очистить();
    
    ГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
    ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
    
	Эл = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УровеньИнцидентаОтбор");
	Эл.ПравоеЗначение = ПорядокУровняТипаИнцидента(МинимальныйУровень);
	Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
    
    МассивСтатусов = ИнцидентыСервер.МассивСтатусов(НЕ ОтображатьАрхивные);
    Если ОтображатьНеАктуальные Тогда
        МассивСтатусов.Добавить(Перечисления.СтатусыИнцидентов.Неактуальный);
    КонецЕсли;
    
	Эл = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	Эл.ПравоеЗначение = МассивСтатусов;
	Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	Если ОтображатьТолько = "* Мои" Тогда
		Эл = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ответственный");
		Эл.ПравоеЗначение = ПолучитьТекущихОтветственных();
		Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ИначеЕсли ОтображатьТолько = "* Не взятые в работу" Тогда
		Эл = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ответственный");
		Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ИначеЕсли НЕ ПустаяСтрока(ОтображатьТолько) Тогда
		СсылкаПользователя = Справочники.Пользователи.НайтиПоНаименованию(ОтображатьТолько);
		Если НЕ СсылкаПользователя.Пустая() Тогда
			Эл = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Эл.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ответственный");
			Эл.ПравоеЗначение = СсылкаПользователя;
			Эл.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//форматирует отрезов времени в секундах в виде : "2 сут 3 ч 40 мин"
Функция ФорматОтрезкаВремени(Знач Секунд, ОтображатьСутки = Ложь) Экспорт
	
	Если ТипЗнч(Секунд)<>Тип("Число") ИЛИ Секунд=0 Тогда
		Возврат "";
	КонецЕсли;
	
	Р = "";
	
	Если ОтображатьСутки И Секунд >= 86400 Тогда
		Суток = Цел(Секунд / 86400);
		Р = Формат(Суток, "ЧДЦ=; ЧГ=0") + НСтр("ru = ' сут '");
		Секунд = Секунд - (Суток * 86400);
	КонецЕсли;
	
	Если Секунд >= 3600 Тогда
		Часов = Цел(Секунд / 3600);
		Р = Р + Формат(Часов, "ЧДЦ=; ЧГ=0") + НСтр("ru = ' ч '");
		Секунд = Секунд - (Часов * 3600);
	КонецЕсли;
	
	Минут = Цел(Секунд / 60);
	Р = Р + Формат(Минут, "ЧЦ=2; ЧДЦ=; ЧН=00; ЧВН=; ЧГ=0") + НСтр("ru = ' мин'");
	
	Возврат СокрЛП(Р);
	
КонецФункции

&НаСервере
Процедура ПривязатьТипыКОтветственному(ВыделенныеСтроки, Ответственный)
	
	Для Каждого ТекСсылка из ВыделенныеСтроки Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСсылка.ТипИнцидента.Ответственный) Тогда
			Инцидент = ТекСсылка.ТипИнцидента.ПолучитьОбъект();
			Инцидент.Ответственный = Ответственный;
			Инцидент.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПериодОбновления()
	
	Значение = Константы.ПериодОбновленияПанелиМониторингаИнцидентов.Получить();
	Если Значение = 0 Тогда
		Константы.ПериодОбновленияПанелиМониторингаИнцидентов.Установить(20);
		Возврат 20;
	КонецЕсли;
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Процедура ПередатьСотрудникуЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия)=Тип("СправочникСсылка.Пользователи") Тогда
        
        УказатьНовыйСтатусДляСписка(Элементы.Список.ВыделенныеСтроки, ПредопределенноеЗначение("Перечисление.СтатусыИнцидентов.ВзятоВРаботу"), РезультатЗакрытия,,0);
		ПолучитьСписок();
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередатьСотрудникуЗавершениеВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПривязатьТипыКОтветственному(Элементы.Список.ВыделенныеСтроки, ДополнительныеПараметры);	
	КонецЕсли;
	ПолучитьСписок();
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписок()
    
    Замер = ВнутренниеЗамеры.НачатьЗамер("ПанельИнцидентов.ПолучитьСписок");
    
	// сохраняем выбранную ссылку для дальнейшего позиционирования
	Если Элементы.Список.ТекущаяСтрока <> неопределено Тогда
		ВыбранныйРанееИнцидент = Элементы.Список.ТекущаяСтрока;
	КонецЕсли;
	
	ОбновитьПараметрыСписка();
	
	Элементы.ОтображатьТолько.СписокВыбора.Очистить();
	Элементы.ОтображатьТолько.СписокВыбора.Добавить("* Все");
	Элементы.ОтображатьТолько.СписокВыбора.Добавить("* Мои");
	Элементы.ОтображатьТолько.СписокВыбора.Добавить("* Не взятые в работу");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Инциденты.Ответственный.Наименование КАК Отв
	|ИЗ
	|	РегистрСведений.Инциденты КАК Инциденты
	|ГДЕ
	|	Инциденты.Статус В(&Статусы)
	|	И НЕ Инциденты.Ответственный ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("Статусы", ИнцидентыСервер.МассивСтатусов(Истина));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ПустаяСтрока(Выборка.Отв) Тогда
			Элементы.ОтображатьТолько.СписокВыбора.Добавить(Выборка.Отв);
		КонецЕсли;
	КонецЦикла;
	
	// восстанавливаем ссылку, если нашли ее в выборке
	Если ВыбранныйРанееИнцидент <> неопределено Тогда
		Попытка
			Элементы.Список.ТекущаяСтрока = ВыбранныйРанееИнцидент;
		Исключение
		КонецПопытки;
    КонецЕсли;
    
    ВнутренниеЗамеры.ЗавершитьЗамер(Замер);
			
КонецПроцедуры

&НаСервере
Процедура УказатьНовыйСтатусДляСписка(Знач СтрокиСписка, НовыйСтатус, НовыйОтветственный = неопределено, ДатаЗакрытия = неопределено, Часов)
	
	Для Каждого СтрокаСписка из СтрокиСписка Цикл
        
        Если ТипЗнч(СтрокаСписка) = Тип("РегистрСведенийКлючЗаписи.Инциденты") Тогда
            ИнцидентыСервер.УказатьНовыйСтатусДляИнцидента(
                СтрокаСписка.Инцидент, 
                СтрокаСписка.ТипИнцидента,
                НовыйСтатус, 
                НовыйОтветственный, 
                ДатаЗакрытия, 
                Часов);
        КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗабратьИнцидентСебеНаСервере()
	УказатьНовыйСтатусДляСписка(Элементы.Список.ВыделенныеСтроки, ПредопределенноеЗначение("Перечисление.СтатусыИнцидентов.ВзятоВРаботу"), , , 0);
	ПолучитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура ПроигнорироватьЧас(Команда)
	УказатьНовыйСтатусДляСписка(Элементы.Список.ВыделенныеСтроки, ПредопределенноеЗначение("Перечисление.СтатусыИнцидентов.Проигнорировано"), , ТекущаяДата(), 1);
	ПолучитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура Проигнорировать3Часа(Команда)
	УказатьНовыйСтатусДляСписка(Элементы.Список.ВыделенныеСтроки,ПредопределенноеЗначение("Перечисление.СтатусыИнцидентов.Проигнорировано"),,ТекущаяДата(), 3);
	ПолучитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура ПроигнорироватьСутки(Команда)
	УказатьНовыйСтатусДляСписка(Элементы.Список.ВыделенныеСтроки,ПредопределенноеЗначение("Перечисление.СтатусыИнцидентов.Проигнорировано"),,ТекущаяДата(), 24);
	ПолучитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура ПроигнорироватьНеделя(Команда)
	УказатьНовыйСтатусДляСписка(Элементы.Список.ВыделенныеСтроки,ПредопределенноеЗначение("Перечисление.СтатусыИнцидентов.Проигнорировано"),,ТекущаяДата(), 24*7);
	ПолучитьСписок();
КонецПроцедуры

&НаСервере
Функция ЗакрытьПринудительноНаСервере()
    
    ТЗнИнциденты = Новый ТаблицаЗначений;
    ТЗнИнциденты.Колонки.Добавить("Инцидент");
    ТЗнИнциденты.Колонки.Добавить("ТипИнцидента");
    
    Для Каждого ТекИнцидент Из Элементы.Список.ВыделенныеСтроки Цикл
        НовСтрока = ТЗнИнциденты.Добавить();
        ЗаполнитьЗначенияСвойств(НовСтрока, ТекИнцидент);
    КонецЦикла;
        
    ПараметрыЗапуска = Новый Структура("Контекст, ИмяПроцедуры, Инциденты, Все", "ИнцидентыСерверСлужебный", "ЗакрытьПринудительноВсеНаСервереВФоне", ТЗнИнциденты, Истина);
    ПараметрыЗапускаМассив = Новый Массив;
    ПараметрыЗапускаМассив.Добавить(ПараметрыЗапуска);
    ФоновоеЗадание = ФоновыеЗадания.Выполнить("ДлительныеОперации.ВыполнитьВФоне", ПараметрыЗапускаМассив,,"Длительная операция панели инцидентов");
    
    Возврат ФоновоеЗадание.УникальныйИдентификатор;
    
КонецФункции

&НаСервере
Процедура ОткрытьПринудительноНаСервере()
	УказатьНовыйСтатусДляСписка(Элементы.Список.ВыделенныеСтроки, Перечисления.СтатусыИнцидентов.НовыйИнцидент,,ТекущаяДата(),0);
	ПолучитьСписок();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПорядокУровняТипаИнцидента(Запись)
	Возврат Перечисления.УровниИнцидентов.Индекс(Запись);
КонецФункции

&НаКлиенте
Процедура ОбновитьСПериодомОбновления()
	Если НЕ АвтообновлениеСписка Тогда
		Возврат;
	КонецЕсли;
	ПолучитьСписок(); 
КонецПроцедуры

&НаСервере
Функция ЗакрытьПринудительноВсеНаСервере(Все)
    
    ДопПоля = Новый Массив;
    ДопПоля.Добавить("Инцидент");
    ДопПоля.Добавить("Статус");
    Инциденты = ФункцииСКД.ПолучитьТаблицуЗначенийЭлементаДинамическогоСписка(ЭтотОбъект.Элементы.Список, ДопПоля);
        
    ПараметрыЗапуска = Новый Структура("Контекст, ИмяПроцедуры, Инциденты, Все", "ИнцидентыСерверСлужебный", "ЗакрытьПринудительноВсеНаСервереВФоне", Инциденты, Все);
    ПараметрыЗапускаМассив = Новый Массив;
    ПараметрыЗапускаМассив.Добавить(ПараметрыЗапуска);
    ФоновоеЗадание = ФоновыеЗадания.Выполнить("ДлительныеОперации.ВыполнитьВФоне", ПараметрыЗапускаМассив);
    
    Возврат ФоновоеЗадание.УникальныйИдентификатор;
        
КонецФункции

&НаКлиенте
Процедура ИсторияИнцидента(Команда)
    
    ТекДанные = Элементы.Список.ТекущиеДанные;
    
    Если ТекДанные.Свойство("Инцидент") Тогда
        ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Инцидент, ТипИнцидента", ТекДанные.Инцидент, ТекДанные.ТипИнцидента));
        ОткрытьФорму("РегистрСведений.ИнцидентыИстория.ФормаСписка", ПараметрыФормы,,Новый УникальныйИдентификатор);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительноЗавершение() Экспорт
    
    Состояние = ПолучитьСостояниеФоновогоЗадания(УникальныйИдентификаторЗадания);
    
    Если Состояние = "Задание выполняется" Тогда
        ПодключитьОбработчикОжидания("ЗакрытьПринудительноЗавершение", 1, Истина);    
    ИначеЕсли Состояние = "Задание выполнено" Тогда
        ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
        Обновить(Неопределено);
    ИначеЕсли Состояние = "Задание завершено с ошибками" Тогда
        ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
        Обновить(Неопределено);
    ИначеЕсли Состояние = "Задание отменено пользователем" Тогда
        ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
        Обновить(Неопределено);
    КонецЕсли;
        
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеФоновогоЗадания(УникальныйИдентификаторФоновогоЗадания)
    
    ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторФоновогоЗадания);
    
    Если ФоновоеЗадание <> Неопределено Тогда
        Возврат Строка(ФоновоеЗадание.Состояние);
    Иначе
        ВызватьИсключение("Не найдено фоновое задание с идентификатором " + УникальныйИдентификаторФоновогоЗадания);
    КонецЕсли;
        
КонецФункции

#КонецОбласти
